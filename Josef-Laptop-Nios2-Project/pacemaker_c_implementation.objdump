
pacemaker_c_implementation.elf:     file format elf32-littlenios2
pacemaker_c_implementation.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00017560 memsz 0x00017560 flags r-x
    LOAD off    0x00018580 vaddr 0x00817580 paddr 0x00819258 align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x0001af30 vaddr 0x0081af30 paddr 0x0081af30 align 2**12
         filesz 0x00000000 memsz 0x00000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016bfc  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000740  00816e40  00816e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  00817580  00819258  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000184  0081af30  0081af30  0001af30  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081b0b4  0081b0b4  0001a258  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0001a258  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001a258  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011a8  00000000  00000000  0001a280  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002dc10  00000000  00000000  0001b428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b504  00000000  00000000  00049038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000edf8  00000000  00000000  0005453c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002af0  00000000  00000000  00063334  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004a8c  00000000  00000000  00065e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018793  00000000  00000000  0006a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00083044  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a30  00000000  00000000  000830a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00088ab5  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00088ab8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00088abb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00088abc  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00088abd  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00088ac6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00088acf  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00088ad8  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000030  00000000  00000000  00088ae4  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  00088b14  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00816e40 l    d  .rodata	00000000 .rodata
00817580 l    d  .rwdata	00000000 .rwdata
0081af30 l    d  .bss	00000000 .bss
0081b0b4 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Projects/University/303-Assignment/pacemaker_c_implementation_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 buttons_test.c
00000000 l    df *ABS*	00000000 lcd_control.c
00000000 l    df *ABS*	00000000 led_control.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 switches.c
00000000 l    df *ABS*	00000000 uart_test.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00817580 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00808068 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081713a l     O .rodata	00000010 zeroes.4404
0080a694 l     F .text	000000bc __sbprintf
0081714a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0080a958 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080c488 l     F .text	00000008 __fp_unlock
0080c49c l     F .text	0000019c __sinit.part.1
0080c638 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00817dcc l     O .rwdata	00000020 lc_ctype_charset
00817dac l     O .rwdata	00000020 lc_message_charset
00817dec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00817178 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080f0dc l     F .text	000000fc __sprint_r.part.0
008172ac l     O .rodata	00000010 blanks.4348
0081729c l     O .rodata	00000010 zeroes.4349
00810668 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00812ccc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00812dd8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00812e04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00813070 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00813150 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081323c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00813410 l     F .text	0000003c alt_get_errno
0081344c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00813664 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00819244 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00813a54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00813b88 l     F .text	00000034 alt_dev_reg
00817fcc l     O .rwdata	00001060 jtag_uart
0081902c l     O .rwdata	00000120 lcd
0081914c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00813eb0 l     F .text	0000020c altera_avalon_jtag_uart_irq
008140bc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00819250 l     O .rwdata	00000004 colstart
008146f4 l     F .text	000000b8 lcd_write_command
008147ac l     F .text	000000d8 lcd_write_data
00814884 l     F .text	000000d0 lcd_clear_screen
00814954 l     F .text	000001ec lcd_repaint_screen
00814b40 l     F .text	000000cc lcd_scroll_up
00814c0c l     F .text	000002ac lcd_handle_escape
00815390 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008155d0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00815880 l     F .text	0000009c altera_avalon_uart_irq
0081591c l     F .text	000000e4 altera_avalon_uart_rxirq
00815a00 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00815b9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00815db4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00815fe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00816694 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008173ff l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081af88 g     O .bss	00000004 alt_instruction_exception_handler
0081af3e g     O .bss	00000001 a_pace_led_timer_already_started
00807f7c g     F .text	00000018 putchar
0080e6e8 g     F .text	00000074 _mprec_log10
008004f8 g     F .text	00000080 clear_green_leds_4_to_7
0080e7d4 g     F .text	0000008c __any_on
0080d34c g     F .text	00000054 _isatty_r
00817184 g     O .rodata	00000028 __mprec_tinytens
0081334c g     F .text	0000007c alt_main
00807f94 g     F .text	000000c0 _puts_r
0081afb4 g     O .bss	00000100 alt_irq
0080d47c g     F .text	00000060 _lseek_r
00819258 g       *ABS*	00000000 __flash_rwdata_start
0080c828 g     F .text	000000ac __sflags
00812380 g     F .text	00000088 .hidden __eqdf2
0081b0b4 g       *ABS*	00000000 __alt_heap_start
00810c4c g     F .text	0000009c _wcrtomb_r
00808384 g     F .text	0000005c __sseek
0080c7d8 g     F .text	00000010 __sinit
00810724 g     F .text	00000140 __swbuf_r
0080d3a0 g     F .text	0000007c _setlocale_r
0080c640 g     F .text	00000068 __sfmoreglue
008133ec g     F .text	00000024 __malloc_unlock
0081af4c g     O .bss	00000004 a_timer_count
008012e0 g     F .text	00000058 clear_sense_led_events
0080d708 g     F .text	0000015c memmove
0080047c g     F .text	0000007c clear_green_leds_0_to_3
0080c7c0 g     F .text	00000018 _cleanup
0080d864 g     F .text	000000a8 _Balloc
00800598 g     F .text	000000e0 buttons_interrupts_function
0080603c g     F .text	000000dc .hidden __gtdf2
00816804 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
0081af39 g     O .bss	00000001 ventricular_sense_paced
00800020 g       *ABS*	00000000 __flash_exceptions_start
008072c8 g     F .text	0000005c _fstat_r
0081af54 g     O .bss	00000004 errno
00808300 g     F .text	00000008 __seofread
0081af78 g     O .bss	00000004 alt_argv
00821210 g       *ABS*	00000000 _gp
008167d4 g     F .text	00000030 usleep
00805444 g     F .text	000001c0 reset
00817e4c g     O .rwdata	00000180 alt_fd_list
00807f74 g     F .text	00000008 _putchar_r
008006a0 g     F .text	00000028 v_pace_led_timer_isr_function
00816184 g     F .text	00000090 alt_find_dev
0080d5c0 g     F .text	00000148 memcpy
0080c490 g     F .text	0000000c _cleanup_r
00806b08 g     F .text	000000dc .hidden __floatsidf
00816758 g     F .text	0000007c alt_io_redirect
00806118 g     F .text	000000f4 .hidden __ltdf2
00816e40 g       *ABS*	00000000 __DTOR_END__
00808054 g     F .text	00000014 puts
00816a10 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080ef8c g     F .text	00000074 __fpclassifyd
0080e644 g     F .text	000000a4 __ratio
0081064c g     F .text	0000001c __vfiprintf_internal
008142b4 g     F .text	0000021c altera_avalon_jtag_uart_read
008119dc g     F .text	00000064 .hidden __udivsi3
008130ac g     F .text	000000a4 isatty
008171d4 g     O .rodata	000000c8 __mprec_tens
0080d41c g     F .text	0000000c __locale_charset
00816980 g     F .text	00000090 alt_icache_flush
00800804 g     F .text	00000040 v_events_timer_isr_function
0081af60 g     O .bss	00000004 __malloc_top_pad
00801338 g     F .text	000000c4 c_mode_pacemaker
00819220 g     O .rwdata	00000004 __mb_cur_max
0081af37 g     O .bss	00000001 ventricular_sense
0080d44c g     F .text	0000000c _localeconv_r
0080dc70 g     F .text	0000003c __i2b
0080cd08 g     F .text	000004bc __sfvwrite_r
00808258 g     F .text	00000054 _sbrk_r
00800678 g     F .text	00000028 a_pace_led_timer_isr_function
0080e9c8 g     F .text	00000060 _read_r
00819238 g     O .rwdata	00000004 alt_max_fd
00810940 g     F .text	000000f0 _fclose_r
0080c458 g     F .text	00000030 fflush
0081af5c g     O .bss	00000004 __malloc_max_sbrked_mem
00812ef0 g     F .text	00000180 alt_irq_register
00805790 g     F .text	000008ac .hidden __adddf3
0080e3ec g     F .text	0000010c __b2d
008113ac g     F .text	00000538 .hidden __umoddi3
00813278 g     F .text	000000d4 lseek
008006f0 g     F .text	00000028 v_sense_led_timer_isr_function
00819210 g     O .rwdata	00000004 _global_impure_ptr
0080ea28 g     F .text	00000564 _realloc_r
0081b0b4 g       *ABS*	00000000 __bss_end
008165a4 g     F .text	000000f0 alt_iic_isr_register
0081394c g     F .text	00000108 alt_tick
00810e34 g     F .text	00000578 .hidden __udivdi3
00810ba8 g     F .text	00000024 _fputwc_r
008171ac g     O .rodata	00000028 __mprec_bigtens
0080da54 g     F .text	00000104 __s2b
00806be4 g     F .text	000000a8 .hidden __floatunsidf
0080e12c g     F .text	00000060 __mcmp
008157d4 g     F .text	000000ac altera_avalon_uart_init
0080c7f8 g     F .text	00000018 __fp_lock_all
00816558 g     F .text	0000004c alt_ic_irq_enabled
008138b0 g     F .text	0000009c alt_alarm_stop
0081af38 g     O .bss	00000001 atrial_sense_paced
0081af70 g     O .bss	00000004 alt_irq_active
0081af31 g     O .bss	00000001 implementation_mode
00806e68 g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00817e24 g     O .rwdata	00000028 alt_dev_null
00815f9c g     F .text	00000048 alt_dcache_flush_all
0080db58 g     F .text	00000068 __hi0bits
00812b20 g     F .text	00000080 .hidden __fixdfsi
0081af36 g     O .bss	00000001 atrial_sense
00819258 g       *ABS*	00000000 __ram_rwdata_end
00819230 g     O .rwdata	00000008 alt_dev_list
00813a90 g     F .text	000000f8 write
0080e860 g     F .text	000000a0 _putc_r
00817580 g       *ABS*	00000000 __ram_rodata_end
00812e40 g     F .text	000000b0 fstat
00806e24 g     F .text	00000024 fprintf
00806118 g     F .text	000000f4 .hidden __ledf2
008006c8 g     F .text	00000028 a_sense_led_timer_isr_function
0080dea4 g     F .text	00000140 __pow5mult
0081af44 g     O .bss	00000001 implementation_switched_flag
0080f1f0 g     F .text	0000145c ___vfiprintf_internal_r
0081af6c g     O .bss	00000004 __nlocale_changed
00811a40 g     F .text	00000058 .hidden __umodsi3
0081b0b4 g       *ABS*	00000000 end
00814eb8 g     F .text	000004d8 altera_avalon_lcd_16207_write
008072ac g     F .text	0000001c fseeko
00801228 g     F .text	00000060 send_ventricular_event
00815df0 g     F .text	000001ac altera_avalon_uart_write
00806e4c g     F .text	0000001c fseek
00813df0 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00816e40 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081af30 g     O .bss	00000001 pulse_mode
00815648 g     F .text	0000007c alt_avalon_timer_sc_init
00815724 g     F .text	00000060 altera_avalon_uart_write_fd
00806c8c g     F .text	00000064 .hidden __clzsi2
00815784 g     F .text	00000050 altera_avalon_uart_close_fd
008144d0 g     F .text	00000224 altera_avalon_jtag_uart_write
0080c7e8 g     F .text	00000004 __sfp_lock_acquire
0080d4dc g     F .text	000000e4 memchr
00808480 g     F .text	000021f8 ___vfprintf_internal_r
0080c9f8 g     F .text	00000310 _free_r
0081af50 g     O .bss	00000004 v_timer_count
0080d428 g     F .text	00000010 __locale_mb_cur_max
00816c8c g     F .text	00000180 __call_exitprocs
0081af68 g     O .bss	00000004 __mlocale_changed
00819218 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
008007c4 g     F .text	00000040 a_events_timer_isr_function
0081af80 g     O .bss	00000004 _alt_tick_rate
0080dfe4 g     F .text	00000148 __lshift
0081af84 g     O .bss	00000004 _alt_nticks
008136a0 g     F .text	000000fc read
00813bf4 g     F .text	00000098 alt_sys_init
00801288 g     F .text	00000058 clear_pace_led_events
00807f14 g     F .text	00000060 _open_r
00816b74 g     F .text	00000118 __register_exitproc
0081af35 g     O .bss	00000001 v_is_paced
0080dcac g     F .text	000001f8 __multiply
0081415c g     F .text	00000068 altera_avalon_jtag_uart_close
00817580 g       *ABS*	00000000 __ram_rwdata_start
00816e40 g       *ABS*	00000000 __ram_rodata_start
0081af8c g     O .bss	00000028 __malloc_current_mallinfo
0080e4f8 g     F .text	0000014c __d2b
00813c8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081631c g     F .text	000000a4 alt_get_fd
00816828 g     F .text	00000158 alt_busy_sleep
0080a904 g     F .text	00000054 _close_r
00816af8 g     F .text	0000007c memcmp
00813d4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081b0b4 g       *ABS*	00000000 __alt_stack_base
00813d9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00807324 g     F .text	000000cc _fwrite_r
0080a7b0 g     F .text	00000154 __swsetup_r
00805604 g     F .text	0000018c tick
00811a98 g     F .text	000008e8 .hidden __divdf3
0080c6a8 g     F .text	00000118 __sfp
0080e75c g     F .text	00000078 __copybits
008179a4 g     O .rwdata	00000408 __malloc_av_
0080c7f4 g     F .text	00000004 __sinit_lock_release
00812408 g     F .text	00000718 .hidden __muldf3
008082ac g     F .text	00000054 __sread
0081af42 g     O .bss	00000001 print_flag
00816214 g     F .text	00000108 alt_find_file
00816020 g     F .text	000000a4 alt_dev_llist_insert
008133c8 g     F .text	00000024 __malloc_lock
00806dfc g     F .text	00000028 _fprintf_r
00813800 g     F .text	000000b0 sbrk
0080c3fc g     F .text	0000005c _fflush_r
0081087c g     F .text	000000c4 _calloc_r
00806de4 g     F .text	00000018 fopen
0081af32 g     O .bss	00000001 atrial_event
0081af30 g       *ABS*	00000000 __bss_start
00807dec g     F .text	00000128 memset
00800884 g     F .text	00000944 main
0081af7c g     O .bss	00000004 alt_envp
0081af58 g     O .bss	00000004 __malloc_max_total_mem
00813cec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00810864 g     F .text	00000018 __swbuf
0081543c g     F .text	00000134 altera_avalon_lcd_16207_init
008083e0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00810a30 g     F .text	00000014 fclose
0080ab58 g     F .text	00001688 _dtoa_r
008075e0 g     F .text	0000080c _malloc_r
00810da8 g     F .text	00000030 __ascii_wctomb
0081923c g     O .rwdata	00000004 alt_errno
0080d1c4 g     F .text	000000c4 _fwalk
00800718 g     F .text	000000ac uart_read_isr_function
0080e900 g     F .text	000000c8 putc
008118e4 g     F .text	00000084 .hidden __divsi3
0080c8d4 g     F .text	00000124 _malloc_trim_r
00816e40 g       *ABS*	00000000 __CTOR_END__
0081af3d g     O .bss	00000001 led_sense_ventricular_event
0080f000 g     F .text	000000dc strcmp
00816e40 g       *ABS*	00000000 __flash_rodata_start
00816e40 g       *ABS*	00000000 __DTOR_LIST__
00812380 g     F .text	00000088 .hidden __nedf2
00813bbc g     F .text	00000038 alt_irq_init
0081379c g     F .text	00000064 alt_release_fd
00816fef g     O .rodata	00000100 .hidden __clz_tab
0081af64 g     O .bss	00000004 _PathLocale
00816aac g     F .text	00000014 atexit
0080a750 g     F .text	00000060 _write_r
0080d458 g     F .text	00000018 setlocale
00800290 g     F .text	000000f0 print_modes_to_lcd
00819214 g     O .rwdata	00000004 _impure_ptr
0081af74 g     O .bss	00000004 alt_argc
0080c1e0 g     F .text	0000021c __sflush_r
00816124 g     F .text	00000060 _do_dtors
0080d444 g     F .text	00000008 __locale_cjk_lang
00806e48 g     F .text	00000004 _fseek_r
00800844 g     F .text	00000040 system_timer_isr_function
00808084 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
0080e388 g     F .text	00000064 __ulp
0080c810 g     F .text	00000018 __fp_unlock_all
00815570 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00819228 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080d470 g     F .text	0000000c localeconv
008003fc g     F .text	00000080 clear_red_leds_9_to_17
008163f4 g     F .text	00000050 alt_ic_isr_register
008073f0 g     F .text	00000034 fwrite
00819258 g       *ABS*	00000000 _edata
008156c4 g     F .text	00000060 altera_avalon_uart_read_fd
0081af34 g     O .bss	00000001 ventricular_event
0081b0b4 g       *ABS*	00000000 _end
0081af48 g     O .bss	00000004 current_event
00810a44 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
008141c4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008164cc g     F .text	0000008c alt_ic_irq_disable
00808308 g     F .text	0000007c __swrite
0081921c g     O .rwdata	00000004 __malloc_trim_threshold
0080d438 g     F .text	0000000c __locale_msgcharset
00816ac0 g     F .text	00000038 exit
0081af3a g     O .bss	00000001 led_pace_atrial_event
0080d288 g     F .text	000000c4 _fwalk_reent
0080e18c g     F .text	000001fc __mdiff
00811968 g     F .text	00000074 .hidden __modsi3
008013fc g     F .text	00004048 logic
00819254 g     O .rwdata	00000004 __ctype_ptr__
0081af3c g     O .bss	00000001 led_sense_atrial_event
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080c7ec g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
008172fe g     O .rodata	00000101 _ctype_
0081af33 g     O .bss	00000001 a_is_paced
00815b48 g     F .text	00000054 altera_avalon_uart_close
00806cf0 g     F .text	000000f4 _fopen_r
00816e0c g     F .text	00000034 _exit
00812ba0 g     F .text	0000012c alt_alarm_start
00800380 g     F .text	0000007c clear_red_leds_0_to_8
00807424 g     F .text	000001bc __smakebuf_r
008083e8 g     F .text	00000098 strlen
00813510 g     F .text	00000154 open
0080603c g     F .text	000000dc .hidden __gedf2
0081af40 g     O .bss	00000001 a_sense_led_timer_already_started
00819224 g     O .rwdata	00000004 __wctomb
0080f1d8 g     F .text	00000018 __sprint_r
008163c0 g     F .text	00000034 alt_icache_flush_all
00800578 g     F .text	00000020 set_green_leds_0_to_3
00819240 g     O .rwdata	00000004 alt_priority_mask
0081af43 g     O .bss	00000001 pulse_switched_flag
00816444 g     F .text	00000088 alt_ic_irq_enable
0080a678 g     F .text	0000001c __vfprintf_internal
0081af41 g     O .bss	00000001 v_sense_led_timer_already_started
00815bd8 g     F .text	000001dc altera_avalon_uart_read
00810dd8 g     F .text	0000005c _wctomb_r
0081af3b g     O .bss	00000001 led_pace_ventricular_event
0080620c g     F .text	000008fc .hidden __subdf3
0081af3f g     O .bss	00000001 v_pace_led_timer_already_started
0080dbc0 g     F .text	000000b0 __lo0bits
008011c8 g     F .text	00000060 send_atrial_event
00819248 g     O .rwdata	00000008 alt_alarm_list
008160c4 g     F .text	00000060 _do_ctors
00810ce8 g     F .text	000000c0 wcrtomb
00812d08 g     F .text	000000d0 close
008131b8 g     F .text	00000084 alt_load
00810bcc g     F .text	00000080 fputwc
0080c7f0 g     F .text	00000004 __sinit_lock_acquire
0080d934 g     F .text	00000120 __multadd
0080d90c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10abed04 	addi	r2,r2,-20556
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10abed04 	addi	r2,r2,-20556
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a75e17 	ldw	r2,-25224(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a75e17 	ldw	r2,-25224(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d6848414 	ori	gp,gp,4624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10abcc14 	ori	r2,r2,44848

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18ec2d14 	ori	r3,r3,45236

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08131b80 	call	8131b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	081334c0 	call	81334c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <print_modes_to_lcd>:
#include <altera_avalon_pio_regs.h> // Used for PIO functions

/**
 * Prints the current implementation mode and pulse mode to the LCD
 */
void print_modes_to_lcd(FILE* lcd, bool impl_mode, bool pulse_mode) {
  800290:	defffb04 	addi	sp,sp,-20
  800294:	dfc00415 	stw	ra,16(sp)
  800298:	df000315 	stw	fp,12(sp)
  80029c:	df000304 	addi	fp,sp,12
  8002a0:	e13ffd15 	stw	r4,-12(fp)
  8002a4:	2807883a 	mov	r3,r5
  8002a8:	3005883a 	mov	r2,r6
  8002ac:	e0fffe05 	stb	r3,-8(fp)
  8002b0:	e0bfff05 	stb	r2,-4(fp)
	#define ESC 27
	#define CLEAR_LCD_STRING "[2J"
	// Clear previous LCD prints before setting it again.

	fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  8002b4:	01c02074 	movhi	r7,129
  8002b8:	39db9004 	addi	r7,r7,28224
  8002bc:	018006c4 	movi	r6,27
  8002c0:	01402074 	movhi	r5,129
  8002c4:	295b9104 	addi	r5,r5,28228
  8002c8:	e13ffd17 	ldw	r4,-12(fp)
  8002cc:	0806e240 	call	806e24 <fprintf>
	if (impl_mode == C_MODE) {
  8002d0:	e0bffe03 	ldbu	r2,-8(fp)
  8002d4:	1080005c 	xori	r2,r2,1
  8002d8:	10803fcc 	andi	r2,r2,255
  8002dc:	10000726 	beq	r2,zero,8002fc <print_modes_to_lcd+0x6c>
		fprintf(lcd, "IMPL MODE: C\n");
  8002e0:	e1fffd17 	ldw	r7,-12(fp)
  8002e4:	01800344 	movi	r6,13
  8002e8:	01400044 	movi	r5,1
  8002ec:	01002074 	movhi	r4,129
  8002f0:	211b9304 	addi	r4,r4,28236
  8002f4:	08073f00 	call	8073f0 <fwrite>
  8002f8:	00000806 	br	80031c <print_modes_to_lcd+0x8c>
	}
	else if (impl_mode == SCCHARTS_MODE) {
  8002fc:	e0bffe03 	ldbu	r2,-8(fp)
  800300:	10000626 	beq	r2,zero,80031c <print_modes_to_lcd+0x8c>
		fprintf(lcd, "IMPL MODE: SCCHARTS\n");
  800304:	e1fffd17 	ldw	r7,-12(fp)
  800308:	01800504 	movi	r6,20
  80030c:	01400044 	movi	r5,1
  800310:	01002074 	movhi	r4,129
  800314:	211b9704 	addi	r4,r4,28252
  800318:	08073f00 	call	8073f0 <fwrite>
	}

	if (pulse_mode == UART_MODE) {
  80031c:	e0bfff03 	ldbu	r2,-4(fp)
  800320:	1080005c 	xori	r2,r2,1
  800324:	10803fcc 	andi	r2,r2,255
  800328:	10000726 	beq	r2,zero,800348 <print_modes_to_lcd+0xb8>
		fprintf(lcd, "PULSE MODE: UART\n");
  80032c:	e1fffd17 	ldw	r7,-12(fp)
  800330:	01800444 	movi	r6,17
  800334:	01400044 	movi	r5,1
  800338:	01002074 	movhi	r4,129
  80033c:	211b9d04 	addi	r4,r4,28276
  800340:	08073f00 	call	8073f0 <fwrite>
	}
	else if (pulse_mode == BUTTON_MODE) {
		fprintf(lcd, "PULSE MODE: BUTTON\n");
	}
}
  800344:	00000806 	br	800368 <print_modes_to_lcd+0xd8>
	}

	if (pulse_mode == UART_MODE) {
		fprintf(lcd, "PULSE MODE: UART\n");
	}
	else if (pulse_mode == BUTTON_MODE) {
  800348:	e0bfff03 	ldbu	r2,-4(fp)
  80034c:	10000626 	beq	r2,zero,800368 <print_modes_to_lcd+0xd8>
		fprintf(lcd, "PULSE MODE: BUTTON\n");
  800350:	e1fffd17 	ldw	r7,-12(fp)
  800354:	018004c4 	movi	r6,19
  800358:	01400044 	movi	r5,1
  80035c:	01002074 	movhi	r4,129
  800360:	211ba204 	addi	r4,r4,28296
  800364:	08073f00 	call	8073f0 <fwrite>
	}
}
  800368:	0001883a 	nop
  80036c:	e037883a 	mov	sp,fp
  800370:	dfc00117 	ldw	ra,4(sp)
  800374:	df000017 	ldw	fp,0(sp)
  800378:	dec00204 	addi	sp,sp,8
  80037c:	f800283a 	ret

00800380 <clear_red_leds_0_to_8>:
#include "defines.h"

/**
 * Clears the RED LEDs from LEDR0 to LEDR8
 */
void clear_red_leds_0_to_8() {
  800380:	defffd04 	addi	sp,sp,-12
  800384:	df000215 	stw	fp,8(sp)
  800388:	df000204 	addi	fp,sp,8
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  80038c:	00804074 	movhi	r2,257
  800390:	10842004 	addi	r2,r2,4224
  800394:	10800037 	ldwio	r2,0(r2)
  800398:	e0bffe15 	stw	r2,-8(fp)
	// CLEAR ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = 0; i < 9; i++) {
  80039c:	e03fff15 	stw	zero,-4(fp)
  8003a0:	00000a06 	br	8003cc <clear_red_leds_0_to_8+0x4c>
		led_value = led_value &= ~(1<<i);
  8003a4:	00c00044 	movi	r3,1
  8003a8:	e0bfff17 	ldw	r2,-4(fp)
  8003ac:	1884983a 	sll	r2,r3,r2
  8003b0:	0084303a 	nor	r2,zero,r2
  8003b4:	e0fffe17 	ldw	r3,-8(fp)
  8003b8:	1884703a 	and	r2,r3,r2
  8003bc:	e0bffe15 	stw	r2,-8(fp)
 * Clears the RED LEDs from LEDR0 to LEDR8
 */
void clear_red_leds_0_to_8() {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
	// CLEAR ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = 0; i < 9; i++) {
  8003c0:	e0bfff17 	ldw	r2,-4(fp)
  8003c4:	10800044 	addi	r2,r2,1
  8003c8:	e0bfff15 	stw	r2,-4(fp)
  8003cc:	e0bfff17 	ldw	r2,-4(fp)
  8003d0:	10800250 	cmplti	r2,r2,9
  8003d4:	103ff31e 	bne	r2,zero,8003a4 <__alt_mem_onchip_mem+0xff7f83a4>
		led_value = led_value &= ~(1<<i);
	}

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  8003d8:	00804074 	movhi	r2,257
  8003dc:	10842004 	addi	r2,r2,4224
  8003e0:	e0fffe17 	ldw	r3,-8(fp)
  8003e4:	10c00035 	stwio	r3,0(r2)
}
  8003e8:	0001883a 	nop
  8003ec:	e037883a 	mov	sp,fp
  8003f0:	df000017 	ldw	fp,0(sp)
  8003f4:	dec00104 	addi	sp,sp,4
  8003f8:	f800283a 	ret

008003fc <clear_red_leds_9_to_17>:

/**
 *  Clears the RED LEDs from LEDR9 to LEDR17
 */
void clear_red_leds_9_to_17() {
  8003fc:	defffd04 	addi	sp,sp,-12
  800400:	df000215 	stw	fp,8(sp)
  800404:	df000204 	addi	fp,sp,8
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800408:	00804074 	movhi	r2,257
  80040c:	10842004 	addi	r2,r2,4224
  800410:	10800037 	ldwio	r2,0(r2)
  800414:	e0bffe15 	stw	r2,-8(fp)
	// CLEAR ALL BITS UP FROM LEDR9 TO LEDR17
	for (int i = 9; i < 18; i++) {
  800418:	00800244 	movi	r2,9
  80041c:	e0bfff15 	stw	r2,-4(fp)
  800420:	00000a06 	br	80044c <clear_red_leds_9_to_17+0x50>
		led_value = led_value &= ~(1<<i);
  800424:	00c00044 	movi	r3,1
  800428:	e0bfff17 	ldw	r2,-4(fp)
  80042c:	1884983a 	sll	r2,r3,r2
  800430:	0084303a 	nor	r2,zero,r2
  800434:	e0fffe17 	ldw	r3,-8(fp)
  800438:	1884703a 	and	r2,r3,r2
  80043c:	e0bffe15 	stw	r2,-8(fp)
 *  Clears the RED LEDs from LEDR9 to LEDR17
 */
void clear_red_leds_9_to_17() {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
	// CLEAR ALL BITS UP FROM LEDR9 TO LEDR17
	for (int i = 9; i < 18; i++) {
  800440:	e0bfff17 	ldw	r2,-4(fp)
  800444:	10800044 	addi	r2,r2,1
  800448:	e0bfff15 	stw	r2,-4(fp)
  80044c:	e0bfff17 	ldw	r2,-4(fp)
  800450:	10800490 	cmplti	r2,r2,18
  800454:	103ff31e 	bne	r2,zero,800424 <__alt_mem_onchip_mem+0xff7f8424>
		led_value = led_value &= ~(1<<i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800458:	00804074 	movhi	r2,257
  80045c:	10842004 	addi	r2,r2,4224
  800460:	e0fffe17 	ldw	r3,-8(fp)
  800464:	10c00035 	stwio	r3,0(r2)
}
  800468:	0001883a 	nop
  80046c:	e037883a 	mov	sp,fp
  800470:	df000017 	ldw	fp,0(sp)
  800474:	dec00104 	addi	sp,sp,4
  800478:	f800283a 	ret

0080047c <clear_green_leds_0_to_3>:

/**
 * Clears the GREEN LEDs from LEDG0 to LEDG3
 */
void clear_green_leds_0_to_3() {
  80047c:	defffd04 	addi	sp,sp,-12
  800480:	df000215 	stw	fp,8(sp)
  800484:	df000204 	addi	fp,sp,8
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800488:	00804074 	movhi	r2,257
  80048c:	10841c04 	addi	r2,r2,4208
  800490:	10800037 	ldwio	r2,0(r2)
  800494:	e0bffe15 	stw	r2,-8(fp)
	// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
	for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800498:	e03fff15 	stw	zero,-4(fp)
  80049c:	00000a06 	br	8004c8 <clear_green_leds_0_to_3+0x4c>
		led_value = led_value &= ~(1<<i);
  8004a0:	00c00044 	movi	r3,1
  8004a4:	e0bfff17 	ldw	r2,-4(fp)
  8004a8:	1884983a 	sll	r2,r3,r2
  8004ac:	0084303a 	nor	r2,zero,r2
  8004b0:	e0fffe17 	ldw	r3,-8(fp)
  8004b4:	1884703a 	and	r2,r3,r2
  8004b8:	e0bffe15 	stw	r2,-8(fp)
 * Clears the GREEN LEDs from LEDG0 to LEDG3
 */
void clear_green_leds_0_to_3() {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
	// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
	for (int i = LEDG0; i < LEDG3 + 1; i++) {
  8004bc:	e0bfff17 	ldw	r2,-4(fp)
  8004c0:	10800044 	addi	r2,r2,1
  8004c4:	e0bfff15 	stw	r2,-4(fp)
  8004c8:	e0bfff17 	ldw	r2,-4(fp)
  8004cc:	10800110 	cmplti	r2,r2,4
  8004d0:	103ff31e 	bne	r2,zero,8004a0 <__alt_mem_onchip_mem+0xff7f84a0>
		led_value = led_value &= ~(1<<i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  8004d4:	00804074 	movhi	r2,257
  8004d8:	10841c04 	addi	r2,r2,4208
  8004dc:	e0fffe17 	ldw	r3,-8(fp)
  8004e0:	10c00035 	stwio	r3,0(r2)
}
  8004e4:	0001883a 	nop
  8004e8:	e037883a 	mov	sp,fp
  8004ec:	df000017 	ldw	fp,0(sp)
  8004f0:	dec00104 	addi	sp,sp,4
  8004f4:	f800283a 	ret

008004f8 <clear_green_leds_4_to_7>:

/**
 * Clears the GREEN LEDs from LEDG0 to LEDG3
 */
void clear_green_leds_4_to_7() {
  8004f8:	defffd04 	addi	sp,sp,-12
  8004fc:	df000215 	stw	fp,8(sp)
  800500:	df000204 	addi	fp,sp,8
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800504:	00804074 	movhi	r2,257
  800508:	10841c04 	addi	r2,r2,4208
  80050c:	10800037 	ldwio	r2,0(r2)
  800510:	e0bffe15 	stw	r2,-8(fp)
	// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
	for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800514:	00800104 	movi	r2,4
  800518:	e0bfff15 	stw	r2,-4(fp)
  80051c:	00000a06 	br	800548 <clear_green_leds_4_to_7+0x50>
		led_value = led_value &= ~(1<<i);
  800520:	00c00044 	movi	r3,1
  800524:	e0bfff17 	ldw	r2,-4(fp)
  800528:	1884983a 	sll	r2,r3,r2
  80052c:	0084303a 	nor	r2,zero,r2
  800530:	e0fffe17 	ldw	r3,-8(fp)
  800534:	1884703a 	and	r2,r3,r2
  800538:	e0bffe15 	stw	r2,-8(fp)
 * Clears the GREEN LEDs from LEDG0 to LEDG3
 */
void clear_green_leds_4_to_7() {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
	// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
	for (int i = LEDG4; i < LEDG7 + 1; i++) {
  80053c:	e0bfff17 	ldw	r2,-4(fp)
  800540:	10800044 	addi	r2,r2,1
  800544:	e0bfff15 	stw	r2,-4(fp)
  800548:	e0bfff17 	ldw	r2,-4(fp)
  80054c:	10800210 	cmplti	r2,r2,8
  800550:	103ff31e 	bne	r2,zero,800520 <__alt_mem_onchip_mem+0xff7f8520>
		led_value = led_value &= ~(1<<i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800554:	00804074 	movhi	r2,257
  800558:	10841c04 	addi	r2,r2,4208
  80055c:	e0fffe17 	ldw	r3,-8(fp)
  800560:	10c00035 	stwio	r3,0(r2)
}
  800564:	0001883a 	nop
  800568:	e037883a 	mov	sp,fp
  80056c:	df000017 	ldw	fp,0(sp)
  800570:	dec00104 	addi	sp,sp,4
  800574:	f800283a 	ret

00800578 <set_green_leds_0_to_3>:

/**
 * Sets the GREEN LEDs from LEDG0 to LEDG3 to HIGH
 */
void set_green_leds_0_to_3() {
  800578:	deffff04 	addi	sp,sp,-4
  80057c:	df000015 	stw	fp,0(sp)
  800580:	d839883a 	mov	fp,sp

}
  800584:	0001883a 	nop
  800588:	e037883a 	mov	sp,fp
  80058c:	df000017 	ldw	fp,0(sp)
  800590:	dec00104 	addi	sp,sp,4
  800594:	f800283a 	ret

00800598 <buttons_interrupts_function>:

int a_timer_count = 0;
int v_timer_count = 0;

void buttons_interrupts_function(void* context, alt_u32 id)
{
  800598:	defffb04 	addi	sp,sp,-20
  80059c:	dfc00415 	stw	ra,16(sp)
  8005a0:	df000315 	stw	fp,12(sp)
  8005a4:	df000304 	addi	fp,sp,12
  8005a8:	e13ffe15 	stw	r4,-8(fp)
  8005ac:	e17fff15 	stw	r5,-4(fp)

	int* temp_button_value = (int*) context; // Cast the context before using it
  8005b0:	e0bffe17 	ldw	r2,-8(fp)
  8005b4:	e0bffd15 	stw	r2,-12(fp)
	(*temp_button_value) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8005b8:	00804074 	movhi	r2,257
  8005bc:	10842b04 	addi	r2,r2,4268
  8005c0:	10c00037 	ldwio	r3,0(r2)
  8005c4:	e0bffd17 	ldw	r2,-12(fp)
  8005c8:	10c00015 	stw	r3,0(r2)

	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8005cc:	0007883a 	mov	r3,zero
  8005d0:	00804074 	movhi	r2,257
  8005d4:	10842b04 	addi	r2,r2,4268
  8005d8:	10c00035 	stwio	r3,0(r2)

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
  8005dc:	d0a74803 	ldbu	r2,-25312(gp)
  8005e0:	1080005c 	xori	r2,r2,1
  8005e4:	10803fcc 	andi	r2,r2,255
  8005e8:	10001d1e 	bne	r2,zero,800660 <buttons_interrupts_function+0xc8>
		return;
	}


	if ((*temp_button_value & (1 << KEY1))) {
  8005ec:	e0bffd17 	ldw	r2,-12(fp)
  8005f0:	10800017 	ldw	r2,0(r2)
  8005f4:	1080008c 	andi	r2,r2,2
  8005f8:	10000526 	beq	r2,zero,800610 <buttons_interrupts_function+0x78>
		//printf("KEY0 : ATRIAL EVENT!\n");
		send_atrial_event(false);
  8005fc:	0009883a 	mov	r4,zero
  800600:	08011c80 	call	8011c8 <send_atrial_event>
		printf("Atrium Manually Sent!\n");
  800604:	01002074 	movhi	r4,129
  800608:	211ba704 	addi	r4,r4,28316
  80060c:	08080540 	call	808054 <puts>
	}

	if ((*temp_button_value & (1 << KEY0))) {
  800610:	e0bffd17 	ldw	r2,-12(fp)
  800614:	10800017 	ldw	r2,0(r2)
  800618:	1080004c 	andi	r2,r2,1
  80061c:	10000526 	beq	r2,zero,800634 <buttons_interrupts_function+0x9c>
		//printf("KEY1 : VENTRICULAR EVENT!\n");

		send_ventricular_event(false);
  800620:	0009883a 	mov	r4,zero
  800624:	08012280 	call	801228 <send_ventricular_event>
		printf("Ventricular Manually Sent!\n");
  800628:	01002074 	movhi	r4,129
  80062c:	211bad04 	addi	r4,r4,28340
  800630:	08080540 	call	808054 <puts>


	}

	if ((*temp_button_value & (1 << 2))) {
  800634:	e0bffd17 	ldw	r2,-12(fp)
  800638:	10800017 	ldw	r2,0(r2)
  80063c:	1080010c 	andi	r2,r2,4
  800640:	10000826 	beq	r2,zero,800664 <buttons_interrupts_function+0xcc>
		// reset leds -- DEBUGGING / CLEAR EVENTS
		atrial_event = false;
  800644:	d0274885 	stb	zero,-25310(gp)
		ventricular_event = false;
  800648:	d0274905 	stb	zero,-25308(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  80064c:	0007883a 	mov	r3,zero
  800650:	00804074 	movhi	r2,257
  800654:	10841c04 	addi	r2,r2,4208
  800658:	10c00035 	stwio	r3,0(r2)
  80065c:	00000106 	br	800664 <buttons_interrupts_function+0xcc>
	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
		return;
  800660:	0001883a 	nop
		ventricular_event = false;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	}

	//printf("button pressed: %i\n", *temp_button_value); DEBUGGING PURPOSES
}
  800664:	e037883a 	mov	sp,fp
  800668:	dfc00117 	ldw	ra,4(sp)
  80066c:	df000017 	ldw	fp,0(sp)
  800670:	dec00204 	addi	sp,sp,8
  800674:	f800283a 	ret

00800678 <a_pace_led_timer_isr_function>:

alt_u32 a_pace_led_timer_isr_function(void* context) {
  800678:	defffe04 	addi	sp,sp,-8
  80067c:	df000115 	stw	fp,4(sp)
  800680:	df000104 	addi	fp,sp,4
  800684:	e13fff15 	stw	r4,-4(fp)
	led_pace_atrial_event = false;
  800688:	d0274a85 	stb	zero,-25302(gp)
	return LED_ON_MILLISECONDS;
  80068c:	00800644 	movi	r2,25
}
  800690:	e037883a 	mov	sp,fp
  800694:	df000017 	ldw	fp,0(sp)
  800698:	dec00104 	addi	sp,sp,4
  80069c:	f800283a 	ret

008006a0 <v_pace_led_timer_isr_function>:

alt_u32 v_pace_led_timer_isr_function(void* context) {
  8006a0:	defffe04 	addi	sp,sp,-8
  8006a4:	df000115 	stw	fp,4(sp)
  8006a8:	df000104 	addi	fp,sp,4
  8006ac:	e13fff15 	stw	r4,-4(fp)
	led_pace_ventricular_event = false;
  8006b0:	d0274ac5 	stb	zero,-25301(gp)
	return LED_ON_MILLISECONDS;
  8006b4:	00800644 	movi	r2,25
}
  8006b8:	e037883a 	mov	sp,fp
  8006bc:	df000017 	ldw	fp,0(sp)
  8006c0:	dec00104 	addi	sp,sp,4
  8006c4:	f800283a 	ret

008006c8 <a_sense_led_timer_isr_function>:

alt_u32 a_sense_led_timer_isr_function(void* contxet) {
  8006c8:	defffe04 	addi	sp,sp,-8
  8006cc:	df000115 	stw	fp,4(sp)
  8006d0:	df000104 	addi	fp,sp,4
  8006d4:	e13fff15 	stw	r4,-4(fp)
	led_sense_atrial_event = false;
  8006d8:	d0274b05 	stb	zero,-25300(gp)
	return LED_ON_MILLISECONDS;
  8006dc:	00800644 	movi	r2,25
}
  8006e0:	e037883a 	mov	sp,fp
  8006e4:	df000017 	ldw	fp,0(sp)
  8006e8:	dec00104 	addi	sp,sp,4
  8006ec:	f800283a 	ret

008006f0 <v_sense_led_timer_isr_function>:

alt_u32 v_sense_led_timer_isr_function(void* contxet) {
  8006f0:	defffe04 	addi	sp,sp,-8
  8006f4:	df000115 	stw	fp,4(sp)
  8006f8:	df000104 	addi	fp,sp,4
  8006fc:	e13fff15 	stw	r4,-4(fp)
	led_sense_ventricular_event = false;
  800700:	d0274b45 	stb	zero,-25299(gp)
	return LED_ON_MILLISECONDS;
  800704:	00800644 	movi	r2,25
}
  800708:	e037883a 	mov	sp,fp
  80070c:	df000017 	ldw	fp,0(sp)
  800710:	dec00104 	addi	sp,sp,4
  800714:	f800283a 	ret

00800718 <uart_read_isr_function>:

void uart_read_isr_function(void* context, alt_u32 id)
{
  800718:	defffb04 	addi	sp,sp,-20
  80071c:	dfc00415 	stw	ra,16(sp)
  800720:	df000315 	stw	fp,12(sp)
  800724:	df000304 	addi	fp,sp,12
  800728:	e13ffe15 	stw	r4,-8(fp)
  80072c:	e17fff15 	stw	r5,-4(fp)
	// if we are NOT in UART MODE then exit early;

	char temp;
	temp = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
  800730:	00804074 	movhi	r2,257
  800734:	10841004 	addi	r2,r2,4160
  800738:	10800037 	ldwio	r2,0(r2)
  80073c:	e0bffd05 	stb	r2,-12(fp)

	if (pulse_mode == BUTTON_MODE) {
  800740:	d0a74803 	ldbu	r2,-25312(gp)
  800744:	10803fcc 	andi	r2,r2,255
  800748:	10000d26 	beq	r2,zero,800780 <uart_read_isr_function+0x68>

		if (atrial_event) {
  80074c:	d0a74883 	ldbu	r2,-25310(gp)
  800750:	10803fcc 	andi	r2,r2,255
  800754:	10000326 	beq	r2,zero,800764 <uart_read_isr_function+0x4c>
			printf("Atrial Transmitted to UART!\n");
  800758:	01002074 	movhi	r4,129
  80075c:	211bb404 	addi	r4,r4,28368
  800760:	08080540 	call	808054 <puts>
		}

		if (ventricular_event) {
  800764:	d0a74903 	ldbu	r2,-25308(gp)
  800768:	10803fcc 	andi	r2,r2,255
  80076c:	10000f26 	beq	r2,zero,8007ac <uart_read_isr_function+0x94>
			printf("Ventricular Transmitted to UART!\n");
  800770:	01002074 	movhi	r4,129
  800774:	211bbb04 	addi	r4,r4,28396
  800778:	08080540 	call	808054 <puts>
		}
		return;
  80077c:	00000b06 	br	8007ac <uart_read_isr_function+0x94>
	}

	if (temp == 'A') {
  800780:	e0bffd07 	ldb	r2,-12(fp)
  800784:	10801058 	cmpnei	r2,r2,65
  800788:	1000021e 	bne	r2,zero,800794 <uart_read_isr_function+0x7c>
		send_atrial_event(false);
  80078c:	0009883a 	mov	r4,zero
  800790:	08011c80 	call	8011c8 <send_atrial_event>
	}
	if (temp == 'V') {
  800794:	e0bffd07 	ldb	r2,-12(fp)
  800798:	10801598 	cmpnei	r2,r2,86
  80079c:	1000041e 	bne	r2,zero,8007b0 <uart_read_isr_function+0x98>
		send_ventricular_event(false);
  8007a0:	0009883a 	mov	r4,zero
  8007a4:	08012280 	call	801228 <send_ventricular_event>
  8007a8:	00000106 	br	8007b0 <uart_read_isr_function+0x98>
		}

		if (ventricular_event) {
			printf("Ventricular Transmitted to UART!\n");
		}
		return;
  8007ac:	0001883a 	nop
	}
	if (temp == 'V') {
		send_ventricular_event(false);
	}
	//printf("UART read: %c\n", temp);
}
  8007b0:	e037883a 	mov	sp,fp
  8007b4:	dfc00117 	ldw	ra,4(sp)
  8007b8:	df000017 	ldw	fp,0(sp)
  8007bc:	dec00204 	addi	sp,sp,8
  8007c0:	f800283a 	ret

008007c4 <a_events_timer_isr_function>:

alt_u32 a_events_timer_isr_function(void* context) {
  8007c4:	defffd04 	addi	sp,sp,-12
  8007c8:	df000215 	stw	fp,8(sp)
  8007cc:	df000204 	addi	fp,sp,8
  8007d0:	e13fff15 	stw	r4,-4(fp)
	int *a_timer_count =(int*) context;
  8007d4:	e0bfff17 	ldw	r2,-4(fp)
  8007d8:	e0bffe15 	stw	r2,-8(fp)
	(*a_timer_count)++;
  8007dc:	e0bffe17 	ldw	r2,-8(fp)
  8007e0:	10800017 	ldw	r2,0(r2)
  8007e4:	10c00044 	addi	r3,r2,1
  8007e8:	e0bffe17 	ldw	r2,-8(fp)
  8007ec:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  8007f0:	00800044 	movi	r2,1
}
  8007f4:	e037883a 	mov	sp,fp
  8007f8:	df000017 	ldw	fp,0(sp)
  8007fc:	dec00104 	addi	sp,sp,4
  800800:	f800283a 	ret

00800804 <v_events_timer_isr_function>:

alt_u32 v_events_timer_isr_function(void* context) {
  800804:	defffd04 	addi	sp,sp,-12
  800808:	df000215 	stw	fp,8(sp)
  80080c:	df000204 	addi	fp,sp,8
  800810:	e13fff15 	stw	r4,-4(fp)
	int *v_timer_count =(int*) context;
  800814:	e0bfff17 	ldw	r2,-4(fp)
  800818:	e0bffe15 	stw	r2,-8(fp)
	(*v_timer_count)++;
  80081c:	e0bffe17 	ldw	r2,-8(fp)
  800820:	10800017 	ldw	r2,0(r2)
  800824:	10c00044 	addi	r3,r2,1
  800828:	e0bffe17 	ldw	r2,-8(fp)
  80082c:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  800830:	00800044 	movi	r2,1
}
  800834:	e037883a 	mov	sp,fp
  800838:	df000017 	ldw	fp,0(sp)
  80083c:	dec00104 	addi	sp,sp,4
  800840:	f800283a 	ret

00800844 <system_timer_isr_function>:

alt_u32 system_timer_isr_function(void* context) {
  800844:	defffd04 	addi	sp,sp,-12
  800848:	df000215 	stw	fp,8(sp)
  80084c:	df000204 	addi	fp,sp,8
  800850:	e13fff15 	stw	r4,-4(fp)
	int *system_timer_count = (int* ) context;
  800854:	e0bfff17 	ldw	r2,-4(fp)
  800858:	e0bffe15 	stw	r2,-8(fp)
	(*system_timer_count)++;
  80085c:	e0bffe17 	ldw	r2,-8(fp)
  800860:	10800017 	ldw	r2,0(r2)
  800864:	10c00044 	addi	r3,r2,1
  800868:	e0bffe17 	ldw	r2,-8(fp)
  80086c:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  800870:	00800044 	movi	r2,1
}
  800874:	e037883a 	mov	sp,fp
  800878:	df000017 	ldw	fp,0(sp)
  80087c:	dec00104 	addi	sp,sp,4
  800880:	f800283a 	ret

00800884 <main>:

int main(void)
{
  800884:	deff7704 	addi	sp,sp,-548
  800888:	dfc08815 	stw	ra,544(sp)
  80088c:	df008715 	stw	fp,540(sp)
  800890:	df008704 	addi	fp,sp,540
	printf("Starting.\n");
  800894:	01002074 	movhi	r4,129
  800898:	211bc404 	addi	r4,r4,28432
  80089c:	08080540 	call	808054 <puts>

	unsigned int switch_value = 0;
  8008a0:	e03f8615 	stw	zero,-488(fp)
	int button_value = 1;
  8008a4:	00800044 	movi	r2,1
  8008a8:	e0bf8f15 	stw	r2,-452(fp)
	void* button_context = (void*) &button_value; // Cast before passing context to isr
  8008ac:	e0bf8f04 	addi	r2,fp,-452
  8008b0:	e0bf8715 	stw	r2,-484(fp)

	unsigned int system_time = 0;
  8008b4:	e03f7915 	stw	zero,-540(fp)
	unsigned int previous_system_time = 0;
  8008b8:	e03f8815 	stw	zero,-480(fp)
	TickData data;
	reset(&data);
  8008bc:	e0bf9004 	addi	r2,fp,-448
  8008c0:	1009883a 	mov	r4,r2
  8008c4:	08054440 	call	805444 <reset>

	// LCD
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
  8008c8:	01402074 	movhi	r5,129
  8008cc:	295bc704 	addi	r5,r5,28444
  8008d0:	01002074 	movhi	r4,129
  8008d4:	211bc804 	addi	r4,r4,28448
  8008d8:	0806de40 	call	806de4 <fopen>
  8008dc:	e0bf8915 	stw	r2,-476(fp)

	//========= 	  INTERRUPTS  	   =========

	// Clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8008e0:	0007883a 	mov	r3,zero
  8008e4:	00804074 	movhi	r2,257
  8008e8:	10842b04 	addi	r2,r2,4268
  8008ec:	10c00035 	stwio	r3,0(r2)

	// Enable interrupts
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  8008f0:	00c001c4 	movi	r3,7
  8008f4:	00804074 	movhi	r2,257
  8008f8:	10842a04 	addi	r2,r2,4264
  8008fc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(UART_BASE, 0x0080);
  800900:	00c02004 	movi	r3,128
  800904:	00804074 	movhi	r2,257
  800908:	10841204 	addi	r2,r2,4168
  80090c:	10c00035 	stwio	r3,0(r2)

	// Register the isr
	alt_irq_register(KEYS_IRQ, button_context, buttons_interrupts_function);
  800910:	01802034 	movhi	r6,128
  800914:	31816604 	addi	r6,r6,1432
  800918:	e17f8717 	ldw	r5,-484(fp)
  80091c:	01000104 	movi	r4,4
  800920:	0812ef00 	call	812ef0 <alt_irq_register>
	alt_irq_register(UART_IRQ, NULL, uart_read_isr_function);
  800924:	01802034 	movhi	r6,128
  800928:	3181c604 	addi	r6,r6,1816
  80092c:	000b883a 	mov	r5,zero
  800930:	0009883a 	mov	r4,zero
  800934:	0812ef00 	call	812ef0 <alt_irq_register>

	printf("Interrupts Initialised.\n");
  800938:	01002074 	movhi	r4,129
  80093c:	211bcb04 	addi	r4,r4,28460
  800940:	08080540 	call	808054 <puts>
	//========= 	  INTERRUPTS  	   =========
	//========= 	    TIMERS  	   =========
	// Lets LEDs stay on for 500 seconds.
	alt_alarm a_pace_led_timer;
	alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  800944:	e0bfd504 	addi	r2,fp,-172
  800948:	000f883a 	mov	r7,zero
  80094c:	01802034 	movhi	r6,128
  800950:	31819e04 	addi	r6,r6,1656
  800954:	01400644 	movi	r5,25
  800958:	1009883a 	mov	r4,r2
  80095c:	0812ba00 	call	812ba0 <alt_alarm_start>

	alt_alarm v_pace_led_timer;
	alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  800960:	e0bfdb04 	addi	r2,fp,-148
  800964:	000f883a 	mov	r7,zero
  800968:	01802034 	movhi	r6,128
  80096c:	3181a804 	addi	r6,r6,1696
  800970:	01400644 	movi	r5,25
  800974:	1009883a 	mov	r4,r2
  800978:	0812ba00 	call	812ba0 <alt_alarm_start>

	alt_alarm a_sense_led_timer;
	alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  80097c:	e0bfe104 	addi	r2,fp,-124
  800980:	000f883a 	mov	r7,zero
  800984:	01802034 	movhi	r6,128
  800988:	3181b204 	addi	r6,r6,1736
  80098c:	01400644 	movi	r5,25
  800990:	1009883a 	mov	r4,r2
  800994:	0812ba00 	call	812ba0 <alt_alarm_start>

	alt_alarm v_sense_led_timer;
	alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  800998:	e0bfe704 	addi	r2,fp,-100
  80099c:	000f883a 	mov	r7,zero
  8009a0:	01802034 	movhi	r6,128
  8009a4:	3181bc04 	addi	r6,r6,1776
  8009a8:	01400644 	movi	r5,25
  8009ac:	1009883a 	mov	r4,r2
  8009b0:	0812ba00 	call	812ba0 <alt_alarm_start>

	alt_alarm system_timer;
	int system_timer_count = 0;
  8009b4:	e03ff315 	stw	zero,-52(fp)
	void *system_timer_context = (void*) &system_timer_count;
  8009b8:	e0bff304 	addi	r2,fp,-52
  8009bc:	e0bf8a15 	stw	r2,-472(fp)
	alt_alarm_start(&system_timer, 1, system_timer_isr_function, system_timer_context);
  8009c0:	e0bfed04 	addi	r2,fp,-76
  8009c4:	e1ff8a17 	ldw	r7,-472(fp)
  8009c8:	01802034 	movhi	r6,128
  8009cc:	31821104 	addi	r6,r6,2116
  8009d0:	01400044 	movi	r5,1
  8009d4:	1009883a 	mov	r4,r2
  8009d8:	0812ba00 	call	812ba0 <alt_alarm_start>

	alt_alarm a_events_timer;
	// a_timer_count = 0;
	void *a_events_timer_context = (void*) &a_timer_count;
  8009dc:	d0a74f04 	addi	r2,gp,-25284
  8009e0:	e0bf8b15 	stw	r2,-468(fp)
	alt_alarm_start(&a_events_timer, 1, a_events_timer_isr_function, a_events_timer_context);
  8009e4:	e0bff404 	addi	r2,fp,-48
  8009e8:	e1ff8b17 	ldw	r7,-468(fp)
  8009ec:	01802034 	movhi	r6,128
  8009f0:	3181f104 	addi	r6,r6,1988
  8009f4:	01400044 	movi	r5,1
  8009f8:	1009883a 	mov	r4,r2
  8009fc:	0812ba00 	call	812ba0 <alt_alarm_start>

	alt_alarm v_events_timer;
	//int v_timer_count = 0;
	void *v_events_timer_context = (void*) &v_timer_count;
  800a00:	d0a75004 	addi	r2,gp,-25280
  800a04:	e0bf8c15 	stw	r2,-464(fp)
	alt_alarm_start(&v_events_timer, 1, v_events_timer_isr_function, v_events_timer_context);
  800a08:	e0bffa04 	addi	r2,fp,-24
  800a0c:	e1ff8c17 	ldw	r7,-464(fp)
  800a10:	01802034 	movhi	r6,128
  800a14:	31820104 	addi	r6,r6,2052
  800a18:	01400044 	movi	r5,1
  800a1c:	1009883a 	mov	r4,r2
  800a20:	0812ba00 	call	812ba0 <alt_alarm_start>


	//========= 	    TIMERS  	   =========
	printf("Timers Initialised.\n");
  800a24:	01002074 	movhi	r4,129
  800a28:	211bd104 	addi	r4,r4,28484
  800a2c:	08080540 	call	808054 <puts>

	printf("Entering Loop.\n");
  800a30:	01002074 	movhi	r4,129
  800a34:	211bd604 	addi	r4,r4,28504
  800a38:	08080540 	call	808054 <puts>
	while(1) {
		previous_system_time = system_time;
  800a3c:	e0bf7917 	ldw	r2,-540(fp)
  800a40:	e0bf8815 	stw	r2,-480(fp)
		system_time = system_timer_count;
  800a44:	e0bff317 	ldw	r2,-52(fp)
  800a48:	e0bf7915 	stw	r2,-540(fp)
		data.AS = 0;
  800a4c:	e03fad05 	stb	zero,-332(fp)
		data.VS = 0;
  800a50:	e03fad45 	stb	zero,-331(fp)
		data.deltaT = system_time - previous_system_time;
  800a54:	e0ff7917 	ldw	r3,-540(fp)
  800a58:	e0bf8817 	ldw	r2,-480(fp)
  800a5c:	1885c83a 	sub	r2,r3,r2
  800a60:	1009883a 	mov	r4,r2
  800a64:	0806be40 	call	806be4 <__floatunsidf>
  800a68:	1009883a 	mov	r4,r2
  800a6c:	180b883a 	mov	r5,r3
  800a70:	e13fa915 	stw	r4,-348(fp)
  800a74:	e17faa15 	stw	r5,-344(fp)
		//tick(&data);

		// Get switch state from switch peripheral (returns a binary)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800a78:	00804074 	movhi	r2,257
  800a7c:	10842404 	addi	r2,r2,4240
  800a80:	10800037 	ldwio	r2,0(r2)
  800a84:	e0bf8615 	stw	r2,-488(fp)


		// ========= 	  PULSE MODES 	  =========
		if (switch_value & (1 << PULSE_MODE_SWITCH)) {
  800a88:	e0bf8617 	ldw	r2,-488(fp)
  800a8c:	1080004c 	andi	r2,r2,1
  800a90:	10000b26 	beq	r2,zero,800ac0 <main+0x23c>
			if (!pulse_switched_flag) {
  800a94:	d0a74cc3 	ldbu	r2,-25293(gp)
  800a98:	1080005c 	xori	r2,r2,1
  800a9c:	10803fcc 	andi	r2,r2,255
  800aa0:	10000426 	beq	r2,zero,800ab4 <main+0x230>
				pulse_switched_flag = true;
  800aa4:	00800044 	movi	r2,1
  800aa8:	d0a74cc5 	stb	r2,-25293(gp)
				print_flag = true;
  800aac:	00800044 	movi	r2,1
  800ab0:	d0a74c85 	stb	r2,-25294(gp)
			}
			// SW0 is ON
			pulse_mode = BUTTON_MODE;
  800ab4:	00800044 	movi	r2,1
  800ab8:	d0a74805 	stb	r2,-25312(gp)
  800abc:	00000a06 	br	800ae8 <main+0x264>
		} else if (!(switch_value & (1 << PULSE_MODE_SWITCH))) {
  800ac0:	e0bf8617 	ldw	r2,-488(fp)
  800ac4:	1080004c 	andi	r2,r2,1
  800ac8:	1000071e 	bne	r2,zero,800ae8 <main+0x264>
			if (pulse_switched_flag) {
  800acc:	d0a74cc3 	ldbu	r2,-25293(gp)
  800ad0:	10803fcc 	andi	r2,r2,255
  800ad4:	10000326 	beq	r2,zero,800ae4 <main+0x260>
				pulse_switched_flag = false;
  800ad8:	d0274cc5 	stb	zero,-25293(gp)
				print_flag = true;
  800adc:	00800044 	movi	r2,1
  800ae0:	d0a74c85 	stb	r2,-25294(gp)
			}
			// SW0 is OFF
			pulse_mode = UART_MODE;
  800ae4:	d0274805 	stb	zero,-25312(gp)
		}
		// ========= 	  PULSE MODES 	  =========

		// ========= IMPLEMENTATION MODES =========
		if (switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH)) {
  800ae8:	e0bf8617 	ldw	r2,-488(fp)
  800aec:	1080008c 	andi	r2,r2,2
  800af0:	10000b26 	beq	r2,zero,800b20 <main+0x29c>
			if (!implementation_switched_flag) {
  800af4:	d0a74d03 	ldbu	r2,-25292(gp)
  800af8:	1080005c 	xori	r2,r2,1
  800afc:	10803fcc 	andi	r2,r2,255
  800b00:	10000426 	beq	r2,zero,800b14 <main+0x290>
				implementation_switched_flag = true;
  800b04:	00800044 	movi	r2,1
  800b08:	d0a74d05 	stb	r2,-25292(gp)
				print_flag = true;
  800b0c:	00800044 	movi	r2,1
  800b10:	d0a74c85 	stb	r2,-25294(gp)
			}
			// SW1 is ON
			implementation_mode = SCCHARTS_MODE;
  800b14:	00800044 	movi	r2,1
  800b18:	d0a74845 	stb	r2,-25311(gp)
  800b1c:	00000a06 	br	800b48 <main+0x2c4>
		} else if (!(switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH))) {
  800b20:	e0bf8617 	ldw	r2,-488(fp)
  800b24:	1080008c 	andi	r2,r2,2
  800b28:	1000071e 	bne	r2,zero,800b48 <main+0x2c4>
			if (implementation_switched_flag) {
  800b2c:	d0a74d03 	ldbu	r2,-25292(gp)
  800b30:	10803fcc 	andi	r2,r2,255
  800b34:	10000326 	beq	r2,zero,800b44 <main+0x2c0>
				implementation_switched_flag = false;
  800b38:	d0274d05 	stb	zero,-25292(gp)
				print_flag = true;
  800b3c:	00800044 	movi	r2,1
  800b40:	d0a74c85 	stb	r2,-25294(gp)
			}
			// SW1 is OFF
			implementation_mode = C_MODE;
  800b44:	d0274845 	stb	zero,-25311(gp)
		}
		// ========= IMPLEMENTATION MODES =========

		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING
		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING
		if (atrial_event) {
  800b48:	d0a74883 	ldbu	r2,-25310(gp)
  800b4c:	10803fcc 	andi	r2,r2,255
  800b50:	10003026 	beq	r2,zero,800c14 <main+0x390>
			printf("\n");
  800b54:	01000284 	movi	r4,10
  800b58:	0807f7c0 	call	807f7c <putchar>
			atrial_event = false; // COULD BE A PROBLEM?
  800b5c:	d0274885 	stb	zero,-25310(gp)
			// If we are in C_Mode, restart timer
			if (implementation_mode == C_MODE) {
  800b60:	d0a74843 	ldbu	r2,-25311(gp)
  800b64:	1080005c 	xori	r2,r2,1
  800b68:	10803fcc 	andi	r2,r2,255
  800b6c:	10000c26 	beq	r2,zero,800ba0 <main+0x31c>
				if (v_timer_count >= PVARP_VALUE && current_event == VENTRICULAR_EVENT) {
  800b70:	d0a75017 	ldw	r2,-25280(gp)
  800b74:	10800c90 	cmplti	r2,r2,50
  800b78:	1000141e 	bne	r2,zero,800bcc <main+0x348>
  800b7c:	d0a74e17 	ldw	r2,-25288(gp)
  800b80:	10800058 	cmpnei	r2,r2,1
  800b84:	1000111e 	bne	r2,zero,800bcc <main+0x348>
					current_event = ATRIAL_EVENT;
  800b88:	d0274e15 	stw	zero,-25288(gp)
					atrial_sense = true;
  800b8c:	00800044 	movi	r2,1
  800b90:	d0a74985 	stb	r2,-25306(gp)
					ventricular_sense = false;
  800b94:	d02749c5 	stb	zero,-25305(gp)
					a_timer_count = 0;
  800b98:	d0274f15 	stw	zero,-25284(gp)
  800b9c:	00000b06 	br	800bcc <main+0x348>
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  800ba0:	d0a74843 	ldbu	r2,-25311(gp)
  800ba4:	10803fcc 	andi	r2,r2,255
  800ba8:	10000826 	beq	r2,zero,800bcc <main+0x348>
				if (!a_is_paced) {
  800bac:	d0a748c3 	ldbu	r2,-25309(gp)
  800bb0:	1080005c 	xori	r2,r2,1
  800bb4:	10803fcc 	andi	r2,r2,255
  800bb8:	10000326 	beq	r2,zero,800bc8 <main+0x344>
					data.AS = 1;
  800bbc:	00800044 	movi	r2,1
  800bc0:	e0bfad05 	stb	r2,-332(fp)
  800bc4:	00000106 	br	800bcc <main+0x348>
				} else {
					data.AS = 0;
  800bc8:	e03fad05 	stb	zero,-332(fp)
				}
			}

			if (a_is_paced) {
  800bcc:	d0a748c3 	ldbu	r2,-25309(gp)
  800bd0:	10803fcc 	andi	r2,r2,255
  800bd4:	10000826 	beq	r2,zero,800bf8 <main+0x374>
				led_pace_atrial_event = true;
  800bd8:	00800044 	movi	r2,1
  800bdc:	d0a74a85 	stb	r2,-25302(gp)
				atrial_sense_paced = true;
  800be0:	00800044 	movi	r2,1
  800be4:	d0a74a05 	stb	r2,-25304(gp)
				printf("Atrial Sensed! - Paced!\n");
  800be8:	01002074 	movhi	r4,129
  800bec:	211bda04 	addi	r4,r4,28520
  800bf0:	08080540 	call	808054 <puts>
  800bf4:	00000606 	br	800c10 <main+0x38c>
			} else {
				led_sense_atrial_event = true;
  800bf8:	00800044 	movi	r2,1
  800bfc:	d0a74b05 	stb	r2,-25300(gp)
				atrial_sense_paced = false;
  800c00:	d0274a05 	stb	zero,-25304(gp)
				printf("Atrial Sensed! - Not Paced\n");
  800c04:	01002074 	movhi	r4,129
  800c08:	211be004 	addi	r4,r4,28544
  800c0c:	08080540 	call	808054 <puts>
			}

			//atrial_sense = true;

			a_is_paced = false;
  800c10:	d02748c5 	stb	zero,-25309(gp)
		}

		if (ventricular_event) {
  800c14:	d0a74903 	ldbu	r2,-25308(gp)
  800c18:	10803fcc 	andi	r2,r2,255
  800c1c:	10003726 	beq	r2,zero,800cfc <main+0x478>
			ventricular_event = false;
  800c20:	d0274905 	stb	zero,-25308(gp)

			// do stuff
			// If we are in C_Mode, restart timer
			if (implementation_mode == C_MODE) {
  800c24:	d0a74843 	ldbu	r2,-25311(gp)
  800c28:	1080005c 	xori	r2,r2,1
  800c2c:	10803fcc 	andi	r2,r2,255
  800c30:	10000f26 	beq	r2,zero,800c70 <main+0x3ec>
				// Reset timer if v is sensed after VRP
				if (v_timer_count >= VRP_VALUE && current_event == ATRIAL_EVENT) {
  800c34:	d0a75017 	ldw	r2,-25280(gp)
  800c38:	10802590 	cmplti	r2,r2,150
  800c3c:	1000171e 	bne	r2,zero,800c9c <main+0x418>
  800c40:	d0a74e17 	ldw	r2,-25288(gp)
  800c44:	1000151e 	bne	r2,zero,800c9c <main+0x418>
					printf("Valid Ventricle Sense!\n");
  800c48:	01002074 	movhi	r4,129
  800c4c:	211be704 	addi	r4,r4,28572
  800c50:	08080540 	call	808054 <puts>
					current_event = VENTRICULAR_EVENT;
  800c54:	00800044 	movi	r2,1
  800c58:	d0a74e15 	stw	r2,-25288(gp)
					ventricular_sense = true;
  800c5c:	00800044 	movi	r2,1
  800c60:	d0a749c5 	stb	r2,-25305(gp)
					atrial_sense = false;
  800c64:	d0274985 	stb	zero,-25306(gp)
					v_timer_count = 0;
  800c68:	d0275015 	stw	zero,-25280(gp)
  800c6c:	00000b06 	br	800c9c <main+0x418>
				}

			} else if (implementation_mode == SCCHARTS_MODE) {
  800c70:	d0a74843 	ldbu	r2,-25311(gp)
  800c74:	10803fcc 	andi	r2,r2,255
  800c78:	10000826 	beq	r2,zero,800c9c <main+0x418>
				if (!v_is_paced) {
  800c7c:	d0a74943 	ldbu	r2,-25307(gp)
  800c80:	1080005c 	xori	r2,r2,1
  800c84:	10803fcc 	andi	r2,r2,255
  800c88:	10000326 	beq	r2,zero,800c98 <main+0x414>
					data.VS = 1;
  800c8c:	00800044 	movi	r2,1
  800c90:	e0bfad45 	stb	r2,-331(fp)
  800c94:	00000106 	br	800c9c <main+0x418>
				}
				else {
					data.VS = 0;
  800c98:	e03fad45 	stb	zero,-331(fp)
				}
			}

			if (v_is_paced) {
  800c9c:	d0a74943 	ldbu	r2,-25307(gp)
  800ca0:	10803fcc 	andi	r2,r2,255
  800ca4:	10000826 	beq	r2,zero,800cc8 <main+0x444>
				led_pace_ventricular_event = true;
  800ca8:	00800044 	movi	r2,1
  800cac:	d0a74ac5 	stb	r2,-25301(gp)
				ventricular_sense_paced = true;
  800cb0:	00800044 	movi	r2,1
  800cb4:	d0a74a45 	stb	r2,-25303(gp)
				printf("Ventricle Sensed! -- Paced\n");
  800cb8:	01002074 	movhi	r4,129
  800cbc:	211bed04 	addi	r4,r4,28596
  800cc0:	08080540 	call	808054 <puts>
  800cc4:	00000606 	br	800ce0 <main+0x45c>
			} else {
				led_sense_ventricular_event = true;
  800cc8:	00800044 	movi	r2,1
  800ccc:	d0a74b45 	stb	r2,-25299(gp)
				ventricular_sense_paced = false;
  800cd0:	d0274a45 	stb	zero,-25303(gp)
				printf("Ventricle Sensed! -- Not Paced\n");
  800cd4:	01002074 	movhi	r4,129
  800cd8:	211bf404 	addi	r4,r4,28624
  800cdc:	08080540 	call	808054 <puts>
			}


			if (!ventricular_sense) {
  800ce0:	d0a749c3 	ldbu	r2,-25305(gp)
  800ce4:	1080005c 	xori	r2,r2,1
  800ce8:	10803fcc 	andi	r2,r2,255
  800cec:	10000226 	beq	r2,zero,800cf8 <main+0x474>
				led_pace_ventricular_event = false;
  800cf0:	d0274ac5 	stb	zero,-25301(gp)
				led_sense_ventricular_event = false;
  800cf4:	d0274b45 	stb	zero,-25299(gp)
			}


			v_is_paced = false;
  800cf8:	d0274945 	stb	zero,-25307(gp)

		// IMPLEMENTATION
		// IMPLEMENTATION


		if (implementation_mode == C_MODE) {
  800cfc:	d0a74843 	ldbu	r2,-25311(gp)
  800d00:	1080005c 	xori	r2,r2,1
  800d04:	10803fcc 	andi	r2,r2,255
  800d08:	10000626 	beq	r2,zero,800d24 <main+0x4a0>
			c_mode_pacemaker(a_timer_count, v_timer_count);
  800d0c:	d0a74f17 	ldw	r2,-25284(gp)
  800d10:	d0e75017 	ldw	r3,-25280(gp)
  800d14:	180b883a 	mov	r5,r3
  800d18:	1009883a 	mov	r4,r2
  800d1c:	08013380 	call	801338 <c_mode_pacemaker>
  800d20:	00001806 	br	800d84 <main+0x500>
		} else if (implementation_mode == SCCHARTS_MODE) {
  800d24:	d0a74843 	ldbu	r2,-25311(gp)
  800d28:	10803fcc 	andi	r2,r2,255
  800d2c:	10001526 	beq	r2,zero,800d84 <main+0x500>
			tick(&data);
  800d30:	e0bf9004 	addi	r2,fp,-448
  800d34:	1009883a 	mov	r4,r2
  800d38:	08056040 	call	805604 <tick>

			int a_test = data.AP;
  800d3c:	e0bfad83 	ldbu	r2,-330(fp)
  800d40:	10803fcc 	andi	r2,r2,255
  800d44:	1080201c 	xori	r2,r2,128
  800d48:	10bfe004 	addi	r2,r2,-128
  800d4c:	e0bf8d15 	stw	r2,-460(fp)
			int v_test = data.VP;
  800d50:	e0bfadc3 	ldbu	r2,-329(fp)
  800d54:	10803fcc 	andi	r2,r2,255
  800d58:	1080201c 	xori	r2,r2,128
  800d5c:	10bfe004 	addi	r2,r2,-128
  800d60:	e0bf8e15 	stw	r2,-456(fp)

			if (a_test) {
  800d64:	e0bf8d17 	ldw	r2,-460(fp)
  800d68:	10000226 	beq	r2,zero,800d74 <main+0x4f0>
				send_atrial_event(true);
  800d6c:	01000044 	movi	r4,1
  800d70:	08011c80 	call	8011c8 <send_atrial_event>
			}
			if (v_test) {
  800d74:	e0bf8e17 	ldw	r2,-456(fp)
  800d78:	10000226 	beq	r2,zero,800d84 <main+0x500>
				send_ventricular_event(true);
  800d7c:	01000044 	movi	r4,1
  800d80:	08012280 	call	801228 <send_ventricular_event>
		// IMPLEMENTATION


		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		if (led_pace_atrial_event) {
  800d84:	d0a74a83 	ldbu	r2,-25302(gp)
  800d88:	10803fcc 	andi	r2,r2,255
  800d8c:	10003e26 	beq	r2,zero,800e88 <main+0x604>
			if (!a_pace_led_timer_already_started) {
  800d90:	d0a74b83 	ldbu	r2,-25298(gp)
  800d94:	1080005c 	xori	r2,r2,1
  800d98:	10803fcc 	andi	r2,r2,255
  800d9c:	10000c26 	beq	r2,zero,800dd0 <main+0x54c>
				alt_alarm_stop(&a_pace_led_timer);
  800da0:	e0bfd504 	addi	r2,fp,-172
  800da4:	1009883a 	mov	r4,r2
  800da8:	08138b00 	call	8138b0 <alt_alarm_stop>
				alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  800dac:	e0bfd504 	addi	r2,fp,-172
  800db0:	000f883a 	mov	r7,zero
  800db4:	01802034 	movhi	r6,128
  800db8:	31819e04 	addi	r6,r6,1656
  800dbc:	01400644 	movi	r5,25
  800dc0:	1009883a 	mov	r4,r2
  800dc4:	0812ba00 	call	812ba0 <alt_alarm_start>
				a_pace_led_timer_already_started = true;
  800dc8:	00800044 	movi	r2,1
  800dcc:	d0a74b85 	stb	r2,-25298(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800dd0:	00804074 	movhi	r2,257
  800dd4:	10841c04 	addi	r2,r2,4208
  800dd8:	10800037 	ldwio	r2,0(r2)
  800ddc:	e0bf7a15 	stw	r2,-536(fp)

			if (implementation_mode == C_MODE) {
  800de0:	d0a74843 	ldbu	r2,-25311(gp)
  800de4:	1080005c 	xori	r2,r2,1
  800de8:	10803fcc 	andi	r2,r2,255
  800dec:	10001026 	beq	r2,zero,800e30 <main+0x5ac>
				// SET ALL BITS UP FROM LEDG4 TO LEDG7
				for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800df0:	00800104 	movi	r2,4
  800df4:	e0bf7b15 	stw	r2,-532(fp)
  800df8:	00000906 	br	800e20 <main+0x59c>
					led_value = led_value |= (1<<i);
  800dfc:	00c00044 	movi	r3,1
  800e00:	e0bf7b17 	ldw	r2,-532(fp)
  800e04:	1884983a 	sll	r2,r3,r2
  800e08:	e0ff7a17 	ldw	r3,-536(fp)
  800e0c:	1884b03a 	or	r2,r3,r2
  800e10:	e0bf7a15 	stw	r2,-536(fp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

			if (implementation_mode == C_MODE) {
				// SET ALL BITS UP FROM LEDG4 TO LEDG7
				for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800e14:	e0bf7b17 	ldw	r2,-532(fp)
  800e18:	10800044 	addi	r2,r2,1
  800e1c:	e0bf7b15 	stw	r2,-532(fp)
  800e20:	e0bf7b17 	ldw	r2,-532(fp)
  800e24:	10800210 	cmplti	r2,r2,8
  800e28:	103ff41e 	bne	r2,zero,800dfc <__alt_mem_onchip_mem+0xff7f8dfc>
  800e2c:	00001206 	br	800e78 <main+0x5f4>
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  800e30:	d0a74843 	ldbu	r2,-25311(gp)
  800e34:	10803fcc 	andi	r2,r2,255
  800e38:	10000f26 	beq	r2,zero,800e78 <main+0x5f4>
				for (int i = LEDG4; i < LEDG7 + 1; i += 2) {
  800e3c:	00800104 	movi	r2,4
  800e40:	e0bf7c15 	stw	r2,-528(fp)
  800e44:	00000906 	br	800e6c <main+0x5e8>
					led_value = led_value |= (1<<i);
  800e48:	00c00044 	movi	r3,1
  800e4c:	e0bf7c17 	ldw	r2,-528(fp)
  800e50:	1884983a 	sll	r2,r3,r2
  800e54:	e0ff7a17 	ldw	r3,-536(fp)
  800e58:	1884b03a 	or	r2,r3,r2
  800e5c:	e0bf7a15 	stw	r2,-536(fp)
				// SET ALL BITS UP FROM LEDG4 TO LEDG7
				for (int i = LEDG4; i < LEDG7 + 1; i++) {
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
				for (int i = LEDG4; i < LEDG7 + 1; i += 2) {
  800e60:	e0bf7c17 	ldw	r2,-528(fp)
  800e64:	10800084 	addi	r2,r2,2
  800e68:	e0bf7c15 	stw	r2,-528(fp)
  800e6c:	e0bf7c17 	ldw	r2,-528(fp)
  800e70:	10800210 	cmplti	r2,r2,8
  800e74:	103ff41e 	bne	r2,zero,800e48 <__alt_mem_onchip_mem+0xff7f8e48>
					led_value = led_value |= (1<<i);
				}
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800e78:	00804074 	movhi	r2,257
  800e7c:	10841c04 	addi	r2,r2,4208
  800e80:	e0ff7a17 	ldw	r3,-536(fp)
  800e84:	10c00035 	stwio	r3,0(r2)

		}

		if (led_pace_ventricular_event) {
  800e88:	d0a74ac3 	ldbu	r2,-25301(gp)
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	10003c26 	beq	r2,zero,800f84 <main+0x700>
			if (!v_pace_led_timer_already_started) {
  800e94:	d0a74bc3 	ldbu	r2,-25297(gp)
  800e98:	1080005c 	xori	r2,r2,1
  800e9c:	10803fcc 	andi	r2,r2,255
  800ea0:	10000c26 	beq	r2,zero,800ed4 <main+0x650>
				alt_alarm_stop(&v_pace_led_timer);
  800ea4:	e0bfdb04 	addi	r2,fp,-148
  800ea8:	1009883a 	mov	r4,r2
  800eac:	08138b00 	call	8138b0 <alt_alarm_stop>
				alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  800eb0:	e0bfdb04 	addi	r2,fp,-148
  800eb4:	000f883a 	mov	r7,zero
  800eb8:	01802034 	movhi	r6,128
  800ebc:	3181a804 	addi	r6,r6,1696
  800ec0:	01400644 	movi	r5,25
  800ec4:	1009883a 	mov	r4,r2
  800ec8:	0812ba00 	call	812ba0 <alt_alarm_start>
				v_pace_led_timer_already_started = true;
  800ecc:	00800044 	movi	r2,1
  800ed0:	d0a74bc5 	stb	r2,-25297(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800ed4:	00804074 	movhi	r2,257
  800ed8:	10841c04 	addi	r2,r2,4208
  800edc:	10800037 	ldwio	r2,0(r2)
  800ee0:	e0bf7d15 	stw	r2,-524(fp)

			if (implementation_mode == C_MODE) {
  800ee4:	d0a74843 	ldbu	r2,-25311(gp)
  800ee8:	1080005c 	xori	r2,r2,1
  800eec:	10803fcc 	andi	r2,r2,255
  800ef0:	10000f26 	beq	r2,zero,800f30 <main+0x6ac>
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800ef4:	e03f7e15 	stw	zero,-520(fp)
  800ef8:	00000906 	br	800f20 <main+0x69c>
					led_value = led_value |= (1<<i);
  800efc:	00c00044 	movi	r3,1
  800f00:	e0bf7e17 	ldw	r2,-520(fp)
  800f04:	1884983a 	sll	r2,r3,r2
  800f08:	e0ff7d17 	ldw	r3,-524(fp)
  800f0c:	1884b03a 	or	r2,r3,r2
  800f10:	e0bf7d15 	stw	r2,-524(fp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

			if (implementation_mode == C_MODE) {
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800f14:	e0bf7e17 	ldw	r2,-520(fp)
  800f18:	10800044 	addi	r2,r2,1
  800f1c:	e0bf7e15 	stw	r2,-520(fp)
  800f20:	e0bf7e17 	ldw	r2,-520(fp)
  800f24:	10800110 	cmplti	r2,r2,4
  800f28:	103ff41e 	bne	r2,zero,800efc <__alt_mem_onchip_mem+0xff7f8efc>
  800f2c:	00001106 	br	800f74 <main+0x6f0>
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  800f30:	d0a74843 	ldbu	r2,-25311(gp)
  800f34:	10803fcc 	andi	r2,r2,255
  800f38:	10000e26 	beq	r2,zero,800f74 <main+0x6f0>
				for (int i = LEDG0; i < LEDG3 + 1; i += 2) {
  800f3c:	e03f7f15 	stw	zero,-516(fp)
  800f40:	00000906 	br	800f68 <main+0x6e4>
					led_value = led_value |= (1<<i);
  800f44:	00c00044 	movi	r3,1
  800f48:	e0bf7f17 	ldw	r2,-516(fp)
  800f4c:	1884983a 	sll	r2,r3,r2
  800f50:	e0ff7d17 	ldw	r3,-524(fp)
  800f54:	1884b03a 	or	r2,r3,r2
  800f58:	e0bf7d15 	stw	r2,-524(fp)
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = LEDG0; i < LEDG3 + 1; i++) {
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
				for (int i = LEDG0; i < LEDG3 + 1; i += 2) {
  800f5c:	e0bf7f17 	ldw	r2,-516(fp)
  800f60:	10800084 	addi	r2,r2,2
  800f64:	e0bf7f15 	stw	r2,-516(fp)
  800f68:	e0bf7f17 	ldw	r2,-516(fp)
  800f6c:	10800110 	cmplti	r2,r2,4
  800f70:	103ff41e 	bne	r2,zero,800f44 <__alt_mem_onchip_mem+0xff7f8f44>
					led_value = led_value |= (1<<i);
				}
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800f74:	00804074 	movhi	r2,257
  800f78:	10841c04 	addi	r2,r2,4208
  800f7c:	e0ff7d17 	ldw	r3,-524(fp)
  800f80:	10c00035 	stwio	r3,0(r2)
		}
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==

		// SENSE LEDS == SENSE LEDS == SENSE LEDS == SENSE LEDS ==
		if (led_sense_atrial_event) {
  800f84:	d0a74b03 	ldbu	r2,-25300(gp)
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	10003e26 	beq	r2,zero,801088 <main+0x804>
			if (!a_sense_led_timer_already_started) {
  800f90:	d0a74c03 	ldbu	r2,-25296(gp)
  800f94:	1080005c 	xori	r2,r2,1
  800f98:	10803fcc 	andi	r2,r2,255
  800f9c:	10000c26 	beq	r2,zero,800fd0 <main+0x74c>
				alt_alarm_stop(&a_sense_led_timer);
  800fa0:	e0bfe104 	addi	r2,fp,-124
  800fa4:	1009883a 	mov	r4,r2
  800fa8:	08138b00 	call	8138b0 <alt_alarm_stop>
				alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  800fac:	e0bfe104 	addi	r2,fp,-124
  800fb0:	000f883a 	mov	r7,zero
  800fb4:	01802034 	movhi	r6,128
  800fb8:	3181b204 	addi	r6,r6,1736
  800fbc:	01400644 	movi	r5,25
  800fc0:	1009883a 	mov	r4,r2
  800fc4:	0812ba00 	call	812ba0 <alt_alarm_start>
				a_sense_led_timer_already_started = true;
  800fc8:	00800044 	movi	r2,1
  800fcc:	d0a74c05 	stb	r2,-25296(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800fd0:	00804074 	movhi	r2,257
  800fd4:	10842004 	addi	r2,r2,4224
  800fd8:	10800037 	ldwio	r2,0(r2)
  800fdc:	e0bf8015 	stw	r2,-512(fp)

			if (implementation_mode == C_MODE) {
  800fe0:	d0a74843 	ldbu	r2,-25311(gp)
  800fe4:	1080005c 	xori	r2,r2,1
  800fe8:	10803fcc 	andi	r2,r2,255
  800fec:	10001026 	beq	r2,zero,801030 <main+0x7ac>
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 9; i < 18; i++) {
  800ff0:	00800244 	movi	r2,9
  800ff4:	e0bf8115 	stw	r2,-508(fp)
  800ff8:	00000906 	br	801020 <main+0x79c>
					led_value = led_value |= (1<<i);
  800ffc:	00c00044 	movi	r3,1
  801000:	e0bf8117 	ldw	r2,-508(fp)
  801004:	1884983a 	sll	r2,r3,r2
  801008:	e0ff8017 	ldw	r3,-512(fp)
  80100c:	1884b03a 	or	r2,r3,r2
  801010:	e0bf8015 	stw	r2,-512(fp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

			if (implementation_mode == C_MODE) {
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 9; i < 18; i++) {
  801014:	e0bf8117 	ldw	r2,-508(fp)
  801018:	10800044 	addi	r2,r2,1
  80101c:	e0bf8115 	stw	r2,-508(fp)
  801020:	e0bf8117 	ldw	r2,-508(fp)
  801024:	10800490 	cmplti	r2,r2,18
  801028:	103ff41e 	bne	r2,zero,800ffc <__alt_mem_onchip_mem+0xff7f8ffc>
  80102c:	00001206 	br	801078 <main+0x7f4>
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  801030:	d0a74843 	ldbu	r2,-25311(gp)
  801034:	10803fcc 	andi	r2,r2,255
  801038:	10000f26 	beq	r2,zero,801078 <main+0x7f4>
				for (int i = 9; i < 18; i += 2) {
  80103c:	00800244 	movi	r2,9
  801040:	e0bf8215 	stw	r2,-504(fp)
  801044:	00000906 	br	80106c <main+0x7e8>
					led_value = led_value |= (1<<i);
  801048:	00c00044 	movi	r3,1
  80104c:	e0bf8217 	ldw	r2,-504(fp)
  801050:	1884983a 	sll	r2,r3,r2
  801054:	e0ff8017 	ldw	r3,-512(fp)
  801058:	1884b03a 	or	r2,r3,r2
  80105c:	e0bf8015 	stw	r2,-512(fp)
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 9; i < 18; i++) {
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
				for (int i = 9; i < 18; i += 2) {
  801060:	e0bf8217 	ldw	r2,-504(fp)
  801064:	10800084 	addi	r2,r2,2
  801068:	e0bf8215 	stw	r2,-504(fp)
  80106c:	e0bf8217 	ldw	r2,-504(fp)
  801070:	10800490 	cmplti	r2,r2,18
  801074:	103ff41e 	bne	r2,zero,801048 <__alt_mem_onchip_mem+0xff7f9048>
					led_value = led_value |= (1<<i);
				}
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  801078:	00804074 	movhi	r2,257
  80107c:	10842004 	addi	r2,r2,4224
  801080:	e0ff8017 	ldw	r3,-512(fp)
  801084:	10c00035 	stwio	r3,0(r2)

		}

		if (led_sense_ventricular_event) {
  801088:	d0a74b43 	ldbu	r2,-25299(gp)
  80108c:	10803fcc 	andi	r2,r2,255
  801090:	10003c26 	beq	r2,zero,801184 <main+0x900>
			if (!v_sense_led_timer_already_started) {
  801094:	d0a74c43 	ldbu	r2,-25295(gp)
  801098:	1080005c 	xori	r2,r2,1
  80109c:	10803fcc 	andi	r2,r2,255
  8010a0:	10000c26 	beq	r2,zero,8010d4 <main+0x850>
				alt_alarm_stop(&v_sense_led_timer);
  8010a4:	e0bfe704 	addi	r2,fp,-100
  8010a8:	1009883a 	mov	r4,r2
  8010ac:	08138b00 	call	8138b0 <alt_alarm_stop>
				alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  8010b0:	e0bfe704 	addi	r2,fp,-100
  8010b4:	000f883a 	mov	r7,zero
  8010b8:	01802034 	movhi	r6,128
  8010bc:	3181bc04 	addi	r6,r6,1776
  8010c0:	01400644 	movi	r5,25
  8010c4:	1009883a 	mov	r4,r2
  8010c8:	0812ba00 	call	812ba0 <alt_alarm_start>
				v_sense_led_timer_already_started = true;
  8010cc:	00800044 	movi	r2,1
  8010d0:	d0a74c45 	stb	r2,-25295(gp)
			}

			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  8010d4:	00804074 	movhi	r2,257
  8010d8:	10842004 	addi	r2,r2,4224
  8010dc:	10800037 	ldwio	r2,0(r2)
  8010e0:	e0bf8315 	stw	r2,-500(fp)

			if (implementation_mode == C_MODE) {
  8010e4:	d0a74843 	ldbu	r2,-25311(gp)
  8010e8:	1080005c 	xori	r2,r2,1
  8010ec:	10803fcc 	andi	r2,r2,255
  8010f0:	10000f26 	beq	r2,zero,801130 <main+0x8ac>
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 0; i < 9; i++) {
  8010f4:	e03f8415 	stw	zero,-496(fp)
  8010f8:	00000906 	br	801120 <main+0x89c>
					led_value = led_value |= (1<<i);
  8010fc:	00c00044 	movi	r3,1
  801100:	e0bf8417 	ldw	r2,-496(fp)
  801104:	1884983a 	sll	r2,r3,r2
  801108:	e0ff8317 	ldw	r3,-500(fp)
  80110c:	1884b03a 	or	r2,r3,r2
  801110:	e0bf8315 	stw	r2,-500(fp)

			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

			if (implementation_mode == C_MODE) {
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 0; i < 9; i++) {
  801114:	e0bf8417 	ldw	r2,-496(fp)
  801118:	10800044 	addi	r2,r2,1
  80111c:	e0bf8415 	stw	r2,-496(fp)
  801120:	e0bf8417 	ldw	r2,-496(fp)
  801124:	10800250 	cmplti	r2,r2,9
  801128:	103ff41e 	bne	r2,zero,8010fc <__alt_mem_onchip_mem+0xff7f90fc>
  80112c:	00001106 	br	801174 <main+0x8f0>
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  801130:	d0a74843 	ldbu	r2,-25311(gp)
  801134:	10803fcc 	andi	r2,r2,255
  801138:	10000e26 	beq	r2,zero,801174 <main+0x8f0>
				for (int i = 0; i < 9; i += 2) {
  80113c:	e03f8515 	stw	zero,-492(fp)
  801140:	00000906 	br	801168 <main+0x8e4>
					led_value = led_value |= (1<<i);
  801144:	00c00044 	movi	r3,1
  801148:	e0bf8517 	ldw	r2,-492(fp)
  80114c:	1884983a 	sll	r2,r3,r2
  801150:	e0ff8317 	ldw	r3,-500(fp)
  801154:	1884b03a 	or	r2,r3,r2
  801158:	e0bf8315 	stw	r2,-500(fp)
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 0; i < 9; i++) {
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
				for (int i = 0; i < 9; i += 2) {
  80115c:	e0bf8517 	ldw	r2,-492(fp)
  801160:	10800084 	addi	r2,r2,2
  801164:	e0bf8515 	stw	r2,-492(fp)
  801168:	e0bf8517 	ldw	r2,-492(fp)
  80116c:	10800250 	cmplti	r2,r2,9
  801170:	103ff41e 	bne	r2,zero,801144 <__alt_mem_onchip_mem+0xff7f9144>
					led_value = led_value |= (1<<i);
				}
			}


			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  801174:	00804074 	movhi	r2,257
  801178:	10842004 	addi	r2,r2,4224
  80117c:	e0ff8317 	ldw	r3,-500(fp)
  801180:	10c00035 	stwio	r3,0(r2)

		}
		// LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION ==
		// LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION ==
		if (lcd != NULL) {
  801184:	e0bf8917 	ldw	r2,-476(fp)
  801188:	10000c26 	beq	r2,zero,8011bc <main+0x938>
			// Print flag used to print once every time either mode changes
			// instead of every while iteration
			if (print_flag) {
  80118c:	d0a74c83 	ldbu	r2,-25294(gp)
  801190:	10803fcc 	andi	r2,r2,255
  801194:	10000926 	beq	r2,zero,8011bc <main+0x938>
				print_flag = false;
  801198:	d0274c85 	stb	zero,-25294(gp)
				// Call print to LCD function from lcd_control.c
				print_modes_to_lcd(lcd, implementation_mode, pulse_mode);
  80119c:	d0a74843 	ldbu	r2,-25311(gp)
  8011a0:	10803fcc 	andi	r2,r2,255
  8011a4:	d0e74803 	ldbu	r3,-25312(gp)
  8011a8:	18c03fcc 	andi	r3,r3,255
  8011ac:	180d883a 	mov	r6,r3
  8011b0:	100b883a 	mov	r5,r2
  8011b4:	e13f8917 	ldw	r4,-476(fp)
  8011b8:	08002900 	call	800290 <print_modes_to_lcd>
		// LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION ==
		// LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION ==

		// CALL CLEAR LED FUNCTIONS
		// -- Only clears when the relevant flags are set.
		clear_pace_led_events();
  8011bc:	08012880 	call	801288 <clear_pace_led_events>
		clear_sense_led_events();
  8011c0:	08012e00 	call	8012e0 <clear_sense_led_events>
	}
  8011c4:	003e1d06 	br	800a3c <__alt_mem_onchip_mem+0xff7f8a3c>

008011c8 <send_atrial_event>:
/**
 * Sets the atrial event flag to true when ANY atrial event is sensed
 *
 * bool isThisEventPaced - Sets the a_is_paced flag to true if this event is paced
 */
void send_atrial_event(bool isThisEventPaced) {
  8011c8:	defffd04 	addi	sp,sp,-12
  8011cc:	df000215 	stw	fp,8(sp)
  8011d0:	df000204 	addi	fp,sp,8
  8011d4:	2005883a 	mov	r2,r4
  8011d8:	e0bfff05 	stb	r2,-4(fp)
	// Ventricular event == true when ANY sort of event happens
	if (isThisEventPaced) {
  8011dc:	e0bfff03 	ldbu	r2,-4(fp)
  8011e0:	10000926 	beq	r2,zero,801208 <send_atrial_event+0x40>
		a_is_paced = true;
  8011e4:	00800044 	movi	r2,1
  8011e8:	d0a748c5 	stb	r2,-25309(gp)
		char atrial_char = 'A';
  8011ec:	00801044 	movi	r2,65
  8011f0:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, atrial_char);
  8011f4:	e0fffe07 	ldb	r3,-8(fp)
  8011f8:	00804074 	movhi	r2,257
  8011fc:	10841104 	addi	r2,r2,4164
  801200:	10c00035 	stwio	r3,0(r2)
  801204:	00000106 	br	80120c <send_atrial_event+0x44>
	} else {
		a_is_paced = false;
  801208:	d02748c5 	stb	zero,-25309(gp)
	}
	atrial_event = true;
  80120c:	00800044 	movi	r2,1
  801210:	d0a74885 	stb	r2,-25310(gp)
	//printf("Atrial Event Flagged!\n"); -- DEBUGGINGS PURPOSES
}
  801214:	0001883a 	nop
  801218:	e037883a 	mov	sp,fp
  80121c:	df000017 	ldw	fp,0(sp)
  801220:	dec00104 	addi	sp,sp,4
  801224:	f800283a 	ret

00801228 <send_ventricular_event>:
/**
 * Sets the ventricular event flag to true when ANY ventricular event is sensed
 *
 * bool isThisEventPaced - Sets the v_is_paced flag to true if this event is paced
 */
void send_ventricular_event(bool isThisEventPaced) {
  801228:	defffd04 	addi	sp,sp,-12
  80122c:	df000215 	stw	fp,8(sp)
  801230:	df000204 	addi	fp,sp,8
  801234:	2005883a 	mov	r2,r4
  801238:	e0bfff05 	stb	r2,-4(fp)
	if (isThisEventPaced) {
  80123c:	e0bfff03 	ldbu	r2,-4(fp)
  801240:	10000926 	beq	r2,zero,801268 <send_ventricular_event+0x40>
		v_is_paced = true;
  801244:	00800044 	movi	r2,1
  801248:	d0a74945 	stb	r2,-25307(gp)
		char ventricular_char = 'V';
  80124c:	00801584 	movi	r2,86
  801250:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, ventricular_char);
  801254:	e0fffe07 	ldb	r3,-8(fp)
  801258:	00804074 	movhi	r2,257
  80125c:	10841104 	addi	r2,r2,4164
  801260:	10c00035 	stwio	r3,0(r2)
  801264:	00000106 	br	80126c <send_ventricular_event+0x44>
	} else {
		v_is_paced = false;
  801268:	d0274945 	stb	zero,-25307(gp)
	}
	ventricular_event = true;
  80126c:	00800044 	movi	r2,1
  801270:	d0a74905 	stb	r2,-25308(gp)
	//printf("Ventricular Event Flagged!\n"); -- DEBUGGINGS PURPOSES
}
  801274:	0001883a 	nop
  801278:	e037883a 	mov	sp,fp
  80127c:	df000017 	ldw	fp,0(sp)
  801280:	dec00104 	addi	sp,sp,4
  801284:	f800283a 	ret

00801288 <clear_pace_led_events>:

/**
 * Clears the atrium/ventricle pace green LEDs
 */
void clear_pace_led_events() {
  801288:	defffe04 	addi	sp,sp,-8
  80128c:	dfc00115 	stw	ra,4(sp)
  801290:	df000015 	stw	fp,0(sp)
  801294:	d839883a 	mov	fp,sp
	// If LED flag for atrial pace is no longer on, clear LEDs
	if (!led_pace_atrial_event) {
  801298:	d0a74a83 	ldbu	r2,-25302(gp)
  80129c:	1080005c 	xori	r2,r2,1
  8012a0:	10803fcc 	andi	r2,r2,255
  8012a4:	10000226 	beq	r2,zero,8012b0 <clear_pace_led_events+0x28>
		a_pace_led_timer_already_started = false;
  8012a8:	d0274b85 	stb	zero,-25298(gp)
		// Call clear relevant green LEDs function from led_control.c
		clear_green_leds_4_to_7();
  8012ac:	08004f80 	call	8004f8 <clear_green_leds_4_to_7>
	}
	// If LED flag for atrial pace is no longer on, clear LEDs
	if (!led_pace_ventricular_event) {
  8012b0:	d0a74ac3 	ldbu	r2,-25301(gp)
  8012b4:	1080005c 	xori	r2,r2,1
  8012b8:	10803fcc 	andi	r2,r2,255
  8012bc:	10000226 	beq	r2,zero,8012c8 <clear_pace_led_events+0x40>
		v_pace_led_timer_already_started = false;
  8012c0:	d0274bc5 	stb	zero,-25297(gp)
		// Call clear relevant green LEDs function from led_control.c
		clear_green_leds_0_to_3();
  8012c4:	080047c0 	call	80047c <clear_green_leds_0_to_3>
	}
}
  8012c8:	0001883a 	nop
  8012cc:	e037883a 	mov	sp,fp
  8012d0:	dfc00117 	ldw	ra,4(sp)
  8012d4:	df000017 	ldw	fp,0(sp)
  8012d8:	dec00204 	addi	sp,sp,8
  8012dc:	f800283a 	ret

008012e0 <clear_sense_led_events>:

/**
 * Clears the atrium/ventricle sense red LEDs
 */
void clear_sense_led_events() {
  8012e0:	defffe04 	addi	sp,sp,-8
  8012e4:	dfc00115 	stw	ra,4(sp)
  8012e8:	df000015 	stw	fp,0(sp)
  8012ec:	d839883a 	mov	fp,sp
	// If LED flag for atrial sense is no longer on, clear LEDs
	if (!led_sense_atrial_event) {
  8012f0:	d0a74b03 	ldbu	r2,-25300(gp)
  8012f4:	1080005c 	xori	r2,r2,1
  8012f8:	10803fcc 	andi	r2,r2,255
  8012fc:	10000226 	beq	r2,zero,801308 <clear_sense_led_events+0x28>
		a_sense_led_timer_already_started = false;
  801300:	d0274c05 	stb	zero,-25296(gp)
		// Call clear relevant red LEDs function from led_control.c
		clear_red_leds_9_to_17();
  801304:	08003fc0 	call	8003fc <clear_red_leds_9_to_17>
	}
	// If LED flag for ventricular sense is no longer on, clear LEDs
	if (!led_sense_ventricular_event) {
  801308:	d0a74b43 	ldbu	r2,-25299(gp)
  80130c:	1080005c 	xori	r2,r2,1
  801310:	10803fcc 	andi	r2,r2,255
  801314:	10000226 	beq	r2,zero,801320 <clear_sense_led_events+0x40>
		v_sense_led_timer_already_started = false;
  801318:	d0274c45 	stb	zero,-25295(gp)
		// Call clear relevant red LEDs function from led_control.c
		clear_red_leds_0_to_8();
  80131c:	08003800 	call	800380 <clear_red_leds_0_to_8>
	}
}
  801320:	0001883a 	nop
  801324:	e037883a 	mov	sp,fp
  801328:	dfc00117 	ldw	ra,4(sp)
  80132c:	df000017 	ldw	fp,0(sp)
  801330:	dec00204 	addi	sp,sp,8
  801334:	f800283a 	ret

00801338 <c_mode_pacemaker>:
 * conditions and current events of the pacemaker
 *
 * int a_timer_count - the count from an atrium alt_alarm
 * int v_timer_count - the count from a ventricle alt_alarm
 */
void c_mode_pacemaker(int a_timer_count, int v_timer_count) {
  801338:	defffc04 	addi	sp,sp,-16
  80133c:	dfc00315 	stw	ra,12(sp)
  801340:	df000215 	stw	fp,8(sp)
  801344:	df000204 	addi	fp,sp,8
  801348:	e13ffe15 	stw	r4,-8(fp)
  80134c:	e17fff15 	stw	r5,-4(fp)
	// Pace atrium if ventricular timer count is above AEI value, atrial event hasn't been hit yet, and
	// the last event was a ventricular event.
	if (v_timer_count >= AEI_VALUE && !atrial_sense && current_event == VENTRICULAR_EVENT) {
  801350:	e0bfff17 	ldw	r2,-4(fp)
  801354:	1080c810 	cmplti	r2,r2,800
  801358:	1000091e 	bne	r2,zero,801380 <c_mode_pacemaker+0x48>
  80135c:	d0a74983 	ldbu	r2,-25306(gp)
  801360:	1080005c 	xori	r2,r2,1
  801364:	10803fcc 	andi	r2,r2,255
  801368:	10000526 	beq	r2,zero,801380 <c_mode_pacemaker+0x48>
  80136c:	d0a74e17 	ldw	r2,-25288(gp)
  801370:	10800058 	cmpnei	r2,r2,1
  801374:	1000021e 	bne	r2,zero,801380 <c_mode_pacemaker+0x48>
		send_atrial_event(true);
  801378:	01000044 	movi	r4,1
  80137c:	08011c80 	call	8011c8 <send_atrial_event>
	}
	// Do not pace ventricle until ventricular timer count is above URI
	if (v_timer_count >= URI_VALUE) {
  801380:	e0bfff17 	ldw	r2,-4(fp)
  801384:	1080e110 	cmplti	r2,r2,900
  801388:	1000161e 	bne	r2,zero,8013e4 <c_mode_pacemaker+0xac>
		// Pace ventricle if timer count is above AVI, venetricular event hasn't happened and
		// the last event was an atrial event
		if (a_timer_count >= AVI_VALUE && !ventricular_sense && current_event == ATRIAL_EVENT) {
  80138c:	e0bffe17 	ldw	r2,-8(fp)
  801390:	10804b10 	cmplti	r2,r2,300
  801394:	1000081e 	bne	r2,zero,8013b8 <c_mode_pacemaker+0x80>
  801398:	d0a749c3 	ldbu	r2,-25305(gp)
  80139c:	1080005c 	xori	r2,r2,1
  8013a0:	10803fcc 	andi	r2,r2,255
  8013a4:	10000426 	beq	r2,zero,8013b8 <c_mode_pacemaker+0x80>
  8013a8:	d0a74e17 	ldw	r2,-25288(gp)
  8013ac:	1000021e 	bne	r2,zero,8013b8 <c_mode_pacemaker+0x80>
			send_ventricular_event(true);
  8013b0:	01000044 	movi	r4,1
  8013b4:	08012280 	call	801228 <send_ventricular_event>
		}
		// Pace ventricle if timer count is above LRI, ventricular event hasn't happened and
		// the last event was an atrial event
		if (v_timer_count >= LRI_VALUE && !ventricular_sense && current_event == ATRIAL_EVENT) {
  8013b8:	e0bfff17 	ldw	r2,-4(fp)
  8013bc:	1080ed90 	cmplti	r2,r2,950
  8013c0:	1000081e 	bne	r2,zero,8013e4 <c_mode_pacemaker+0xac>
  8013c4:	d0a749c3 	ldbu	r2,-25305(gp)
  8013c8:	1080005c 	xori	r2,r2,1
  8013cc:	10803fcc 	andi	r2,r2,255
  8013d0:	10000426 	beq	r2,zero,8013e4 <c_mode_pacemaker+0xac>
  8013d4:	d0a74e17 	ldw	r2,-25288(gp)
  8013d8:	1000021e 	bne	r2,zero,8013e4 <c_mode_pacemaker+0xac>
			send_ventricular_event(true);
  8013dc:	01000044 	movi	r4,1
  8013e0:	08012280 	call	801228 <send_ventricular_event>
		}
	}
}
  8013e4:	0001883a 	nop
  8013e8:	e037883a 	mov	sp,fp
  8013ec:	dfc00117 	ldw	ra,4(sp)
  8013f0:	df000017 	ldw	fp,0(sp)
  8013f4:	dec00204 	addi	sp,sp,8
  8013f8:	f800283a 	ret

008013fc <logic>:

#include "timing.h"

#include "sccharts.h"

void logic(TickData* d) {
  8013fc:	defffa04 	addi	sp,sp,-24
  801400:	dfc00515 	stw	ra,20(sp)
  801404:	df000415 	stw	fp,16(sp)
  801408:	dc800315 	stw	r18,12(sp)
  80140c:	dc400215 	stw	r17,8(sp)
  801410:	dc000115 	stw	r16,4(sp)
  801414:	df000404 	addi	fp,sp,16
  801418:	e13ffc15 	stw	r4,-16(fp)
  d->_g127 = d->_pg66;
  80141c:	e0bffc17 	ldw	r2,-16(fp)
  801420:	10c03f83 	ldbu	r3,254(r2)
  801424:	e0bffc17 	ldw	r2,-16(fp)
  801428:	10c03105 	stb	r3,196(r2)
  if (d->_g127) {
  80142c:	e0bffc17 	ldw	r2,-16(fp)
  801430:	10803103 	ldbu	r2,196(r2)
  801434:	10803fcc 	andi	r2,r2,255
  801438:	1080201c 	xori	r2,r2,128
  80143c:	10bfe004 	addi	r2,r2,-128
  801440:	10001226 	beq	r2,zero,80148c <logic+0x90>
    d->AVI_Clock += d->deltaT;
  801444:	e13ffc17 	ldw	r4,-16(fp)
  801448:	20801017 	ldw	r2,64(r4)
  80144c:	20c01117 	ldw	r3,68(r4)
  801450:	e1bffc17 	ldw	r6,-16(fp)
  801454:	31001917 	ldw	r4,100(r6)
  801458:	31401a17 	ldw	r5,104(r6)
  80145c:	200d883a 	mov	r6,r4
  801460:	280f883a 	mov	r7,r5
  801464:	1009883a 	mov	r4,r2
  801468:	180b883a 	mov	r5,r3
  80146c:	08057900 	call	805790 <__adddf3>
  801470:	1009883a 	mov	r4,r2
  801474:	180b883a 	mov	r5,r3
  801478:	2005883a 	mov	r2,r4
  80147c:	2807883a 	mov	r3,r5
  801480:	e13ffc17 	ldw	r4,-16(fp)
  801484:	20801015 	stw	r2,64(r4)
  801488:	20c01115 	stw	r3,68(r4)
  }
  d->_g70 = d->_pg44;
  80148c:	e0bffc17 	ldw	r2,-16(fp)
  801490:	10c03fc3 	ldbu	r3,255(r2)
  801494:	e0bffc17 	ldw	r2,-16(fp)
  801498:	10c02b45 	stb	r3,173(r2)
  d->_g64 = d->_pg38;
  80149c:	e0bffc17 	ldw	r2,-16(fp)
  8014a0:	10c04003 	ldbu	r3,256(r2)
  8014a4:	e0bffc17 	ldw	r2,-16(fp)
  8014a8:	10c02a45 	stb	r3,169(r2)
  d->_g67_e1 = !(d->_g70 || d->_g64);
  8014ac:	e0bffc17 	ldw	r2,-16(fp)
  8014b0:	10802b43 	ldbu	r2,173(r2)
  8014b4:	10803fcc 	andi	r2,r2,255
  8014b8:	1080201c 	xori	r2,r2,128
  8014bc:	10bfe004 	addi	r2,r2,-128
  8014c0:	1000081e 	bne	r2,zero,8014e4 <logic+0xe8>
  8014c4:	e0bffc17 	ldw	r2,-16(fp)
  8014c8:	10802a43 	ldbu	r2,169(r2)
  8014cc:	10803fcc 	andi	r2,r2,255
  8014d0:	1080201c 	xori	r2,r2,128
  8014d4:	10bfe004 	addi	r2,r2,-128
  8014d8:	1000021e 	bne	r2,zero,8014e4 <logic+0xe8>
  8014dc:	00800044 	movi	r2,1
  8014e0:	00000106 	br	8014e8 <logic+0xec>
  8014e4:	0005883a 	mov	r2,zero
  8014e8:	1007883a 	mov	r3,r2
  8014ec:	e0bffc17 	ldw	r2,-16(fp)
  8014f0:	10c03e85 	stb	r3,250(r2)
  d->_g123 = d->_pg96;
  8014f4:	e0bffc17 	ldw	r2,-16(fp)
  8014f8:	10c04043 	ldbu	r3,257(r2)
  8014fc:	e0bffc17 	ldw	r2,-16(fp)
  801500:	10c030c5 	stb	r3,195(r2)
  if (d->_g123) {
  801504:	e0bffc17 	ldw	r2,-16(fp)
  801508:	108030c3 	ldbu	r2,195(r2)
  80150c:	10803fcc 	andi	r2,r2,255
  801510:	1080201c 	xori	r2,r2,128
  801514:	10bfe004 	addi	r2,r2,-128
  801518:	10001226 	beq	r2,zero,801564 <logic+0x168>
    d->PVARP_Clock += d->deltaT;
  80151c:	e13ffc17 	ldw	r4,-16(fp)
  801520:	20800e17 	ldw	r2,56(r4)
  801524:	20c00f17 	ldw	r3,60(r4)
  801528:	e1bffc17 	ldw	r6,-16(fp)
  80152c:	31001917 	ldw	r4,100(r6)
  801530:	31401a17 	ldw	r5,104(r6)
  801534:	200d883a 	mov	r6,r4
  801538:	280f883a 	mov	r7,r5
  80153c:	1009883a 	mov	r4,r2
  801540:	180b883a 	mov	r5,r3
  801544:	08057900 	call	805790 <__adddf3>
  801548:	1009883a 	mov	r4,r2
  80154c:	180b883a 	mov	r5,r3
  801550:	2005883a 	mov	r2,r4
  801554:	2807883a 	mov	r3,r5
  801558:	e13ffc17 	ldw	r4,-16(fp)
  80155c:	20800e15 	stw	r2,56(r4)
  801560:	20c00f15 	stw	r3,60(r4)
  }
  d->_g85 = d->_pg97;
  801564:	e0bffc17 	ldw	r2,-16(fp)
  801568:	10c04083 	ldbu	r3,258(r2)
  80156c:	e0bffc17 	ldw	r2,-16(fp)
  801570:	10c02c85 	stb	r3,178(r2)
  d->_cg85 = d->AS == 1 && d->PVARP_Clock >= d->PVARP;
  801574:	e0bffc17 	ldw	r2,-16(fp)
  801578:	10801d03 	ldbu	r2,116(r2)
  80157c:	10803fcc 	andi	r2,r2,255
  801580:	1080201c 	xori	r2,r2,128
  801584:	10bfe004 	addi	r2,r2,-128
  801588:	10800058 	cmpnei	r2,r2,1
  80158c:	1000111e 	bne	r2,zero,8015d4 <logic+0x1d8>
  801590:	e0bffc17 	ldw	r2,-16(fp)
  801594:	14000e17 	ldw	r16,56(r2)
  801598:	14400f17 	ldw	r17,60(r2)
  80159c:	e0bffc17 	ldw	r2,-16(fp)
  8015a0:	10800217 	ldw	r2,8(r2)
  8015a4:	1009883a 	mov	r4,r2
  8015a8:	0806b080 	call	806b08 <__floatsidf>
  8015ac:	1009883a 	mov	r4,r2
  8015b0:	180b883a 	mov	r5,r3
  8015b4:	200d883a 	mov	r6,r4
  8015b8:	280f883a 	mov	r7,r5
  8015bc:	8009883a 	mov	r4,r16
  8015c0:	880b883a 	mov	r5,r17
  8015c4:	080603c0 	call	80603c <__gedf2>
  8015c8:	10000216 	blt	r2,zero,8015d4 <logic+0x1d8>
  8015cc:	00800044 	movi	r2,1
  8015d0:	00000106 	br	8015d8 <logic+0x1dc>
  8015d4:	0005883a 	mov	r2,zero
  8015d8:	1007883a 	mov	r3,r2
  8015dc:	e0bffc17 	ldw	r2,-16(fp)
  8015e0:	10c03c05 	stb	r3,240(r2)
  d->_g86 = d->_g85 && d->_cg85;
  8015e4:	e0bffc17 	ldw	r2,-16(fp)
  8015e8:	10802c83 	ldbu	r2,178(r2)
  8015ec:	10803fcc 	andi	r2,r2,255
  8015f0:	1080201c 	xori	r2,r2,128
  8015f4:	10bfe004 	addi	r2,r2,-128
  8015f8:	10000826 	beq	r2,zero,80161c <logic+0x220>
  8015fc:	e0bffc17 	ldw	r2,-16(fp)
  801600:	10803c03 	ldbu	r2,240(r2)
  801604:	10803fcc 	andi	r2,r2,255
  801608:	1080201c 	xori	r2,r2,128
  80160c:	10bfe004 	addi	r2,r2,-128
  801610:	10000226 	beq	r2,zero,80161c <logic+0x220>
  801614:	00800044 	movi	r2,1
  801618:	00000106 	br	801620 <logic+0x224>
  80161c:	0005883a 	mov	r2,zero
  801620:	1007883a 	mov	r3,r2
  801624:	e0bffc17 	ldw	r2,-16(fp)
  801628:	10c02cc5 	stb	r3,179(r2)
  if (d->_g86) {
  80162c:	e0bffc17 	ldw	r2,-16(fp)
  801630:	10802cc3 	ldbu	r2,179(r2)
  801634:	10803fcc 	andi	r2,r2,255
  801638:	1080201c 	xori	r2,r2,128
  80163c:	10bfe004 	addi	r2,r2,-128
  801640:	10000326 	beq	r2,zero,801650 <logic+0x254>
    d->_Pacemaker_local__Atrig = 1;
  801644:	e0bffc17 	ldw	r2,-16(fp)
  801648:	00c00044 	movi	r3,1
  80164c:	10c01e05 	stb	r3,120(r2)
  }
  d->_g111 = d->_pg58;
  801650:	e0bffc17 	ldw	r2,-16(fp)
  801654:	10c040c3 	ldbu	r3,259(r2)
  801658:	e0bffc17 	ldw	r2,-16(fp)
  80165c:	10c03045 	stb	r3,193(r2)
  if (d->_g111) {
  801660:	e0bffc17 	ldw	r2,-16(fp)
  801664:	10803043 	ldbu	r2,193(r2)
  801668:	10803fcc 	andi	r2,r2,255
  80166c:	1080201c 	xori	r2,r2,128
  801670:	10bfe004 	addi	r2,r2,-128
  801674:	10001226 	beq	r2,zero,8016c0 <logic+0x2c4>
    d->AEI_Clock += d->deltaT;
  801678:	e13ffc17 	ldw	r4,-16(fp)
  80167c:	20800817 	ldw	r2,32(r4)
  801680:	20c00917 	ldw	r3,36(r4)
  801684:	e1bffc17 	ldw	r6,-16(fp)
  801688:	31001917 	ldw	r4,100(r6)
  80168c:	31401a17 	ldw	r5,104(r6)
  801690:	200d883a 	mov	r6,r4
  801694:	280f883a 	mov	r7,r5
  801698:	1009883a 	mov	r4,r2
  80169c:	180b883a 	mov	r5,r3
  8016a0:	08057900 	call	805790 <__adddf3>
  8016a4:	1009883a 	mov	r4,r2
  8016a8:	180b883a 	mov	r5,r3
  8016ac:	2005883a 	mov	r2,r4
  8016b0:	2807883a 	mov	r3,r5
  8016b4:	e13ffc17 	ldw	r4,-16(fp)
  8016b8:	20800815 	stw	r2,32(r4)
  8016bc:	20c00915 	stw	r3,36(r4)
  }
  d->_g88 = d->_g85 && !d->_cg85;
  8016c0:	e0bffc17 	ldw	r2,-16(fp)
  8016c4:	10802c83 	ldbu	r2,178(r2)
  8016c8:	10803fcc 	andi	r2,r2,255
  8016cc:	1080201c 	xori	r2,r2,128
  8016d0:	10bfe004 	addi	r2,r2,-128
  8016d4:	10000826 	beq	r2,zero,8016f8 <logic+0x2fc>
  8016d8:	e0bffc17 	ldw	r2,-16(fp)
  8016dc:	10803c03 	ldbu	r2,240(r2)
  8016e0:	10803fcc 	andi	r2,r2,255
  8016e4:	1080201c 	xori	r2,r2,128
  8016e8:	10bfe004 	addi	r2,r2,-128
  8016ec:	1000021e 	bne	r2,zero,8016f8 <logic+0x2fc>
  8016f0:	00800044 	movi	r2,1
  8016f4:	00000106 	br	8016fc <logic+0x300>
  8016f8:	0005883a 	mov	r2,zero
  8016fc:	1007883a 	mov	r3,r2
  801700:	e0bffc17 	ldw	r2,-16(fp)
  801704:	10c02d45 	stb	r3,181(r2)
  d->_cg88 = d->AS == 0 && d->AEI_Clock >= d->AEI;
  801708:	e0bffc17 	ldw	r2,-16(fp)
  80170c:	10801d03 	ldbu	r2,116(r2)
  801710:	10803fcc 	andi	r2,r2,255
  801714:	1080201c 	xori	r2,r2,128
  801718:	10bfe004 	addi	r2,r2,-128
  80171c:	1000111e 	bne	r2,zero,801764 <logic+0x368>
  801720:	e0bffc17 	ldw	r2,-16(fp)
  801724:	14000817 	ldw	r16,32(r2)
  801728:	14400917 	ldw	r17,36(r2)
  80172c:	e0bffc17 	ldw	r2,-16(fp)
  801730:	10800117 	ldw	r2,4(r2)
  801734:	1009883a 	mov	r4,r2
  801738:	0806b080 	call	806b08 <__floatsidf>
  80173c:	1009883a 	mov	r4,r2
  801740:	180b883a 	mov	r5,r3
  801744:	200d883a 	mov	r6,r4
  801748:	280f883a 	mov	r7,r5
  80174c:	8009883a 	mov	r4,r16
  801750:	880b883a 	mov	r5,r17
  801754:	080603c0 	call	80603c <__gedf2>
  801758:	10000216 	blt	r2,zero,801764 <logic+0x368>
  80175c:	00800044 	movi	r2,1
  801760:	00000106 	br	801768 <logic+0x36c>
  801764:	0005883a 	mov	r2,zero
  801768:	1007883a 	mov	r3,r2
  80176c:	e0bffc17 	ldw	r2,-16(fp)
  801770:	10c03c45 	stb	r3,241(r2)
  d->_g89 = d->_g88 && d->_cg88;
  801774:	e0bffc17 	ldw	r2,-16(fp)
  801778:	10802d43 	ldbu	r2,181(r2)
  80177c:	10803fcc 	andi	r2,r2,255
  801780:	1080201c 	xori	r2,r2,128
  801784:	10bfe004 	addi	r2,r2,-128
  801788:	10000826 	beq	r2,zero,8017ac <logic+0x3b0>
  80178c:	e0bffc17 	ldw	r2,-16(fp)
  801790:	10803c43 	ldbu	r2,241(r2)
  801794:	10803fcc 	andi	r2,r2,255
  801798:	1080201c 	xori	r2,r2,128
  80179c:	10bfe004 	addi	r2,r2,-128
  8017a0:	10000226 	beq	r2,zero,8017ac <logic+0x3b0>
  8017a4:	00800044 	movi	r2,1
  8017a8:	00000106 	br	8017b0 <logic+0x3b4>
  8017ac:	0005883a 	mov	r2,zero
  8017b0:	1007883a 	mov	r3,r2
  8017b4:	e0bffc17 	ldw	r2,-16(fp)
  8017b8:	10c02d85 	stb	r3,182(r2)
  if (d->_g89) {
  8017bc:	e0bffc17 	ldw	r2,-16(fp)
  8017c0:	10802d83 	ldbu	r2,182(r2)
  8017c4:	10803fcc 	andi	r2,r2,255
  8017c8:	1080201c 	xori	r2,r2,128
  8017cc:	10bfe004 	addi	r2,r2,-128
  8017d0:	10000326 	beq	r2,zero,8017e0 <logic+0x3e4>
    d->_Pacemaker_local__Atrig1 = 1;
  8017d4:	e0bffc17 	ldw	r2,-16(fp)
  8017d8:	00c00044 	movi	r3,1
  8017dc:	10c01e45 	stb	r3,121(r2)
  }
  d->_g88 = d->_g88 && !d->_cg88;
  8017e0:	e0bffc17 	ldw	r2,-16(fp)
  8017e4:	10802d43 	ldbu	r2,181(r2)
  8017e8:	10803fcc 	andi	r2,r2,255
  8017ec:	1080201c 	xori	r2,r2,128
  8017f0:	10bfe004 	addi	r2,r2,-128
  8017f4:	10000826 	beq	r2,zero,801818 <logic+0x41c>
  8017f8:	e0bffc17 	ldw	r2,-16(fp)
  8017fc:	10803c43 	ldbu	r2,241(r2)
  801800:	10803fcc 	andi	r2,r2,255
  801804:	1080201c 	xori	r2,r2,128
  801808:	10bfe004 	addi	r2,r2,-128
  80180c:	1000021e 	bne	r2,zero,801818 <logic+0x41c>
  801810:	00800044 	movi	r2,1
  801814:	00000106 	br	80181c <logic+0x420>
  801818:	0005883a 	mov	r2,zero
  80181c:	1007883a 	mov	r3,r2
  801820:	e0bffc17 	ldw	r2,-16(fp)
  801824:	10c02d45 	stb	r3,181(r2)
  d->_cg90 = d->AS == 1;
  801828:	e0bffc17 	ldw	r2,-16(fp)
  80182c:	10801d03 	ldbu	r2,116(r2)
  801830:	10803fcc 	andi	r2,r2,255
  801834:	1080201c 	xori	r2,r2,128
  801838:	10bfe004 	addi	r2,r2,-128
  80183c:	10800060 	cmpeqi	r2,r2,1
  801840:	1007883a 	mov	r3,r2
  801844:	e0bffc17 	ldw	r2,-16(fp)
  801848:	10c03bc5 	stb	r3,239(r2)
  d->_g91 = d->_g88 && d->_cg90;
  80184c:	e0bffc17 	ldw	r2,-16(fp)
  801850:	10802d43 	ldbu	r2,181(r2)
  801854:	10803fcc 	andi	r2,r2,255
  801858:	1080201c 	xori	r2,r2,128
  80185c:	10bfe004 	addi	r2,r2,-128
  801860:	10000826 	beq	r2,zero,801884 <logic+0x488>
  801864:	e0bffc17 	ldw	r2,-16(fp)
  801868:	10803bc3 	ldbu	r2,239(r2)
  80186c:	10803fcc 	andi	r2,r2,255
  801870:	1080201c 	xori	r2,r2,128
  801874:	10bfe004 	addi	r2,r2,-128
  801878:	10000226 	beq	r2,zero,801884 <logic+0x488>
  80187c:	00800044 	movi	r2,1
  801880:	00000106 	br	801888 <logic+0x48c>
  801884:	0005883a 	mov	r2,zero
  801888:	1007883a 	mov	r3,r2
  80188c:	e0bffc17 	ldw	r2,-16(fp)
  801890:	10c02dc5 	stb	r3,183(r2)
  if (d->_g91) {
  801894:	e0bffc17 	ldw	r2,-16(fp)
  801898:	10802dc3 	ldbu	r2,183(r2)
  80189c:	10803fcc 	andi	r2,r2,255
  8018a0:	1080201c 	xori	r2,r2,128
  8018a4:	10bfe004 	addi	r2,r2,-128
  8018a8:	10000326 	beq	r2,zero,8018b8 <logic+0x4bc>
    d->_Pacemaker_local__Atrig2 = 1;
  8018ac:	e0bffc17 	ldw	r2,-16(fp)
  8018b0:	00c00044 	movi	r3,1
  8018b4:	10c01e85 	stb	r3,122(r2)
  }
  d->sleepT = 1000.0;
  8018b8:	e0fffc17 	ldw	r3,-16(fp)
  8018bc:	18001b15 	stw	zero,108(r3)
  8018c0:	009023f4 	movhi	r2,16527
  8018c4:	10900004 	addi	r2,r2,16384
  8018c8:	18801c15 	stw	r2,112(r3)
  d->_g70 = d->_g64 || d->_g70;
  8018cc:	e0bffc17 	ldw	r2,-16(fp)
  8018d0:	10802a43 	ldbu	r2,169(r2)
  8018d4:	10803fcc 	andi	r2,r2,255
  8018d8:	1080201c 	xori	r2,r2,128
  8018dc:	10bfe004 	addi	r2,r2,-128
  8018e0:	1000061e 	bne	r2,zero,8018fc <logic+0x500>
  8018e4:	e0bffc17 	ldw	r2,-16(fp)
  8018e8:	10802b43 	ldbu	r2,173(r2)
  8018ec:	10803fcc 	andi	r2,r2,255
  8018f0:	1080201c 	xori	r2,r2,128
  8018f4:	10bfe004 	addi	r2,r2,-128
  8018f8:	10000226 	beq	r2,zero,801904 <logic+0x508>
  8018fc:	00800044 	movi	r2,1
  801900:	00000106 	br	801908 <logic+0x50c>
  801904:	0005883a 	mov	r2,zero
  801908:	1007883a 	mov	r3,r2
  80190c:	e0bffc17 	ldw	r2,-16(fp)
  801910:	10c02b45 	stb	r3,173(r2)
  d->_cg65 = d->AEI_Clock < d->AEI;
  801914:	e0bffc17 	ldw	r2,-16(fp)
  801918:	14000817 	ldw	r16,32(r2)
  80191c:	14400917 	ldw	r17,36(r2)
  801920:	e0bffc17 	ldw	r2,-16(fp)
  801924:	10800117 	ldw	r2,4(r2)
  801928:	1009883a 	mov	r4,r2
  80192c:	0806b080 	call	806b08 <__floatsidf>
  801930:	1009883a 	mov	r4,r2
  801934:	180b883a 	mov	r5,r3
  801938:	04800044 	movi	r18,1
  80193c:	200d883a 	mov	r6,r4
  801940:	280f883a 	mov	r7,r5
  801944:	8009883a 	mov	r4,r16
  801948:	880b883a 	mov	r5,r17
  80194c:	08061180 	call	806118 <__ledf2>
  801950:	10000116 	blt	r2,zero,801958 <logic+0x55c>
  801954:	0025883a 	mov	r18,zero
  801958:	9007883a 	mov	r3,r18
  80195c:	e0bffc17 	ldw	r2,-16(fp)
  801960:	10c03985 	stb	r3,230(r2)
  d->_g64 = d->_g70 && d->_cg65;
  801964:	e0bffc17 	ldw	r2,-16(fp)
  801968:	10802b43 	ldbu	r2,173(r2)
  80196c:	10803fcc 	andi	r2,r2,255
  801970:	1080201c 	xori	r2,r2,128
  801974:	10bfe004 	addi	r2,r2,-128
  801978:	10000826 	beq	r2,zero,80199c <logic+0x5a0>
  80197c:	e0bffc17 	ldw	r2,-16(fp)
  801980:	10803983 	ldbu	r2,230(r2)
  801984:	10803fcc 	andi	r2,r2,255
  801988:	1080201c 	xori	r2,r2,128
  80198c:	10bfe004 	addi	r2,r2,-128
  801990:	10000226 	beq	r2,zero,80199c <logic+0x5a0>
  801994:	00800044 	movi	r2,1
  801998:	00000106 	br	8019a0 <logic+0x5a4>
  80199c:	0005883a 	mov	r2,zero
  8019a0:	1007883a 	mov	r3,r2
  8019a4:	e0bffc17 	ldw	r2,-16(fp)
  8019a8:	10c02a45 	stb	r3,169(r2)
  if (d->_g64) {
  8019ac:	e0bffc17 	ldw	r2,-16(fp)
  8019b0:	10802a43 	ldbu	r2,169(r2)
  8019b4:	10803fcc 	andi	r2,r2,255
  8019b8:	1080201c 	xori	r2,r2,128
  8019bc:	10bfe004 	addi	r2,r2,-128
  8019c0:	10003426 	beq	r2,zero,801a94 <logic+0x698>
    d->sleepT = (d->sleepT < (d->AEI - d->AEI_Clock)) ? d->sleepT : (d->AEI - d->AEI_Clock);
  8019c4:	e0bffc17 	ldw	r2,-16(fp)
  8019c8:	14001b17 	ldw	r16,108(r2)
  8019cc:	14401c17 	ldw	r17,112(r2)
  8019d0:	e0bffc17 	ldw	r2,-16(fp)
  8019d4:	10800117 	ldw	r2,4(r2)
  8019d8:	1009883a 	mov	r4,r2
  8019dc:	0806b080 	call	806b08 <__floatsidf>
  8019e0:	1011883a 	mov	r8,r2
  8019e4:	1813883a 	mov	r9,r3
  8019e8:	e13ffc17 	ldw	r4,-16(fp)
  8019ec:	20800817 	ldw	r2,32(r4)
  8019f0:	20c00917 	ldw	r3,36(r4)
  8019f4:	100d883a 	mov	r6,r2
  8019f8:	180f883a 	mov	r7,r3
  8019fc:	4009883a 	mov	r4,r8
  801a00:	480b883a 	mov	r5,r9
  801a04:	080620c0 	call	80620c <__subdf3>
  801a08:	1009883a 	mov	r4,r2
  801a0c:	180b883a 	mov	r5,r3
  801a10:	2005883a 	mov	r2,r4
  801a14:	2807883a 	mov	r3,r5
  801a18:	100d883a 	mov	r6,r2
  801a1c:	180f883a 	mov	r7,r3
  801a20:	8009883a 	mov	r4,r16
  801a24:	880b883a 	mov	r5,r17
  801a28:	08061180 	call	806118 <__ledf2>
  801a2c:	1000040e 	bge	r2,zero,801a40 <logic+0x644>
  801a30:	e13ffc17 	ldw	r4,-16(fp)
  801a34:	20801b17 	ldw	r2,108(r4)
  801a38:	20c01c17 	ldw	r3,112(r4)
  801a3c:	00001206 	br	801a88 <logic+0x68c>
  801a40:	e0bffc17 	ldw	r2,-16(fp)
  801a44:	10800117 	ldw	r2,4(r2)
  801a48:	1009883a 	mov	r4,r2
  801a4c:	0806b080 	call	806b08 <__floatsidf>
  801a50:	1011883a 	mov	r8,r2
  801a54:	1813883a 	mov	r9,r3
  801a58:	e13ffc17 	ldw	r4,-16(fp)
  801a5c:	20800817 	ldw	r2,32(r4)
  801a60:	20c00917 	ldw	r3,36(r4)
  801a64:	100d883a 	mov	r6,r2
  801a68:	180f883a 	mov	r7,r3
  801a6c:	4009883a 	mov	r4,r8
  801a70:	480b883a 	mov	r5,r9
  801a74:	080620c0 	call	80620c <__subdf3>
  801a78:	1009883a 	mov	r4,r2
  801a7c:	180b883a 	mov	r5,r3
  801a80:	2005883a 	mov	r2,r4
  801a84:	2807883a 	mov	r3,r5
  801a88:	e13ffc17 	ldw	r4,-16(fp)
  801a8c:	20801b15 	stw	r2,108(r4)
  801a90:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg66 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801a94:	e0bffc17 	ldw	r2,-16(fp)
  801a98:	10801e03 	ldbu	r2,120(r2)
  801a9c:	10803fcc 	andi	r2,r2,255
  801aa0:	1080201c 	xori	r2,r2,128
  801aa4:	10bfe004 	addi	r2,r2,-128
  801aa8:	10000c1e 	bne	r2,zero,801adc <logic+0x6e0>
  801aac:	e0bffc17 	ldw	r2,-16(fp)
  801ab0:	10801e43 	ldbu	r2,121(r2)
  801ab4:	10803fcc 	andi	r2,r2,255
  801ab8:	1080201c 	xori	r2,r2,128
  801abc:	10bfe004 	addi	r2,r2,-128
  801ac0:	1000061e 	bne	r2,zero,801adc <logic+0x6e0>
  801ac4:	e0bffc17 	ldw	r2,-16(fp)
  801ac8:	10801e83 	ldbu	r2,122(r2)
  801acc:	10803fcc 	andi	r2,r2,255
  801ad0:	1080201c 	xori	r2,r2,128
  801ad4:	10bfe004 	addi	r2,r2,-128
  801ad8:	10000226 	beq	r2,zero,801ae4 <logic+0x6e8>
  801adc:	00800044 	movi	r2,1
  801ae0:	00000106 	br	801ae8 <logic+0x6ec>
  801ae4:	0005883a 	mov	r2,zero
  801ae8:	1007883a 	mov	r3,r2
  801aec:	e0bffc17 	ldw	r2,-16(fp)
  801af0:	10c03945 	stb	r3,229(r2)
  d->_g65 = d->_g70 && !d->_cg65;
  801af4:	e0bffc17 	ldw	r2,-16(fp)
  801af8:	10802b43 	ldbu	r2,173(r2)
  801afc:	10803fcc 	andi	r2,r2,255
  801b00:	1080201c 	xori	r2,r2,128
  801b04:	10bfe004 	addi	r2,r2,-128
  801b08:	10000826 	beq	r2,zero,801b2c <logic+0x730>
  801b0c:	e0bffc17 	ldw	r2,-16(fp)
  801b10:	10803983 	ldbu	r2,230(r2)
  801b14:	10803fcc 	andi	r2,r2,255
  801b18:	1080201c 	xori	r2,r2,128
  801b1c:	10bfe004 	addi	r2,r2,-128
  801b20:	1000021e 	bne	r2,zero,801b2c <logic+0x730>
  801b24:	00800044 	movi	r2,1
  801b28:	00000106 	br	801b30 <logic+0x734>
  801b2c:	0005883a 	mov	r2,zero
  801b30:	1007883a 	mov	r3,r2
  801b34:	e0bffc17 	ldw	r2,-16(fp)
  801b38:	10c02a85 	stb	r3,170(r2)
  d->_cg68 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801b3c:	e0bffc17 	ldw	r2,-16(fp)
  801b40:	10801e03 	ldbu	r2,120(r2)
  801b44:	10803fcc 	andi	r2,r2,255
  801b48:	1080201c 	xori	r2,r2,128
  801b4c:	10bfe004 	addi	r2,r2,-128
  801b50:	10000c1e 	bne	r2,zero,801b84 <logic+0x788>
  801b54:	e0bffc17 	ldw	r2,-16(fp)
  801b58:	10801e43 	ldbu	r2,121(r2)
  801b5c:	10803fcc 	andi	r2,r2,255
  801b60:	1080201c 	xori	r2,r2,128
  801b64:	10bfe004 	addi	r2,r2,-128
  801b68:	1000061e 	bne	r2,zero,801b84 <logic+0x788>
  801b6c:	e0bffc17 	ldw	r2,-16(fp)
  801b70:	10801e83 	ldbu	r2,122(r2)
  801b74:	10803fcc 	andi	r2,r2,255
  801b78:	1080201c 	xori	r2,r2,128
  801b7c:	10bfe004 	addi	r2,r2,-128
  801b80:	10000226 	beq	r2,zero,801b8c <logic+0x790>
  801b84:	00800044 	movi	r2,1
  801b88:	00000106 	br	801b90 <logic+0x794>
  801b8c:	0005883a 	mov	r2,zero
  801b90:	1007883a 	mov	r3,r2
  801b94:	e0bffc17 	ldw	r2,-16(fp)
  801b98:	10c039c5 	stb	r3,231(r2)
  d->_g67 = d->_g64 && d->_cg66 || d->_g65 && d->_cg68;
  801b9c:	e0bffc17 	ldw	r2,-16(fp)
  801ba0:	10802a43 	ldbu	r2,169(r2)
  801ba4:	10803fcc 	andi	r2,r2,255
  801ba8:	1080201c 	xori	r2,r2,128
  801bac:	10bfe004 	addi	r2,r2,-128
  801bb0:	10000626 	beq	r2,zero,801bcc <logic+0x7d0>
  801bb4:	e0bffc17 	ldw	r2,-16(fp)
  801bb8:	10803943 	ldbu	r2,229(r2)
  801bbc:	10803fcc 	andi	r2,r2,255
  801bc0:	1080201c 	xori	r2,r2,128
  801bc4:	10bfe004 	addi	r2,r2,-128
  801bc8:	10000c1e 	bne	r2,zero,801bfc <logic+0x800>
  801bcc:	e0bffc17 	ldw	r2,-16(fp)
  801bd0:	10802a83 	ldbu	r2,170(r2)
  801bd4:	10803fcc 	andi	r2,r2,255
  801bd8:	1080201c 	xori	r2,r2,128
  801bdc:	10bfe004 	addi	r2,r2,-128
  801be0:	10000826 	beq	r2,zero,801c04 <logic+0x808>
  801be4:	e0bffc17 	ldw	r2,-16(fp)
  801be8:	108039c3 	ldbu	r2,231(r2)
  801bec:	10803fcc 	andi	r2,r2,255
  801bf0:	1080201c 	xori	r2,r2,128
  801bf4:	10bfe004 	addi	r2,r2,-128
  801bf8:	10000226 	beq	r2,zero,801c04 <logic+0x808>
  801bfc:	00800044 	movi	r2,1
  801c00:	00000106 	br	801c08 <logic+0x80c>
  801c04:	0005883a 	mov	r2,zero
  801c08:	1007883a 	mov	r3,r2
  801c0c:	e0bffc17 	ldw	r2,-16(fp)
  801c10:	10c02b05 	stb	r3,172(r2)
  d->_g81 = d->_pg57;
  801c14:	e0bffc17 	ldw	r2,-16(fp)
  801c18:	10c04103 	ldbu	r3,260(r2)
  801c1c:	e0bffc17 	ldw	r2,-16(fp)
  801c20:	10c02c45 	stb	r3,177(r2)
  d->_g75 = d->_pg55;
  801c24:	e0bffc17 	ldw	r2,-16(fp)
  801c28:	10c04143 	ldbu	r3,261(r2)
  801c2c:	e0bffc17 	ldw	r2,-16(fp)
  801c30:	10c02b85 	stb	r3,174(r2)
  d->_g78_e2 = !(d->_g81 || d->_g75);
  801c34:	e0bffc17 	ldw	r2,-16(fp)
  801c38:	10802c43 	ldbu	r2,177(r2)
  801c3c:	10803fcc 	andi	r2,r2,255
  801c40:	1080201c 	xori	r2,r2,128
  801c44:	10bfe004 	addi	r2,r2,-128
  801c48:	1000081e 	bne	r2,zero,801c6c <logic+0x870>
  801c4c:	e0bffc17 	ldw	r2,-16(fp)
  801c50:	10802b83 	ldbu	r2,174(r2)
  801c54:	10803fcc 	andi	r2,r2,255
  801c58:	1080201c 	xori	r2,r2,128
  801c5c:	10bfe004 	addi	r2,r2,-128
  801c60:	1000021e 	bne	r2,zero,801c6c <logic+0x870>
  801c64:	00800044 	movi	r2,1
  801c68:	00000106 	br	801c70 <logic+0x874>
  801c6c:	0005883a 	mov	r2,zero
  801c70:	1007883a 	mov	r3,r2
  801c74:	e0bffc17 	ldw	r2,-16(fp)
  801c78:	10c03ec5 	stb	r3,251(r2)
  d->_g81 = d->_g75 || d->_g81;
  801c7c:	e0bffc17 	ldw	r2,-16(fp)
  801c80:	10802b83 	ldbu	r2,174(r2)
  801c84:	10803fcc 	andi	r2,r2,255
  801c88:	1080201c 	xori	r2,r2,128
  801c8c:	10bfe004 	addi	r2,r2,-128
  801c90:	1000061e 	bne	r2,zero,801cac <logic+0x8b0>
  801c94:	e0bffc17 	ldw	r2,-16(fp)
  801c98:	10802c43 	ldbu	r2,177(r2)
  801c9c:	10803fcc 	andi	r2,r2,255
  801ca0:	1080201c 	xori	r2,r2,128
  801ca4:	10bfe004 	addi	r2,r2,-128
  801ca8:	10000226 	beq	r2,zero,801cb4 <logic+0x8b8>
  801cac:	00800044 	movi	r2,1
  801cb0:	00000106 	br	801cb8 <logic+0x8bc>
  801cb4:	0005883a 	mov	r2,zero
  801cb8:	1007883a 	mov	r3,r2
  801cbc:	e0bffc17 	ldw	r2,-16(fp)
  801cc0:	10c02c45 	stb	r3,177(r2)
  d->_cg76 = d->PVARP_Clock < d->PVARP;
  801cc4:	e0bffc17 	ldw	r2,-16(fp)
  801cc8:	14000e17 	ldw	r16,56(r2)
  801ccc:	14400f17 	ldw	r17,60(r2)
  801cd0:	e0bffc17 	ldw	r2,-16(fp)
  801cd4:	10800217 	ldw	r2,8(r2)
  801cd8:	1009883a 	mov	r4,r2
  801cdc:	0806b080 	call	806b08 <__floatsidf>
  801ce0:	1009883a 	mov	r4,r2
  801ce4:	180b883a 	mov	r5,r3
  801ce8:	04800044 	movi	r18,1
  801cec:	200d883a 	mov	r6,r4
  801cf0:	280f883a 	mov	r7,r5
  801cf4:	8009883a 	mov	r4,r16
  801cf8:	880b883a 	mov	r5,r17
  801cfc:	08061180 	call	806118 <__ledf2>
  801d00:	10000116 	blt	r2,zero,801d08 <logic+0x90c>
  801d04:	0025883a 	mov	r18,zero
  801d08:	9007883a 	mov	r3,r18
  801d0c:	e0bffc17 	ldw	r2,-16(fp)
  801d10:	10c03b05 	stb	r3,236(r2)
  d->_g75 = d->_g81 && d->_cg76;
  801d14:	e0bffc17 	ldw	r2,-16(fp)
  801d18:	10802c43 	ldbu	r2,177(r2)
  801d1c:	10803fcc 	andi	r2,r2,255
  801d20:	1080201c 	xori	r2,r2,128
  801d24:	10bfe004 	addi	r2,r2,-128
  801d28:	10000826 	beq	r2,zero,801d4c <logic+0x950>
  801d2c:	e0bffc17 	ldw	r2,-16(fp)
  801d30:	10803b03 	ldbu	r2,236(r2)
  801d34:	10803fcc 	andi	r2,r2,255
  801d38:	1080201c 	xori	r2,r2,128
  801d3c:	10bfe004 	addi	r2,r2,-128
  801d40:	10000226 	beq	r2,zero,801d4c <logic+0x950>
  801d44:	00800044 	movi	r2,1
  801d48:	00000106 	br	801d50 <logic+0x954>
  801d4c:	0005883a 	mov	r2,zero
  801d50:	1007883a 	mov	r3,r2
  801d54:	e0bffc17 	ldw	r2,-16(fp)
  801d58:	10c02b85 	stb	r3,174(r2)
  if (d->_g75) {
  801d5c:	e0bffc17 	ldw	r2,-16(fp)
  801d60:	10802b83 	ldbu	r2,174(r2)
  801d64:	10803fcc 	andi	r2,r2,255
  801d68:	1080201c 	xori	r2,r2,128
  801d6c:	10bfe004 	addi	r2,r2,-128
  801d70:	10003426 	beq	r2,zero,801e44 <logic+0xa48>
    d->sleepT = (d->sleepT < (d->PVARP - d->PVARP_Clock)) ? d->sleepT : (d->PVARP - d->PVARP_Clock);
  801d74:	e0bffc17 	ldw	r2,-16(fp)
  801d78:	14001b17 	ldw	r16,108(r2)
  801d7c:	14401c17 	ldw	r17,112(r2)
  801d80:	e0bffc17 	ldw	r2,-16(fp)
  801d84:	10800217 	ldw	r2,8(r2)
  801d88:	1009883a 	mov	r4,r2
  801d8c:	0806b080 	call	806b08 <__floatsidf>
  801d90:	1011883a 	mov	r8,r2
  801d94:	1813883a 	mov	r9,r3
  801d98:	e13ffc17 	ldw	r4,-16(fp)
  801d9c:	20800e17 	ldw	r2,56(r4)
  801da0:	20c00f17 	ldw	r3,60(r4)
  801da4:	100d883a 	mov	r6,r2
  801da8:	180f883a 	mov	r7,r3
  801dac:	4009883a 	mov	r4,r8
  801db0:	480b883a 	mov	r5,r9
  801db4:	080620c0 	call	80620c <__subdf3>
  801db8:	1009883a 	mov	r4,r2
  801dbc:	180b883a 	mov	r5,r3
  801dc0:	2005883a 	mov	r2,r4
  801dc4:	2807883a 	mov	r3,r5
  801dc8:	100d883a 	mov	r6,r2
  801dcc:	180f883a 	mov	r7,r3
  801dd0:	8009883a 	mov	r4,r16
  801dd4:	880b883a 	mov	r5,r17
  801dd8:	08061180 	call	806118 <__ledf2>
  801ddc:	1000040e 	bge	r2,zero,801df0 <logic+0x9f4>
  801de0:	e13ffc17 	ldw	r4,-16(fp)
  801de4:	20801b17 	ldw	r2,108(r4)
  801de8:	20c01c17 	ldw	r3,112(r4)
  801dec:	00001206 	br	801e38 <logic+0xa3c>
  801df0:	e0bffc17 	ldw	r2,-16(fp)
  801df4:	10800217 	ldw	r2,8(r2)
  801df8:	1009883a 	mov	r4,r2
  801dfc:	0806b080 	call	806b08 <__floatsidf>
  801e00:	1011883a 	mov	r8,r2
  801e04:	1813883a 	mov	r9,r3
  801e08:	e13ffc17 	ldw	r4,-16(fp)
  801e0c:	20800e17 	ldw	r2,56(r4)
  801e10:	20c00f17 	ldw	r3,60(r4)
  801e14:	100d883a 	mov	r6,r2
  801e18:	180f883a 	mov	r7,r3
  801e1c:	4009883a 	mov	r4,r8
  801e20:	480b883a 	mov	r5,r9
  801e24:	080620c0 	call	80620c <__subdf3>
  801e28:	1009883a 	mov	r4,r2
  801e2c:	180b883a 	mov	r5,r3
  801e30:	2005883a 	mov	r2,r4
  801e34:	2807883a 	mov	r3,r5
  801e38:	e13ffc17 	ldw	r4,-16(fp)
  801e3c:	20801b15 	stw	r2,108(r4)
  801e40:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg77 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801e44:	e0bffc17 	ldw	r2,-16(fp)
  801e48:	10801e03 	ldbu	r2,120(r2)
  801e4c:	10803fcc 	andi	r2,r2,255
  801e50:	1080201c 	xori	r2,r2,128
  801e54:	10bfe004 	addi	r2,r2,-128
  801e58:	10000c1e 	bne	r2,zero,801e8c <logic+0xa90>
  801e5c:	e0bffc17 	ldw	r2,-16(fp)
  801e60:	10801e43 	ldbu	r2,121(r2)
  801e64:	10803fcc 	andi	r2,r2,255
  801e68:	1080201c 	xori	r2,r2,128
  801e6c:	10bfe004 	addi	r2,r2,-128
  801e70:	1000061e 	bne	r2,zero,801e8c <logic+0xa90>
  801e74:	e0bffc17 	ldw	r2,-16(fp)
  801e78:	10801e83 	ldbu	r2,122(r2)
  801e7c:	10803fcc 	andi	r2,r2,255
  801e80:	1080201c 	xori	r2,r2,128
  801e84:	10bfe004 	addi	r2,r2,-128
  801e88:	10000226 	beq	r2,zero,801e94 <logic+0xa98>
  801e8c:	00800044 	movi	r2,1
  801e90:	00000106 	br	801e98 <logic+0xa9c>
  801e94:	0005883a 	mov	r2,zero
  801e98:	1007883a 	mov	r3,r2
  801e9c:	e0bffc17 	ldw	r2,-16(fp)
  801ea0:	10c03ac5 	stb	r3,235(r2)
  d->_g76 = d->_g81 && !d->_cg76;
  801ea4:	e0bffc17 	ldw	r2,-16(fp)
  801ea8:	10802c43 	ldbu	r2,177(r2)
  801eac:	10803fcc 	andi	r2,r2,255
  801eb0:	1080201c 	xori	r2,r2,128
  801eb4:	10bfe004 	addi	r2,r2,-128
  801eb8:	10000826 	beq	r2,zero,801edc <logic+0xae0>
  801ebc:	e0bffc17 	ldw	r2,-16(fp)
  801ec0:	10803b03 	ldbu	r2,236(r2)
  801ec4:	10803fcc 	andi	r2,r2,255
  801ec8:	1080201c 	xori	r2,r2,128
  801ecc:	10bfe004 	addi	r2,r2,-128
  801ed0:	1000021e 	bne	r2,zero,801edc <logic+0xae0>
  801ed4:	00800044 	movi	r2,1
  801ed8:	00000106 	br	801ee0 <logic+0xae4>
  801edc:	0005883a 	mov	r2,zero
  801ee0:	1007883a 	mov	r3,r2
  801ee4:	e0bffc17 	ldw	r2,-16(fp)
  801ee8:	10c02bc5 	stb	r3,175(r2)
  d->_cg79 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801eec:	e0bffc17 	ldw	r2,-16(fp)
  801ef0:	10801e03 	ldbu	r2,120(r2)
  801ef4:	10803fcc 	andi	r2,r2,255
  801ef8:	1080201c 	xori	r2,r2,128
  801efc:	10bfe004 	addi	r2,r2,-128
  801f00:	10000c1e 	bne	r2,zero,801f34 <logic+0xb38>
  801f04:	e0bffc17 	ldw	r2,-16(fp)
  801f08:	10801e43 	ldbu	r2,121(r2)
  801f0c:	10803fcc 	andi	r2,r2,255
  801f10:	1080201c 	xori	r2,r2,128
  801f14:	10bfe004 	addi	r2,r2,-128
  801f18:	1000061e 	bne	r2,zero,801f34 <logic+0xb38>
  801f1c:	e0bffc17 	ldw	r2,-16(fp)
  801f20:	10801e83 	ldbu	r2,122(r2)
  801f24:	10803fcc 	andi	r2,r2,255
  801f28:	1080201c 	xori	r2,r2,128
  801f2c:	10bfe004 	addi	r2,r2,-128
  801f30:	10000226 	beq	r2,zero,801f3c <logic+0xb40>
  801f34:	00800044 	movi	r2,1
  801f38:	00000106 	br	801f40 <logic+0xb44>
  801f3c:	0005883a 	mov	r2,zero
  801f40:	1007883a 	mov	r3,r2
  801f44:	e0bffc17 	ldw	r2,-16(fp)
  801f48:	10c03b45 	stb	r3,237(r2)
  d->_g78 = d->_g75 && d->_cg77 || d->_g76 && d->_cg79;
  801f4c:	e0bffc17 	ldw	r2,-16(fp)
  801f50:	10802b83 	ldbu	r2,174(r2)
  801f54:	10803fcc 	andi	r2,r2,255
  801f58:	1080201c 	xori	r2,r2,128
  801f5c:	10bfe004 	addi	r2,r2,-128
  801f60:	10000626 	beq	r2,zero,801f7c <logic+0xb80>
  801f64:	e0bffc17 	ldw	r2,-16(fp)
  801f68:	10803ac3 	ldbu	r2,235(r2)
  801f6c:	10803fcc 	andi	r2,r2,255
  801f70:	1080201c 	xori	r2,r2,128
  801f74:	10bfe004 	addi	r2,r2,-128
  801f78:	10000c1e 	bne	r2,zero,801fac <logic+0xbb0>
  801f7c:	e0bffc17 	ldw	r2,-16(fp)
  801f80:	10802bc3 	ldbu	r2,175(r2)
  801f84:	10803fcc 	andi	r2,r2,255
  801f88:	1080201c 	xori	r2,r2,128
  801f8c:	10bfe004 	addi	r2,r2,-128
  801f90:	10000826 	beq	r2,zero,801fb4 <logic+0xbb8>
  801f94:	e0bffc17 	ldw	r2,-16(fp)
  801f98:	10803b43 	ldbu	r2,237(r2)
  801f9c:	10803fcc 	andi	r2,r2,255
  801fa0:	1080201c 	xori	r2,r2,128
  801fa4:	10bfe004 	addi	r2,r2,-128
  801fa8:	10000226 	beq	r2,zero,801fb4 <logic+0xbb8>
  801fac:	00800044 	movi	r2,1
  801fb0:	00000106 	br	801fb8 <logic+0xbbc>
  801fb4:	0005883a 	mov	r2,zero
  801fb8:	1007883a 	mov	r3,r2
  801fbc:	e0bffc17 	ldw	r2,-16(fp)
  801fc0:	10c02c05 	stb	r3,176(r2)
  d->_g85 = !d->_g85;
  801fc4:	e0bffc17 	ldw	r2,-16(fp)
  801fc8:	10802c83 	ldbu	r2,178(r2)
  801fcc:	10803fcc 	andi	r2,r2,255
  801fd0:	1080201c 	xori	r2,r2,128
  801fd4:	10bfe004 	addi	r2,r2,-128
  801fd8:	1005003a 	cmpeq	r2,r2,zero
  801fdc:	1007883a 	mov	r3,r2
  801fe0:	e0bffc17 	ldw	r2,-16(fp)
  801fe4:	10c02c85 	stb	r3,178(r2)
  d->_g91 = d->_g86 || d->_g89 || d->_g91;
  801fe8:	e0bffc17 	ldw	r2,-16(fp)
  801fec:	10802cc3 	ldbu	r2,179(r2)
  801ff0:	10803fcc 	andi	r2,r2,255
  801ff4:	1080201c 	xori	r2,r2,128
  801ff8:	10bfe004 	addi	r2,r2,-128
  801ffc:	10000c1e 	bne	r2,zero,802030 <logic+0xc34>
  802000:	e0bffc17 	ldw	r2,-16(fp)
  802004:	10802d83 	ldbu	r2,182(r2)
  802008:	10803fcc 	andi	r2,r2,255
  80200c:	1080201c 	xori	r2,r2,128
  802010:	10bfe004 	addi	r2,r2,-128
  802014:	1000061e 	bne	r2,zero,802030 <logic+0xc34>
  802018:	e0bffc17 	ldw	r2,-16(fp)
  80201c:	10802dc3 	ldbu	r2,183(r2)
  802020:	10803fcc 	andi	r2,r2,255
  802024:	1080201c 	xori	r2,r2,128
  802028:	10bfe004 	addi	r2,r2,-128
  80202c:	10000226 	beq	r2,zero,802038 <logic+0xc3c>
  802030:	00800044 	movi	r2,1
  802034:	00000106 	br	80203c <logic+0xc40>
  802038:	0005883a 	mov	r2,zero
  80203c:	1007883a 	mov	r3,r2
  802040:	e0bffc17 	ldw	r2,-16(fp)
  802044:	10c02dc5 	stb	r3,183(r2)
  d->_g89 = (d->_g67_e1 || d->_g67) && (d->_g78_e2 || d->_g78) && (d->_g85 || d->_g91) && (d->_g67 || d->_g78 || d->_g91);
  802048:	e0bffc17 	ldw	r2,-16(fp)
  80204c:	10803e83 	ldbu	r2,250(r2)
  802050:	10803fcc 	andi	r2,r2,255
  802054:	1080201c 	xori	r2,r2,128
  802058:	10bfe004 	addi	r2,r2,-128
  80205c:	1000061e 	bne	r2,zero,802078 <logic+0xc7c>
  802060:	e0bffc17 	ldw	r2,-16(fp)
  802064:	10802b03 	ldbu	r2,172(r2)
  802068:	10803fcc 	andi	r2,r2,255
  80206c:	1080201c 	xori	r2,r2,128
  802070:	10bfe004 	addi	r2,r2,-128
  802074:	10002c26 	beq	r2,zero,802128 <logic+0xd2c>
  802078:	e0bffc17 	ldw	r2,-16(fp)
  80207c:	10803ec3 	ldbu	r2,251(r2)
  802080:	10803fcc 	andi	r2,r2,255
  802084:	1080201c 	xori	r2,r2,128
  802088:	10bfe004 	addi	r2,r2,-128
  80208c:	1000061e 	bne	r2,zero,8020a8 <logic+0xcac>
  802090:	e0bffc17 	ldw	r2,-16(fp)
  802094:	10802c03 	ldbu	r2,176(r2)
  802098:	10803fcc 	andi	r2,r2,255
  80209c:	1080201c 	xori	r2,r2,128
  8020a0:	10bfe004 	addi	r2,r2,-128
  8020a4:	10002026 	beq	r2,zero,802128 <logic+0xd2c>
  8020a8:	e0bffc17 	ldw	r2,-16(fp)
  8020ac:	10802c83 	ldbu	r2,178(r2)
  8020b0:	10803fcc 	andi	r2,r2,255
  8020b4:	1080201c 	xori	r2,r2,128
  8020b8:	10bfe004 	addi	r2,r2,-128
  8020bc:	1000061e 	bne	r2,zero,8020d8 <logic+0xcdc>
  8020c0:	e0bffc17 	ldw	r2,-16(fp)
  8020c4:	10802dc3 	ldbu	r2,183(r2)
  8020c8:	10803fcc 	andi	r2,r2,255
  8020cc:	1080201c 	xori	r2,r2,128
  8020d0:	10bfe004 	addi	r2,r2,-128
  8020d4:	10001426 	beq	r2,zero,802128 <logic+0xd2c>
  8020d8:	e0bffc17 	ldw	r2,-16(fp)
  8020dc:	10802b03 	ldbu	r2,172(r2)
  8020e0:	10803fcc 	andi	r2,r2,255
  8020e4:	1080201c 	xori	r2,r2,128
  8020e8:	10bfe004 	addi	r2,r2,-128
  8020ec:	10000c1e 	bne	r2,zero,802120 <logic+0xd24>
  8020f0:	e0bffc17 	ldw	r2,-16(fp)
  8020f4:	10802c03 	ldbu	r2,176(r2)
  8020f8:	10803fcc 	andi	r2,r2,255
  8020fc:	1080201c 	xori	r2,r2,128
  802100:	10bfe004 	addi	r2,r2,-128
  802104:	1000061e 	bne	r2,zero,802120 <logic+0xd24>
  802108:	e0bffc17 	ldw	r2,-16(fp)
  80210c:	10802dc3 	ldbu	r2,183(r2)
  802110:	10803fcc 	andi	r2,r2,255
  802114:	1080201c 	xori	r2,r2,128
  802118:	10bfe004 	addi	r2,r2,-128
  80211c:	10000226 	beq	r2,zero,802128 <logic+0xd2c>
  802120:	00800044 	movi	r2,1
  802124:	00000106 	br	80212c <logic+0xd30>
  802128:	0005883a 	mov	r2,zero
  80212c:	1007883a 	mov	r3,r2
  802130:	e0bffc17 	ldw	r2,-16(fp)
  802134:	10c02d85 	stb	r3,182(r2)
  d->_cg92 = d->_Pacemaker_local__Atrig;
  802138:	e0bffc17 	ldw	r2,-16(fp)
  80213c:	10c01e03 	ldbu	r3,120(r2)
  802140:	e0bffc17 	ldw	r2,-16(fp)
  802144:	10c03c85 	stb	r3,242(r2)
  d->_g86 = d->_g89 && d->_cg92;
  802148:	e0bffc17 	ldw	r2,-16(fp)
  80214c:	10802d83 	ldbu	r2,182(r2)
  802150:	10803fcc 	andi	r2,r2,255
  802154:	1080201c 	xori	r2,r2,128
  802158:	10bfe004 	addi	r2,r2,-128
  80215c:	10000826 	beq	r2,zero,802180 <logic+0xd84>
  802160:	e0bffc17 	ldw	r2,-16(fp)
  802164:	10803c83 	ldbu	r2,242(r2)
  802168:	10803fcc 	andi	r2,r2,255
  80216c:	1080201c 	xori	r2,r2,128
  802170:	10bfe004 	addi	r2,r2,-128
  802174:	10000226 	beq	r2,zero,802180 <logic+0xd84>
  802178:	00800044 	movi	r2,1
  80217c:	00000106 	br	802184 <logic+0xd88>
  802180:	0005883a 	mov	r2,zero
  802184:	1007883a 	mov	r3,r2
  802188:	e0bffc17 	ldw	r2,-16(fp)
  80218c:	10c02cc5 	stb	r3,179(r2)
  if (d->_g86) {
  802190:	e0bffc17 	ldw	r2,-16(fp)
  802194:	10802cc3 	ldbu	r2,179(r2)
  802198:	10803fcc 	andi	r2,r2,255
  80219c:	1080201c 	xori	r2,r2,128
  8021a0:	10bfe004 	addi	r2,r2,-128
  8021a4:	10000526 	beq	r2,zero,8021bc <logic+0xdc0>
    d->_taken_transitions[0] += 1;
  8021a8:	e0bffc17 	ldw	r2,-16(fp)
  8021ac:	10801217 	ldw	r2,72(r2)
  8021b0:	10c00044 	addi	r3,r2,1
  8021b4:	e0bffc17 	ldw	r2,-16(fp)
  8021b8:	10c01215 	stw	r3,72(r2)
  }
  d->_g87 = d->_pg67_e1;
  8021bc:	e0bffc17 	ldw	r2,-16(fp)
  8021c0:	10c04183 	ldbu	r3,262(r2)
  8021c4:	e0bffc17 	ldw	r2,-16(fp)
  8021c8:	10c02d05 	stb	r3,180(r2)
  d->_g67_e1 = d->_GO || d->_g87;
  8021cc:	e0bffc17 	ldw	r2,-16(fp)
  8021d0:	10803183 	ldbu	r2,198(r2)
  8021d4:	10803fcc 	andi	r2,r2,255
  8021d8:	1080201c 	xori	r2,r2,128
  8021dc:	10bfe004 	addi	r2,r2,-128
  8021e0:	1000061e 	bne	r2,zero,8021fc <logic+0xe00>
  8021e4:	e0bffc17 	ldw	r2,-16(fp)
  8021e8:	10802d03 	ldbu	r2,180(r2)
  8021ec:	10803fcc 	andi	r2,r2,255
  8021f0:	1080201c 	xori	r2,r2,128
  8021f4:	10bfe004 	addi	r2,r2,-128
  8021f8:	10000226 	beq	r2,zero,802204 <logic+0xe08>
  8021fc:	00800044 	movi	r2,1
  802200:	00000106 	br	802208 <logic+0xe0c>
  802204:	0005883a 	mov	r2,zero
  802208:	1007883a 	mov	r3,r2
  80220c:	e0bffc17 	ldw	r2,-16(fp)
  802210:	10c03e85 	stb	r3,250(r2)
  if (d->_g67_e1) {
  802214:	e0bffc17 	ldw	r2,-16(fp)
  802218:	10803e83 	ldbu	r2,250(r2)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	1080201c 	xori	r2,r2,128
  802224:	10bfe004 	addi	r2,r2,-128
  802228:	10000426 	beq	r2,zero,80223c <logic+0xe40>
    d->AP = 0;
  80222c:	e0bffc17 	ldw	r2,-16(fp)
  802230:	10001d85 	stb	zero,118(r2)
    d->VP = 0;
  802234:	e0bffc17 	ldw	r2,-16(fp)
  802238:	10001dc5 	stb	zero,119(r2)
  }
  d->_g87_e3 = d->_g89 && !d->_cg92;
  80223c:	e0bffc17 	ldw	r2,-16(fp)
  802240:	10802d83 	ldbu	r2,182(r2)
  802244:	10803fcc 	andi	r2,r2,255
  802248:	1080201c 	xori	r2,r2,128
  80224c:	10bfe004 	addi	r2,r2,-128
  802250:	10000826 	beq	r2,zero,802274 <logic+0xe78>
  802254:	e0bffc17 	ldw	r2,-16(fp)
  802258:	10803c83 	ldbu	r2,242(r2)
  80225c:	10803fcc 	andi	r2,r2,255
  802260:	1080201c 	xori	r2,r2,128
  802264:	10bfe004 	addi	r2,r2,-128
  802268:	1000021e 	bne	r2,zero,802274 <logic+0xe78>
  80226c:	00800044 	movi	r2,1
  802270:	00000106 	br	802278 <logic+0xe7c>
  802274:	0005883a 	mov	r2,zero
  802278:	1007883a 	mov	r3,r2
  80227c:	e0bffc17 	ldw	r2,-16(fp)
  802280:	10c03f05 	stb	r3,252(r2)
  d->_cg94 = d->_Pacemaker_local__Atrig1;
  802284:	e0bffc17 	ldw	r2,-16(fp)
  802288:	10c01e43 	ldbu	r3,121(r2)
  80228c:	e0bffc17 	ldw	r2,-16(fp)
  802290:	10c03cc5 	stb	r3,243(r2)
  d->_g67 = d->_g87_e3 && d->_cg94;
  802294:	e0bffc17 	ldw	r2,-16(fp)
  802298:	10803f03 	ldbu	r2,252(r2)
  80229c:	10803fcc 	andi	r2,r2,255
  8022a0:	1080201c 	xori	r2,r2,128
  8022a4:	10bfe004 	addi	r2,r2,-128
  8022a8:	10000826 	beq	r2,zero,8022cc <logic+0xed0>
  8022ac:	e0bffc17 	ldw	r2,-16(fp)
  8022b0:	10803cc3 	ldbu	r2,243(r2)
  8022b4:	10803fcc 	andi	r2,r2,255
  8022b8:	1080201c 	xori	r2,r2,128
  8022bc:	10bfe004 	addi	r2,r2,-128
  8022c0:	10000226 	beq	r2,zero,8022cc <logic+0xed0>
  8022c4:	00800044 	movi	r2,1
  8022c8:	00000106 	br	8022d0 <logic+0xed4>
  8022cc:	0005883a 	mov	r2,zero
  8022d0:	1007883a 	mov	r3,r2
  8022d4:	e0bffc17 	ldw	r2,-16(fp)
  8022d8:	10c02b05 	stb	r3,172(r2)
  if (d->_g67) {
  8022dc:	e0bffc17 	ldw	r2,-16(fp)
  8022e0:	10802b03 	ldbu	r2,172(r2)
  8022e4:	10803fcc 	andi	r2,r2,255
  8022e8:	1080201c 	xori	r2,r2,128
  8022ec:	10bfe004 	addi	r2,r2,-128
  8022f0:	10000b26 	beq	r2,zero,802320 <logic+0xf24>
    d->AP |= 1;
  8022f4:	e0bffc17 	ldw	r2,-16(fp)
  8022f8:	10801d83 	ldbu	r2,118(r2)
  8022fc:	10800054 	ori	r2,r2,1
  802300:	1007883a 	mov	r3,r2
  802304:	e0bffc17 	ldw	r2,-16(fp)
  802308:	10c01d85 	stb	r3,118(r2)
    d->_taken_transitions[1] += 1;
  80230c:	e0bffc17 	ldw	r2,-16(fp)
  802310:	10801317 	ldw	r2,76(r2)
  802314:	10c00044 	addi	r3,r2,1
  802318:	e0bffc17 	ldw	r2,-16(fp)
  80231c:	10c01315 	stw	r3,76(r2)
  }
  d->_g78 = d->_pg32;
  802320:	e0bffc17 	ldw	r2,-16(fp)
  802324:	10c041c3 	ldbu	r3,263(r2)
  802328:	e0bffc17 	ldw	r2,-16(fp)
  80232c:	10c02c05 	stb	r3,176(r2)
  d->_g78_e2 = d->_pg10;
  802330:	e0bffc17 	ldw	r2,-16(fp)
  802334:	10c04203 	ldbu	r3,264(r2)
  802338:	e0bffc17 	ldw	r2,-16(fp)
  80233c:	10c03ec5 	stb	r3,251(r2)
  d->_g135 = !(d->_g78 || d->_g78_e2);
  802340:	e0bffc17 	ldw	r2,-16(fp)
  802344:	10802c03 	ldbu	r2,176(r2)
  802348:	10803fcc 	andi	r2,r2,255
  80234c:	1080201c 	xori	r2,r2,128
  802350:	10bfe004 	addi	r2,r2,-128
  802354:	1000081e 	bne	r2,zero,802378 <logic+0xf7c>
  802358:	e0bffc17 	ldw	r2,-16(fp)
  80235c:	10803ec3 	ldbu	r2,251(r2)
  802360:	10803fcc 	andi	r2,r2,255
  802364:	1080201c 	xori	r2,r2,128
  802368:	10bfe004 	addi	r2,r2,-128
  80236c:	1000021e 	bne	r2,zero,802378 <logic+0xf7c>
  802370:	00800044 	movi	r2,1
  802374:	00000106 	br	80237c <logic+0xf80>
  802378:	0005883a 	mov	r2,zero
  80237c:	1007883a 	mov	r3,r2
  802380:	e0bffc17 	ldw	r2,-16(fp)
  802384:	10c03145 	stb	r3,197(r2)
  d->_g92 = d->_pg59;
  802388:	e0bffc17 	ldw	r2,-16(fp)
  80238c:	10c04243 	ldbu	r3,265(r2)
  802390:	e0bffc17 	ldw	r2,-16(fp)
  802394:	10c02e05 	stb	r3,184(r2)
  if (d->_g92) {
  802398:	e0bffc17 	ldw	r2,-16(fp)
  80239c:	10802e03 	ldbu	r2,184(r2)
  8023a0:	10803fcc 	andi	r2,r2,255
  8023a4:	1080201c 	xori	r2,r2,128
  8023a8:	10bfe004 	addi	r2,r2,-128
  8023ac:	10001226 	beq	r2,zero,8023f8 <logic+0xffc>
    d->URI_Clock += d->deltaT;
  8023b0:	e13ffc17 	ldw	r4,-16(fp)
  8023b4:	20800c17 	ldw	r2,48(r4)
  8023b8:	20c00d17 	ldw	r3,52(r4)
  8023bc:	e1bffc17 	ldw	r6,-16(fp)
  8023c0:	31001917 	ldw	r4,100(r6)
  8023c4:	31401a17 	ldw	r5,104(r6)
  8023c8:	200d883a 	mov	r6,r4
  8023cc:	280f883a 	mov	r7,r5
  8023d0:	1009883a 	mov	r4,r2
  8023d4:	180b883a 	mov	r5,r3
  8023d8:	08057900 	call	805790 <__adddf3>
  8023dc:	1009883a 	mov	r4,r2
  8023e0:	180b883a 	mov	r5,r3
  8023e4:	2005883a 	mov	r2,r4
  8023e8:	2807883a 	mov	r3,r5
  8023ec:	e13ffc17 	ldw	r4,-16(fp)
  8023f0:	20800c15 	stw	r2,48(r4)
  8023f4:	20c00d15 	stw	r3,52(r4)
  }
  d->_g50 = d->_pg20;
  8023f8:	e0bffc17 	ldw	r2,-16(fp)
  8023fc:	10c04283 	ldbu	r3,266(r2)
  802400:	e0bffc17 	ldw	r2,-16(fp)
  802404:	10c027c5 	stb	r3,159(r2)
  d->_cg50 = d->VS == 0 && d->AVI_Clock >= d->AVI && d->URI_Clock >= d->URI;
  802408:	e0bffc17 	ldw	r2,-16(fp)
  80240c:	10801d43 	ldbu	r2,117(r2)
  802410:	10803fcc 	andi	r2,r2,255
  802414:	1080201c 	xori	r2,r2,128
  802418:	10bfe004 	addi	r2,r2,-128
  80241c:	1000201e 	bne	r2,zero,8024a0 <logic+0x10a4>
  802420:	e0bffc17 	ldw	r2,-16(fp)
  802424:	14001017 	ldw	r16,64(r2)
  802428:	14401117 	ldw	r17,68(r2)
  80242c:	e0bffc17 	ldw	r2,-16(fp)
  802430:	10800017 	ldw	r2,0(r2)
  802434:	1009883a 	mov	r4,r2
  802438:	0806b080 	call	806b08 <__floatsidf>
  80243c:	1009883a 	mov	r4,r2
  802440:	180b883a 	mov	r5,r3
  802444:	200d883a 	mov	r6,r4
  802448:	280f883a 	mov	r7,r5
  80244c:	8009883a 	mov	r4,r16
  802450:	880b883a 	mov	r5,r17
  802454:	080603c0 	call	80603c <__gedf2>
  802458:	10001116 	blt	r2,zero,8024a0 <logic+0x10a4>
  80245c:	e0bffc17 	ldw	r2,-16(fp)
  802460:	14000c17 	ldw	r16,48(r2)
  802464:	14400d17 	ldw	r17,52(r2)
  802468:	e0bffc17 	ldw	r2,-16(fp)
  80246c:	10800517 	ldw	r2,20(r2)
  802470:	1009883a 	mov	r4,r2
  802474:	0806b080 	call	806b08 <__floatsidf>
  802478:	1009883a 	mov	r4,r2
  80247c:	180b883a 	mov	r5,r3
  802480:	200d883a 	mov	r6,r4
  802484:	280f883a 	mov	r7,r5
  802488:	8009883a 	mov	r4,r16
  80248c:	880b883a 	mov	r5,r17
  802490:	080603c0 	call	80603c <__gedf2>
  802494:	10000216 	blt	r2,zero,8024a0 <logic+0x10a4>
  802498:	00800044 	movi	r2,1
  80249c:	00000106 	br	8024a4 <logic+0x10a8>
  8024a0:	0005883a 	mov	r2,zero
  8024a4:	1007883a 	mov	r3,r2
  8024a8:	e0bffc17 	ldw	r2,-16(fp)
  8024ac:	10c03805 	stb	r3,224(r2)
  d->_g51 = d->_g50 && d->_cg50;
  8024b0:	e0bffc17 	ldw	r2,-16(fp)
  8024b4:	108027c3 	ldbu	r2,159(r2)
  8024b8:	10803fcc 	andi	r2,r2,255
  8024bc:	1080201c 	xori	r2,r2,128
  8024c0:	10bfe004 	addi	r2,r2,-128
  8024c4:	10000826 	beq	r2,zero,8024e8 <logic+0x10ec>
  8024c8:	e0bffc17 	ldw	r2,-16(fp)
  8024cc:	10803803 	ldbu	r2,224(r2)
  8024d0:	10803fcc 	andi	r2,r2,255
  8024d4:	1080201c 	xori	r2,r2,128
  8024d8:	10bfe004 	addi	r2,r2,-128
  8024dc:	10000226 	beq	r2,zero,8024e8 <logic+0x10ec>
  8024e0:	00800044 	movi	r2,1
  8024e4:	00000106 	br	8024ec <logic+0x10f0>
  8024e8:	0005883a 	mov	r2,zero
  8024ec:	1007883a 	mov	r3,r2
  8024f0:	e0bffc17 	ldw	r2,-16(fp)
  8024f4:	10c02805 	stb	r3,160(r2)
  if (d->_g51) {
  8024f8:	e0bffc17 	ldw	r2,-16(fp)
  8024fc:	10802803 	ldbu	r2,160(r2)
  802500:	10803fcc 	andi	r2,r2,255
  802504:	1080201c 	xori	r2,r2,128
  802508:	10bfe004 	addi	r2,r2,-128
  80250c:	10000326 	beq	r2,zero,80251c <logic+0x1120>
    d->_Pacemaker_local__Atrig3 = 1;
  802510:	e0bffc17 	ldw	r2,-16(fp)
  802514:	00c00044 	movi	r3,1
  802518:	10c01ec5 	stb	r3,123(r2)
  }
  d->_g107 = d->_pg99;
  80251c:	e0bffc17 	ldw	r2,-16(fp)
  802520:	10c042c3 	ldbu	r3,267(r2)
  802524:	e0bffc17 	ldw	r2,-16(fp)
  802528:	10c03005 	stb	r3,192(r2)
  if (d->_g107) {
  80252c:	e0bffc17 	ldw	r2,-16(fp)
  802530:	10803003 	ldbu	r2,192(r2)
  802534:	10803fcc 	andi	r2,r2,255
  802538:	1080201c 	xori	r2,r2,128
  80253c:	10bfe004 	addi	r2,r2,-128
  802540:	10001226 	beq	r2,zero,80258c <logic+0x1190>
    d->VRP_Clock += d->deltaT;
  802544:	e13ffc17 	ldw	r4,-16(fp)
  802548:	20800617 	ldw	r2,24(r4)
  80254c:	20c00717 	ldw	r3,28(r4)
  802550:	e1bffc17 	ldw	r6,-16(fp)
  802554:	31001917 	ldw	r4,100(r6)
  802558:	31401a17 	ldw	r5,104(r6)
  80255c:	200d883a 	mov	r6,r4
  802560:	280f883a 	mov	r7,r5
  802564:	1009883a 	mov	r4,r2
  802568:	180b883a 	mov	r5,r3
  80256c:	08057900 	call	805790 <__adddf3>
  802570:	1009883a 	mov	r4,r2
  802574:	180b883a 	mov	r5,r3
  802578:	2005883a 	mov	r2,r4
  80257c:	2807883a 	mov	r3,r5
  802580:	e13ffc17 	ldw	r4,-16(fp)
  802584:	20800615 	stw	r2,24(r4)
  802588:	20c00715 	stw	r3,28(r4)
  }
  d->_g53 = d->_g50 && !d->_cg50;
  80258c:	e0bffc17 	ldw	r2,-16(fp)
  802590:	108027c3 	ldbu	r2,159(r2)
  802594:	10803fcc 	andi	r2,r2,255
  802598:	1080201c 	xori	r2,r2,128
  80259c:	10bfe004 	addi	r2,r2,-128
  8025a0:	10000826 	beq	r2,zero,8025c4 <logic+0x11c8>
  8025a4:	e0bffc17 	ldw	r2,-16(fp)
  8025a8:	10803803 	ldbu	r2,224(r2)
  8025ac:	10803fcc 	andi	r2,r2,255
  8025b0:	1080201c 	xori	r2,r2,128
  8025b4:	10bfe004 	addi	r2,r2,-128
  8025b8:	1000021e 	bne	r2,zero,8025c4 <logic+0x11c8>
  8025bc:	00800044 	movi	r2,1
  8025c0:	00000106 	br	8025c8 <logic+0x11cc>
  8025c4:	0005883a 	mov	r2,zero
  8025c8:	1007883a 	mov	r3,r2
  8025cc:	e0bffc17 	ldw	r2,-16(fp)
  8025d0:	10c02885 	stb	r3,162(r2)
  d->_cg53 = d->VS == 1 && d->VRP_Clock >= d->VRP;
  8025d4:	e0bffc17 	ldw	r2,-16(fp)
  8025d8:	10801d43 	ldbu	r2,117(r2)
  8025dc:	10803fcc 	andi	r2,r2,255
  8025e0:	1080201c 	xori	r2,r2,128
  8025e4:	10bfe004 	addi	r2,r2,-128
  8025e8:	10800058 	cmpnei	r2,r2,1
  8025ec:	1000111e 	bne	r2,zero,802634 <logic+0x1238>
  8025f0:	e0bffc17 	ldw	r2,-16(fp)
  8025f4:	14000617 	ldw	r16,24(r2)
  8025f8:	14400717 	ldw	r17,28(r2)
  8025fc:	e0bffc17 	ldw	r2,-16(fp)
  802600:	10800317 	ldw	r2,12(r2)
  802604:	1009883a 	mov	r4,r2
  802608:	0806b080 	call	806b08 <__floatsidf>
  80260c:	1009883a 	mov	r4,r2
  802610:	180b883a 	mov	r5,r3
  802614:	200d883a 	mov	r6,r4
  802618:	280f883a 	mov	r7,r5
  80261c:	8009883a 	mov	r4,r16
  802620:	880b883a 	mov	r5,r17
  802624:	080603c0 	call	80603c <__gedf2>
  802628:	10000216 	blt	r2,zero,802634 <logic+0x1238>
  80262c:	00800044 	movi	r2,1
  802630:	00000106 	br	802638 <logic+0x123c>
  802634:	0005883a 	mov	r2,zero
  802638:	1007883a 	mov	r3,r2
  80263c:	e0bffc17 	ldw	r2,-16(fp)
  802640:	10c03845 	stb	r3,225(r2)
  d->_g54 = d->_g53 && d->_cg53;
  802644:	e0bffc17 	ldw	r2,-16(fp)
  802648:	10802883 	ldbu	r2,162(r2)
  80264c:	10803fcc 	andi	r2,r2,255
  802650:	1080201c 	xori	r2,r2,128
  802654:	10bfe004 	addi	r2,r2,-128
  802658:	10000826 	beq	r2,zero,80267c <logic+0x1280>
  80265c:	e0bffc17 	ldw	r2,-16(fp)
  802660:	10803843 	ldbu	r2,225(r2)
  802664:	10803fcc 	andi	r2,r2,255
  802668:	1080201c 	xori	r2,r2,128
  80266c:	10bfe004 	addi	r2,r2,-128
  802670:	10000226 	beq	r2,zero,80267c <logic+0x1280>
  802674:	00800044 	movi	r2,1
  802678:	00000106 	br	802680 <logic+0x1284>
  80267c:	0005883a 	mov	r2,zero
  802680:	1007883a 	mov	r3,r2
  802684:	e0bffc17 	ldw	r2,-16(fp)
  802688:	10c028c5 	stb	r3,163(r2)
  if (d->_g54) {
  80268c:	e0bffc17 	ldw	r2,-16(fp)
  802690:	108028c3 	ldbu	r2,163(r2)
  802694:	10803fcc 	andi	r2,r2,255
  802698:	1080201c 	xori	r2,r2,128
  80269c:	10bfe004 	addi	r2,r2,-128
  8026a0:	10000326 	beq	r2,zero,8026b0 <logic+0x12b4>
    d->_Pacemaker_local__Atrig4 = 1;
  8026a4:	e0bffc17 	ldw	r2,-16(fp)
  8026a8:	00c00044 	movi	r3,1
  8026ac:	10c01f05 	stb	r3,124(r2)
  }
  d->_g115 = d->_pg94;
  8026b0:	e0bffc17 	ldw	r2,-16(fp)
  8026b4:	10c04303 	ldbu	r3,268(r2)
  8026b8:	e0bffc17 	ldw	r2,-16(fp)
  8026bc:	10c03085 	stb	r3,194(r2)
  if (d->_g115) {
  8026c0:	e0bffc17 	ldw	r2,-16(fp)
  8026c4:	10803083 	ldbu	r2,194(r2)
  8026c8:	10803fcc 	andi	r2,r2,255
  8026cc:	1080201c 	xori	r2,r2,128
  8026d0:	10bfe004 	addi	r2,r2,-128
  8026d4:	10001226 	beq	r2,zero,802720 <logic+0x1324>
    d->LRI_Clock += d->deltaT;
  8026d8:	e13ffc17 	ldw	r4,-16(fp)
  8026dc:	20800a17 	ldw	r2,40(r4)
  8026e0:	20c00b17 	ldw	r3,44(r4)
  8026e4:	e1bffc17 	ldw	r6,-16(fp)
  8026e8:	31001917 	ldw	r4,100(r6)
  8026ec:	31401a17 	ldw	r5,104(r6)
  8026f0:	200d883a 	mov	r6,r4
  8026f4:	280f883a 	mov	r7,r5
  8026f8:	1009883a 	mov	r4,r2
  8026fc:	180b883a 	mov	r5,r3
  802700:	08057900 	call	805790 <__adddf3>
  802704:	1009883a 	mov	r4,r2
  802708:	180b883a 	mov	r5,r3
  80270c:	2005883a 	mov	r2,r4
  802710:	2807883a 	mov	r3,r5
  802714:	e13ffc17 	ldw	r4,-16(fp)
  802718:	20800a15 	stw	r2,40(r4)
  80271c:	20c00b15 	stw	r3,44(r4)
  }
  d->_g53 = d->_g53 && !d->_cg53;
  802720:	e0bffc17 	ldw	r2,-16(fp)
  802724:	10802883 	ldbu	r2,162(r2)
  802728:	10803fcc 	andi	r2,r2,255
  80272c:	1080201c 	xori	r2,r2,128
  802730:	10bfe004 	addi	r2,r2,-128
  802734:	10000826 	beq	r2,zero,802758 <logic+0x135c>
  802738:	e0bffc17 	ldw	r2,-16(fp)
  80273c:	10803843 	ldbu	r2,225(r2)
  802740:	10803fcc 	andi	r2,r2,255
  802744:	1080201c 	xori	r2,r2,128
  802748:	10bfe004 	addi	r2,r2,-128
  80274c:	1000021e 	bne	r2,zero,802758 <logic+0x135c>
  802750:	00800044 	movi	r2,1
  802754:	00000106 	br	80275c <logic+0x1360>
  802758:	0005883a 	mov	r2,zero
  80275c:	1007883a 	mov	r3,r2
  802760:	e0bffc17 	ldw	r2,-16(fp)
  802764:	10c02885 	stb	r3,162(r2)
  d->_cg55 = d->VS == 0 && d->LRI_Clock >= d->LRI;
  802768:	e0bffc17 	ldw	r2,-16(fp)
  80276c:	10801d43 	ldbu	r2,117(r2)
  802770:	10803fcc 	andi	r2,r2,255
  802774:	1080201c 	xori	r2,r2,128
  802778:	10bfe004 	addi	r2,r2,-128
  80277c:	1000111e 	bne	r2,zero,8027c4 <logic+0x13c8>
  802780:	e0bffc17 	ldw	r2,-16(fp)
  802784:	14000a17 	ldw	r16,40(r2)
  802788:	14400b17 	ldw	r17,44(r2)
  80278c:	e0bffc17 	ldw	r2,-16(fp)
  802790:	10800417 	ldw	r2,16(r2)
  802794:	1009883a 	mov	r4,r2
  802798:	0806b080 	call	806b08 <__floatsidf>
  80279c:	1009883a 	mov	r4,r2
  8027a0:	180b883a 	mov	r5,r3
  8027a4:	200d883a 	mov	r6,r4
  8027a8:	280f883a 	mov	r7,r5
  8027ac:	8009883a 	mov	r4,r16
  8027b0:	880b883a 	mov	r5,r17
  8027b4:	080603c0 	call	80603c <__gedf2>
  8027b8:	10000216 	blt	r2,zero,8027c4 <logic+0x13c8>
  8027bc:	00800044 	movi	r2,1
  8027c0:	00000106 	br	8027c8 <logic+0x13cc>
  8027c4:	0005883a 	mov	r2,zero
  8027c8:	1007883a 	mov	r3,r2
  8027cc:	e0bffc17 	ldw	r2,-16(fp)
  8027d0:	10c037c5 	stb	r3,223(r2)
  d->_g56 = d->_g53 && d->_cg55;
  8027d4:	e0bffc17 	ldw	r2,-16(fp)
  8027d8:	10802883 	ldbu	r2,162(r2)
  8027dc:	10803fcc 	andi	r2,r2,255
  8027e0:	1080201c 	xori	r2,r2,128
  8027e4:	10bfe004 	addi	r2,r2,-128
  8027e8:	10000826 	beq	r2,zero,80280c <logic+0x1410>
  8027ec:	e0bffc17 	ldw	r2,-16(fp)
  8027f0:	108037c3 	ldbu	r2,223(r2)
  8027f4:	10803fcc 	andi	r2,r2,255
  8027f8:	1080201c 	xori	r2,r2,128
  8027fc:	10bfe004 	addi	r2,r2,-128
  802800:	10000226 	beq	r2,zero,80280c <logic+0x1410>
  802804:	00800044 	movi	r2,1
  802808:	00000106 	br	802810 <logic+0x1414>
  80280c:	0005883a 	mov	r2,zero
  802810:	1007883a 	mov	r3,r2
  802814:	e0bffc17 	ldw	r2,-16(fp)
  802818:	10c02945 	stb	r3,165(r2)
  if (d->_g56) {
  80281c:	e0bffc17 	ldw	r2,-16(fp)
  802820:	10802943 	ldbu	r2,165(r2)
  802824:	10803fcc 	andi	r2,r2,255
  802828:	1080201c 	xori	r2,r2,128
  80282c:	10bfe004 	addi	r2,r2,-128
  802830:	10000326 	beq	r2,zero,802840 <logic+0x1444>
    d->_Pacemaker_local__Atrig5 = 1;
  802834:	e0bffc17 	ldw	r2,-16(fp)
  802838:	00c00044 	movi	r3,1
  80283c:	10c01f45 	stb	r3,125(r2)
  }
  d->_g13 = d->_g78_e2 || d->_g78;
  802840:	e0bffc17 	ldw	r2,-16(fp)
  802844:	10803ec3 	ldbu	r2,251(r2)
  802848:	10803fcc 	andi	r2,r2,255
  80284c:	1080201c 	xori	r2,r2,128
  802850:	10bfe004 	addi	r2,r2,-128
  802854:	1000061e 	bne	r2,zero,802870 <logic+0x1474>
  802858:	e0bffc17 	ldw	r2,-16(fp)
  80285c:	10802c03 	ldbu	r2,176(r2)
  802860:	10803fcc 	andi	r2,r2,255
  802864:	1080201c 	xori	r2,r2,128
  802868:	10bfe004 	addi	r2,r2,-128
  80286c:	10000226 	beq	r2,zero,802878 <logic+0x147c>
  802870:	00800044 	movi	r2,1
  802874:	00000106 	br	80287c <logic+0x1480>
  802878:	0005883a 	mov	r2,zero
  80287c:	1007883a 	mov	r3,r2
  802880:	e0bffc17 	ldw	r2,-16(fp)
  802884:	10c02145 	stb	r3,133(r2)
  d->_cg8 = d->VRP_Clock < d->VRP;
  802888:	e0bffc17 	ldw	r2,-16(fp)
  80288c:	14000617 	ldw	r16,24(r2)
  802890:	14400717 	ldw	r17,28(r2)
  802894:	e0bffc17 	ldw	r2,-16(fp)
  802898:	10800317 	ldw	r2,12(r2)
  80289c:	1009883a 	mov	r4,r2
  8028a0:	0806b080 	call	806b08 <__floatsidf>
  8028a4:	1009883a 	mov	r4,r2
  8028a8:	180b883a 	mov	r5,r3
  8028ac:	04800044 	movi	r18,1
  8028b0:	200d883a 	mov	r6,r4
  8028b4:	280f883a 	mov	r7,r5
  8028b8:	8009883a 	mov	r4,r16
  8028bc:	880b883a 	mov	r5,r17
  8028c0:	08061180 	call	806118 <__ledf2>
  8028c4:	10000116 	blt	r2,zero,8028cc <logic+0x14d0>
  8028c8:	0025883a 	mov	r18,zero
  8028cc:	9007883a 	mov	r3,r18
  8028d0:	e0bffc17 	ldw	r2,-16(fp)
  8028d4:	10c03285 	stb	r3,202(r2)
  d->_g7 = d->_g13 && d->_cg8;
  8028d8:	e0bffc17 	ldw	r2,-16(fp)
  8028dc:	10802143 	ldbu	r2,133(r2)
  8028e0:	10803fcc 	andi	r2,r2,255
  8028e4:	1080201c 	xori	r2,r2,128
  8028e8:	10bfe004 	addi	r2,r2,-128
  8028ec:	10000826 	beq	r2,zero,802910 <logic+0x1514>
  8028f0:	e0bffc17 	ldw	r2,-16(fp)
  8028f4:	10803283 	ldbu	r2,202(r2)
  8028f8:	10803fcc 	andi	r2,r2,255
  8028fc:	1080201c 	xori	r2,r2,128
  802900:	10bfe004 	addi	r2,r2,-128
  802904:	10000226 	beq	r2,zero,802910 <logic+0x1514>
  802908:	00800044 	movi	r2,1
  80290c:	00000106 	br	802914 <logic+0x1518>
  802910:	0005883a 	mov	r2,zero
  802914:	1007883a 	mov	r3,r2
  802918:	e0bffc17 	ldw	r2,-16(fp)
  80291c:	10c02005 	stb	r3,128(r2)
  if (d->_g7) {
  802920:	e0bffc17 	ldw	r2,-16(fp)
  802924:	10802003 	ldbu	r2,128(r2)
  802928:	10803fcc 	andi	r2,r2,255
  80292c:	1080201c 	xori	r2,r2,128
  802930:	10bfe004 	addi	r2,r2,-128
  802934:	10003426 	beq	r2,zero,802a08 <logic+0x160c>
    d->sleepT = (d->sleepT < (d->VRP - d->VRP_Clock)) ? d->sleepT : (d->VRP - d->VRP_Clock);
  802938:	e0bffc17 	ldw	r2,-16(fp)
  80293c:	14001b17 	ldw	r16,108(r2)
  802940:	14401c17 	ldw	r17,112(r2)
  802944:	e0bffc17 	ldw	r2,-16(fp)
  802948:	10800317 	ldw	r2,12(r2)
  80294c:	1009883a 	mov	r4,r2
  802950:	0806b080 	call	806b08 <__floatsidf>
  802954:	1011883a 	mov	r8,r2
  802958:	1813883a 	mov	r9,r3
  80295c:	e13ffc17 	ldw	r4,-16(fp)
  802960:	20800617 	ldw	r2,24(r4)
  802964:	20c00717 	ldw	r3,28(r4)
  802968:	100d883a 	mov	r6,r2
  80296c:	180f883a 	mov	r7,r3
  802970:	4009883a 	mov	r4,r8
  802974:	480b883a 	mov	r5,r9
  802978:	080620c0 	call	80620c <__subdf3>
  80297c:	1009883a 	mov	r4,r2
  802980:	180b883a 	mov	r5,r3
  802984:	2005883a 	mov	r2,r4
  802988:	2807883a 	mov	r3,r5
  80298c:	100d883a 	mov	r6,r2
  802990:	180f883a 	mov	r7,r3
  802994:	8009883a 	mov	r4,r16
  802998:	880b883a 	mov	r5,r17
  80299c:	08061180 	call	806118 <__ledf2>
  8029a0:	1000040e 	bge	r2,zero,8029b4 <logic+0x15b8>
  8029a4:	e13ffc17 	ldw	r4,-16(fp)
  8029a8:	20801b17 	ldw	r2,108(r4)
  8029ac:	20c01c17 	ldw	r3,112(r4)
  8029b0:	00001206 	br	8029fc <logic+0x1600>
  8029b4:	e0bffc17 	ldw	r2,-16(fp)
  8029b8:	10800317 	ldw	r2,12(r2)
  8029bc:	1009883a 	mov	r4,r2
  8029c0:	0806b080 	call	806b08 <__floatsidf>
  8029c4:	1011883a 	mov	r8,r2
  8029c8:	1813883a 	mov	r9,r3
  8029cc:	e13ffc17 	ldw	r4,-16(fp)
  8029d0:	20800617 	ldw	r2,24(r4)
  8029d4:	20c00717 	ldw	r3,28(r4)
  8029d8:	100d883a 	mov	r6,r2
  8029dc:	180f883a 	mov	r7,r3
  8029e0:	4009883a 	mov	r4,r8
  8029e4:	480b883a 	mov	r5,r9
  8029e8:	080620c0 	call	80620c <__subdf3>
  8029ec:	1009883a 	mov	r4,r2
  8029f0:	180b883a 	mov	r5,r3
  8029f4:	2005883a 	mov	r2,r4
  8029f8:	2807883a 	mov	r3,r5
  8029fc:	e13ffc17 	ldw	r4,-16(fp)
  802a00:	20801b15 	stw	r2,108(r4)
  802a04:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg9 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802a08:	e0bffc17 	ldw	r2,-16(fp)
  802a0c:	10801ec3 	ldbu	r2,123(r2)
  802a10:	10803fcc 	andi	r2,r2,255
  802a14:	1080201c 	xori	r2,r2,128
  802a18:	10bfe004 	addi	r2,r2,-128
  802a1c:	10000c1e 	bne	r2,zero,802a50 <logic+0x1654>
  802a20:	e0bffc17 	ldw	r2,-16(fp)
  802a24:	10801f03 	ldbu	r2,124(r2)
  802a28:	10803fcc 	andi	r2,r2,255
  802a2c:	1080201c 	xori	r2,r2,128
  802a30:	10bfe004 	addi	r2,r2,-128
  802a34:	1000061e 	bne	r2,zero,802a50 <logic+0x1654>
  802a38:	e0bffc17 	ldw	r2,-16(fp)
  802a3c:	10801f43 	ldbu	r2,125(r2)
  802a40:	10803fcc 	andi	r2,r2,255
  802a44:	1080201c 	xori	r2,r2,128
  802a48:	10bfe004 	addi	r2,r2,-128
  802a4c:	10000226 	beq	r2,zero,802a58 <logic+0x165c>
  802a50:	00800044 	movi	r2,1
  802a54:	00000106 	br	802a5c <logic+0x1660>
  802a58:	0005883a 	mov	r2,zero
  802a5c:	1007883a 	mov	r3,r2
  802a60:	e0bffc17 	ldw	r2,-16(fp)
  802a64:	10c03245 	stb	r3,201(r2)
  d->_g8 = d->_g13 && !d->_cg8;
  802a68:	e0bffc17 	ldw	r2,-16(fp)
  802a6c:	10802143 	ldbu	r2,133(r2)
  802a70:	10803fcc 	andi	r2,r2,255
  802a74:	1080201c 	xori	r2,r2,128
  802a78:	10bfe004 	addi	r2,r2,-128
  802a7c:	10000826 	beq	r2,zero,802aa0 <logic+0x16a4>
  802a80:	e0bffc17 	ldw	r2,-16(fp)
  802a84:	10803283 	ldbu	r2,202(r2)
  802a88:	10803fcc 	andi	r2,r2,255
  802a8c:	1080201c 	xori	r2,r2,128
  802a90:	10bfe004 	addi	r2,r2,-128
  802a94:	1000021e 	bne	r2,zero,802aa0 <logic+0x16a4>
  802a98:	00800044 	movi	r2,1
  802a9c:	00000106 	br	802aa4 <logic+0x16a8>
  802aa0:	0005883a 	mov	r2,zero
  802aa4:	1007883a 	mov	r3,r2
  802aa8:	e0bffc17 	ldw	r2,-16(fp)
  802aac:	10c02045 	stb	r3,129(r2)
  d->_cg11 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802ab0:	e0bffc17 	ldw	r2,-16(fp)
  802ab4:	10801ec3 	ldbu	r2,123(r2)
  802ab8:	10803fcc 	andi	r2,r2,255
  802abc:	1080201c 	xori	r2,r2,128
  802ac0:	10bfe004 	addi	r2,r2,-128
  802ac4:	10000c1e 	bne	r2,zero,802af8 <logic+0x16fc>
  802ac8:	e0bffc17 	ldw	r2,-16(fp)
  802acc:	10801f03 	ldbu	r2,124(r2)
  802ad0:	10803fcc 	andi	r2,r2,255
  802ad4:	1080201c 	xori	r2,r2,128
  802ad8:	10bfe004 	addi	r2,r2,-128
  802adc:	1000061e 	bne	r2,zero,802af8 <logic+0x16fc>
  802ae0:	e0bffc17 	ldw	r2,-16(fp)
  802ae4:	10801f43 	ldbu	r2,125(r2)
  802ae8:	10803fcc 	andi	r2,r2,255
  802aec:	1080201c 	xori	r2,r2,128
  802af0:	10bfe004 	addi	r2,r2,-128
  802af4:	10000226 	beq	r2,zero,802b00 <logic+0x1704>
  802af8:	00800044 	movi	r2,1
  802afc:	00000106 	br	802b04 <logic+0x1708>
  802b00:	0005883a 	mov	r2,zero
  802b04:	1007883a 	mov	r3,r2
  802b08:	e0bffc17 	ldw	r2,-16(fp)
  802b0c:	10c032c5 	stb	r3,203(r2)
  d->_g10 = d->_g7 && d->_cg9 || d->_g8 && d->_cg11;
  802b10:	e0bffc17 	ldw	r2,-16(fp)
  802b14:	10802003 	ldbu	r2,128(r2)
  802b18:	10803fcc 	andi	r2,r2,255
  802b1c:	1080201c 	xori	r2,r2,128
  802b20:	10bfe004 	addi	r2,r2,-128
  802b24:	10000626 	beq	r2,zero,802b40 <logic+0x1744>
  802b28:	e0bffc17 	ldw	r2,-16(fp)
  802b2c:	10803243 	ldbu	r2,201(r2)
  802b30:	10803fcc 	andi	r2,r2,255
  802b34:	1080201c 	xori	r2,r2,128
  802b38:	10bfe004 	addi	r2,r2,-128
  802b3c:	10000c1e 	bne	r2,zero,802b70 <logic+0x1774>
  802b40:	e0bffc17 	ldw	r2,-16(fp)
  802b44:	10802043 	ldbu	r2,129(r2)
  802b48:	10803fcc 	andi	r2,r2,255
  802b4c:	1080201c 	xori	r2,r2,128
  802b50:	10bfe004 	addi	r2,r2,-128
  802b54:	10000826 	beq	r2,zero,802b78 <logic+0x177c>
  802b58:	e0bffc17 	ldw	r2,-16(fp)
  802b5c:	108032c3 	ldbu	r2,203(r2)
  802b60:	10803fcc 	andi	r2,r2,255
  802b64:	1080201c 	xori	r2,r2,128
  802b68:	10bfe004 	addi	r2,r2,-128
  802b6c:	10000226 	beq	r2,zero,802b78 <logic+0x177c>
  802b70:	00800044 	movi	r2,1
  802b74:	00000106 	br	802b7c <logic+0x1780>
  802b78:	0005883a 	mov	r2,zero
  802b7c:	1007883a 	mov	r3,r2
  802b80:	e0bffc17 	ldw	r2,-16(fp)
  802b84:	10c020c5 	stb	r3,131(r2)
  d->_g24 = d->_pg32_e3;
  802b88:	e0bffc17 	ldw	r2,-16(fp)
  802b8c:	10c04343 	ldbu	r3,269(r2)
  802b90:	e0bffc17 	ldw	r2,-16(fp)
  802b94:	10c02345 	stb	r3,141(r2)
  d->_g18 = d->_pg21_e2;
  802b98:	e0bffc17 	ldw	r2,-16(fp)
  802b9c:	10c04383 	ldbu	r3,270(r2)
  802ba0:	e0bffc17 	ldw	r2,-16(fp)
  802ba4:	10c02205 	stb	r3,136(r2)
  d->_g21_e2 = !(d->_g24 || d->_g18);
  802ba8:	e0bffc17 	ldw	r2,-16(fp)
  802bac:	10802343 	ldbu	r2,141(r2)
  802bb0:	10803fcc 	andi	r2,r2,255
  802bb4:	1080201c 	xori	r2,r2,128
  802bb8:	10bfe004 	addi	r2,r2,-128
  802bbc:	1000081e 	bne	r2,zero,802be0 <logic+0x17e4>
  802bc0:	e0bffc17 	ldw	r2,-16(fp)
  802bc4:	10802203 	ldbu	r2,136(r2)
  802bc8:	10803fcc 	andi	r2,r2,255
  802bcc:	1080201c 	xori	r2,r2,128
  802bd0:	10bfe004 	addi	r2,r2,-128
  802bd4:	1000021e 	bne	r2,zero,802be0 <logic+0x17e4>
  802bd8:	00800044 	movi	r2,1
  802bdc:	00000106 	br	802be4 <logic+0x17e8>
  802be0:	0005883a 	mov	r2,zero
  802be4:	1007883a 	mov	r3,r2
  802be8:	e0bffc17 	ldw	r2,-16(fp)
  802bec:	10c03d85 	stb	r3,246(r2)
  d->_g24 = d->_g18 || d->_g24;
  802bf0:	e0bffc17 	ldw	r2,-16(fp)
  802bf4:	10802203 	ldbu	r2,136(r2)
  802bf8:	10803fcc 	andi	r2,r2,255
  802bfc:	1080201c 	xori	r2,r2,128
  802c00:	10bfe004 	addi	r2,r2,-128
  802c04:	1000061e 	bne	r2,zero,802c20 <logic+0x1824>
  802c08:	e0bffc17 	ldw	r2,-16(fp)
  802c0c:	10802343 	ldbu	r2,141(r2)
  802c10:	10803fcc 	andi	r2,r2,255
  802c14:	1080201c 	xori	r2,r2,128
  802c18:	10bfe004 	addi	r2,r2,-128
  802c1c:	10000226 	beq	r2,zero,802c28 <logic+0x182c>
  802c20:	00800044 	movi	r2,1
  802c24:	00000106 	br	802c2c <logic+0x1830>
  802c28:	0005883a 	mov	r2,zero
  802c2c:	1007883a 	mov	r3,r2
  802c30:	e0bffc17 	ldw	r2,-16(fp)
  802c34:	10c02345 	stb	r3,141(r2)
  d->_cg19 = d->LRI_Clock < d->LRI;
  802c38:	e0bffc17 	ldw	r2,-16(fp)
  802c3c:	14000a17 	ldw	r16,40(r2)
  802c40:	14400b17 	ldw	r17,44(r2)
  802c44:	e0bffc17 	ldw	r2,-16(fp)
  802c48:	10800417 	ldw	r2,16(r2)
  802c4c:	1009883a 	mov	r4,r2
  802c50:	0806b080 	call	806b08 <__floatsidf>
  802c54:	1009883a 	mov	r4,r2
  802c58:	180b883a 	mov	r5,r3
  802c5c:	04800044 	movi	r18,1
  802c60:	200d883a 	mov	r6,r4
  802c64:	280f883a 	mov	r7,r5
  802c68:	8009883a 	mov	r4,r16
  802c6c:	880b883a 	mov	r5,r17
  802c70:	08061180 	call	806118 <__ledf2>
  802c74:	10000116 	blt	r2,zero,802c7c <logic+0x1880>
  802c78:	0025883a 	mov	r18,zero
  802c7c:	9007883a 	mov	r3,r18
  802c80:	e0bffc17 	ldw	r2,-16(fp)
  802c84:	10c03405 	stb	r3,208(r2)
  d->_g18 = d->_g24 && d->_cg19;
  802c88:	e0bffc17 	ldw	r2,-16(fp)
  802c8c:	10802343 	ldbu	r2,141(r2)
  802c90:	10803fcc 	andi	r2,r2,255
  802c94:	1080201c 	xori	r2,r2,128
  802c98:	10bfe004 	addi	r2,r2,-128
  802c9c:	10000826 	beq	r2,zero,802cc0 <logic+0x18c4>
  802ca0:	e0bffc17 	ldw	r2,-16(fp)
  802ca4:	10803403 	ldbu	r2,208(r2)
  802ca8:	10803fcc 	andi	r2,r2,255
  802cac:	1080201c 	xori	r2,r2,128
  802cb0:	10bfe004 	addi	r2,r2,-128
  802cb4:	10000226 	beq	r2,zero,802cc0 <logic+0x18c4>
  802cb8:	00800044 	movi	r2,1
  802cbc:	00000106 	br	802cc4 <logic+0x18c8>
  802cc0:	0005883a 	mov	r2,zero
  802cc4:	1007883a 	mov	r3,r2
  802cc8:	e0bffc17 	ldw	r2,-16(fp)
  802ccc:	10c02205 	stb	r3,136(r2)
  if (d->_g18) {
  802cd0:	e0bffc17 	ldw	r2,-16(fp)
  802cd4:	10802203 	ldbu	r2,136(r2)
  802cd8:	10803fcc 	andi	r2,r2,255
  802cdc:	1080201c 	xori	r2,r2,128
  802ce0:	10bfe004 	addi	r2,r2,-128
  802ce4:	10003426 	beq	r2,zero,802db8 <logic+0x19bc>
    d->sleepT = (d->sleepT < (d->LRI - d->LRI_Clock)) ? d->sleepT : (d->LRI - d->LRI_Clock);
  802ce8:	e0bffc17 	ldw	r2,-16(fp)
  802cec:	14001b17 	ldw	r16,108(r2)
  802cf0:	14401c17 	ldw	r17,112(r2)
  802cf4:	e0bffc17 	ldw	r2,-16(fp)
  802cf8:	10800417 	ldw	r2,16(r2)
  802cfc:	1009883a 	mov	r4,r2
  802d00:	0806b080 	call	806b08 <__floatsidf>
  802d04:	1011883a 	mov	r8,r2
  802d08:	1813883a 	mov	r9,r3
  802d0c:	e13ffc17 	ldw	r4,-16(fp)
  802d10:	20800a17 	ldw	r2,40(r4)
  802d14:	20c00b17 	ldw	r3,44(r4)
  802d18:	100d883a 	mov	r6,r2
  802d1c:	180f883a 	mov	r7,r3
  802d20:	4009883a 	mov	r4,r8
  802d24:	480b883a 	mov	r5,r9
  802d28:	080620c0 	call	80620c <__subdf3>
  802d2c:	1009883a 	mov	r4,r2
  802d30:	180b883a 	mov	r5,r3
  802d34:	2005883a 	mov	r2,r4
  802d38:	2807883a 	mov	r3,r5
  802d3c:	100d883a 	mov	r6,r2
  802d40:	180f883a 	mov	r7,r3
  802d44:	8009883a 	mov	r4,r16
  802d48:	880b883a 	mov	r5,r17
  802d4c:	08061180 	call	806118 <__ledf2>
  802d50:	1000040e 	bge	r2,zero,802d64 <logic+0x1968>
  802d54:	e13ffc17 	ldw	r4,-16(fp)
  802d58:	20801b17 	ldw	r2,108(r4)
  802d5c:	20c01c17 	ldw	r3,112(r4)
  802d60:	00001206 	br	802dac <logic+0x19b0>
  802d64:	e0bffc17 	ldw	r2,-16(fp)
  802d68:	10800417 	ldw	r2,16(r2)
  802d6c:	1009883a 	mov	r4,r2
  802d70:	0806b080 	call	806b08 <__floatsidf>
  802d74:	1011883a 	mov	r8,r2
  802d78:	1813883a 	mov	r9,r3
  802d7c:	e13ffc17 	ldw	r4,-16(fp)
  802d80:	20800a17 	ldw	r2,40(r4)
  802d84:	20c00b17 	ldw	r3,44(r4)
  802d88:	100d883a 	mov	r6,r2
  802d8c:	180f883a 	mov	r7,r3
  802d90:	4009883a 	mov	r4,r8
  802d94:	480b883a 	mov	r5,r9
  802d98:	080620c0 	call	80620c <__subdf3>
  802d9c:	1009883a 	mov	r4,r2
  802da0:	180b883a 	mov	r5,r3
  802da4:	2005883a 	mov	r2,r4
  802da8:	2807883a 	mov	r3,r5
  802dac:	e13ffc17 	ldw	r4,-16(fp)
  802db0:	20801b15 	stw	r2,108(r4)
  802db4:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg20 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802db8:	e0bffc17 	ldw	r2,-16(fp)
  802dbc:	10801ec3 	ldbu	r2,123(r2)
  802dc0:	10803fcc 	andi	r2,r2,255
  802dc4:	1080201c 	xori	r2,r2,128
  802dc8:	10bfe004 	addi	r2,r2,-128
  802dcc:	10000c1e 	bne	r2,zero,802e00 <logic+0x1a04>
  802dd0:	e0bffc17 	ldw	r2,-16(fp)
  802dd4:	10801f03 	ldbu	r2,124(r2)
  802dd8:	10803fcc 	andi	r2,r2,255
  802ddc:	1080201c 	xori	r2,r2,128
  802de0:	10bfe004 	addi	r2,r2,-128
  802de4:	1000061e 	bne	r2,zero,802e00 <logic+0x1a04>
  802de8:	e0bffc17 	ldw	r2,-16(fp)
  802dec:	10801f43 	ldbu	r2,125(r2)
  802df0:	10803fcc 	andi	r2,r2,255
  802df4:	1080201c 	xori	r2,r2,128
  802df8:	10bfe004 	addi	r2,r2,-128
  802dfc:	10000226 	beq	r2,zero,802e08 <logic+0x1a0c>
  802e00:	00800044 	movi	r2,1
  802e04:	00000106 	br	802e0c <logic+0x1a10>
  802e08:	0005883a 	mov	r2,zero
  802e0c:	1007883a 	mov	r3,r2
  802e10:	e0bffc17 	ldw	r2,-16(fp)
  802e14:	10c033c5 	stb	r3,207(r2)
  d->_g19 = d->_g24 && !d->_cg19;
  802e18:	e0bffc17 	ldw	r2,-16(fp)
  802e1c:	10802343 	ldbu	r2,141(r2)
  802e20:	10803fcc 	andi	r2,r2,255
  802e24:	1080201c 	xori	r2,r2,128
  802e28:	10bfe004 	addi	r2,r2,-128
  802e2c:	10000826 	beq	r2,zero,802e50 <logic+0x1a54>
  802e30:	e0bffc17 	ldw	r2,-16(fp)
  802e34:	10803403 	ldbu	r2,208(r2)
  802e38:	10803fcc 	andi	r2,r2,255
  802e3c:	1080201c 	xori	r2,r2,128
  802e40:	10bfe004 	addi	r2,r2,-128
  802e44:	1000021e 	bne	r2,zero,802e50 <logic+0x1a54>
  802e48:	00800044 	movi	r2,1
  802e4c:	00000106 	br	802e54 <logic+0x1a58>
  802e50:	0005883a 	mov	r2,zero
  802e54:	1007883a 	mov	r3,r2
  802e58:	e0bffc17 	ldw	r2,-16(fp)
  802e5c:	10c02245 	stb	r3,137(r2)
  d->_cg22 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802e60:	e0bffc17 	ldw	r2,-16(fp)
  802e64:	10801ec3 	ldbu	r2,123(r2)
  802e68:	10803fcc 	andi	r2,r2,255
  802e6c:	1080201c 	xori	r2,r2,128
  802e70:	10bfe004 	addi	r2,r2,-128
  802e74:	10000c1e 	bne	r2,zero,802ea8 <logic+0x1aac>
  802e78:	e0bffc17 	ldw	r2,-16(fp)
  802e7c:	10801f03 	ldbu	r2,124(r2)
  802e80:	10803fcc 	andi	r2,r2,255
  802e84:	1080201c 	xori	r2,r2,128
  802e88:	10bfe004 	addi	r2,r2,-128
  802e8c:	1000061e 	bne	r2,zero,802ea8 <logic+0x1aac>
  802e90:	e0bffc17 	ldw	r2,-16(fp)
  802e94:	10801f43 	ldbu	r2,125(r2)
  802e98:	10803fcc 	andi	r2,r2,255
  802e9c:	1080201c 	xori	r2,r2,128
  802ea0:	10bfe004 	addi	r2,r2,-128
  802ea4:	10000226 	beq	r2,zero,802eb0 <logic+0x1ab4>
  802ea8:	00800044 	movi	r2,1
  802eac:	00000106 	br	802eb4 <logic+0x1ab8>
  802eb0:	0005883a 	mov	r2,zero
  802eb4:	1007883a 	mov	r3,r2
  802eb8:	e0bffc17 	ldw	r2,-16(fp)
  802ebc:	10c03445 	stb	r3,209(r2)
  d->_g21 = d->_g18 && d->_cg20 || d->_g19 && d->_cg22;
  802ec0:	e0bffc17 	ldw	r2,-16(fp)
  802ec4:	10802203 	ldbu	r2,136(r2)
  802ec8:	10803fcc 	andi	r2,r2,255
  802ecc:	1080201c 	xori	r2,r2,128
  802ed0:	10bfe004 	addi	r2,r2,-128
  802ed4:	10000626 	beq	r2,zero,802ef0 <logic+0x1af4>
  802ed8:	e0bffc17 	ldw	r2,-16(fp)
  802edc:	108033c3 	ldbu	r2,207(r2)
  802ee0:	10803fcc 	andi	r2,r2,255
  802ee4:	1080201c 	xori	r2,r2,128
  802ee8:	10bfe004 	addi	r2,r2,-128
  802eec:	10000c1e 	bne	r2,zero,802f20 <logic+0x1b24>
  802ef0:	e0bffc17 	ldw	r2,-16(fp)
  802ef4:	10802243 	ldbu	r2,137(r2)
  802ef8:	10803fcc 	andi	r2,r2,255
  802efc:	1080201c 	xori	r2,r2,128
  802f00:	10bfe004 	addi	r2,r2,-128
  802f04:	10000826 	beq	r2,zero,802f28 <logic+0x1b2c>
  802f08:	e0bffc17 	ldw	r2,-16(fp)
  802f0c:	10803443 	ldbu	r2,209(r2)
  802f10:	10803fcc 	andi	r2,r2,255
  802f14:	1080201c 	xori	r2,r2,128
  802f18:	10bfe004 	addi	r2,r2,-128
  802f1c:	10000226 	beq	r2,zero,802f28 <logic+0x1b2c>
  802f20:	00800044 	movi	r2,1
  802f24:	00000106 	br	802f2c <logic+0x1b30>
  802f28:	0005883a 	mov	r2,zero
  802f2c:	1007883a 	mov	r3,r2
  802f30:	e0bffc17 	ldw	r2,-16(fp)
  802f34:	10c022c5 	stb	r3,139(r2)
  d->_g35 = d->_pg5;
  802f38:	e0bffc17 	ldw	r2,-16(fp)
  802f3c:	10c043c3 	ldbu	r3,271(r2)
  802f40:	e0bffc17 	ldw	r2,-16(fp)
  802f44:	10c02545 	stb	r3,149(r2)
  d->_g29 = d->_pg93;
  802f48:	e0bffc17 	ldw	r2,-16(fp)
  802f4c:	10c04403 	ldbu	r3,272(r2)
  802f50:	e0bffc17 	ldw	r2,-16(fp)
  802f54:	10c02405 	stb	r3,144(r2)
  d->_g32_e3 = !(d->_g35 || d->_g29);
  802f58:	e0bffc17 	ldw	r2,-16(fp)
  802f5c:	10802543 	ldbu	r2,149(r2)
  802f60:	10803fcc 	andi	r2,r2,255
  802f64:	1080201c 	xori	r2,r2,128
  802f68:	10bfe004 	addi	r2,r2,-128
  802f6c:	1000081e 	bne	r2,zero,802f90 <logic+0x1b94>
  802f70:	e0bffc17 	ldw	r2,-16(fp)
  802f74:	10802403 	ldbu	r2,144(r2)
  802f78:	10803fcc 	andi	r2,r2,255
  802f7c:	1080201c 	xori	r2,r2,128
  802f80:	10bfe004 	addi	r2,r2,-128
  802f84:	1000021e 	bne	r2,zero,802f90 <logic+0x1b94>
  802f88:	00800044 	movi	r2,1
  802f8c:	00000106 	br	802f94 <logic+0x1b98>
  802f90:	0005883a 	mov	r2,zero
  802f94:	1007883a 	mov	r3,r2
  802f98:	e0bffc17 	ldw	r2,-16(fp)
  802f9c:	10c03dc5 	stb	r3,247(r2)
  d->_g35 = d->_g29 || d->_g35;
  802fa0:	e0bffc17 	ldw	r2,-16(fp)
  802fa4:	10802403 	ldbu	r2,144(r2)
  802fa8:	10803fcc 	andi	r2,r2,255
  802fac:	1080201c 	xori	r2,r2,128
  802fb0:	10bfe004 	addi	r2,r2,-128
  802fb4:	1000061e 	bne	r2,zero,802fd0 <logic+0x1bd4>
  802fb8:	e0bffc17 	ldw	r2,-16(fp)
  802fbc:	10802543 	ldbu	r2,149(r2)
  802fc0:	10803fcc 	andi	r2,r2,255
  802fc4:	1080201c 	xori	r2,r2,128
  802fc8:	10bfe004 	addi	r2,r2,-128
  802fcc:	10000226 	beq	r2,zero,802fd8 <logic+0x1bdc>
  802fd0:	00800044 	movi	r2,1
  802fd4:	00000106 	br	802fdc <logic+0x1be0>
  802fd8:	0005883a 	mov	r2,zero
  802fdc:	1007883a 	mov	r3,r2
  802fe0:	e0bffc17 	ldw	r2,-16(fp)
  802fe4:	10c02545 	stb	r3,149(r2)
  d->_cg30 = d->URI_Clock < d->URI;
  802fe8:	e0bffc17 	ldw	r2,-16(fp)
  802fec:	14000c17 	ldw	r16,48(r2)
  802ff0:	14400d17 	ldw	r17,52(r2)
  802ff4:	e0bffc17 	ldw	r2,-16(fp)
  802ff8:	10800517 	ldw	r2,20(r2)
  802ffc:	1009883a 	mov	r4,r2
  803000:	0806b080 	call	806b08 <__floatsidf>
  803004:	1009883a 	mov	r4,r2
  803008:	180b883a 	mov	r5,r3
  80300c:	04800044 	movi	r18,1
  803010:	200d883a 	mov	r6,r4
  803014:	280f883a 	mov	r7,r5
  803018:	8009883a 	mov	r4,r16
  80301c:	880b883a 	mov	r5,r17
  803020:	08061180 	call	806118 <__ledf2>
  803024:	10000116 	blt	r2,zero,80302c <logic+0x1c30>
  803028:	0025883a 	mov	r18,zero
  80302c:	9007883a 	mov	r3,r18
  803030:	e0bffc17 	ldw	r2,-16(fp)
  803034:	10c03585 	stb	r3,214(r2)
  d->_g29 = d->_g35 && d->_cg30;
  803038:	e0bffc17 	ldw	r2,-16(fp)
  80303c:	10802543 	ldbu	r2,149(r2)
  803040:	10803fcc 	andi	r2,r2,255
  803044:	1080201c 	xori	r2,r2,128
  803048:	10bfe004 	addi	r2,r2,-128
  80304c:	10000826 	beq	r2,zero,803070 <logic+0x1c74>
  803050:	e0bffc17 	ldw	r2,-16(fp)
  803054:	10803583 	ldbu	r2,214(r2)
  803058:	10803fcc 	andi	r2,r2,255
  80305c:	1080201c 	xori	r2,r2,128
  803060:	10bfe004 	addi	r2,r2,-128
  803064:	10000226 	beq	r2,zero,803070 <logic+0x1c74>
  803068:	00800044 	movi	r2,1
  80306c:	00000106 	br	803074 <logic+0x1c78>
  803070:	0005883a 	mov	r2,zero
  803074:	1007883a 	mov	r3,r2
  803078:	e0bffc17 	ldw	r2,-16(fp)
  80307c:	10c02405 	stb	r3,144(r2)
  if (d->_g29) {
  803080:	e0bffc17 	ldw	r2,-16(fp)
  803084:	10802403 	ldbu	r2,144(r2)
  803088:	10803fcc 	andi	r2,r2,255
  80308c:	1080201c 	xori	r2,r2,128
  803090:	10bfe004 	addi	r2,r2,-128
  803094:	10003426 	beq	r2,zero,803168 <logic+0x1d6c>
    d->sleepT = (d->sleepT < (d->URI - d->URI_Clock)) ? d->sleepT : (d->URI - d->URI_Clock);
  803098:	e0bffc17 	ldw	r2,-16(fp)
  80309c:	14001b17 	ldw	r16,108(r2)
  8030a0:	14401c17 	ldw	r17,112(r2)
  8030a4:	e0bffc17 	ldw	r2,-16(fp)
  8030a8:	10800517 	ldw	r2,20(r2)
  8030ac:	1009883a 	mov	r4,r2
  8030b0:	0806b080 	call	806b08 <__floatsidf>
  8030b4:	1011883a 	mov	r8,r2
  8030b8:	1813883a 	mov	r9,r3
  8030bc:	e13ffc17 	ldw	r4,-16(fp)
  8030c0:	20800c17 	ldw	r2,48(r4)
  8030c4:	20c00d17 	ldw	r3,52(r4)
  8030c8:	100d883a 	mov	r6,r2
  8030cc:	180f883a 	mov	r7,r3
  8030d0:	4009883a 	mov	r4,r8
  8030d4:	480b883a 	mov	r5,r9
  8030d8:	080620c0 	call	80620c <__subdf3>
  8030dc:	1009883a 	mov	r4,r2
  8030e0:	180b883a 	mov	r5,r3
  8030e4:	2005883a 	mov	r2,r4
  8030e8:	2807883a 	mov	r3,r5
  8030ec:	100d883a 	mov	r6,r2
  8030f0:	180f883a 	mov	r7,r3
  8030f4:	8009883a 	mov	r4,r16
  8030f8:	880b883a 	mov	r5,r17
  8030fc:	08061180 	call	806118 <__ledf2>
  803100:	1000040e 	bge	r2,zero,803114 <logic+0x1d18>
  803104:	e13ffc17 	ldw	r4,-16(fp)
  803108:	20801b17 	ldw	r2,108(r4)
  80310c:	20c01c17 	ldw	r3,112(r4)
  803110:	00001206 	br	80315c <logic+0x1d60>
  803114:	e0bffc17 	ldw	r2,-16(fp)
  803118:	10800517 	ldw	r2,20(r2)
  80311c:	1009883a 	mov	r4,r2
  803120:	0806b080 	call	806b08 <__floatsidf>
  803124:	1011883a 	mov	r8,r2
  803128:	1813883a 	mov	r9,r3
  80312c:	e13ffc17 	ldw	r4,-16(fp)
  803130:	20800c17 	ldw	r2,48(r4)
  803134:	20c00d17 	ldw	r3,52(r4)
  803138:	100d883a 	mov	r6,r2
  80313c:	180f883a 	mov	r7,r3
  803140:	4009883a 	mov	r4,r8
  803144:	480b883a 	mov	r5,r9
  803148:	080620c0 	call	80620c <__subdf3>
  80314c:	1009883a 	mov	r4,r2
  803150:	180b883a 	mov	r5,r3
  803154:	2005883a 	mov	r2,r4
  803158:	2807883a 	mov	r3,r5
  80315c:	e13ffc17 	ldw	r4,-16(fp)
  803160:	20801b15 	stw	r2,108(r4)
  803164:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg31 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803168:	e0bffc17 	ldw	r2,-16(fp)
  80316c:	10801ec3 	ldbu	r2,123(r2)
  803170:	10803fcc 	andi	r2,r2,255
  803174:	1080201c 	xori	r2,r2,128
  803178:	10bfe004 	addi	r2,r2,-128
  80317c:	10000c1e 	bne	r2,zero,8031b0 <logic+0x1db4>
  803180:	e0bffc17 	ldw	r2,-16(fp)
  803184:	10801f03 	ldbu	r2,124(r2)
  803188:	10803fcc 	andi	r2,r2,255
  80318c:	1080201c 	xori	r2,r2,128
  803190:	10bfe004 	addi	r2,r2,-128
  803194:	1000061e 	bne	r2,zero,8031b0 <logic+0x1db4>
  803198:	e0bffc17 	ldw	r2,-16(fp)
  80319c:	10801f43 	ldbu	r2,125(r2)
  8031a0:	10803fcc 	andi	r2,r2,255
  8031a4:	1080201c 	xori	r2,r2,128
  8031a8:	10bfe004 	addi	r2,r2,-128
  8031ac:	10000226 	beq	r2,zero,8031b8 <logic+0x1dbc>
  8031b0:	00800044 	movi	r2,1
  8031b4:	00000106 	br	8031bc <logic+0x1dc0>
  8031b8:	0005883a 	mov	r2,zero
  8031bc:	1007883a 	mov	r3,r2
  8031c0:	e0bffc17 	ldw	r2,-16(fp)
  8031c4:	10c03545 	stb	r3,213(r2)
  d->_g30 = d->_g35 && !d->_cg30;
  8031c8:	e0bffc17 	ldw	r2,-16(fp)
  8031cc:	10802543 	ldbu	r2,149(r2)
  8031d0:	10803fcc 	andi	r2,r2,255
  8031d4:	1080201c 	xori	r2,r2,128
  8031d8:	10bfe004 	addi	r2,r2,-128
  8031dc:	10000826 	beq	r2,zero,803200 <logic+0x1e04>
  8031e0:	e0bffc17 	ldw	r2,-16(fp)
  8031e4:	10803583 	ldbu	r2,214(r2)
  8031e8:	10803fcc 	andi	r2,r2,255
  8031ec:	1080201c 	xori	r2,r2,128
  8031f0:	10bfe004 	addi	r2,r2,-128
  8031f4:	1000021e 	bne	r2,zero,803200 <logic+0x1e04>
  8031f8:	00800044 	movi	r2,1
  8031fc:	00000106 	br	803204 <logic+0x1e08>
  803200:	0005883a 	mov	r2,zero
  803204:	1007883a 	mov	r3,r2
  803208:	e0bffc17 	ldw	r2,-16(fp)
  80320c:	10c02445 	stb	r3,145(r2)
  d->_cg33 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803210:	e0bffc17 	ldw	r2,-16(fp)
  803214:	10801ec3 	ldbu	r2,123(r2)
  803218:	10803fcc 	andi	r2,r2,255
  80321c:	1080201c 	xori	r2,r2,128
  803220:	10bfe004 	addi	r2,r2,-128
  803224:	10000c1e 	bne	r2,zero,803258 <logic+0x1e5c>
  803228:	e0bffc17 	ldw	r2,-16(fp)
  80322c:	10801f03 	ldbu	r2,124(r2)
  803230:	10803fcc 	andi	r2,r2,255
  803234:	1080201c 	xori	r2,r2,128
  803238:	10bfe004 	addi	r2,r2,-128
  80323c:	1000061e 	bne	r2,zero,803258 <logic+0x1e5c>
  803240:	e0bffc17 	ldw	r2,-16(fp)
  803244:	10801f43 	ldbu	r2,125(r2)
  803248:	10803fcc 	andi	r2,r2,255
  80324c:	1080201c 	xori	r2,r2,128
  803250:	10bfe004 	addi	r2,r2,-128
  803254:	10000226 	beq	r2,zero,803260 <logic+0x1e64>
  803258:	00800044 	movi	r2,1
  80325c:	00000106 	br	803264 <logic+0x1e68>
  803260:	0005883a 	mov	r2,zero
  803264:	1007883a 	mov	r3,r2
  803268:	e0bffc17 	ldw	r2,-16(fp)
  80326c:	10c035c5 	stb	r3,215(r2)
  d->_g32 = d->_g29 && d->_cg31 || d->_g30 && d->_cg33;
  803270:	e0bffc17 	ldw	r2,-16(fp)
  803274:	10802403 	ldbu	r2,144(r2)
  803278:	10803fcc 	andi	r2,r2,255
  80327c:	1080201c 	xori	r2,r2,128
  803280:	10bfe004 	addi	r2,r2,-128
  803284:	10000626 	beq	r2,zero,8032a0 <logic+0x1ea4>
  803288:	e0bffc17 	ldw	r2,-16(fp)
  80328c:	10803543 	ldbu	r2,213(r2)
  803290:	10803fcc 	andi	r2,r2,255
  803294:	1080201c 	xori	r2,r2,128
  803298:	10bfe004 	addi	r2,r2,-128
  80329c:	10000c1e 	bne	r2,zero,8032d0 <logic+0x1ed4>
  8032a0:	e0bffc17 	ldw	r2,-16(fp)
  8032a4:	10802443 	ldbu	r2,145(r2)
  8032a8:	10803fcc 	andi	r2,r2,255
  8032ac:	1080201c 	xori	r2,r2,128
  8032b0:	10bfe004 	addi	r2,r2,-128
  8032b4:	10000826 	beq	r2,zero,8032d8 <logic+0x1edc>
  8032b8:	e0bffc17 	ldw	r2,-16(fp)
  8032bc:	108035c3 	ldbu	r2,215(r2)
  8032c0:	10803fcc 	andi	r2,r2,255
  8032c4:	1080201c 	xori	r2,r2,128
  8032c8:	10bfe004 	addi	r2,r2,-128
  8032cc:	10000226 	beq	r2,zero,8032d8 <logic+0x1edc>
  8032d0:	00800044 	movi	r2,1
  8032d4:	00000106 	br	8032dc <logic+0x1ee0>
  8032d8:	0005883a 	mov	r2,zero
  8032dc:	1007883a 	mov	r3,r2
  8032e0:	e0bffc17 	ldw	r2,-16(fp)
  8032e4:	10c024c5 	stb	r3,147(r2)
  d->_g46 = d->_pg16;
  8032e8:	e0bffc17 	ldw	r2,-16(fp)
  8032ec:	10c04443 	ldbu	r3,273(r2)
  8032f0:	e0bffc17 	ldw	r2,-16(fp)
  8032f4:	10c02745 	stb	r3,157(r2)
  d->_g40 = d->_pg11;
  8032f8:	e0bffc17 	ldw	r2,-16(fp)
  8032fc:	10c04483 	ldbu	r3,274(r2)
  803300:	e0bffc17 	ldw	r2,-16(fp)
  803304:	10c02605 	stb	r3,152(r2)
  d->_g43_e4 = !(d->_g46 || d->_g40);
  803308:	e0bffc17 	ldw	r2,-16(fp)
  80330c:	10802743 	ldbu	r2,157(r2)
  803310:	10803fcc 	andi	r2,r2,255
  803314:	1080201c 	xori	r2,r2,128
  803318:	10bfe004 	addi	r2,r2,-128
  80331c:	1000081e 	bne	r2,zero,803340 <logic+0x1f44>
  803320:	e0bffc17 	ldw	r2,-16(fp)
  803324:	10802603 	ldbu	r2,152(r2)
  803328:	10803fcc 	andi	r2,r2,255
  80332c:	1080201c 	xori	r2,r2,128
  803330:	10bfe004 	addi	r2,r2,-128
  803334:	1000021e 	bne	r2,zero,803340 <logic+0x1f44>
  803338:	00800044 	movi	r2,1
  80333c:	00000106 	br	803344 <logic+0x1f48>
  803340:	0005883a 	mov	r2,zero
  803344:	1007883a 	mov	r3,r2
  803348:	e0bffc17 	ldw	r2,-16(fp)
  80334c:	10c03e05 	stb	r3,248(r2)
  d->_g40 = d->_g40 || d->_g46;
  803350:	e0bffc17 	ldw	r2,-16(fp)
  803354:	10802603 	ldbu	r2,152(r2)
  803358:	10803fcc 	andi	r2,r2,255
  80335c:	1080201c 	xori	r2,r2,128
  803360:	10bfe004 	addi	r2,r2,-128
  803364:	1000061e 	bne	r2,zero,803380 <logic+0x1f84>
  803368:	e0bffc17 	ldw	r2,-16(fp)
  80336c:	10802743 	ldbu	r2,157(r2)
  803370:	10803fcc 	andi	r2,r2,255
  803374:	1080201c 	xori	r2,r2,128
  803378:	10bfe004 	addi	r2,r2,-128
  80337c:	10000226 	beq	r2,zero,803388 <logic+0x1f8c>
  803380:	00800044 	movi	r2,1
  803384:	00000106 	br	80338c <logic+0x1f90>
  803388:	0005883a 	mov	r2,zero
  80338c:	1007883a 	mov	r3,r2
  803390:	e0bffc17 	ldw	r2,-16(fp)
  803394:	10c02605 	stb	r3,152(r2)
  d->_cg41 = d->AVI_Clock < d->AVI;
  803398:	e0bffc17 	ldw	r2,-16(fp)
  80339c:	14001017 	ldw	r16,64(r2)
  8033a0:	14401117 	ldw	r17,68(r2)
  8033a4:	e0bffc17 	ldw	r2,-16(fp)
  8033a8:	10800017 	ldw	r2,0(r2)
  8033ac:	1009883a 	mov	r4,r2
  8033b0:	0806b080 	call	806b08 <__floatsidf>
  8033b4:	1009883a 	mov	r4,r2
  8033b8:	180b883a 	mov	r5,r3
  8033bc:	04800044 	movi	r18,1
  8033c0:	200d883a 	mov	r6,r4
  8033c4:	280f883a 	mov	r7,r5
  8033c8:	8009883a 	mov	r4,r16
  8033cc:	880b883a 	mov	r5,r17
  8033d0:	08061180 	call	806118 <__ledf2>
  8033d4:	10000116 	blt	r2,zero,8033dc <logic+0x1fe0>
  8033d8:	0025883a 	mov	r18,zero
  8033dc:	9007883a 	mov	r3,r18
  8033e0:	e0bffc17 	ldw	r2,-16(fp)
  8033e4:	10c03705 	stb	r3,220(r2)
  d->_g46 = d->_g40 && d->_cg41;
  8033e8:	e0bffc17 	ldw	r2,-16(fp)
  8033ec:	10802603 	ldbu	r2,152(r2)
  8033f0:	10803fcc 	andi	r2,r2,255
  8033f4:	1080201c 	xori	r2,r2,128
  8033f8:	10bfe004 	addi	r2,r2,-128
  8033fc:	10000826 	beq	r2,zero,803420 <logic+0x2024>
  803400:	e0bffc17 	ldw	r2,-16(fp)
  803404:	10803703 	ldbu	r2,220(r2)
  803408:	10803fcc 	andi	r2,r2,255
  80340c:	1080201c 	xori	r2,r2,128
  803410:	10bfe004 	addi	r2,r2,-128
  803414:	10000226 	beq	r2,zero,803420 <logic+0x2024>
  803418:	00800044 	movi	r2,1
  80341c:	00000106 	br	803424 <logic+0x2028>
  803420:	0005883a 	mov	r2,zero
  803424:	1007883a 	mov	r3,r2
  803428:	e0bffc17 	ldw	r2,-16(fp)
  80342c:	10c02745 	stb	r3,157(r2)
  if (d->_g46) {
  803430:	e0bffc17 	ldw	r2,-16(fp)
  803434:	10802743 	ldbu	r2,157(r2)
  803438:	10803fcc 	andi	r2,r2,255
  80343c:	1080201c 	xori	r2,r2,128
  803440:	10bfe004 	addi	r2,r2,-128
  803444:	10003426 	beq	r2,zero,803518 <logic+0x211c>
    d->sleepT = (d->sleepT < (d->AVI - d->AVI_Clock)) ? d->sleepT : (d->AVI - d->AVI_Clock);
  803448:	e0bffc17 	ldw	r2,-16(fp)
  80344c:	14001b17 	ldw	r16,108(r2)
  803450:	14401c17 	ldw	r17,112(r2)
  803454:	e0bffc17 	ldw	r2,-16(fp)
  803458:	10800017 	ldw	r2,0(r2)
  80345c:	1009883a 	mov	r4,r2
  803460:	0806b080 	call	806b08 <__floatsidf>
  803464:	1011883a 	mov	r8,r2
  803468:	1813883a 	mov	r9,r3
  80346c:	e13ffc17 	ldw	r4,-16(fp)
  803470:	20801017 	ldw	r2,64(r4)
  803474:	20c01117 	ldw	r3,68(r4)
  803478:	100d883a 	mov	r6,r2
  80347c:	180f883a 	mov	r7,r3
  803480:	4009883a 	mov	r4,r8
  803484:	480b883a 	mov	r5,r9
  803488:	080620c0 	call	80620c <__subdf3>
  80348c:	1009883a 	mov	r4,r2
  803490:	180b883a 	mov	r5,r3
  803494:	2005883a 	mov	r2,r4
  803498:	2807883a 	mov	r3,r5
  80349c:	100d883a 	mov	r6,r2
  8034a0:	180f883a 	mov	r7,r3
  8034a4:	8009883a 	mov	r4,r16
  8034a8:	880b883a 	mov	r5,r17
  8034ac:	08061180 	call	806118 <__ledf2>
  8034b0:	1000040e 	bge	r2,zero,8034c4 <logic+0x20c8>
  8034b4:	e13ffc17 	ldw	r4,-16(fp)
  8034b8:	20801b17 	ldw	r2,108(r4)
  8034bc:	20c01c17 	ldw	r3,112(r4)
  8034c0:	00001206 	br	80350c <logic+0x2110>
  8034c4:	e0bffc17 	ldw	r2,-16(fp)
  8034c8:	10800017 	ldw	r2,0(r2)
  8034cc:	1009883a 	mov	r4,r2
  8034d0:	0806b080 	call	806b08 <__floatsidf>
  8034d4:	1011883a 	mov	r8,r2
  8034d8:	1813883a 	mov	r9,r3
  8034dc:	e13ffc17 	ldw	r4,-16(fp)
  8034e0:	20801017 	ldw	r2,64(r4)
  8034e4:	20c01117 	ldw	r3,68(r4)
  8034e8:	100d883a 	mov	r6,r2
  8034ec:	180f883a 	mov	r7,r3
  8034f0:	4009883a 	mov	r4,r8
  8034f4:	480b883a 	mov	r5,r9
  8034f8:	080620c0 	call	80620c <__subdf3>
  8034fc:	1009883a 	mov	r4,r2
  803500:	180b883a 	mov	r5,r3
  803504:	2005883a 	mov	r2,r4
  803508:	2807883a 	mov	r3,r5
  80350c:	e13ffc17 	ldw	r4,-16(fp)
  803510:	20801b15 	stw	r2,108(r4)
  803514:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg42 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803518:	e0bffc17 	ldw	r2,-16(fp)
  80351c:	10801ec3 	ldbu	r2,123(r2)
  803520:	10803fcc 	andi	r2,r2,255
  803524:	1080201c 	xori	r2,r2,128
  803528:	10bfe004 	addi	r2,r2,-128
  80352c:	10000c1e 	bne	r2,zero,803560 <logic+0x2164>
  803530:	e0bffc17 	ldw	r2,-16(fp)
  803534:	10801f03 	ldbu	r2,124(r2)
  803538:	10803fcc 	andi	r2,r2,255
  80353c:	1080201c 	xori	r2,r2,128
  803540:	10bfe004 	addi	r2,r2,-128
  803544:	1000061e 	bne	r2,zero,803560 <logic+0x2164>
  803548:	e0bffc17 	ldw	r2,-16(fp)
  80354c:	10801f43 	ldbu	r2,125(r2)
  803550:	10803fcc 	andi	r2,r2,255
  803554:	1080201c 	xori	r2,r2,128
  803558:	10bfe004 	addi	r2,r2,-128
  80355c:	10000226 	beq	r2,zero,803568 <logic+0x216c>
  803560:	00800044 	movi	r2,1
  803564:	00000106 	br	80356c <logic+0x2170>
  803568:	0005883a 	mov	r2,zero
  80356c:	1007883a 	mov	r3,r2
  803570:	e0bffc17 	ldw	r2,-16(fp)
  803574:	10c036c5 	stb	r3,219(r2)
  d->_g41 = d->_g40 && !d->_cg41;
  803578:	e0bffc17 	ldw	r2,-16(fp)
  80357c:	10802603 	ldbu	r2,152(r2)
  803580:	10803fcc 	andi	r2,r2,255
  803584:	1080201c 	xori	r2,r2,128
  803588:	10bfe004 	addi	r2,r2,-128
  80358c:	10000826 	beq	r2,zero,8035b0 <logic+0x21b4>
  803590:	e0bffc17 	ldw	r2,-16(fp)
  803594:	10803703 	ldbu	r2,220(r2)
  803598:	10803fcc 	andi	r2,r2,255
  80359c:	1080201c 	xori	r2,r2,128
  8035a0:	10bfe004 	addi	r2,r2,-128
  8035a4:	1000021e 	bne	r2,zero,8035b0 <logic+0x21b4>
  8035a8:	00800044 	movi	r2,1
  8035ac:	00000106 	br	8035b4 <logic+0x21b8>
  8035b0:	0005883a 	mov	r2,zero
  8035b4:	1007883a 	mov	r3,r2
  8035b8:	e0bffc17 	ldw	r2,-16(fp)
  8035bc:	10c02645 	stb	r3,153(r2)
  d->_cg44 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8035c0:	e0bffc17 	ldw	r2,-16(fp)
  8035c4:	10801ec3 	ldbu	r2,123(r2)
  8035c8:	10803fcc 	andi	r2,r2,255
  8035cc:	1080201c 	xori	r2,r2,128
  8035d0:	10bfe004 	addi	r2,r2,-128
  8035d4:	10000c1e 	bne	r2,zero,803608 <logic+0x220c>
  8035d8:	e0bffc17 	ldw	r2,-16(fp)
  8035dc:	10801f03 	ldbu	r2,124(r2)
  8035e0:	10803fcc 	andi	r2,r2,255
  8035e4:	1080201c 	xori	r2,r2,128
  8035e8:	10bfe004 	addi	r2,r2,-128
  8035ec:	1000061e 	bne	r2,zero,803608 <logic+0x220c>
  8035f0:	e0bffc17 	ldw	r2,-16(fp)
  8035f4:	10801f43 	ldbu	r2,125(r2)
  8035f8:	10803fcc 	andi	r2,r2,255
  8035fc:	1080201c 	xori	r2,r2,128
  803600:	10bfe004 	addi	r2,r2,-128
  803604:	10000226 	beq	r2,zero,803610 <logic+0x2214>
  803608:	00800044 	movi	r2,1
  80360c:	00000106 	br	803614 <logic+0x2218>
  803610:	0005883a 	mov	r2,zero
  803614:	1007883a 	mov	r3,r2
  803618:	e0bffc17 	ldw	r2,-16(fp)
  80361c:	10c03745 	stb	r3,221(r2)
  d->_g43 = d->_g46 && d->_cg42 || d->_g41 && d->_cg44;
  803620:	e0bffc17 	ldw	r2,-16(fp)
  803624:	10802743 	ldbu	r2,157(r2)
  803628:	10803fcc 	andi	r2,r2,255
  80362c:	1080201c 	xori	r2,r2,128
  803630:	10bfe004 	addi	r2,r2,-128
  803634:	10000626 	beq	r2,zero,803650 <logic+0x2254>
  803638:	e0bffc17 	ldw	r2,-16(fp)
  80363c:	108036c3 	ldbu	r2,219(r2)
  803640:	10803fcc 	andi	r2,r2,255
  803644:	1080201c 	xori	r2,r2,128
  803648:	10bfe004 	addi	r2,r2,-128
  80364c:	10000c1e 	bne	r2,zero,803680 <logic+0x2284>
  803650:	e0bffc17 	ldw	r2,-16(fp)
  803654:	10802643 	ldbu	r2,153(r2)
  803658:	10803fcc 	andi	r2,r2,255
  80365c:	1080201c 	xori	r2,r2,128
  803660:	10bfe004 	addi	r2,r2,-128
  803664:	10000826 	beq	r2,zero,803688 <logic+0x228c>
  803668:	e0bffc17 	ldw	r2,-16(fp)
  80366c:	10803743 	ldbu	r2,221(r2)
  803670:	10803fcc 	andi	r2,r2,255
  803674:	1080201c 	xori	r2,r2,128
  803678:	10bfe004 	addi	r2,r2,-128
  80367c:	10000226 	beq	r2,zero,803688 <logic+0x228c>
  803680:	00800044 	movi	r2,1
  803684:	00000106 	br	80368c <logic+0x2290>
  803688:	0005883a 	mov	r2,zero
  80368c:	1007883a 	mov	r3,r2
  803690:	e0bffc17 	ldw	r2,-16(fp)
  803694:	10c026c5 	stb	r3,155(r2)
  d->_g50 = !d->_g50;
  803698:	e0bffc17 	ldw	r2,-16(fp)
  80369c:	108027c3 	ldbu	r2,159(r2)
  8036a0:	10803fcc 	andi	r2,r2,255
  8036a4:	1080201c 	xori	r2,r2,128
  8036a8:	10bfe004 	addi	r2,r2,-128
  8036ac:	1005003a 	cmpeq	r2,r2,zero
  8036b0:	1007883a 	mov	r3,r2
  8036b4:	e0bffc17 	ldw	r2,-16(fp)
  8036b8:	10c027c5 	stb	r3,159(r2)
  d->_g51 = d->_g51 || d->_g54 || d->_g56;
  8036bc:	e0bffc17 	ldw	r2,-16(fp)
  8036c0:	10802803 	ldbu	r2,160(r2)
  8036c4:	10803fcc 	andi	r2,r2,255
  8036c8:	1080201c 	xori	r2,r2,128
  8036cc:	10bfe004 	addi	r2,r2,-128
  8036d0:	10000c1e 	bne	r2,zero,803704 <logic+0x2308>
  8036d4:	e0bffc17 	ldw	r2,-16(fp)
  8036d8:	108028c3 	ldbu	r2,163(r2)
  8036dc:	10803fcc 	andi	r2,r2,255
  8036e0:	1080201c 	xori	r2,r2,128
  8036e4:	10bfe004 	addi	r2,r2,-128
  8036e8:	1000061e 	bne	r2,zero,803704 <logic+0x2308>
  8036ec:	e0bffc17 	ldw	r2,-16(fp)
  8036f0:	10802943 	ldbu	r2,165(r2)
  8036f4:	10803fcc 	andi	r2,r2,255
  8036f8:	1080201c 	xori	r2,r2,128
  8036fc:	10bfe004 	addi	r2,r2,-128
  803700:	10000226 	beq	r2,zero,80370c <logic+0x2310>
  803704:	00800044 	movi	r2,1
  803708:	00000106 	br	803710 <logic+0x2314>
  80370c:	0005883a 	mov	r2,zero
  803710:	1007883a 	mov	r3,r2
  803714:	e0bffc17 	ldw	r2,-16(fp)
  803718:	10c02805 	stb	r3,160(r2)
  d->_g56 = (d->_g135 || d->_g10) && (d->_g21_e2 || d->_g21) && (d->_g32_e3 || d->_g32) && (d->_g43_e4 || d->_g43) && (d->_g50 || d->_g51) && (d->_g10 || d->_g21 || d->_g32 || d->_g43 || d->_g51);
  80371c:	e0bffc17 	ldw	r2,-16(fp)
  803720:	10803143 	ldbu	r2,197(r2)
  803724:	10803fcc 	andi	r2,r2,255
  803728:	1080201c 	xori	r2,r2,128
  80372c:	10bfe004 	addi	r2,r2,-128
  803730:	1000061e 	bne	r2,zero,80374c <logic+0x2350>
  803734:	e0bffc17 	ldw	r2,-16(fp)
  803738:	108020c3 	ldbu	r2,131(r2)
  80373c:	10803fcc 	andi	r2,r2,255
  803740:	1080201c 	xori	r2,r2,128
  803744:	10bfe004 	addi	r2,r2,-128
  803748:	10005026 	beq	r2,zero,80388c <logic+0x2490>
  80374c:	e0bffc17 	ldw	r2,-16(fp)
  803750:	10803d83 	ldbu	r2,246(r2)
  803754:	10803fcc 	andi	r2,r2,255
  803758:	1080201c 	xori	r2,r2,128
  80375c:	10bfe004 	addi	r2,r2,-128
  803760:	1000061e 	bne	r2,zero,80377c <logic+0x2380>
  803764:	e0bffc17 	ldw	r2,-16(fp)
  803768:	108022c3 	ldbu	r2,139(r2)
  80376c:	10803fcc 	andi	r2,r2,255
  803770:	1080201c 	xori	r2,r2,128
  803774:	10bfe004 	addi	r2,r2,-128
  803778:	10004426 	beq	r2,zero,80388c <logic+0x2490>
  80377c:	e0bffc17 	ldw	r2,-16(fp)
  803780:	10803dc3 	ldbu	r2,247(r2)
  803784:	10803fcc 	andi	r2,r2,255
  803788:	1080201c 	xori	r2,r2,128
  80378c:	10bfe004 	addi	r2,r2,-128
  803790:	1000061e 	bne	r2,zero,8037ac <logic+0x23b0>
  803794:	e0bffc17 	ldw	r2,-16(fp)
  803798:	108024c3 	ldbu	r2,147(r2)
  80379c:	10803fcc 	andi	r2,r2,255
  8037a0:	1080201c 	xori	r2,r2,128
  8037a4:	10bfe004 	addi	r2,r2,-128
  8037a8:	10003826 	beq	r2,zero,80388c <logic+0x2490>
  8037ac:	e0bffc17 	ldw	r2,-16(fp)
  8037b0:	10803e03 	ldbu	r2,248(r2)
  8037b4:	10803fcc 	andi	r2,r2,255
  8037b8:	1080201c 	xori	r2,r2,128
  8037bc:	10bfe004 	addi	r2,r2,-128
  8037c0:	1000061e 	bne	r2,zero,8037dc <logic+0x23e0>
  8037c4:	e0bffc17 	ldw	r2,-16(fp)
  8037c8:	108026c3 	ldbu	r2,155(r2)
  8037cc:	10803fcc 	andi	r2,r2,255
  8037d0:	1080201c 	xori	r2,r2,128
  8037d4:	10bfe004 	addi	r2,r2,-128
  8037d8:	10002c26 	beq	r2,zero,80388c <logic+0x2490>
  8037dc:	e0bffc17 	ldw	r2,-16(fp)
  8037e0:	108027c3 	ldbu	r2,159(r2)
  8037e4:	10803fcc 	andi	r2,r2,255
  8037e8:	1080201c 	xori	r2,r2,128
  8037ec:	10bfe004 	addi	r2,r2,-128
  8037f0:	1000061e 	bne	r2,zero,80380c <logic+0x2410>
  8037f4:	e0bffc17 	ldw	r2,-16(fp)
  8037f8:	10802803 	ldbu	r2,160(r2)
  8037fc:	10803fcc 	andi	r2,r2,255
  803800:	1080201c 	xori	r2,r2,128
  803804:	10bfe004 	addi	r2,r2,-128
  803808:	10002026 	beq	r2,zero,80388c <logic+0x2490>
  80380c:	e0bffc17 	ldw	r2,-16(fp)
  803810:	108020c3 	ldbu	r2,131(r2)
  803814:	10803fcc 	andi	r2,r2,255
  803818:	1080201c 	xori	r2,r2,128
  80381c:	10bfe004 	addi	r2,r2,-128
  803820:	1000181e 	bne	r2,zero,803884 <logic+0x2488>
  803824:	e0bffc17 	ldw	r2,-16(fp)
  803828:	108022c3 	ldbu	r2,139(r2)
  80382c:	10803fcc 	andi	r2,r2,255
  803830:	1080201c 	xori	r2,r2,128
  803834:	10bfe004 	addi	r2,r2,-128
  803838:	1000121e 	bne	r2,zero,803884 <logic+0x2488>
  80383c:	e0bffc17 	ldw	r2,-16(fp)
  803840:	108024c3 	ldbu	r2,147(r2)
  803844:	10803fcc 	andi	r2,r2,255
  803848:	1080201c 	xori	r2,r2,128
  80384c:	10bfe004 	addi	r2,r2,-128
  803850:	10000c1e 	bne	r2,zero,803884 <logic+0x2488>
  803854:	e0bffc17 	ldw	r2,-16(fp)
  803858:	108026c3 	ldbu	r2,155(r2)
  80385c:	10803fcc 	andi	r2,r2,255
  803860:	1080201c 	xori	r2,r2,128
  803864:	10bfe004 	addi	r2,r2,-128
  803868:	1000061e 	bne	r2,zero,803884 <logic+0x2488>
  80386c:	e0bffc17 	ldw	r2,-16(fp)
  803870:	10802803 	ldbu	r2,160(r2)
  803874:	10803fcc 	andi	r2,r2,255
  803878:	1080201c 	xori	r2,r2,128
  80387c:	10bfe004 	addi	r2,r2,-128
  803880:	10000226 	beq	r2,zero,80388c <logic+0x2490>
  803884:	00800044 	movi	r2,1
  803888:	00000106 	br	803890 <logic+0x2494>
  80388c:	0005883a 	mov	r2,zero
  803890:	1007883a 	mov	r3,r2
  803894:	e0bffc17 	ldw	r2,-16(fp)
  803898:	10c02945 	stb	r3,165(r2)
  d->_cg57 = d->_Pacemaker_local__Atrig3;
  80389c:	e0bffc17 	ldw	r2,-16(fp)
  8038a0:	10c01ec3 	ldbu	r3,123(r2)
  8038a4:	e0bffc17 	ldw	r2,-16(fp)
  8038a8:	10c03885 	stb	r3,226(r2)
  d->_g54 = d->_g56 && !d->_cg57;
  8038ac:	e0bffc17 	ldw	r2,-16(fp)
  8038b0:	10802943 	ldbu	r2,165(r2)
  8038b4:	10803fcc 	andi	r2,r2,255
  8038b8:	1080201c 	xori	r2,r2,128
  8038bc:	10bfe004 	addi	r2,r2,-128
  8038c0:	10000826 	beq	r2,zero,8038e4 <logic+0x24e8>
  8038c4:	e0bffc17 	ldw	r2,-16(fp)
  8038c8:	10803883 	ldbu	r2,226(r2)
  8038cc:	10803fcc 	andi	r2,r2,255
  8038d0:	1080201c 	xori	r2,r2,128
  8038d4:	10bfe004 	addi	r2,r2,-128
  8038d8:	1000021e 	bne	r2,zero,8038e4 <logic+0x24e8>
  8038dc:	00800044 	movi	r2,1
  8038e0:	00000106 	br	8038e8 <logic+0x24ec>
  8038e4:	0005883a 	mov	r2,zero
  8038e8:	1007883a 	mov	r3,r2
  8038ec:	e0bffc17 	ldw	r2,-16(fp)
  8038f0:	10c028c5 	stb	r3,163(r2)
  d->_cg97 = d->_Pacemaker_local__Atrig4;
  8038f4:	e0bffc17 	ldw	r2,-16(fp)
  8038f8:	10c01f03 	ldbu	r3,124(r2)
  8038fc:	e0bffc17 	ldw	r2,-16(fp)
  803900:	10c03d05 	stb	r3,244(r2)
  d->_g10_e1 = d->_g54 && d->_cg97;
  803904:	e0bffc17 	ldw	r2,-16(fp)
  803908:	108028c3 	ldbu	r2,163(r2)
  80390c:	10803fcc 	andi	r2,r2,255
  803910:	1080201c 	xori	r2,r2,128
  803914:	10bfe004 	addi	r2,r2,-128
  803918:	10000826 	beq	r2,zero,80393c <logic+0x2540>
  80391c:	e0bffc17 	ldw	r2,-16(fp)
  803920:	10803d03 	ldbu	r2,244(r2)
  803924:	10803fcc 	andi	r2,r2,255
  803928:	1080201c 	xori	r2,r2,128
  80392c:	10bfe004 	addi	r2,r2,-128
  803930:	10000226 	beq	r2,zero,80393c <logic+0x2540>
  803934:	00800044 	movi	r2,1
  803938:	00000106 	br	803940 <logic+0x2544>
  80393c:	0005883a 	mov	r2,zero
  803940:	1007883a 	mov	r3,r2
  803944:	e0bffc17 	ldw	r2,-16(fp)
  803948:	10c03d45 	stb	r3,245(r2)
  if (d->_g10_e1) {
  80394c:	e0bffc17 	ldw	r2,-16(fp)
  803950:	10803d43 	ldbu	r2,245(r2)
  803954:	10803fcc 	andi	r2,r2,255
  803958:	1080201c 	xori	r2,r2,128
  80395c:	10bfe004 	addi	r2,r2,-128
  803960:	10000526 	beq	r2,zero,803978 <logic+0x257c>
    d->_taken_transitions[5] += 1;
  803964:	e0bffc17 	ldw	r2,-16(fp)
  803968:	10801717 	ldw	r2,92(r2)
  80396c:	10c00044 	addi	r3,r2,1
  803970:	e0bffc17 	ldw	r2,-16(fp)
  803974:	10c01715 	stw	r3,92(r2)
  }
  d->_g52 = d->_GO || d->_g86 || d->_g67 || d->_g10_e1;
  803978:	e0bffc17 	ldw	r2,-16(fp)
  80397c:	10803183 	ldbu	r2,198(r2)
  803980:	10803fcc 	andi	r2,r2,255
  803984:	1080201c 	xori	r2,r2,128
  803988:	10bfe004 	addi	r2,r2,-128
  80398c:	1000121e 	bne	r2,zero,8039d8 <logic+0x25dc>
  803990:	e0bffc17 	ldw	r2,-16(fp)
  803994:	10802cc3 	ldbu	r2,179(r2)
  803998:	10803fcc 	andi	r2,r2,255
  80399c:	1080201c 	xori	r2,r2,128
  8039a0:	10bfe004 	addi	r2,r2,-128
  8039a4:	10000c1e 	bne	r2,zero,8039d8 <logic+0x25dc>
  8039a8:	e0bffc17 	ldw	r2,-16(fp)
  8039ac:	10802b03 	ldbu	r2,172(r2)
  8039b0:	10803fcc 	andi	r2,r2,255
  8039b4:	1080201c 	xori	r2,r2,128
  8039b8:	10bfe004 	addi	r2,r2,-128
  8039bc:	1000061e 	bne	r2,zero,8039d8 <logic+0x25dc>
  8039c0:	e0bffc17 	ldw	r2,-16(fp)
  8039c4:	10803d43 	ldbu	r2,245(r2)
  8039c8:	10803fcc 	andi	r2,r2,255
  8039cc:	1080201c 	xori	r2,r2,128
  8039d0:	10bfe004 	addi	r2,r2,-128
  8039d4:	10000226 	beq	r2,zero,8039e0 <logic+0x25e4>
  8039d8:	00800044 	movi	r2,1
  8039dc:	00000106 	br	8039e4 <logic+0x25e8>
  8039e0:	0005883a 	mov	r2,zero
  8039e4:	1007883a 	mov	r3,r2
  8039e8:	e0bffc17 	ldw	r2,-16(fp)
  8039ec:	10c02845 	stb	r3,161(r2)
  if (d->_g52) {
  8039f0:	e0bffc17 	ldw	r2,-16(fp)
  8039f4:	10802843 	ldbu	r2,161(r2)
  8039f8:	10803fcc 	andi	r2,r2,255
  8039fc:	1080201c 	xori	r2,r2,128
  803a00:	10bfe004 	addi	r2,r2,-128
  803a04:	10000926 	beq	r2,zero,803a2c <logic+0x2630>
    d->AVI_Clock = 0;
  803a08:	e0bffc17 	ldw	r2,-16(fp)
  803a0c:	10001015 	stw	zero,64(r2)
  803a10:	10001115 	stw	zero,68(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  803a14:	e0bffc17 	ldw	r2,-16(fp)
  803a18:	10001ec5 	stb	zero,123(r2)
    d->_Pacemaker_local__Atrig4 = 0;
  803a1c:	e0bffc17 	ldw	r2,-16(fp)
  803a20:	10001f05 	stb	zero,124(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  803a24:	e0bffc17 	ldw	r2,-16(fp)
  803a28:	10001f45 	stb	zero,125(r2)
  }
  d->_cg4 = d->VRP_Clock < d->VRP;
  803a2c:	e0bffc17 	ldw	r2,-16(fp)
  803a30:	14000617 	ldw	r16,24(r2)
  803a34:	14400717 	ldw	r17,28(r2)
  803a38:	e0bffc17 	ldw	r2,-16(fp)
  803a3c:	10800317 	ldw	r2,12(r2)
  803a40:	1009883a 	mov	r4,r2
  803a44:	0806b080 	call	806b08 <__floatsidf>
  803a48:	1009883a 	mov	r4,r2
  803a4c:	180b883a 	mov	r5,r3
  803a50:	04800044 	movi	r18,1
  803a54:	200d883a 	mov	r6,r4
  803a58:	280f883a 	mov	r7,r5
  803a5c:	8009883a 	mov	r4,r16
  803a60:	880b883a 	mov	r5,r17
  803a64:	08061180 	call	806118 <__ledf2>
  803a68:	10000116 	blt	r2,zero,803a70 <logic+0x2674>
  803a6c:	0025883a 	mov	r18,zero
  803a70:	9007883a 	mov	r3,r18
  803a74:	e0bffc17 	ldw	r2,-16(fp)
  803a78:	10c031c5 	stb	r3,199(r2)
  d->_g21 = d->_g52 && d->_cg4;
  803a7c:	e0bffc17 	ldw	r2,-16(fp)
  803a80:	10802843 	ldbu	r2,161(r2)
  803a84:	10803fcc 	andi	r2,r2,255
  803a88:	1080201c 	xori	r2,r2,128
  803a8c:	10bfe004 	addi	r2,r2,-128
  803a90:	10000826 	beq	r2,zero,803ab4 <logic+0x26b8>
  803a94:	e0bffc17 	ldw	r2,-16(fp)
  803a98:	108031c3 	ldbu	r2,199(r2)
  803a9c:	10803fcc 	andi	r2,r2,255
  803aa0:	1080201c 	xori	r2,r2,128
  803aa4:	10bfe004 	addi	r2,r2,-128
  803aa8:	10000226 	beq	r2,zero,803ab4 <logic+0x26b8>
  803aac:	00800044 	movi	r2,1
  803ab0:	00000106 	br	803ab8 <logic+0x26bc>
  803ab4:	0005883a 	mov	r2,zero
  803ab8:	1007883a 	mov	r3,r2
  803abc:	e0bffc17 	ldw	r2,-16(fp)
  803ac0:	10c022c5 	stb	r3,139(r2)
  if (d->_g21) {
  803ac4:	e0bffc17 	ldw	r2,-16(fp)
  803ac8:	108022c3 	ldbu	r2,139(r2)
  803acc:	10803fcc 	andi	r2,r2,255
  803ad0:	1080201c 	xori	r2,r2,128
  803ad4:	10bfe004 	addi	r2,r2,-128
  803ad8:	10003426 	beq	r2,zero,803bac <logic+0x27b0>
    d->sleepT = (d->sleepT < (d->VRP - d->VRP_Clock)) ? d->sleepT : (d->VRP - d->VRP_Clock);
  803adc:	e0bffc17 	ldw	r2,-16(fp)
  803ae0:	14001b17 	ldw	r16,108(r2)
  803ae4:	14401c17 	ldw	r17,112(r2)
  803ae8:	e0bffc17 	ldw	r2,-16(fp)
  803aec:	10800317 	ldw	r2,12(r2)
  803af0:	1009883a 	mov	r4,r2
  803af4:	0806b080 	call	806b08 <__floatsidf>
  803af8:	1011883a 	mov	r8,r2
  803afc:	1813883a 	mov	r9,r3
  803b00:	e13ffc17 	ldw	r4,-16(fp)
  803b04:	20800617 	ldw	r2,24(r4)
  803b08:	20c00717 	ldw	r3,28(r4)
  803b0c:	100d883a 	mov	r6,r2
  803b10:	180f883a 	mov	r7,r3
  803b14:	4009883a 	mov	r4,r8
  803b18:	480b883a 	mov	r5,r9
  803b1c:	080620c0 	call	80620c <__subdf3>
  803b20:	1009883a 	mov	r4,r2
  803b24:	180b883a 	mov	r5,r3
  803b28:	2005883a 	mov	r2,r4
  803b2c:	2807883a 	mov	r3,r5
  803b30:	100d883a 	mov	r6,r2
  803b34:	180f883a 	mov	r7,r3
  803b38:	8009883a 	mov	r4,r16
  803b3c:	880b883a 	mov	r5,r17
  803b40:	08061180 	call	806118 <__ledf2>
  803b44:	1000040e 	bge	r2,zero,803b58 <logic+0x275c>
  803b48:	e13ffc17 	ldw	r4,-16(fp)
  803b4c:	20801b17 	ldw	r2,108(r4)
  803b50:	20c01c17 	ldw	r3,112(r4)
  803b54:	00001206 	br	803ba0 <logic+0x27a4>
  803b58:	e0bffc17 	ldw	r2,-16(fp)
  803b5c:	10800317 	ldw	r2,12(r2)
  803b60:	1009883a 	mov	r4,r2
  803b64:	0806b080 	call	806b08 <__floatsidf>
  803b68:	1011883a 	mov	r8,r2
  803b6c:	1813883a 	mov	r9,r3
  803b70:	e13ffc17 	ldw	r4,-16(fp)
  803b74:	20800617 	ldw	r2,24(r4)
  803b78:	20c00717 	ldw	r3,28(r4)
  803b7c:	100d883a 	mov	r6,r2
  803b80:	180f883a 	mov	r7,r3
  803b84:	4009883a 	mov	r4,r8
  803b88:	480b883a 	mov	r5,r9
  803b8c:	080620c0 	call	80620c <__subdf3>
  803b90:	1009883a 	mov	r4,r2
  803b94:	180b883a 	mov	r5,r3
  803b98:	2005883a 	mov	r2,r4
  803b9c:	2807883a 	mov	r3,r5
  803ba0:	e13ffc17 	ldw	r4,-16(fp)
  803ba4:	20801b15 	stw	r2,108(r4)
  803ba8:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg5 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803bac:	e0bffc17 	ldw	r2,-16(fp)
  803bb0:	10801ec3 	ldbu	r2,123(r2)
  803bb4:	10803fcc 	andi	r2,r2,255
  803bb8:	1080201c 	xori	r2,r2,128
  803bbc:	10bfe004 	addi	r2,r2,-128
  803bc0:	10000c1e 	bne	r2,zero,803bf4 <logic+0x27f8>
  803bc4:	e0bffc17 	ldw	r2,-16(fp)
  803bc8:	10801f03 	ldbu	r2,124(r2)
  803bcc:	10803fcc 	andi	r2,r2,255
  803bd0:	1080201c 	xori	r2,r2,128
  803bd4:	10bfe004 	addi	r2,r2,-128
  803bd8:	1000061e 	bne	r2,zero,803bf4 <logic+0x27f8>
  803bdc:	e0bffc17 	ldw	r2,-16(fp)
  803be0:	10801f43 	ldbu	r2,125(r2)
  803be4:	10803fcc 	andi	r2,r2,255
  803be8:	1080201c 	xori	r2,r2,128
  803bec:	10bfe004 	addi	r2,r2,-128
  803bf0:	10000226 	beq	r2,zero,803bfc <logic+0x2800>
  803bf4:	00800044 	movi	r2,1
  803bf8:	00000106 	br	803c00 <logic+0x2804>
  803bfc:	0005883a 	mov	r2,zero
  803c00:	1007883a 	mov	r3,r2
  803c04:	e0bffc17 	ldw	r2,-16(fp)
  803c08:	10c03205 	stb	r3,200(r2)
  d->_g10 = d->_g21 && !d->_cg5 || d->_g7 && !d->_cg9;
  803c0c:	e0bffc17 	ldw	r2,-16(fp)
  803c10:	108022c3 	ldbu	r2,139(r2)
  803c14:	10803fcc 	andi	r2,r2,255
  803c18:	1080201c 	xori	r2,r2,128
  803c1c:	10bfe004 	addi	r2,r2,-128
  803c20:	10000626 	beq	r2,zero,803c3c <logic+0x2840>
  803c24:	e0bffc17 	ldw	r2,-16(fp)
  803c28:	10803203 	ldbu	r2,200(r2)
  803c2c:	10803fcc 	andi	r2,r2,255
  803c30:	1080201c 	xori	r2,r2,128
  803c34:	10bfe004 	addi	r2,r2,-128
  803c38:	10000c26 	beq	r2,zero,803c6c <logic+0x2870>
  803c3c:	e0bffc17 	ldw	r2,-16(fp)
  803c40:	10802003 	ldbu	r2,128(r2)
  803c44:	10803fcc 	andi	r2,r2,255
  803c48:	1080201c 	xori	r2,r2,128
  803c4c:	10bfe004 	addi	r2,r2,-128
  803c50:	10000826 	beq	r2,zero,803c74 <logic+0x2878>
  803c54:	e0bffc17 	ldw	r2,-16(fp)
  803c58:	10803243 	ldbu	r2,201(r2)
  803c5c:	10803fcc 	andi	r2,r2,255
  803c60:	1080201c 	xori	r2,r2,128
  803c64:	10bfe004 	addi	r2,r2,-128
  803c68:	1000021e 	bne	r2,zero,803c74 <logic+0x2878>
  803c6c:	00800044 	movi	r2,1
  803c70:	00000106 	br	803c78 <logic+0x287c>
  803c74:	0005883a 	mov	r2,zero
  803c78:	1007883a 	mov	r3,r2
  803c7c:	e0bffc17 	ldw	r2,-16(fp)
  803c80:	10c020c5 	stb	r3,131(r2)
  d->_g43 = d->_g52 && !d->_cg4;
  803c84:	e0bffc17 	ldw	r2,-16(fp)
  803c88:	10802843 	ldbu	r2,161(r2)
  803c8c:	10803fcc 	andi	r2,r2,255
  803c90:	1080201c 	xori	r2,r2,128
  803c94:	10bfe004 	addi	r2,r2,-128
  803c98:	10000826 	beq	r2,zero,803cbc <logic+0x28c0>
  803c9c:	e0bffc17 	ldw	r2,-16(fp)
  803ca0:	108031c3 	ldbu	r2,199(r2)
  803ca4:	10803fcc 	andi	r2,r2,255
  803ca8:	1080201c 	xori	r2,r2,128
  803cac:	10bfe004 	addi	r2,r2,-128
  803cb0:	1000021e 	bne	r2,zero,803cbc <logic+0x28c0>
  803cb4:	00800044 	movi	r2,1
  803cb8:	00000106 	br	803cc0 <logic+0x28c4>
  803cbc:	0005883a 	mov	r2,zero
  803cc0:	1007883a 	mov	r3,r2
  803cc4:	e0bffc17 	ldw	r2,-16(fp)
  803cc8:	10c026c5 	stb	r3,155(r2)
  d->_cg14 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803ccc:	e0bffc17 	ldw	r2,-16(fp)
  803cd0:	10801ec3 	ldbu	r2,123(r2)
  803cd4:	10803fcc 	andi	r2,r2,255
  803cd8:	1080201c 	xori	r2,r2,128
  803cdc:	10bfe004 	addi	r2,r2,-128
  803ce0:	10000c1e 	bne	r2,zero,803d14 <logic+0x2918>
  803ce4:	e0bffc17 	ldw	r2,-16(fp)
  803ce8:	10801f03 	ldbu	r2,124(r2)
  803cec:	10803fcc 	andi	r2,r2,255
  803cf0:	1080201c 	xori	r2,r2,128
  803cf4:	10bfe004 	addi	r2,r2,-128
  803cf8:	1000061e 	bne	r2,zero,803d14 <logic+0x2918>
  803cfc:	e0bffc17 	ldw	r2,-16(fp)
  803d00:	10801f43 	ldbu	r2,125(r2)
  803d04:	10803fcc 	andi	r2,r2,255
  803d08:	1080201c 	xori	r2,r2,128
  803d0c:	10bfe004 	addi	r2,r2,-128
  803d10:	10000226 	beq	r2,zero,803d1c <logic+0x2920>
  803d14:	00800044 	movi	r2,1
  803d18:	00000106 	br	803d20 <logic+0x2924>
  803d1c:	0005883a 	mov	r2,zero
  803d20:	1007883a 	mov	r3,r2
  803d24:	e0bffc17 	ldw	r2,-16(fp)
  803d28:	10c03305 	stb	r3,204(r2)
  d->_g32 = d->_g8 && !d->_cg11 || d->_g43 && !d->_cg14;
  803d2c:	e0bffc17 	ldw	r2,-16(fp)
  803d30:	10802043 	ldbu	r2,129(r2)
  803d34:	10803fcc 	andi	r2,r2,255
  803d38:	1080201c 	xori	r2,r2,128
  803d3c:	10bfe004 	addi	r2,r2,-128
  803d40:	10000626 	beq	r2,zero,803d5c <logic+0x2960>
  803d44:	e0bffc17 	ldw	r2,-16(fp)
  803d48:	108032c3 	ldbu	r2,203(r2)
  803d4c:	10803fcc 	andi	r2,r2,255
  803d50:	1080201c 	xori	r2,r2,128
  803d54:	10bfe004 	addi	r2,r2,-128
  803d58:	10000c26 	beq	r2,zero,803d8c <logic+0x2990>
  803d5c:	e0bffc17 	ldw	r2,-16(fp)
  803d60:	108026c3 	ldbu	r2,155(r2)
  803d64:	10803fcc 	andi	r2,r2,255
  803d68:	1080201c 	xori	r2,r2,128
  803d6c:	10bfe004 	addi	r2,r2,-128
  803d70:	10000826 	beq	r2,zero,803d94 <logic+0x2998>
  803d74:	e0bffc17 	ldw	r2,-16(fp)
  803d78:	10803303 	ldbu	r2,204(r2)
  803d7c:	10803fcc 	andi	r2,r2,255
  803d80:	1080201c 	xori	r2,r2,128
  803d84:	10bfe004 	addi	r2,r2,-128
  803d88:	1000021e 	bne	r2,zero,803d94 <logic+0x2998>
  803d8c:	00800044 	movi	r2,1
  803d90:	00000106 	br	803d98 <logic+0x299c>
  803d94:	0005883a 	mov	r2,zero
  803d98:	1007883a 	mov	r3,r2
  803d9c:	e0bffc17 	ldw	r2,-16(fp)
  803da0:	10c024c5 	stb	r3,147(r2)
  d->_cg15 = d->LRI_Clock < d->LRI;
  803da4:	e0bffc17 	ldw	r2,-16(fp)
  803da8:	14000a17 	ldw	r16,40(r2)
  803dac:	14400b17 	ldw	r17,44(r2)
  803db0:	e0bffc17 	ldw	r2,-16(fp)
  803db4:	10800417 	ldw	r2,16(r2)
  803db8:	1009883a 	mov	r4,r2
  803dbc:	0806b080 	call	806b08 <__floatsidf>
  803dc0:	1009883a 	mov	r4,r2
  803dc4:	180b883a 	mov	r5,r3
  803dc8:	04800044 	movi	r18,1
  803dcc:	200d883a 	mov	r6,r4
  803dd0:	280f883a 	mov	r7,r5
  803dd4:	8009883a 	mov	r4,r16
  803dd8:	880b883a 	mov	r5,r17
  803ddc:	08061180 	call	806118 <__ledf2>
  803de0:	10000116 	blt	r2,zero,803de8 <logic+0x29ec>
  803de4:	0025883a 	mov	r18,zero
  803de8:	9007883a 	mov	r3,r18
  803dec:	e0bffc17 	ldw	r2,-16(fp)
  803df0:	10c03345 	stb	r3,205(r2)
  d->_g52_e5 = d->_g52 && d->_cg15;
  803df4:	e0bffc17 	ldw	r2,-16(fp)
  803df8:	10802843 	ldbu	r2,161(r2)
  803dfc:	10803fcc 	andi	r2,r2,255
  803e00:	1080201c 	xori	r2,r2,128
  803e04:	10bfe004 	addi	r2,r2,-128
  803e08:	10000826 	beq	r2,zero,803e2c <logic+0x2a30>
  803e0c:	e0bffc17 	ldw	r2,-16(fp)
  803e10:	10803343 	ldbu	r2,205(r2)
  803e14:	10803fcc 	andi	r2,r2,255
  803e18:	1080201c 	xori	r2,r2,128
  803e1c:	10bfe004 	addi	r2,r2,-128
  803e20:	10000226 	beq	r2,zero,803e2c <logic+0x2a30>
  803e24:	00800044 	movi	r2,1
  803e28:	00000106 	br	803e30 <logic+0x2a34>
  803e2c:	0005883a 	mov	r2,zero
  803e30:	1007883a 	mov	r3,r2
  803e34:	e0bffc17 	ldw	r2,-16(fp)
  803e38:	10c03e45 	stb	r3,249(r2)
  if (d->_g52_e5) {
  803e3c:	e0bffc17 	ldw	r2,-16(fp)
  803e40:	10803e43 	ldbu	r2,249(r2)
  803e44:	10803fcc 	andi	r2,r2,255
  803e48:	1080201c 	xori	r2,r2,128
  803e4c:	10bfe004 	addi	r2,r2,-128
  803e50:	10003426 	beq	r2,zero,803f24 <logic+0x2b28>
    d->sleepT = (d->sleepT < (d->LRI - d->LRI_Clock)) ? d->sleepT : (d->LRI - d->LRI_Clock);
  803e54:	e0bffc17 	ldw	r2,-16(fp)
  803e58:	14001b17 	ldw	r16,108(r2)
  803e5c:	14401c17 	ldw	r17,112(r2)
  803e60:	e0bffc17 	ldw	r2,-16(fp)
  803e64:	10800417 	ldw	r2,16(r2)
  803e68:	1009883a 	mov	r4,r2
  803e6c:	0806b080 	call	806b08 <__floatsidf>
  803e70:	1011883a 	mov	r8,r2
  803e74:	1813883a 	mov	r9,r3
  803e78:	e13ffc17 	ldw	r4,-16(fp)
  803e7c:	20800a17 	ldw	r2,40(r4)
  803e80:	20c00b17 	ldw	r3,44(r4)
  803e84:	100d883a 	mov	r6,r2
  803e88:	180f883a 	mov	r7,r3
  803e8c:	4009883a 	mov	r4,r8
  803e90:	480b883a 	mov	r5,r9
  803e94:	080620c0 	call	80620c <__subdf3>
  803e98:	1009883a 	mov	r4,r2
  803e9c:	180b883a 	mov	r5,r3
  803ea0:	2005883a 	mov	r2,r4
  803ea4:	2807883a 	mov	r3,r5
  803ea8:	100d883a 	mov	r6,r2
  803eac:	180f883a 	mov	r7,r3
  803eb0:	8009883a 	mov	r4,r16
  803eb4:	880b883a 	mov	r5,r17
  803eb8:	08061180 	call	806118 <__ledf2>
  803ebc:	1000040e 	bge	r2,zero,803ed0 <logic+0x2ad4>
  803ec0:	e13ffc17 	ldw	r4,-16(fp)
  803ec4:	20801b17 	ldw	r2,108(r4)
  803ec8:	20c01c17 	ldw	r3,112(r4)
  803ecc:	00001206 	br	803f18 <logic+0x2b1c>
  803ed0:	e0bffc17 	ldw	r2,-16(fp)
  803ed4:	10800417 	ldw	r2,16(r2)
  803ed8:	1009883a 	mov	r4,r2
  803edc:	0806b080 	call	806b08 <__floatsidf>
  803ee0:	1011883a 	mov	r8,r2
  803ee4:	1813883a 	mov	r9,r3
  803ee8:	e13ffc17 	ldw	r4,-16(fp)
  803eec:	20800a17 	ldw	r2,40(r4)
  803ef0:	20c00b17 	ldw	r3,44(r4)
  803ef4:	100d883a 	mov	r6,r2
  803ef8:	180f883a 	mov	r7,r3
  803efc:	4009883a 	mov	r4,r8
  803f00:	480b883a 	mov	r5,r9
  803f04:	080620c0 	call	80620c <__subdf3>
  803f08:	1009883a 	mov	r4,r2
  803f0c:	180b883a 	mov	r5,r3
  803f10:	2005883a 	mov	r2,r4
  803f14:	2807883a 	mov	r3,r5
  803f18:	e13ffc17 	ldw	r4,-16(fp)
  803f1c:	20801b15 	stw	r2,108(r4)
  803f20:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg16 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803f24:	e0bffc17 	ldw	r2,-16(fp)
  803f28:	10801ec3 	ldbu	r2,123(r2)
  803f2c:	10803fcc 	andi	r2,r2,255
  803f30:	1080201c 	xori	r2,r2,128
  803f34:	10bfe004 	addi	r2,r2,-128
  803f38:	10000c1e 	bne	r2,zero,803f6c <logic+0x2b70>
  803f3c:	e0bffc17 	ldw	r2,-16(fp)
  803f40:	10801f03 	ldbu	r2,124(r2)
  803f44:	10803fcc 	andi	r2,r2,255
  803f48:	1080201c 	xori	r2,r2,128
  803f4c:	10bfe004 	addi	r2,r2,-128
  803f50:	1000061e 	bne	r2,zero,803f6c <logic+0x2b70>
  803f54:	e0bffc17 	ldw	r2,-16(fp)
  803f58:	10801f43 	ldbu	r2,125(r2)
  803f5c:	10803fcc 	andi	r2,r2,255
  803f60:	1080201c 	xori	r2,r2,128
  803f64:	10bfe004 	addi	r2,r2,-128
  803f68:	10000226 	beq	r2,zero,803f74 <logic+0x2b78>
  803f6c:	00800044 	movi	r2,1
  803f70:	00000106 	br	803f78 <logic+0x2b7c>
  803f74:	0005883a 	mov	r2,zero
  803f78:	1007883a 	mov	r3,r2
  803f7c:	e0bffc17 	ldw	r2,-16(fp)
  803f80:	10c03385 	stb	r3,206(r2)
  d->_g21_e2 = d->_g52_e5 && !d->_cg16 || d->_g18 && !d->_cg20;
  803f84:	e0bffc17 	ldw	r2,-16(fp)
  803f88:	10803e43 	ldbu	r2,249(r2)
  803f8c:	10803fcc 	andi	r2,r2,255
  803f90:	1080201c 	xori	r2,r2,128
  803f94:	10bfe004 	addi	r2,r2,-128
  803f98:	10000626 	beq	r2,zero,803fb4 <logic+0x2bb8>
  803f9c:	e0bffc17 	ldw	r2,-16(fp)
  803fa0:	10803383 	ldbu	r2,206(r2)
  803fa4:	10803fcc 	andi	r2,r2,255
  803fa8:	1080201c 	xori	r2,r2,128
  803fac:	10bfe004 	addi	r2,r2,-128
  803fb0:	10000c26 	beq	r2,zero,803fe4 <logic+0x2be8>
  803fb4:	e0bffc17 	ldw	r2,-16(fp)
  803fb8:	10802203 	ldbu	r2,136(r2)
  803fbc:	10803fcc 	andi	r2,r2,255
  803fc0:	1080201c 	xori	r2,r2,128
  803fc4:	10bfe004 	addi	r2,r2,-128
  803fc8:	10000826 	beq	r2,zero,803fec <logic+0x2bf0>
  803fcc:	e0bffc17 	ldw	r2,-16(fp)
  803fd0:	108033c3 	ldbu	r2,207(r2)
  803fd4:	10803fcc 	andi	r2,r2,255
  803fd8:	1080201c 	xori	r2,r2,128
  803fdc:	10bfe004 	addi	r2,r2,-128
  803fe0:	1000021e 	bne	r2,zero,803fec <logic+0x2bf0>
  803fe4:	00800044 	movi	r2,1
  803fe8:	00000106 	br	803ff0 <logic+0x2bf4>
  803fec:	0005883a 	mov	r2,zero
  803ff0:	1007883a 	mov	r3,r2
  803ff4:	e0bffc17 	ldw	r2,-16(fp)
  803ff8:	10c03d85 	stb	r3,246(r2)
  d->_g43_e4 = d->_g52 && !d->_cg15;
  803ffc:	e0bffc17 	ldw	r2,-16(fp)
  804000:	10802843 	ldbu	r2,161(r2)
  804004:	10803fcc 	andi	r2,r2,255
  804008:	1080201c 	xori	r2,r2,128
  80400c:	10bfe004 	addi	r2,r2,-128
  804010:	10000826 	beq	r2,zero,804034 <logic+0x2c38>
  804014:	e0bffc17 	ldw	r2,-16(fp)
  804018:	10803343 	ldbu	r2,205(r2)
  80401c:	10803fcc 	andi	r2,r2,255
  804020:	1080201c 	xori	r2,r2,128
  804024:	10bfe004 	addi	r2,r2,-128
  804028:	1000021e 	bne	r2,zero,804034 <logic+0x2c38>
  80402c:	00800044 	movi	r2,1
  804030:	00000106 	br	804038 <logic+0x2c3c>
  804034:	0005883a 	mov	r2,zero
  804038:	1007883a 	mov	r3,r2
  80403c:	e0bffc17 	ldw	r2,-16(fp)
  804040:	10c03e05 	stb	r3,248(r2)
  d->_cg25 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804044:	e0bffc17 	ldw	r2,-16(fp)
  804048:	10801ec3 	ldbu	r2,123(r2)
  80404c:	10803fcc 	andi	r2,r2,255
  804050:	1080201c 	xori	r2,r2,128
  804054:	10bfe004 	addi	r2,r2,-128
  804058:	10000c1e 	bne	r2,zero,80408c <logic+0x2c90>
  80405c:	e0bffc17 	ldw	r2,-16(fp)
  804060:	10801f03 	ldbu	r2,124(r2)
  804064:	10803fcc 	andi	r2,r2,255
  804068:	1080201c 	xori	r2,r2,128
  80406c:	10bfe004 	addi	r2,r2,-128
  804070:	1000061e 	bne	r2,zero,80408c <logic+0x2c90>
  804074:	e0bffc17 	ldw	r2,-16(fp)
  804078:	10801f43 	ldbu	r2,125(r2)
  80407c:	10803fcc 	andi	r2,r2,255
  804080:	1080201c 	xori	r2,r2,128
  804084:	10bfe004 	addi	r2,r2,-128
  804088:	10000226 	beq	r2,zero,804094 <logic+0x2c98>
  80408c:	00800044 	movi	r2,1
  804090:	00000106 	br	804098 <logic+0x2c9c>
  804094:	0005883a 	mov	r2,zero
  804098:	1007883a 	mov	r3,r2
  80409c:	e0bffc17 	ldw	r2,-16(fp)
  8040a0:	10c03485 	stb	r3,210(r2)
  d->_g32_e3 = d->_g19 && !d->_cg22 || d->_g43_e4 && !d->_cg25;
  8040a4:	e0bffc17 	ldw	r2,-16(fp)
  8040a8:	10802243 	ldbu	r2,137(r2)
  8040ac:	10803fcc 	andi	r2,r2,255
  8040b0:	1080201c 	xori	r2,r2,128
  8040b4:	10bfe004 	addi	r2,r2,-128
  8040b8:	10000626 	beq	r2,zero,8040d4 <logic+0x2cd8>
  8040bc:	e0bffc17 	ldw	r2,-16(fp)
  8040c0:	10803443 	ldbu	r2,209(r2)
  8040c4:	10803fcc 	andi	r2,r2,255
  8040c8:	1080201c 	xori	r2,r2,128
  8040cc:	10bfe004 	addi	r2,r2,-128
  8040d0:	10000c26 	beq	r2,zero,804104 <logic+0x2d08>
  8040d4:	e0bffc17 	ldw	r2,-16(fp)
  8040d8:	10803e03 	ldbu	r2,248(r2)
  8040dc:	10803fcc 	andi	r2,r2,255
  8040e0:	1080201c 	xori	r2,r2,128
  8040e4:	10bfe004 	addi	r2,r2,-128
  8040e8:	10000826 	beq	r2,zero,80410c <logic+0x2d10>
  8040ec:	e0bffc17 	ldw	r2,-16(fp)
  8040f0:	10803483 	ldbu	r2,210(r2)
  8040f4:	10803fcc 	andi	r2,r2,255
  8040f8:	1080201c 	xori	r2,r2,128
  8040fc:	10bfe004 	addi	r2,r2,-128
  804100:	1000021e 	bne	r2,zero,80410c <logic+0x2d10>
  804104:	00800044 	movi	r2,1
  804108:	00000106 	br	804110 <logic+0x2d14>
  80410c:	0005883a 	mov	r2,zero
  804110:	1007883a 	mov	r3,r2
  804114:	e0bffc17 	ldw	r2,-16(fp)
  804118:	10c03dc5 	stb	r3,247(r2)
  d->_cg26 = d->URI_Clock < d->URI;
  80411c:	e0bffc17 	ldw	r2,-16(fp)
  804120:	14000c17 	ldw	r16,48(r2)
  804124:	14400d17 	ldw	r17,52(r2)
  804128:	e0bffc17 	ldw	r2,-16(fp)
  80412c:	10800517 	ldw	r2,20(r2)
  804130:	1009883a 	mov	r4,r2
  804134:	0806b080 	call	806b08 <__floatsidf>
  804138:	1009883a 	mov	r4,r2
  80413c:	180b883a 	mov	r5,r3
  804140:	04800044 	movi	r18,1
  804144:	200d883a 	mov	r6,r4
  804148:	280f883a 	mov	r7,r5
  80414c:	8009883a 	mov	r4,r16
  804150:	880b883a 	mov	r5,r17
  804154:	08061180 	call	806118 <__ledf2>
  804158:	10000116 	blt	r2,zero,804160 <logic+0x2d64>
  80415c:	0025883a 	mov	r18,zero
  804160:	9007883a 	mov	r3,r18
  804164:	e0bffc17 	ldw	r2,-16(fp)
  804168:	10c034c5 	stb	r3,211(r2)
  d->_g95 = d->_g52 && d->_cg26;
  80416c:	e0bffc17 	ldw	r2,-16(fp)
  804170:	10802843 	ldbu	r2,161(r2)
  804174:	10803fcc 	andi	r2,r2,255
  804178:	1080201c 	xori	r2,r2,128
  80417c:	10bfe004 	addi	r2,r2,-128
  804180:	10000826 	beq	r2,zero,8041a4 <logic+0x2da8>
  804184:	e0bffc17 	ldw	r2,-16(fp)
  804188:	108034c3 	ldbu	r2,211(r2)
  80418c:	10803fcc 	andi	r2,r2,255
  804190:	1080201c 	xori	r2,r2,128
  804194:	10bfe004 	addi	r2,r2,-128
  804198:	10000226 	beq	r2,zero,8041a4 <logic+0x2da8>
  80419c:	00800044 	movi	r2,1
  8041a0:	00000106 	br	8041a8 <logic+0x2dac>
  8041a4:	0005883a 	mov	r2,zero
  8041a8:	1007883a 	mov	r3,r2
  8041ac:	e0bffc17 	ldw	r2,-16(fp)
  8041b0:	10c02ec5 	stb	r3,187(r2)
  if (d->_g95) {
  8041b4:	e0bffc17 	ldw	r2,-16(fp)
  8041b8:	10802ec3 	ldbu	r2,187(r2)
  8041bc:	10803fcc 	andi	r2,r2,255
  8041c0:	1080201c 	xori	r2,r2,128
  8041c4:	10bfe004 	addi	r2,r2,-128
  8041c8:	10003426 	beq	r2,zero,80429c <logic+0x2ea0>
    d->sleepT = (d->sleepT < (d->URI - d->URI_Clock)) ? d->sleepT : (d->URI - d->URI_Clock);
  8041cc:	e0bffc17 	ldw	r2,-16(fp)
  8041d0:	14001b17 	ldw	r16,108(r2)
  8041d4:	14401c17 	ldw	r17,112(r2)
  8041d8:	e0bffc17 	ldw	r2,-16(fp)
  8041dc:	10800517 	ldw	r2,20(r2)
  8041e0:	1009883a 	mov	r4,r2
  8041e4:	0806b080 	call	806b08 <__floatsidf>
  8041e8:	1011883a 	mov	r8,r2
  8041ec:	1813883a 	mov	r9,r3
  8041f0:	e13ffc17 	ldw	r4,-16(fp)
  8041f4:	20800c17 	ldw	r2,48(r4)
  8041f8:	20c00d17 	ldw	r3,52(r4)
  8041fc:	100d883a 	mov	r6,r2
  804200:	180f883a 	mov	r7,r3
  804204:	4009883a 	mov	r4,r8
  804208:	480b883a 	mov	r5,r9
  80420c:	080620c0 	call	80620c <__subdf3>
  804210:	1009883a 	mov	r4,r2
  804214:	180b883a 	mov	r5,r3
  804218:	2005883a 	mov	r2,r4
  80421c:	2807883a 	mov	r3,r5
  804220:	100d883a 	mov	r6,r2
  804224:	180f883a 	mov	r7,r3
  804228:	8009883a 	mov	r4,r16
  80422c:	880b883a 	mov	r5,r17
  804230:	08061180 	call	806118 <__ledf2>
  804234:	1000040e 	bge	r2,zero,804248 <logic+0x2e4c>
  804238:	e13ffc17 	ldw	r4,-16(fp)
  80423c:	20801b17 	ldw	r2,108(r4)
  804240:	20c01c17 	ldw	r3,112(r4)
  804244:	00001206 	br	804290 <logic+0x2e94>
  804248:	e0bffc17 	ldw	r2,-16(fp)
  80424c:	10800517 	ldw	r2,20(r2)
  804250:	1009883a 	mov	r4,r2
  804254:	0806b080 	call	806b08 <__floatsidf>
  804258:	1011883a 	mov	r8,r2
  80425c:	1813883a 	mov	r9,r3
  804260:	e13ffc17 	ldw	r4,-16(fp)
  804264:	20800c17 	ldw	r2,48(r4)
  804268:	20c00d17 	ldw	r3,52(r4)
  80426c:	100d883a 	mov	r6,r2
  804270:	180f883a 	mov	r7,r3
  804274:	4009883a 	mov	r4,r8
  804278:	480b883a 	mov	r5,r9
  80427c:	080620c0 	call	80620c <__subdf3>
  804280:	1009883a 	mov	r4,r2
  804284:	180b883a 	mov	r5,r3
  804288:	2005883a 	mov	r2,r4
  80428c:	2807883a 	mov	r3,r5
  804290:	e13ffc17 	ldw	r4,-16(fp)
  804294:	20801b15 	stw	r2,108(r4)
  804298:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg27 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  80429c:	e0bffc17 	ldw	r2,-16(fp)
  8042a0:	10801ec3 	ldbu	r2,123(r2)
  8042a4:	10803fcc 	andi	r2,r2,255
  8042a8:	1080201c 	xori	r2,r2,128
  8042ac:	10bfe004 	addi	r2,r2,-128
  8042b0:	10000c1e 	bne	r2,zero,8042e4 <logic+0x2ee8>
  8042b4:	e0bffc17 	ldw	r2,-16(fp)
  8042b8:	10801f03 	ldbu	r2,124(r2)
  8042bc:	10803fcc 	andi	r2,r2,255
  8042c0:	1080201c 	xori	r2,r2,128
  8042c4:	10bfe004 	addi	r2,r2,-128
  8042c8:	1000061e 	bne	r2,zero,8042e4 <logic+0x2ee8>
  8042cc:	e0bffc17 	ldw	r2,-16(fp)
  8042d0:	10801f43 	ldbu	r2,125(r2)
  8042d4:	10803fcc 	andi	r2,r2,255
  8042d8:	1080201c 	xori	r2,r2,128
  8042dc:	10bfe004 	addi	r2,r2,-128
  8042e0:	10000226 	beq	r2,zero,8042ec <logic+0x2ef0>
  8042e4:	00800044 	movi	r2,1
  8042e8:	00000106 	br	8042f0 <logic+0x2ef4>
  8042ec:	0005883a 	mov	r2,zero
  8042f0:	1007883a 	mov	r3,r2
  8042f4:	e0bffc17 	ldw	r2,-16(fp)
  8042f8:	10c03505 	stb	r3,212(r2)
  d->_g93 = d->_g95 && !d->_cg27 || d->_g29 && !d->_cg31;
  8042fc:	e0bffc17 	ldw	r2,-16(fp)
  804300:	10802ec3 	ldbu	r2,187(r2)
  804304:	10803fcc 	andi	r2,r2,255
  804308:	1080201c 	xori	r2,r2,128
  80430c:	10bfe004 	addi	r2,r2,-128
  804310:	10000626 	beq	r2,zero,80432c <logic+0x2f30>
  804314:	e0bffc17 	ldw	r2,-16(fp)
  804318:	10803503 	ldbu	r2,212(r2)
  80431c:	10803fcc 	andi	r2,r2,255
  804320:	1080201c 	xori	r2,r2,128
  804324:	10bfe004 	addi	r2,r2,-128
  804328:	10000c26 	beq	r2,zero,80435c <logic+0x2f60>
  80432c:	e0bffc17 	ldw	r2,-16(fp)
  804330:	10802403 	ldbu	r2,144(r2)
  804334:	10803fcc 	andi	r2,r2,255
  804338:	1080201c 	xori	r2,r2,128
  80433c:	10bfe004 	addi	r2,r2,-128
  804340:	10000826 	beq	r2,zero,804364 <logic+0x2f68>
  804344:	e0bffc17 	ldw	r2,-16(fp)
  804348:	10803543 	ldbu	r2,213(r2)
  80434c:	10803fcc 	andi	r2,r2,255
  804350:	1080201c 	xori	r2,r2,128
  804354:	10bfe004 	addi	r2,r2,-128
  804358:	1000021e 	bne	r2,zero,804364 <logic+0x2f68>
  80435c:	00800044 	movi	r2,1
  804360:	00000106 	br	804368 <logic+0x2f6c>
  804364:	0005883a 	mov	r2,zero
  804368:	1007883a 	mov	r3,r2
  80436c:	e0bffc17 	ldw	r2,-16(fp)
  804370:	10c02e45 	stb	r3,185(r2)
  d->_g98 = d->_g52 && !d->_cg26;
  804374:	e0bffc17 	ldw	r2,-16(fp)
  804378:	10802843 	ldbu	r2,161(r2)
  80437c:	10803fcc 	andi	r2,r2,255
  804380:	1080201c 	xori	r2,r2,128
  804384:	10bfe004 	addi	r2,r2,-128
  804388:	10000826 	beq	r2,zero,8043ac <logic+0x2fb0>
  80438c:	e0bffc17 	ldw	r2,-16(fp)
  804390:	108034c3 	ldbu	r2,211(r2)
  804394:	10803fcc 	andi	r2,r2,255
  804398:	1080201c 	xori	r2,r2,128
  80439c:	10bfe004 	addi	r2,r2,-128
  8043a0:	1000021e 	bne	r2,zero,8043ac <logic+0x2fb0>
  8043a4:	00800044 	movi	r2,1
  8043a8:	00000106 	br	8043b0 <logic+0x2fb4>
  8043ac:	0005883a 	mov	r2,zero
  8043b0:	1007883a 	mov	r3,r2
  8043b4:	e0bffc17 	ldw	r2,-16(fp)
  8043b8:	10c02f85 	stb	r3,190(r2)
  d->_cg36 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8043bc:	e0bffc17 	ldw	r2,-16(fp)
  8043c0:	10801ec3 	ldbu	r2,123(r2)
  8043c4:	10803fcc 	andi	r2,r2,255
  8043c8:	1080201c 	xori	r2,r2,128
  8043cc:	10bfe004 	addi	r2,r2,-128
  8043d0:	10000c1e 	bne	r2,zero,804404 <logic+0x3008>
  8043d4:	e0bffc17 	ldw	r2,-16(fp)
  8043d8:	10801f03 	ldbu	r2,124(r2)
  8043dc:	10803fcc 	andi	r2,r2,255
  8043e0:	1080201c 	xori	r2,r2,128
  8043e4:	10bfe004 	addi	r2,r2,-128
  8043e8:	1000061e 	bne	r2,zero,804404 <logic+0x3008>
  8043ec:	e0bffc17 	ldw	r2,-16(fp)
  8043f0:	10801f43 	ldbu	r2,125(r2)
  8043f4:	10803fcc 	andi	r2,r2,255
  8043f8:	1080201c 	xori	r2,r2,128
  8043fc:	10bfe004 	addi	r2,r2,-128
  804400:	10000226 	beq	r2,zero,80440c <logic+0x3010>
  804404:	00800044 	movi	r2,1
  804408:	00000106 	br	804410 <logic+0x3014>
  80440c:	0005883a 	mov	r2,zero
  804410:	1007883a 	mov	r3,r2
  804414:	e0bffc17 	ldw	r2,-16(fp)
  804418:	10c03605 	stb	r3,216(r2)
  d->_g5 = d->_g30 && !d->_cg33 || d->_g98 && !d->_cg36;
  80441c:	e0bffc17 	ldw	r2,-16(fp)
  804420:	10802443 	ldbu	r2,145(r2)
  804424:	10803fcc 	andi	r2,r2,255
  804428:	1080201c 	xori	r2,r2,128
  80442c:	10bfe004 	addi	r2,r2,-128
  804430:	10000626 	beq	r2,zero,80444c <logic+0x3050>
  804434:	e0bffc17 	ldw	r2,-16(fp)
  804438:	108035c3 	ldbu	r2,215(r2)
  80443c:	10803fcc 	andi	r2,r2,255
  804440:	1080201c 	xori	r2,r2,128
  804444:	10bfe004 	addi	r2,r2,-128
  804448:	10000c26 	beq	r2,zero,80447c <logic+0x3080>
  80444c:	e0bffc17 	ldw	r2,-16(fp)
  804450:	10802f83 	ldbu	r2,190(r2)
  804454:	10803fcc 	andi	r2,r2,255
  804458:	1080201c 	xori	r2,r2,128
  80445c:	10bfe004 	addi	r2,r2,-128
  804460:	10000826 	beq	r2,zero,804484 <logic+0x3088>
  804464:	e0bffc17 	ldw	r2,-16(fp)
  804468:	10803603 	ldbu	r2,216(r2)
  80446c:	10803fcc 	andi	r2,r2,255
  804470:	1080201c 	xori	r2,r2,128
  804474:	10bfe004 	addi	r2,r2,-128
  804478:	1000021e 	bne	r2,zero,804484 <logic+0x3088>
  80447c:	00800044 	movi	r2,1
  804480:	00000106 	br	804488 <logic+0x308c>
  804484:	0005883a 	mov	r2,zero
  804488:	1007883a 	mov	r3,r2
  80448c:	e0bffc17 	ldw	r2,-16(fp)
  804490:	10c01fc5 	stb	r3,127(r2)
  d->_cg37 = d->AVI_Clock < d->AVI;
  804494:	e0bffc17 	ldw	r2,-16(fp)
  804498:	14001017 	ldw	r16,64(r2)
  80449c:	14401117 	ldw	r17,68(r2)
  8044a0:	e0bffc17 	ldw	r2,-16(fp)
  8044a4:	10800017 	ldw	r2,0(r2)
  8044a8:	1009883a 	mov	r4,r2
  8044ac:	0806b080 	call	806b08 <__floatsidf>
  8044b0:	1009883a 	mov	r4,r2
  8044b4:	180b883a 	mov	r5,r3
  8044b8:	04800044 	movi	r18,1
  8044bc:	200d883a 	mov	r6,r4
  8044c0:	280f883a 	mov	r7,r5
  8044c4:	8009883a 	mov	r4,r16
  8044c8:	880b883a 	mov	r5,r17
  8044cc:	08061180 	call	806118 <__ledf2>
  8044d0:	10000116 	blt	r2,zero,8044d8 <logic+0x30dc>
  8044d4:	0025883a 	mov	r18,zero
  8044d8:	9007883a 	mov	r3,r18
  8044dc:	e0bffc17 	ldw	r2,-16(fp)
  8044e0:	10c03645 	stb	r3,217(r2)
  d->_g9 = d->_g52 && d->_cg37;
  8044e4:	e0bffc17 	ldw	r2,-16(fp)
  8044e8:	10802843 	ldbu	r2,161(r2)
  8044ec:	10803fcc 	andi	r2,r2,255
  8044f0:	1080201c 	xori	r2,r2,128
  8044f4:	10bfe004 	addi	r2,r2,-128
  8044f8:	10000826 	beq	r2,zero,80451c <logic+0x3120>
  8044fc:	e0bffc17 	ldw	r2,-16(fp)
  804500:	10803643 	ldbu	r2,217(r2)
  804504:	10803fcc 	andi	r2,r2,255
  804508:	1080201c 	xori	r2,r2,128
  80450c:	10bfe004 	addi	r2,r2,-128
  804510:	10000226 	beq	r2,zero,80451c <logic+0x3120>
  804514:	00800044 	movi	r2,1
  804518:	00000106 	br	804520 <logic+0x3124>
  80451c:	0005883a 	mov	r2,zero
  804520:	1007883a 	mov	r3,r2
  804524:	e0bffc17 	ldw	r2,-16(fp)
  804528:	10c02085 	stb	r3,130(r2)
  if (d->_g9) {
  80452c:	e0bffc17 	ldw	r2,-16(fp)
  804530:	10802083 	ldbu	r2,130(r2)
  804534:	10803fcc 	andi	r2,r2,255
  804538:	1080201c 	xori	r2,r2,128
  80453c:	10bfe004 	addi	r2,r2,-128
  804540:	10003426 	beq	r2,zero,804614 <logic+0x3218>
    d->sleepT = (d->sleepT < (d->AVI - d->AVI_Clock)) ? d->sleepT : (d->AVI - d->AVI_Clock);
  804544:	e0bffc17 	ldw	r2,-16(fp)
  804548:	14001b17 	ldw	r16,108(r2)
  80454c:	14401c17 	ldw	r17,112(r2)
  804550:	e0bffc17 	ldw	r2,-16(fp)
  804554:	10800017 	ldw	r2,0(r2)
  804558:	1009883a 	mov	r4,r2
  80455c:	0806b080 	call	806b08 <__floatsidf>
  804560:	1011883a 	mov	r8,r2
  804564:	1813883a 	mov	r9,r3
  804568:	e13ffc17 	ldw	r4,-16(fp)
  80456c:	20801017 	ldw	r2,64(r4)
  804570:	20c01117 	ldw	r3,68(r4)
  804574:	100d883a 	mov	r6,r2
  804578:	180f883a 	mov	r7,r3
  80457c:	4009883a 	mov	r4,r8
  804580:	480b883a 	mov	r5,r9
  804584:	080620c0 	call	80620c <__subdf3>
  804588:	1009883a 	mov	r4,r2
  80458c:	180b883a 	mov	r5,r3
  804590:	2005883a 	mov	r2,r4
  804594:	2807883a 	mov	r3,r5
  804598:	100d883a 	mov	r6,r2
  80459c:	180f883a 	mov	r7,r3
  8045a0:	8009883a 	mov	r4,r16
  8045a4:	880b883a 	mov	r5,r17
  8045a8:	08061180 	call	806118 <__ledf2>
  8045ac:	1000040e 	bge	r2,zero,8045c0 <logic+0x31c4>
  8045b0:	e13ffc17 	ldw	r4,-16(fp)
  8045b4:	20801b17 	ldw	r2,108(r4)
  8045b8:	20c01c17 	ldw	r3,112(r4)
  8045bc:	00001206 	br	804608 <logic+0x320c>
  8045c0:	e0bffc17 	ldw	r2,-16(fp)
  8045c4:	10800017 	ldw	r2,0(r2)
  8045c8:	1009883a 	mov	r4,r2
  8045cc:	0806b080 	call	806b08 <__floatsidf>
  8045d0:	1011883a 	mov	r8,r2
  8045d4:	1813883a 	mov	r9,r3
  8045d8:	e13ffc17 	ldw	r4,-16(fp)
  8045dc:	20801017 	ldw	r2,64(r4)
  8045e0:	20c01117 	ldw	r3,68(r4)
  8045e4:	100d883a 	mov	r6,r2
  8045e8:	180f883a 	mov	r7,r3
  8045ec:	4009883a 	mov	r4,r8
  8045f0:	480b883a 	mov	r5,r9
  8045f4:	080620c0 	call	80620c <__subdf3>
  8045f8:	1009883a 	mov	r4,r2
  8045fc:	180b883a 	mov	r5,r3
  804600:	2005883a 	mov	r2,r4
  804604:	2807883a 	mov	r3,r5
  804608:	e13ffc17 	ldw	r4,-16(fp)
  80460c:	20801b15 	stw	r2,108(r4)
  804610:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg38 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804614:	e0bffc17 	ldw	r2,-16(fp)
  804618:	10801ec3 	ldbu	r2,123(r2)
  80461c:	10803fcc 	andi	r2,r2,255
  804620:	1080201c 	xori	r2,r2,128
  804624:	10bfe004 	addi	r2,r2,-128
  804628:	10000c1e 	bne	r2,zero,80465c <logic+0x3260>
  80462c:	e0bffc17 	ldw	r2,-16(fp)
  804630:	10801f03 	ldbu	r2,124(r2)
  804634:	10803fcc 	andi	r2,r2,255
  804638:	1080201c 	xori	r2,r2,128
  80463c:	10bfe004 	addi	r2,r2,-128
  804640:	1000061e 	bne	r2,zero,80465c <logic+0x3260>
  804644:	e0bffc17 	ldw	r2,-16(fp)
  804648:	10801f43 	ldbu	r2,125(r2)
  80464c:	10803fcc 	andi	r2,r2,255
  804650:	1080201c 	xori	r2,r2,128
  804654:	10bfe004 	addi	r2,r2,-128
  804658:	10000226 	beq	r2,zero,804664 <logic+0x3268>
  80465c:	00800044 	movi	r2,1
  804660:	00000106 	br	804668 <logic+0x326c>
  804664:	0005883a 	mov	r2,zero
  804668:	1007883a 	mov	r3,r2
  80466c:	e0bffc17 	ldw	r2,-16(fp)
  804670:	10c03685 	stb	r3,218(r2)
  d->_g11 = d->_g9 && !d->_cg38 || d->_g46 && !d->_cg42;
  804674:	e0bffc17 	ldw	r2,-16(fp)
  804678:	10802083 	ldbu	r2,130(r2)
  80467c:	10803fcc 	andi	r2,r2,255
  804680:	1080201c 	xori	r2,r2,128
  804684:	10bfe004 	addi	r2,r2,-128
  804688:	10000626 	beq	r2,zero,8046a4 <logic+0x32a8>
  80468c:	e0bffc17 	ldw	r2,-16(fp)
  804690:	10803683 	ldbu	r2,218(r2)
  804694:	10803fcc 	andi	r2,r2,255
  804698:	1080201c 	xori	r2,r2,128
  80469c:	10bfe004 	addi	r2,r2,-128
  8046a0:	10000c26 	beq	r2,zero,8046d4 <logic+0x32d8>
  8046a4:	e0bffc17 	ldw	r2,-16(fp)
  8046a8:	10802743 	ldbu	r2,157(r2)
  8046ac:	10803fcc 	andi	r2,r2,255
  8046b0:	1080201c 	xori	r2,r2,128
  8046b4:	10bfe004 	addi	r2,r2,-128
  8046b8:	10000826 	beq	r2,zero,8046dc <logic+0x32e0>
  8046bc:	e0bffc17 	ldw	r2,-16(fp)
  8046c0:	108036c3 	ldbu	r2,219(r2)
  8046c4:	10803fcc 	andi	r2,r2,255
  8046c8:	1080201c 	xori	r2,r2,128
  8046cc:	10bfe004 	addi	r2,r2,-128
  8046d0:	1000021e 	bne	r2,zero,8046dc <logic+0x32e0>
  8046d4:	00800044 	movi	r2,1
  8046d8:	00000106 	br	8046e0 <logic+0x32e4>
  8046dc:	0005883a 	mov	r2,zero
  8046e0:	1007883a 	mov	r3,r2
  8046e4:	e0bffc17 	ldw	r2,-16(fp)
  8046e8:	10c02105 	stb	r3,132(r2)
  d->_g14 = d->_g52 && !d->_cg37;
  8046ec:	e0bffc17 	ldw	r2,-16(fp)
  8046f0:	10802843 	ldbu	r2,161(r2)
  8046f4:	10803fcc 	andi	r2,r2,255
  8046f8:	1080201c 	xori	r2,r2,128
  8046fc:	10bfe004 	addi	r2,r2,-128
  804700:	10000826 	beq	r2,zero,804724 <logic+0x3328>
  804704:	e0bffc17 	ldw	r2,-16(fp)
  804708:	10803643 	ldbu	r2,217(r2)
  80470c:	10803fcc 	andi	r2,r2,255
  804710:	1080201c 	xori	r2,r2,128
  804714:	10bfe004 	addi	r2,r2,-128
  804718:	1000021e 	bne	r2,zero,804724 <logic+0x3328>
  80471c:	00800044 	movi	r2,1
  804720:	00000106 	br	804728 <logic+0x332c>
  804724:	0005883a 	mov	r2,zero
  804728:	1007883a 	mov	r3,r2
  80472c:	e0bffc17 	ldw	r2,-16(fp)
  804730:	10c02185 	stb	r3,134(r2)
  d->_cg47 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804734:	e0bffc17 	ldw	r2,-16(fp)
  804738:	10801ec3 	ldbu	r2,123(r2)
  80473c:	10803fcc 	andi	r2,r2,255
  804740:	1080201c 	xori	r2,r2,128
  804744:	10bfe004 	addi	r2,r2,-128
  804748:	10000c1e 	bne	r2,zero,80477c <logic+0x3380>
  80474c:	e0bffc17 	ldw	r2,-16(fp)
  804750:	10801f03 	ldbu	r2,124(r2)
  804754:	10803fcc 	andi	r2,r2,255
  804758:	1080201c 	xori	r2,r2,128
  80475c:	10bfe004 	addi	r2,r2,-128
  804760:	1000061e 	bne	r2,zero,80477c <logic+0x3380>
  804764:	e0bffc17 	ldw	r2,-16(fp)
  804768:	10801f43 	ldbu	r2,125(r2)
  80476c:	10803fcc 	andi	r2,r2,255
  804770:	1080201c 	xori	r2,r2,128
  804774:	10bfe004 	addi	r2,r2,-128
  804778:	10000226 	beq	r2,zero,804784 <logic+0x3388>
  80477c:	00800044 	movi	r2,1
  804780:	00000106 	br	804788 <logic+0x338c>
  804784:	0005883a 	mov	r2,zero
  804788:	1007883a 	mov	r3,r2
  80478c:	e0bffc17 	ldw	r2,-16(fp)
  804790:	10c03785 	stb	r3,222(r2)
  d->_g16 = d->_g41 && !d->_cg44 || d->_g14 && !d->_cg47;
  804794:	e0bffc17 	ldw	r2,-16(fp)
  804798:	10802643 	ldbu	r2,153(r2)
  80479c:	10803fcc 	andi	r2,r2,255
  8047a0:	1080201c 	xori	r2,r2,128
  8047a4:	10bfe004 	addi	r2,r2,-128
  8047a8:	10000626 	beq	r2,zero,8047c4 <logic+0x33c8>
  8047ac:	e0bffc17 	ldw	r2,-16(fp)
  8047b0:	10803743 	ldbu	r2,221(r2)
  8047b4:	10803fcc 	andi	r2,r2,255
  8047b8:	1080201c 	xori	r2,r2,128
  8047bc:	10bfe004 	addi	r2,r2,-128
  8047c0:	10000c26 	beq	r2,zero,8047f4 <logic+0x33f8>
  8047c4:	e0bffc17 	ldw	r2,-16(fp)
  8047c8:	10802183 	ldbu	r2,134(r2)
  8047cc:	10803fcc 	andi	r2,r2,255
  8047d0:	1080201c 	xori	r2,r2,128
  8047d4:	10bfe004 	addi	r2,r2,-128
  8047d8:	10000826 	beq	r2,zero,8047fc <logic+0x3400>
  8047dc:	e0bffc17 	ldw	r2,-16(fp)
  8047e0:	10803783 	ldbu	r2,222(r2)
  8047e4:	10803fcc 	andi	r2,r2,255
  8047e8:	1080201c 	xori	r2,r2,128
  8047ec:	10bfe004 	addi	r2,r2,-128
  8047f0:	1000021e 	bne	r2,zero,8047fc <logic+0x3400>
  8047f4:	00800044 	movi	r2,1
  8047f8:	00000106 	br	804800 <logic+0x3404>
  8047fc:	0005883a 	mov	r2,zero
  804800:	1007883a 	mov	r3,r2
  804804:	e0bffc17 	ldw	r2,-16(fp)
  804808:	10c021c5 	stb	r3,135(r2)
  d->_g20 = d->_g52 || d->_g53 && !d->_cg55;
  80480c:	e0bffc17 	ldw	r2,-16(fp)
  804810:	10802843 	ldbu	r2,161(r2)
  804814:	10803fcc 	andi	r2,r2,255
  804818:	1080201c 	xori	r2,r2,128
  80481c:	10bfe004 	addi	r2,r2,-128
  804820:	10000c1e 	bne	r2,zero,804854 <logic+0x3458>
  804824:	e0bffc17 	ldw	r2,-16(fp)
  804828:	10802883 	ldbu	r2,162(r2)
  80482c:	10803fcc 	andi	r2,r2,255
  804830:	1080201c 	xori	r2,r2,128
  804834:	10bfe004 	addi	r2,r2,-128
  804838:	10000826 	beq	r2,zero,80485c <logic+0x3460>
  80483c:	e0bffc17 	ldw	r2,-16(fp)
  804840:	108037c3 	ldbu	r2,223(r2)
  804844:	10803fcc 	andi	r2,r2,255
  804848:	1080201c 	xori	r2,r2,128
  80484c:	10bfe004 	addi	r2,r2,-128
  804850:	1000021e 	bne	r2,zero,80485c <logic+0x3460>
  804854:	00800044 	movi	r2,1
  804858:	00000106 	br	804860 <logic+0x3464>
  80485c:	0005883a 	mov	r2,zero
  804860:	1007883a 	mov	r3,r2
  804864:	e0bffc17 	ldw	r2,-16(fp)
  804868:	10c02285 	stb	r3,138(r2)
  d->_g22 = d->_g56 && d->_cg57;
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	10802943 	ldbu	r2,165(r2)
  804874:	10803fcc 	andi	r2,r2,255
  804878:	1080201c 	xori	r2,r2,128
  80487c:	10bfe004 	addi	r2,r2,-128
  804880:	10000826 	beq	r2,zero,8048a4 <logic+0x34a8>
  804884:	e0bffc17 	ldw	r2,-16(fp)
  804888:	10803883 	ldbu	r2,226(r2)
  80488c:	10803fcc 	andi	r2,r2,255
  804890:	1080201c 	xori	r2,r2,128
  804894:	10bfe004 	addi	r2,r2,-128
  804898:	10000226 	beq	r2,zero,8048a4 <logic+0x34a8>
  80489c:	00800044 	movi	r2,1
  8048a0:	00000106 	br	8048a8 <logic+0x34ac>
  8048a4:	0005883a 	mov	r2,zero
  8048a8:	1007883a 	mov	r3,r2
  8048ac:	e0bffc17 	ldw	r2,-16(fp)
  8048b0:	10c02305 	stb	r3,140(r2)
  if (d->_g22) {
  8048b4:	e0bffc17 	ldw	r2,-16(fp)
  8048b8:	10802303 	ldbu	r2,140(r2)
  8048bc:	10803fcc 	andi	r2,r2,255
  8048c0:	1080201c 	xori	r2,r2,128
  8048c4:	10bfe004 	addi	r2,r2,-128
  8048c8:	10000b26 	beq	r2,zero,8048f8 <logic+0x34fc>
    d->VP |= 1;
  8048cc:	e0bffc17 	ldw	r2,-16(fp)
  8048d0:	10801dc3 	ldbu	r2,119(r2)
  8048d4:	10800054 	ori	r2,r2,1
  8048d8:	1007883a 	mov	r3,r2
  8048dc:	e0bffc17 	ldw	r2,-16(fp)
  8048e0:	10c01dc5 	stb	r3,119(r2)
    d->_taken_transitions[4] += 1;
  8048e4:	e0bffc17 	ldw	r2,-16(fp)
  8048e8:	10801617 	ldw	r2,88(r2)
  8048ec:	10c00044 	addi	r3,r2,1
  8048f0:	e0bffc17 	ldw	r2,-16(fp)
  8048f4:	10c01615 	stw	r3,88(r2)
  }
  d->_g25 = d->_g54 && !d->_cg97;
  8048f8:	e0bffc17 	ldw	r2,-16(fp)
  8048fc:	108028c3 	ldbu	r2,163(r2)
  804900:	10803fcc 	andi	r2,r2,255
  804904:	1080201c 	xori	r2,r2,128
  804908:	10bfe004 	addi	r2,r2,-128
  80490c:	10000826 	beq	r2,zero,804930 <logic+0x3534>
  804910:	e0bffc17 	ldw	r2,-16(fp)
  804914:	10803d03 	ldbu	r2,244(r2)
  804918:	10803fcc 	andi	r2,r2,255
  80491c:	1080201c 	xori	r2,r2,128
  804920:	10bfe004 	addi	r2,r2,-128
  804924:	1000021e 	bne	r2,zero,804930 <logic+0x3534>
  804928:	00800044 	movi	r2,1
  80492c:	00000106 	br	804934 <logic+0x3538>
  804930:	0005883a 	mov	r2,zero
  804934:	1007883a 	mov	r3,r2
  804938:	e0bffc17 	ldw	r2,-16(fp)
  80493c:	10c02385 	stb	r3,142(r2)
  if (d->_g25) {
  804940:	e0bffc17 	ldw	r2,-16(fp)
  804944:	10802383 	ldbu	r2,142(r2)
  804948:	10803fcc 	andi	r2,r2,255
  80494c:	1080201c 	xori	r2,r2,128
  804950:	10bfe004 	addi	r2,r2,-128
  804954:	10000b26 	beq	r2,zero,804984 <logic+0x3588>
    d->VP |= 1;
  804958:	e0bffc17 	ldw	r2,-16(fp)
  80495c:	10801dc3 	ldbu	r2,119(r2)
  804960:	10800054 	ori	r2,r2,1
  804964:	1007883a 	mov	r3,r2
  804968:	e0bffc17 	ldw	r2,-16(fp)
  80496c:	10c01dc5 	stb	r3,119(r2)
    d->_taken_transitions[6] += 1;
  804970:	e0bffc17 	ldw	r2,-16(fp)
  804974:	10801817 	ldw	r2,96(r2)
  804978:	10c00044 	addi	r3,r2,1
  80497c:	e0bffc17 	ldw	r2,-16(fp)
  804980:	10c01815 	stw	r3,96(r2)
  }
  d->_g27 = d->_g22 || d->_g25;
  804984:	e0bffc17 	ldw	r2,-16(fp)
  804988:	10802303 	ldbu	r2,140(r2)
  80498c:	10803fcc 	andi	r2,r2,255
  804990:	1080201c 	xori	r2,r2,128
  804994:	10bfe004 	addi	r2,r2,-128
  804998:	1000061e 	bne	r2,zero,8049b4 <logic+0x35b8>
  80499c:	e0bffc17 	ldw	r2,-16(fp)
  8049a0:	10802383 	ldbu	r2,142(r2)
  8049a4:	10803fcc 	andi	r2,r2,255
  8049a8:	1080201c 	xori	r2,r2,128
  8049ac:	10bfe004 	addi	r2,r2,-128
  8049b0:	10000226 	beq	r2,zero,8049bc <logic+0x35c0>
  8049b4:	00800044 	movi	r2,1
  8049b8:	00000106 	br	8049c0 <logic+0x35c4>
  8049bc:	0005883a 	mov	r2,zero
  8049c0:	1007883a 	mov	r3,r2
  8049c4:	e0bffc17 	ldw	r2,-16(fp)
  8049c8:	10c023c5 	stb	r3,143(r2)
  if (d->_g27) {
  8049cc:	e0bffc17 	ldw	r2,-16(fp)
  8049d0:	108023c3 	ldbu	r2,143(r2)
  8049d4:	10803fcc 	andi	r2,r2,255
  8049d8:	1080201c 	xori	r2,r2,128
  8049dc:	10bfe004 	addi	r2,r2,-128
  8049e0:	10001426 	beq	r2,zero,804a34 <logic+0x3638>
    d->PVARP_Clock = 0;
  8049e4:	e0bffc17 	ldw	r2,-16(fp)
  8049e8:	10000e15 	stw	zero,56(r2)
  8049ec:	10000f15 	stw	zero,60(r2)
    d->VRP_Clock = 0;
  8049f0:	e0bffc17 	ldw	r2,-16(fp)
  8049f4:	10000615 	stw	zero,24(r2)
  8049f8:	10000715 	stw	zero,28(r2)
    d->AEI_Clock = 0;
  8049fc:	e0bffc17 	ldw	r2,-16(fp)
  804a00:	10000815 	stw	zero,32(r2)
  804a04:	10000915 	stw	zero,36(r2)
    d->URI_Clock = 0;
  804a08:	e0bffc17 	ldw	r2,-16(fp)
  804a0c:	10000c15 	stw	zero,48(r2)
  804a10:	10000d15 	stw	zero,52(r2)
    d->LRI_Clock = 0;
  804a14:	e0bffc17 	ldw	r2,-16(fp)
  804a18:	10000a15 	stw	zero,40(r2)
  804a1c:	10000b15 	stw	zero,44(r2)
    d->_taken_transitions[3] += 1;
  804a20:	e0bffc17 	ldw	r2,-16(fp)
  804a24:	10801517 	ldw	r2,84(r2)
  804a28:	10c00044 	addi	r3,r2,1
  804a2c:	e0bffc17 	ldw	r2,-16(fp)
  804a30:	10c01515 	stw	r3,84(r2)
  }
  d->_g31 = d->_g87_e3 && !d->_cg94;
  804a34:	e0bffc17 	ldw	r2,-16(fp)
  804a38:	10803f03 	ldbu	r2,252(r2)
  804a3c:	10803fcc 	andi	r2,r2,255
  804a40:	1080201c 	xori	r2,r2,128
  804a44:	10bfe004 	addi	r2,r2,-128
  804a48:	10000826 	beq	r2,zero,804a6c <logic+0x3670>
  804a4c:	e0bffc17 	ldw	r2,-16(fp)
  804a50:	10803cc3 	ldbu	r2,243(r2)
  804a54:	10803fcc 	andi	r2,r2,255
  804a58:	1080201c 	xori	r2,r2,128
  804a5c:	10bfe004 	addi	r2,r2,-128
  804a60:	1000021e 	bne	r2,zero,804a6c <logic+0x3670>
  804a64:	00800044 	movi	r2,1
  804a68:	00000106 	br	804a70 <logic+0x3674>
  804a6c:	0005883a 	mov	r2,zero
  804a70:	1007883a 	mov	r3,r2
  804a74:	e0bffc17 	ldw	r2,-16(fp)
  804a78:	10c02485 	stb	r3,146(r2)
  if (d->_g31) {
  804a7c:	e0bffc17 	ldw	r2,-16(fp)
  804a80:	10802483 	ldbu	r2,146(r2)
  804a84:	10803fcc 	andi	r2,r2,255
  804a88:	1080201c 	xori	r2,r2,128
  804a8c:	10bfe004 	addi	r2,r2,-128
  804a90:	10000526 	beq	r2,zero,804aa8 <logic+0x36ac>
    d->_taken_transitions[2] += 1;
  804a94:	e0bffc17 	ldw	r2,-16(fp)
  804a98:	10801417 	ldw	r2,80(r2)
  804a9c:	10c00044 	addi	r3,r2,1
  804aa0:	e0bffc17 	ldw	r2,-16(fp)
  804aa4:	10c01415 	stw	r3,80(r2)
  }
  d->_g33 = d->_g27 || d->_g31;
  804aa8:	e0bffc17 	ldw	r2,-16(fp)
  804aac:	108023c3 	ldbu	r2,143(r2)
  804ab0:	10803fcc 	andi	r2,r2,255
  804ab4:	1080201c 	xori	r2,r2,128
  804ab8:	10bfe004 	addi	r2,r2,-128
  804abc:	1000061e 	bne	r2,zero,804ad8 <logic+0x36dc>
  804ac0:	e0bffc17 	ldw	r2,-16(fp)
  804ac4:	10802483 	ldbu	r2,146(r2)
  804ac8:	10803fcc 	andi	r2,r2,255
  804acc:	1080201c 	xori	r2,r2,128
  804ad0:	10bfe004 	addi	r2,r2,-128
  804ad4:	10000226 	beq	r2,zero,804ae0 <logic+0x36e4>
  804ad8:	00800044 	movi	r2,1
  804adc:	00000106 	br	804ae4 <logic+0x36e8>
  804ae0:	0005883a 	mov	r2,zero
  804ae4:	1007883a 	mov	r3,r2
  804ae8:	e0bffc17 	ldw	r2,-16(fp)
  804aec:	10c02505 	stb	r3,148(r2)
  if (d->_g33) {
  804af0:	e0bffc17 	ldw	r2,-16(fp)
  804af4:	10802503 	ldbu	r2,148(r2)
  804af8:	10803fcc 	andi	r2,r2,255
  804afc:	1080201c 	xori	r2,r2,128
  804b00:	10bfe004 	addi	r2,r2,-128
  804b04:	10000626 	beq	r2,zero,804b20 <logic+0x3724>
    d->_Pacemaker_local__Atrig = 0;
  804b08:	e0bffc17 	ldw	r2,-16(fp)
  804b0c:	10001e05 	stb	zero,120(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  804b10:	e0bffc17 	ldw	r2,-16(fp)
  804b14:	10001e45 	stb	zero,121(r2)
    d->_Pacemaker_local__Atrig2 = 0;
  804b18:	e0bffc17 	ldw	r2,-16(fp)
  804b1c:	10001e85 	stb	zero,122(r2)
  }
  d->_cg61 = d->AEI_Clock < d->AEI;
  804b20:	e0bffc17 	ldw	r2,-16(fp)
  804b24:	14000817 	ldw	r16,32(r2)
  804b28:	14400917 	ldw	r17,36(r2)
  804b2c:	e0bffc17 	ldw	r2,-16(fp)
  804b30:	10800117 	ldw	r2,4(r2)
  804b34:	1009883a 	mov	r4,r2
  804b38:	0806b080 	call	806b08 <__floatsidf>
  804b3c:	1009883a 	mov	r4,r2
  804b40:	180b883a 	mov	r5,r3
  804b44:	04800044 	movi	r18,1
  804b48:	200d883a 	mov	r6,r4
  804b4c:	280f883a 	mov	r7,r5
  804b50:	8009883a 	mov	r4,r16
  804b54:	880b883a 	mov	r5,r17
  804b58:	08061180 	call	806118 <__ledf2>
  804b5c:	10000116 	blt	r2,zero,804b64 <logic+0x3768>
  804b60:	0025883a 	mov	r18,zero
  804b64:	9007883a 	mov	r3,r18
  804b68:	e0bffc17 	ldw	r2,-16(fp)
  804b6c:	10c038c5 	stb	r3,227(r2)
  d->_g36 = d->_g33 && d->_cg61;
  804b70:	e0bffc17 	ldw	r2,-16(fp)
  804b74:	10802503 	ldbu	r2,148(r2)
  804b78:	10803fcc 	andi	r2,r2,255
  804b7c:	1080201c 	xori	r2,r2,128
  804b80:	10bfe004 	addi	r2,r2,-128
  804b84:	10000826 	beq	r2,zero,804ba8 <logic+0x37ac>
  804b88:	e0bffc17 	ldw	r2,-16(fp)
  804b8c:	108038c3 	ldbu	r2,227(r2)
  804b90:	10803fcc 	andi	r2,r2,255
  804b94:	1080201c 	xori	r2,r2,128
  804b98:	10bfe004 	addi	r2,r2,-128
  804b9c:	10000226 	beq	r2,zero,804ba8 <logic+0x37ac>
  804ba0:	00800044 	movi	r2,1
  804ba4:	00000106 	br	804bac <logic+0x37b0>
  804ba8:	0005883a 	mov	r2,zero
  804bac:	1007883a 	mov	r3,r2
  804bb0:	e0bffc17 	ldw	r2,-16(fp)
  804bb4:	10c02585 	stb	r3,150(r2)
  if (d->_g36) {
  804bb8:	e0bffc17 	ldw	r2,-16(fp)
  804bbc:	10802583 	ldbu	r2,150(r2)
  804bc0:	10803fcc 	andi	r2,r2,255
  804bc4:	1080201c 	xori	r2,r2,128
  804bc8:	10bfe004 	addi	r2,r2,-128
  804bcc:	10003426 	beq	r2,zero,804ca0 <logic+0x38a4>
    d->sleepT = (d->sleepT < (d->AEI - d->AEI_Clock)) ? d->sleepT : (d->AEI - d->AEI_Clock);
  804bd0:	e0bffc17 	ldw	r2,-16(fp)
  804bd4:	14001b17 	ldw	r16,108(r2)
  804bd8:	14401c17 	ldw	r17,112(r2)
  804bdc:	e0bffc17 	ldw	r2,-16(fp)
  804be0:	10800117 	ldw	r2,4(r2)
  804be4:	1009883a 	mov	r4,r2
  804be8:	0806b080 	call	806b08 <__floatsidf>
  804bec:	1011883a 	mov	r8,r2
  804bf0:	1813883a 	mov	r9,r3
  804bf4:	e13ffc17 	ldw	r4,-16(fp)
  804bf8:	20800817 	ldw	r2,32(r4)
  804bfc:	20c00917 	ldw	r3,36(r4)
  804c00:	100d883a 	mov	r6,r2
  804c04:	180f883a 	mov	r7,r3
  804c08:	4009883a 	mov	r4,r8
  804c0c:	480b883a 	mov	r5,r9
  804c10:	080620c0 	call	80620c <__subdf3>
  804c14:	1009883a 	mov	r4,r2
  804c18:	180b883a 	mov	r5,r3
  804c1c:	2005883a 	mov	r2,r4
  804c20:	2807883a 	mov	r3,r5
  804c24:	100d883a 	mov	r6,r2
  804c28:	180f883a 	mov	r7,r3
  804c2c:	8009883a 	mov	r4,r16
  804c30:	880b883a 	mov	r5,r17
  804c34:	08061180 	call	806118 <__ledf2>
  804c38:	1000040e 	bge	r2,zero,804c4c <logic+0x3850>
  804c3c:	e13ffc17 	ldw	r4,-16(fp)
  804c40:	20801b17 	ldw	r2,108(r4)
  804c44:	20c01c17 	ldw	r3,112(r4)
  804c48:	00001206 	br	804c94 <logic+0x3898>
  804c4c:	e0bffc17 	ldw	r2,-16(fp)
  804c50:	10800117 	ldw	r2,4(r2)
  804c54:	1009883a 	mov	r4,r2
  804c58:	0806b080 	call	806b08 <__floatsidf>
  804c5c:	1011883a 	mov	r8,r2
  804c60:	1813883a 	mov	r9,r3
  804c64:	e13ffc17 	ldw	r4,-16(fp)
  804c68:	20800817 	ldw	r2,32(r4)
  804c6c:	20c00917 	ldw	r3,36(r4)
  804c70:	100d883a 	mov	r6,r2
  804c74:	180f883a 	mov	r7,r3
  804c78:	4009883a 	mov	r4,r8
  804c7c:	480b883a 	mov	r5,r9
  804c80:	080620c0 	call	80620c <__subdf3>
  804c84:	1009883a 	mov	r4,r2
  804c88:	180b883a 	mov	r5,r3
  804c8c:	2005883a 	mov	r2,r4
  804c90:	2807883a 	mov	r3,r5
  804c94:	e13ffc17 	ldw	r4,-16(fp)
  804c98:	20801b15 	stw	r2,108(r4)
  804c9c:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg62 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804ca0:	e0bffc17 	ldw	r2,-16(fp)
  804ca4:	10801e03 	ldbu	r2,120(r2)
  804ca8:	10803fcc 	andi	r2,r2,255
  804cac:	1080201c 	xori	r2,r2,128
  804cb0:	10bfe004 	addi	r2,r2,-128
  804cb4:	10000c1e 	bne	r2,zero,804ce8 <logic+0x38ec>
  804cb8:	e0bffc17 	ldw	r2,-16(fp)
  804cbc:	10801e43 	ldbu	r2,121(r2)
  804cc0:	10803fcc 	andi	r2,r2,255
  804cc4:	1080201c 	xori	r2,r2,128
  804cc8:	10bfe004 	addi	r2,r2,-128
  804ccc:	1000061e 	bne	r2,zero,804ce8 <logic+0x38ec>
  804cd0:	e0bffc17 	ldw	r2,-16(fp)
  804cd4:	10801e83 	ldbu	r2,122(r2)
  804cd8:	10803fcc 	andi	r2,r2,255
  804cdc:	1080201c 	xori	r2,r2,128
  804ce0:	10bfe004 	addi	r2,r2,-128
  804ce4:	10000226 	beq	r2,zero,804cf0 <logic+0x38f4>
  804ce8:	00800044 	movi	r2,1
  804cec:	00000106 	br	804cf4 <logic+0x38f8>
  804cf0:	0005883a 	mov	r2,zero
  804cf4:	1007883a 	mov	r3,r2
  804cf8:	e0bffc17 	ldw	r2,-16(fp)
  804cfc:	10c03905 	stb	r3,228(r2)
  d->_g38 = d->_g36 && !d->_cg62 || d->_g64 && !d->_cg66;
  804d00:	e0bffc17 	ldw	r2,-16(fp)
  804d04:	10802583 	ldbu	r2,150(r2)
  804d08:	10803fcc 	andi	r2,r2,255
  804d0c:	1080201c 	xori	r2,r2,128
  804d10:	10bfe004 	addi	r2,r2,-128
  804d14:	10000626 	beq	r2,zero,804d30 <logic+0x3934>
  804d18:	e0bffc17 	ldw	r2,-16(fp)
  804d1c:	10803903 	ldbu	r2,228(r2)
  804d20:	10803fcc 	andi	r2,r2,255
  804d24:	1080201c 	xori	r2,r2,128
  804d28:	10bfe004 	addi	r2,r2,-128
  804d2c:	10000c26 	beq	r2,zero,804d60 <logic+0x3964>
  804d30:	e0bffc17 	ldw	r2,-16(fp)
  804d34:	10802a43 	ldbu	r2,169(r2)
  804d38:	10803fcc 	andi	r2,r2,255
  804d3c:	1080201c 	xori	r2,r2,128
  804d40:	10bfe004 	addi	r2,r2,-128
  804d44:	10000826 	beq	r2,zero,804d68 <logic+0x396c>
  804d48:	e0bffc17 	ldw	r2,-16(fp)
  804d4c:	10803943 	ldbu	r2,229(r2)
  804d50:	10803fcc 	andi	r2,r2,255
  804d54:	1080201c 	xori	r2,r2,128
  804d58:	10bfe004 	addi	r2,r2,-128
  804d5c:	1000021e 	bne	r2,zero,804d68 <logic+0x396c>
  804d60:	00800044 	movi	r2,1
  804d64:	00000106 	br	804d6c <logic+0x3970>
  804d68:	0005883a 	mov	r2,zero
  804d6c:	1007883a 	mov	r3,r2
  804d70:	e0bffc17 	ldw	r2,-16(fp)
  804d74:	10c025c5 	stb	r3,151(r2)
  d->_g42 = d->_g33 && !d->_cg61;
  804d78:	e0bffc17 	ldw	r2,-16(fp)
  804d7c:	10802503 	ldbu	r2,148(r2)
  804d80:	10803fcc 	andi	r2,r2,255
  804d84:	1080201c 	xori	r2,r2,128
  804d88:	10bfe004 	addi	r2,r2,-128
  804d8c:	10000826 	beq	r2,zero,804db0 <logic+0x39b4>
  804d90:	e0bffc17 	ldw	r2,-16(fp)
  804d94:	108038c3 	ldbu	r2,227(r2)
  804d98:	10803fcc 	andi	r2,r2,255
  804d9c:	1080201c 	xori	r2,r2,128
  804da0:	10bfe004 	addi	r2,r2,-128
  804da4:	1000021e 	bne	r2,zero,804db0 <logic+0x39b4>
  804da8:	00800044 	movi	r2,1
  804dac:	00000106 	br	804db4 <logic+0x39b8>
  804db0:	0005883a 	mov	r2,zero
  804db4:	1007883a 	mov	r3,r2
  804db8:	e0bffc17 	ldw	r2,-16(fp)
  804dbc:	10c02685 	stb	r3,154(r2)
  d->_cg71 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804dc0:	e0bffc17 	ldw	r2,-16(fp)
  804dc4:	10801e03 	ldbu	r2,120(r2)
  804dc8:	10803fcc 	andi	r2,r2,255
  804dcc:	1080201c 	xori	r2,r2,128
  804dd0:	10bfe004 	addi	r2,r2,-128
  804dd4:	10000c1e 	bne	r2,zero,804e08 <logic+0x3a0c>
  804dd8:	e0bffc17 	ldw	r2,-16(fp)
  804ddc:	10801e43 	ldbu	r2,121(r2)
  804de0:	10803fcc 	andi	r2,r2,255
  804de4:	1080201c 	xori	r2,r2,128
  804de8:	10bfe004 	addi	r2,r2,-128
  804dec:	1000061e 	bne	r2,zero,804e08 <logic+0x3a0c>
  804df0:	e0bffc17 	ldw	r2,-16(fp)
  804df4:	10801e83 	ldbu	r2,122(r2)
  804df8:	10803fcc 	andi	r2,r2,255
  804dfc:	1080201c 	xori	r2,r2,128
  804e00:	10bfe004 	addi	r2,r2,-128
  804e04:	10000226 	beq	r2,zero,804e10 <logic+0x3a14>
  804e08:	00800044 	movi	r2,1
  804e0c:	00000106 	br	804e14 <logic+0x3a18>
  804e10:	0005883a 	mov	r2,zero
  804e14:	1007883a 	mov	r3,r2
  804e18:	e0bffc17 	ldw	r2,-16(fp)
  804e1c:	10c03a05 	stb	r3,232(r2)
  d->_g44 = d->_g65 && !d->_cg68 || d->_g42 && !d->_cg71;
  804e20:	e0bffc17 	ldw	r2,-16(fp)
  804e24:	10802a83 	ldbu	r2,170(r2)
  804e28:	10803fcc 	andi	r2,r2,255
  804e2c:	1080201c 	xori	r2,r2,128
  804e30:	10bfe004 	addi	r2,r2,-128
  804e34:	10000626 	beq	r2,zero,804e50 <logic+0x3a54>
  804e38:	e0bffc17 	ldw	r2,-16(fp)
  804e3c:	108039c3 	ldbu	r2,231(r2)
  804e40:	10803fcc 	andi	r2,r2,255
  804e44:	1080201c 	xori	r2,r2,128
  804e48:	10bfe004 	addi	r2,r2,-128
  804e4c:	10000c26 	beq	r2,zero,804e80 <logic+0x3a84>
  804e50:	e0bffc17 	ldw	r2,-16(fp)
  804e54:	10802683 	ldbu	r2,154(r2)
  804e58:	10803fcc 	andi	r2,r2,255
  804e5c:	1080201c 	xori	r2,r2,128
  804e60:	10bfe004 	addi	r2,r2,-128
  804e64:	10000826 	beq	r2,zero,804e88 <logic+0x3a8c>
  804e68:	e0bffc17 	ldw	r2,-16(fp)
  804e6c:	10803a03 	ldbu	r2,232(r2)
  804e70:	10803fcc 	andi	r2,r2,255
  804e74:	1080201c 	xori	r2,r2,128
  804e78:	10bfe004 	addi	r2,r2,-128
  804e7c:	1000021e 	bne	r2,zero,804e88 <logic+0x3a8c>
  804e80:	00800044 	movi	r2,1
  804e84:	00000106 	br	804e8c <logic+0x3a90>
  804e88:	0005883a 	mov	r2,zero
  804e8c:	1007883a 	mov	r3,r2
  804e90:	e0bffc17 	ldw	r2,-16(fp)
  804e94:	10c02705 	stb	r3,156(r2)
  d->_cg72 = d->PVARP_Clock < d->PVARP;
  804e98:	e0bffc17 	ldw	r2,-16(fp)
  804e9c:	14000e17 	ldw	r16,56(r2)
  804ea0:	14400f17 	ldw	r17,60(r2)
  804ea4:	e0bffc17 	ldw	r2,-16(fp)
  804ea8:	10800217 	ldw	r2,8(r2)
  804eac:	1009883a 	mov	r4,r2
  804eb0:	0806b080 	call	806b08 <__floatsidf>
  804eb4:	1009883a 	mov	r4,r2
  804eb8:	180b883a 	mov	r5,r3
  804ebc:	04800044 	movi	r18,1
  804ec0:	200d883a 	mov	r6,r4
  804ec4:	280f883a 	mov	r7,r5
  804ec8:	8009883a 	mov	r4,r16
  804ecc:	880b883a 	mov	r5,r17
  804ed0:	08061180 	call	806118 <__ledf2>
  804ed4:	10000116 	blt	r2,zero,804edc <logic+0x3ae0>
  804ed8:	0025883a 	mov	r18,zero
  804edc:	9007883a 	mov	r3,r18
  804ee0:	e0bffc17 	ldw	r2,-16(fp)
  804ee4:	10c03a45 	stb	r3,233(r2)
  d->_g47 = d->_g33 && d->_cg72;
  804ee8:	e0bffc17 	ldw	r2,-16(fp)
  804eec:	10802503 	ldbu	r2,148(r2)
  804ef0:	10803fcc 	andi	r2,r2,255
  804ef4:	1080201c 	xori	r2,r2,128
  804ef8:	10bfe004 	addi	r2,r2,-128
  804efc:	10000826 	beq	r2,zero,804f20 <logic+0x3b24>
  804f00:	e0bffc17 	ldw	r2,-16(fp)
  804f04:	10803a43 	ldbu	r2,233(r2)
  804f08:	10803fcc 	andi	r2,r2,255
  804f0c:	1080201c 	xori	r2,r2,128
  804f10:	10bfe004 	addi	r2,r2,-128
  804f14:	10000226 	beq	r2,zero,804f20 <logic+0x3b24>
  804f18:	00800044 	movi	r2,1
  804f1c:	00000106 	br	804f24 <logic+0x3b28>
  804f20:	0005883a 	mov	r2,zero
  804f24:	1007883a 	mov	r3,r2
  804f28:	e0bffc17 	ldw	r2,-16(fp)
  804f2c:	10c02785 	stb	r3,158(r2)
  if (d->_g47) {
  804f30:	e0bffc17 	ldw	r2,-16(fp)
  804f34:	10802783 	ldbu	r2,158(r2)
  804f38:	10803fcc 	andi	r2,r2,255
  804f3c:	1080201c 	xori	r2,r2,128
  804f40:	10bfe004 	addi	r2,r2,-128
  804f44:	10003426 	beq	r2,zero,805018 <logic+0x3c1c>
    d->sleepT = (d->sleepT < (d->PVARP - d->PVARP_Clock)) ? d->sleepT : (d->PVARP - d->PVARP_Clock);
  804f48:	e0bffc17 	ldw	r2,-16(fp)
  804f4c:	14001b17 	ldw	r16,108(r2)
  804f50:	14401c17 	ldw	r17,112(r2)
  804f54:	e0bffc17 	ldw	r2,-16(fp)
  804f58:	10800217 	ldw	r2,8(r2)
  804f5c:	1009883a 	mov	r4,r2
  804f60:	0806b080 	call	806b08 <__floatsidf>
  804f64:	1011883a 	mov	r8,r2
  804f68:	1813883a 	mov	r9,r3
  804f6c:	e13ffc17 	ldw	r4,-16(fp)
  804f70:	20800e17 	ldw	r2,56(r4)
  804f74:	20c00f17 	ldw	r3,60(r4)
  804f78:	100d883a 	mov	r6,r2
  804f7c:	180f883a 	mov	r7,r3
  804f80:	4009883a 	mov	r4,r8
  804f84:	480b883a 	mov	r5,r9
  804f88:	080620c0 	call	80620c <__subdf3>
  804f8c:	1009883a 	mov	r4,r2
  804f90:	180b883a 	mov	r5,r3
  804f94:	2005883a 	mov	r2,r4
  804f98:	2807883a 	mov	r3,r5
  804f9c:	100d883a 	mov	r6,r2
  804fa0:	180f883a 	mov	r7,r3
  804fa4:	8009883a 	mov	r4,r16
  804fa8:	880b883a 	mov	r5,r17
  804fac:	08061180 	call	806118 <__ledf2>
  804fb0:	1000040e 	bge	r2,zero,804fc4 <logic+0x3bc8>
  804fb4:	e13ffc17 	ldw	r4,-16(fp)
  804fb8:	20801b17 	ldw	r2,108(r4)
  804fbc:	20c01c17 	ldw	r3,112(r4)
  804fc0:	00001206 	br	80500c <logic+0x3c10>
  804fc4:	e0bffc17 	ldw	r2,-16(fp)
  804fc8:	10800217 	ldw	r2,8(r2)
  804fcc:	1009883a 	mov	r4,r2
  804fd0:	0806b080 	call	806b08 <__floatsidf>
  804fd4:	1011883a 	mov	r8,r2
  804fd8:	1813883a 	mov	r9,r3
  804fdc:	e13ffc17 	ldw	r4,-16(fp)
  804fe0:	20800e17 	ldw	r2,56(r4)
  804fe4:	20c00f17 	ldw	r3,60(r4)
  804fe8:	100d883a 	mov	r6,r2
  804fec:	180f883a 	mov	r7,r3
  804ff0:	4009883a 	mov	r4,r8
  804ff4:	480b883a 	mov	r5,r9
  804ff8:	080620c0 	call	80620c <__subdf3>
  804ffc:	1009883a 	mov	r4,r2
  805000:	180b883a 	mov	r5,r3
  805004:	2005883a 	mov	r2,r4
  805008:	2807883a 	mov	r3,r5
  80500c:	e13ffc17 	ldw	r4,-16(fp)
  805010:	20801b15 	stw	r2,108(r4)
  805014:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg73 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  805018:	e0bffc17 	ldw	r2,-16(fp)
  80501c:	10801e03 	ldbu	r2,120(r2)
  805020:	10803fcc 	andi	r2,r2,255
  805024:	1080201c 	xori	r2,r2,128
  805028:	10bfe004 	addi	r2,r2,-128
  80502c:	10000c1e 	bne	r2,zero,805060 <logic+0x3c64>
  805030:	e0bffc17 	ldw	r2,-16(fp)
  805034:	10801e43 	ldbu	r2,121(r2)
  805038:	10803fcc 	andi	r2,r2,255
  80503c:	1080201c 	xori	r2,r2,128
  805040:	10bfe004 	addi	r2,r2,-128
  805044:	1000061e 	bne	r2,zero,805060 <logic+0x3c64>
  805048:	e0bffc17 	ldw	r2,-16(fp)
  80504c:	10801e83 	ldbu	r2,122(r2)
  805050:	10803fcc 	andi	r2,r2,255
  805054:	1080201c 	xori	r2,r2,128
  805058:	10bfe004 	addi	r2,r2,-128
  80505c:	10000226 	beq	r2,zero,805068 <logic+0x3c6c>
  805060:	00800044 	movi	r2,1
  805064:	00000106 	br	80506c <logic+0x3c70>
  805068:	0005883a 	mov	r2,zero
  80506c:	1007883a 	mov	r3,r2
  805070:	e0bffc17 	ldw	r2,-16(fp)
  805074:	10c03a85 	stb	r3,234(r2)
  d->_g55 = d->_g47 && !d->_cg73 || d->_g75 && !d->_cg77;
  805078:	e0bffc17 	ldw	r2,-16(fp)
  80507c:	10802783 	ldbu	r2,158(r2)
  805080:	10803fcc 	andi	r2,r2,255
  805084:	1080201c 	xori	r2,r2,128
  805088:	10bfe004 	addi	r2,r2,-128
  80508c:	10000626 	beq	r2,zero,8050a8 <logic+0x3cac>
  805090:	e0bffc17 	ldw	r2,-16(fp)
  805094:	10803a83 	ldbu	r2,234(r2)
  805098:	10803fcc 	andi	r2,r2,255
  80509c:	1080201c 	xori	r2,r2,128
  8050a0:	10bfe004 	addi	r2,r2,-128
  8050a4:	10000c26 	beq	r2,zero,8050d8 <logic+0x3cdc>
  8050a8:	e0bffc17 	ldw	r2,-16(fp)
  8050ac:	10802b83 	ldbu	r2,174(r2)
  8050b0:	10803fcc 	andi	r2,r2,255
  8050b4:	1080201c 	xori	r2,r2,128
  8050b8:	10bfe004 	addi	r2,r2,-128
  8050bc:	10000826 	beq	r2,zero,8050e0 <logic+0x3ce4>
  8050c0:	e0bffc17 	ldw	r2,-16(fp)
  8050c4:	10803ac3 	ldbu	r2,235(r2)
  8050c8:	10803fcc 	andi	r2,r2,255
  8050cc:	1080201c 	xori	r2,r2,128
  8050d0:	10bfe004 	addi	r2,r2,-128
  8050d4:	1000021e 	bne	r2,zero,8050e0 <logic+0x3ce4>
  8050d8:	00800044 	movi	r2,1
  8050dc:	00000106 	br	8050e4 <logic+0x3ce8>
  8050e0:	0005883a 	mov	r2,zero
  8050e4:	1007883a 	mov	r3,r2
  8050e8:	e0bffc17 	ldw	r2,-16(fp)
  8050ec:	10c02905 	stb	r3,164(r2)
  d->_g3 = d->_g33 && !d->_cg72;
  8050f0:	e0bffc17 	ldw	r2,-16(fp)
  8050f4:	10802503 	ldbu	r2,148(r2)
  8050f8:	10803fcc 	andi	r2,r2,255
  8050fc:	1080201c 	xori	r2,r2,128
  805100:	10bfe004 	addi	r2,r2,-128
  805104:	10000826 	beq	r2,zero,805128 <logic+0x3d2c>
  805108:	e0bffc17 	ldw	r2,-16(fp)
  80510c:	10803a43 	ldbu	r2,233(r2)
  805110:	10803fcc 	andi	r2,r2,255
  805114:	1080201c 	xori	r2,r2,128
  805118:	10bfe004 	addi	r2,r2,-128
  80511c:	1000021e 	bne	r2,zero,805128 <logic+0x3d2c>
  805120:	00800044 	movi	r2,1
  805124:	00000106 	br	80512c <logic+0x3d30>
  805128:	0005883a 	mov	r2,zero
  80512c:	1007883a 	mov	r3,r2
  805130:	e0bffc17 	ldw	r2,-16(fp)
  805134:	10c01f85 	stb	r3,126(r2)
  d->_cg82 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  805138:	e0bffc17 	ldw	r2,-16(fp)
  80513c:	10801e03 	ldbu	r2,120(r2)
  805140:	10803fcc 	andi	r2,r2,255
  805144:	1080201c 	xori	r2,r2,128
  805148:	10bfe004 	addi	r2,r2,-128
  80514c:	10000c1e 	bne	r2,zero,805180 <logic+0x3d84>
  805150:	e0bffc17 	ldw	r2,-16(fp)
  805154:	10801e43 	ldbu	r2,121(r2)
  805158:	10803fcc 	andi	r2,r2,255
  80515c:	1080201c 	xori	r2,r2,128
  805160:	10bfe004 	addi	r2,r2,-128
  805164:	1000061e 	bne	r2,zero,805180 <logic+0x3d84>
  805168:	e0bffc17 	ldw	r2,-16(fp)
  80516c:	10801e83 	ldbu	r2,122(r2)
  805170:	10803fcc 	andi	r2,r2,255
  805174:	1080201c 	xori	r2,r2,128
  805178:	10bfe004 	addi	r2,r2,-128
  80517c:	10000226 	beq	r2,zero,805188 <logic+0x3d8c>
  805180:	00800044 	movi	r2,1
  805184:	00000106 	br	80518c <logic+0x3d90>
  805188:	0005883a 	mov	r2,zero
  80518c:	1007883a 	mov	r3,r2
  805190:	e0bffc17 	ldw	r2,-16(fp)
  805194:	10c03b85 	stb	r3,238(r2)
  d->_g57 = d->_g76 && !d->_cg79 || d->_g3 && !d->_cg82;
  805198:	e0bffc17 	ldw	r2,-16(fp)
  80519c:	10802bc3 	ldbu	r2,175(r2)
  8051a0:	10803fcc 	andi	r2,r2,255
  8051a4:	1080201c 	xori	r2,r2,128
  8051a8:	10bfe004 	addi	r2,r2,-128
  8051ac:	10000626 	beq	r2,zero,8051c8 <logic+0x3dcc>
  8051b0:	e0bffc17 	ldw	r2,-16(fp)
  8051b4:	10803b43 	ldbu	r2,237(r2)
  8051b8:	10803fcc 	andi	r2,r2,255
  8051bc:	1080201c 	xori	r2,r2,128
  8051c0:	10bfe004 	addi	r2,r2,-128
  8051c4:	10000c26 	beq	r2,zero,8051f8 <logic+0x3dfc>
  8051c8:	e0bffc17 	ldw	r2,-16(fp)
  8051cc:	10801f83 	ldbu	r2,126(r2)
  8051d0:	10803fcc 	andi	r2,r2,255
  8051d4:	1080201c 	xori	r2,r2,128
  8051d8:	10bfe004 	addi	r2,r2,-128
  8051dc:	10000826 	beq	r2,zero,805200 <logic+0x3e04>
  8051e0:	e0bffc17 	ldw	r2,-16(fp)
  8051e4:	10803b83 	ldbu	r2,238(r2)
  8051e8:	10803fcc 	andi	r2,r2,255
  8051ec:	1080201c 	xori	r2,r2,128
  8051f0:	10bfe004 	addi	r2,r2,-128
  8051f4:	1000021e 	bne	r2,zero,805200 <logic+0x3e04>
  8051f8:	00800044 	movi	r2,1
  8051fc:	00000106 	br	805204 <logic+0x3e08>
  805200:	0005883a 	mov	r2,zero
  805204:	1007883a 	mov	r3,r2
  805208:	e0bffc17 	ldw	r2,-16(fp)
  80520c:	10c02985 	stb	r3,166(r2)
  d->_g97 = d->_g33 || d->_g88 && !d->_cg90;
  805210:	e0bffc17 	ldw	r2,-16(fp)
  805214:	10802503 	ldbu	r2,148(r2)
  805218:	10803fcc 	andi	r2,r2,255
  80521c:	1080201c 	xori	r2,r2,128
  805220:	10bfe004 	addi	r2,r2,-128
  805224:	10000c1e 	bne	r2,zero,805258 <logic+0x3e5c>
  805228:	e0bffc17 	ldw	r2,-16(fp)
  80522c:	10802d43 	ldbu	r2,181(r2)
  805230:	10803fcc 	andi	r2,r2,255
  805234:	1080201c 	xori	r2,r2,128
  805238:	10bfe004 	addi	r2,r2,-128
  80523c:	10000826 	beq	r2,zero,805260 <logic+0x3e64>
  805240:	e0bffc17 	ldw	r2,-16(fp)
  805244:	10803bc3 	ldbu	r2,239(r2)
  805248:	10803fcc 	andi	r2,r2,255
  80524c:	1080201c 	xori	r2,r2,128
  805250:	10bfe004 	addi	r2,r2,-128
  805254:	1000021e 	bne	r2,zero,805260 <logic+0x3e64>
  805258:	00800044 	movi	r2,1
  80525c:	00000106 	br	805264 <logic+0x3e68>
  805260:	0005883a 	mov	r2,zero
  805264:	1007883a 	mov	r3,r2
  805268:	e0bffc17 	ldw	r2,-16(fp)
  80526c:	10c02f45 	stb	r3,189(r2)
  d->_g99 = d->_GO || d->_g107;
  805270:	e0bffc17 	ldw	r2,-16(fp)
  805274:	10803183 	ldbu	r2,198(r2)
  805278:	10803fcc 	andi	r2,r2,255
  80527c:	1080201c 	xori	r2,r2,128
  805280:	10bfe004 	addi	r2,r2,-128
  805284:	1000061e 	bne	r2,zero,8052a0 <logic+0x3ea4>
  805288:	e0bffc17 	ldw	r2,-16(fp)
  80528c:	10803003 	ldbu	r2,192(r2)
  805290:	10803fcc 	andi	r2,r2,255
  805294:	1080201c 	xori	r2,r2,128
  805298:	10bfe004 	addi	r2,r2,-128
  80529c:	10000226 	beq	r2,zero,8052a8 <logic+0x3eac>
  8052a0:	00800044 	movi	r2,1
  8052a4:	00000106 	br	8052ac <logic+0x3eb0>
  8052a8:	0005883a 	mov	r2,zero
  8052ac:	1007883a 	mov	r3,r2
  8052b0:	e0bffc17 	ldw	r2,-16(fp)
  8052b4:	10c02fc5 	stb	r3,191(r2)
  d->_g58 = d->_GO || d->_g111;
  8052b8:	e0bffc17 	ldw	r2,-16(fp)
  8052bc:	10803183 	ldbu	r2,198(r2)
  8052c0:	10803fcc 	andi	r2,r2,255
  8052c4:	1080201c 	xori	r2,r2,128
  8052c8:	10bfe004 	addi	r2,r2,-128
  8052cc:	1000061e 	bne	r2,zero,8052e8 <logic+0x3eec>
  8052d0:	e0bffc17 	ldw	r2,-16(fp)
  8052d4:	10803043 	ldbu	r2,193(r2)
  8052d8:	10803fcc 	andi	r2,r2,255
  8052dc:	1080201c 	xori	r2,r2,128
  8052e0:	10bfe004 	addi	r2,r2,-128
  8052e4:	10000226 	beq	r2,zero,8052f0 <logic+0x3ef4>
  8052e8:	00800044 	movi	r2,1
  8052ec:	00000106 	br	8052f4 <logic+0x3ef8>
  8052f0:	0005883a 	mov	r2,zero
  8052f4:	1007883a 	mov	r3,r2
  8052f8:	e0bffc17 	ldw	r2,-16(fp)
  8052fc:	10c029c5 	stb	r3,167(r2)
  d->_g94 = d->_GO || d->_g115;
  805300:	e0bffc17 	ldw	r2,-16(fp)
  805304:	10803183 	ldbu	r2,198(r2)
  805308:	10803fcc 	andi	r2,r2,255
  80530c:	1080201c 	xori	r2,r2,128
  805310:	10bfe004 	addi	r2,r2,-128
  805314:	1000061e 	bne	r2,zero,805330 <logic+0x3f34>
  805318:	e0bffc17 	ldw	r2,-16(fp)
  80531c:	10803083 	ldbu	r2,194(r2)
  805320:	10803fcc 	andi	r2,r2,255
  805324:	1080201c 	xori	r2,r2,128
  805328:	10bfe004 	addi	r2,r2,-128
  80532c:	10000226 	beq	r2,zero,805338 <logic+0x3f3c>
  805330:	00800044 	movi	r2,1
  805334:	00000106 	br	80533c <logic+0x3f40>
  805338:	0005883a 	mov	r2,zero
  80533c:	1007883a 	mov	r3,r2
  805340:	e0bffc17 	ldw	r2,-16(fp)
  805344:	10c02e85 	stb	r3,186(r2)
  d->_g59 = d->_GO || d->_g92;
  805348:	e0bffc17 	ldw	r2,-16(fp)
  80534c:	10803183 	ldbu	r2,198(r2)
  805350:	10803fcc 	andi	r2,r2,255
  805354:	1080201c 	xori	r2,r2,128
  805358:	10bfe004 	addi	r2,r2,-128
  80535c:	1000061e 	bne	r2,zero,805378 <logic+0x3f7c>
  805360:	e0bffc17 	ldw	r2,-16(fp)
  805364:	10802e03 	ldbu	r2,184(r2)
  805368:	10803fcc 	andi	r2,r2,255
  80536c:	1080201c 	xori	r2,r2,128
  805370:	10bfe004 	addi	r2,r2,-128
  805374:	10000226 	beq	r2,zero,805380 <logic+0x3f84>
  805378:	00800044 	movi	r2,1
  80537c:	00000106 	br	805384 <logic+0x3f88>
  805380:	0005883a 	mov	r2,zero
  805384:	1007883a 	mov	r3,r2
  805388:	e0bffc17 	ldw	r2,-16(fp)
  80538c:	10c02a05 	stb	r3,168(r2)
  d->_g96 = d->_GO || d->_g123;
  805390:	e0bffc17 	ldw	r2,-16(fp)
  805394:	10803183 	ldbu	r2,198(r2)
  805398:	10803fcc 	andi	r2,r2,255
  80539c:	1080201c 	xori	r2,r2,128
  8053a0:	10bfe004 	addi	r2,r2,-128
  8053a4:	1000061e 	bne	r2,zero,8053c0 <logic+0x3fc4>
  8053a8:	e0bffc17 	ldw	r2,-16(fp)
  8053ac:	108030c3 	ldbu	r2,195(r2)
  8053b0:	10803fcc 	andi	r2,r2,255
  8053b4:	1080201c 	xori	r2,r2,128
  8053b8:	10bfe004 	addi	r2,r2,-128
  8053bc:	10000226 	beq	r2,zero,8053c8 <logic+0x3fcc>
  8053c0:	00800044 	movi	r2,1
  8053c4:	00000106 	br	8053cc <logic+0x3fd0>
  8053c8:	0005883a 	mov	r2,zero
  8053cc:	1007883a 	mov	r3,r2
  8053d0:	e0bffc17 	ldw	r2,-16(fp)
  8053d4:	10c02f05 	stb	r3,188(r2)
  d->_g66 = d->_GO || d->_g127;
  8053d8:	e0bffc17 	ldw	r2,-16(fp)
  8053dc:	10803183 	ldbu	r2,198(r2)
  8053e0:	10803fcc 	andi	r2,r2,255
  8053e4:	1080201c 	xori	r2,r2,128
  8053e8:	10bfe004 	addi	r2,r2,-128
  8053ec:	1000061e 	bne	r2,zero,805408 <logic+0x400c>
  8053f0:	e0bffc17 	ldw	r2,-16(fp)
  8053f4:	10803103 	ldbu	r2,196(r2)
  8053f8:	10803fcc 	andi	r2,r2,255
  8053fc:	1080201c 	xori	r2,r2,128
  805400:	10bfe004 	addi	r2,r2,-128
  805404:	10000226 	beq	r2,zero,805410 <logic+0x4014>
  805408:	00800044 	movi	r2,1
  80540c:	00000106 	br	805414 <logic+0x4018>
  805410:	0005883a 	mov	r2,zero
  805414:	1007883a 	mov	r3,r2
  805418:	e0bffc17 	ldw	r2,-16(fp)
  80541c:	10c02ac5 	stb	r3,171(r2)
}
  805420:	0001883a 	nop
  805424:	e6fffd04 	addi	sp,fp,-12
  805428:	dfc00417 	ldw	ra,16(sp)
  80542c:	df000317 	ldw	fp,12(sp)
  805430:	dc800217 	ldw	r18,8(sp)
  805434:	dc400117 	ldw	r17,4(sp)
  805438:	dc000017 	ldw	r16,0(sp)
  80543c:	dec00504 	addi	sp,sp,20
  805440:	f800283a 	ret

00805444 <reset>:

void reset(TickData* d) {
  805444:	defffe04 	addi	sp,sp,-8
  805448:	df000115 	stw	fp,4(sp)
  80544c:	df000104 	addi	fp,sp,4
  805450:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  805454:	e0bfff17 	ldw	r2,-4(fp)
  805458:	00c00044 	movi	r3,1
  80545c:	10c03185 	stb	r3,198(r2)
  d->_TERM = 0;
  805460:	e0bfff17 	ldw	r2,-4(fp)
  805464:	10003f45 	stb	zero,253(r2)
  d->AVI = AVI_VALUE;
  805468:	e0bfff17 	ldw	r2,-4(fp)
  80546c:	00c04b04 	movi	r3,300
  805470:	10c00015 	stw	r3,0(r2)
  d->AEI = AEI_VALUE;
  805474:	e0bfff17 	ldw	r2,-4(fp)
  805478:	00c0c804 	movi	r3,800
  80547c:	10c00115 	stw	r3,4(r2)
  d->PVARP = PVARP_VALUE;
  805480:	e0bfff17 	ldw	r2,-4(fp)
  805484:	00c00c84 	movi	r3,50
  805488:	10c00215 	stw	r3,8(r2)
  d->VRP = VRP_VALUE;
  80548c:	e0bfff17 	ldw	r2,-4(fp)
  805490:	00c02584 	movi	r3,150
  805494:	10c00315 	stw	r3,12(r2)
  d->LRI = LRI_VALUE;
  805498:	e0bfff17 	ldw	r2,-4(fp)
  80549c:	00c0ed84 	movi	r3,950
  8054a0:	10c00415 	stw	r3,16(r2)
  d->URI = URI_VALUE;
  8054a4:	e0bfff17 	ldw	r2,-4(fp)
  8054a8:	00c0e104 	movi	r3,900
  8054ac:	10c00515 	stw	r3,20(r2)
  d->VRP_Clock = 0;
  8054b0:	e0bfff17 	ldw	r2,-4(fp)
  8054b4:	10000615 	stw	zero,24(r2)
  8054b8:	10000715 	stw	zero,28(r2)
  d->AEI_Clock = 0;
  8054bc:	e0bfff17 	ldw	r2,-4(fp)
  8054c0:	10000815 	stw	zero,32(r2)
  8054c4:	10000915 	stw	zero,36(r2)
  d->LRI_Clock = 0;
  8054c8:	e0bfff17 	ldw	r2,-4(fp)
  8054cc:	10000a15 	stw	zero,40(r2)
  8054d0:	10000b15 	stw	zero,44(r2)
  d->URI_Clock = 0;
  8054d4:	e0bfff17 	ldw	r2,-4(fp)
  8054d8:	10000c15 	stw	zero,48(r2)
  8054dc:	10000d15 	stw	zero,52(r2)
  d->PVARP_Clock = 0;
  8054e0:	e0bfff17 	ldw	r2,-4(fp)
  8054e4:	10000e15 	stw	zero,56(r2)
  8054e8:	10000f15 	stw	zero,60(r2)
  d->AVI_Clock = 0;
  8054ec:	e0bfff17 	ldw	r2,-4(fp)
  8054f0:	10001015 	stw	zero,64(r2)
  8054f4:	10001115 	stw	zero,68(r2)
  d->deltaT = 0.0;
  8054f8:	e0bfff17 	ldw	r2,-4(fp)
  8054fc:	10001915 	stw	zero,100(r2)
  805500:	10001a15 	stw	zero,104(r2)
  d->sleepT = 0.0;
  805504:	e0bfff17 	ldw	r2,-4(fp)
  805508:	10001b15 	stw	zero,108(r2)
  80550c:	10001c15 	stw	zero,112(r2)
  d->_taken_transitions[0] = 0;
  805510:	e0bfff17 	ldw	r2,-4(fp)
  805514:	10001215 	stw	zero,72(r2)
  d->_taken_transitions[1] = 0;
  805518:	e0bfff17 	ldw	r2,-4(fp)
  80551c:	10001315 	stw	zero,76(r2)
  d->_taken_transitions[2] = 0;
  805520:	e0bfff17 	ldw	r2,-4(fp)
  805524:	10001415 	stw	zero,80(r2)
  d->_taken_transitions[3] = 0;
  805528:	e0bfff17 	ldw	r2,-4(fp)
  80552c:	10001515 	stw	zero,84(r2)
  d->_taken_transitions[4] = 0;
  805530:	e0bfff17 	ldw	r2,-4(fp)
  805534:	10001615 	stw	zero,88(r2)
  d->_taken_transitions[5] = 0;
  805538:	e0bfff17 	ldw	r2,-4(fp)
  80553c:	10001715 	stw	zero,92(r2)
  d->_taken_transitions[6] = 0;
  805540:	e0bfff17 	ldw	r2,-4(fp)
  805544:	10001815 	stw	zero,96(r2)
  d->_pg66 = 0;
  805548:	e0bfff17 	ldw	r2,-4(fp)
  80554c:	10003f85 	stb	zero,254(r2)
  d->_pg44 = 0;
  805550:	e0bfff17 	ldw	r2,-4(fp)
  805554:	10003fc5 	stb	zero,255(r2)
  d->_pg38 = 0;
  805558:	e0bfff17 	ldw	r2,-4(fp)
  80555c:	10004005 	stb	zero,256(r2)
  d->_pg96 = 0;
  805560:	e0bfff17 	ldw	r2,-4(fp)
  805564:	10004045 	stb	zero,257(r2)
  d->_pg97 = 0;
  805568:	e0bfff17 	ldw	r2,-4(fp)
  80556c:	10004085 	stb	zero,258(r2)
  d->_pg58 = 0;
  805570:	e0bfff17 	ldw	r2,-4(fp)
  805574:	100040c5 	stb	zero,259(r2)
  d->_pg57 = 0;
  805578:	e0bfff17 	ldw	r2,-4(fp)
  80557c:	10004105 	stb	zero,260(r2)
  d->_pg55 = 0;
  805580:	e0bfff17 	ldw	r2,-4(fp)
  805584:	10004145 	stb	zero,261(r2)
  d->_pg67_e1 = 0;
  805588:	e0bfff17 	ldw	r2,-4(fp)
  80558c:	10004185 	stb	zero,262(r2)
  d->_pg32 = 0;
  805590:	e0bfff17 	ldw	r2,-4(fp)
  805594:	100041c5 	stb	zero,263(r2)
  d->_pg10 = 0;
  805598:	e0bfff17 	ldw	r2,-4(fp)
  80559c:	10004205 	stb	zero,264(r2)
  d->_pg59 = 0;
  8055a0:	e0bfff17 	ldw	r2,-4(fp)
  8055a4:	10004245 	stb	zero,265(r2)
  d->_pg20 = 0;
  8055a8:	e0bfff17 	ldw	r2,-4(fp)
  8055ac:	10004285 	stb	zero,266(r2)
  d->_pg99 = 0;
  8055b0:	e0bfff17 	ldw	r2,-4(fp)
  8055b4:	100042c5 	stb	zero,267(r2)
  d->_pg94 = 0;
  8055b8:	e0bfff17 	ldw	r2,-4(fp)
  8055bc:	10004305 	stb	zero,268(r2)
  d->_pg32_e3 = 0;
  8055c0:	e0bfff17 	ldw	r2,-4(fp)
  8055c4:	10004345 	stb	zero,269(r2)
  d->_pg21_e2 = 0;
  8055c8:	e0bfff17 	ldw	r2,-4(fp)
  8055cc:	10004385 	stb	zero,270(r2)
  d->_pg5 = 0;
  8055d0:	e0bfff17 	ldw	r2,-4(fp)
  8055d4:	100043c5 	stb	zero,271(r2)
  d->_pg93 = 0;
  8055d8:	e0bfff17 	ldw	r2,-4(fp)
  8055dc:	10004405 	stb	zero,272(r2)
  d->_pg16 = 0;
  8055e0:	e0bfff17 	ldw	r2,-4(fp)
  8055e4:	10004445 	stb	zero,273(r2)
  d->_pg11 = 0;
  8055e8:	e0bfff17 	ldw	r2,-4(fp)
  8055ec:	10004485 	stb	zero,274(r2)
}
  8055f0:	0001883a 	nop
  8055f4:	e037883a 	mov	sp,fp
  8055f8:	df000017 	ldw	fp,0(sp)
  8055fc:	dec00104 	addi	sp,sp,4
  805600:	f800283a 	ret

00805604 <tick>:

void tick(TickData* d) {
  805604:	defffd04 	addi	sp,sp,-12
  805608:	dfc00215 	stw	ra,8(sp)
  80560c:	df000115 	stw	fp,4(sp)
  805610:	df000104 	addi	fp,sp,4
  805614:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  805618:	e13fff17 	ldw	r4,-4(fp)
  80561c:	08013fc0 	call	8013fc <logic>

  d->_pg66 = d->_g66;
  805620:	e0bfff17 	ldw	r2,-4(fp)
  805624:	10c02ac3 	ldbu	r3,171(r2)
  805628:	e0bfff17 	ldw	r2,-4(fp)
  80562c:	10c03f85 	stb	r3,254(r2)
  d->_pg44 = d->_g44;
  805630:	e0bfff17 	ldw	r2,-4(fp)
  805634:	10c02703 	ldbu	r3,156(r2)
  805638:	e0bfff17 	ldw	r2,-4(fp)
  80563c:	10c03fc5 	stb	r3,255(r2)
  d->_pg38 = d->_g38;
  805640:	e0bfff17 	ldw	r2,-4(fp)
  805644:	10c025c3 	ldbu	r3,151(r2)
  805648:	e0bfff17 	ldw	r2,-4(fp)
  80564c:	10c04005 	stb	r3,256(r2)
  d->_pg96 = d->_g96;
  805650:	e0bfff17 	ldw	r2,-4(fp)
  805654:	10c02f03 	ldbu	r3,188(r2)
  805658:	e0bfff17 	ldw	r2,-4(fp)
  80565c:	10c04045 	stb	r3,257(r2)
  d->_pg97 = d->_g97;
  805660:	e0bfff17 	ldw	r2,-4(fp)
  805664:	10c02f43 	ldbu	r3,189(r2)
  805668:	e0bfff17 	ldw	r2,-4(fp)
  80566c:	10c04085 	stb	r3,258(r2)
  d->_pg58 = d->_g58;
  805670:	e0bfff17 	ldw	r2,-4(fp)
  805674:	10c029c3 	ldbu	r3,167(r2)
  805678:	e0bfff17 	ldw	r2,-4(fp)
  80567c:	10c040c5 	stb	r3,259(r2)
  d->_pg57 = d->_g57;
  805680:	e0bfff17 	ldw	r2,-4(fp)
  805684:	10c02983 	ldbu	r3,166(r2)
  805688:	e0bfff17 	ldw	r2,-4(fp)
  80568c:	10c04105 	stb	r3,260(r2)
  d->_pg55 = d->_g55;
  805690:	e0bfff17 	ldw	r2,-4(fp)
  805694:	10c02903 	ldbu	r3,164(r2)
  805698:	e0bfff17 	ldw	r2,-4(fp)
  80569c:	10c04145 	stb	r3,261(r2)
  d->_pg67_e1 = d->_g67_e1;
  8056a0:	e0bfff17 	ldw	r2,-4(fp)
  8056a4:	10c03e83 	ldbu	r3,250(r2)
  8056a8:	e0bfff17 	ldw	r2,-4(fp)
  8056ac:	10c04185 	stb	r3,262(r2)
  d->_pg32 = d->_g32;
  8056b0:	e0bfff17 	ldw	r2,-4(fp)
  8056b4:	10c024c3 	ldbu	r3,147(r2)
  8056b8:	e0bfff17 	ldw	r2,-4(fp)
  8056bc:	10c041c5 	stb	r3,263(r2)
  d->_pg10 = d->_g10;
  8056c0:	e0bfff17 	ldw	r2,-4(fp)
  8056c4:	10c020c3 	ldbu	r3,131(r2)
  8056c8:	e0bfff17 	ldw	r2,-4(fp)
  8056cc:	10c04205 	stb	r3,264(r2)
  d->_pg59 = d->_g59;
  8056d0:	e0bfff17 	ldw	r2,-4(fp)
  8056d4:	10c02a03 	ldbu	r3,168(r2)
  8056d8:	e0bfff17 	ldw	r2,-4(fp)
  8056dc:	10c04245 	stb	r3,265(r2)
  d->_pg20 = d->_g20;
  8056e0:	e0bfff17 	ldw	r2,-4(fp)
  8056e4:	10c02283 	ldbu	r3,138(r2)
  8056e8:	e0bfff17 	ldw	r2,-4(fp)
  8056ec:	10c04285 	stb	r3,266(r2)
  d->_pg99 = d->_g99;
  8056f0:	e0bfff17 	ldw	r2,-4(fp)
  8056f4:	10c02fc3 	ldbu	r3,191(r2)
  8056f8:	e0bfff17 	ldw	r2,-4(fp)
  8056fc:	10c042c5 	stb	r3,267(r2)
  d->_pg94 = d->_g94;
  805700:	e0bfff17 	ldw	r2,-4(fp)
  805704:	10c02e83 	ldbu	r3,186(r2)
  805708:	e0bfff17 	ldw	r2,-4(fp)
  80570c:	10c04305 	stb	r3,268(r2)
  d->_pg32_e3 = d->_g32_e3;
  805710:	e0bfff17 	ldw	r2,-4(fp)
  805714:	10c03dc3 	ldbu	r3,247(r2)
  805718:	e0bfff17 	ldw	r2,-4(fp)
  80571c:	10c04345 	stb	r3,269(r2)
  d->_pg21_e2 = d->_g21_e2;
  805720:	e0bfff17 	ldw	r2,-4(fp)
  805724:	10c03d83 	ldbu	r3,246(r2)
  805728:	e0bfff17 	ldw	r2,-4(fp)
  80572c:	10c04385 	stb	r3,270(r2)
  d->_pg5 = d->_g5;
  805730:	e0bfff17 	ldw	r2,-4(fp)
  805734:	10c01fc3 	ldbu	r3,127(r2)
  805738:	e0bfff17 	ldw	r2,-4(fp)
  80573c:	10c043c5 	stb	r3,271(r2)
  d->_pg93 = d->_g93;
  805740:	e0bfff17 	ldw	r2,-4(fp)
  805744:	10c02e43 	ldbu	r3,185(r2)
  805748:	e0bfff17 	ldw	r2,-4(fp)
  80574c:	10c04405 	stb	r3,272(r2)
  d->_pg16 = d->_g16;
  805750:	e0bfff17 	ldw	r2,-4(fp)
  805754:	10c021c3 	ldbu	r3,135(r2)
  805758:	e0bfff17 	ldw	r2,-4(fp)
  80575c:	10c04445 	stb	r3,273(r2)
  d->_pg11 = d->_g11;
  805760:	e0bfff17 	ldw	r2,-4(fp)
  805764:	10c02103 	ldbu	r3,132(r2)
  805768:	e0bfff17 	ldw	r2,-4(fp)
  80576c:	10c04485 	stb	r3,274(r2)
  d->_GO = 0;
  805770:	e0bfff17 	ldw	r2,-4(fp)
  805774:	10003185 	stb	zero,198(r2)
}
  805778:	0001883a 	nop
  80577c:	e037883a 	mov	sp,fp
  805780:	dfc00117 	ldw	ra,4(sp)
  805784:	df000017 	ldw	fp,0(sp)
  805788:	dec00204 	addi	sp,sp,8
  80578c:	f800283a 	ret

00805790 <__adddf3>:
  805790:	02c00434 	movhi	r11,16
  805794:	5affffc4 	addi	r11,r11,-1
  805798:	2806d7fa 	srli	r3,r5,31
  80579c:	2ad4703a 	and	r10,r5,r11
  8057a0:	3ad2703a 	and	r9,r7,r11
  8057a4:	3804d53a 	srli	r2,r7,20
  8057a8:	3018d77a 	srli	r12,r6,29
  8057ac:	280ad53a 	srli	r5,r5,20
  8057b0:	501490fa 	slli	r10,r10,3
  8057b4:	2010d77a 	srli	r8,r4,29
  8057b8:	481290fa 	slli	r9,r9,3
  8057bc:	380ed7fa 	srli	r7,r7,31
  8057c0:	defffb04 	addi	sp,sp,-20
  8057c4:	dc800215 	stw	r18,8(sp)
  8057c8:	dc400115 	stw	r17,4(sp)
  8057cc:	dc000015 	stw	r16,0(sp)
  8057d0:	dfc00415 	stw	ra,16(sp)
  8057d4:	dcc00315 	stw	r19,12(sp)
  8057d8:	1c803fcc 	andi	r18,r3,255
  8057dc:	2c01ffcc 	andi	r16,r5,2047
  8057e0:	5210b03a 	or	r8,r10,r8
  8057e4:	202290fa 	slli	r17,r4,3
  8057e8:	1081ffcc 	andi	r2,r2,2047
  8057ec:	4b12b03a 	or	r9,r9,r12
  8057f0:	300c90fa 	slli	r6,r6,3
  8057f4:	91c07526 	beq	r18,r7,8059cc <__adddf3+0x23c>
  8057f8:	8087c83a 	sub	r3,r16,r2
  8057fc:	00c0ab0e 	bge	zero,r3,805aac <__adddf3+0x31c>
  805800:	10002a1e 	bne	r2,zero,8058ac <__adddf3+0x11c>
  805804:	4984b03a 	or	r2,r9,r6
  805808:	1000961e 	bne	r2,zero,805a64 <__adddf3+0x2d4>
  80580c:	888001cc 	andi	r2,r17,7
  805810:	10000726 	beq	r2,zero,805830 <__adddf3+0xa0>
  805814:	888003cc 	andi	r2,r17,15
  805818:	00c00104 	movi	r3,4
  80581c:	10c00426 	beq	r2,r3,805830 <__adddf3+0xa0>
  805820:	88c7883a 	add	r3,r17,r3
  805824:	1c63803a 	cmpltu	r17,r3,r17
  805828:	4451883a 	add	r8,r8,r17
  80582c:	1823883a 	mov	r17,r3
  805830:	4080202c 	andhi	r2,r8,128
  805834:	10005926 	beq	r2,zero,80599c <__adddf3+0x20c>
  805838:	84000044 	addi	r16,r16,1
  80583c:	0081ffc4 	movi	r2,2047
  805840:	8080ba26 	beq	r16,r2,805b2c <__adddf3+0x39c>
  805844:	00bfe034 	movhi	r2,65408
  805848:	10bfffc4 	addi	r2,r2,-1
  80584c:	4090703a 	and	r8,r8,r2
  805850:	4004977a 	slli	r2,r8,29
  805854:	4010927a 	slli	r8,r8,9
  805858:	8822d0fa 	srli	r17,r17,3
  80585c:	8401ffcc 	andi	r16,r16,2047
  805860:	4010d33a 	srli	r8,r8,12
  805864:	9007883a 	mov	r3,r18
  805868:	1444b03a 	or	r2,r2,r17
  80586c:	8401ffcc 	andi	r16,r16,2047
  805870:	8020953a 	slli	r16,r16,20
  805874:	18c03fcc 	andi	r3,r3,255
  805878:	01000434 	movhi	r4,16
  80587c:	213fffc4 	addi	r4,r4,-1
  805880:	180697fa 	slli	r3,r3,31
  805884:	4110703a 	and	r8,r8,r4
  805888:	4410b03a 	or	r8,r8,r16
  80588c:	40c6b03a 	or	r3,r8,r3
  805890:	dfc00417 	ldw	ra,16(sp)
  805894:	dcc00317 	ldw	r19,12(sp)
  805898:	dc800217 	ldw	r18,8(sp)
  80589c:	dc400117 	ldw	r17,4(sp)
  8058a0:	dc000017 	ldw	r16,0(sp)
  8058a4:	dec00504 	addi	sp,sp,20
  8058a8:	f800283a 	ret
  8058ac:	0081ffc4 	movi	r2,2047
  8058b0:	80bfd626 	beq	r16,r2,80580c <__alt_mem_onchip_mem+0xff7fd80c>
  8058b4:	4a402034 	orhi	r9,r9,128
  8058b8:	00800e04 	movi	r2,56
  8058bc:	10c09f16 	blt	r2,r3,805b3c <__adddf3+0x3ac>
  8058c0:	008007c4 	movi	r2,31
  8058c4:	10c0c216 	blt	r2,r3,805bd0 <__adddf3+0x440>
  8058c8:	00800804 	movi	r2,32
  8058cc:	10c5c83a 	sub	r2,r2,r3
  8058d0:	488a983a 	sll	r5,r9,r2
  8058d4:	30c8d83a 	srl	r4,r6,r3
  8058d8:	3084983a 	sll	r2,r6,r2
  8058dc:	48c6d83a 	srl	r3,r9,r3
  8058e0:	290cb03a 	or	r6,r5,r4
  8058e4:	1004c03a 	cmpne	r2,r2,zero
  8058e8:	308cb03a 	or	r6,r6,r2
  8058ec:	898dc83a 	sub	r6,r17,r6
  8058f0:	89a3803a 	cmpltu	r17,r17,r6
  8058f4:	40d1c83a 	sub	r8,r8,r3
  8058f8:	4451c83a 	sub	r8,r8,r17
  8058fc:	3023883a 	mov	r17,r6
  805900:	4080202c 	andhi	r2,r8,128
  805904:	10002326 	beq	r2,zero,805994 <__adddf3+0x204>
  805908:	04c02034 	movhi	r19,128
  80590c:	9cffffc4 	addi	r19,r19,-1
  805910:	44e6703a 	and	r19,r8,r19
  805914:	98007626 	beq	r19,zero,805af0 <__adddf3+0x360>
  805918:	9809883a 	mov	r4,r19
  80591c:	0806c8c0 	call	806c8c <__clzsi2>
  805920:	10fffe04 	addi	r3,r2,-8
  805924:	010007c4 	movi	r4,31
  805928:	20c07716 	blt	r4,r3,805b08 <__adddf3+0x378>
  80592c:	00800804 	movi	r2,32
  805930:	10c5c83a 	sub	r2,r2,r3
  805934:	8884d83a 	srl	r2,r17,r2
  805938:	98d0983a 	sll	r8,r19,r3
  80593c:	88e2983a 	sll	r17,r17,r3
  805940:	1204b03a 	or	r2,r2,r8
  805944:	1c007416 	blt	r3,r16,805b18 <__adddf3+0x388>
  805948:	1c21c83a 	sub	r16,r3,r16
  80594c:	82000044 	addi	r8,r16,1
  805950:	00c007c4 	movi	r3,31
  805954:	1a009116 	blt	r3,r8,805b9c <__adddf3+0x40c>
  805958:	00c00804 	movi	r3,32
  80595c:	1a07c83a 	sub	r3,r3,r8
  805960:	8a08d83a 	srl	r4,r17,r8
  805964:	88e2983a 	sll	r17,r17,r3
  805968:	10c6983a 	sll	r3,r2,r3
  80596c:	1210d83a 	srl	r8,r2,r8
  805970:	8804c03a 	cmpne	r2,r17,zero
  805974:	1906b03a 	or	r3,r3,r4
  805978:	18a2b03a 	or	r17,r3,r2
  80597c:	0021883a 	mov	r16,zero
  805980:	003fa206 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805984:	1890b03a 	or	r8,r3,r2
  805988:	40017d26 	beq	r8,zero,805f80 <__adddf3+0x7f0>
  80598c:	1011883a 	mov	r8,r2
  805990:	1823883a 	mov	r17,r3
  805994:	888001cc 	andi	r2,r17,7
  805998:	103f9e1e 	bne	r2,zero,805814 <__alt_mem_onchip_mem+0xff7fd814>
  80599c:	4004977a 	slli	r2,r8,29
  8059a0:	8822d0fa 	srli	r17,r17,3
  8059a4:	4010d0fa 	srli	r8,r8,3
  8059a8:	9007883a 	mov	r3,r18
  8059ac:	1444b03a 	or	r2,r2,r17
  8059b0:	0101ffc4 	movi	r4,2047
  8059b4:	81002426 	beq	r16,r4,805a48 <__adddf3+0x2b8>
  8059b8:	8120703a 	and	r16,r16,r4
  8059bc:	01000434 	movhi	r4,16
  8059c0:	213fffc4 	addi	r4,r4,-1
  8059c4:	4110703a 	and	r8,r8,r4
  8059c8:	003fa806 	br	80586c <__alt_mem_onchip_mem+0xff7fd86c>
  8059cc:	8089c83a 	sub	r4,r16,r2
  8059d0:	01005e0e 	bge	zero,r4,805b4c <__adddf3+0x3bc>
  8059d4:	10002b26 	beq	r2,zero,805a84 <__adddf3+0x2f4>
  8059d8:	0081ffc4 	movi	r2,2047
  8059dc:	80bf8b26 	beq	r16,r2,80580c <__alt_mem_onchip_mem+0xff7fd80c>
  8059e0:	4a402034 	orhi	r9,r9,128
  8059e4:	00800e04 	movi	r2,56
  8059e8:	1100a40e 	bge	r2,r4,805c7c <__adddf3+0x4ec>
  8059ec:	498cb03a 	or	r6,r9,r6
  8059f0:	300ac03a 	cmpne	r5,r6,zero
  8059f4:	0013883a 	mov	r9,zero
  8059f8:	2c4b883a 	add	r5,r5,r17
  8059fc:	2c63803a 	cmpltu	r17,r5,r17
  805a00:	4a11883a 	add	r8,r9,r8
  805a04:	8a11883a 	add	r8,r17,r8
  805a08:	2823883a 	mov	r17,r5
  805a0c:	4080202c 	andhi	r2,r8,128
  805a10:	103fe026 	beq	r2,zero,805994 <__alt_mem_onchip_mem+0xff7fd994>
  805a14:	84000044 	addi	r16,r16,1
  805a18:	0081ffc4 	movi	r2,2047
  805a1c:	8080d226 	beq	r16,r2,805d68 <__adddf3+0x5d8>
  805a20:	00bfe034 	movhi	r2,65408
  805a24:	10bfffc4 	addi	r2,r2,-1
  805a28:	4090703a 	and	r8,r8,r2
  805a2c:	880ad07a 	srli	r5,r17,1
  805a30:	400897fa 	slli	r4,r8,31
  805a34:	88c0004c 	andi	r3,r17,1
  805a38:	28e2b03a 	or	r17,r5,r3
  805a3c:	4010d07a 	srli	r8,r8,1
  805a40:	2462b03a 	or	r17,r4,r17
  805a44:	003f7106 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805a48:	4088b03a 	or	r4,r8,r2
  805a4c:	20014526 	beq	r4,zero,805f64 <__adddf3+0x7d4>
  805a50:	01000434 	movhi	r4,16
  805a54:	42000234 	orhi	r8,r8,8
  805a58:	213fffc4 	addi	r4,r4,-1
  805a5c:	4110703a 	and	r8,r8,r4
  805a60:	003f8206 	br	80586c <__alt_mem_onchip_mem+0xff7fd86c>
  805a64:	18ffffc4 	addi	r3,r3,-1
  805a68:	1800491e 	bne	r3,zero,805b90 <__adddf3+0x400>
  805a6c:	898bc83a 	sub	r5,r17,r6
  805a70:	8963803a 	cmpltu	r17,r17,r5
  805a74:	4251c83a 	sub	r8,r8,r9
  805a78:	4451c83a 	sub	r8,r8,r17
  805a7c:	2823883a 	mov	r17,r5
  805a80:	003f9f06 	br	805900 <__alt_mem_onchip_mem+0xff7fd900>
  805a84:	4984b03a 	or	r2,r9,r6
  805a88:	103f6026 	beq	r2,zero,80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805a8c:	213fffc4 	addi	r4,r4,-1
  805a90:	2000931e 	bne	r4,zero,805ce0 <__adddf3+0x550>
  805a94:	898d883a 	add	r6,r17,r6
  805a98:	3463803a 	cmpltu	r17,r6,r17
  805a9c:	4251883a 	add	r8,r8,r9
  805aa0:	8a11883a 	add	r8,r17,r8
  805aa4:	3023883a 	mov	r17,r6
  805aa8:	003fd806 	br	805a0c <__alt_mem_onchip_mem+0xff7fda0c>
  805aac:	1800541e 	bne	r3,zero,805c00 <__adddf3+0x470>
  805ab0:	80800044 	addi	r2,r16,1
  805ab4:	1081ffcc 	andi	r2,r2,2047
  805ab8:	00c00044 	movi	r3,1
  805abc:	1880a00e 	bge	r3,r2,805d40 <__adddf3+0x5b0>
  805ac0:	8989c83a 	sub	r4,r17,r6
  805ac4:	8905803a 	cmpltu	r2,r17,r4
  805ac8:	4267c83a 	sub	r19,r8,r9
  805acc:	98a7c83a 	sub	r19,r19,r2
  805ad0:	9880202c 	andhi	r2,r19,128
  805ad4:	10006326 	beq	r2,zero,805c64 <__adddf3+0x4d4>
  805ad8:	3463c83a 	sub	r17,r6,r17
  805adc:	4a07c83a 	sub	r3,r9,r8
  805ae0:	344d803a 	cmpltu	r6,r6,r17
  805ae4:	19a7c83a 	sub	r19,r3,r6
  805ae8:	3825883a 	mov	r18,r7
  805aec:	983f8a1e 	bne	r19,zero,805918 <__alt_mem_onchip_mem+0xff7fd918>
  805af0:	8809883a 	mov	r4,r17
  805af4:	0806c8c0 	call	806c8c <__clzsi2>
  805af8:	10800804 	addi	r2,r2,32
  805afc:	10fffe04 	addi	r3,r2,-8
  805b00:	010007c4 	movi	r4,31
  805b04:	20ff890e 	bge	r4,r3,80592c <__alt_mem_onchip_mem+0xff7fd92c>
  805b08:	10bff604 	addi	r2,r2,-40
  805b0c:	8884983a 	sll	r2,r17,r2
  805b10:	0023883a 	mov	r17,zero
  805b14:	1c3f8c0e 	bge	r3,r16,805948 <__alt_mem_onchip_mem+0xff7fd948>
  805b18:	023fe034 	movhi	r8,65408
  805b1c:	423fffc4 	addi	r8,r8,-1
  805b20:	80e1c83a 	sub	r16,r16,r3
  805b24:	1210703a 	and	r8,r2,r8
  805b28:	003f3806 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805b2c:	9007883a 	mov	r3,r18
  805b30:	0011883a 	mov	r8,zero
  805b34:	0005883a 	mov	r2,zero
  805b38:	003f4c06 	br	80586c <__alt_mem_onchip_mem+0xff7fd86c>
  805b3c:	498cb03a 	or	r6,r9,r6
  805b40:	300cc03a 	cmpne	r6,r6,zero
  805b44:	0007883a 	mov	r3,zero
  805b48:	003f6806 	br	8058ec <__alt_mem_onchip_mem+0xff7fd8ec>
  805b4c:	20009c1e 	bne	r4,zero,805dc0 <__adddf3+0x630>
  805b50:	80800044 	addi	r2,r16,1
  805b54:	1141ffcc 	andi	r5,r2,2047
  805b58:	01000044 	movi	r4,1
  805b5c:	2140670e 	bge	r4,r5,805cfc <__adddf3+0x56c>
  805b60:	0101ffc4 	movi	r4,2047
  805b64:	11007f26 	beq	r2,r4,805d64 <__adddf3+0x5d4>
  805b68:	898d883a 	add	r6,r17,r6
  805b6c:	4247883a 	add	r3,r8,r9
  805b70:	3451803a 	cmpltu	r8,r6,r17
  805b74:	40d1883a 	add	r8,r8,r3
  805b78:	402297fa 	slli	r17,r8,31
  805b7c:	300cd07a 	srli	r6,r6,1
  805b80:	4010d07a 	srli	r8,r8,1
  805b84:	1021883a 	mov	r16,r2
  805b88:	89a2b03a 	or	r17,r17,r6
  805b8c:	003f1f06 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805b90:	0081ffc4 	movi	r2,2047
  805b94:	80bf481e 	bne	r16,r2,8058b8 <__alt_mem_onchip_mem+0xff7fd8b8>
  805b98:	003f1c06 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805b9c:	843ff844 	addi	r16,r16,-31
  805ba0:	01000804 	movi	r4,32
  805ba4:	1406d83a 	srl	r3,r2,r16
  805ba8:	41005026 	beq	r8,r4,805cec <__adddf3+0x55c>
  805bac:	01001004 	movi	r4,64
  805bb0:	2211c83a 	sub	r8,r4,r8
  805bb4:	1204983a 	sll	r2,r2,r8
  805bb8:	88a2b03a 	or	r17,r17,r2
  805bbc:	8822c03a 	cmpne	r17,r17,zero
  805bc0:	1c62b03a 	or	r17,r3,r17
  805bc4:	0011883a 	mov	r8,zero
  805bc8:	0021883a 	mov	r16,zero
  805bcc:	003f7106 	br	805994 <__alt_mem_onchip_mem+0xff7fd994>
  805bd0:	193ff804 	addi	r4,r3,-32
  805bd4:	00800804 	movi	r2,32
  805bd8:	4908d83a 	srl	r4,r9,r4
  805bdc:	18804526 	beq	r3,r2,805cf4 <__adddf3+0x564>
  805be0:	00801004 	movi	r2,64
  805be4:	10c5c83a 	sub	r2,r2,r3
  805be8:	4886983a 	sll	r3,r9,r2
  805bec:	198cb03a 	or	r6,r3,r6
  805bf0:	300cc03a 	cmpne	r6,r6,zero
  805bf4:	218cb03a 	or	r6,r4,r6
  805bf8:	0007883a 	mov	r3,zero
  805bfc:	003f3b06 	br	8058ec <__alt_mem_onchip_mem+0xff7fd8ec>
  805c00:	80002a26 	beq	r16,zero,805cac <__adddf3+0x51c>
  805c04:	0101ffc4 	movi	r4,2047
  805c08:	11006826 	beq	r2,r4,805dac <__adddf3+0x61c>
  805c0c:	00c7c83a 	sub	r3,zero,r3
  805c10:	42002034 	orhi	r8,r8,128
  805c14:	01000e04 	movi	r4,56
  805c18:	20c07c16 	blt	r4,r3,805e0c <__adddf3+0x67c>
  805c1c:	010007c4 	movi	r4,31
  805c20:	20c0da16 	blt	r4,r3,805f8c <__adddf3+0x7fc>
  805c24:	01000804 	movi	r4,32
  805c28:	20c9c83a 	sub	r4,r4,r3
  805c2c:	4114983a 	sll	r10,r8,r4
  805c30:	88cad83a 	srl	r5,r17,r3
  805c34:	8908983a 	sll	r4,r17,r4
  805c38:	40c6d83a 	srl	r3,r8,r3
  805c3c:	5162b03a 	or	r17,r10,r5
  805c40:	2008c03a 	cmpne	r4,r4,zero
  805c44:	8922b03a 	or	r17,r17,r4
  805c48:	3463c83a 	sub	r17,r6,r17
  805c4c:	48c7c83a 	sub	r3,r9,r3
  805c50:	344d803a 	cmpltu	r6,r6,r17
  805c54:	1991c83a 	sub	r8,r3,r6
  805c58:	1021883a 	mov	r16,r2
  805c5c:	3825883a 	mov	r18,r7
  805c60:	003f2706 	br	805900 <__alt_mem_onchip_mem+0xff7fd900>
  805c64:	24d0b03a 	or	r8,r4,r19
  805c68:	40001b1e 	bne	r8,zero,805cd8 <__adddf3+0x548>
  805c6c:	0005883a 	mov	r2,zero
  805c70:	0007883a 	mov	r3,zero
  805c74:	0021883a 	mov	r16,zero
  805c78:	003f4d06 	br	8059b0 <__alt_mem_onchip_mem+0xff7fd9b0>
  805c7c:	008007c4 	movi	r2,31
  805c80:	11003c16 	blt	r2,r4,805d74 <__adddf3+0x5e4>
  805c84:	00800804 	movi	r2,32
  805c88:	1105c83a 	sub	r2,r2,r4
  805c8c:	488e983a 	sll	r7,r9,r2
  805c90:	310ad83a 	srl	r5,r6,r4
  805c94:	3084983a 	sll	r2,r6,r2
  805c98:	4912d83a 	srl	r9,r9,r4
  805c9c:	394ab03a 	or	r5,r7,r5
  805ca0:	1004c03a 	cmpne	r2,r2,zero
  805ca4:	288ab03a 	or	r5,r5,r2
  805ca8:	003f5306 	br	8059f8 <__alt_mem_onchip_mem+0xff7fd9f8>
  805cac:	4448b03a 	or	r4,r8,r17
  805cb0:	20003e26 	beq	r4,zero,805dac <__adddf3+0x61c>
  805cb4:	00c6303a 	nor	r3,zero,r3
  805cb8:	18003a1e 	bne	r3,zero,805da4 <__adddf3+0x614>
  805cbc:	3463c83a 	sub	r17,r6,r17
  805cc0:	4a07c83a 	sub	r3,r9,r8
  805cc4:	344d803a 	cmpltu	r6,r6,r17
  805cc8:	1991c83a 	sub	r8,r3,r6
  805ccc:	1021883a 	mov	r16,r2
  805cd0:	3825883a 	mov	r18,r7
  805cd4:	003f0a06 	br	805900 <__alt_mem_onchip_mem+0xff7fd900>
  805cd8:	2023883a 	mov	r17,r4
  805cdc:	003f0d06 	br	805914 <__alt_mem_onchip_mem+0xff7fd914>
  805ce0:	0081ffc4 	movi	r2,2047
  805ce4:	80bf3f1e 	bne	r16,r2,8059e4 <__alt_mem_onchip_mem+0xff7fd9e4>
  805ce8:	003ec806 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805cec:	0005883a 	mov	r2,zero
  805cf0:	003fb106 	br	805bb8 <__alt_mem_onchip_mem+0xff7fdbb8>
  805cf4:	0007883a 	mov	r3,zero
  805cf8:	003fbc06 	br	805bec <__alt_mem_onchip_mem+0xff7fdbec>
  805cfc:	4444b03a 	or	r2,r8,r17
  805d00:	8000871e 	bne	r16,zero,805f20 <__adddf3+0x790>
  805d04:	1000ba26 	beq	r2,zero,805ff0 <__adddf3+0x860>
  805d08:	4984b03a 	or	r2,r9,r6
  805d0c:	103ebf26 	beq	r2,zero,80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805d10:	8985883a 	add	r2,r17,r6
  805d14:	4247883a 	add	r3,r8,r9
  805d18:	1451803a 	cmpltu	r8,r2,r17
  805d1c:	40d1883a 	add	r8,r8,r3
  805d20:	40c0202c 	andhi	r3,r8,128
  805d24:	1023883a 	mov	r17,r2
  805d28:	183f1a26 	beq	r3,zero,805994 <__alt_mem_onchip_mem+0xff7fd994>
  805d2c:	00bfe034 	movhi	r2,65408
  805d30:	10bfffc4 	addi	r2,r2,-1
  805d34:	2021883a 	mov	r16,r4
  805d38:	4090703a 	and	r8,r8,r2
  805d3c:	003eb306 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805d40:	4444b03a 	or	r2,r8,r17
  805d44:	8000291e 	bne	r16,zero,805dec <__adddf3+0x65c>
  805d48:	10004b1e 	bne	r2,zero,805e78 <__adddf3+0x6e8>
  805d4c:	4990b03a 	or	r8,r9,r6
  805d50:	40008b26 	beq	r8,zero,805f80 <__adddf3+0x7f0>
  805d54:	4811883a 	mov	r8,r9
  805d58:	3023883a 	mov	r17,r6
  805d5c:	3825883a 	mov	r18,r7
  805d60:	003eaa06 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805d64:	1021883a 	mov	r16,r2
  805d68:	0011883a 	mov	r8,zero
  805d6c:	0005883a 	mov	r2,zero
  805d70:	003f0f06 	br	8059b0 <__alt_mem_onchip_mem+0xff7fd9b0>
  805d74:	217ff804 	addi	r5,r4,-32
  805d78:	00800804 	movi	r2,32
  805d7c:	494ad83a 	srl	r5,r9,r5
  805d80:	20807d26 	beq	r4,r2,805f78 <__adddf3+0x7e8>
  805d84:	00801004 	movi	r2,64
  805d88:	1109c83a 	sub	r4,r2,r4
  805d8c:	4912983a 	sll	r9,r9,r4
  805d90:	498cb03a 	or	r6,r9,r6
  805d94:	300cc03a 	cmpne	r6,r6,zero
  805d98:	298ab03a 	or	r5,r5,r6
  805d9c:	0013883a 	mov	r9,zero
  805da0:	003f1506 	br	8059f8 <__alt_mem_onchip_mem+0xff7fd9f8>
  805da4:	0101ffc4 	movi	r4,2047
  805da8:	113f9a1e 	bne	r2,r4,805c14 <__alt_mem_onchip_mem+0xff7fdc14>
  805dac:	4811883a 	mov	r8,r9
  805db0:	3023883a 	mov	r17,r6
  805db4:	1021883a 	mov	r16,r2
  805db8:	3825883a 	mov	r18,r7
  805dbc:	003e9306 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805dc0:	8000161e 	bne	r16,zero,805e1c <__adddf3+0x68c>
  805dc4:	444ab03a 	or	r5,r8,r17
  805dc8:	28005126 	beq	r5,zero,805f10 <__adddf3+0x780>
  805dcc:	0108303a 	nor	r4,zero,r4
  805dd0:	20004d1e 	bne	r4,zero,805f08 <__adddf3+0x778>
  805dd4:	89a3883a 	add	r17,r17,r6
  805dd8:	4253883a 	add	r9,r8,r9
  805ddc:	898d803a 	cmpltu	r6,r17,r6
  805de0:	3251883a 	add	r8,r6,r9
  805de4:	1021883a 	mov	r16,r2
  805de8:	003f0806 	br	805a0c <__alt_mem_onchip_mem+0xff7fda0c>
  805dec:	1000301e 	bne	r2,zero,805eb0 <__adddf3+0x720>
  805df0:	4984b03a 	or	r2,r9,r6
  805df4:	10007126 	beq	r2,zero,805fbc <__adddf3+0x82c>
  805df8:	4811883a 	mov	r8,r9
  805dfc:	3023883a 	mov	r17,r6
  805e00:	3825883a 	mov	r18,r7
  805e04:	0401ffc4 	movi	r16,2047
  805e08:	003e8006 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805e0c:	4462b03a 	or	r17,r8,r17
  805e10:	8822c03a 	cmpne	r17,r17,zero
  805e14:	0007883a 	mov	r3,zero
  805e18:	003f8b06 	br	805c48 <__alt_mem_onchip_mem+0xff7fdc48>
  805e1c:	0141ffc4 	movi	r5,2047
  805e20:	11403b26 	beq	r2,r5,805f10 <__adddf3+0x780>
  805e24:	0109c83a 	sub	r4,zero,r4
  805e28:	42002034 	orhi	r8,r8,128
  805e2c:	01400e04 	movi	r5,56
  805e30:	29006716 	blt	r5,r4,805fd0 <__adddf3+0x840>
  805e34:	014007c4 	movi	r5,31
  805e38:	29007016 	blt	r5,r4,805ffc <__adddf3+0x86c>
  805e3c:	01400804 	movi	r5,32
  805e40:	290bc83a 	sub	r5,r5,r4
  805e44:	4154983a 	sll	r10,r8,r5
  805e48:	890ed83a 	srl	r7,r17,r4
  805e4c:	894a983a 	sll	r5,r17,r5
  805e50:	4108d83a 	srl	r4,r8,r4
  805e54:	51e2b03a 	or	r17,r10,r7
  805e58:	280ac03a 	cmpne	r5,r5,zero
  805e5c:	8962b03a 	or	r17,r17,r5
  805e60:	89a3883a 	add	r17,r17,r6
  805e64:	2253883a 	add	r9,r4,r9
  805e68:	898d803a 	cmpltu	r6,r17,r6
  805e6c:	3251883a 	add	r8,r6,r9
  805e70:	1021883a 	mov	r16,r2
  805e74:	003ee506 	br	805a0c <__alt_mem_onchip_mem+0xff7fda0c>
  805e78:	4984b03a 	or	r2,r9,r6
  805e7c:	103e6326 	beq	r2,zero,80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805e80:	8987c83a 	sub	r3,r17,r6
  805e84:	88c9803a 	cmpltu	r4,r17,r3
  805e88:	4245c83a 	sub	r2,r8,r9
  805e8c:	1105c83a 	sub	r2,r2,r4
  805e90:	1100202c 	andhi	r4,r2,128
  805e94:	203ebb26 	beq	r4,zero,805984 <__alt_mem_onchip_mem+0xff7fd984>
  805e98:	3463c83a 	sub	r17,r6,r17
  805e9c:	4a07c83a 	sub	r3,r9,r8
  805ea0:	344d803a 	cmpltu	r6,r6,r17
  805ea4:	1991c83a 	sub	r8,r3,r6
  805ea8:	3825883a 	mov	r18,r7
  805eac:	003e5706 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805eb0:	4984b03a 	or	r2,r9,r6
  805eb4:	10002e26 	beq	r2,zero,805f70 <__adddf3+0x7e0>
  805eb8:	4004d0fa 	srli	r2,r8,3
  805ebc:	8822d0fa 	srli	r17,r17,3
  805ec0:	4010977a 	slli	r8,r8,29
  805ec4:	10c0022c 	andhi	r3,r2,8
  805ec8:	4462b03a 	or	r17,r8,r17
  805ecc:	18000826 	beq	r3,zero,805ef0 <__adddf3+0x760>
  805ed0:	4808d0fa 	srli	r4,r9,3
  805ed4:	20c0022c 	andhi	r3,r4,8
  805ed8:	1800051e 	bne	r3,zero,805ef0 <__adddf3+0x760>
  805edc:	300cd0fa 	srli	r6,r6,3
  805ee0:	4806977a 	slli	r3,r9,29
  805ee4:	2005883a 	mov	r2,r4
  805ee8:	3825883a 	mov	r18,r7
  805eec:	19a2b03a 	or	r17,r3,r6
  805ef0:	8810d77a 	srli	r8,r17,29
  805ef4:	100490fa 	slli	r2,r2,3
  805ef8:	882290fa 	slli	r17,r17,3
  805efc:	0401ffc4 	movi	r16,2047
  805f00:	4090b03a 	or	r8,r8,r2
  805f04:	003e4106 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805f08:	0141ffc4 	movi	r5,2047
  805f0c:	117fc71e 	bne	r2,r5,805e2c <__alt_mem_onchip_mem+0xff7fde2c>
  805f10:	4811883a 	mov	r8,r9
  805f14:	3023883a 	mov	r17,r6
  805f18:	1021883a 	mov	r16,r2
  805f1c:	003e3b06 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805f20:	10002f26 	beq	r2,zero,805fe0 <__adddf3+0x850>
  805f24:	4984b03a 	or	r2,r9,r6
  805f28:	10001126 	beq	r2,zero,805f70 <__adddf3+0x7e0>
  805f2c:	4004d0fa 	srli	r2,r8,3
  805f30:	8822d0fa 	srli	r17,r17,3
  805f34:	4010977a 	slli	r8,r8,29
  805f38:	10c0022c 	andhi	r3,r2,8
  805f3c:	4462b03a 	or	r17,r8,r17
  805f40:	183feb26 	beq	r3,zero,805ef0 <__alt_mem_onchip_mem+0xff7fdef0>
  805f44:	4808d0fa 	srli	r4,r9,3
  805f48:	20c0022c 	andhi	r3,r4,8
  805f4c:	183fe81e 	bne	r3,zero,805ef0 <__alt_mem_onchip_mem+0xff7fdef0>
  805f50:	300cd0fa 	srli	r6,r6,3
  805f54:	4806977a 	slli	r3,r9,29
  805f58:	2005883a 	mov	r2,r4
  805f5c:	19a2b03a 	or	r17,r3,r6
  805f60:	003fe306 	br	805ef0 <__alt_mem_onchip_mem+0xff7fdef0>
  805f64:	0011883a 	mov	r8,zero
  805f68:	0005883a 	mov	r2,zero
  805f6c:	003e3f06 	br	80586c <__alt_mem_onchip_mem+0xff7fd86c>
  805f70:	0401ffc4 	movi	r16,2047
  805f74:	003e2506 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805f78:	0013883a 	mov	r9,zero
  805f7c:	003f8406 	br	805d90 <__alt_mem_onchip_mem+0xff7fdd90>
  805f80:	0005883a 	mov	r2,zero
  805f84:	0007883a 	mov	r3,zero
  805f88:	003e8906 	br	8059b0 <__alt_mem_onchip_mem+0xff7fd9b0>
  805f8c:	197ff804 	addi	r5,r3,-32
  805f90:	01000804 	movi	r4,32
  805f94:	414ad83a 	srl	r5,r8,r5
  805f98:	19002426 	beq	r3,r4,80602c <__adddf3+0x89c>
  805f9c:	01001004 	movi	r4,64
  805fa0:	20c7c83a 	sub	r3,r4,r3
  805fa4:	40c6983a 	sll	r3,r8,r3
  805fa8:	1c46b03a 	or	r3,r3,r17
  805fac:	1806c03a 	cmpne	r3,r3,zero
  805fb0:	28e2b03a 	or	r17,r5,r3
  805fb4:	0007883a 	mov	r3,zero
  805fb8:	003f2306 	br	805c48 <__alt_mem_onchip_mem+0xff7fdc48>
  805fbc:	0007883a 	mov	r3,zero
  805fc0:	5811883a 	mov	r8,r11
  805fc4:	00bfffc4 	movi	r2,-1
  805fc8:	0401ffc4 	movi	r16,2047
  805fcc:	003e7806 	br	8059b0 <__alt_mem_onchip_mem+0xff7fd9b0>
  805fd0:	4462b03a 	or	r17,r8,r17
  805fd4:	8822c03a 	cmpne	r17,r17,zero
  805fd8:	0009883a 	mov	r4,zero
  805fdc:	003fa006 	br	805e60 <__alt_mem_onchip_mem+0xff7fde60>
  805fe0:	4811883a 	mov	r8,r9
  805fe4:	3023883a 	mov	r17,r6
  805fe8:	0401ffc4 	movi	r16,2047
  805fec:	003e0706 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805ff0:	4811883a 	mov	r8,r9
  805ff4:	3023883a 	mov	r17,r6
  805ff8:	003e0406 	br	80580c <__alt_mem_onchip_mem+0xff7fd80c>
  805ffc:	21fff804 	addi	r7,r4,-32
  806000:	01400804 	movi	r5,32
  806004:	41ced83a 	srl	r7,r8,r7
  806008:	21400a26 	beq	r4,r5,806034 <__adddf3+0x8a4>
  80600c:	01401004 	movi	r5,64
  806010:	2909c83a 	sub	r4,r5,r4
  806014:	4108983a 	sll	r4,r8,r4
  806018:	2448b03a 	or	r4,r4,r17
  80601c:	2008c03a 	cmpne	r4,r4,zero
  806020:	3922b03a 	or	r17,r7,r4
  806024:	0009883a 	mov	r4,zero
  806028:	003f8d06 	br	805e60 <__alt_mem_onchip_mem+0xff7fde60>
  80602c:	0007883a 	mov	r3,zero
  806030:	003fdd06 	br	805fa8 <__alt_mem_onchip_mem+0xff7fdfa8>
  806034:	0009883a 	mov	r4,zero
  806038:	003ff706 	br	806018 <__alt_mem_onchip_mem+0xff7fe018>

0080603c <__gedf2>:
  80603c:	2804d53a 	srli	r2,r5,20
  806040:	3806d53a 	srli	r3,r7,20
  806044:	02000434 	movhi	r8,16
  806048:	423fffc4 	addi	r8,r8,-1
  80604c:	1081ffcc 	andi	r2,r2,2047
  806050:	0241ffc4 	movi	r9,2047
  806054:	2a14703a 	and	r10,r5,r8
  806058:	18c1ffcc 	andi	r3,r3,2047
  80605c:	3a10703a 	and	r8,r7,r8
  806060:	280ad7fa 	srli	r5,r5,31
  806064:	380ed7fa 	srli	r7,r7,31
  806068:	12401d26 	beq	r2,r9,8060e0 <__gedf2+0xa4>
  80606c:	0241ffc4 	movi	r9,2047
  806070:	1a401226 	beq	r3,r9,8060bc <__gedf2+0x80>
  806074:	1000081e 	bne	r2,zero,806098 <__gedf2+0x5c>
  806078:	2296b03a 	or	r11,r4,r10
  80607c:	5813003a 	cmpeq	r9,r11,zero
  806080:	1800091e 	bne	r3,zero,8060a8 <__gedf2+0x6c>
  806084:	3218b03a 	or	r12,r6,r8
  806088:	6000071e 	bne	r12,zero,8060a8 <__gedf2+0x6c>
  80608c:	0005883a 	mov	r2,zero
  806090:	5800101e 	bne	r11,zero,8060d4 <__gedf2+0x98>
  806094:	f800283a 	ret
  806098:	18000c1e 	bne	r3,zero,8060cc <__gedf2+0x90>
  80609c:	3212b03a 	or	r9,r6,r8
  8060a0:	48000c26 	beq	r9,zero,8060d4 <__gedf2+0x98>
  8060a4:	0013883a 	mov	r9,zero
  8060a8:	39c03fcc 	andi	r7,r7,255
  8060ac:	48000826 	beq	r9,zero,8060d0 <__gedf2+0x94>
  8060b0:	38000926 	beq	r7,zero,8060d8 <__gedf2+0x9c>
  8060b4:	00800044 	movi	r2,1
  8060b8:	f800283a 	ret
  8060bc:	3212b03a 	or	r9,r6,r8
  8060c0:	483fec26 	beq	r9,zero,806074 <__alt_mem_onchip_mem+0xff7fe074>
  8060c4:	00bfff84 	movi	r2,-2
  8060c8:	f800283a 	ret
  8060cc:	39c03fcc 	andi	r7,r7,255
  8060d0:	29c00626 	beq	r5,r7,8060ec <__gedf2+0xb0>
  8060d4:	283ff726 	beq	r5,zero,8060b4 <__alt_mem_onchip_mem+0xff7fe0b4>
  8060d8:	00bfffc4 	movi	r2,-1
  8060dc:	f800283a 	ret
  8060e0:	2292b03a 	or	r9,r4,r10
  8060e4:	483fe126 	beq	r9,zero,80606c <__alt_mem_onchip_mem+0xff7fe06c>
  8060e8:	003ff606 	br	8060c4 <__alt_mem_onchip_mem+0xff7fe0c4>
  8060ec:	18bff916 	blt	r3,r2,8060d4 <__alt_mem_onchip_mem+0xff7fe0d4>
  8060f0:	10c00316 	blt	r2,r3,806100 <__gedf2+0xc4>
  8060f4:	42bff736 	bltu	r8,r10,8060d4 <__alt_mem_onchip_mem+0xff7fe0d4>
  8060f8:	52000326 	beq	r10,r8,806108 <__gedf2+0xcc>
  8060fc:	5200042e 	bgeu	r10,r8,806110 <__gedf2+0xd4>
  806100:	283fec1e 	bne	r5,zero,8060b4 <__alt_mem_onchip_mem+0xff7fe0b4>
  806104:	003ff406 	br	8060d8 <__alt_mem_onchip_mem+0xff7fe0d8>
  806108:	313ff236 	bltu	r6,r4,8060d4 <__alt_mem_onchip_mem+0xff7fe0d4>
  80610c:	21bffc36 	bltu	r4,r6,806100 <__alt_mem_onchip_mem+0xff7fe100>
  806110:	0005883a 	mov	r2,zero
  806114:	f800283a 	ret

00806118 <__ledf2>:
  806118:	2804d53a 	srli	r2,r5,20
  80611c:	3810d53a 	srli	r8,r7,20
  806120:	00c00434 	movhi	r3,16
  806124:	18ffffc4 	addi	r3,r3,-1
  806128:	1081ffcc 	andi	r2,r2,2047
  80612c:	0241ffc4 	movi	r9,2047
  806130:	28d4703a 	and	r10,r5,r3
  806134:	4201ffcc 	andi	r8,r8,2047
  806138:	38c6703a 	and	r3,r7,r3
  80613c:	280ad7fa 	srli	r5,r5,31
  806140:	380ed7fa 	srli	r7,r7,31
  806144:	12401f26 	beq	r2,r9,8061c4 <__ledf2+0xac>
  806148:	0241ffc4 	movi	r9,2047
  80614c:	42401426 	beq	r8,r9,8061a0 <__ledf2+0x88>
  806150:	1000091e 	bne	r2,zero,806178 <__ledf2+0x60>
  806154:	2296b03a 	or	r11,r4,r10
  806158:	5813003a 	cmpeq	r9,r11,zero
  80615c:	29403fcc 	andi	r5,r5,255
  806160:	40000a1e 	bne	r8,zero,80618c <__ledf2+0x74>
  806164:	30d8b03a 	or	r12,r6,r3
  806168:	6000081e 	bne	r12,zero,80618c <__ledf2+0x74>
  80616c:	0005883a 	mov	r2,zero
  806170:	5800111e 	bne	r11,zero,8061b8 <__ledf2+0xa0>
  806174:	f800283a 	ret
  806178:	29403fcc 	andi	r5,r5,255
  80617c:	40000c1e 	bne	r8,zero,8061b0 <__ledf2+0x98>
  806180:	30d2b03a 	or	r9,r6,r3
  806184:	48000c26 	beq	r9,zero,8061b8 <__ledf2+0xa0>
  806188:	0013883a 	mov	r9,zero
  80618c:	39c03fcc 	andi	r7,r7,255
  806190:	48000826 	beq	r9,zero,8061b4 <__ledf2+0x9c>
  806194:	38001126 	beq	r7,zero,8061dc <__ledf2+0xc4>
  806198:	00800044 	movi	r2,1
  80619c:	f800283a 	ret
  8061a0:	30d2b03a 	or	r9,r6,r3
  8061a4:	483fea26 	beq	r9,zero,806150 <__alt_mem_onchip_mem+0xff7fe150>
  8061a8:	00800084 	movi	r2,2
  8061ac:	f800283a 	ret
  8061b0:	39c03fcc 	andi	r7,r7,255
  8061b4:	39400726 	beq	r7,r5,8061d4 <__ledf2+0xbc>
  8061b8:	2800081e 	bne	r5,zero,8061dc <__ledf2+0xc4>
  8061bc:	00800044 	movi	r2,1
  8061c0:	f800283a 	ret
  8061c4:	2292b03a 	or	r9,r4,r10
  8061c8:	483fdf26 	beq	r9,zero,806148 <__alt_mem_onchip_mem+0xff7fe148>
  8061cc:	00800084 	movi	r2,2
  8061d0:	f800283a 	ret
  8061d4:	4080030e 	bge	r8,r2,8061e4 <__ledf2+0xcc>
  8061d8:	383fef26 	beq	r7,zero,806198 <__alt_mem_onchip_mem+0xff7fe198>
  8061dc:	00bfffc4 	movi	r2,-1
  8061e0:	f800283a 	ret
  8061e4:	123feb16 	blt	r2,r8,806194 <__alt_mem_onchip_mem+0xff7fe194>
  8061e8:	1abff336 	bltu	r3,r10,8061b8 <__alt_mem_onchip_mem+0xff7fe1b8>
  8061ec:	50c00326 	beq	r10,r3,8061fc <__ledf2+0xe4>
  8061f0:	50c0042e 	bgeu	r10,r3,806204 <__ledf2+0xec>
  8061f4:	283fe81e 	bne	r5,zero,806198 <__alt_mem_onchip_mem+0xff7fe198>
  8061f8:	003ff806 	br	8061dc <__alt_mem_onchip_mem+0xff7fe1dc>
  8061fc:	313fee36 	bltu	r6,r4,8061b8 <__alt_mem_onchip_mem+0xff7fe1b8>
  806200:	21bffc36 	bltu	r4,r6,8061f4 <__alt_mem_onchip_mem+0xff7fe1f4>
  806204:	0005883a 	mov	r2,zero
  806208:	f800283a 	ret

0080620c <__subdf3>:
  80620c:	02000434 	movhi	r8,16
  806210:	423fffc4 	addi	r8,r8,-1
  806214:	defffb04 	addi	sp,sp,-20
  806218:	2a14703a 	and	r10,r5,r8
  80621c:	3812d53a 	srli	r9,r7,20
  806220:	3a10703a 	and	r8,r7,r8
  806224:	2006d77a 	srli	r3,r4,29
  806228:	3004d77a 	srli	r2,r6,29
  80622c:	dc000015 	stw	r16,0(sp)
  806230:	501490fa 	slli	r10,r10,3
  806234:	2820d53a 	srli	r16,r5,20
  806238:	401090fa 	slli	r8,r8,3
  80623c:	dc800215 	stw	r18,8(sp)
  806240:	dc400115 	stw	r17,4(sp)
  806244:	dfc00415 	stw	ra,16(sp)
  806248:	202290fa 	slli	r17,r4,3
  80624c:	dcc00315 	stw	r19,12(sp)
  806250:	4a41ffcc 	andi	r9,r9,2047
  806254:	0101ffc4 	movi	r4,2047
  806258:	2824d7fa 	srli	r18,r5,31
  80625c:	8401ffcc 	andi	r16,r16,2047
  806260:	50c6b03a 	or	r3,r10,r3
  806264:	380ed7fa 	srli	r7,r7,31
  806268:	408ab03a 	or	r5,r8,r2
  80626c:	300c90fa 	slli	r6,r6,3
  806270:	49009626 	beq	r9,r4,8064cc <__subdf3+0x2c0>
  806274:	39c0005c 	xori	r7,r7,1
  806278:	8245c83a 	sub	r2,r16,r9
  80627c:	3c807426 	beq	r7,r18,806450 <__subdf3+0x244>
  806280:	0080af0e 	bge	zero,r2,806540 <__subdf3+0x334>
  806284:	48002a1e 	bne	r9,zero,806330 <__subdf3+0x124>
  806288:	2988b03a 	or	r4,r5,r6
  80628c:	20009a1e 	bne	r4,zero,8064f8 <__subdf3+0x2ec>
  806290:	888001cc 	andi	r2,r17,7
  806294:	10000726 	beq	r2,zero,8062b4 <__subdf3+0xa8>
  806298:	888003cc 	andi	r2,r17,15
  80629c:	01000104 	movi	r4,4
  8062a0:	11000426 	beq	r2,r4,8062b4 <__subdf3+0xa8>
  8062a4:	890b883a 	add	r5,r17,r4
  8062a8:	2c63803a 	cmpltu	r17,r5,r17
  8062ac:	1c47883a 	add	r3,r3,r17
  8062b0:	2823883a 	mov	r17,r5
  8062b4:	1880202c 	andhi	r2,r3,128
  8062b8:	10005926 	beq	r2,zero,806420 <__subdf3+0x214>
  8062bc:	84000044 	addi	r16,r16,1
  8062c0:	0081ffc4 	movi	r2,2047
  8062c4:	8080be26 	beq	r16,r2,8065c0 <__subdf3+0x3b4>
  8062c8:	017fe034 	movhi	r5,65408
  8062cc:	297fffc4 	addi	r5,r5,-1
  8062d0:	1946703a 	and	r3,r3,r5
  8062d4:	1804977a 	slli	r2,r3,29
  8062d8:	1806927a 	slli	r3,r3,9
  8062dc:	8822d0fa 	srli	r17,r17,3
  8062e0:	8401ffcc 	andi	r16,r16,2047
  8062e4:	180ad33a 	srli	r5,r3,12
  8062e8:	9100004c 	andi	r4,r18,1
  8062ec:	1444b03a 	or	r2,r2,r17
  8062f0:	80c1ffcc 	andi	r3,r16,2047
  8062f4:	1820953a 	slli	r16,r3,20
  8062f8:	20c03fcc 	andi	r3,r4,255
  8062fc:	180897fa 	slli	r4,r3,31
  806300:	00c00434 	movhi	r3,16
  806304:	18ffffc4 	addi	r3,r3,-1
  806308:	28c6703a 	and	r3,r5,r3
  80630c:	1c06b03a 	or	r3,r3,r16
  806310:	1906b03a 	or	r3,r3,r4
  806314:	dfc00417 	ldw	ra,16(sp)
  806318:	dcc00317 	ldw	r19,12(sp)
  80631c:	dc800217 	ldw	r18,8(sp)
  806320:	dc400117 	ldw	r17,4(sp)
  806324:	dc000017 	ldw	r16,0(sp)
  806328:	dec00504 	addi	sp,sp,20
  80632c:	f800283a 	ret
  806330:	0101ffc4 	movi	r4,2047
  806334:	813fd626 	beq	r16,r4,806290 <__alt_mem_onchip_mem+0xff7fe290>
  806338:	29402034 	orhi	r5,r5,128
  80633c:	01000e04 	movi	r4,56
  806340:	2080a316 	blt	r4,r2,8065d0 <__subdf3+0x3c4>
  806344:	010007c4 	movi	r4,31
  806348:	2080c616 	blt	r4,r2,806664 <__subdf3+0x458>
  80634c:	01000804 	movi	r4,32
  806350:	2089c83a 	sub	r4,r4,r2
  806354:	2910983a 	sll	r8,r5,r4
  806358:	308ed83a 	srl	r7,r6,r2
  80635c:	3108983a 	sll	r4,r6,r4
  806360:	2884d83a 	srl	r2,r5,r2
  806364:	41ccb03a 	or	r6,r8,r7
  806368:	2008c03a 	cmpne	r4,r4,zero
  80636c:	310cb03a 	or	r6,r6,r4
  806370:	898dc83a 	sub	r6,r17,r6
  806374:	89a3803a 	cmpltu	r17,r17,r6
  806378:	1887c83a 	sub	r3,r3,r2
  80637c:	1c47c83a 	sub	r3,r3,r17
  806380:	3023883a 	mov	r17,r6
  806384:	1880202c 	andhi	r2,r3,128
  806388:	10002326 	beq	r2,zero,806418 <__subdf3+0x20c>
  80638c:	04c02034 	movhi	r19,128
  806390:	9cffffc4 	addi	r19,r19,-1
  806394:	1ce6703a 	and	r19,r3,r19
  806398:	98007a26 	beq	r19,zero,806584 <__subdf3+0x378>
  80639c:	9809883a 	mov	r4,r19
  8063a0:	0806c8c0 	call	806c8c <__clzsi2>
  8063a4:	113ffe04 	addi	r4,r2,-8
  8063a8:	00c007c4 	movi	r3,31
  8063ac:	19007b16 	blt	r3,r4,80659c <__subdf3+0x390>
  8063b0:	00800804 	movi	r2,32
  8063b4:	1105c83a 	sub	r2,r2,r4
  8063b8:	8884d83a 	srl	r2,r17,r2
  8063bc:	9906983a 	sll	r3,r19,r4
  8063c0:	8922983a 	sll	r17,r17,r4
  8063c4:	10c4b03a 	or	r2,r2,r3
  8063c8:	24007816 	blt	r4,r16,8065ac <__subdf3+0x3a0>
  8063cc:	2421c83a 	sub	r16,r4,r16
  8063d0:	80c00044 	addi	r3,r16,1
  8063d4:	010007c4 	movi	r4,31
  8063d8:	20c09516 	blt	r4,r3,806630 <__subdf3+0x424>
  8063dc:	01400804 	movi	r5,32
  8063e0:	28cbc83a 	sub	r5,r5,r3
  8063e4:	88c8d83a 	srl	r4,r17,r3
  8063e8:	8962983a 	sll	r17,r17,r5
  8063ec:	114a983a 	sll	r5,r2,r5
  8063f0:	10c6d83a 	srl	r3,r2,r3
  8063f4:	8804c03a 	cmpne	r2,r17,zero
  8063f8:	290ab03a 	or	r5,r5,r4
  8063fc:	28a2b03a 	or	r17,r5,r2
  806400:	0021883a 	mov	r16,zero
  806404:	003fa206 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806408:	2090b03a 	or	r8,r4,r2
  80640c:	40018e26 	beq	r8,zero,806a48 <__subdf3+0x83c>
  806410:	1007883a 	mov	r3,r2
  806414:	2023883a 	mov	r17,r4
  806418:	888001cc 	andi	r2,r17,7
  80641c:	103f9e1e 	bne	r2,zero,806298 <__alt_mem_onchip_mem+0xff7fe298>
  806420:	1804977a 	slli	r2,r3,29
  806424:	8822d0fa 	srli	r17,r17,3
  806428:	1810d0fa 	srli	r8,r3,3
  80642c:	9100004c 	andi	r4,r18,1
  806430:	1444b03a 	or	r2,r2,r17
  806434:	00c1ffc4 	movi	r3,2047
  806438:	80c02826 	beq	r16,r3,8064dc <__subdf3+0x2d0>
  80643c:	01400434 	movhi	r5,16
  806440:	297fffc4 	addi	r5,r5,-1
  806444:	80e0703a 	and	r16,r16,r3
  806448:	414a703a 	and	r5,r8,r5
  80644c:	003fa806 	br	8062f0 <__alt_mem_onchip_mem+0xff7fe2f0>
  806450:	0080630e 	bge	zero,r2,8065e0 <__subdf3+0x3d4>
  806454:	48003026 	beq	r9,zero,806518 <__subdf3+0x30c>
  806458:	0101ffc4 	movi	r4,2047
  80645c:	813f8c26 	beq	r16,r4,806290 <__alt_mem_onchip_mem+0xff7fe290>
  806460:	29402034 	orhi	r5,r5,128
  806464:	01000e04 	movi	r4,56
  806468:	2080a90e 	bge	r4,r2,806710 <__subdf3+0x504>
  80646c:	298cb03a 	or	r6,r5,r6
  806470:	3012c03a 	cmpne	r9,r6,zero
  806474:	0005883a 	mov	r2,zero
  806478:	4c53883a 	add	r9,r9,r17
  80647c:	4c63803a 	cmpltu	r17,r9,r17
  806480:	10c7883a 	add	r3,r2,r3
  806484:	88c7883a 	add	r3,r17,r3
  806488:	4823883a 	mov	r17,r9
  80648c:	1880202c 	andhi	r2,r3,128
  806490:	1000d026 	beq	r2,zero,8067d4 <__subdf3+0x5c8>
  806494:	84000044 	addi	r16,r16,1
  806498:	0081ffc4 	movi	r2,2047
  80649c:	8080fe26 	beq	r16,r2,806898 <__subdf3+0x68c>
  8064a0:	00bfe034 	movhi	r2,65408
  8064a4:	10bfffc4 	addi	r2,r2,-1
  8064a8:	1886703a 	and	r3,r3,r2
  8064ac:	880ad07a 	srli	r5,r17,1
  8064b0:	180497fa 	slli	r2,r3,31
  8064b4:	8900004c 	andi	r4,r17,1
  8064b8:	2922b03a 	or	r17,r5,r4
  8064bc:	1806d07a 	srli	r3,r3,1
  8064c0:	1462b03a 	or	r17,r2,r17
  8064c4:	3825883a 	mov	r18,r7
  8064c8:	003f7106 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  8064cc:	2984b03a 	or	r2,r5,r6
  8064d0:	103f6826 	beq	r2,zero,806274 <__alt_mem_onchip_mem+0xff7fe274>
  8064d4:	39c03fcc 	andi	r7,r7,255
  8064d8:	003f6706 	br	806278 <__alt_mem_onchip_mem+0xff7fe278>
  8064dc:	4086b03a 	or	r3,r8,r2
  8064e0:	18015226 	beq	r3,zero,806a2c <__subdf3+0x820>
  8064e4:	00c00434 	movhi	r3,16
  8064e8:	41400234 	orhi	r5,r8,8
  8064ec:	18ffffc4 	addi	r3,r3,-1
  8064f0:	28ca703a 	and	r5,r5,r3
  8064f4:	003f7e06 	br	8062f0 <__alt_mem_onchip_mem+0xff7fe2f0>
  8064f8:	10bfffc4 	addi	r2,r2,-1
  8064fc:	1000491e 	bne	r2,zero,806624 <__subdf3+0x418>
  806500:	898fc83a 	sub	r7,r17,r6
  806504:	89e3803a 	cmpltu	r17,r17,r7
  806508:	1947c83a 	sub	r3,r3,r5
  80650c:	1c47c83a 	sub	r3,r3,r17
  806510:	3823883a 	mov	r17,r7
  806514:	003f9b06 	br	806384 <__alt_mem_onchip_mem+0xff7fe384>
  806518:	2988b03a 	or	r4,r5,r6
  80651c:	203f5c26 	beq	r4,zero,806290 <__alt_mem_onchip_mem+0xff7fe290>
  806520:	10bfffc4 	addi	r2,r2,-1
  806524:	1000931e 	bne	r2,zero,806774 <__subdf3+0x568>
  806528:	898d883a 	add	r6,r17,r6
  80652c:	3463803a 	cmpltu	r17,r6,r17
  806530:	1947883a 	add	r3,r3,r5
  806534:	88c7883a 	add	r3,r17,r3
  806538:	3023883a 	mov	r17,r6
  80653c:	003fd306 	br	80648c <__alt_mem_onchip_mem+0xff7fe48c>
  806540:	1000541e 	bne	r2,zero,806694 <__subdf3+0x488>
  806544:	80800044 	addi	r2,r16,1
  806548:	1081ffcc 	andi	r2,r2,2047
  80654c:	01000044 	movi	r4,1
  806550:	2080a20e 	bge	r4,r2,8067dc <__subdf3+0x5d0>
  806554:	8989c83a 	sub	r4,r17,r6
  806558:	8905803a 	cmpltu	r2,r17,r4
  80655c:	1967c83a 	sub	r19,r3,r5
  806560:	98a7c83a 	sub	r19,r19,r2
  806564:	9880202c 	andhi	r2,r19,128
  806568:	10006326 	beq	r2,zero,8066f8 <__subdf3+0x4ec>
  80656c:	3463c83a 	sub	r17,r6,r17
  806570:	28c7c83a 	sub	r3,r5,r3
  806574:	344d803a 	cmpltu	r6,r6,r17
  806578:	19a7c83a 	sub	r19,r3,r6
  80657c:	3825883a 	mov	r18,r7
  806580:	983f861e 	bne	r19,zero,80639c <__alt_mem_onchip_mem+0xff7fe39c>
  806584:	8809883a 	mov	r4,r17
  806588:	0806c8c0 	call	806c8c <__clzsi2>
  80658c:	10800804 	addi	r2,r2,32
  806590:	113ffe04 	addi	r4,r2,-8
  806594:	00c007c4 	movi	r3,31
  806598:	193f850e 	bge	r3,r4,8063b0 <__alt_mem_onchip_mem+0xff7fe3b0>
  80659c:	10bff604 	addi	r2,r2,-40
  8065a0:	8884983a 	sll	r2,r17,r2
  8065a4:	0023883a 	mov	r17,zero
  8065a8:	243f880e 	bge	r4,r16,8063cc <__alt_mem_onchip_mem+0xff7fe3cc>
  8065ac:	00ffe034 	movhi	r3,65408
  8065b0:	18ffffc4 	addi	r3,r3,-1
  8065b4:	8121c83a 	sub	r16,r16,r4
  8065b8:	10c6703a 	and	r3,r2,r3
  8065bc:	003f3406 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  8065c0:	9100004c 	andi	r4,r18,1
  8065c4:	000b883a 	mov	r5,zero
  8065c8:	0005883a 	mov	r2,zero
  8065cc:	003f4806 	br	8062f0 <__alt_mem_onchip_mem+0xff7fe2f0>
  8065d0:	298cb03a 	or	r6,r5,r6
  8065d4:	300cc03a 	cmpne	r6,r6,zero
  8065d8:	0005883a 	mov	r2,zero
  8065dc:	003f6406 	br	806370 <__alt_mem_onchip_mem+0xff7fe370>
  8065e0:	10009a1e 	bne	r2,zero,80684c <__subdf3+0x640>
  8065e4:	82400044 	addi	r9,r16,1
  8065e8:	4881ffcc 	andi	r2,r9,2047
  8065ec:	02800044 	movi	r10,1
  8065f0:	5080670e 	bge	r10,r2,806790 <__subdf3+0x584>
  8065f4:	0081ffc4 	movi	r2,2047
  8065f8:	4880af26 	beq	r9,r2,8068b8 <__subdf3+0x6ac>
  8065fc:	898d883a 	add	r6,r17,r6
  806600:	1945883a 	add	r2,r3,r5
  806604:	3447803a 	cmpltu	r3,r6,r17
  806608:	1887883a 	add	r3,r3,r2
  80660c:	182297fa 	slli	r17,r3,31
  806610:	300cd07a 	srli	r6,r6,1
  806614:	1806d07a 	srli	r3,r3,1
  806618:	4821883a 	mov	r16,r9
  80661c:	89a2b03a 	or	r17,r17,r6
  806620:	003f1b06 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806624:	0101ffc4 	movi	r4,2047
  806628:	813f441e 	bne	r16,r4,80633c <__alt_mem_onchip_mem+0xff7fe33c>
  80662c:	003f1806 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806630:	843ff844 	addi	r16,r16,-31
  806634:	01400804 	movi	r5,32
  806638:	1408d83a 	srl	r4,r2,r16
  80663c:	19405026 	beq	r3,r5,806780 <__subdf3+0x574>
  806640:	01401004 	movi	r5,64
  806644:	28c7c83a 	sub	r3,r5,r3
  806648:	10c4983a 	sll	r2,r2,r3
  80664c:	88a2b03a 	or	r17,r17,r2
  806650:	8822c03a 	cmpne	r17,r17,zero
  806654:	2462b03a 	or	r17,r4,r17
  806658:	0007883a 	mov	r3,zero
  80665c:	0021883a 	mov	r16,zero
  806660:	003f6d06 	br	806418 <__alt_mem_onchip_mem+0xff7fe418>
  806664:	11fff804 	addi	r7,r2,-32
  806668:	01000804 	movi	r4,32
  80666c:	29ced83a 	srl	r7,r5,r7
  806670:	11004526 	beq	r2,r4,806788 <__subdf3+0x57c>
  806674:	01001004 	movi	r4,64
  806678:	2089c83a 	sub	r4,r4,r2
  80667c:	2904983a 	sll	r2,r5,r4
  806680:	118cb03a 	or	r6,r2,r6
  806684:	300cc03a 	cmpne	r6,r6,zero
  806688:	398cb03a 	or	r6,r7,r6
  80668c:	0005883a 	mov	r2,zero
  806690:	003f3706 	br	806370 <__alt_mem_onchip_mem+0xff7fe370>
  806694:	80002a26 	beq	r16,zero,806740 <__subdf3+0x534>
  806698:	0101ffc4 	movi	r4,2047
  80669c:	49006626 	beq	r9,r4,806838 <__subdf3+0x62c>
  8066a0:	0085c83a 	sub	r2,zero,r2
  8066a4:	18c02034 	orhi	r3,r3,128
  8066a8:	01000e04 	movi	r4,56
  8066ac:	20807e16 	blt	r4,r2,8068a8 <__subdf3+0x69c>
  8066b0:	010007c4 	movi	r4,31
  8066b4:	2080e716 	blt	r4,r2,806a54 <__subdf3+0x848>
  8066b8:	01000804 	movi	r4,32
  8066bc:	2089c83a 	sub	r4,r4,r2
  8066c0:	1914983a 	sll	r10,r3,r4
  8066c4:	8890d83a 	srl	r8,r17,r2
  8066c8:	8908983a 	sll	r4,r17,r4
  8066cc:	1884d83a 	srl	r2,r3,r2
  8066d0:	5222b03a 	or	r17,r10,r8
  8066d4:	2006c03a 	cmpne	r3,r4,zero
  8066d8:	88e2b03a 	or	r17,r17,r3
  8066dc:	3463c83a 	sub	r17,r6,r17
  8066e0:	2885c83a 	sub	r2,r5,r2
  8066e4:	344d803a 	cmpltu	r6,r6,r17
  8066e8:	1187c83a 	sub	r3,r2,r6
  8066ec:	4821883a 	mov	r16,r9
  8066f0:	3825883a 	mov	r18,r7
  8066f4:	003f2306 	br	806384 <__alt_mem_onchip_mem+0xff7fe384>
  8066f8:	24d0b03a 	or	r8,r4,r19
  8066fc:	40001b1e 	bne	r8,zero,80676c <__subdf3+0x560>
  806700:	0005883a 	mov	r2,zero
  806704:	0009883a 	mov	r4,zero
  806708:	0021883a 	mov	r16,zero
  80670c:	003f4906 	br	806434 <__alt_mem_onchip_mem+0xff7fe434>
  806710:	010007c4 	movi	r4,31
  806714:	20803a16 	blt	r4,r2,806800 <__subdf3+0x5f4>
  806718:	01000804 	movi	r4,32
  80671c:	2089c83a 	sub	r4,r4,r2
  806720:	2912983a 	sll	r9,r5,r4
  806724:	3090d83a 	srl	r8,r6,r2
  806728:	3108983a 	sll	r4,r6,r4
  80672c:	2884d83a 	srl	r2,r5,r2
  806730:	4a12b03a 	or	r9,r9,r8
  806734:	2008c03a 	cmpne	r4,r4,zero
  806738:	4912b03a 	or	r9,r9,r4
  80673c:	003f4e06 	br	806478 <__alt_mem_onchip_mem+0xff7fe478>
  806740:	1c48b03a 	or	r4,r3,r17
  806744:	20003c26 	beq	r4,zero,806838 <__subdf3+0x62c>
  806748:	0084303a 	nor	r2,zero,r2
  80674c:	1000381e 	bne	r2,zero,806830 <__subdf3+0x624>
  806750:	3463c83a 	sub	r17,r6,r17
  806754:	28c5c83a 	sub	r2,r5,r3
  806758:	344d803a 	cmpltu	r6,r6,r17
  80675c:	1187c83a 	sub	r3,r2,r6
  806760:	4821883a 	mov	r16,r9
  806764:	3825883a 	mov	r18,r7
  806768:	003f0606 	br	806384 <__alt_mem_onchip_mem+0xff7fe384>
  80676c:	2023883a 	mov	r17,r4
  806770:	003f0906 	br	806398 <__alt_mem_onchip_mem+0xff7fe398>
  806774:	0101ffc4 	movi	r4,2047
  806778:	813f3a1e 	bne	r16,r4,806464 <__alt_mem_onchip_mem+0xff7fe464>
  80677c:	003ec406 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806780:	0005883a 	mov	r2,zero
  806784:	003fb106 	br	80664c <__alt_mem_onchip_mem+0xff7fe64c>
  806788:	0005883a 	mov	r2,zero
  80678c:	003fbc06 	br	806680 <__alt_mem_onchip_mem+0xff7fe680>
  806790:	1c44b03a 	or	r2,r3,r17
  806794:	80008e1e 	bne	r16,zero,8069d0 <__subdf3+0x7c4>
  806798:	1000c826 	beq	r2,zero,806abc <__subdf3+0x8b0>
  80679c:	2984b03a 	or	r2,r5,r6
  8067a0:	103ebb26 	beq	r2,zero,806290 <__alt_mem_onchip_mem+0xff7fe290>
  8067a4:	8989883a 	add	r4,r17,r6
  8067a8:	1945883a 	add	r2,r3,r5
  8067ac:	2447803a 	cmpltu	r3,r4,r17
  8067b0:	1887883a 	add	r3,r3,r2
  8067b4:	1880202c 	andhi	r2,r3,128
  8067b8:	2023883a 	mov	r17,r4
  8067bc:	103f1626 	beq	r2,zero,806418 <__alt_mem_onchip_mem+0xff7fe418>
  8067c0:	00bfe034 	movhi	r2,65408
  8067c4:	10bfffc4 	addi	r2,r2,-1
  8067c8:	5021883a 	mov	r16,r10
  8067cc:	1886703a 	and	r3,r3,r2
  8067d0:	003eaf06 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  8067d4:	3825883a 	mov	r18,r7
  8067d8:	003f0f06 	br	806418 <__alt_mem_onchip_mem+0xff7fe418>
  8067dc:	1c44b03a 	or	r2,r3,r17
  8067e0:	8000251e 	bne	r16,zero,806878 <__subdf3+0x66c>
  8067e4:	1000661e 	bne	r2,zero,806980 <__subdf3+0x774>
  8067e8:	2990b03a 	or	r8,r5,r6
  8067ec:	40009626 	beq	r8,zero,806a48 <__subdf3+0x83c>
  8067f0:	2807883a 	mov	r3,r5
  8067f4:	3023883a 	mov	r17,r6
  8067f8:	3825883a 	mov	r18,r7
  8067fc:	003ea406 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806800:	127ff804 	addi	r9,r2,-32
  806804:	01000804 	movi	r4,32
  806808:	2a52d83a 	srl	r9,r5,r9
  80680c:	11008c26 	beq	r2,r4,806a40 <__subdf3+0x834>
  806810:	01001004 	movi	r4,64
  806814:	2085c83a 	sub	r2,r4,r2
  806818:	2884983a 	sll	r2,r5,r2
  80681c:	118cb03a 	or	r6,r2,r6
  806820:	300cc03a 	cmpne	r6,r6,zero
  806824:	4992b03a 	or	r9,r9,r6
  806828:	0005883a 	mov	r2,zero
  80682c:	003f1206 	br	806478 <__alt_mem_onchip_mem+0xff7fe478>
  806830:	0101ffc4 	movi	r4,2047
  806834:	493f9c1e 	bne	r9,r4,8066a8 <__alt_mem_onchip_mem+0xff7fe6a8>
  806838:	2807883a 	mov	r3,r5
  80683c:	3023883a 	mov	r17,r6
  806840:	4821883a 	mov	r16,r9
  806844:	3825883a 	mov	r18,r7
  806848:	003e9106 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  80684c:	80001f1e 	bne	r16,zero,8068cc <__subdf3+0x6c0>
  806850:	1c48b03a 	or	r4,r3,r17
  806854:	20005a26 	beq	r4,zero,8069c0 <__subdf3+0x7b4>
  806858:	0084303a 	nor	r2,zero,r2
  80685c:	1000561e 	bne	r2,zero,8069b8 <__subdf3+0x7ac>
  806860:	89a3883a 	add	r17,r17,r6
  806864:	1945883a 	add	r2,r3,r5
  806868:	898d803a 	cmpltu	r6,r17,r6
  80686c:	3087883a 	add	r3,r6,r2
  806870:	4821883a 	mov	r16,r9
  806874:	003f0506 	br	80648c <__alt_mem_onchip_mem+0xff7fe48c>
  806878:	10002b1e 	bne	r2,zero,806928 <__subdf3+0x71c>
  80687c:	2984b03a 	or	r2,r5,r6
  806880:	10008026 	beq	r2,zero,806a84 <__subdf3+0x878>
  806884:	2807883a 	mov	r3,r5
  806888:	3023883a 	mov	r17,r6
  80688c:	3825883a 	mov	r18,r7
  806890:	0401ffc4 	movi	r16,2047
  806894:	003e7e06 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806898:	3809883a 	mov	r4,r7
  80689c:	0011883a 	mov	r8,zero
  8068a0:	0005883a 	mov	r2,zero
  8068a4:	003ee306 	br	806434 <__alt_mem_onchip_mem+0xff7fe434>
  8068a8:	1c62b03a 	or	r17,r3,r17
  8068ac:	8822c03a 	cmpne	r17,r17,zero
  8068b0:	0005883a 	mov	r2,zero
  8068b4:	003f8906 	br	8066dc <__alt_mem_onchip_mem+0xff7fe6dc>
  8068b8:	3809883a 	mov	r4,r7
  8068bc:	4821883a 	mov	r16,r9
  8068c0:	0011883a 	mov	r8,zero
  8068c4:	0005883a 	mov	r2,zero
  8068c8:	003eda06 	br	806434 <__alt_mem_onchip_mem+0xff7fe434>
  8068cc:	0101ffc4 	movi	r4,2047
  8068d0:	49003b26 	beq	r9,r4,8069c0 <__subdf3+0x7b4>
  8068d4:	0085c83a 	sub	r2,zero,r2
  8068d8:	18c02034 	orhi	r3,r3,128
  8068dc:	01000e04 	movi	r4,56
  8068e0:	20806e16 	blt	r4,r2,806a9c <__subdf3+0x890>
  8068e4:	010007c4 	movi	r4,31
  8068e8:	20807716 	blt	r4,r2,806ac8 <__subdf3+0x8bc>
  8068ec:	01000804 	movi	r4,32
  8068f0:	2089c83a 	sub	r4,r4,r2
  8068f4:	1914983a 	sll	r10,r3,r4
  8068f8:	8890d83a 	srl	r8,r17,r2
  8068fc:	8908983a 	sll	r4,r17,r4
  806900:	1884d83a 	srl	r2,r3,r2
  806904:	5222b03a 	or	r17,r10,r8
  806908:	2006c03a 	cmpne	r3,r4,zero
  80690c:	88e2b03a 	or	r17,r17,r3
  806910:	89a3883a 	add	r17,r17,r6
  806914:	1145883a 	add	r2,r2,r5
  806918:	898d803a 	cmpltu	r6,r17,r6
  80691c:	3087883a 	add	r3,r6,r2
  806920:	4821883a 	mov	r16,r9
  806924:	003ed906 	br	80648c <__alt_mem_onchip_mem+0xff7fe48c>
  806928:	2984b03a 	or	r2,r5,r6
  80692c:	10004226 	beq	r2,zero,806a38 <__subdf3+0x82c>
  806930:	1808d0fa 	srli	r4,r3,3
  806934:	8822d0fa 	srli	r17,r17,3
  806938:	1806977a 	slli	r3,r3,29
  80693c:	2080022c 	andhi	r2,r4,8
  806940:	1c62b03a 	or	r17,r3,r17
  806944:	10000826 	beq	r2,zero,806968 <__subdf3+0x75c>
  806948:	2812d0fa 	srli	r9,r5,3
  80694c:	4880022c 	andhi	r2,r9,8
  806950:	1000051e 	bne	r2,zero,806968 <__subdf3+0x75c>
  806954:	300cd0fa 	srli	r6,r6,3
  806958:	2804977a 	slli	r2,r5,29
  80695c:	4809883a 	mov	r4,r9
  806960:	3825883a 	mov	r18,r7
  806964:	11a2b03a 	or	r17,r2,r6
  806968:	8806d77a 	srli	r3,r17,29
  80696c:	200890fa 	slli	r4,r4,3
  806970:	882290fa 	slli	r17,r17,3
  806974:	0401ffc4 	movi	r16,2047
  806978:	1906b03a 	or	r3,r3,r4
  80697c:	003e4406 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806980:	2984b03a 	or	r2,r5,r6
  806984:	103e4226 	beq	r2,zero,806290 <__alt_mem_onchip_mem+0xff7fe290>
  806988:	8989c83a 	sub	r4,r17,r6
  80698c:	8911803a 	cmpltu	r8,r17,r4
  806990:	1945c83a 	sub	r2,r3,r5
  806994:	1205c83a 	sub	r2,r2,r8
  806998:	1200202c 	andhi	r8,r2,128
  80699c:	403e9a26 	beq	r8,zero,806408 <__alt_mem_onchip_mem+0xff7fe408>
  8069a0:	3463c83a 	sub	r17,r6,r17
  8069a4:	28c5c83a 	sub	r2,r5,r3
  8069a8:	344d803a 	cmpltu	r6,r6,r17
  8069ac:	1187c83a 	sub	r3,r2,r6
  8069b0:	3825883a 	mov	r18,r7
  8069b4:	003e3606 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  8069b8:	0101ffc4 	movi	r4,2047
  8069bc:	493fc71e 	bne	r9,r4,8068dc <__alt_mem_onchip_mem+0xff7fe8dc>
  8069c0:	2807883a 	mov	r3,r5
  8069c4:	3023883a 	mov	r17,r6
  8069c8:	4821883a 	mov	r16,r9
  8069cc:	003e3006 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  8069d0:	10003626 	beq	r2,zero,806aac <__subdf3+0x8a0>
  8069d4:	2984b03a 	or	r2,r5,r6
  8069d8:	10001726 	beq	r2,zero,806a38 <__subdf3+0x82c>
  8069dc:	1808d0fa 	srli	r4,r3,3
  8069e0:	8822d0fa 	srli	r17,r17,3
  8069e4:	1806977a 	slli	r3,r3,29
  8069e8:	2080022c 	andhi	r2,r4,8
  8069ec:	1c62b03a 	or	r17,r3,r17
  8069f0:	10000726 	beq	r2,zero,806a10 <__subdf3+0x804>
  8069f4:	2812d0fa 	srli	r9,r5,3
  8069f8:	4880022c 	andhi	r2,r9,8
  8069fc:	1000041e 	bne	r2,zero,806a10 <__subdf3+0x804>
  806a00:	300cd0fa 	srli	r6,r6,3
  806a04:	2804977a 	slli	r2,r5,29
  806a08:	4809883a 	mov	r4,r9
  806a0c:	11a2b03a 	or	r17,r2,r6
  806a10:	8806d77a 	srli	r3,r17,29
  806a14:	200890fa 	slli	r4,r4,3
  806a18:	882290fa 	slli	r17,r17,3
  806a1c:	3825883a 	mov	r18,r7
  806a20:	1906b03a 	or	r3,r3,r4
  806a24:	0401ffc4 	movi	r16,2047
  806a28:	003e1906 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806a2c:	000b883a 	mov	r5,zero
  806a30:	0005883a 	mov	r2,zero
  806a34:	003e2e06 	br	8062f0 <__alt_mem_onchip_mem+0xff7fe2f0>
  806a38:	0401ffc4 	movi	r16,2047
  806a3c:	003e1406 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806a40:	0005883a 	mov	r2,zero
  806a44:	003f7506 	br	80681c <__alt_mem_onchip_mem+0xff7fe81c>
  806a48:	0005883a 	mov	r2,zero
  806a4c:	0009883a 	mov	r4,zero
  806a50:	003e7806 	br	806434 <__alt_mem_onchip_mem+0xff7fe434>
  806a54:	123ff804 	addi	r8,r2,-32
  806a58:	01000804 	movi	r4,32
  806a5c:	1a10d83a 	srl	r8,r3,r8
  806a60:	11002526 	beq	r2,r4,806af8 <__subdf3+0x8ec>
  806a64:	01001004 	movi	r4,64
  806a68:	2085c83a 	sub	r2,r4,r2
  806a6c:	1884983a 	sll	r2,r3,r2
  806a70:	1444b03a 	or	r2,r2,r17
  806a74:	1004c03a 	cmpne	r2,r2,zero
  806a78:	40a2b03a 	or	r17,r8,r2
  806a7c:	0005883a 	mov	r2,zero
  806a80:	003f1606 	br	8066dc <__alt_mem_onchip_mem+0xff7fe6dc>
  806a84:	02000434 	movhi	r8,16
  806a88:	0009883a 	mov	r4,zero
  806a8c:	423fffc4 	addi	r8,r8,-1
  806a90:	00bfffc4 	movi	r2,-1
  806a94:	0401ffc4 	movi	r16,2047
  806a98:	003e6606 	br	806434 <__alt_mem_onchip_mem+0xff7fe434>
  806a9c:	1c62b03a 	or	r17,r3,r17
  806aa0:	8822c03a 	cmpne	r17,r17,zero
  806aa4:	0005883a 	mov	r2,zero
  806aa8:	003f9906 	br	806910 <__alt_mem_onchip_mem+0xff7fe910>
  806aac:	2807883a 	mov	r3,r5
  806ab0:	3023883a 	mov	r17,r6
  806ab4:	0401ffc4 	movi	r16,2047
  806ab8:	003df506 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806abc:	2807883a 	mov	r3,r5
  806ac0:	3023883a 	mov	r17,r6
  806ac4:	003df206 	br	806290 <__alt_mem_onchip_mem+0xff7fe290>
  806ac8:	123ff804 	addi	r8,r2,-32
  806acc:	01000804 	movi	r4,32
  806ad0:	1a10d83a 	srl	r8,r3,r8
  806ad4:	11000a26 	beq	r2,r4,806b00 <__subdf3+0x8f4>
  806ad8:	01001004 	movi	r4,64
  806adc:	2085c83a 	sub	r2,r4,r2
  806ae0:	1884983a 	sll	r2,r3,r2
  806ae4:	1444b03a 	or	r2,r2,r17
  806ae8:	1004c03a 	cmpne	r2,r2,zero
  806aec:	40a2b03a 	or	r17,r8,r2
  806af0:	0005883a 	mov	r2,zero
  806af4:	003f8606 	br	806910 <__alt_mem_onchip_mem+0xff7fe910>
  806af8:	0005883a 	mov	r2,zero
  806afc:	003fdc06 	br	806a70 <__alt_mem_onchip_mem+0xff7fea70>
  806b00:	0005883a 	mov	r2,zero
  806b04:	003ff706 	br	806ae4 <__alt_mem_onchip_mem+0xff7feae4>

00806b08 <__floatsidf>:
  806b08:	defffd04 	addi	sp,sp,-12
  806b0c:	dfc00215 	stw	ra,8(sp)
  806b10:	dc400115 	stw	r17,4(sp)
  806b14:	dc000015 	stw	r16,0(sp)
  806b18:	20002b26 	beq	r4,zero,806bc8 <__floatsidf+0xc0>
  806b1c:	2023883a 	mov	r17,r4
  806b20:	2020d7fa 	srli	r16,r4,31
  806b24:	20002d16 	blt	r4,zero,806bdc <__floatsidf+0xd4>
  806b28:	8809883a 	mov	r4,r17
  806b2c:	0806c8c0 	call	806c8c <__clzsi2>
  806b30:	01410784 	movi	r5,1054
  806b34:	288bc83a 	sub	r5,r5,r2
  806b38:	01010cc4 	movi	r4,1075
  806b3c:	2149c83a 	sub	r4,r4,r5
  806b40:	00c007c4 	movi	r3,31
  806b44:	1900160e 	bge	r3,r4,806ba0 <__floatsidf+0x98>
  806b48:	00c104c4 	movi	r3,1043
  806b4c:	1947c83a 	sub	r3,r3,r5
  806b50:	88c6983a 	sll	r3,r17,r3
  806b54:	00800434 	movhi	r2,16
  806b58:	10bfffc4 	addi	r2,r2,-1
  806b5c:	1886703a 	and	r3,r3,r2
  806b60:	2941ffcc 	andi	r5,r5,2047
  806b64:	800d883a 	mov	r6,r16
  806b68:	0005883a 	mov	r2,zero
  806b6c:	280a953a 	slli	r5,r5,20
  806b70:	31803fcc 	andi	r6,r6,255
  806b74:	01000434 	movhi	r4,16
  806b78:	300c97fa 	slli	r6,r6,31
  806b7c:	213fffc4 	addi	r4,r4,-1
  806b80:	1906703a 	and	r3,r3,r4
  806b84:	1946b03a 	or	r3,r3,r5
  806b88:	1986b03a 	or	r3,r3,r6
  806b8c:	dfc00217 	ldw	ra,8(sp)
  806b90:	dc400117 	ldw	r17,4(sp)
  806b94:	dc000017 	ldw	r16,0(sp)
  806b98:	dec00304 	addi	sp,sp,12
  806b9c:	f800283a 	ret
  806ba0:	00c002c4 	movi	r3,11
  806ba4:	1887c83a 	sub	r3,r3,r2
  806ba8:	88c6d83a 	srl	r3,r17,r3
  806bac:	8904983a 	sll	r2,r17,r4
  806bb0:	01000434 	movhi	r4,16
  806bb4:	213fffc4 	addi	r4,r4,-1
  806bb8:	2941ffcc 	andi	r5,r5,2047
  806bbc:	1906703a 	and	r3,r3,r4
  806bc0:	800d883a 	mov	r6,r16
  806bc4:	003fe906 	br	806b6c <__alt_mem_onchip_mem+0xff7feb6c>
  806bc8:	000d883a 	mov	r6,zero
  806bcc:	000b883a 	mov	r5,zero
  806bd0:	0007883a 	mov	r3,zero
  806bd4:	0005883a 	mov	r2,zero
  806bd8:	003fe406 	br	806b6c <__alt_mem_onchip_mem+0xff7feb6c>
  806bdc:	0123c83a 	sub	r17,zero,r4
  806be0:	003fd106 	br	806b28 <__alt_mem_onchip_mem+0xff7feb28>

00806be4 <__floatunsidf>:
  806be4:	defffe04 	addi	sp,sp,-8
  806be8:	dc000015 	stw	r16,0(sp)
  806bec:	dfc00115 	stw	ra,4(sp)
  806bf0:	2021883a 	mov	r16,r4
  806bf4:	20002226 	beq	r4,zero,806c80 <__floatunsidf+0x9c>
  806bf8:	0806c8c0 	call	806c8c <__clzsi2>
  806bfc:	01010784 	movi	r4,1054
  806c00:	2089c83a 	sub	r4,r4,r2
  806c04:	01810cc4 	movi	r6,1075
  806c08:	310dc83a 	sub	r6,r6,r4
  806c0c:	00c007c4 	movi	r3,31
  806c10:	1980120e 	bge	r3,r6,806c5c <__floatunsidf+0x78>
  806c14:	00c104c4 	movi	r3,1043
  806c18:	1907c83a 	sub	r3,r3,r4
  806c1c:	80ca983a 	sll	r5,r16,r3
  806c20:	00800434 	movhi	r2,16
  806c24:	10bfffc4 	addi	r2,r2,-1
  806c28:	2101ffcc 	andi	r4,r4,2047
  806c2c:	0021883a 	mov	r16,zero
  806c30:	288a703a 	and	r5,r5,r2
  806c34:	2008953a 	slli	r4,r4,20
  806c38:	00c00434 	movhi	r3,16
  806c3c:	18ffffc4 	addi	r3,r3,-1
  806c40:	28c6703a 	and	r3,r5,r3
  806c44:	8005883a 	mov	r2,r16
  806c48:	1906b03a 	or	r3,r3,r4
  806c4c:	dfc00117 	ldw	ra,4(sp)
  806c50:	dc000017 	ldw	r16,0(sp)
  806c54:	dec00204 	addi	sp,sp,8
  806c58:	f800283a 	ret
  806c5c:	00c002c4 	movi	r3,11
  806c60:	188bc83a 	sub	r5,r3,r2
  806c64:	814ad83a 	srl	r5,r16,r5
  806c68:	00c00434 	movhi	r3,16
  806c6c:	18ffffc4 	addi	r3,r3,-1
  806c70:	81a0983a 	sll	r16,r16,r6
  806c74:	2101ffcc 	andi	r4,r4,2047
  806c78:	28ca703a 	and	r5,r5,r3
  806c7c:	003fed06 	br	806c34 <__alt_mem_onchip_mem+0xff7fec34>
  806c80:	0009883a 	mov	r4,zero
  806c84:	000b883a 	mov	r5,zero
  806c88:	003fea06 	br	806c34 <__alt_mem_onchip_mem+0xff7fec34>

00806c8c <__clzsi2>:
  806c8c:	00bfffd4 	movui	r2,65535
  806c90:	11000536 	bltu	r2,r4,806ca8 <__clzsi2+0x1c>
  806c94:	00803fc4 	movi	r2,255
  806c98:	11000f36 	bltu	r2,r4,806cd8 <__clzsi2+0x4c>
  806c9c:	00800804 	movi	r2,32
  806ca0:	0007883a 	mov	r3,zero
  806ca4:	00000506 	br	806cbc <__clzsi2+0x30>
  806ca8:	00804034 	movhi	r2,256
  806cac:	10bfffc4 	addi	r2,r2,-1
  806cb0:	11000c2e 	bgeu	r2,r4,806ce4 <__clzsi2+0x58>
  806cb4:	00800204 	movi	r2,8
  806cb8:	00c00604 	movi	r3,24
  806cbc:	20c8d83a 	srl	r4,r4,r3
  806cc0:	00c02074 	movhi	r3,129
  806cc4:	18dbfbc4 	addi	r3,r3,28655
  806cc8:	1909883a 	add	r4,r3,r4
  806ccc:	20c00003 	ldbu	r3,0(r4)
  806cd0:	10c5c83a 	sub	r2,r2,r3
  806cd4:	f800283a 	ret
  806cd8:	00800604 	movi	r2,24
  806cdc:	00c00204 	movi	r3,8
  806ce0:	003ff606 	br	806cbc <__alt_mem_onchip_mem+0xff7fecbc>
  806ce4:	00800404 	movi	r2,16
  806ce8:	1007883a 	mov	r3,r2
  806cec:	003ff306 	br	806cbc <__alt_mem_onchip_mem+0xff7fecbc>

00806cf0 <_fopen_r>:
  806cf0:	defffa04 	addi	sp,sp,-24
  806cf4:	3005883a 	mov	r2,r6
  806cf8:	dcc00415 	stw	r19,16(sp)
  806cfc:	d80d883a 	mov	r6,sp
  806d00:	2827883a 	mov	r19,r5
  806d04:	100b883a 	mov	r5,r2
  806d08:	dc800315 	stw	r18,12(sp)
  806d0c:	dfc00515 	stw	ra,20(sp)
  806d10:	dc400215 	stw	r17,8(sp)
  806d14:	dc000115 	stw	r16,4(sp)
  806d18:	2025883a 	mov	r18,r4
  806d1c:	080c8280 	call	80c828 <__sflags>
  806d20:	10002726 	beq	r2,zero,806dc0 <_fopen_r+0xd0>
  806d24:	9009883a 	mov	r4,r18
  806d28:	1023883a 	mov	r17,r2
  806d2c:	080c6a80 	call	80c6a8 <__sfp>
  806d30:	1021883a 	mov	r16,r2
  806d34:	10002226 	beq	r2,zero,806dc0 <_fopen_r+0xd0>
  806d38:	d9800017 	ldw	r6,0(sp)
  806d3c:	01c06d84 	movi	r7,438
  806d40:	980b883a 	mov	r5,r19
  806d44:	9009883a 	mov	r4,r18
  806d48:	0807f140 	call	807f14 <_open_r>
  806d4c:	10001916 	blt	r2,zero,806db4 <_fopen_r+0xc4>
  806d50:	8080038d 	sth	r2,14(r16)
  806d54:	00802074 	movhi	r2,129
  806d58:	10a0ab04 	addi	r2,r2,-32084
  806d5c:	80800815 	stw	r2,32(r16)
  806d60:	00802074 	movhi	r2,129
  806d64:	10a0c204 	addi	r2,r2,-31992
  806d68:	80800915 	stw	r2,36(r16)
  806d6c:	00802074 	movhi	r2,129
  806d70:	10a0e104 	addi	r2,r2,-31868
  806d74:	80800a15 	stw	r2,40(r16)
  806d78:	00802074 	movhi	r2,129
  806d7c:	10a0f804 	addi	r2,r2,-31776
  806d80:	8440030d 	sth	r17,12(r16)
  806d84:	84000715 	stw	r16,28(r16)
  806d88:	80800b15 	stw	r2,44(r16)
  806d8c:	8c40400c 	andi	r17,r17,256
  806d90:	88000d1e 	bne	r17,zero,806dc8 <_fopen_r+0xd8>
  806d94:	8005883a 	mov	r2,r16
  806d98:	dfc00517 	ldw	ra,20(sp)
  806d9c:	dcc00417 	ldw	r19,16(sp)
  806da0:	dc800317 	ldw	r18,12(sp)
  806da4:	dc400217 	ldw	r17,8(sp)
  806da8:	dc000117 	ldw	r16,4(sp)
  806dac:	dec00604 	addi	sp,sp,24
  806db0:	f800283a 	ret
  806db4:	080c7e80 	call	80c7e8 <__sfp_lock_acquire>
  806db8:	8000030d 	sth	zero,12(r16)
  806dbc:	080c7ec0 	call	80c7ec <__sfp_lock_release>
  806dc0:	0005883a 	mov	r2,zero
  806dc4:	003ff406 	br	806d98 <__alt_mem_onchip_mem+0xff7fed98>
  806dc8:	01c00084 	movi	r7,2
  806dcc:	000d883a 	mov	r6,zero
  806dd0:	800b883a 	mov	r5,r16
  806dd4:	9009883a 	mov	r4,r18
  806dd8:	0806e480 	call	806e48 <_fseek_r>
  806ddc:	8005883a 	mov	r2,r16
  806de0:	003fed06 	br	806d98 <__alt_mem_onchip_mem+0xff7fed98>

00806de4 <fopen>:
  806de4:	008020b4 	movhi	r2,130
  806de8:	10a48504 	addi	r2,r2,-28140
  806dec:	280d883a 	mov	r6,r5
  806df0:	200b883a 	mov	r5,r4
  806df4:	11000017 	ldw	r4,0(r2)
  806df8:	0806cf01 	jmpi	806cf0 <_fopen_r>

00806dfc <_fprintf_r>:
  806dfc:	defffe04 	addi	sp,sp,-8
  806e00:	2809883a 	mov	r4,r5
  806e04:	300b883a 	mov	r5,r6
  806e08:	dfc00015 	stw	ra,0(sp)
  806e0c:	d9c00115 	stw	r7,4(sp)
  806e10:	d9800104 	addi	r6,sp,4
  806e14:	080a6780 	call	80a678 <__vfprintf_internal>
  806e18:	dfc00017 	ldw	ra,0(sp)
  806e1c:	dec00204 	addi	sp,sp,8
  806e20:	f800283a 	ret

00806e24 <fprintf>:
  806e24:	defffd04 	addi	sp,sp,-12
  806e28:	dfc00015 	stw	ra,0(sp)
  806e2c:	d9800115 	stw	r6,4(sp)
  806e30:	d9c00215 	stw	r7,8(sp)
  806e34:	d9800104 	addi	r6,sp,4
  806e38:	080a6780 	call	80a678 <__vfprintf_internal>
  806e3c:	dfc00017 	ldw	ra,0(sp)
  806e40:	dec00304 	addi	sp,sp,12
  806e44:	f800283a 	ret

00806e48 <_fseek_r>:
  806e48:	0806e681 	jmpi	806e68 <_fseeko_r>

00806e4c <fseek>:
  806e4c:	008020b4 	movhi	r2,130
  806e50:	10a48504 	addi	r2,r2,-28140
  806e54:	300f883a 	mov	r7,r6
  806e58:	280d883a 	mov	r6,r5
  806e5c:	200b883a 	mov	r5,r4
  806e60:	11000017 	ldw	r4,0(r2)
  806e64:	0806e681 	jmpi	806e68 <_fseeko_r>

00806e68 <_fseeko_r>:
  806e68:	deffe804 	addi	sp,sp,-96
  806e6c:	dd401415 	stw	r21,80(sp)
  806e70:	dc801115 	stw	r18,68(sp)
  806e74:	dc401015 	stw	r17,64(sp)
  806e78:	dc000f15 	stw	r16,60(sp)
  806e7c:	dfc01715 	stw	ra,92(sp)
  806e80:	ddc01615 	stw	r23,88(sp)
  806e84:	dd801515 	stw	r22,84(sp)
  806e88:	dd001315 	stw	r20,76(sp)
  806e8c:	dcc01215 	stw	r19,72(sp)
  806e90:	2023883a 	mov	r17,r4
  806e94:	2821883a 	mov	r16,r5
  806e98:	302b883a 	mov	r21,r6
  806e9c:	3825883a 	mov	r18,r7
  806ea0:	20000226 	beq	r4,zero,806eac <_fseeko_r+0x44>
  806ea4:	20800e17 	ldw	r2,56(r4)
  806ea8:	10005a26 	beq	r2,zero,807014 <_fseeko_r+0x1ac>
  806eac:	8080030b 	ldhu	r2,12(r16)
  806eb0:	00c04204 	movi	r3,264
  806eb4:	1080420c 	andi	r2,r2,264
  806eb8:	10c05b26 	beq	r2,r3,807028 <_fseeko_r+0x1c0>
  806ebc:	85000a17 	ldw	r20,40(r16)
  806ec0:	a000f626 	beq	r20,zero,80729c <_fseeko_r+0x434>
  806ec4:	00800044 	movi	r2,1
  806ec8:	90803e26 	beq	r18,r2,806fc4 <_fseeko_r+0x15c>
  806ecc:	00800084 	movi	r2,2
  806ed0:	90801026 	beq	r18,r2,806f14 <_fseeko_r+0xac>
  806ed4:	90000f26 	beq	r18,zero,806f14 <_fseeko_r+0xac>
  806ed8:	00800584 	movi	r2,22
  806edc:	88800015 	stw	r2,0(r17)
  806ee0:	04ffffc4 	movi	r19,-1
  806ee4:	9805883a 	mov	r2,r19
  806ee8:	dfc01717 	ldw	ra,92(sp)
  806eec:	ddc01617 	ldw	r23,88(sp)
  806ef0:	dd801517 	ldw	r22,84(sp)
  806ef4:	dd401417 	ldw	r21,80(sp)
  806ef8:	dd001317 	ldw	r20,76(sp)
  806efc:	dcc01217 	ldw	r19,72(sp)
  806f00:	dc801117 	ldw	r18,68(sp)
  806f04:	dc401017 	ldw	r17,64(sp)
  806f08:	dc000f17 	ldw	r16,60(sp)
  806f0c:	dec01804 	addi	sp,sp,96
  806f10:	f800283a 	ret
  806f14:	80800417 	ldw	r2,16(r16)
  806f18:	002f883a 	mov	r23,zero
  806f1c:	0027883a 	mov	r19,zero
  806f20:	1000cb26 	beq	r2,zero,807250 <_fseeko_r+0x3e8>
  806f24:	8080030b 	ldhu	r2,12(r16)
  806f28:	10c2068c 	andi	r3,r2,2074
  806f2c:	1800071e 	bne	r3,zero,806f4c <_fseeko_r+0xe4>
  806f30:	10c1000c 	andi	r3,r2,1024
  806f34:	1800451e 	bne	r3,zero,80704c <_fseeko_r+0x1e4>
  806f38:	00c02074 	movhi	r3,129
  806f3c:	18e0e104 	addi	r3,r3,-31868
  806f40:	a0c0b726 	beq	r20,r3,807220 <_fseeko_r+0x3b8>
  806f44:	10820014 	ori	r2,r2,2048
  806f48:	8080030d 	sth	r2,12(r16)
  806f4c:	800b883a 	mov	r5,r16
  806f50:	8809883a 	mov	r4,r17
  806f54:	080c3fc0 	call	80c3fc <_fflush_r>
  806f58:	1027883a 	mov	r19,r2
  806f5c:	103fe01e 	bne	r2,zero,806ee0 <__alt_mem_onchip_mem+0xff7feee0>
  806f60:	81400717 	ldw	r5,28(r16)
  806f64:	900f883a 	mov	r7,r18
  806f68:	a80d883a 	mov	r6,r21
  806f6c:	8809883a 	mov	r4,r17
  806f70:	a03ee83a 	callr	r20
  806f74:	00ffffc4 	movi	r3,-1
  806f78:	10ffd926 	beq	r2,r3,806ee0 <__alt_mem_onchip_mem+0xff7feee0>
  806f7c:	81400c17 	ldw	r5,48(r16)
  806f80:	28000526 	beq	r5,zero,806f98 <_fseeko_r+0x130>
  806f84:	80801004 	addi	r2,r16,64
  806f88:	28800226 	beq	r5,r2,806f94 <_fseeko_r+0x12c>
  806f8c:	8809883a 	mov	r4,r17
  806f90:	080c9f80 	call	80c9f8 <_free_r>
  806f94:	80000c15 	stw	zero,48(r16)
  806f98:	8080030b 	ldhu	r2,12(r16)
  806f9c:	80c00417 	ldw	r3,16(r16)
  806fa0:	80000115 	stw	zero,4(r16)
  806fa4:	10bdf7cc 	andi	r2,r2,63455
  806fa8:	80c00015 	stw	r3,0(r16)
  806fac:	8080030d 	sth	r2,12(r16)
  806fb0:	01800204 	movi	r6,8
  806fb4:	000b883a 	mov	r5,zero
  806fb8:	81001704 	addi	r4,r16,92
  806fbc:	0807dec0 	call	807dec <memset>
  806fc0:	003fc806 	br	806ee4 <__alt_mem_onchip_mem+0xff7feee4>
  806fc4:	800b883a 	mov	r5,r16
  806fc8:	8809883a 	mov	r4,r17
  806fcc:	080c3fc0 	call	80c3fc <_fflush_r>
  806fd0:	8080030b 	ldhu	r2,12(r16)
  806fd4:	10c4000c 	andi	r3,r2,4096
  806fd8:	18008726 	beq	r3,zero,8071f8 <_fseeko_r+0x390>
  806fdc:	84c01417 	ldw	r19,80(r16)
  806fe0:	10c0010c 	andi	r3,r2,4
  806fe4:	1800431e 	bne	r3,zero,8070f4 <_fseeko_r+0x28c>
  806fe8:	1080020c 	andi	r2,r2,8
  806fec:	10008026 	beq	r2,zero,8071f0 <_fseeko_r+0x388>
  806ff0:	80c00017 	ldw	r3,0(r16)
  806ff4:	80800417 	ldw	r2,16(r16)
  806ff8:	18000226 	beq	r3,zero,807004 <_fseeko_r+0x19c>
  806ffc:	1887c83a 	sub	r3,r3,r2
  807000:	98e7883a 	add	r19,r19,r3
  807004:	aceb883a 	add	r21,r21,r19
  807008:	05c00044 	movi	r23,1
  80700c:	0025883a 	mov	r18,zero
  807010:	003fc306 	br	806f20 <__alt_mem_onchip_mem+0xff7fef20>
  807014:	080c7d80 	call	80c7d8 <__sinit>
  807018:	8080030b 	ldhu	r2,12(r16)
  80701c:	00c04204 	movi	r3,264
  807020:	1080420c 	andi	r2,r2,264
  807024:	10ffa51e 	bne	r2,r3,806ebc <__alt_mem_onchip_mem+0xff7feebc>
  807028:	800b883a 	mov	r5,r16
  80702c:	8809883a 	mov	r4,r17
  807030:	080c3fc0 	call	80c3fc <_fflush_r>
  807034:	003fa106 	br	806ebc <__alt_mem_onchip_mem+0xff7feebc>
  807038:	8080030b 	ldhu	r2,12(r16)
  80703c:	00c10004 	movi	r3,1024
  807040:	80c01315 	stw	r3,76(r16)
  807044:	10c4b03a 	or	r2,r2,r3
  807048:	8080030d 	sth	r2,12(r16)
  80704c:	9000311e 	bne	r18,zero,807114 <_fseeko_r+0x2ac>
  807050:	a82d883a 	mov	r22,r21
  807054:	b800371e 	bne	r23,zero,807134 <_fseeko_r+0x2cc>
  807058:	8080030b 	ldhu	r2,12(r16)
  80705c:	1084000c 	andi	r2,r2,4096
  807060:	10007f26 	beq	r2,zero,807260 <_fseeko_r+0x3f8>
  807064:	80801417 	ldw	r2,80(r16)
  807068:	81800117 	ldw	r6,4(r16)
  80706c:	81400c17 	ldw	r5,48(r16)
  807070:	11a7c83a 	sub	r19,r2,r6
  807074:	28008226 	beq	r5,zero,807280 <_fseeko_r+0x418>
  807078:	81c00f17 	ldw	r7,60(r16)
  80707c:	99e7c83a 	sub	r19,r19,r7
  807080:	81000e17 	ldw	r4,56(r16)
  807084:	80800417 	ldw	r2,16(r16)
  807088:	99a7883a 	add	r19,r19,r6
  80708c:	2087c83a 	sub	r3,r4,r2
  807090:	98e7c83a 	sub	r19,r19,r3
  807094:	38c7883a 	add	r3,r7,r3
  807098:	b4c02b16 	blt	r22,r19,807148 <_fseeko_r+0x2e0>
  80709c:	98c9883a 	add	r4,r19,r3
  8070a0:	b100292e 	bgeu	r22,r4,807148 <_fseeko_r+0x2e0>
  8070a4:	b4e7c83a 	sub	r19,r22,r19
  8070a8:	14c5883a 	add	r2,r2,r19
  8070ac:	1ce7c83a 	sub	r19,r3,r19
  8070b0:	80800015 	stw	r2,0(r16)
  8070b4:	84c00115 	stw	r19,4(r16)
  8070b8:	28000526 	beq	r5,zero,8070d0 <_fseeko_r+0x268>
  8070bc:	80801004 	addi	r2,r16,64
  8070c0:	28800226 	beq	r5,r2,8070cc <_fseeko_r+0x264>
  8070c4:	8809883a 	mov	r4,r17
  8070c8:	080c9f80 	call	80c9f8 <_free_r>
  8070cc:	80000c15 	stw	zero,48(r16)
  8070d0:	8080030b 	ldhu	r2,12(r16)
  8070d4:	01800204 	movi	r6,8
  8070d8:	000b883a 	mov	r5,zero
  8070dc:	10bff7cc 	andi	r2,r2,65503
  8070e0:	8080030d 	sth	r2,12(r16)
  8070e4:	81001704 	addi	r4,r16,92
  8070e8:	0807dec0 	call	807dec <memset>
  8070ec:	0027883a 	mov	r19,zero
  8070f0:	003f7c06 	br	806ee4 <__alt_mem_onchip_mem+0xff7feee4>
  8070f4:	80c00117 	ldw	r3,4(r16)
  8070f8:	80800c17 	ldw	r2,48(r16)
  8070fc:	98e7c83a 	sub	r19,r19,r3
  807100:	10003b26 	beq	r2,zero,8071f0 <_fseeko_r+0x388>
  807104:	80c00f17 	ldw	r3,60(r16)
  807108:	80800417 	ldw	r2,16(r16)
  80710c:	98e7c83a 	sub	r19,r19,r3
  807110:	003fbc06 	br	807004 <__alt_mem_onchip_mem+0xff7ff004>
  807114:	8140038f 	ldh	r5,14(r16)
  807118:	d80d883a 	mov	r6,sp
  80711c:	8809883a 	mov	r4,r17
  807120:	08072c80 	call	8072c8 <_fstat_r>
  807124:	103f891e 	bne	r2,zero,806f4c <__alt_mem_onchip_mem+0xff7fef4c>
  807128:	dd800417 	ldw	r22,16(sp)
  80712c:	adad883a 	add	r22,r21,r22
  807130:	b83fc926 	beq	r23,zero,807058 <__alt_mem_onchip_mem+0xff7ff058>
  807134:	81400c17 	ldw	r5,48(r16)
  807138:	81800117 	ldw	r6,4(r16)
  80713c:	28005026 	beq	r5,zero,807280 <_fseeko_r+0x418>
  807140:	81c00f17 	ldw	r7,60(r16)
  807144:	003fce06 	br	807080 <__alt_mem_onchip_mem+0xff7ff080>
  807148:	84c01317 	ldw	r19,76(r16)
  80714c:	81400717 	ldw	r5,28(r16)
  807150:	000f883a 	mov	r7,zero
  807154:	04e7c83a 	sub	r19,zero,r19
  807158:	9da6703a 	and	r19,r19,r22
  80715c:	980d883a 	mov	r6,r19
  807160:	8809883a 	mov	r4,r17
  807164:	a03ee83a 	callr	r20
  807168:	00ffffc4 	movi	r3,-1
  80716c:	10ff7726 	beq	r2,r3,806f4c <__alt_mem_onchip_mem+0xff7fef4c>
  807170:	80800417 	ldw	r2,16(r16)
  807174:	81400c17 	ldw	r5,48(r16)
  807178:	80000115 	stw	zero,4(r16)
  80717c:	80800015 	stw	r2,0(r16)
  807180:	28000526 	beq	r5,zero,807198 <_fseeko_r+0x330>
  807184:	80801004 	addi	r2,r16,64
  807188:	28800226 	beq	r5,r2,807194 <_fseeko_r+0x32c>
  80718c:	8809883a 	mov	r4,r17
  807190:	080c9f80 	call	80c9f8 <_free_r>
  807194:	80000c15 	stw	zero,48(r16)
  807198:	8080030b 	ldhu	r2,12(r16)
  80719c:	b4e7c83a 	sub	r19,r22,r19
  8071a0:	10bff7cc 	andi	r2,r2,65503
  8071a4:	8080030d 	sth	r2,12(r16)
  8071a8:	98000b26 	beq	r19,zero,8071d8 <_fseeko_r+0x370>
  8071ac:	800b883a 	mov	r5,r16
  8071b0:	8809883a 	mov	r4,r17
  8071b4:	08080840 	call	808084 <__srefill_r>
  8071b8:	103f641e 	bne	r2,zero,806f4c <__alt_mem_onchip_mem+0xff7fef4c>
  8071bc:	80800117 	ldw	r2,4(r16)
  8071c0:	14ff6236 	bltu	r2,r19,806f4c <__alt_mem_onchip_mem+0xff7fef4c>
  8071c4:	80c00017 	ldw	r3,0(r16)
  8071c8:	14c5c83a 	sub	r2,r2,r19
  8071cc:	80800115 	stw	r2,4(r16)
  8071d0:	1ce7883a 	add	r19,r3,r19
  8071d4:	84c00015 	stw	r19,0(r16)
  8071d8:	01800204 	movi	r6,8
  8071dc:	000b883a 	mov	r5,zero
  8071e0:	81001704 	addi	r4,r16,92
  8071e4:	0807dec0 	call	807dec <memset>
  8071e8:	0027883a 	mov	r19,zero
  8071ec:	003f3d06 	br	806ee4 <__alt_mem_onchip_mem+0xff7feee4>
  8071f0:	80800417 	ldw	r2,16(r16)
  8071f4:	003f8306 	br	807004 <__alt_mem_onchip_mem+0xff7ff004>
  8071f8:	81400717 	ldw	r5,28(r16)
  8071fc:	900f883a 	mov	r7,r18
  807200:	000d883a 	mov	r6,zero
  807204:	8809883a 	mov	r4,r17
  807208:	a03ee83a 	callr	r20
  80720c:	1027883a 	mov	r19,r2
  807210:	00bfffc4 	movi	r2,-1
  807214:	98bf3226 	beq	r19,r2,806ee0 <__alt_mem_onchip_mem+0xff7feee0>
  807218:	8080030b 	ldhu	r2,12(r16)
  80721c:	003f7006 	br	806fe0 <__alt_mem_onchip_mem+0xff7fefe0>
  807220:	8140038f 	ldh	r5,14(r16)
  807224:	283f4716 	blt	r5,zero,806f44 <__alt_mem_onchip_mem+0xff7fef44>
  807228:	d80d883a 	mov	r6,sp
  80722c:	8809883a 	mov	r4,r17
  807230:	08072c80 	call	8072c8 <_fstat_r>
  807234:	1000041e 	bne	r2,zero,807248 <_fseeko_r+0x3e0>
  807238:	d8800117 	ldw	r2,4(sp)
  80723c:	00e00014 	movui	r3,32768
  807240:	10bc000c 	andi	r2,r2,61440
  807244:	10ff7c26 	beq	r2,r3,807038 <__alt_mem_onchip_mem+0xff7ff038>
  807248:	8080030b 	ldhu	r2,12(r16)
  80724c:	003f3d06 	br	806f44 <__alt_mem_onchip_mem+0xff7fef44>
  807250:	800b883a 	mov	r5,r16
  807254:	8809883a 	mov	r4,r17
  807258:	08074240 	call	807424 <__smakebuf_r>
  80725c:	003f3106 	br	806f24 <__alt_mem_onchip_mem+0xff7fef24>
  807260:	81400717 	ldw	r5,28(r16)
  807264:	01c00044 	movi	r7,1
  807268:	000d883a 	mov	r6,zero
  80726c:	8809883a 	mov	r4,r17
  807270:	a03ee83a 	callr	r20
  807274:	00ffffc4 	movi	r3,-1
  807278:	10ff7b1e 	bne	r2,r3,807068 <__alt_mem_onchip_mem+0xff7ff068>
  80727c:	003f3306 	br	806f4c <__alt_mem_onchip_mem+0xff7fef4c>
  807280:	80c00017 	ldw	r3,0(r16)
  807284:	80800417 	ldw	r2,16(r16)
  807288:	000b883a 	mov	r5,zero
  80728c:	1887c83a 	sub	r3,r3,r2
  807290:	98e7c83a 	sub	r19,r19,r3
  807294:	30c7883a 	add	r3,r6,r3
  807298:	003f7f06 	br	807098 <__alt_mem_onchip_mem+0xff7ff098>
  80729c:	00800744 	movi	r2,29
  8072a0:	88800015 	stw	r2,0(r17)
  8072a4:	04ffffc4 	movi	r19,-1
  8072a8:	003f0e06 	br	806ee4 <__alt_mem_onchip_mem+0xff7feee4>

008072ac <fseeko>:
  8072ac:	008020b4 	movhi	r2,130
  8072b0:	10a48504 	addi	r2,r2,-28140
  8072b4:	300f883a 	mov	r7,r6
  8072b8:	280d883a 	mov	r6,r5
  8072bc:	200b883a 	mov	r5,r4
  8072c0:	11000017 	ldw	r4,0(r2)
  8072c4:	0806e681 	jmpi	806e68 <_fseeko_r>

008072c8 <_fstat_r>:
  8072c8:	defffd04 	addi	sp,sp,-12
  8072cc:	2805883a 	mov	r2,r5
  8072d0:	dc000015 	stw	r16,0(sp)
  8072d4:	040020b4 	movhi	r16,130
  8072d8:	dc400115 	stw	r17,4(sp)
  8072dc:	842bd504 	addi	r16,r16,-20652
  8072e0:	2023883a 	mov	r17,r4
  8072e4:	300b883a 	mov	r5,r6
  8072e8:	1009883a 	mov	r4,r2
  8072ec:	dfc00215 	stw	ra,8(sp)
  8072f0:	80000015 	stw	zero,0(r16)
  8072f4:	0812e400 	call	812e40 <fstat>
  8072f8:	00ffffc4 	movi	r3,-1
  8072fc:	10c00526 	beq	r2,r3,807314 <_fstat_r+0x4c>
  807300:	dfc00217 	ldw	ra,8(sp)
  807304:	dc400117 	ldw	r17,4(sp)
  807308:	dc000017 	ldw	r16,0(sp)
  80730c:	dec00304 	addi	sp,sp,12
  807310:	f800283a 	ret
  807314:	80c00017 	ldw	r3,0(r16)
  807318:	183ff926 	beq	r3,zero,807300 <__alt_mem_onchip_mem+0xff7ff300>
  80731c:	88c00015 	stw	r3,0(r17)
  807320:	003ff706 	br	807300 <__alt_mem_onchip_mem+0xff7ff300>

00807324 <_fwrite_r>:
  807324:	defff504 	addi	sp,sp,-44
  807328:	dc800815 	stw	r18,32(sp)
  80732c:	39a5383a 	mul	r18,r7,r6
  807330:	d8800304 	addi	r2,sp,12
  807334:	d8800015 	stw	r2,0(sp)
  807338:	00800044 	movi	r2,1
  80733c:	dcc00915 	stw	r19,36(sp)
  807340:	dc400715 	stw	r17,28(sp)
  807344:	dc000615 	stw	r16,24(sp)
  807348:	d9400315 	stw	r5,12(sp)
  80734c:	dfc00a15 	stw	ra,40(sp)
  807350:	dc800415 	stw	r18,16(sp)
  807354:	dc800215 	stw	r18,8(sp)
  807358:	d8800115 	stw	r2,4(sp)
  80735c:	3027883a 	mov	r19,r6
  807360:	3821883a 	mov	r16,r7
  807364:	2023883a 	mov	r17,r4
  807368:	d9400b17 	ldw	r5,44(sp)
  80736c:	20000226 	beq	r4,zero,807378 <_fwrite_r+0x54>
  807370:	20800e17 	ldw	r2,56(r4)
  807374:	10001a26 	beq	r2,zero,8073e0 <_fwrite_r+0xbc>
  807378:	2880030b 	ldhu	r2,12(r5)
  80737c:	10c8000c 	andi	r3,r2,8192
  807380:	1800061e 	bne	r3,zero,80739c <_fwrite_r+0x78>
  807384:	29001917 	ldw	r4,100(r5)
  807388:	00f7ffc4 	movi	r3,-8193
  80738c:	10880014 	ori	r2,r2,8192
  807390:	20c6703a 	and	r3,r4,r3
  807394:	2880030d 	sth	r2,12(r5)
  807398:	28c01915 	stw	r3,100(r5)
  80739c:	d80d883a 	mov	r6,sp
  8073a0:	8809883a 	mov	r4,r17
  8073a4:	080cd080 	call	80cd08 <__sfvwrite_r>
  8073a8:	10000b26 	beq	r2,zero,8073d8 <_fwrite_r+0xb4>
  8073ac:	d9000217 	ldw	r4,8(sp)
  8073b0:	980b883a 	mov	r5,r19
  8073b4:	9109c83a 	sub	r4,r18,r4
  8073b8:	08119dc0 	call	8119dc <__udivsi3>
  8073bc:	dfc00a17 	ldw	ra,40(sp)
  8073c0:	dcc00917 	ldw	r19,36(sp)
  8073c4:	dc800817 	ldw	r18,32(sp)
  8073c8:	dc400717 	ldw	r17,28(sp)
  8073cc:	dc000617 	ldw	r16,24(sp)
  8073d0:	dec00b04 	addi	sp,sp,44
  8073d4:	f800283a 	ret
  8073d8:	8005883a 	mov	r2,r16
  8073dc:	003ff706 	br	8073bc <__alt_mem_onchip_mem+0xff7ff3bc>
  8073e0:	d9400515 	stw	r5,20(sp)
  8073e4:	080c7d80 	call	80c7d8 <__sinit>
  8073e8:	d9400517 	ldw	r5,20(sp)
  8073ec:	003fe206 	br	807378 <__alt_mem_onchip_mem+0xff7ff378>

008073f0 <fwrite>:
  8073f0:	defffe04 	addi	sp,sp,-8
  8073f4:	008020b4 	movhi	r2,130
  8073f8:	d9c00015 	stw	r7,0(sp)
  8073fc:	10a48504 	addi	r2,r2,-28140
  807400:	300f883a 	mov	r7,r6
  807404:	280d883a 	mov	r6,r5
  807408:	200b883a 	mov	r5,r4
  80740c:	11000017 	ldw	r4,0(r2)
  807410:	dfc00115 	stw	ra,4(sp)
  807414:	08073240 	call	807324 <_fwrite_r>
  807418:	dfc00117 	ldw	ra,4(sp)
  80741c:	dec00204 	addi	sp,sp,8
  807420:	f800283a 	ret

00807424 <__smakebuf_r>:
  807424:	2880030b 	ldhu	r2,12(r5)
  807428:	10c0008c 	andi	r3,r2,2
  80742c:	1800411e 	bne	r3,zero,807534 <__smakebuf_r+0x110>
  807430:	deffec04 	addi	sp,sp,-80
  807434:	dc000f15 	stw	r16,60(sp)
  807438:	2821883a 	mov	r16,r5
  80743c:	2940038f 	ldh	r5,14(r5)
  807440:	dc401015 	stw	r17,64(sp)
  807444:	dfc01315 	stw	ra,76(sp)
  807448:	dcc01215 	stw	r19,72(sp)
  80744c:	dc801115 	stw	r18,68(sp)
  807450:	2023883a 	mov	r17,r4
  807454:	28001c16 	blt	r5,zero,8074c8 <__smakebuf_r+0xa4>
  807458:	d80d883a 	mov	r6,sp
  80745c:	08072c80 	call	8072c8 <_fstat_r>
  807460:	10001816 	blt	r2,zero,8074c4 <__smakebuf_r+0xa0>
  807464:	d8800117 	ldw	r2,4(sp)
  807468:	00e00014 	movui	r3,32768
  80746c:	10bc000c 	andi	r2,r2,61440
  807470:	14c80020 	cmpeqi	r19,r2,8192
  807474:	10c03726 	beq	r2,r3,807554 <__smakebuf_r+0x130>
  807478:	80c0030b 	ldhu	r3,12(r16)
  80747c:	18c20014 	ori	r3,r3,2048
  807480:	80c0030d 	sth	r3,12(r16)
  807484:	00c80004 	movi	r3,8192
  807488:	10c0521e 	bne	r2,r3,8075d4 <__smakebuf_r+0x1b0>
  80748c:	8140038f 	ldh	r5,14(r16)
  807490:	8809883a 	mov	r4,r17
  807494:	080d34c0 	call	80d34c <_isatty_r>
  807498:	10004c26 	beq	r2,zero,8075cc <__smakebuf_r+0x1a8>
  80749c:	8080030b 	ldhu	r2,12(r16)
  8074a0:	80c010c4 	addi	r3,r16,67
  8074a4:	80c00015 	stw	r3,0(r16)
  8074a8:	10800054 	ori	r2,r2,1
  8074ac:	8080030d 	sth	r2,12(r16)
  8074b0:	00800044 	movi	r2,1
  8074b4:	80c00415 	stw	r3,16(r16)
  8074b8:	80800515 	stw	r2,20(r16)
  8074bc:	04810004 	movi	r18,1024
  8074c0:	00000706 	br	8074e0 <__smakebuf_r+0xbc>
  8074c4:	8080030b 	ldhu	r2,12(r16)
  8074c8:	10c0200c 	andi	r3,r2,128
  8074cc:	18001f1e 	bne	r3,zero,80754c <__smakebuf_r+0x128>
  8074d0:	04810004 	movi	r18,1024
  8074d4:	10820014 	ori	r2,r2,2048
  8074d8:	8080030d 	sth	r2,12(r16)
  8074dc:	0027883a 	mov	r19,zero
  8074e0:	900b883a 	mov	r5,r18
  8074e4:	8809883a 	mov	r4,r17
  8074e8:	08075e00 	call	8075e0 <_malloc_r>
  8074ec:	10002c26 	beq	r2,zero,8075a0 <__smakebuf_r+0x17c>
  8074f0:	80c0030b 	ldhu	r3,12(r16)
  8074f4:	01002074 	movhi	r4,129
  8074f8:	21312404 	addi	r4,r4,-15216
  8074fc:	89000f15 	stw	r4,60(r17)
  807500:	18c02014 	ori	r3,r3,128
  807504:	80c0030d 	sth	r3,12(r16)
  807508:	80800015 	stw	r2,0(r16)
  80750c:	80800415 	stw	r2,16(r16)
  807510:	84800515 	stw	r18,20(r16)
  807514:	98001a1e 	bne	r19,zero,807580 <__smakebuf_r+0x15c>
  807518:	dfc01317 	ldw	ra,76(sp)
  80751c:	dcc01217 	ldw	r19,72(sp)
  807520:	dc801117 	ldw	r18,68(sp)
  807524:	dc401017 	ldw	r17,64(sp)
  807528:	dc000f17 	ldw	r16,60(sp)
  80752c:	dec01404 	addi	sp,sp,80
  807530:	f800283a 	ret
  807534:	288010c4 	addi	r2,r5,67
  807538:	28800015 	stw	r2,0(r5)
  80753c:	28800415 	stw	r2,16(r5)
  807540:	00800044 	movi	r2,1
  807544:	28800515 	stw	r2,20(r5)
  807548:	f800283a 	ret
  80754c:	04801004 	movi	r18,64
  807550:	003fe006 	br	8074d4 <__alt_mem_onchip_mem+0xff7ff4d4>
  807554:	81000a17 	ldw	r4,40(r16)
  807558:	00c02074 	movhi	r3,129
  80755c:	18e0e104 	addi	r3,r3,-31868
  807560:	20ffc51e 	bne	r4,r3,807478 <__alt_mem_onchip_mem+0xff7ff478>
  807564:	8080030b 	ldhu	r2,12(r16)
  807568:	04810004 	movi	r18,1024
  80756c:	84801315 	stw	r18,76(r16)
  807570:	1484b03a 	or	r2,r2,r18
  807574:	8080030d 	sth	r2,12(r16)
  807578:	0027883a 	mov	r19,zero
  80757c:	003fd806 	br	8074e0 <__alt_mem_onchip_mem+0xff7ff4e0>
  807580:	8140038f 	ldh	r5,14(r16)
  807584:	8809883a 	mov	r4,r17
  807588:	080d34c0 	call	80d34c <_isatty_r>
  80758c:	103fe226 	beq	r2,zero,807518 <__alt_mem_onchip_mem+0xff7ff518>
  807590:	8080030b 	ldhu	r2,12(r16)
  807594:	10800054 	ori	r2,r2,1
  807598:	8080030d 	sth	r2,12(r16)
  80759c:	003fde06 	br	807518 <__alt_mem_onchip_mem+0xff7ff518>
  8075a0:	8080030b 	ldhu	r2,12(r16)
  8075a4:	10c0800c 	andi	r3,r2,512
  8075a8:	183fdb1e 	bne	r3,zero,807518 <__alt_mem_onchip_mem+0xff7ff518>
  8075ac:	10800094 	ori	r2,r2,2
  8075b0:	80c010c4 	addi	r3,r16,67
  8075b4:	8080030d 	sth	r2,12(r16)
  8075b8:	00800044 	movi	r2,1
  8075bc:	80c00015 	stw	r3,0(r16)
  8075c0:	80c00415 	stw	r3,16(r16)
  8075c4:	80800515 	stw	r2,20(r16)
  8075c8:	003fd306 	br	807518 <__alt_mem_onchip_mem+0xff7ff518>
  8075cc:	04810004 	movi	r18,1024
  8075d0:	003fc306 	br	8074e0 <__alt_mem_onchip_mem+0xff7ff4e0>
  8075d4:	0027883a 	mov	r19,zero
  8075d8:	04810004 	movi	r18,1024
  8075dc:	003fc006 	br	8074e0 <__alt_mem_onchip_mem+0xff7ff4e0>

008075e0 <_malloc_r>:
  8075e0:	defff504 	addi	sp,sp,-44
  8075e4:	dc800315 	stw	r18,12(sp)
  8075e8:	dfc00a15 	stw	ra,40(sp)
  8075ec:	df000915 	stw	fp,36(sp)
  8075f0:	ddc00815 	stw	r23,32(sp)
  8075f4:	dd800715 	stw	r22,28(sp)
  8075f8:	dd400615 	stw	r21,24(sp)
  8075fc:	dd000515 	stw	r20,20(sp)
  807600:	dcc00415 	stw	r19,16(sp)
  807604:	dc400215 	stw	r17,8(sp)
  807608:	dc000115 	stw	r16,4(sp)
  80760c:	288002c4 	addi	r2,r5,11
  807610:	00c00584 	movi	r3,22
  807614:	2025883a 	mov	r18,r4
  807618:	18807f2e 	bgeu	r3,r2,807818 <_malloc_r+0x238>
  80761c:	047ffe04 	movi	r17,-8
  807620:	1462703a 	and	r17,r2,r17
  807624:	8800a316 	blt	r17,zero,8078b4 <_malloc_r+0x2d4>
  807628:	8940a236 	bltu	r17,r5,8078b4 <_malloc_r+0x2d4>
  80762c:	08133c80 	call	8133c8 <__malloc_lock>
  807630:	00807dc4 	movi	r2,503
  807634:	1441e92e 	bgeu	r2,r17,807ddc <_malloc_r+0x7fc>
  807638:	8804d27a 	srli	r2,r17,9
  80763c:	1000a126 	beq	r2,zero,8078c4 <_malloc_r+0x2e4>
  807640:	00c00104 	movi	r3,4
  807644:	18811e36 	bltu	r3,r2,807ac0 <_malloc_r+0x4e0>
  807648:	8804d1ba 	srli	r2,r17,6
  80764c:	12000e44 	addi	r8,r2,57
  807650:	11c00e04 	addi	r7,r2,56
  807654:	4209883a 	add	r4,r8,r8
  807658:	04c02074 	movhi	r19,129
  80765c:	2109883a 	add	r4,r4,r4
  807660:	9cde6904 	addi	r19,r19,31140
  807664:	2109883a 	add	r4,r4,r4
  807668:	9909883a 	add	r4,r19,r4
  80766c:	24000117 	ldw	r16,4(r4)
  807670:	213ffe04 	addi	r4,r4,-8
  807674:	24009726 	beq	r4,r16,8078d4 <_malloc_r+0x2f4>
  807678:	80800117 	ldw	r2,4(r16)
  80767c:	01bfff04 	movi	r6,-4
  807680:	014003c4 	movi	r5,15
  807684:	1184703a 	and	r2,r2,r6
  807688:	1447c83a 	sub	r3,r2,r17
  80768c:	28c00716 	blt	r5,r3,8076ac <_malloc_r+0xcc>
  807690:	1800920e 	bge	r3,zero,8078dc <_malloc_r+0x2fc>
  807694:	84000317 	ldw	r16,12(r16)
  807698:	24008e26 	beq	r4,r16,8078d4 <_malloc_r+0x2f4>
  80769c:	80800117 	ldw	r2,4(r16)
  8076a0:	1184703a 	and	r2,r2,r6
  8076a4:	1447c83a 	sub	r3,r2,r17
  8076a8:	28fff90e 	bge	r5,r3,807690 <__alt_mem_onchip_mem+0xff7ff690>
  8076ac:	3809883a 	mov	r4,r7
  8076b0:	01802074 	movhi	r6,129
  8076b4:	9c000417 	ldw	r16,16(r19)
  8076b8:	319e6904 	addi	r6,r6,31140
  8076bc:	32000204 	addi	r8,r6,8
  8076c0:	82013426 	beq	r16,r8,807b94 <_malloc_r+0x5b4>
  8076c4:	80c00117 	ldw	r3,4(r16)
  8076c8:	00bfff04 	movi	r2,-4
  8076cc:	188e703a 	and	r7,r3,r2
  8076d0:	3c45c83a 	sub	r2,r7,r17
  8076d4:	00c003c4 	movi	r3,15
  8076d8:	18811f16 	blt	r3,r2,807b58 <_malloc_r+0x578>
  8076dc:	32000515 	stw	r8,20(r6)
  8076e0:	32000415 	stw	r8,16(r6)
  8076e4:	10007f0e 	bge	r2,zero,8078e4 <_malloc_r+0x304>
  8076e8:	00807fc4 	movi	r2,511
  8076ec:	11c0fd36 	bltu	r2,r7,807ae4 <_malloc_r+0x504>
  8076f0:	3806d0fa 	srli	r3,r7,3
  8076f4:	01c00044 	movi	r7,1
  8076f8:	30800117 	ldw	r2,4(r6)
  8076fc:	19400044 	addi	r5,r3,1
  807700:	294b883a 	add	r5,r5,r5
  807704:	1807d0ba 	srai	r3,r3,2
  807708:	294b883a 	add	r5,r5,r5
  80770c:	294b883a 	add	r5,r5,r5
  807710:	298b883a 	add	r5,r5,r6
  807714:	38c6983a 	sll	r3,r7,r3
  807718:	29c00017 	ldw	r7,0(r5)
  80771c:	2a7ffe04 	addi	r9,r5,-8
  807720:	1886b03a 	or	r3,r3,r2
  807724:	82400315 	stw	r9,12(r16)
  807728:	81c00215 	stw	r7,8(r16)
  80772c:	30c00115 	stw	r3,4(r6)
  807730:	2c000015 	stw	r16,0(r5)
  807734:	3c000315 	stw	r16,12(r7)
  807738:	2005d0ba 	srai	r2,r4,2
  80773c:	01400044 	movi	r5,1
  807740:	288a983a 	sll	r5,r5,r2
  807744:	19406f36 	bltu	r3,r5,807904 <_malloc_r+0x324>
  807748:	28c4703a 	and	r2,r5,r3
  80774c:	10000a1e 	bne	r2,zero,807778 <_malloc_r+0x198>
  807750:	00bfff04 	movi	r2,-4
  807754:	294b883a 	add	r5,r5,r5
  807758:	2088703a 	and	r4,r4,r2
  80775c:	28c4703a 	and	r2,r5,r3
  807760:	21000104 	addi	r4,r4,4
  807764:	1000041e 	bne	r2,zero,807778 <_malloc_r+0x198>
  807768:	294b883a 	add	r5,r5,r5
  80776c:	28c4703a 	and	r2,r5,r3
  807770:	21000104 	addi	r4,r4,4
  807774:	103ffc26 	beq	r2,zero,807768 <__alt_mem_onchip_mem+0xff7ff768>
  807778:	02bfff04 	movi	r10,-4
  80777c:	024003c4 	movi	r9,15
  807780:	21800044 	addi	r6,r4,1
  807784:	318d883a 	add	r6,r6,r6
  807788:	318d883a 	add	r6,r6,r6
  80778c:	318d883a 	add	r6,r6,r6
  807790:	998d883a 	add	r6,r19,r6
  807794:	333ffe04 	addi	r12,r6,-8
  807798:	2017883a 	mov	r11,r4
  80779c:	31800104 	addi	r6,r6,4
  8077a0:	34000017 	ldw	r16,0(r6)
  8077a4:	31fffd04 	addi	r7,r6,-12
  8077a8:	81c0041e 	bne	r16,r7,8077bc <_malloc_r+0x1dc>
  8077ac:	0000fb06 	br	807b9c <_malloc_r+0x5bc>
  8077b0:	1801030e 	bge	r3,zero,807bc0 <_malloc_r+0x5e0>
  8077b4:	84000317 	ldw	r16,12(r16)
  8077b8:	81c0f826 	beq	r16,r7,807b9c <_malloc_r+0x5bc>
  8077bc:	80800117 	ldw	r2,4(r16)
  8077c0:	1284703a 	and	r2,r2,r10
  8077c4:	1447c83a 	sub	r3,r2,r17
  8077c8:	48fff90e 	bge	r9,r3,8077b0 <__alt_mem_onchip_mem+0xff7ff7b0>
  8077cc:	80800317 	ldw	r2,12(r16)
  8077d0:	81000217 	ldw	r4,8(r16)
  8077d4:	89400054 	ori	r5,r17,1
  8077d8:	81400115 	stw	r5,4(r16)
  8077dc:	20800315 	stw	r2,12(r4)
  8077e0:	11000215 	stw	r4,8(r2)
  8077e4:	8463883a 	add	r17,r16,r17
  8077e8:	9c400515 	stw	r17,20(r19)
  8077ec:	9c400415 	stw	r17,16(r19)
  8077f0:	18800054 	ori	r2,r3,1
  8077f4:	88800115 	stw	r2,4(r17)
  8077f8:	8a000315 	stw	r8,12(r17)
  8077fc:	8a000215 	stw	r8,8(r17)
  807800:	88e3883a 	add	r17,r17,r3
  807804:	88c00015 	stw	r3,0(r17)
  807808:	9009883a 	mov	r4,r18
  80780c:	08133ec0 	call	8133ec <__malloc_unlock>
  807810:	80800204 	addi	r2,r16,8
  807814:	00001b06 	br	807884 <_malloc_r+0x2a4>
  807818:	04400404 	movi	r17,16
  80781c:	89402536 	bltu	r17,r5,8078b4 <_malloc_r+0x2d4>
  807820:	08133c80 	call	8133c8 <__malloc_lock>
  807824:	00800184 	movi	r2,6
  807828:	01000084 	movi	r4,2
  80782c:	04c02074 	movhi	r19,129
  807830:	1085883a 	add	r2,r2,r2
  807834:	9cde6904 	addi	r19,r19,31140
  807838:	1085883a 	add	r2,r2,r2
  80783c:	9885883a 	add	r2,r19,r2
  807840:	14000117 	ldw	r16,4(r2)
  807844:	10fffe04 	addi	r3,r2,-8
  807848:	80c0d926 	beq	r16,r3,807bb0 <_malloc_r+0x5d0>
  80784c:	80c00117 	ldw	r3,4(r16)
  807850:	81000317 	ldw	r4,12(r16)
  807854:	00bfff04 	movi	r2,-4
  807858:	1884703a 	and	r2,r3,r2
  80785c:	81400217 	ldw	r5,8(r16)
  807860:	8085883a 	add	r2,r16,r2
  807864:	10c00117 	ldw	r3,4(r2)
  807868:	29000315 	stw	r4,12(r5)
  80786c:	21400215 	stw	r5,8(r4)
  807870:	18c00054 	ori	r3,r3,1
  807874:	10c00115 	stw	r3,4(r2)
  807878:	9009883a 	mov	r4,r18
  80787c:	08133ec0 	call	8133ec <__malloc_unlock>
  807880:	80800204 	addi	r2,r16,8
  807884:	dfc00a17 	ldw	ra,40(sp)
  807888:	df000917 	ldw	fp,36(sp)
  80788c:	ddc00817 	ldw	r23,32(sp)
  807890:	dd800717 	ldw	r22,28(sp)
  807894:	dd400617 	ldw	r21,24(sp)
  807898:	dd000517 	ldw	r20,20(sp)
  80789c:	dcc00417 	ldw	r19,16(sp)
  8078a0:	dc800317 	ldw	r18,12(sp)
  8078a4:	dc400217 	ldw	r17,8(sp)
  8078a8:	dc000117 	ldw	r16,4(sp)
  8078ac:	dec00b04 	addi	sp,sp,44
  8078b0:	f800283a 	ret
  8078b4:	00800304 	movi	r2,12
  8078b8:	90800015 	stw	r2,0(r18)
  8078bc:	0005883a 	mov	r2,zero
  8078c0:	003ff006 	br	807884 <__alt_mem_onchip_mem+0xff7ff884>
  8078c4:	01002004 	movi	r4,128
  8078c8:	02001004 	movi	r8,64
  8078cc:	01c00fc4 	movi	r7,63
  8078d0:	003f6106 	br	807658 <__alt_mem_onchip_mem+0xff7ff658>
  8078d4:	4009883a 	mov	r4,r8
  8078d8:	003f7506 	br	8076b0 <__alt_mem_onchip_mem+0xff7ff6b0>
  8078dc:	81000317 	ldw	r4,12(r16)
  8078e0:	003fde06 	br	80785c <__alt_mem_onchip_mem+0xff7ff85c>
  8078e4:	81c5883a 	add	r2,r16,r7
  8078e8:	11400117 	ldw	r5,4(r2)
  8078ec:	9009883a 	mov	r4,r18
  8078f0:	29400054 	ori	r5,r5,1
  8078f4:	11400115 	stw	r5,4(r2)
  8078f8:	08133ec0 	call	8133ec <__malloc_unlock>
  8078fc:	80800204 	addi	r2,r16,8
  807900:	003fe006 	br	807884 <__alt_mem_onchip_mem+0xff7ff884>
  807904:	9c000217 	ldw	r16,8(r19)
  807908:	00bfff04 	movi	r2,-4
  80790c:	85800117 	ldw	r22,4(r16)
  807910:	b0ac703a 	and	r22,r22,r2
  807914:	b4400336 	bltu	r22,r17,807924 <_malloc_r+0x344>
  807918:	b445c83a 	sub	r2,r22,r17
  80791c:	00c003c4 	movi	r3,15
  807920:	18805d16 	blt	r3,r2,807a98 <_malloc_r+0x4b8>
  807924:	05c020b4 	movhi	r23,130
  807928:	008020b4 	movhi	r2,130
  80792c:	10abd804 	addi	r2,r2,-20640
  807930:	bde48604 	addi	r23,r23,-28136
  807934:	15400017 	ldw	r21,0(r2)
  807938:	b8c00017 	ldw	r3,0(r23)
  80793c:	00bfffc4 	movi	r2,-1
  807940:	858d883a 	add	r6,r16,r22
  807944:	8d6b883a 	add	r21,r17,r21
  807948:	1880ea26 	beq	r3,r2,807cf4 <_malloc_r+0x714>
  80794c:	ad4403c4 	addi	r21,r21,4111
  807950:	00bc0004 	movi	r2,-4096
  807954:	a8aa703a 	and	r21,r21,r2
  807958:	a80b883a 	mov	r5,r21
  80795c:	9009883a 	mov	r4,r18
  807960:	d9800015 	stw	r6,0(sp)
  807964:	08082580 	call	808258 <_sbrk_r>
  807968:	1029883a 	mov	r20,r2
  80796c:	00bfffc4 	movi	r2,-1
  807970:	d9800017 	ldw	r6,0(sp)
  807974:	a080e826 	beq	r20,r2,807d18 <_malloc_r+0x738>
  807978:	a180a636 	bltu	r20,r6,807c14 <_malloc_r+0x634>
  80797c:	070020b4 	movhi	fp,130
  807980:	e72be304 	addi	fp,fp,-20596
  807984:	e0800017 	ldw	r2,0(fp)
  807988:	a887883a 	add	r3,r21,r2
  80798c:	e0c00015 	stw	r3,0(fp)
  807990:	3500e626 	beq	r6,r20,807d2c <_malloc_r+0x74c>
  807994:	b9000017 	ldw	r4,0(r23)
  807998:	00bfffc4 	movi	r2,-1
  80799c:	2080ee26 	beq	r4,r2,807d58 <_malloc_r+0x778>
  8079a0:	a185c83a 	sub	r2,r20,r6
  8079a4:	10c5883a 	add	r2,r2,r3
  8079a8:	e0800015 	stw	r2,0(fp)
  8079ac:	a0c001cc 	andi	r3,r20,7
  8079b0:	1800bc26 	beq	r3,zero,807ca4 <_malloc_r+0x6c4>
  8079b4:	a0e9c83a 	sub	r20,r20,r3
  8079b8:	00840204 	movi	r2,4104
  8079bc:	a5000204 	addi	r20,r20,8
  8079c0:	10c7c83a 	sub	r3,r2,r3
  8079c4:	a545883a 	add	r2,r20,r21
  8079c8:	1083ffcc 	andi	r2,r2,4095
  8079cc:	18abc83a 	sub	r21,r3,r2
  8079d0:	a80b883a 	mov	r5,r21
  8079d4:	9009883a 	mov	r4,r18
  8079d8:	08082580 	call	808258 <_sbrk_r>
  8079dc:	00ffffc4 	movi	r3,-1
  8079e0:	10c0e126 	beq	r2,r3,807d68 <_malloc_r+0x788>
  8079e4:	1505c83a 	sub	r2,r2,r20
  8079e8:	1545883a 	add	r2,r2,r21
  8079ec:	10800054 	ori	r2,r2,1
  8079f0:	e0c00017 	ldw	r3,0(fp)
  8079f4:	9d000215 	stw	r20,8(r19)
  8079f8:	a0800115 	stw	r2,4(r20)
  8079fc:	a8c7883a 	add	r3,r21,r3
  807a00:	e0c00015 	stw	r3,0(fp)
  807a04:	84c00e26 	beq	r16,r19,807a40 <_malloc_r+0x460>
  807a08:	018003c4 	movi	r6,15
  807a0c:	3580a72e 	bgeu	r6,r22,807cac <_malloc_r+0x6cc>
  807a10:	81400117 	ldw	r5,4(r16)
  807a14:	013ffe04 	movi	r4,-8
  807a18:	b0bffd04 	addi	r2,r22,-12
  807a1c:	1104703a 	and	r2,r2,r4
  807a20:	2900004c 	andi	r4,r5,1
  807a24:	2088b03a 	or	r4,r4,r2
  807a28:	81000115 	stw	r4,4(r16)
  807a2c:	01400144 	movi	r5,5
  807a30:	8089883a 	add	r4,r16,r2
  807a34:	21400115 	stw	r5,4(r4)
  807a38:	21400215 	stw	r5,8(r4)
  807a3c:	3080cd36 	bltu	r6,r2,807d74 <_malloc_r+0x794>
  807a40:	008020b4 	movhi	r2,130
  807a44:	10abd704 	addi	r2,r2,-20644
  807a48:	11000017 	ldw	r4,0(r2)
  807a4c:	20c0012e 	bgeu	r4,r3,807a54 <_malloc_r+0x474>
  807a50:	10c00015 	stw	r3,0(r2)
  807a54:	008020b4 	movhi	r2,130
  807a58:	10abd604 	addi	r2,r2,-20648
  807a5c:	11000017 	ldw	r4,0(r2)
  807a60:	9c000217 	ldw	r16,8(r19)
  807a64:	20c0012e 	bgeu	r4,r3,807a6c <_malloc_r+0x48c>
  807a68:	10c00015 	stw	r3,0(r2)
  807a6c:	80c00117 	ldw	r3,4(r16)
  807a70:	00bfff04 	movi	r2,-4
  807a74:	1886703a 	and	r3,r3,r2
  807a78:	1c45c83a 	sub	r2,r3,r17
  807a7c:	1c400236 	bltu	r3,r17,807a88 <_malloc_r+0x4a8>
  807a80:	00c003c4 	movi	r3,15
  807a84:	18800416 	blt	r3,r2,807a98 <_malloc_r+0x4b8>
  807a88:	9009883a 	mov	r4,r18
  807a8c:	08133ec0 	call	8133ec <__malloc_unlock>
  807a90:	0005883a 	mov	r2,zero
  807a94:	003f7b06 	br	807884 <__alt_mem_onchip_mem+0xff7ff884>
  807a98:	88c00054 	ori	r3,r17,1
  807a9c:	80c00115 	stw	r3,4(r16)
  807aa0:	8463883a 	add	r17,r16,r17
  807aa4:	10800054 	ori	r2,r2,1
  807aa8:	9c400215 	stw	r17,8(r19)
  807aac:	88800115 	stw	r2,4(r17)
  807ab0:	9009883a 	mov	r4,r18
  807ab4:	08133ec0 	call	8133ec <__malloc_unlock>
  807ab8:	80800204 	addi	r2,r16,8
  807abc:	003f7106 	br	807884 <__alt_mem_onchip_mem+0xff7ff884>
  807ac0:	00c00504 	movi	r3,20
  807ac4:	18804a2e 	bgeu	r3,r2,807bf0 <_malloc_r+0x610>
  807ac8:	00c01504 	movi	r3,84
  807acc:	18806e36 	bltu	r3,r2,807c88 <_malloc_r+0x6a8>
  807ad0:	8804d33a 	srli	r2,r17,12
  807ad4:	12001bc4 	addi	r8,r2,111
  807ad8:	11c01b84 	addi	r7,r2,110
  807adc:	4209883a 	add	r4,r8,r8
  807ae0:	003edd06 	br	807658 <__alt_mem_onchip_mem+0xff7ff658>
  807ae4:	3804d27a 	srli	r2,r7,9
  807ae8:	00c00104 	movi	r3,4
  807aec:	1880442e 	bgeu	r3,r2,807c00 <_malloc_r+0x620>
  807af0:	00c00504 	movi	r3,20
  807af4:	18808136 	bltu	r3,r2,807cfc <_malloc_r+0x71c>
  807af8:	11401704 	addi	r5,r2,92
  807afc:	10c016c4 	addi	r3,r2,91
  807b00:	294b883a 	add	r5,r5,r5
  807b04:	294b883a 	add	r5,r5,r5
  807b08:	294b883a 	add	r5,r5,r5
  807b0c:	994b883a 	add	r5,r19,r5
  807b10:	28800017 	ldw	r2,0(r5)
  807b14:	01802074 	movhi	r6,129
  807b18:	297ffe04 	addi	r5,r5,-8
  807b1c:	319e6904 	addi	r6,r6,31140
  807b20:	28806526 	beq	r5,r2,807cb8 <_malloc_r+0x6d8>
  807b24:	01bfff04 	movi	r6,-4
  807b28:	10c00117 	ldw	r3,4(r2)
  807b2c:	1986703a 	and	r3,r3,r6
  807b30:	38c0022e 	bgeu	r7,r3,807b3c <_malloc_r+0x55c>
  807b34:	10800217 	ldw	r2,8(r2)
  807b38:	28bffb1e 	bne	r5,r2,807b28 <__alt_mem_onchip_mem+0xff7ffb28>
  807b3c:	11400317 	ldw	r5,12(r2)
  807b40:	98c00117 	ldw	r3,4(r19)
  807b44:	81400315 	stw	r5,12(r16)
  807b48:	80800215 	stw	r2,8(r16)
  807b4c:	2c000215 	stw	r16,8(r5)
  807b50:	14000315 	stw	r16,12(r2)
  807b54:	003ef806 	br	807738 <__alt_mem_onchip_mem+0xff7ff738>
  807b58:	88c00054 	ori	r3,r17,1
  807b5c:	80c00115 	stw	r3,4(r16)
  807b60:	8463883a 	add	r17,r16,r17
  807b64:	34400515 	stw	r17,20(r6)
  807b68:	34400415 	stw	r17,16(r6)
  807b6c:	10c00054 	ori	r3,r2,1
  807b70:	8a000315 	stw	r8,12(r17)
  807b74:	8a000215 	stw	r8,8(r17)
  807b78:	88c00115 	stw	r3,4(r17)
  807b7c:	88a3883a 	add	r17,r17,r2
  807b80:	88800015 	stw	r2,0(r17)
  807b84:	9009883a 	mov	r4,r18
  807b88:	08133ec0 	call	8133ec <__malloc_unlock>
  807b8c:	80800204 	addi	r2,r16,8
  807b90:	003f3c06 	br	807884 <__alt_mem_onchip_mem+0xff7ff884>
  807b94:	30c00117 	ldw	r3,4(r6)
  807b98:	003ee706 	br	807738 <__alt_mem_onchip_mem+0xff7ff738>
  807b9c:	5ac00044 	addi	r11,r11,1
  807ba0:	588000cc 	andi	r2,r11,3
  807ba4:	31800204 	addi	r6,r6,8
  807ba8:	103efd1e 	bne	r2,zero,8077a0 <__alt_mem_onchip_mem+0xff7ff7a0>
  807bac:	00002406 	br	807c40 <_malloc_r+0x660>
  807bb0:	14000317 	ldw	r16,12(r2)
  807bb4:	143f251e 	bne	r2,r16,80784c <__alt_mem_onchip_mem+0xff7ff84c>
  807bb8:	21000084 	addi	r4,r4,2
  807bbc:	003ebc06 	br	8076b0 <__alt_mem_onchip_mem+0xff7ff6b0>
  807bc0:	8085883a 	add	r2,r16,r2
  807bc4:	10c00117 	ldw	r3,4(r2)
  807bc8:	81000317 	ldw	r4,12(r16)
  807bcc:	81400217 	ldw	r5,8(r16)
  807bd0:	18c00054 	ori	r3,r3,1
  807bd4:	10c00115 	stw	r3,4(r2)
  807bd8:	29000315 	stw	r4,12(r5)
  807bdc:	21400215 	stw	r5,8(r4)
  807be0:	9009883a 	mov	r4,r18
  807be4:	08133ec0 	call	8133ec <__malloc_unlock>
  807be8:	80800204 	addi	r2,r16,8
  807bec:	003f2506 	br	807884 <__alt_mem_onchip_mem+0xff7ff884>
  807bf0:	12001704 	addi	r8,r2,92
  807bf4:	11c016c4 	addi	r7,r2,91
  807bf8:	4209883a 	add	r4,r8,r8
  807bfc:	003e9606 	br	807658 <__alt_mem_onchip_mem+0xff7ff658>
  807c00:	3804d1ba 	srli	r2,r7,6
  807c04:	11400e44 	addi	r5,r2,57
  807c08:	10c00e04 	addi	r3,r2,56
  807c0c:	294b883a 	add	r5,r5,r5
  807c10:	003fbc06 	br	807b04 <__alt_mem_onchip_mem+0xff7ffb04>
  807c14:	84ff5926 	beq	r16,r19,80797c <__alt_mem_onchip_mem+0xff7ff97c>
  807c18:	00802074 	movhi	r2,129
  807c1c:	109e6904 	addi	r2,r2,31140
  807c20:	14000217 	ldw	r16,8(r2)
  807c24:	00bfff04 	movi	r2,-4
  807c28:	80c00117 	ldw	r3,4(r16)
  807c2c:	1886703a 	and	r3,r3,r2
  807c30:	003f9106 	br	807a78 <__alt_mem_onchip_mem+0xff7ffa78>
  807c34:	60800217 	ldw	r2,8(r12)
  807c38:	213fffc4 	addi	r4,r4,-1
  807c3c:	1300651e 	bne	r2,r12,807dd4 <_malloc_r+0x7f4>
  807c40:	208000cc 	andi	r2,r4,3
  807c44:	633ffe04 	addi	r12,r12,-8
  807c48:	103ffa1e 	bne	r2,zero,807c34 <__alt_mem_onchip_mem+0xff7ffc34>
  807c4c:	98800117 	ldw	r2,4(r19)
  807c50:	0146303a 	nor	r3,zero,r5
  807c54:	1884703a 	and	r2,r3,r2
  807c58:	98800115 	stw	r2,4(r19)
  807c5c:	294b883a 	add	r5,r5,r5
  807c60:	117f2836 	bltu	r2,r5,807904 <__alt_mem_onchip_mem+0xff7ff904>
  807c64:	283f2726 	beq	r5,zero,807904 <__alt_mem_onchip_mem+0xff7ff904>
  807c68:	2886703a 	and	r3,r5,r2
  807c6c:	5809883a 	mov	r4,r11
  807c70:	183ec31e 	bne	r3,zero,807780 <__alt_mem_onchip_mem+0xff7ff780>
  807c74:	294b883a 	add	r5,r5,r5
  807c78:	2886703a 	and	r3,r5,r2
  807c7c:	21000104 	addi	r4,r4,4
  807c80:	183ffc26 	beq	r3,zero,807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807c84:	003ebe06 	br	807780 <__alt_mem_onchip_mem+0xff7ff780>
  807c88:	00c05504 	movi	r3,340
  807c8c:	18801236 	bltu	r3,r2,807cd8 <_malloc_r+0x6f8>
  807c90:	8804d3fa 	srli	r2,r17,15
  807c94:	12001e04 	addi	r8,r2,120
  807c98:	11c01dc4 	addi	r7,r2,119
  807c9c:	4209883a 	add	r4,r8,r8
  807ca0:	003e6d06 	br	807658 <__alt_mem_onchip_mem+0xff7ff658>
  807ca4:	00c40004 	movi	r3,4096
  807ca8:	003f4606 	br	8079c4 <__alt_mem_onchip_mem+0xff7ff9c4>
  807cac:	00800044 	movi	r2,1
  807cb0:	a0800115 	stw	r2,4(r20)
  807cb4:	003f7406 	br	807a88 <__alt_mem_onchip_mem+0xff7ffa88>
  807cb8:	1805d0ba 	srai	r2,r3,2
  807cbc:	01c00044 	movi	r7,1
  807cc0:	30c00117 	ldw	r3,4(r6)
  807cc4:	388e983a 	sll	r7,r7,r2
  807cc8:	2805883a 	mov	r2,r5
  807ccc:	38c6b03a 	or	r3,r7,r3
  807cd0:	30c00115 	stw	r3,4(r6)
  807cd4:	003f9b06 	br	807b44 <__alt_mem_onchip_mem+0xff7ffb44>
  807cd8:	00c15504 	movi	r3,1364
  807cdc:	18801a36 	bltu	r3,r2,807d48 <_malloc_r+0x768>
  807ce0:	8804d4ba 	srli	r2,r17,18
  807ce4:	12001f44 	addi	r8,r2,125
  807ce8:	11c01f04 	addi	r7,r2,124
  807cec:	4209883a 	add	r4,r8,r8
  807cf0:	003e5906 	br	807658 <__alt_mem_onchip_mem+0xff7ff658>
  807cf4:	ad400404 	addi	r21,r21,16
  807cf8:	003f1706 	br	807958 <__alt_mem_onchip_mem+0xff7ff958>
  807cfc:	00c01504 	movi	r3,84
  807d00:	18802336 	bltu	r3,r2,807d90 <_malloc_r+0x7b0>
  807d04:	3804d33a 	srli	r2,r7,12
  807d08:	11401bc4 	addi	r5,r2,111
  807d0c:	10c01b84 	addi	r3,r2,110
  807d10:	294b883a 	add	r5,r5,r5
  807d14:	003f7b06 	br	807b04 <__alt_mem_onchip_mem+0xff7ffb04>
  807d18:	9c000217 	ldw	r16,8(r19)
  807d1c:	00bfff04 	movi	r2,-4
  807d20:	80c00117 	ldw	r3,4(r16)
  807d24:	1886703a 	and	r3,r3,r2
  807d28:	003f5306 	br	807a78 <__alt_mem_onchip_mem+0xff7ffa78>
  807d2c:	3083ffcc 	andi	r2,r6,4095
  807d30:	103f181e 	bne	r2,zero,807994 <__alt_mem_onchip_mem+0xff7ff994>
  807d34:	99000217 	ldw	r4,8(r19)
  807d38:	b545883a 	add	r2,r22,r21
  807d3c:	10800054 	ori	r2,r2,1
  807d40:	20800115 	stw	r2,4(r4)
  807d44:	003f3e06 	br	807a40 <__alt_mem_onchip_mem+0xff7ffa40>
  807d48:	01003f84 	movi	r4,254
  807d4c:	02001fc4 	movi	r8,127
  807d50:	01c01f84 	movi	r7,126
  807d54:	003e4006 	br	807658 <__alt_mem_onchip_mem+0xff7ff658>
  807d58:	008020b4 	movhi	r2,130
  807d5c:	10a48604 	addi	r2,r2,-28136
  807d60:	15000015 	stw	r20,0(r2)
  807d64:	003f1106 	br	8079ac <__alt_mem_onchip_mem+0xff7ff9ac>
  807d68:	00800044 	movi	r2,1
  807d6c:	002b883a 	mov	r21,zero
  807d70:	003f1f06 	br	8079f0 <__alt_mem_onchip_mem+0xff7ff9f0>
  807d74:	81400204 	addi	r5,r16,8
  807d78:	9009883a 	mov	r4,r18
  807d7c:	080c9f80 	call	80c9f8 <_free_r>
  807d80:	008020b4 	movhi	r2,130
  807d84:	10abe304 	addi	r2,r2,-20596
  807d88:	10c00017 	ldw	r3,0(r2)
  807d8c:	003f2c06 	br	807a40 <__alt_mem_onchip_mem+0xff7ffa40>
  807d90:	00c05504 	movi	r3,340
  807d94:	18800536 	bltu	r3,r2,807dac <_malloc_r+0x7cc>
  807d98:	3804d3fa 	srli	r2,r7,15
  807d9c:	11401e04 	addi	r5,r2,120
  807da0:	10c01dc4 	addi	r3,r2,119
  807da4:	294b883a 	add	r5,r5,r5
  807da8:	003f5606 	br	807b04 <__alt_mem_onchip_mem+0xff7ffb04>
  807dac:	00c15504 	movi	r3,1364
  807db0:	18800536 	bltu	r3,r2,807dc8 <_malloc_r+0x7e8>
  807db4:	3804d4ba 	srli	r2,r7,18
  807db8:	11401f44 	addi	r5,r2,125
  807dbc:	10c01f04 	addi	r3,r2,124
  807dc0:	294b883a 	add	r5,r5,r5
  807dc4:	003f4f06 	br	807b04 <__alt_mem_onchip_mem+0xff7ffb04>
  807dc8:	01403f84 	movi	r5,254
  807dcc:	00c01f84 	movi	r3,126
  807dd0:	003f4c06 	br	807b04 <__alt_mem_onchip_mem+0xff7ffb04>
  807dd4:	98800117 	ldw	r2,4(r19)
  807dd8:	003fa006 	br	807c5c <__alt_mem_onchip_mem+0xff7ffc5c>
  807ddc:	8808d0fa 	srli	r4,r17,3
  807de0:	20800044 	addi	r2,r4,1
  807de4:	1085883a 	add	r2,r2,r2
  807de8:	003e9006 	br	80782c <__alt_mem_onchip_mem+0xff7ff82c>

00807dec <memset>:
  807dec:	20c000cc 	andi	r3,r4,3
  807df0:	2005883a 	mov	r2,r4
  807df4:	18004426 	beq	r3,zero,807f08 <memset+0x11c>
  807df8:	31ffffc4 	addi	r7,r6,-1
  807dfc:	30004026 	beq	r6,zero,807f00 <memset+0x114>
  807e00:	2813883a 	mov	r9,r5
  807e04:	200d883a 	mov	r6,r4
  807e08:	2007883a 	mov	r3,r4
  807e0c:	00000406 	br	807e20 <memset+0x34>
  807e10:	3a3fffc4 	addi	r8,r7,-1
  807e14:	31800044 	addi	r6,r6,1
  807e18:	38003926 	beq	r7,zero,807f00 <memset+0x114>
  807e1c:	400f883a 	mov	r7,r8
  807e20:	18c00044 	addi	r3,r3,1
  807e24:	32400005 	stb	r9,0(r6)
  807e28:	1a0000cc 	andi	r8,r3,3
  807e2c:	403ff81e 	bne	r8,zero,807e10 <__alt_mem_onchip_mem+0xff7ffe10>
  807e30:	010000c4 	movi	r4,3
  807e34:	21c02d2e 	bgeu	r4,r7,807eec <memset+0x100>
  807e38:	29003fcc 	andi	r4,r5,255
  807e3c:	200c923a 	slli	r6,r4,8
  807e40:	3108b03a 	or	r4,r6,r4
  807e44:	200c943a 	slli	r6,r4,16
  807e48:	218cb03a 	or	r6,r4,r6
  807e4c:	010003c4 	movi	r4,15
  807e50:	21c0182e 	bgeu	r4,r7,807eb4 <memset+0xc8>
  807e54:	3b3ffc04 	addi	r12,r7,-16
  807e58:	6018d13a 	srli	r12,r12,4
  807e5c:	1a000104 	addi	r8,r3,4
  807e60:	1ac00204 	addi	r11,r3,8
  807e64:	6008913a 	slli	r4,r12,4
  807e68:	1a800304 	addi	r10,r3,12
  807e6c:	1813883a 	mov	r9,r3
  807e70:	21000504 	addi	r4,r4,20
  807e74:	1909883a 	add	r4,r3,r4
  807e78:	49800015 	stw	r6,0(r9)
  807e7c:	41800015 	stw	r6,0(r8)
  807e80:	59800015 	stw	r6,0(r11)
  807e84:	51800015 	stw	r6,0(r10)
  807e88:	42000404 	addi	r8,r8,16
  807e8c:	4a400404 	addi	r9,r9,16
  807e90:	5ac00404 	addi	r11,r11,16
  807e94:	52800404 	addi	r10,r10,16
  807e98:	413ff71e 	bne	r8,r4,807e78 <__alt_mem_onchip_mem+0xff7ffe78>
  807e9c:	63000044 	addi	r12,r12,1
  807ea0:	6018913a 	slli	r12,r12,4
  807ea4:	39c003cc 	andi	r7,r7,15
  807ea8:	010000c4 	movi	r4,3
  807eac:	1b07883a 	add	r3,r3,r12
  807eb0:	21c00e2e 	bgeu	r4,r7,807eec <memset+0x100>
  807eb4:	1813883a 	mov	r9,r3
  807eb8:	3811883a 	mov	r8,r7
  807ebc:	010000c4 	movi	r4,3
  807ec0:	49800015 	stw	r6,0(r9)
  807ec4:	423fff04 	addi	r8,r8,-4
  807ec8:	4a400104 	addi	r9,r9,4
  807ecc:	223ffc36 	bltu	r4,r8,807ec0 <__alt_mem_onchip_mem+0xff7ffec0>
  807ed0:	393fff04 	addi	r4,r7,-4
  807ed4:	2008d0ba 	srli	r4,r4,2
  807ed8:	39c000cc 	andi	r7,r7,3
  807edc:	21000044 	addi	r4,r4,1
  807ee0:	2109883a 	add	r4,r4,r4
  807ee4:	2109883a 	add	r4,r4,r4
  807ee8:	1907883a 	add	r3,r3,r4
  807eec:	38000526 	beq	r7,zero,807f04 <memset+0x118>
  807ef0:	19cf883a 	add	r7,r3,r7
  807ef4:	19400005 	stb	r5,0(r3)
  807ef8:	18c00044 	addi	r3,r3,1
  807efc:	38fffd1e 	bne	r7,r3,807ef4 <__alt_mem_onchip_mem+0xff7ffef4>
  807f00:	f800283a 	ret
  807f04:	f800283a 	ret
  807f08:	2007883a 	mov	r3,r4
  807f0c:	300f883a 	mov	r7,r6
  807f10:	003fc706 	br	807e30 <__alt_mem_onchip_mem+0xff7ffe30>

00807f14 <_open_r>:
  807f14:	defffd04 	addi	sp,sp,-12
  807f18:	2805883a 	mov	r2,r5
  807f1c:	dc000015 	stw	r16,0(sp)
  807f20:	040020b4 	movhi	r16,130
  807f24:	dc400115 	stw	r17,4(sp)
  807f28:	300b883a 	mov	r5,r6
  807f2c:	842bd504 	addi	r16,r16,-20652
  807f30:	2023883a 	mov	r17,r4
  807f34:	380d883a 	mov	r6,r7
  807f38:	1009883a 	mov	r4,r2
  807f3c:	dfc00215 	stw	ra,8(sp)
  807f40:	80000015 	stw	zero,0(r16)
  807f44:	08135100 	call	813510 <open>
  807f48:	00ffffc4 	movi	r3,-1
  807f4c:	10c00526 	beq	r2,r3,807f64 <_open_r+0x50>
  807f50:	dfc00217 	ldw	ra,8(sp)
  807f54:	dc400117 	ldw	r17,4(sp)
  807f58:	dc000017 	ldw	r16,0(sp)
  807f5c:	dec00304 	addi	sp,sp,12
  807f60:	f800283a 	ret
  807f64:	80c00017 	ldw	r3,0(r16)
  807f68:	183ff926 	beq	r3,zero,807f50 <__alt_mem_onchip_mem+0xff7fff50>
  807f6c:	88c00015 	stw	r3,0(r17)
  807f70:	003ff706 	br	807f50 <__alt_mem_onchip_mem+0xff7fff50>

00807f74 <_putchar_r>:
  807f74:	21800217 	ldw	r6,8(r4)
  807f78:	080e8601 	jmpi	80e860 <_putc_r>

00807f7c <putchar>:
  807f7c:	008020b4 	movhi	r2,130
  807f80:	10a48504 	addi	r2,r2,-28140
  807f84:	200b883a 	mov	r5,r4
  807f88:	11000017 	ldw	r4,0(r2)
  807f8c:	21800217 	ldw	r6,8(r4)
  807f90:	080e8601 	jmpi	80e860 <_putc_r>

00807f94 <_puts_r>:
  807f94:	defff604 	addi	sp,sp,-40
  807f98:	dc000715 	stw	r16,28(sp)
  807f9c:	2021883a 	mov	r16,r4
  807fa0:	2809883a 	mov	r4,r5
  807fa4:	dc400815 	stw	r17,32(sp)
  807fa8:	dfc00915 	stw	ra,36(sp)
  807fac:	2823883a 	mov	r17,r5
  807fb0:	08083e80 	call	8083e8 <strlen>
  807fb4:	10c00044 	addi	r3,r2,1
  807fb8:	d8800115 	stw	r2,4(sp)
  807fbc:	00802074 	movhi	r2,129
  807fc0:	109c3d04 	addi	r2,r2,28916
  807fc4:	d8800215 	stw	r2,8(sp)
  807fc8:	00800044 	movi	r2,1
  807fcc:	d8800315 	stw	r2,12(sp)
  807fd0:	00800084 	movi	r2,2
  807fd4:	dc400015 	stw	r17,0(sp)
  807fd8:	d8c00615 	stw	r3,24(sp)
  807fdc:	dec00415 	stw	sp,16(sp)
  807fe0:	d8800515 	stw	r2,20(sp)
  807fe4:	80000226 	beq	r16,zero,807ff0 <_puts_r+0x5c>
  807fe8:	80800e17 	ldw	r2,56(r16)
  807fec:	10001426 	beq	r2,zero,808040 <_puts_r+0xac>
  807ff0:	81400217 	ldw	r5,8(r16)
  807ff4:	2880030b 	ldhu	r2,12(r5)
  807ff8:	10c8000c 	andi	r3,r2,8192
  807ffc:	1800061e 	bne	r3,zero,808018 <_puts_r+0x84>
  808000:	29001917 	ldw	r4,100(r5)
  808004:	00f7ffc4 	movi	r3,-8193
  808008:	10880014 	ori	r2,r2,8192
  80800c:	20c6703a 	and	r3,r4,r3
  808010:	2880030d 	sth	r2,12(r5)
  808014:	28c01915 	stw	r3,100(r5)
  808018:	d9800404 	addi	r6,sp,16
  80801c:	8009883a 	mov	r4,r16
  808020:	080cd080 	call	80cd08 <__sfvwrite_r>
  808024:	1000091e 	bne	r2,zero,80804c <_puts_r+0xb8>
  808028:	00800284 	movi	r2,10
  80802c:	dfc00917 	ldw	ra,36(sp)
  808030:	dc400817 	ldw	r17,32(sp)
  808034:	dc000717 	ldw	r16,28(sp)
  808038:	dec00a04 	addi	sp,sp,40
  80803c:	f800283a 	ret
  808040:	8009883a 	mov	r4,r16
  808044:	080c7d80 	call	80c7d8 <__sinit>
  808048:	003fe906 	br	807ff0 <__alt_mem_onchip_mem+0xff7ffff0>
  80804c:	00bfffc4 	movi	r2,-1
  808050:	003ff606 	br	80802c <__alt_mem_onchip_mem+0xff80002c>

00808054 <puts>:
  808054:	008020b4 	movhi	r2,130
  808058:	10a48504 	addi	r2,r2,-28140
  80805c:	200b883a 	mov	r5,r4
  808060:	11000017 	ldw	r4,0(r2)
  808064:	0807f941 	jmpi	807f94 <_puts_r>

00808068 <lflush>:
  808068:	2080030b 	ldhu	r2,12(r4)
  80806c:	00c00244 	movi	r3,9
  808070:	1080024c 	andi	r2,r2,9
  808074:	10c00226 	beq	r2,r3,808080 <lflush+0x18>
  808078:	0005883a 	mov	r2,zero
  80807c:	f800283a 	ret
  808080:	080c4581 	jmpi	80c458 <fflush>

00808084 <__srefill_r>:
  808084:	defffc04 	addi	sp,sp,-16
  808088:	dc400115 	stw	r17,4(sp)
  80808c:	dc000015 	stw	r16,0(sp)
  808090:	dfc00315 	stw	ra,12(sp)
  808094:	dc800215 	stw	r18,8(sp)
  808098:	2023883a 	mov	r17,r4
  80809c:	2821883a 	mov	r16,r5
  8080a0:	20000226 	beq	r4,zero,8080ac <__srefill_r+0x28>
  8080a4:	20800e17 	ldw	r2,56(r4)
  8080a8:	10003c26 	beq	r2,zero,80819c <__srefill_r+0x118>
  8080ac:	80c0030b 	ldhu	r3,12(r16)
  8080b0:	1908000c 	andi	r4,r3,8192
  8080b4:	1805883a 	mov	r2,r3
  8080b8:	2000071e 	bne	r4,zero,8080d8 <__srefill_r+0x54>
  8080bc:	81001917 	ldw	r4,100(r16)
  8080c0:	18880014 	ori	r2,r3,8192
  8080c4:	00f7ffc4 	movi	r3,-8193
  8080c8:	20c8703a 	and	r4,r4,r3
  8080cc:	8080030d 	sth	r2,12(r16)
  8080d0:	1007883a 	mov	r3,r2
  8080d4:	81001915 	stw	r4,100(r16)
  8080d8:	80000115 	stw	zero,4(r16)
  8080dc:	1100080c 	andi	r4,r2,32
  8080e0:	2000571e 	bne	r4,zero,808240 <__srefill_r+0x1bc>
  8080e4:	1100010c 	andi	r4,r2,4
  8080e8:	20001f26 	beq	r4,zero,808168 <__srefill_r+0xe4>
  8080ec:	81400c17 	ldw	r5,48(r16)
  8080f0:	28000826 	beq	r5,zero,808114 <__srefill_r+0x90>
  8080f4:	80801004 	addi	r2,r16,64
  8080f8:	28800226 	beq	r5,r2,808104 <__srefill_r+0x80>
  8080fc:	8809883a 	mov	r4,r17
  808100:	080c9f80 	call	80c9f8 <_free_r>
  808104:	80800f17 	ldw	r2,60(r16)
  808108:	80000c15 	stw	zero,48(r16)
  80810c:	80800115 	stw	r2,4(r16)
  808110:	1000391e 	bne	r2,zero,8081f8 <__srefill_r+0x174>
  808114:	80800417 	ldw	r2,16(r16)
  808118:	10004b26 	beq	r2,zero,808248 <__srefill_r+0x1c4>
  80811c:	8480030b 	ldhu	r18,12(r16)
  808120:	908000cc 	andi	r2,r18,3
  808124:	10001f1e 	bne	r2,zero,8081a4 <__srefill_r+0x120>
  808128:	81800417 	ldw	r6,16(r16)
  80812c:	80800817 	ldw	r2,32(r16)
  808130:	81c00517 	ldw	r7,20(r16)
  808134:	81400717 	ldw	r5,28(r16)
  808138:	81800015 	stw	r6,0(r16)
  80813c:	8809883a 	mov	r4,r17
  808140:	103ee83a 	callr	r2
  808144:	80800115 	stw	r2,4(r16)
  808148:	00800e0e 	bge	zero,r2,808184 <__srefill_r+0x100>
  80814c:	0005883a 	mov	r2,zero
  808150:	dfc00317 	ldw	ra,12(sp)
  808154:	dc800217 	ldw	r18,8(sp)
  808158:	dc400117 	ldw	r17,4(sp)
  80815c:	dc000017 	ldw	r16,0(sp)
  808160:	dec00404 	addi	sp,sp,16
  808164:	f800283a 	ret
  808168:	1100040c 	andi	r4,r2,16
  80816c:	20003026 	beq	r4,zero,808230 <__srefill_r+0x1ac>
  808170:	1080020c 	andi	r2,r2,8
  808174:	1000241e 	bne	r2,zero,808208 <__srefill_r+0x184>
  808178:	18c00114 	ori	r3,r3,4
  80817c:	80c0030d 	sth	r3,12(r16)
  808180:	003fe406 	br	808114 <__alt_mem_onchip_mem+0xff800114>
  808184:	80c0030b 	ldhu	r3,12(r16)
  808188:	1000161e 	bne	r2,zero,8081e4 <__srefill_r+0x160>
  80818c:	18c00814 	ori	r3,r3,32
  808190:	00bfffc4 	movi	r2,-1
  808194:	80c0030d 	sth	r3,12(r16)
  808198:	003fed06 	br	808150 <__alt_mem_onchip_mem+0xff800150>
  80819c:	080c7d80 	call	80c7d8 <__sinit>
  8081a0:	003fc206 	br	8080ac <__alt_mem_onchip_mem+0xff8000ac>
  8081a4:	008020b4 	movhi	r2,130
  8081a8:	10a48404 	addi	r2,r2,-28144
  8081ac:	11000017 	ldw	r4,0(r2)
  8081b0:	01402074 	movhi	r5,129
  8081b4:	00800044 	movi	r2,1
  8081b8:	29601a04 	addi	r5,r5,-32664
  8081bc:	8080030d 	sth	r2,12(r16)
  8081c0:	080d1c40 	call	80d1c4 <_fwalk>
  8081c4:	00800244 	movi	r2,9
  8081c8:	8480030d 	sth	r18,12(r16)
  8081cc:	9480024c 	andi	r18,r18,9
  8081d0:	90bfd51e 	bne	r18,r2,808128 <__alt_mem_onchip_mem+0xff800128>
  8081d4:	800b883a 	mov	r5,r16
  8081d8:	8809883a 	mov	r4,r17
  8081dc:	080c1e00 	call	80c1e0 <__sflush_r>
  8081e0:	003fd106 	br	808128 <__alt_mem_onchip_mem+0xff800128>
  8081e4:	18c01014 	ori	r3,r3,64
  8081e8:	80000115 	stw	zero,4(r16)
  8081ec:	00bfffc4 	movi	r2,-1
  8081f0:	80c0030d 	sth	r3,12(r16)
  8081f4:	003fd606 	br	808150 <__alt_mem_onchip_mem+0xff800150>
  8081f8:	80c00e17 	ldw	r3,56(r16)
  8081fc:	0005883a 	mov	r2,zero
  808200:	80c00015 	stw	r3,0(r16)
  808204:	003fd206 	br	808150 <__alt_mem_onchip_mem+0xff800150>
  808208:	800b883a 	mov	r5,r16
  80820c:	8809883a 	mov	r4,r17
  808210:	080c3fc0 	call	80c3fc <_fflush_r>
  808214:	10000a1e 	bne	r2,zero,808240 <__srefill_r+0x1bc>
  808218:	8080030b 	ldhu	r2,12(r16)
  80821c:	00fffdc4 	movi	r3,-9
  808220:	80000215 	stw	zero,8(r16)
  808224:	1886703a 	and	r3,r3,r2
  808228:	80000615 	stw	zero,24(r16)
  80822c:	003fd206 	br	808178 <__alt_mem_onchip_mem+0xff800178>
  808230:	00800244 	movi	r2,9
  808234:	88800015 	stw	r2,0(r17)
  808238:	18c01014 	ori	r3,r3,64
  80823c:	80c0030d 	sth	r3,12(r16)
  808240:	00bfffc4 	movi	r2,-1
  808244:	003fc206 	br	808150 <__alt_mem_onchip_mem+0xff800150>
  808248:	800b883a 	mov	r5,r16
  80824c:	8809883a 	mov	r4,r17
  808250:	08074240 	call	807424 <__smakebuf_r>
  808254:	003fb106 	br	80811c <__alt_mem_onchip_mem+0xff80011c>

00808258 <_sbrk_r>:
  808258:	defffd04 	addi	sp,sp,-12
  80825c:	dc000015 	stw	r16,0(sp)
  808260:	040020b4 	movhi	r16,130
  808264:	dc400115 	stw	r17,4(sp)
  808268:	842bd504 	addi	r16,r16,-20652
  80826c:	2023883a 	mov	r17,r4
  808270:	2809883a 	mov	r4,r5
  808274:	dfc00215 	stw	ra,8(sp)
  808278:	80000015 	stw	zero,0(r16)
  80827c:	08138000 	call	813800 <sbrk>
  808280:	00ffffc4 	movi	r3,-1
  808284:	10c00526 	beq	r2,r3,80829c <_sbrk_r+0x44>
  808288:	dfc00217 	ldw	ra,8(sp)
  80828c:	dc400117 	ldw	r17,4(sp)
  808290:	dc000017 	ldw	r16,0(sp)
  808294:	dec00304 	addi	sp,sp,12
  808298:	f800283a 	ret
  80829c:	80c00017 	ldw	r3,0(r16)
  8082a0:	183ff926 	beq	r3,zero,808288 <__alt_mem_onchip_mem+0xff800288>
  8082a4:	88c00015 	stw	r3,0(r17)
  8082a8:	003ff706 	br	808288 <__alt_mem_onchip_mem+0xff800288>

008082ac <__sread>:
  8082ac:	defffe04 	addi	sp,sp,-8
  8082b0:	dc000015 	stw	r16,0(sp)
  8082b4:	2821883a 	mov	r16,r5
  8082b8:	2940038f 	ldh	r5,14(r5)
  8082bc:	dfc00115 	stw	ra,4(sp)
  8082c0:	080e9c80 	call	80e9c8 <_read_r>
  8082c4:	10000716 	blt	r2,zero,8082e4 <__sread+0x38>
  8082c8:	80c01417 	ldw	r3,80(r16)
  8082cc:	1887883a 	add	r3,r3,r2
  8082d0:	80c01415 	stw	r3,80(r16)
  8082d4:	dfc00117 	ldw	ra,4(sp)
  8082d8:	dc000017 	ldw	r16,0(sp)
  8082dc:	dec00204 	addi	sp,sp,8
  8082e0:	f800283a 	ret
  8082e4:	80c0030b 	ldhu	r3,12(r16)
  8082e8:	18fbffcc 	andi	r3,r3,61439
  8082ec:	80c0030d 	sth	r3,12(r16)
  8082f0:	dfc00117 	ldw	ra,4(sp)
  8082f4:	dc000017 	ldw	r16,0(sp)
  8082f8:	dec00204 	addi	sp,sp,8
  8082fc:	f800283a 	ret

00808300 <__seofread>:
  808300:	0005883a 	mov	r2,zero
  808304:	f800283a 	ret

00808308 <__swrite>:
  808308:	2880030b 	ldhu	r2,12(r5)
  80830c:	defffb04 	addi	sp,sp,-20
  808310:	dcc00315 	stw	r19,12(sp)
  808314:	dc800215 	stw	r18,8(sp)
  808318:	dc400115 	stw	r17,4(sp)
  80831c:	dc000015 	stw	r16,0(sp)
  808320:	dfc00415 	stw	ra,16(sp)
  808324:	10c0400c 	andi	r3,r2,256
  808328:	2821883a 	mov	r16,r5
  80832c:	2023883a 	mov	r17,r4
  808330:	3025883a 	mov	r18,r6
  808334:	3827883a 	mov	r19,r7
  808338:	18000526 	beq	r3,zero,808350 <__swrite+0x48>
  80833c:	2940038f 	ldh	r5,14(r5)
  808340:	01c00084 	movi	r7,2
  808344:	000d883a 	mov	r6,zero
  808348:	080d47c0 	call	80d47c <_lseek_r>
  80834c:	8080030b 	ldhu	r2,12(r16)
  808350:	8140038f 	ldh	r5,14(r16)
  808354:	10bbffcc 	andi	r2,r2,61439
  808358:	980f883a 	mov	r7,r19
  80835c:	900d883a 	mov	r6,r18
  808360:	8809883a 	mov	r4,r17
  808364:	8080030d 	sth	r2,12(r16)
  808368:	dfc00417 	ldw	ra,16(sp)
  80836c:	dcc00317 	ldw	r19,12(sp)
  808370:	dc800217 	ldw	r18,8(sp)
  808374:	dc400117 	ldw	r17,4(sp)
  808378:	dc000017 	ldw	r16,0(sp)
  80837c:	dec00504 	addi	sp,sp,20
  808380:	080a7501 	jmpi	80a750 <_write_r>

00808384 <__sseek>:
  808384:	defffe04 	addi	sp,sp,-8
  808388:	dc000015 	stw	r16,0(sp)
  80838c:	2821883a 	mov	r16,r5
  808390:	2940038f 	ldh	r5,14(r5)
  808394:	dfc00115 	stw	ra,4(sp)
  808398:	080d47c0 	call	80d47c <_lseek_r>
  80839c:	00ffffc4 	movi	r3,-1
  8083a0:	10c00826 	beq	r2,r3,8083c4 <__sseek+0x40>
  8083a4:	80c0030b 	ldhu	r3,12(r16)
  8083a8:	80801415 	stw	r2,80(r16)
  8083ac:	18c40014 	ori	r3,r3,4096
  8083b0:	80c0030d 	sth	r3,12(r16)
  8083b4:	dfc00117 	ldw	ra,4(sp)
  8083b8:	dc000017 	ldw	r16,0(sp)
  8083bc:	dec00204 	addi	sp,sp,8
  8083c0:	f800283a 	ret
  8083c4:	80c0030b 	ldhu	r3,12(r16)
  8083c8:	18fbffcc 	andi	r3,r3,61439
  8083cc:	80c0030d 	sth	r3,12(r16)
  8083d0:	dfc00117 	ldw	ra,4(sp)
  8083d4:	dc000017 	ldw	r16,0(sp)
  8083d8:	dec00204 	addi	sp,sp,8
  8083dc:	f800283a 	ret

008083e0 <__sclose>:
  8083e0:	2940038f 	ldh	r5,14(r5)
  8083e4:	080a9041 	jmpi	80a904 <_close_r>

008083e8 <strlen>:
  8083e8:	208000cc 	andi	r2,r4,3
  8083ec:	10002026 	beq	r2,zero,808470 <strlen+0x88>
  8083f0:	20800007 	ldb	r2,0(r4)
  8083f4:	10002026 	beq	r2,zero,808478 <strlen+0x90>
  8083f8:	2005883a 	mov	r2,r4
  8083fc:	00000206 	br	808408 <strlen+0x20>
  808400:	10c00007 	ldb	r3,0(r2)
  808404:	18001826 	beq	r3,zero,808468 <strlen+0x80>
  808408:	10800044 	addi	r2,r2,1
  80840c:	10c000cc 	andi	r3,r2,3
  808410:	183ffb1e 	bne	r3,zero,808400 <__alt_mem_onchip_mem+0xff800400>
  808414:	10c00017 	ldw	r3,0(r2)
  808418:	01ffbff4 	movhi	r7,65279
  80841c:	39ffbfc4 	addi	r7,r7,-257
  808420:	00ca303a 	nor	r5,zero,r3
  808424:	01a02074 	movhi	r6,32897
  808428:	19c7883a 	add	r3,r3,r7
  80842c:	31a02004 	addi	r6,r6,-32640
  808430:	1946703a 	and	r3,r3,r5
  808434:	1986703a 	and	r3,r3,r6
  808438:	1800091e 	bne	r3,zero,808460 <strlen+0x78>
  80843c:	10800104 	addi	r2,r2,4
  808440:	10c00017 	ldw	r3,0(r2)
  808444:	19cb883a 	add	r5,r3,r7
  808448:	00c6303a 	nor	r3,zero,r3
  80844c:	28c6703a 	and	r3,r5,r3
  808450:	1986703a 	and	r3,r3,r6
  808454:	183ff926 	beq	r3,zero,80843c <__alt_mem_onchip_mem+0xff80043c>
  808458:	00000106 	br	808460 <strlen+0x78>
  80845c:	10800044 	addi	r2,r2,1
  808460:	10c00007 	ldb	r3,0(r2)
  808464:	183ffd1e 	bne	r3,zero,80845c <__alt_mem_onchip_mem+0xff80045c>
  808468:	1105c83a 	sub	r2,r2,r4
  80846c:	f800283a 	ret
  808470:	2005883a 	mov	r2,r4
  808474:	003fe706 	br	808414 <__alt_mem_onchip_mem+0xff800414>
  808478:	0005883a 	mov	r2,zero
  80847c:	f800283a 	ret

00808480 <___vfprintf_internal_r>:
  808480:	deffb804 	addi	sp,sp,-288
  808484:	dfc04715 	stw	ra,284(sp)
  808488:	ddc04515 	stw	r23,276(sp)
  80848c:	dd404315 	stw	r21,268(sp)
  808490:	d9002c15 	stw	r4,176(sp)
  808494:	282f883a 	mov	r23,r5
  808498:	302b883a 	mov	r21,r6
  80849c:	d9c02d15 	stw	r7,180(sp)
  8084a0:	df004615 	stw	fp,280(sp)
  8084a4:	dd804415 	stw	r22,272(sp)
  8084a8:	dd004215 	stw	r20,264(sp)
  8084ac:	dcc04115 	stw	r19,260(sp)
  8084b0:	dc804015 	stw	r18,256(sp)
  8084b4:	dc403f15 	stw	r17,252(sp)
  8084b8:	dc003e15 	stw	r16,248(sp)
  8084bc:	080d44c0 	call	80d44c <_localeconv_r>
  8084c0:	10800017 	ldw	r2,0(r2)
  8084c4:	1009883a 	mov	r4,r2
  8084c8:	d8803415 	stw	r2,208(sp)
  8084cc:	08083e80 	call	8083e8 <strlen>
  8084d0:	d8803715 	stw	r2,220(sp)
  8084d4:	d8802c17 	ldw	r2,176(sp)
  8084d8:	10000226 	beq	r2,zero,8084e4 <___vfprintf_internal_r+0x64>
  8084dc:	10800e17 	ldw	r2,56(r2)
  8084e0:	1000f926 	beq	r2,zero,8088c8 <___vfprintf_internal_r+0x448>
  8084e4:	b880030b 	ldhu	r2,12(r23)
  8084e8:	10c8000c 	andi	r3,r2,8192
  8084ec:	1800061e 	bne	r3,zero,808508 <___vfprintf_internal_r+0x88>
  8084f0:	b9001917 	ldw	r4,100(r23)
  8084f4:	00f7ffc4 	movi	r3,-8193
  8084f8:	10880014 	ori	r2,r2,8192
  8084fc:	20c6703a 	and	r3,r4,r3
  808500:	b880030d 	sth	r2,12(r23)
  808504:	b8c01915 	stw	r3,100(r23)
  808508:	10c0020c 	andi	r3,r2,8
  80850c:	1800c126 	beq	r3,zero,808814 <___vfprintf_internal_r+0x394>
  808510:	b8c00417 	ldw	r3,16(r23)
  808514:	1800bf26 	beq	r3,zero,808814 <___vfprintf_internal_r+0x394>
  808518:	1080068c 	andi	r2,r2,26
  80851c:	00c00284 	movi	r3,10
  808520:	10c0c426 	beq	r2,r3,808834 <___vfprintf_internal_r+0x3b4>
  808524:	d8c00404 	addi	r3,sp,16
  808528:	05002074 	movhi	r20,129
  80852c:	d9001e04 	addi	r4,sp,120
  808530:	a51c4e84 	addi	r20,r20,28986
  808534:	d8c01e15 	stw	r3,120(sp)
  808538:	d8002015 	stw	zero,128(sp)
  80853c:	d8001f15 	stw	zero,124(sp)
  808540:	d8003315 	stw	zero,204(sp)
  808544:	d8003615 	stw	zero,216(sp)
  808548:	d8003815 	stw	zero,224(sp)
  80854c:	1811883a 	mov	r8,r3
  808550:	d8003915 	stw	zero,228(sp)
  808554:	d8003a15 	stw	zero,232(sp)
  808558:	d8002f15 	stw	zero,188(sp)
  80855c:	d9002815 	stw	r4,160(sp)
  808560:	a8800007 	ldb	r2,0(r21)
  808564:	10027b26 	beq	r2,zero,808f54 <___vfprintf_internal_r+0xad4>
  808568:	00c00944 	movi	r3,37
  80856c:	a821883a 	mov	r16,r21
  808570:	10c0021e 	bne	r2,r3,80857c <___vfprintf_internal_r+0xfc>
  808574:	00001406 	br	8085c8 <___vfprintf_internal_r+0x148>
  808578:	10c00326 	beq	r2,r3,808588 <___vfprintf_internal_r+0x108>
  80857c:	84000044 	addi	r16,r16,1
  808580:	80800007 	ldb	r2,0(r16)
  808584:	103ffc1e 	bne	r2,zero,808578 <__alt_mem_onchip_mem+0xff800578>
  808588:	8563c83a 	sub	r17,r16,r21
  80858c:	88000e26 	beq	r17,zero,8085c8 <___vfprintf_internal_r+0x148>
  808590:	d8c02017 	ldw	r3,128(sp)
  808594:	d8801f17 	ldw	r2,124(sp)
  808598:	45400015 	stw	r21,0(r8)
  80859c:	1c47883a 	add	r3,r3,r17
  8085a0:	10800044 	addi	r2,r2,1
  8085a4:	d8c02015 	stw	r3,128(sp)
  8085a8:	44400115 	stw	r17,4(r8)
  8085ac:	d8801f15 	stw	r2,124(sp)
  8085b0:	00c001c4 	movi	r3,7
  8085b4:	1880a716 	blt	r3,r2,808854 <___vfprintf_internal_r+0x3d4>
  8085b8:	42000204 	addi	r8,r8,8
  8085bc:	d9402f17 	ldw	r5,188(sp)
  8085c0:	2c4b883a 	add	r5,r5,r17
  8085c4:	d9402f15 	stw	r5,188(sp)
  8085c8:	80800007 	ldb	r2,0(r16)
  8085cc:	1000a826 	beq	r2,zero,808870 <___vfprintf_internal_r+0x3f0>
  8085d0:	84400047 	ldb	r17,1(r16)
  8085d4:	00bfffc4 	movi	r2,-1
  8085d8:	85400044 	addi	r21,r16,1
  8085dc:	d8002785 	stb	zero,158(sp)
  8085e0:	0007883a 	mov	r3,zero
  8085e4:	000f883a 	mov	r7,zero
  8085e8:	d8802915 	stw	r2,164(sp)
  8085ec:	d8003115 	stw	zero,196(sp)
  8085f0:	0025883a 	mov	r18,zero
  8085f4:	01401604 	movi	r5,88
  8085f8:	01800244 	movi	r6,9
  8085fc:	02800a84 	movi	r10,42
  808600:	02401b04 	movi	r9,108
  808604:	ad400044 	addi	r21,r21,1
  808608:	88bff804 	addi	r2,r17,-32
  80860c:	28830436 	bltu	r5,r2,809220 <___vfprintf_internal_r+0xda0>
  808610:	100490ba 	slli	r2,r2,2
  808614:	01002074 	movhi	r4,129
  808618:	21218a04 	addi	r4,r4,-31192
  80861c:	1105883a 	add	r2,r2,r4
  808620:	10800017 	ldw	r2,0(r2)
  808624:	1000683a 	jmp	r2
  808628:	00809140 	call	80914 <__reset-0x77f6ec>
  80862c:	00809220 	cmpeqi	r2,zero,584
  808630:	00809220 	cmpeqi	r2,zero,584
  808634:	00809160 	cmpeqi	r2,zero,581
  808638:	00809220 	cmpeqi	r2,zero,584
  80863c:	00809220 	cmpeqi	r2,zero,584
  808640:	00809220 	cmpeqi	r2,zero,584
  808644:	00809220 	cmpeqi	r2,zero,584
  808648:	00809220 	cmpeqi	r2,zero,584
  80864c:	00809220 	cmpeqi	r2,zero,584
  808650:	008088d4 	movui	r2,547
  808654:	0080907c 	xorhi	r2,zero,577
  808658:	00809220 	cmpeqi	r2,zero,584
  80865c:	0080879c 	xori	r2,zero,542
  808660:	008088fc 	xorhi	r2,zero,547
  808664:	00809220 	cmpeqi	r2,zero,584
  808668:	0080893c 	xorhi	r2,zero,548
  80866c:	00808948 	cmpgei	r2,zero,549
  808670:	00808948 	cmpgei	r2,zero,549
  808674:	00808948 	cmpgei	r2,zero,549
  808678:	00808948 	cmpgei	r2,zero,549
  80867c:	00808948 	cmpgei	r2,zero,549
  808680:	00808948 	cmpgei	r2,zero,549
  808684:	00808948 	cmpgei	r2,zero,549
  808688:	00808948 	cmpgei	r2,zero,549
  80868c:	00808948 	cmpgei	r2,zero,549
  808690:	00809220 	cmpeqi	r2,zero,584
  808694:	00809220 	cmpeqi	r2,zero,584
  808698:	00809220 	cmpeqi	r2,zero,584
  80869c:	00809220 	cmpeqi	r2,zero,584
  8086a0:	00809220 	cmpeqi	r2,zero,584
  8086a4:	00809220 	cmpeqi	r2,zero,584
  8086a8:	00809220 	cmpeqi	r2,zero,584
  8086ac:	00809220 	cmpeqi	r2,zero,584
  8086b0:	00809220 	cmpeqi	r2,zero,584
  8086b4:	00809220 	cmpeqi	r2,zero,584
  8086b8:	0080897c 	xorhi	r2,zero,549
  8086bc:	00808a38 	rdprs	r2,zero,552
  8086c0:	00809220 	cmpeqi	r2,zero,584
  8086c4:	00808a38 	rdprs	r2,zero,552
  8086c8:	00809220 	cmpeqi	r2,zero,584
  8086cc:	00809220 	cmpeqi	r2,zero,584
  8086d0:	00809220 	cmpeqi	r2,zero,584
  8086d4:	00809220 	cmpeqi	r2,zero,584
  8086d8:	00808ad8 	cmpnei	r2,zero,555
  8086dc:	00809220 	cmpeqi	r2,zero,584
  8086e0:	00809220 	cmpeqi	r2,zero,584
  8086e4:	00808ae4 	muli	r2,zero,555
  8086e8:	00809220 	cmpeqi	r2,zero,584
  8086ec:	00809220 	cmpeqi	r2,zero,584
  8086f0:	00809220 	cmpeqi	r2,zero,584
  8086f4:	00809220 	cmpeqi	r2,zero,584
  8086f8:	00809220 	cmpeqi	r2,zero,584
  8086fc:	00808f5c 	xori	r2,zero,573
  808700:	00809220 	cmpeqi	r2,zero,584
  808704:	00809220 	cmpeqi	r2,zero,584
  808708:	00808fbc 	xorhi	r2,zero,574
  80870c:	00809220 	cmpeqi	r2,zero,584
  808710:	00809220 	cmpeqi	r2,zero,584
  808714:	00809220 	cmpeqi	r2,zero,584
  808718:	00809220 	cmpeqi	r2,zero,584
  80871c:	00809220 	cmpeqi	r2,zero,584
  808720:	00809220 	cmpeqi	r2,zero,584
  808724:	00809220 	cmpeqi	r2,zero,584
  808728:	00809220 	cmpeqi	r2,zero,584
  80872c:	00809220 	cmpeqi	r2,zero,584
  808730:	00809220 	cmpeqi	r2,zero,584
  808734:	008091cc 	andi	r2,zero,583
  808738:	0080916c 	andhi	r2,zero,581
  80873c:	00808a38 	rdprs	r2,zero,552
  808740:	00808a38 	rdprs	r2,zero,552
  808744:	00808a38 	rdprs	r2,zero,552
  808748:	0080917c 	xorhi	r2,zero,581
  80874c:	0080916c 	andhi	r2,zero,581
  808750:	00809220 	cmpeqi	r2,zero,584
  808754:	00809220 	cmpeqi	r2,zero,584
  808758:	00809188 	cmpgei	r2,zero,582
  80875c:	00809220 	cmpeqi	r2,zero,584
  808760:	00809198 	cmpnei	r2,zero,582
  808764:	0080906c 	andhi	r2,zero,577
  808768:	008087a8 	cmpgeui	r2,zero,542
  80876c:	0080908c 	andi	r2,zero,578
  808770:	00809220 	cmpeqi	r2,zero,584
  808774:	00809098 	cmpnei	r2,zero,578
  808778:	00809220 	cmpeqi	r2,zero,584
  80877c:	008090f4 	movhi	r2,579
  808780:	00809220 	cmpeqi	r2,zero,584
  808784:	00809220 	cmpeqi	r2,zero,584
  808788:	00809104 	movi	r2,580
  80878c:	d9003117 	ldw	r4,196(sp)
  808790:	d8802d15 	stw	r2,180(sp)
  808794:	0109c83a 	sub	r4,zero,r4
  808798:	d9003115 	stw	r4,196(sp)
  80879c:	94800114 	ori	r18,r18,4
  8087a0:	ac400007 	ldb	r17,0(r21)
  8087a4:	003f9706 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  8087a8:	00800c04 	movi	r2,48
  8087ac:	d9002d17 	ldw	r4,180(sp)
  8087b0:	d9402917 	ldw	r5,164(sp)
  8087b4:	d8802705 	stb	r2,156(sp)
  8087b8:	00801e04 	movi	r2,120
  8087bc:	d8802745 	stb	r2,157(sp)
  8087c0:	d8002785 	stb	zero,158(sp)
  8087c4:	20c00104 	addi	r3,r4,4
  8087c8:	24c00017 	ldw	r19,0(r4)
  8087cc:	002d883a 	mov	r22,zero
  8087d0:	90800094 	ori	r2,r18,2
  8087d4:	28029a16 	blt	r5,zero,809240 <___vfprintf_internal_r+0xdc0>
  8087d8:	00bfdfc4 	movi	r2,-129
  8087dc:	90a4703a 	and	r18,r18,r2
  8087e0:	d8c02d15 	stw	r3,180(sp)
  8087e4:	94800094 	ori	r18,r18,2
  8087e8:	9802871e 	bne	r19,zero,809208 <___vfprintf_internal_r+0xd88>
  8087ec:	00802074 	movhi	r2,129
  8087f0:	109c4704 	addi	r2,r2,28956
  8087f4:	d8803915 	stw	r2,228(sp)
  8087f8:	04401e04 	movi	r17,120
  8087fc:	d8802917 	ldw	r2,164(sp)
  808800:	0039883a 	mov	fp,zero
  808804:	1001e926 	beq	r2,zero,808fac <___vfprintf_internal_r+0xb2c>
  808808:	0027883a 	mov	r19,zero
  80880c:	002d883a 	mov	r22,zero
  808810:	00020506 	br	809028 <___vfprintf_internal_r+0xba8>
  808814:	d9002c17 	ldw	r4,176(sp)
  808818:	b80b883a 	mov	r5,r23
  80881c:	080a7b00 	call	80a7b0 <__swsetup_r>
  808820:	1005ac1e 	bne	r2,zero,809ed4 <___vfprintf_internal_r+0x1a54>
  808824:	b880030b 	ldhu	r2,12(r23)
  808828:	00c00284 	movi	r3,10
  80882c:	1080068c 	andi	r2,r2,26
  808830:	10ff3c1e 	bne	r2,r3,808524 <__alt_mem_onchip_mem+0xff800524>
  808834:	b880038f 	ldh	r2,14(r23)
  808838:	103f3a16 	blt	r2,zero,808524 <__alt_mem_onchip_mem+0xff800524>
  80883c:	d9c02d17 	ldw	r7,180(sp)
  808840:	d9002c17 	ldw	r4,176(sp)
  808844:	a80d883a 	mov	r6,r21
  808848:	b80b883a 	mov	r5,r23
  80884c:	080a6940 	call	80a694 <__sbprintf>
  808850:	00001106 	br	808898 <___vfprintf_internal_r+0x418>
  808854:	d9002c17 	ldw	r4,176(sp)
  808858:	d9801e04 	addi	r6,sp,120
  80885c:	b80b883a 	mov	r5,r23
  808860:	080f1d80 	call	80f1d8 <__sprint_r>
  808864:	1000081e 	bne	r2,zero,808888 <___vfprintf_internal_r+0x408>
  808868:	da000404 	addi	r8,sp,16
  80886c:	003f5306 	br	8085bc <__alt_mem_onchip_mem+0xff8005bc>
  808870:	d8802017 	ldw	r2,128(sp)
  808874:	10000426 	beq	r2,zero,808888 <___vfprintf_internal_r+0x408>
  808878:	d9002c17 	ldw	r4,176(sp)
  80887c:	d9801e04 	addi	r6,sp,120
  808880:	b80b883a 	mov	r5,r23
  808884:	080f1d80 	call	80f1d8 <__sprint_r>
  808888:	b880030b 	ldhu	r2,12(r23)
  80888c:	1080100c 	andi	r2,r2,64
  808890:	1005901e 	bne	r2,zero,809ed4 <___vfprintf_internal_r+0x1a54>
  808894:	d8802f17 	ldw	r2,188(sp)
  808898:	dfc04717 	ldw	ra,284(sp)
  80889c:	df004617 	ldw	fp,280(sp)
  8088a0:	ddc04517 	ldw	r23,276(sp)
  8088a4:	dd804417 	ldw	r22,272(sp)
  8088a8:	dd404317 	ldw	r21,268(sp)
  8088ac:	dd004217 	ldw	r20,264(sp)
  8088b0:	dcc04117 	ldw	r19,260(sp)
  8088b4:	dc804017 	ldw	r18,256(sp)
  8088b8:	dc403f17 	ldw	r17,252(sp)
  8088bc:	dc003e17 	ldw	r16,248(sp)
  8088c0:	dec04804 	addi	sp,sp,288
  8088c4:	f800283a 	ret
  8088c8:	d9002c17 	ldw	r4,176(sp)
  8088cc:	080c7d80 	call	80c7d8 <__sinit>
  8088d0:	003f0406 	br	8084e4 <__alt_mem_onchip_mem+0xff8004e4>
  8088d4:	d8802d17 	ldw	r2,180(sp)
  8088d8:	d9002d17 	ldw	r4,180(sp)
  8088dc:	10800017 	ldw	r2,0(r2)
  8088e0:	d8803115 	stw	r2,196(sp)
  8088e4:	20800104 	addi	r2,r4,4
  8088e8:	d9003117 	ldw	r4,196(sp)
  8088ec:	203fa716 	blt	r4,zero,80878c <__alt_mem_onchip_mem+0xff80078c>
  8088f0:	d8802d15 	stw	r2,180(sp)
  8088f4:	ac400007 	ldb	r17,0(r21)
  8088f8:	003f4206 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  8088fc:	ac400007 	ldb	r17,0(r21)
  808900:	aac00044 	addi	r11,r21,1
  808904:	8a872826 	beq	r17,r10,80a5a8 <___vfprintf_internal_r+0x2128>
  808908:	88bff404 	addi	r2,r17,-48
  80890c:	0009883a 	mov	r4,zero
  808910:	30867d36 	bltu	r6,r2,80a308 <___vfprintf_internal_r+0x1e88>
  808914:	5c400007 	ldb	r17,0(r11)
  808918:	210002a4 	muli	r4,r4,10
  80891c:	5d400044 	addi	r21,r11,1
  808920:	a817883a 	mov	r11,r21
  808924:	2089883a 	add	r4,r4,r2
  808928:	88bff404 	addi	r2,r17,-48
  80892c:	30bff92e 	bgeu	r6,r2,808914 <__alt_mem_onchip_mem+0xff800914>
  808930:	2005c916 	blt	r4,zero,80a058 <___vfprintf_internal_r+0x1bd8>
  808934:	d9002915 	stw	r4,164(sp)
  808938:	003f3306 	br	808608 <__alt_mem_onchip_mem+0xff800608>
  80893c:	94802014 	ori	r18,r18,128
  808940:	ac400007 	ldb	r17,0(r21)
  808944:	003f2f06 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  808948:	a809883a 	mov	r4,r21
  80894c:	d8003115 	stw	zero,196(sp)
  808950:	88bff404 	addi	r2,r17,-48
  808954:	0017883a 	mov	r11,zero
  808958:	24400007 	ldb	r17,0(r4)
  80895c:	5ac002a4 	muli	r11,r11,10
  808960:	ad400044 	addi	r21,r21,1
  808964:	a809883a 	mov	r4,r21
  808968:	12d7883a 	add	r11,r2,r11
  80896c:	88bff404 	addi	r2,r17,-48
  808970:	30bff92e 	bgeu	r6,r2,808958 <__alt_mem_onchip_mem+0xff800958>
  808974:	dac03115 	stw	r11,196(sp)
  808978:	003f2306 	br	808608 <__alt_mem_onchip_mem+0xff800608>
  80897c:	18c03fcc 	andi	r3,r3,255
  808980:	18072b1e 	bne	r3,zero,80a630 <___vfprintf_internal_r+0x21b0>
  808984:	94800414 	ori	r18,r18,16
  808988:	9080080c 	andi	r2,r18,32
  80898c:	10037b26 	beq	r2,zero,80977c <___vfprintf_internal_r+0x12fc>
  808990:	d9402d17 	ldw	r5,180(sp)
  808994:	28800117 	ldw	r2,4(r5)
  808998:	2cc00017 	ldw	r19,0(r5)
  80899c:	29400204 	addi	r5,r5,8
  8089a0:	d9402d15 	stw	r5,180(sp)
  8089a4:	102d883a 	mov	r22,r2
  8089a8:	10044b16 	blt	r2,zero,809ad8 <___vfprintf_internal_r+0x1658>
  8089ac:	d9402917 	ldw	r5,164(sp)
  8089b0:	df002783 	ldbu	fp,158(sp)
  8089b4:	2803bc16 	blt	r5,zero,8098a8 <___vfprintf_internal_r+0x1428>
  8089b8:	00ffdfc4 	movi	r3,-129
  8089bc:	9d84b03a 	or	r2,r19,r22
  8089c0:	90e4703a 	and	r18,r18,r3
  8089c4:	10017726 	beq	r2,zero,808fa4 <___vfprintf_internal_r+0xb24>
  8089c8:	b0038326 	beq	r22,zero,8097d8 <___vfprintf_internal_r+0x1358>
  8089cc:	dc402a15 	stw	r17,168(sp)
  8089d0:	dc001e04 	addi	r16,sp,120
  8089d4:	b023883a 	mov	r17,r22
  8089d8:	402d883a 	mov	r22,r8
  8089dc:	9809883a 	mov	r4,r19
  8089e0:	880b883a 	mov	r5,r17
  8089e4:	01800284 	movi	r6,10
  8089e8:	000f883a 	mov	r7,zero
  8089ec:	08113ac0 	call	8113ac <__umoddi3>
  8089f0:	10800c04 	addi	r2,r2,48
  8089f4:	843fffc4 	addi	r16,r16,-1
  8089f8:	9809883a 	mov	r4,r19
  8089fc:	880b883a 	mov	r5,r17
  808a00:	80800005 	stb	r2,0(r16)
  808a04:	01800284 	movi	r6,10
  808a08:	000f883a 	mov	r7,zero
  808a0c:	0810e340 	call	810e34 <__udivdi3>
  808a10:	1027883a 	mov	r19,r2
  808a14:	10c4b03a 	or	r2,r2,r3
  808a18:	1823883a 	mov	r17,r3
  808a1c:	103fef1e 	bne	r2,zero,8089dc <__alt_mem_onchip_mem+0xff8009dc>
  808a20:	d8c02817 	ldw	r3,160(sp)
  808a24:	dc402a17 	ldw	r17,168(sp)
  808a28:	b011883a 	mov	r8,r22
  808a2c:	1c07c83a 	sub	r3,r3,r16
  808a30:	d8c02e15 	stw	r3,184(sp)
  808a34:	00005906 	br	808b9c <___vfprintf_internal_r+0x71c>
  808a38:	18c03fcc 	andi	r3,r3,255
  808a3c:	1806fa1e 	bne	r3,zero,80a628 <___vfprintf_internal_r+0x21a8>
  808a40:	9080020c 	andi	r2,r18,8
  808a44:	10048a26 	beq	r2,zero,809c70 <___vfprintf_internal_r+0x17f0>
  808a48:	d8c02d17 	ldw	r3,180(sp)
  808a4c:	d9002d17 	ldw	r4,180(sp)
  808a50:	d9402d17 	ldw	r5,180(sp)
  808a54:	18c00017 	ldw	r3,0(r3)
  808a58:	21000117 	ldw	r4,4(r4)
  808a5c:	29400204 	addi	r5,r5,8
  808a60:	d8c03615 	stw	r3,216(sp)
  808a64:	d9003815 	stw	r4,224(sp)
  808a68:	d9402d15 	stw	r5,180(sp)
  808a6c:	d9003617 	ldw	r4,216(sp)
  808a70:	d9403817 	ldw	r5,224(sp)
  808a74:	da003d15 	stw	r8,244(sp)
  808a78:	04000044 	movi	r16,1
  808a7c:	080ef8c0 	call	80ef8c <__fpclassifyd>
  808a80:	da003d17 	ldw	r8,244(sp)
  808a84:	14041f1e 	bne	r2,r16,809b04 <___vfprintf_internal_r+0x1684>
  808a88:	d9003617 	ldw	r4,216(sp)
  808a8c:	d9403817 	ldw	r5,224(sp)
  808a90:	000d883a 	mov	r6,zero
  808a94:	000f883a 	mov	r7,zero
  808a98:	08061180 	call	806118 <__ledf2>
  808a9c:	da003d17 	ldw	r8,244(sp)
  808aa0:	1005be16 	blt	r2,zero,80a19c <___vfprintf_internal_r+0x1d1c>
  808aa4:	df002783 	ldbu	fp,158(sp)
  808aa8:	008011c4 	movi	r2,71
  808aac:	1445330e 	bge	r2,r17,809f7c <___vfprintf_internal_r+0x1afc>
  808ab0:	04002074 	movhi	r16,129
  808ab4:	841c3f04 	addi	r16,r16,28924
  808ab8:	00c000c4 	movi	r3,3
  808abc:	00bfdfc4 	movi	r2,-129
  808ac0:	d8c02a15 	stw	r3,168(sp)
  808ac4:	90a4703a 	and	r18,r18,r2
  808ac8:	d8c02e15 	stw	r3,184(sp)
  808acc:	d8002915 	stw	zero,164(sp)
  808ad0:	d8003215 	stw	zero,200(sp)
  808ad4:	00003706 	br	808bb4 <___vfprintf_internal_r+0x734>
  808ad8:	94800214 	ori	r18,r18,8
  808adc:	ac400007 	ldb	r17,0(r21)
  808ae0:	003ec806 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  808ae4:	18c03fcc 	andi	r3,r3,255
  808ae8:	1806db1e 	bne	r3,zero,80a658 <___vfprintf_internal_r+0x21d8>
  808aec:	94800414 	ori	r18,r18,16
  808af0:	9080080c 	andi	r2,r18,32
  808af4:	1002d826 	beq	r2,zero,809658 <___vfprintf_internal_r+0x11d8>
  808af8:	d9402d17 	ldw	r5,180(sp)
  808afc:	d8c02917 	ldw	r3,164(sp)
  808b00:	d8002785 	stb	zero,158(sp)
  808b04:	28800204 	addi	r2,r5,8
  808b08:	2cc00017 	ldw	r19,0(r5)
  808b0c:	2d800117 	ldw	r22,4(r5)
  808b10:	18048f16 	blt	r3,zero,809d50 <___vfprintf_internal_r+0x18d0>
  808b14:	013fdfc4 	movi	r4,-129
  808b18:	9d86b03a 	or	r3,r19,r22
  808b1c:	d8802d15 	stw	r2,180(sp)
  808b20:	9124703a 	and	r18,r18,r4
  808b24:	1802d91e 	bne	r3,zero,80968c <___vfprintf_internal_r+0x120c>
  808b28:	d8c02917 	ldw	r3,164(sp)
  808b2c:	0039883a 	mov	fp,zero
  808b30:	1805c326 	beq	r3,zero,80a240 <___vfprintf_internal_r+0x1dc0>
  808b34:	0027883a 	mov	r19,zero
  808b38:	002d883a 	mov	r22,zero
  808b3c:	dc001e04 	addi	r16,sp,120
  808b40:	9806d0fa 	srli	r3,r19,3
  808b44:	b008977a 	slli	r4,r22,29
  808b48:	b02cd0fa 	srli	r22,r22,3
  808b4c:	9cc001cc 	andi	r19,r19,7
  808b50:	98800c04 	addi	r2,r19,48
  808b54:	843fffc4 	addi	r16,r16,-1
  808b58:	20e6b03a 	or	r19,r4,r3
  808b5c:	80800005 	stb	r2,0(r16)
  808b60:	9d86b03a 	or	r3,r19,r22
  808b64:	183ff61e 	bne	r3,zero,808b40 <__alt_mem_onchip_mem+0xff800b40>
  808b68:	90c0004c 	andi	r3,r18,1
  808b6c:	18013b26 	beq	r3,zero,80905c <___vfprintf_internal_r+0xbdc>
  808b70:	10803fcc 	andi	r2,r2,255
  808b74:	1080201c 	xori	r2,r2,128
  808b78:	10bfe004 	addi	r2,r2,-128
  808b7c:	00c00c04 	movi	r3,48
  808b80:	10c13626 	beq	r2,r3,80905c <___vfprintf_internal_r+0xbdc>
  808b84:	80ffffc5 	stb	r3,-1(r16)
  808b88:	d8c02817 	ldw	r3,160(sp)
  808b8c:	80bfffc4 	addi	r2,r16,-1
  808b90:	1021883a 	mov	r16,r2
  808b94:	1887c83a 	sub	r3,r3,r2
  808b98:	d8c02e15 	stw	r3,184(sp)
  808b9c:	d8802e17 	ldw	r2,184(sp)
  808ba0:	d9002917 	ldw	r4,164(sp)
  808ba4:	1100010e 	bge	r2,r4,808bac <___vfprintf_internal_r+0x72c>
  808ba8:	2005883a 	mov	r2,r4
  808bac:	d8802a15 	stw	r2,168(sp)
  808bb0:	d8003215 	stw	zero,200(sp)
  808bb4:	e7003fcc 	andi	fp,fp,255
  808bb8:	e700201c 	xori	fp,fp,128
  808bbc:	e73fe004 	addi	fp,fp,-128
  808bc0:	e0000326 	beq	fp,zero,808bd0 <___vfprintf_internal_r+0x750>
  808bc4:	d8c02a17 	ldw	r3,168(sp)
  808bc8:	18c00044 	addi	r3,r3,1
  808bcc:	d8c02a15 	stw	r3,168(sp)
  808bd0:	90c0008c 	andi	r3,r18,2
  808bd4:	d8c02b15 	stw	r3,172(sp)
  808bd8:	18000326 	beq	r3,zero,808be8 <___vfprintf_internal_r+0x768>
  808bdc:	d8c02a17 	ldw	r3,168(sp)
  808be0:	18c00084 	addi	r3,r3,2
  808be4:	d8c02a15 	stw	r3,168(sp)
  808be8:	90c0210c 	andi	r3,r18,132
  808bec:	d8c03015 	stw	r3,192(sp)
  808bf0:	1801a31e 	bne	r3,zero,809280 <___vfprintf_internal_r+0xe00>
  808bf4:	d9003117 	ldw	r4,196(sp)
  808bf8:	d8c02a17 	ldw	r3,168(sp)
  808bfc:	20e7c83a 	sub	r19,r4,r3
  808c00:	04c19f0e 	bge	zero,r19,809280 <___vfprintf_internal_r+0xe00>
  808c04:	02400404 	movi	r9,16
  808c08:	d8c02017 	ldw	r3,128(sp)
  808c0c:	d8801f17 	ldw	r2,124(sp)
  808c10:	4cc50d0e 	bge	r9,r19,80a048 <___vfprintf_internal_r+0x1bc8>
  808c14:	01402074 	movhi	r5,129
  808c18:	295c5284 	addi	r5,r5,29002
  808c1c:	dc403b15 	stw	r17,236(sp)
  808c20:	d9403515 	stw	r5,212(sp)
  808c24:	9823883a 	mov	r17,r19
  808c28:	482d883a 	mov	r22,r9
  808c2c:	9027883a 	mov	r19,r18
  808c30:	070001c4 	movi	fp,7
  808c34:	8025883a 	mov	r18,r16
  808c38:	dc002c17 	ldw	r16,176(sp)
  808c3c:	00000306 	br	808c4c <___vfprintf_internal_r+0x7cc>
  808c40:	8c7ffc04 	addi	r17,r17,-16
  808c44:	42000204 	addi	r8,r8,8
  808c48:	b440130e 	bge	r22,r17,808c98 <___vfprintf_internal_r+0x818>
  808c4c:	01002074 	movhi	r4,129
  808c50:	18c00404 	addi	r3,r3,16
  808c54:	10800044 	addi	r2,r2,1
  808c58:	211c5284 	addi	r4,r4,29002
  808c5c:	41000015 	stw	r4,0(r8)
  808c60:	45800115 	stw	r22,4(r8)
  808c64:	d8c02015 	stw	r3,128(sp)
  808c68:	d8801f15 	stw	r2,124(sp)
  808c6c:	e0bff40e 	bge	fp,r2,808c40 <__alt_mem_onchip_mem+0xff800c40>
  808c70:	d9801e04 	addi	r6,sp,120
  808c74:	b80b883a 	mov	r5,r23
  808c78:	8009883a 	mov	r4,r16
  808c7c:	080f1d80 	call	80f1d8 <__sprint_r>
  808c80:	103f011e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  808c84:	8c7ffc04 	addi	r17,r17,-16
  808c88:	d8c02017 	ldw	r3,128(sp)
  808c8c:	d8801f17 	ldw	r2,124(sp)
  808c90:	da000404 	addi	r8,sp,16
  808c94:	b47fed16 	blt	r22,r17,808c4c <__alt_mem_onchip_mem+0xff800c4c>
  808c98:	9021883a 	mov	r16,r18
  808c9c:	9825883a 	mov	r18,r19
  808ca0:	8827883a 	mov	r19,r17
  808ca4:	dc403b17 	ldw	r17,236(sp)
  808ca8:	d9403517 	ldw	r5,212(sp)
  808cac:	98c7883a 	add	r3,r19,r3
  808cb0:	10800044 	addi	r2,r2,1
  808cb4:	41400015 	stw	r5,0(r8)
  808cb8:	44c00115 	stw	r19,4(r8)
  808cbc:	d8c02015 	stw	r3,128(sp)
  808cc0:	d8801f15 	stw	r2,124(sp)
  808cc4:	010001c4 	movi	r4,7
  808cc8:	2082a316 	blt	r4,r2,809758 <___vfprintf_internal_r+0x12d8>
  808ccc:	df002787 	ldb	fp,158(sp)
  808cd0:	42000204 	addi	r8,r8,8
  808cd4:	e0000c26 	beq	fp,zero,808d08 <___vfprintf_internal_r+0x888>
  808cd8:	d8801f17 	ldw	r2,124(sp)
  808cdc:	d9002784 	addi	r4,sp,158
  808ce0:	18c00044 	addi	r3,r3,1
  808ce4:	10800044 	addi	r2,r2,1
  808ce8:	41000015 	stw	r4,0(r8)
  808cec:	01000044 	movi	r4,1
  808cf0:	41000115 	stw	r4,4(r8)
  808cf4:	d8c02015 	stw	r3,128(sp)
  808cf8:	d8801f15 	stw	r2,124(sp)
  808cfc:	010001c4 	movi	r4,7
  808d00:	20823c16 	blt	r4,r2,8095f4 <___vfprintf_internal_r+0x1174>
  808d04:	42000204 	addi	r8,r8,8
  808d08:	d8802b17 	ldw	r2,172(sp)
  808d0c:	10000c26 	beq	r2,zero,808d40 <___vfprintf_internal_r+0x8c0>
  808d10:	d8801f17 	ldw	r2,124(sp)
  808d14:	d9002704 	addi	r4,sp,156
  808d18:	18c00084 	addi	r3,r3,2
  808d1c:	10800044 	addi	r2,r2,1
  808d20:	41000015 	stw	r4,0(r8)
  808d24:	01000084 	movi	r4,2
  808d28:	41000115 	stw	r4,4(r8)
  808d2c:	d8c02015 	stw	r3,128(sp)
  808d30:	d8801f15 	stw	r2,124(sp)
  808d34:	010001c4 	movi	r4,7
  808d38:	20823616 	blt	r4,r2,809614 <___vfprintf_internal_r+0x1194>
  808d3c:	42000204 	addi	r8,r8,8
  808d40:	d9003017 	ldw	r4,192(sp)
  808d44:	00802004 	movi	r2,128
  808d48:	20819926 	beq	r4,r2,8093b0 <___vfprintf_internal_r+0xf30>
  808d4c:	d9402917 	ldw	r5,164(sp)
  808d50:	d8802e17 	ldw	r2,184(sp)
  808d54:	28adc83a 	sub	r22,r5,r2
  808d58:	0580310e 	bge	zero,r22,808e20 <___vfprintf_internal_r+0x9a0>
  808d5c:	07000404 	movi	fp,16
  808d60:	d8801f17 	ldw	r2,124(sp)
  808d64:	e584140e 	bge	fp,r22,809db8 <___vfprintf_internal_r+0x1938>
  808d68:	01402074 	movhi	r5,129
  808d6c:	295c4e84 	addi	r5,r5,28986
  808d70:	dc402915 	stw	r17,164(sp)
  808d74:	d9402b15 	stw	r5,172(sp)
  808d78:	b023883a 	mov	r17,r22
  808d7c:	04c001c4 	movi	r19,7
  808d80:	a82d883a 	mov	r22,r21
  808d84:	902b883a 	mov	r21,r18
  808d88:	8025883a 	mov	r18,r16
  808d8c:	dc002c17 	ldw	r16,176(sp)
  808d90:	00000306 	br	808da0 <___vfprintf_internal_r+0x920>
  808d94:	8c7ffc04 	addi	r17,r17,-16
  808d98:	42000204 	addi	r8,r8,8
  808d9c:	e440110e 	bge	fp,r17,808de4 <___vfprintf_internal_r+0x964>
  808da0:	18c00404 	addi	r3,r3,16
  808da4:	10800044 	addi	r2,r2,1
  808da8:	45000015 	stw	r20,0(r8)
  808dac:	47000115 	stw	fp,4(r8)
  808db0:	d8c02015 	stw	r3,128(sp)
  808db4:	d8801f15 	stw	r2,124(sp)
  808db8:	98bff60e 	bge	r19,r2,808d94 <__alt_mem_onchip_mem+0xff800d94>
  808dbc:	d9801e04 	addi	r6,sp,120
  808dc0:	b80b883a 	mov	r5,r23
  808dc4:	8009883a 	mov	r4,r16
  808dc8:	080f1d80 	call	80f1d8 <__sprint_r>
  808dcc:	103eae1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  808dd0:	8c7ffc04 	addi	r17,r17,-16
  808dd4:	d8c02017 	ldw	r3,128(sp)
  808dd8:	d8801f17 	ldw	r2,124(sp)
  808ddc:	da000404 	addi	r8,sp,16
  808de0:	e47fef16 	blt	fp,r17,808da0 <__alt_mem_onchip_mem+0xff800da0>
  808de4:	9021883a 	mov	r16,r18
  808de8:	a825883a 	mov	r18,r21
  808dec:	b02b883a 	mov	r21,r22
  808df0:	882d883a 	mov	r22,r17
  808df4:	dc402917 	ldw	r17,164(sp)
  808df8:	d9002b17 	ldw	r4,172(sp)
  808dfc:	1d87883a 	add	r3,r3,r22
  808e00:	10800044 	addi	r2,r2,1
  808e04:	41000015 	stw	r4,0(r8)
  808e08:	45800115 	stw	r22,4(r8)
  808e0c:	d8c02015 	stw	r3,128(sp)
  808e10:	d8801f15 	stw	r2,124(sp)
  808e14:	010001c4 	movi	r4,7
  808e18:	2081ee16 	blt	r4,r2,8095d4 <___vfprintf_internal_r+0x1154>
  808e1c:	42000204 	addi	r8,r8,8
  808e20:	9080400c 	andi	r2,r18,256
  808e24:	1001181e 	bne	r2,zero,809288 <___vfprintf_internal_r+0xe08>
  808e28:	d9402e17 	ldw	r5,184(sp)
  808e2c:	d8801f17 	ldw	r2,124(sp)
  808e30:	44000015 	stw	r16,0(r8)
  808e34:	1947883a 	add	r3,r3,r5
  808e38:	10800044 	addi	r2,r2,1
  808e3c:	41400115 	stw	r5,4(r8)
  808e40:	d8c02015 	stw	r3,128(sp)
  808e44:	d8801f15 	stw	r2,124(sp)
  808e48:	010001c4 	movi	r4,7
  808e4c:	2081d316 	blt	r4,r2,80959c <___vfprintf_internal_r+0x111c>
  808e50:	42000204 	addi	r8,r8,8
  808e54:	9480010c 	andi	r18,r18,4
  808e58:	90003226 	beq	r18,zero,808f24 <___vfprintf_internal_r+0xaa4>
  808e5c:	d9403117 	ldw	r5,196(sp)
  808e60:	d8802a17 	ldw	r2,168(sp)
  808e64:	28a1c83a 	sub	r16,r5,r2
  808e68:	04002e0e 	bge	zero,r16,808f24 <___vfprintf_internal_r+0xaa4>
  808e6c:	04400404 	movi	r17,16
  808e70:	d8801f17 	ldw	r2,124(sp)
  808e74:	8c04a20e 	bge	r17,r16,80a100 <___vfprintf_internal_r+0x1c80>
  808e78:	01402074 	movhi	r5,129
  808e7c:	295c5284 	addi	r5,r5,29002
  808e80:	d9403515 	stw	r5,212(sp)
  808e84:	048001c4 	movi	r18,7
  808e88:	dcc02c17 	ldw	r19,176(sp)
  808e8c:	00000306 	br	808e9c <___vfprintf_internal_r+0xa1c>
  808e90:	843ffc04 	addi	r16,r16,-16
  808e94:	42000204 	addi	r8,r8,8
  808e98:	8c00130e 	bge	r17,r16,808ee8 <___vfprintf_internal_r+0xa68>
  808e9c:	01002074 	movhi	r4,129
  808ea0:	18c00404 	addi	r3,r3,16
  808ea4:	10800044 	addi	r2,r2,1
  808ea8:	211c5284 	addi	r4,r4,29002
  808eac:	41000015 	stw	r4,0(r8)
  808eb0:	44400115 	stw	r17,4(r8)
  808eb4:	d8c02015 	stw	r3,128(sp)
  808eb8:	d8801f15 	stw	r2,124(sp)
  808ebc:	90bff40e 	bge	r18,r2,808e90 <__alt_mem_onchip_mem+0xff800e90>
  808ec0:	d9801e04 	addi	r6,sp,120
  808ec4:	b80b883a 	mov	r5,r23
  808ec8:	9809883a 	mov	r4,r19
  808ecc:	080f1d80 	call	80f1d8 <__sprint_r>
  808ed0:	103e6d1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  808ed4:	843ffc04 	addi	r16,r16,-16
  808ed8:	d8c02017 	ldw	r3,128(sp)
  808edc:	d8801f17 	ldw	r2,124(sp)
  808ee0:	da000404 	addi	r8,sp,16
  808ee4:	8c3fed16 	blt	r17,r16,808e9c <__alt_mem_onchip_mem+0xff800e9c>
  808ee8:	d9403517 	ldw	r5,212(sp)
  808eec:	1c07883a 	add	r3,r3,r16
  808ef0:	10800044 	addi	r2,r2,1
  808ef4:	41400015 	stw	r5,0(r8)
  808ef8:	44000115 	stw	r16,4(r8)
  808efc:	d8c02015 	stw	r3,128(sp)
  808f00:	d8801f15 	stw	r2,124(sp)
  808f04:	010001c4 	movi	r4,7
  808f08:	2080060e 	bge	r4,r2,808f24 <___vfprintf_internal_r+0xaa4>
  808f0c:	d9002c17 	ldw	r4,176(sp)
  808f10:	d9801e04 	addi	r6,sp,120
  808f14:	b80b883a 	mov	r5,r23
  808f18:	080f1d80 	call	80f1d8 <__sprint_r>
  808f1c:	103e5a1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  808f20:	d8c02017 	ldw	r3,128(sp)
  808f24:	d8803117 	ldw	r2,196(sp)
  808f28:	d9002a17 	ldw	r4,168(sp)
  808f2c:	1100010e 	bge	r2,r4,808f34 <___vfprintf_internal_r+0xab4>
  808f30:	2005883a 	mov	r2,r4
  808f34:	d9402f17 	ldw	r5,188(sp)
  808f38:	288b883a 	add	r5,r5,r2
  808f3c:	d9402f15 	stw	r5,188(sp)
  808f40:	18019e1e 	bne	r3,zero,8095bc <___vfprintf_internal_r+0x113c>
  808f44:	a8800007 	ldb	r2,0(r21)
  808f48:	d8001f15 	stw	zero,124(sp)
  808f4c:	da000404 	addi	r8,sp,16
  808f50:	103d851e 	bne	r2,zero,808568 <__alt_mem_onchip_mem+0xff800568>
  808f54:	a821883a 	mov	r16,r21
  808f58:	003d9b06 	br	8085c8 <__alt_mem_onchip_mem+0xff8005c8>
  808f5c:	18c03fcc 	andi	r3,r3,255
  808f60:	1805c11e 	bne	r3,zero,80a668 <___vfprintf_internal_r+0x21e8>
  808f64:	94800414 	ori	r18,r18,16
  808f68:	9080080c 	andi	r2,r18,32
  808f6c:	10020c26 	beq	r2,zero,8097a0 <___vfprintf_internal_r+0x1320>
  808f70:	d8802d17 	ldw	r2,180(sp)
  808f74:	d9002917 	ldw	r4,164(sp)
  808f78:	d8002785 	stb	zero,158(sp)
  808f7c:	10c00204 	addi	r3,r2,8
  808f80:	14c00017 	ldw	r19,0(r2)
  808f84:	15800117 	ldw	r22,4(r2)
  808f88:	20040f16 	blt	r4,zero,809fc8 <___vfprintf_internal_r+0x1b48>
  808f8c:	013fdfc4 	movi	r4,-129
  808f90:	9d84b03a 	or	r2,r19,r22
  808f94:	d8c02d15 	stw	r3,180(sp)
  808f98:	9124703a 	and	r18,r18,r4
  808f9c:	0039883a 	mov	fp,zero
  808fa0:	103e891e 	bne	r2,zero,8089c8 <__alt_mem_onchip_mem+0xff8009c8>
  808fa4:	d9002917 	ldw	r4,164(sp)
  808fa8:	2002c11e 	bne	r4,zero,809ab0 <___vfprintf_internal_r+0x1630>
  808fac:	d8002915 	stw	zero,164(sp)
  808fb0:	d8002e15 	stw	zero,184(sp)
  808fb4:	dc001e04 	addi	r16,sp,120
  808fb8:	003ef806 	br	808b9c <__alt_mem_onchip_mem+0xff800b9c>
  808fbc:	18c03fcc 	andi	r3,r3,255
  808fc0:	18059d1e 	bne	r3,zero,80a638 <___vfprintf_internal_r+0x21b8>
  808fc4:	01402074 	movhi	r5,129
  808fc8:	295c4204 	addi	r5,r5,28936
  808fcc:	d9403915 	stw	r5,228(sp)
  808fd0:	9080080c 	andi	r2,r18,32
  808fd4:	10005226 	beq	r2,zero,809120 <___vfprintf_internal_r+0xca0>
  808fd8:	d8802d17 	ldw	r2,180(sp)
  808fdc:	14c00017 	ldw	r19,0(r2)
  808fe0:	15800117 	ldw	r22,4(r2)
  808fe4:	10800204 	addi	r2,r2,8
  808fe8:	d8802d15 	stw	r2,180(sp)
  808fec:	9080004c 	andi	r2,r18,1
  808ff0:	10019026 	beq	r2,zero,809634 <___vfprintf_internal_r+0x11b4>
  808ff4:	9d84b03a 	or	r2,r19,r22
  808ff8:	10036926 	beq	r2,zero,809da0 <___vfprintf_internal_r+0x1920>
  808ffc:	d8c02917 	ldw	r3,164(sp)
  809000:	00800c04 	movi	r2,48
  809004:	d8802705 	stb	r2,156(sp)
  809008:	dc402745 	stb	r17,157(sp)
  80900c:	d8002785 	stb	zero,158(sp)
  809010:	90800094 	ori	r2,r18,2
  809014:	18045d16 	blt	r3,zero,80a18c <___vfprintf_internal_r+0x1d0c>
  809018:	00bfdfc4 	movi	r2,-129
  80901c:	90a4703a 	and	r18,r18,r2
  809020:	94800094 	ori	r18,r18,2
  809024:	0039883a 	mov	fp,zero
  809028:	d9003917 	ldw	r4,228(sp)
  80902c:	dc001e04 	addi	r16,sp,120
  809030:	988003cc 	andi	r2,r19,15
  809034:	b006973a 	slli	r3,r22,28
  809038:	2085883a 	add	r2,r4,r2
  80903c:	9826d13a 	srli	r19,r19,4
  809040:	10800003 	ldbu	r2,0(r2)
  809044:	b02cd13a 	srli	r22,r22,4
  809048:	843fffc4 	addi	r16,r16,-1
  80904c:	1ce6b03a 	or	r19,r3,r19
  809050:	80800005 	stb	r2,0(r16)
  809054:	9d84b03a 	or	r2,r19,r22
  809058:	103ff51e 	bne	r2,zero,809030 <__alt_mem_onchip_mem+0xff801030>
  80905c:	d8c02817 	ldw	r3,160(sp)
  809060:	1c07c83a 	sub	r3,r3,r16
  809064:	d8c02e15 	stw	r3,184(sp)
  809068:	003ecc06 	br	808b9c <__alt_mem_onchip_mem+0xff800b9c>
  80906c:	18c03fcc 	andi	r3,r3,255
  809070:	183e9f26 	beq	r3,zero,808af0 <__alt_mem_onchip_mem+0xff800af0>
  809074:	d9c02785 	stb	r7,158(sp)
  809078:	003e9d06 	br	808af0 <__alt_mem_onchip_mem+0xff800af0>
  80907c:	00c00044 	movi	r3,1
  809080:	01c00ac4 	movi	r7,43
  809084:	ac400007 	ldb	r17,0(r21)
  809088:	003d5e06 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  80908c:	94800814 	ori	r18,r18,32
  809090:	ac400007 	ldb	r17,0(r21)
  809094:	003d5b06 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  809098:	d8c02d17 	ldw	r3,180(sp)
  80909c:	d8002785 	stb	zero,158(sp)
  8090a0:	1c000017 	ldw	r16,0(r3)
  8090a4:	1cc00104 	addi	r19,r3,4
  8090a8:	80041926 	beq	r16,zero,80a110 <___vfprintf_internal_r+0x1c90>
  8090ac:	d9002917 	ldw	r4,164(sp)
  8090b0:	2003d016 	blt	r4,zero,809ff4 <___vfprintf_internal_r+0x1b74>
  8090b4:	200d883a 	mov	r6,r4
  8090b8:	000b883a 	mov	r5,zero
  8090bc:	8009883a 	mov	r4,r16
  8090c0:	da003d15 	stw	r8,244(sp)
  8090c4:	080d4dc0 	call	80d4dc <memchr>
  8090c8:	da003d17 	ldw	r8,244(sp)
  8090cc:	10045426 	beq	r2,zero,80a220 <___vfprintf_internal_r+0x1da0>
  8090d0:	1405c83a 	sub	r2,r2,r16
  8090d4:	d8802e15 	stw	r2,184(sp)
  8090d8:	1003cc16 	blt	r2,zero,80a00c <___vfprintf_internal_r+0x1b8c>
  8090dc:	df002783 	ldbu	fp,158(sp)
  8090e0:	d8802a15 	stw	r2,168(sp)
  8090e4:	dcc02d15 	stw	r19,180(sp)
  8090e8:	d8002915 	stw	zero,164(sp)
  8090ec:	d8003215 	stw	zero,200(sp)
  8090f0:	003eb006 	br	808bb4 <__alt_mem_onchip_mem+0xff800bb4>
  8090f4:	18c03fcc 	andi	r3,r3,255
  8090f8:	183f9b26 	beq	r3,zero,808f68 <__alt_mem_onchip_mem+0xff800f68>
  8090fc:	d9c02785 	stb	r7,158(sp)
  809100:	003f9906 	br	808f68 <__alt_mem_onchip_mem+0xff800f68>
  809104:	18c03fcc 	andi	r3,r3,255
  809108:	1805551e 	bne	r3,zero,80a660 <___vfprintf_internal_r+0x21e0>
  80910c:	01402074 	movhi	r5,129
  809110:	295c4704 	addi	r5,r5,28956
  809114:	d9403915 	stw	r5,228(sp)
  809118:	9080080c 	andi	r2,r18,32
  80911c:	103fae1e 	bne	r2,zero,808fd8 <__alt_mem_onchip_mem+0xff800fd8>
  809120:	9080040c 	andi	r2,r18,16
  809124:	1002de26 	beq	r2,zero,809ca0 <___vfprintf_internal_r+0x1820>
  809128:	d8c02d17 	ldw	r3,180(sp)
  80912c:	002d883a 	mov	r22,zero
  809130:	1cc00017 	ldw	r19,0(r3)
  809134:	18c00104 	addi	r3,r3,4
  809138:	d8c02d15 	stw	r3,180(sp)
  80913c:	003fab06 	br	808fec <__alt_mem_onchip_mem+0xff800fec>
  809140:	38803fcc 	andi	r2,r7,255
  809144:	1080201c 	xori	r2,r2,128
  809148:	10bfe004 	addi	r2,r2,-128
  80914c:	1002d21e 	bne	r2,zero,809c98 <___vfprintf_internal_r+0x1818>
  809150:	00c00044 	movi	r3,1
  809154:	01c00804 	movi	r7,32
  809158:	ac400007 	ldb	r17,0(r21)
  80915c:	003d2906 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  809160:	94800054 	ori	r18,r18,1
  809164:	ac400007 	ldb	r17,0(r21)
  809168:	003d2606 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  80916c:	18c03fcc 	andi	r3,r3,255
  809170:	183e0526 	beq	r3,zero,808988 <__alt_mem_onchip_mem+0xff800988>
  809174:	d9c02785 	stb	r7,158(sp)
  809178:	003e0306 	br	808988 <__alt_mem_onchip_mem+0xff800988>
  80917c:	94801014 	ori	r18,r18,64
  809180:	ac400007 	ldb	r17,0(r21)
  809184:	003d1f06 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  809188:	ac400007 	ldb	r17,0(r21)
  80918c:	8a438726 	beq	r17,r9,809fac <___vfprintf_internal_r+0x1b2c>
  809190:	94800414 	ori	r18,r18,16
  809194:	003d1b06 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  809198:	18c03fcc 	andi	r3,r3,255
  80919c:	1805341e 	bne	r3,zero,80a670 <___vfprintf_internal_r+0x21f0>
  8091a0:	9080080c 	andi	r2,r18,32
  8091a4:	1002cd26 	beq	r2,zero,809cdc <___vfprintf_internal_r+0x185c>
  8091a8:	d9402d17 	ldw	r5,180(sp)
  8091ac:	d9002f17 	ldw	r4,188(sp)
  8091b0:	28800017 	ldw	r2,0(r5)
  8091b4:	2007d7fa 	srai	r3,r4,31
  8091b8:	29400104 	addi	r5,r5,4
  8091bc:	d9402d15 	stw	r5,180(sp)
  8091c0:	11000015 	stw	r4,0(r2)
  8091c4:	10c00115 	stw	r3,4(r2)
  8091c8:	003ce506 	br	808560 <__alt_mem_onchip_mem+0xff800560>
  8091cc:	d8c02d17 	ldw	r3,180(sp)
  8091d0:	d9002d17 	ldw	r4,180(sp)
  8091d4:	d8002785 	stb	zero,158(sp)
  8091d8:	18800017 	ldw	r2,0(r3)
  8091dc:	21000104 	addi	r4,r4,4
  8091e0:	00c00044 	movi	r3,1
  8091e4:	d8c02a15 	stw	r3,168(sp)
  8091e8:	d8801405 	stb	r2,80(sp)
  8091ec:	d9002d15 	stw	r4,180(sp)
  8091f0:	d8c02e15 	stw	r3,184(sp)
  8091f4:	d8002915 	stw	zero,164(sp)
  8091f8:	d8003215 	stw	zero,200(sp)
  8091fc:	dc001404 	addi	r16,sp,80
  809200:	0039883a 	mov	fp,zero
  809204:	003e7206 	br	808bd0 <__alt_mem_onchip_mem+0xff800bd0>
  809208:	01002074 	movhi	r4,129
  80920c:	211c4704 	addi	r4,r4,28956
  809210:	0039883a 	mov	fp,zero
  809214:	d9003915 	stw	r4,228(sp)
  809218:	04401e04 	movi	r17,120
  80921c:	003f8206 	br	809028 <__alt_mem_onchip_mem+0xff801028>
  809220:	18c03fcc 	andi	r3,r3,255
  809224:	1805061e 	bne	r3,zero,80a640 <___vfprintf_internal_r+0x21c0>
  809228:	883d9126 	beq	r17,zero,808870 <__alt_mem_onchip_mem+0xff800870>
  80922c:	00c00044 	movi	r3,1
  809230:	d8c02a15 	stw	r3,168(sp)
  809234:	dc401405 	stb	r17,80(sp)
  809238:	d8002785 	stb	zero,158(sp)
  80923c:	003fec06 	br	8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809240:	01402074 	movhi	r5,129
  809244:	295c4704 	addi	r5,r5,28956
  809248:	d9403915 	stw	r5,228(sp)
  80924c:	d8c02d15 	stw	r3,180(sp)
  809250:	1025883a 	mov	r18,r2
  809254:	04401e04 	movi	r17,120
  809258:	9d84b03a 	or	r2,r19,r22
  80925c:	1000fc1e 	bne	r2,zero,809650 <___vfprintf_internal_r+0x11d0>
  809260:	0039883a 	mov	fp,zero
  809264:	00800084 	movi	r2,2
  809268:	10803fcc 	andi	r2,r2,255
  80926c:	00c00044 	movi	r3,1
  809270:	10c20f26 	beq	r2,r3,809ab0 <___vfprintf_internal_r+0x1630>
  809274:	00c00084 	movi	r3,2
  809278:	10fd6326 	beq	r2,r3,808808 <__alt_mem_onchip_mem+0xff800808>
  80927c:	003e2d06 	br	808b34 <__alt_mem_onchip_mem+0xff800b34>
  809280:	d8c02017 	ldw	r3,128(sp)
  809284:	003e9306 	br	808cd4 <__alt_mem_onchip_mem+0xff800cd4>
  809288:	00801944 	movi	r2,101
  80928c:	14407e0e 	bge	r2,r17,809488 <___vfprintf_internal_r+0x1008>
  809290:	d9003617 	ldw	r4,216(sp)
  809294:	d9403817 	ldw	r5,224(sp)
  809298:	000d883a 	mov	r6,zero
  80929c:	000f883a 	mov	r7,zero
  8092a0:	d8c03c15 	stw	r3,240(sp)
  8092a4:	da003d15 	stw	r8,244(sp)
  8092a8:	08123800 	call	812380 <__eqdf2>
  8092ac:	d8c03c17 	ldw	r3,240(sp)
  8092b0:	da003d17 	ldw	r8,244(sp)
  8092b4:	1000f71e 	bne	r2,zero,809694 <___vfprintf_internal_r+0x1214>
  8092b8:	d8801f17 	ldw	r2,124(sp)
  8092bc:	01002074 	movhi	r4,129
  8092c0:	211c4e04 	addi	r4,r4,28984
  8092c4:	18c00044 	addi	r3,r3,1
  8092c8:	10800044 	addi	r2,r2,1
  8092cc:	41000015 	stw	r4,0(r8)
  8092d0:	01000044 	movi	r4,1
  8092d4:	41000115 	stw	r4,4(r8)
  8092d8:	d8c02015 	stw	r3,128(sp)
  8092dc:	d8801f15 	stw	r2,124(sp)
  8092e0:	010001c4 	movi	r4,7
  8092e4:	2082b816 	blt	r4,r2,809dc8 <___vfprintf_internal_r+0x1948>
  8092e8:	42000204 	addi	r8,r8,8
  8092ec:	d8802617 	ldw	r2,152(sp)
  8092f0:	d9403317 	ldw	r5,204(sp)
  8092f4:	11400216 	blt	r2,r5,809300 <___vfprintf_internal_r+0xe80>
  8092f8:	9080004c 	andi	r2,r18,1
  8092fc:	103ed526 	beq	r2,zero,808e54 <__alt_mem_onchip_mem+0xff800e54>
  809300:	d8803717 	ldw	r2,220(sp)
  809304:	d9003417 	ldw	r4,208(sp)
  809308:	d9403717 	ldw	r5,220(sp)
  80930c:	1887883a 	add	r3,r3,r2
  809310:	d8801f17 	ldw	r2,124(sp)
  809314:	41000015 	stw	r4,0(r8)
  809318:	41400115 	stw	r5,4(r8)
  80931c:	10800044 	addi	r2,r2,1
  809320:	d8c02015 	stw	r3,128(sp)
  809324:	d8801f15 	stw	r2,124(sp)
  809328:	010001c4 	movi	r4,7
  80932c:	20832916 	blt	r4,r2,809fd4 <___vfprintf_internal_r+0x1b54>
  809330:	42000204 	addi	r8,r8,8
  809334:	d8803317 	ldw	r2,204(sp)
  809338:	143fffc4 	addi	r16,r2,-1
  80933c:	043ec50e 	bge	zero,r16,808e54 <__alt_mem_onchip_mem+0xff800e54>
  809340:	04400404 	movi	r17,16
  809344:	d8801f17 	ldw	r2,124(sp)
  809348:	8c00880e 	bge	r17,r16,80956c <___vfprintf_internal_r+0x10ec>
  80934c:	01402074 	movhi	r5,129
  809350:	295c4e84 	addi	r5,r5,28986
  809354:	d9402b15 	stw	r5,172(sp)
  809358:	058001c4 	movi	r22,7
  80935c:	dcc02c17 	ldw	r19,176(sp)
  809360:	00000306 	br	809370 <___vfprintf_internal_r+0xef0>
  809364:	42000204 	addi	r8,r8,8
  809368:	843ffc04 	addi	r16,r16,-16
  80936c:	8c00820e 	bge	r17,r16,809578 <___vfprintf_internal_r+0x10f8>
  809370:	18c00404 	addi	r3,r3,16
  809374:	10800044 	addi	r2,r2,1
  809378:	45000015 	stw	r20,0(r8)
  80937c:	44400115 	stw	r17,4(r8)
  809380:	d8c02015 	stw	r3,128(sp)
  809384:	d8801f15 	stw	r2,124(sp)
  809388:	b0bff60e 	bge	r22,r2,809364 <__alt_mem_onchip_mem+0xff801364>
  80938c:	d9801e04 	addi	r6,sp,120
  809390:	b80b883a 	mov	r5,r23
  809394:	9809883a 	mov	r4,r19
  809398:	080f1d80 	call	80f1d8 <__sprint_r>
  80939c:	103d3a1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  8093a0:	d8c02017 	ldw	r3,128(sp)
  8093a4:	d8801f17 	ldw	r2,124(sp)
  8093a8:	da000404 	addi	r8,sp,16
  8093ac:	003fee06 	br	809368 <__alt_mem_onchip_mem+0xff801368>
  8093b0:	d9403117 	ldw	r5,196(sp)
  8093b4:	d8802a17 	ldw	r2,168(sp)
  8093b8:	28adc83a 	sub	r22,r5,r2
  8093bc:	05be630e 	bge	zero,r22,808d4c <__alt_mem_onchip_mem+0xff800d4c>
  8093c0:	07000404 	movi	fp,16
  8093c4:	d8801f17 	ldw	r2,124(sp)
  8093c8:	e5838f0e 	bge	fp,r22,80a208 <___vfprintf_internal_r+0x1d88>
  8093cc:	01402074 	movhi	r5,129
  8093d0:	295c4e84 	addi	r5,r5,28986
  8093d4:	dc403015 	stw	r17,192(sp)
  8093d8:	d9402b15 	stw	r5,172(sp)
  8093dc:	b023883a 	mov	r17,r22
  8093e0:	04c001c4 	movi	r19,7
  8093e4:	a82d883a 	mov	r22,r21
  8093e8:	902b883a 	mov	r21,r18
  8093ec:	8025883a 	mov	r18,r16
  8093f0:	dc002c17 	ldw	r16,176(sp)
  8093f4:	00000306 	br	809404 <___vfprintf_internal_r+0xf84>
  8093f8:	8c7ffc04 	addi	r17,r17,-16
  8093fc:	42000204 	addi	r8,r8,8
  809400:	e440110e 	bge	fp,r17,809448 <___vfprintf_internal_r+0xfc8>
  809404:	18c00404 	addi	r3,r3,16
  809408:	10800044 	addi	r2,r2,1
  80940c:	45000015 	stw	r20,0(r8)
  809410:	47000115 	stw	fp,4(r8)
  809414:	d8c02015 	stw	r3,128(sp)
  809418:	d8801f15 	stw	r2,124(sp)
  80941c:	98bff60e 	bge	r19,r2,8093f8 <__alt_mem_onchip_mem+0xff8013f8>
  809420:	d9801e04 	addi	r6,sp,120
  809424:	b80b883a 	mov	r5,r23
  809428:	8009883a 	mov	r4,r16
  80942c:	080f1d80 	call	80f1d8 <__sprint_r>
  809430:	103d151e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809434:	8c7ffc04 	addi	r17,r17,-16
  809438:	d8c02017 	ldw	r3,128(sp)
  80943c:	d8801f17 	ldw	r2,124(sp)
  809440:	da000404 	addi	r8,sp,16
  809444:	e47fef16 	blt	fp,r17,809404 <__alt_mem_onchip_mem+0xff801404>
  809448:	9021883a 	mov	r16,r18
  80944c:	a825883a 	mov	r18,r21
  809450:	b02b883a 	mov	r21,r22
  809454:	882d883a 	mov	r22,r17
  809458:	dc403017 	ldw	r17,192(sp)
  80945c:	d9002b17 	ldw	r4,172(sp)
  809460:	1d87883a 	add	r3,r3,r22
  809464:	10800044 	addi	r2,r2,1
  809468:	41000015 	stw	r4,0(r8)
  80946c:	45800115 	stw	r22,4(r8)
  809470:	d8c02015 	stw	r3,128(sp)
  809474:	d8801f15 	stw	r2,124(sp)
  809478:	010001c4 	movi	r4,7
  80947c:	20818e16 	blt	r4,r2,809ab8 <___vfprintf_internal_r+0x1638>
  809480:	42000204 	addi	r8,r8,8
  809484:	003e3106 	br	808d4c <__alt_mem_onchip_mem+0xff800d4c>
  809488:	d9403317 	ldw	r5,204(sp)
  80948c:	00800044 	movi	r2,1
  809490:	18c00044 	addi	r3,r3,1
  809494:	1141530e 	bge	r2,r5,8099e4 <___vfprintf_internal_r+0x1564>
  809498:	dc401f17 	ldw	r17,124(sp)
  80949c:	00800044 	movi	r2,1
  8094a0:	40800115 	stw	r2,4(r8)
  8094a4:	8c400044 	addi	r17,r17,1
  8094a8:	44000015 	stw	r16,0(r8)
  8094ac:	d8c02015 	stw	r3,128(sp)
  8094b0:	dc401f15 	stw	r17,124(sp)
  8094b4:	008001c4 	movi	r2,7
  8094b8:	14416b16 	blt	r2,r17,809a68 <___vfprintf_internal_r+0x15e8>
  8094bc:	42000204 	addi	r8,r8,8
  8094c0:	d8803717 	ldw	r2,220(sp)
  8094c4:	d9003417 	ldw	r4,208(sp)
  8094c8:	8c400044 	addi	r17,r17,1
  8094cc:	10c7883a 	add	r3,r2,r3
  8094d0:	40800115 	stw	r2,4(r8)
  8094d4:	41000015 	stw	r4,0(r8)
  8094d8:	d8c02015 	stw	r3,128(sp)
  8094dc:	dc401f15 	stw	r17,124(sp)
  8094e0:	008001c4 	movi	r2,7
  8094e4:	14416916 	blt	r2,r17,809a8c <___vfprintf_internal_r+0x160c>
  8094e8:	45800204 	addi	r22,r8,8
  8094ec:	d9003617 	ldw	r4,216(sp)
  8094f0:	d9403817 	ldw	r5,224(sp)
  8094f4:	000d883a 	mov	r6,zero
  8094f8:	000f883a 	mov	r7,zero
  8094fc:	d8c03c15 	stw	r3,240(sp)
  809500:	08123800 	call	812380 <__eqdf2>
  809504:	d8c03c17 	ldw	r3,240(sp)
  809508:	1000bc26 	beq	r2,zero,8097fc <___vfprintf_internal_r+0x137c>
  80950c:	d9403317 	ldw	r5,204(sp)
  809510:	84000044 	addi	r16,r16,1
  809514:	8c400044 	addi	r17,r17,1
  809518:	28bfffc4 	addi	r2,r5,-1
  80951c:	1887883a 	add	r3,r3,r2
  809520:	b0800115 	stw	r2,4(r22)
  809524:	b4000015 	stw	r16,0(r22)
  809528:	d8c02015 	stw	r3,128(sp)
  80952c:	dc401f15 	stw	r17,124(sp)
  809530:	008001c4 	movi	r2,7
  809534:	14414316 	blt	r2,r17,809a44 <___vfprintf_internal_r+0x15c4>
  809538:	b5800204 	addi	r22,r22,8
  80953c:	d9003a17 	ldw	r4,232(sp)
  809540:	df0022c4 	addi	fp,sp,139
  809544:	8c400044 	addi	r17,r17,1
  809548:	20c7883a 	add	r3,r4,r3
  80954c:	b7000015 	stw	fp,0(r22)
  809550:	b1000115 	stw	r4,4(r22)
  809554:	d8c02015 	stw	r3,128(sp)
  809558:	dc401f15 	stw	r17,124(sp)
  80955c:	008001c4 	movi	r2,7
  809560:	14400e16 	blt	r2,r17,80959c <___vfprintf_internal_r+0x111c>
  809564:	b2000204 	addi	r8,r22,8
  809568:	003e3a06 	br	808e54 <__alt_mem_onchip_mem+0xff800e54>
  80956c:	01002074 	movhi	r4,129
  809570:	211c4e84 	addi	r4,r4,28986
  809574:	d9002b15 	stw	r4,172(sp)
  809578:	d9002b17 	ldw	r4,172(sp)
  80957c:	1c07883a 	add	r3,r3,r16
  809580:	44000115 	stw	r16,4(r8)
  809584:	41000015 	stw	r4,0(r8)
  809588:	10800044 	addi	r2,r2,1
  80958c:	d8c02015 	stw	r3,128(sp)
  809590:	d8801f15 	stw	r2,124(sp)
  809594:	010001c4 	movi	r4,7
  809598:	20be2d0e 	bge	r4,r2,808e50 <__alt_mem_onchip_mem+0xff800e50>
  80959c:	d9002c17 	ldw	r4,176(sp)
  8095a0:	d9801e04 	addi	r6,sp,120
  8095a4:	b80b883a 	mov	r5,r23
  8095a8:	080f1d80 	call	80f1d8 <__sprint_r>
  8095ac:	103cb61e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  8095b0:	d8c02017 	ldw	r3,128(sp)
  8095b4:	da000404 	addi	r8,sp,16
  8095b8:	003e2606 	br	808e54 <__alt_mem_onchip_mem+0xff800e54>
  8095bc:	d9002c17 	ldw	r4,176(sp)
  8095c0:	d9801e04 	addi	r6,sp,120
  8095c4:	b80b883a 	mov	r5,r23
  8095c8:	080f1d80 	call	80f1d8 <__sprint_r>
  8095cc:	103e5d26 	beq	r2,zero,808f44 <__alt_mem_onchip_mem+0xff800f44>
  8095d0:	003cad06 	br	808888 <__alt_mem_onchip_mem+0xff800888>
  8095d4:	d9002c17 	ldw	r4,176(sp)
  8095d8:	d9801e04 	addi	r6,sp,120
  8095dc:	b80b883a 	mov	r5,r23
  8095e0:	080f1d80 	call	80f1d8 <__sprint_r>
  8095e4:	103ca81e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  8095e8:	d8c02017 	ldw	r3,128(sp)
  8095ec:	da000404 	addi	r8,sp,16
  8095f0:	003e0b06 	br	808e20 <__alt_mem_onchip_mem+0xff800e20>
  8095f4:	d9002c17 	ldw	r4,176(sp)
  8095f8:	d9801e04 	addi	r6,sp,120
  8095fc:	b80b883a 	mov	r5,r23
  809600:	080f1d80 	call	80f1d8 <__sprint_r>
  809604:	103ca01e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809608:	d8c02017 	ldw	r3,128(sp)
  80960c:	da000404 	addi	r8,sp,16
  809610:	003dbd06 	br	808d08 <__alt_mem_onchip_mem+0xff800d08>
  809614:	d9002c17 	ldw	r4,176(sp)
  809618:	d9801e04 	addi	r6,sp,120
  80961c:	b80b883a 	mov	r5,r23
  809620:	080f1d80 	call	80f1d8 <__sprint_r>
  809624:	103c981e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809628:	d8c02017 	ldw	r3,128(sp)
  80962c:	da000404 	addi	r8,sp,16
  809630:	003dc306 	br	808d40 <__alt_mem_onchip_mem+0xff800d40>
  809634:	d8802917 	ldw	r2,164(sp)
  809638:	d8002785 	stb	zero,158(sp)
  80963c:	103f0616 	blt	r2,zero,809258 <__alt_mem_onchip_mem+0xff801258>
  809640:	00ffdfc4 	movi	r3,-129
  809644:	9d84b03a 	or	r2,r19,r22
  809648:	90e4703a 	and	r18,r18,r3
  80964c:	103c6b26 	beq	r2,zero,8087fc <__alt_mem_onchip_mem+0xff8007fc>
  809650:	0039883a 	mov	fp,zero
  809654:	003e7406 	br	809028 <__alt_mem_onchip_mem+0xff801028>
  809658:	9080040c 	andi	r2,r18,16
  80965c:	1001b326 	beq	r2,zero,809d2c <___vfprintf_internal_r+0x18ac>
  809660:	d9002d17 	ldw	r4,180(sp)
  809664:	d9402917 	ldw	r5,164(sp)
  809668:	d8002785 	stb	zero,158(sp)
  80966c:	20800104 	addi	r2,r4,4
  809670:	24c00017 	ldw	r19,0(r4)
  809674:	002d883a 	mov	r22,zero
  809678:	2801b516 	blt	r5,zero,809d50 <___vfprintf_internal_r+0x18d0>
  80967c:	00ffdfc4 	movi	r3,-129
  809680:	d8802d15 	stw	r2,180(sp)
  809684:	90e4703a 	and	r18,r18,r3
  809688:	983d2726 	beq	r19,zero,808b28 <__alt_mem_onchip_mem+0xff800b28>
  80968c:	0039883a 	mov	fp,zero
  809690:	003d2a06 	br	808b3c <__alt_mem_onchip_mem+0xff800b3c>
  809694:	dc402617 	ldw	r17,152(sp)
  809698:	0441d30e 	bge	zero,r17,809de8 <___vfprintf_internal_r+0x1968>
  80969c:	dc403217 	ldw	r17,200(sp)
  8096a0:	d8803317 	ldw	r2,204(sp)
  8096a4:	1440010e 	bge	r2,r17,8096ac <___vfprintf_internal_r+0x122c>
  8096a8:	1023883a 	mov	r17,r2
  8096ac:	04400a0e 	bge	zero,r17,8096d8 <___vfprintf_internal_r+0x1258>
  8096b0:	d8801f17 	ldw	r2,124(sp)
  8096b4:	1c47883a 	add	r3,r3,r17
  8096b8:	44000015 	stw	r16,0(r8)
  8096bc:	10800044 	addi	r2,r2,1
  8096c0:	44400115 	stw	r17,4(r8)
  8096c4:	d8c02015 	stw	r3,128(sp)
  8096c8:	d8801f15 	stw	r2,124(sp)
  8096cc:	010001c4 	movi	r4,7
  8096d0:	20826516 	blt	r4,r2,80a068 <___vfprintf_internal_r+0x1be8>
  8096d4:	42000204 	addi	r8,r8,8
  8096d8:	88026116 	blt	r17,zero,80a060 <___vfprintf_internal_r+0x1be0>
  8096dc:	d9003217 	ldw	r4,200(sp)
  8096e0:	2463c83a 	sub	r17,r4,r17
  8096e4:	04407b0e 	bge	zero,r17,8098d4 <___vfprintf_internal_r+0x1454>
  8096e8:	05800404 	movi	r22,16
  8096ec:	d8801f17 	ldw	r2,124(sp)
  8096f0:	b4419d0e 	bge	r22,r17,809d68 <___vfprintf_internal_r+0x18e8>
  8096f4:	01002074 	movhi	r4,129
  8096f8:	211c4e84 	addi	r4,r4,28986
  8096fc:	d9002b15 	stw	r4,172(sp)
  809700:	070001c4 	movi	fp,7
  809704:	dcc02c17 	ldw	r19,176(sp)
  809708:	00000306 	br	809718 <___vfprintf_internal_r+0x1298>
  80970c:	42000204 	addi	r8,r8,8
  809710:	8c7ffc04 	addi	r17,r17,-16
  809714:	b441970e 	bge	r22,r17,809d74 <___vfprintf_internal_r+0x18f4>
  809718:	18c00404 	addi	r3,r3,16
  80971c:	10800044 	addi	r2,r2,1
  809720:	45000015 	stw	r20,0(r8)
  809724:	45800115 	stw	r22,4(r8)
  809728:	d8c02015 	stw	r3,128(sp)
  80972c:	d8801f15 	stw	r2,124(sp)
  809730:	e0bff60e 	bge	fp,r2,80970c <__alt_mem_onchip_mem+0xff80170c>
  809734:	d9801e04 	addi	r6,sp,120
  809738:	b80b883a 	mov	r5,r23
  80973c:	9809883a 	mov	r4,r19
  809740:	080f1d80 	call	80f1d8 <__sprint_r>
  809744:	103c501e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809748:	d8c02017 	ldw	r3,128(sp)
  80974c:	d8801f17 	ldw	r2,124(sp)
  809750:	da000404 	addi	r8,sp,16
  809754:	003fee06 	br	809710 <__alt_mem_onchip_mem+0xff801710>
  809758:	d9002c17 	ldw	r4,176(sp)
  80975c:	d9801e04 	addi	r6,sp,120
  809760:	b80b883a 	mov	r5,r23
  809764:	080f1d80 	call	80f1d8 <__sprint_r>
  809768:	103c471e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  80976c:	d8c02017 	ldw	r3,128(sp)
  809770:	df002787 	ldb	fp,158(sp)
  809774:	da000404 	addi	r8,sp,16
  809778:	003d5606 	br	808cd4 <__alt_mem_onchip_mem+0xff800cd4>
  80977c:	9080040c 	andi	r2,r18,16
  809780:	10016126 	beq	r2,zero,809d08 <___vfprintf_internal_r+0x1888>
  809784:	d8802d17 	ldw	r2,180(sp)
  809788:	14c00017 	ldw	r19,0(r2)
  80978c:	10800104 	addi	r2,r2,4
  809790:	d8802d15 	stw	r2,180(sp)
  809794:	982dd7fa 	srai	r22,r19,31
  809798:	b005883a 	mov	r2,r22
  80979c:	003c8206 	br	8089a8 <__alt_mem_onchip_mem+0xff8009a8>
  8097a0:	9080040c 	andi	r2,r18,16
  8097a4:	10003526 	beq	r2,zero,80987c <___vfprintf_internal_r+0x13fc>
  8097a8:	d9402d17 	ldw	r5,180(sp)
  8097ac:	d8c02917 	ldw	r3,164(sp)
  8097b0:	d8002785 	stb	zero,158(sp)
  8097b4:	28800104 	addi	r2,r5,4
  8097b8:	2cc00017 	ldw	r19,0(r5)
  8097bc:	002d883a 	mov	r22,zero
  8097c0:	18003716 	blt	r3,zero,8098a0 <___vfprintf_internal_r+0x1420>
  8097c4:	00ffdfc4 	movi	r3,-129
  8097c8:	d8802d15 	stw	r2,180(sp)
  8097cc:	90e4703a 	and	r18,r18,r3
  8097d0:	0039883a 	mov	fp,zero
  8097d4:	983df326 	beq	r19,zero,808fa4 <__alt_mem_onchip_mem+0xff800fa4>
  8097d8:	00800244 	movi	r2,9
  8097dc:	14fc7b36 	bltu	r2,r19,8089cc <__alt_mem_onchip_mem+0xff8009cc>
  8097e0:	d8c02817 	ldw	r3,160(sp)
  8097e4:	dc001dc4 	addi	r16,sp,119
  8097e8:	9cc00c04 	addi	r19,r19,48
  8097ec:	1c07c83a 	sub	r3,r3,r16
  8097f0:	dcc01dc5 	stb	r19,119(sp)
  8097f4:	d8c02e15 	stw	r3,184(sp)
  8097f8:	003ce806 	br	808b9c <__alt_mem_onchip_mem+0xff800b9c>
  8097fc:	d8803317 	ldw	r2,204(sp)
  809800:	143fffc4 	addi	r16,r2,-1
  809804:	043f4d0e 	bge	zero,r16,80953c <__alt_mem_onchip_mem+0xff80153c>
  809808:	07000404 	movi	fp,16
  80980c:	e400810e 	bge	fp,r16,809a14 <___vfprintf_internal_r+0x1594>
  809810:	01402074 	movhi	r5,129
  809814:	295c4e84 	addi	r5,r5,28986
  809818:	d9402b15 	stw	r5,172(sp)
  80981c:	01c001c4 	movi	r7,7
  809820:	dcc02c17 	ldw	r19,176(sp)
  809824:	00000306 	br	809834 <___vfprintf_internal_r+0x13b4>
  809828:	b5800204 	addi	r22,r22,8
  80982c:	843ffc04 	addi	r16,r16,-16
  809830:	e4007b0e 	bge	fp,r16,809a20 <___vfprintf_internal_r+0x15a0>
  809834:	18c00404 	addi	r3,r3,16
  809838:	8c400044 	addi	r17,r17,1
  80983c:	b5000015 	stw	r20,0(r22)
  809840:	b7000115 	stw	fp,4(r22)
  809844:	d8c02015 	stw	r3,128(sp)
  809848:	dc401f15 	stw	r17,124(sp)
  80984c:	3c7ff60e 	bge	r7,r17,809828 <__alt_mem_onchip_mem+0xff801828>
  809850:	d9801e04 	addi	r6,sp,120
  809854:	b80b883a 	mov	r5,r23
  809858:	9809883a 	mov	r4,r19
  80985c:	d9c03c15 	stw	r7,240(sp)
  809860:	080f1d80 	call	80f1d8 <__sprint_r>
  809864:	d9c03c17 	ldw	r7,240(sp)
  809868:	103c071e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  80986c:	d8c02017 	ldw	r3,128(sp)
  809870:	dc401f17 	ldw	r17,124(sp)
  809874:	dd800404 	addi	r22,sp,16
  809878:	003fec06 	br	80982c <__alt_mem_onchip_mem+0xff80182c>
  80987c:	9080100c 	andi	r2,r18,64
  809880:	d8002785 	stb	zero,158(sp)
  809884:	10010e26 	beq	r2,zero,809cc0 <___vfprintf_internal_r+0x1840>
  809888:	d9002d17 	ldw	r4,180(sp)
  80988c:	d9402917 	ldw	r5,164(sp)
  809890:	002d883a 	mov	r22,zero
  809894:	20800104 	addi	r2,r4,4
  809898:	24c0000b 	ldhu	r19,0(r4)
  80989c:	283fc90e 	bge	r5,zero,8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  8098a0:	d8802d15 	stw	r2,180(sp)
  8098a4:	0039883a 	mov	fp,zero
  8098a8:	9d84b03a 	or	r2,r19,r22
  8098ac:	103c461e 	bne	r2,zero,8089c8 <__alt_mem_onchip_mem+0xff8009c8>
  8098b0:	00800044 	movi	r2,1
  8098b4:	003e6c06 	br	809268 <__alt_mem_onchip_mem+0xff801268>
  8098b8:	d9002c17 	ldw	r4,176(sp)
  8098bc:	d9801e04 	addi	r6,sp,120
  8098c0:	b80b883a 	mov	r5,r23
  8098c4:	080f1d80 	call	80f1d8 <__sprint_r>
  8098c8:	103bef1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  8098cc:	d8c02017 	ldw	r3,128(sp)
  8098d0:	da000404 	addi	r8,sp,16
  8098d4:	d9003217 	ldw	r4,200(sp)
  8098d8:	d8802617 	ldw	r2,152(sp)
  8098dc:	d9403317 	ldw	r5,204(sp)
  8098e0:	8123883a 	add	r17,r16,r4
  8098e4:	11400216 	blt	r2,r5,8098f0 <___vfprintf_internal_r+0x1470>
  8098e8:	9100004c 	andi	r4,r18,1
  8098ec:	20000d26 	beq	r4,zero,809924 <___vfprintf_internal_r+0x14a4>
  8098f0:	d9003717 	ldw	r4,220(sp)
  8098f4:	d9403417 	ldw	r5,208(sp)
  8098f8:	1907883a 	add	r3,r3,r4
  8098fc:	d9001f17 	ldw	r4,124(sp)
  809900:	41400015 	stw	r5,0(r8)
  809904:	d9403717 	ldw	r5,220(sp)
  809908:	21000044 	addi	r4,r4,1
  80990c:	d8c02015 	stw	r3,128(sp)
  809910:	41400115 	stw	r5,4(r8)
  809914:	d9001f15 	stw	r4,124(sp)
  809918:	014001c4 	movi	r5,7
  80991c:	2901e816 	blt	r5,r4,80a0c0 <___vfprintf_internal_r+0x1c40>
  809920:	42000204 	addi	r8,r8,8
  809924:	d9003317 	ldw	r4,204(sp)
  809928:	8121883a 	add	r16,r16,r4
  80992c:	2085c83a 	sub	r2,r4,r2
  809930:	8461c83a 	sub	r16,r16,r17
  809934:	1400010e 	bge	r2,r16,80993c <___vfprintf_internal_r+0x14bc>
  809938:	1021883a 	mov	r16,r2
  80993c:	04000a0e 	bge	zero,r16,809968 <___vfprintf_internal_r+0x14e8>
  809940:	d9001f17 	ldw	r4,124(sp)
  809944:	1c07883a 	add	r3,r3,r16
  809948:	44400015 	stw	r17,0(r8)
  80994c:	21000044 	addi	r4,r4,1
  809950:	44000115 	stw	r16,4(r8)
  809954:	d8c02015 	stw	r3,128(sp)
  809958:	d9001f15 	stw	r4,124(sp)
  80995c:	014001c4 	movi	r5,7
  809960:	2901fb16 	blt	r5,r4,80a150 <___vfprintf_internal_r+0x1cd0>
  809964:	42000204 	addi	r8,r8,8
  809968:	8001f716 	blt	r16,zero,80a148 <___vfprintf_internal_r+0x1cc8>
  80996c:	1421c83a 	sub	r16,r2,r16
  809970:	043d380e 	bge	zero,r16,808e54 <__alt_mem_onchip_mem+0xff800e54>
  809974:	04400404 	movi	r17,16
  809978:	d8801f17 	ldw	r2,124(sp)
  80997c:	8c3efb0e 	bge	r17,r16,80956c <__alt_mem_onchip_mem+0xff80156c>
  809980:	01402074 	movhi	r5,129
  809984:	295c4e84 	addi	r5,r5,28986
  809988:	d9402b15 	stw	r5,172(sp)
  80998c:	058001c4 	movi	r22,7
  809990:	dcc02c17 	ldw	r19,176(sp)
  809994:	00000306 	br	8099a4 <___vfprintf_internal_r+0x1524>
  809998:	42000204 	addi	r8,r8,8
  80999c:	843ffc04 	addi	r16,r16,-16
  8099a0:	8c3ef50e 	bge	r17,r16,809578 <__alt_mem_onchip_mem+0xff801578>
  8099a4:	18c00404 	addi	r3,r3,16
  8099a8:	10800044 	addi	r2,r2,1
  8099ac:	45000015 	stw	r20,0(r8)
  8099b0:	44400115 	stw	r17,4(r8)
  8099b4:	d8c02015 	stw	r3,128(sp)
  8099b8:	d8801f15 	stw	r2,124(sp)
  8099bc:	b0bff60e 	bge	r22,r2,809998 <__alt_mem_onchip_mem+0xff801998>
  8099c0:	d9801e04 	addi	r6,sp,120
  8099c4:	b80b883a 	mov	r5,r23
  8099c8:	9809883a 	mov	r4,r19
  8099cc:	080f1d80 	call	80f1d8 <__sprint_r>
  8099d0:	103bad1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  8099d4:	d8c02017 	ldw	r3,128(sp)
  8099d8:	d8801f17 	ldw	r2,124(sp)
  8099dc:	da000404 	addi	r8,sp,16
  8099e0:	003fee06 	br	80999c <__alt_mem_onchip_mem+0xff80199c>
  8099e4:	9088703a 	and	r4,r18,r2
  8099e8:	203eab1e 	bne	r4,zero,809498 <__alt_mem_onchip_mem+0xff801498>
  8099ec:	dc401f17 	ldw	r17,124(sp)
  8099f0:	40800115 	stw	r2,4(r8)
  8099f4:	44000015 	stw	r16,0(r8)
  8099f8:	8c400044 	addi	r17,r17,1
  8099fc:	d8c02015 	stw	r3,128(sp)
  809a00:	dc401f15 	stw	r17,124(sp)
  809a04:	008001c4 	movi	r2,7
  809a08:	14400e16 	blt	r2,r17,809a44 <___vfprintf_internal_r+0x15c4>
  809a0c:	45800204 	addi	r22,r8,8
  809a10:	003eca06 	br	80953c <__alt_mem_onchip_mem+0xff80153c>
  809a14:	01002074 	movhi	r4,129
  809a18:	211c4e84 	addi	r4,r4,28986
  809a1c:	d9002b15 	stw	r4,172(sp)
  809a20:	d8802b17 	ldw	r2,172(sp)
  809a24:	1c07883a 	add	r3,r3,r16
  809a28:	8c400044 	addi	r17,r17,1
  809a2c:	b0800015 	stw	r2,0(r22)
  809a30:	b4000115 	stw	r16,4(r22)
  809a34:	d8c02015 	stw	r3,128(sp)
  809a38:	dc401f15 	stw	r17,124(sp)
  809a3c:	008001c4 	movi	r2,7
  809a40:	147ebd0e 	bge	r2,r17,809538 <__alt_mem_onchip_mem+0xff801538>
  809a44:	d9002c17 	ldw	r4,176(sp)
  809a48:	d9801e04 	addi	r6,sp,120
  809a4c:	b80b883a 	mov	r5,r23
  809a50:	080f1d80 	call	80f1d8 <__sprint_r>
  809a54:	103b8c1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809a58:	d8c02017 	ldw	r3,128(sp)
  809a5c:	dc401f17 	ldw	r17,124(sp)
  809a60:	dd800404 	addi	r22,sp,16
  809a64:	003eb506 	br	80953c <__alt_mem_onchip_mem+0xff80153c>
  809a68:	d9002c17 	ldw	r4,176(sp)
  809a6c:	d9801e04 	addi	r6,sp,120
  809a70:	b80b883a 	mov	r5,r23
  809a74:	080f1d80 	call	80f1d8 <__sprint_r>
  809a78:	103b831e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809a7c:	d8c02017 	ldw	r3,128(sp)
  809a80:	dc401f17 	ldw	r17,124(sp)
  809a84:	da000404 	addi	r8,sp,16
  809a88:	003e8d06 	br	8094c0 <__alt_mem_onchip_mem+0xff8014c0>
  809a8c:	d9002c17 	ldw	r4,176(sp)
  809a90:	d9801e04 	addi	r6,sp,120
  809a94:	b80b883a 	mov	r5,r23
  809a98:	080f1d80 	call	80f1d8 <__sprint_r>
  809a9c:	103b7a1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809aa0:	d8c02017 	ldw	r3,128(sp)
  809aa4:	dc401f17 	ldw	r17,124(sp)
  809aa8:	dd800404 	addi	r22,sp,16
  809aac:	003e8f06 	br	8094ec <__alt_mem_onchip_mem+0xff8014ec>
  809ab0:	0027883a 	mov	r19,zero
  809ab4:	003f4a06 	br	8097e0 <__alt_mem_onchip_mem+0xff8017e0>
  809ab8:	d9002c17 	ldw	r4,176(sp)
  809abc:	d9801e04 	addi	r6,sp,120
  809ac0:	b80b883a 	mov	r5,r23
  809ac4:	080f1d80 	call	80f1d8 <__sprint_r>
  809ac8:	103b6f1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809acc:	d8c02017 	ldw	r3,128(sp)
  809ad0:	da000404 	addi	r8,sp,16
  809ad4:	003c9d06 	br	808d4c <__alt_mem_onchip_mem+0xff800d4c>
  809ad8:	04e7c83a 	sub	r19,zero,r19
  809adc:	9804c03a 	cmpne	r2,r19,zero
  809ae0:	05adc83a 	sub	r22,zero,r22
  809ae4:	b0adc83a 	sub	r22,r22,r2
  809ae8:	d8802917 	ldw	r2,164(sp)
  809aec:	07000b44 	movi	fp,45
  809af0:	df002785 	stb	fp,158(sp)
  809af4:	10017b16 	blt	r2,zero,80a0e4 <___vfprintf_internal_r+0x1c64>
  809af8:	00bfdfc4 	movi	r2,-129
  809afc:	90a4703a 	and	r18,r18,r2
  809b00:	003bb106 	br	8089c8 <__alt_mem_onchip_mem+0xff8009c8>
  809b04:	d9003617 	ldw	r4,216(sp)
  809b08:	d9403817 	ldw	r5,224(sp)
  809b0c:	da003d15 	stw	r8,244(sp)
  809b10:	080ef8c0 	call	80ef8c <__fpclassifyd>
  809b14:	da003d17 	ldw	r8,244(sp)
  809b18:	1000f026 	beq	r2,zero,809edc <___vfprintf_internal_r+0x1a5c>
  809b1c:	d9002917 	ldw	r4,164(sp)
  809b20:	05bff7c4 	movi	r22,-33
  809b24:	00bfffc4 	movi	r2,-1
  809b28:	8dac703a 	and	r22,r17,r22
  809b2c:	20820026 	beq	r4,r2,80a330 <___vfprintf_internal_r+0x1eb0>
  809b30:	008011c4 	movi	r2,71
  809b34:	b081f726 	beq	r22,r2,80a314 <___vfprintf_internal_r+0x1e94>
  809b38:	d9003817 	ldw	r4,224(sp)
  809b3c:	90c04014 	ori	r3,r18,256
  809b40:	d8c02b15 	stw	r3,172(sp)
  809b44:	20021516 	blt	r4,zero,80a39c <___vfprintf_internal_r+0x1f1c>
  809b48:	dcc03817 	ldw	r19,224(sp)
  809b4c:	d8002a05 	stb	zero,168(sp)
  809b50:	00801984 	movi	r2,102
  809b54:	8881f926 	beq	r17,r2,80a33c <___vfprintf_internal_r+0x1ebc>
  809b58:	00801184 	movi	r2,70
  809b5c:	88821c26 	beq	r17,r2,80a3d0 <___vfprintf_internal_r+0x1f50>
  809b60:	00801144 	movi	r2,69
  809b64:	b081ef26 	beq	r22,r2,80a324 <___vfprintf_internal_r+0x1ea4>
  809b68:	d8c02917 	ldw	r3,164(sp)
  809b6c:	d8802104 	addi	r2,sp,132
  809b70:	d8800315 	stw	r2,12(sp)
  809b74:	d9403617 	ldw	r5,216(sp)
  809b78:	d8802504 	addi	r2,sp,148
  809b7c:	d9002c17 	ldw	r4,176(sp)
  809b80:	d8800215 	stw	r2,8(sp)
  809b84:	d8802604 	addi	r2,sp,152
  809b88:	d8c00015 	stw	r3,0(sp)
  809b8c:	d8800115 	stw	r2,4(sp)
  809b90:	01c00084 	movi	r7,2
  809b94:	980d883a 	mov	r6,r19
  809b98:	d8c03c15 	stw	r3,240(sp)
  809b9c:	da003d15 	stw	r8,244(sp)
  809ba0:	080ab580 	call	80ab58 <_dtoa_r>
  809ba4:	1021883a 	mov	r16,r2
  809ba8:	008019c4 	movi	r2,103
  809bac:	d8c03c17 	ldw	r3,240(sp)
  809bb0:	da003d17 	ldw	r8,244(sp)
  809bb4:	88817126 	beq	r17,r2,80a17c <___vfprintf_internal_r+0x1cfc>
  809bb8:	008011c4 	movi	r2,71
  809bbc:	88829226 	beq	r17,r2,80a608 <___vfprintf_internal_r+0x2188>
  809bc0:	80f9883a 	add	fp,r16,r3
  809bc4:	d9003617 	ldw	r4,216(sp)
  809bc8:	000d883a 	mov	r6,zero
  809bcc:	000f883a 	mov	r7,zero
  809bd0:	980b883a 	mov	r5,r19
  809bd4:	da003d15 	stw	r8,244(sp)
  809bd8:	08123800 	call	812380 <__eqdf2>
  809bdc:	da003d17 	ldw	r8,244(sp)
  809be0:	10018d26 	beq	r2,zero,80a218 <___vfprintf_internal_r+0x1d98>
  809be4:	d8802117 	ldw	r2,132(sp)
  809be8:	1700062e 	bgeu	r2,fp,809c04 <___vfprintf_internal_r+0x1784>
  809bec:	01000c04 	movi	r4,48
  809bf0:	10c00044 	addi	r3,r2,1
  809bf4:	d8c02115 	stw	r3,132(sp)
  809bf8:	11000005 	stb	r4,0(r2)
  809bfc:	d8802117 	ldw	r2,132(sp)
  809c00:	173ffb36 	bltu	r2,fp,809bf0 <__alt_mem_onchip_mem+0xff801bf0>
  809c04:	1405c83a 	sub	r2,r2,r16
  809c08:	d8803315 	stw	r2,204(sp)
  809c0c:	008011c4 	movi	r2,71
  809c10:	b0817626 	beq	r22,r2,80a1ec <___vfprintf_internal_r+0x1d6c>
  809c14:	00801944 	movi	r2,101
  809c18:	1442810e 	bge	r2,r17,80a620 <___vfprintf_internal_r+0x21a0>
  809c1c:	d8c02617 	ldw	r3,152(sp)
  809c20:	00801984 	movi	r2,102
  809c24:	d8c03215 	stw	r3,200(sp)
  809c28:	8881fe26 	beq	r17,r2,80a424 <___vfprintf_internal_r+0x1fa4>
  809c2c:	d8c03217 	ldw	r3,200(sp)
  809c30:	d9003317 	ldw	r4,204(sp)
  809c34:	1901dd16 	blt	r3,r4,80a3ac <___vfprintf_internal_r+0x1f2c>
  809c38:	9480004c 	andi	r18,r18,1
  809c3c:	90022b1e 	bne	r18,zero,80a4ec <___vfprintf_internal_r+0x206c>
  809c40:	1805883a 	mov	r2,r3
  809c44:	18028016 	blt	r3,zero,80a648 <___vfprintf_internal_r+0x21c8>
  809c48:	d8c03217 	ldw	r3,200(sp)
  809c4c:	044019c4 	movi	r17,103
  809c50:	d8c02e15 	stw	r3,184(sp)
  809c54:	df002a07 	ldb	fp,168(sp)
  809c58:	e001531e 	bne	fp,zero,80a1a8 <___vfprintf_internal_r+0x1d28>
  809c5c:	df002783 	ldbu	fp,158(sp)
  809c60:	d8802a15 	stw	r2,168(sp)
  809c64:	dc802b17 	ldw	r18,172(sp)
  809c68:	d8002915 	stw	zero,164(sp)
  809c6c:	003bd106 	br	808bb4 <__alt_mem_onchip_mem+0xff800bb4>
  809c70:	d8802d17 	ldw	r2,180(sp)
  809c74:	d8c02d17 	ldw	r3,180(sp)
  809c78:	d9002d17 	ldw	r4,180(sp)
  809c7c:	10800017 	ldw	r2,0(r2)
  809c80:	18c00117 	ldw	r3,4(r3)
  809c84:	21000204 	addi	r4,r4,8
  809c88:	d8803615 	stw	r2,216(sp)
  809c8c:	d8c03815 	stw	r3,224(sp)
  809c90:	d9002d15 	stw	r4,180(sp)
  809c94:	003b7506 	br	808a6c <__alt_mem_onchip_mem+0xff800a6c>
  809c98:	ac400007 	ldb	r17,0(r21)
  809c9c:	003a5906 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  809ca0:	9080100c 	andi	r2,r18,64
  809ca4:	1000a826 	beq	r2,zero,809f48 <___vfprintf_internal_r+0x1ac8>
  809ca8:	d9002d17 	ldw	r4,180(sp)
  809cac:	002d883a 	mov	r22,zero
  809cb0:	24c0000b 	ldhu	r19,0(r4)
  809cb4:	21000104 	addi	r4,r4,4
  809cb8:	d9002d15 	stw	r4,180(sp)
  809cbc:	003ccb06 	br	808fec <__alt_mem_onchip_mem+0xff800fec>
  809cc0:	d8c02d17 	ldw	r3,180(sp)
  809cc4:	d9002917 	ldw	r4,164(sp)
  809cc8:	002d883a 	mov	r22,zero
  809ccc:	18800104 	addi	r2,r3,4
  809cd0:	1cc00017 	ldw	r19,0(r3)
  809cd4:	203ebb0e 	bge	r4,zero,8097c4 <__alt_mem_onchip_mem+0xff8017c4>
  809cd8:	003ef106 	br	8098a0 <__alt_mem_onchip_mem+0xff8018a0>
  809cdc:	9080040c 	andi	r2,r18,16
  809ce0:	1000921e 	bne	r2,zero,809f2c <___vfprintf_internal_r+0x1aac>
  809ce4:	9480100c 	andi	r18,r18,64
  809ce8:	90013926 	beq	r18,zero,80a1d0 <___vfprintf_internal_r+0x1d50>
  809cec:	d9002d17 	ldw	r4,180(sp)
  809cf0:	d9402f17 	ldw	r5,188(sp)
  809cf4:	20800017 	ldw	r2,0(r4)
  809cf8:	21000104 	addi	r4,r4,4
  809cfc:	d9002d15 	stw	r4,180(sp)
  809d00:	1140000d 	sth	r5,0(r2)
  809d04:	003a1606 	br	808560 <__alt_mem_onchip_mem+0xff800560>
  809d08:	9080100c 	andi	r2,r18,64
  809d0c:	10008026 	beq	r2,zero,809f10 <___vfprintf_internal_r+0x1a90>
  809d10:	d8c02d17 	ldw	r3,180(sp)
  809d14:	1cc0000f 	ldh	r19,0(r3)
  809d18:	18c00104 	addi	r3,r3,4
  809d1c:	d8c02d15 	stw	r3,180(sp)
  809d20:	982dd7fa 	srai	r22,r19,31
  809d24:	b005883a 	mov	r2,r22
  809d28:	003b1f06 	br	8089a8 <__alt_mem_onchip_mem+0xff8009a8>
  809d2c:	9080100c 	andi	r2,r18,64
  809d30:	d8002785 	stb	zero,158(sp)
  809d34:	10008a1e 	bne	r2,zero,809f60 <___vfprintf_internal_r+0x1ae0>
  809d38:	d9402d17 	ldw	r5,180(sp)
  809d3c:	d8c02917 	ldw	r3,164(sp)
  809d40:	002d883a 	mov	r22,zero
  809d44:	28800104 	addi	r2,r5,4
  809d48:	2cc00017 	ldw	r19,0(r5)
  809d4c:	183e4b0e 	bge	r3,zero,80967c <__alt_mem_onchip_mem+0xff80167c>
  809d50:	9d86b03a 	or	r3,r19,r22
  809d54:	d8802d15 	stw	r2,180(sp)
  809d58:	183e4c1e 	bne	r3,zero,80968c <__alt_mem_onchip_mem+0xff80168c>
  809d5c:	0039883a 	mov	fp,zero
  809d60:	0005883a 	mov	r2,zero
  809d64:	003d4006 	br	809268 <__alt_mem_onchip_mem+0xff801268>
  809d68:	01402074 	movhi	r5,129
  809d6c:	295c4e84 	addi	r5,r5,28986
  809d70:	d9402b15 	stw	r5,172(sp)
  809d74:	d9402b17 	ldw	r5,172(sp)
  809d78:	1c47883a 	add	r3,r3,r17
  809d7c:	10800044 	addi	r2,r2,1
  809d80:	41400015 	stw	r5,0(r8)
  809d84:	44400115 	stw	r17,4(r8)
  809d88:	d8c02015 	stw	r3,128(sp)
  809d8c:	d8801f15 	stw	r2,124(sp)
  809d90:	010001c4 	movi	r4,7
  809d94:	20bec816 	blt	r4,r2,8098b8 <__alt_mem_onchip_mem+0xff8018b8>
  809d98:	42000204 	addi	r8,r8,8
  809d9c:	003ecd06 	br	8098d4 <__alt_mem_onchip_mem+0xff8018d4>
  809da0:	d9002917 	ldw	r4,164(sp)
  809da4:	d8002785 	stb	zero,158(sp)
  809da8:	203d2d16 	blt	r4,zero,809260 <__alt_mem_onchip_mem+0xff801260>
  809dac:	00bfdfc4 	movi	r2,-129
  809db0:	90a4703a 	and	r18,r18,r2
  809db4:	003a9106 	br	8087fc <__alt_mem_onchip_mem+0xff8007fc>
  809db8:	01002074 	movhi	r4,129
  809dbc:	211c4e84 	addi	r4,r4,28986
  809dc0:	d9002b15 	stw	r4,172(sp)
  809dc4:	003c0c06 	br	808df8 <__alt_mem_onchip_mem+0xff800df8>
  809dc8:	d9002c17 	ldw	r4,176(sp)
  809dcc:	d9801e04 	addi	r6,sp,120
  809dd0:	b80b883a 	mov	r5,r23
  809dd4:	080f1d80 	call	80f1d8 <__sprint_r>
  809dd8:	103aab1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809ddc:	d8c02017 	ldw	r3,128(sp)
  809de0:	da000404 	addi	r8,sp,16
  809de4:	003d4106 	br	8092ec <__alt_mem_onchip_mem+0xff8012ec>
  809de8:	d8801f17 	ldw	r2,124(sp)
  809dec:	01402074 	movhi	r5,129
  809df0:	01000044 	movi	r4,1
  809df4:	18c00044 	addi	r3,r3,1
  809df8:	10800044 	addi	r2,r2,1
  809dfc:	295c4e04 	addi	r5,r5,28984
  809e00:	41000115 	stw	r4,4(r8)
  809e04:	41400015 	stw	r5,0(r8)
  809e08:	d8c02015 	stw	r3,128(sp)
  809e0c:	d8801f15 	stw	r2,124(sp)
  809e10:	010001c4 	movi	r4,7
  809e14:	20805c16 	blt	r4,r2,809f88 <___vfprintf_internal_r+0x1b08>
  809e18:	42000204 	addi	r8,r8,8
  809e1c:	8800041e 	bne	r17,zero,809e30 <___vfprintf_internal_r+0x19b0>
  809e20:	d8803317 	ldw	r2,204(sp)
  809e24:	1000021e 	bne	r2,zero,809e30 <___vfprintf_internal_r+0x19b0>
  809e28:	9080004c 	andi	r2,r18,1
  809e2c:	103c0926 	beq	r2,zero,808e54 <__alt_mem_onchip_mem+0xff800e54>
  809e30:	d9003717 	ldw	r4,220(sp)
  809e34:	d8801f17 	ldw	r2,124(sp)
  809e38:	d9403417 	ldw	r5,208(sp)
  809e3c:	20c7883a 	add	r3,r4,r3
  809e40:	10800044 	addi	r2,r2,1
  809e44:	41000115 	stw	r4,4(r8)
  809e48:	41400015 	stw	r5,0(r8)
  809e4c:	d8c02015 	stw	r3,128(sp)
  809e50:	d8801f15 	stw	r2,124(sp)
  809e54:	010001c4 	movi	r4,7
  809e58:	20812116 	blt	r4,r2,80a2e0 <___vfprintf_internal_r+0x1e60>
  809e5c:	42000204 	addi	r8,r8,8
  809e60:	0463c83a 	sub	r17,zero,r17
  809e64:	0440730e 	bge	zero,r17,80a034 <___vfprintf_internal_r+0x1bb4>
  809e68:	05800404 	movi	r22,16
  809e6c:	b440860e 	bge	r22,r17,80a088 <___vfprintf_internal_r+0x1c08>
  809e70:	01402074 	movhi	r5,129
  809e74:	295c4e84 	addi	r5,r5,28986
  809e78:	d9402b15 	stw	r5,172(sp)
  809e7c:	070001c4 	movi	fp,7
  809e80:	dcc02c17 	ldw	r19,176(sp)
  809e84:	00000306 	br	809e94 <___vfprintf_internal_r+0x1a14>
  809e88:	42000204 	addi	r8,r8,8
  809e8c:	8c7ffc04 	addi	r17,r17,-16
  809e90:	b440800e 	bge	r22,r17,80a094 <___vfprintf_internal_r+0x1c14>
  809e94:	18c00404 	addi	r3,r3,16
  809e98:	10800044 	addi	r2,r2,1
  809e9c:	45000015 	stw	r20,0(r8)
  809ea0:	45800115 	stw	r22,4(r8)
  809ea4:	d8c02015 	stw	r3,128(sp)
  809ea8:	d8801f15 	stw	r2,124(sp)
  809eac:	e0bff60e 	bge	fp,r2,809e88 <__alt_mem_onchip_mem+0xff801e88>
  809eb0:	d9801e04 	addi	r6,sp,120
  809eb4:	b80b883a 	mov	r5,r23
  809eb8:	9809883a 	mov	r4,r19
  809ebc:	080f1d80 	call	80f1d8 <__sprint_r>
  809ec0:	103a711e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809ec4:	d8c02017 	ldw	r3,128(sp)
  809ec8:	d8801f17 	ldw	r2,124(sp)
  809ecc:	da000404 	addi	r8,sp,16
  809ed0:	003fee06 	br	809e8c <__alt_mem_onchip_mem+0xff801e8c>
  809ed4:	00bfffc4 	movi	r2,-1
  809ed8:	003a6f06 	br	808898 <__alt_mem_onchip_mem+0xff800898>
  809edc:	008011c4 	movi	r2,71
  809ee0:	1440b816 	blt	r2,r17,80a1c4 <___vfprintf_internal_r+0x1d44>
  809ee4:	04002074 	movhi	r16,129
  809ee8:	841c4004 	addi	r16,r16,28928
  809eec:	00c000c4 	movi	r3,3
  809ef0:	00bfdfc4 	movi	r2,-129
  809ef4:	d8c02a15 	stw	r3,168(sp)
  809ef8:	90a4703a 	and	r18,r18,r2
  809efc:	df002783 	ldbu	fp,158(sp)
  809f00:	d8c02e15 	stw	r3,184(sp)
  809f04:	d8002915 	stw	zero,164(sp)
  809f08:	d8003215 	stw	zero,200(sp)
  809f0c:	003b2906 	br	808bb4 <__alt_mem_onchip_mem+0xff800bb4>
  809f10:	d9002d17 	ldw	r4,180(sp)
  809f14:	24c00017 	ldw	r19,0(r4)
  809f18:	21000104 	addi	r4,r4,4
  809f1c:	d9002d15 	stw	r4,180(sp)
  809f20:	982dd7fa 	srai	r22,r19,31
  809f24:	b005883a 	mov	r2,r22
  809f28:	003a9f06 	br	8089a8 <__alt_mem_onchip_mem+0xff8009a8>
  809f2c:	d9402d17 	ldw	r5,180(sp)
  809f30:	d8c02f17 	ldw	r3,188(sp)
  809f34:	28800017 	ldw	r2,0(r5)
  809f38:	29400104 	addi	r5,r5,4
  809f3c:	d9402d15 	stw	r5,180(sp)
  809f40:	10c00015 	stw	r3,0(r2)
  809f44:	00398606 	br	808560 <__alt_mem_onchip_mem+0xff800560>
  809f48:	d9402d17 	ldw	r5,180(sp)
  809f4c:	002d883a 	mov	r22,zero
  809f50:	2cc00017 	ldw	r19,0(r5)
  809f54:	29400104 	addi	r5,r5,4
  809f58:	d9402d15 	stw	r5,180(sp)
  809f5c:	003c2306 	br	808fec <__alt_mem_onchip_mem+0xff800fec>
  809f60:	d8c02d17 	ldw	r3,180(sp)
  809f64:	d9002917 	ldw	r4,164(sp)
  809f68:	002d883a 	mov	r22,zero
  809f6c:	18800104 	addi	r2,r3,4
  809f70:	1cc0000b 	ldhu	r19,0(r3)
  809f74:	203dc10e 	bge	r4,zero,80967c <__alt_mem_onchip_mem+0xff80167c>
  809f78:	003f7506 	br	809d50 <__alt_mem_onchip_mem+0xff801d50>
  809f7c:	04002074 	movhi	r16,129
  809f80:	841c3e04 	addi	r16,r16,28920
  809f84:	003acc06 	br	808ab8 <__alt_mem_onchip_mem+0xff800ab8>
  809f88:	d9002c17 	ldw	r4,176(sp)
  809f8c:	d9801e04 	addi	r6,sp,120
  809f90:	b80b883a 	mov	r5,r23
  809f94:	080f1d80 	call	80f1d8 <__sprint_r>
  809f98:	103a3b1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809f9c:	dc402617 	ldw	r17,152(sp)
  809fa0:	d8c02017 	ldw	r3,128(sp)
  809fa4:	da000404 	addi	r8,sp,16
  809fa8:	003f9c06 	br	809e1c <__alt_mem_onchip_mem+0xff801e1c>
  809fac:	ac400043 	ldbu	r17,1(r21)
  809fb0:	94800814 	ori	r18,r18,32
  809fb4:	ad400044 	addi	r21,r21,1
  809fb8:	8c403fcc 	andi	r17,r17,255
  809fbc:	8c40201c 	xori	r17,r17,128
  809fc0:	8c7fe004 	addi	r17,r17,-128
  809fc4:	00398f06 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  809fc8:	d8c02d15 	stw	r3,180(sp)
  809fcc:	0039883a 	mov	fp,zero
  809fd0:	003e3506 	br	8098a8 <__alt_mem_onchip_mem+0xff8018a8>
  809fd4:	d9002c17 	ldw	r4,176(sp)
  809fd8:	d9801e04 	addi	r6,sp,120
  809fdc:	b80b883a 	mov	r5,r23
  809fe0:	080f1d80 	call	80f1d8 <__sprint_r>
  809fe4:	103a281e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  809fe8:	d8c02017 	ldw	r3,128(sp)
  809fec:	da000404 	addi	r8,sp,16
  809ff0:	003cd006 	br	809334 <__alt_mem_onchip_mem+0xff801334>
  809ff4:	8009883a 	mov	r4,r16
  809ff8:	da003d15 	stw	r8,244(sp)
  809ffc:	08083e80 	call	8083e8 <strlen>
  80a000:	d8802e15 	stw	r2,184(sp)
  80a004:	da003d17 	ldw	r8,244(sp)
  80a008:	103c340e 	bge	r2,zero,8090dc <__alt_mem_onchip_mem+0xff8010dc>
  80a00c:	0005883a 	mov	r2,zero
  80a010:	003c3206 	br	8090dc <__alt_mem_onchip_mem+0xff8010dc>
  80a014:	d9002c17 	ldw	r4,176(sp)
  80a018:	d9801e04 	addi	r6,sp,120
  80a01c:	b80b883a 	mov	r5,r23
  80a020:	080f1d80 	call	80f1d8 <__sprint_r>
  80a024:	103a181e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  80a028:	d8c02017 	ldw	r3,128(sp)
  80a02c:	d8801f17 	ldw	r2,124(sp)
  80a030:	da000404 	addi	r8,sp,16
  80a034:	d9403317 	ldw	r5,204(sp)
  80a038:	10800044 	addi	r2,r2,1
  80a03c:	44000015 	stw	r16,0(r8)
  80a040:	28c7883a 	add	r3,r5,r3
  80a044:	003b7d06 	br	808e3c <__alt_mem_onchip_mem+0xff800e3c>
  80a048:	01002074 	movhi	r4,129
  80a04c:	211c5284 	addi	r4,r4,29002
  80a050:	d9003515 	stw	r4,212(sp)
  80a054:	003b1406 	br	808ca8 <__alt_mem_onchip_mem+0xff800ca8>
  80a058:	013fffc4 	movi	r4,-1
  80a05c:	003a3506 	br	808934 <__alt_mem_onchip_mem+0xff800934>
  80a060:	0023883a 	mov	r17,zero
  80a064:	003d9d06 	br	8096dc <__alt_mem_onchip_mem+0xff8016dc>
  80a068:	d9002c17 	ldw	r4,176(sp)
  80a06c:	d9801e04 	addi	r6,sp,120
  80a070:	b80b883a 	mov	r5,r23
  80a074:	080f1d80 	call	80f1d8 <__sprint_r>
  80a078:	103a031e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  80a07c:	d8c02017 	ldw	r3,128(sp)
  80a080:	da000404 	addi	r8,sp,16
  80a084:	003d9406 	br	8096d8 <__alt_mem_onchip_mem+0xff8016d8>
  80a088:	01002074 	movhi	r4,129
  80a08c:	211c4e84 	addi	r4,r4,28986
  80a090:	d9002b15 	stw	r4,172(sp)
  80a094:	d9002b17 	ldw	r4,172(sp)
  80a098:	1c47883a 	add	r3,r3,r17
  80a09c:	10800044 	addi	r2,r2,1
  80a0a0:	41000015 	stw	r4,0(r8)
  80a0a4:	44400115 	stw	r17,4(r8)
  80a0a8:	d8c02015 	stw	r3,128(sp)
  80a0ac:	d8801f15 	stw	r2,124(sp)
  80a0b0:	010001c4 	movi	r4,7
  80a0b4:	20bfd716 	blt	r4,r2,80a014 <__alt_mem_onchip_mem+0xff802014>
  80a0b8:	42000204 	addi	r8,r8,8
  80a0bc:	003fdd06 	br	80a034 <__alt_mem_onchip_mem+0xff802034>
  80a0c0:	d9002c17 	ldw	r4,176(sp)
  80a0c4:	d9801e04 	addi	r6,sp,120
  80a0c8:	b80b883a 	mov	r5,r23
  80a0cc:	080f1d80 	call	80f1d8 <__sprint_r>
  80a0d0:	1039ed1e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  80a0d4:	d8802617 	ldw	r2,152(sp)
  80a0d8:	d8c02017 	ldw	r3,128(sp)
  80a0dc:	da000404 	addi	r8,sp,16
  80a0e0:	003e1006 	br	809924 <__alt_mem_onchip_mem+0xff801924>
  80a0e4:	00800044 	movi	r2,1
  80a0e8:	10803fcc 	andi	r2,r2,255
  80a0ec:	00c00044 	movi	r3,1
  80a0f0:	10fa3526 	beq	r2,r3,8089c8 <__alt_mem_onchip_mem+0xff8009c8>
  80a0f4:	00c00084 	movi	r3,2
  80a0f8:	10fbcb26 	beq	r2,r3,809028 <__alt_mem_onchip_mem+0xff801028>
  80a0fc:	003a8f06 	br	808b3c <__alt_mem_onchip_mem+0xff800b3c>
  80a100:	01002074 	movhi	r4,129
  80a104:	211c5284 	addi	r4,r4,29002
  80a108:	d9003515 	stw	r4,212(sp)
  80a10c:	003b7606 	br	808ee8 <__alt_mem_onchip_mem+0xff800ee8>
  80a110:	d8802917 	ldw	r2,164(sp)
  80a114:	00c00184 	movi	r3,6
  80a118:	1880012e 	bgeu	r3,r2,80a120 <___vfprintf_internal_r+0x1ca0>
  80a11c:	1805883a 	mov	r2,r3
  80a120:	d8802e15 	stw	r2,184(sp)
  80a124:	1000ef16 	blt	r2,zero,80a4e4 <___vfprintf_internal_r+0x2064>
  80a128:	04002074 	movhi	r16,129
  80a12c:	d8802a15 	stw	r2,168(sp)
  80a130:	dcc02d15 	stw	r19,180(sp)
  80a134:	d8002915 	stw	zero,164(sp)
  80a138:	d8003215 	stw	zero,200(sp)
  80a13c:	841c4c04 	addi	r16,r16,28976
  80a140:	0039883a 	mov	fp,zero
  80a144:	003aa206 	br	808bd0 <__alt_mem_onchip_mem+0xff800bd0>
  80a148:	0021883a 	mov	r16,zero
  80a14c:	003e0706 	br	80996c <__alt_mem_onchip_mem+0xff80196c>
  80a150:	d9002c17 	ldw	r4,176(sp)
  80a154:	d9801e04 	addi	r6,sp,120
  80a158:	b80b883a 	mov	r5,r23
  80a15c:	080f1d80 	call	80f1d8 <__sprint_r>
  80a160:	1039c91e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  80a164:	d8802617 	ldw	r2,152(sp)
  80a168:	d9403317 	ldw	r5,204(sp)
  80a16c:	d8c02017 	ldw	r3,128(sp)
  80a170:	da000404 	addi	r8,sp,16
  80a174:	2885c83a 	sub	r2,r5,r2
  80a178:	003dfb06 	br	809968 <__alt_mem_onchip_mem+0xff801968>
  80a17c:	9080004c 	andi	r2,r18,1
  80a180:	103e8f1e 	bne	r2,zero,809bc0 <__alt_mem_onchip_mem+0xff801bc0>
  80a184:	d8802117 	ldw	r2,132(sp)
  80a188:	003e9e06 	br	809c04 <__alt_mem_onchip_mem+0xff801c04>
  80a18c:	1025883a 	mov	r18,r2
  80a190:	0039883a 	mov	fp,zero
  80a194:	00800084 	movi	r2,2
  80a198:	003fd306 	br	80a0e8 <__alt_mem_onchip_mem+0xff8020e8>
  80a19c:	07000b44 	movi	fp,45
  80a1a0:	df002785 	stb	fp,158(sp)
  80a1a4:	003a4006 	br	808aa8 <__alt_mem_onchip_mem+0xff800aa8>
  80a1a8:	00c00b44 	movi	r3,45
  80a1ac:	d8c02785 	stb	r3,158(sp)
  80a1b0:	d8802a15 	stw	r2,168(sp)
  80a1b4:	dc802b17 	ldw	r18,172(sp)
  80a1b8:	d8002915 	stw	zero,164(sp)
  80a1bc:	07000b44 	movi	fp,45
  80a1c0:	003a8006 	br	808bc4 <__alt_mem_onchip_mem+0xff800bc4>
  80a1c4:	04002074 	movhi	r16,129
  80a1c8:	841c4104 	addi	r16,r16,28932
  80a1cc:	003f4706 	br	809eec <__alt_mem_onchip_mem+0xff801eec>
  80a1d0:	d8c02d17 	ldw	r3,180(sp)
  80a1d4:	d9002f17 	ldw	r4,188(sp)
  80a1d8:	18800017 	ldw	r2,0(r3)
  80a1dc:	18c00104 	addi	r3,r3,4
  80a1e0:	d8c02d15 	stw	r3,180(sp)
  80a1e4:	11000015 	stw	r4,0(r2)
  80a1e8:	0038dd06 	br	808560 <__alt_mem_onchip_mem+0xff800560>
  80a1ec:	dd802617 	ldw	r22,152(sp)
  80a1f0:	00bfff44 	movi	r2,-3
  80a1f4:	b0801c16 	blt	r22,r2,80a268 <___vfprintf_internal_r+0x1de8>
  80a1f8:	d9402917 	ldw	r5,164(sp)
  80a1fc:	2d801a16 	blt	r5,r22,80a268 <___vfprintf_internal_r+0x1de8>
  80a200:	dd803215 	stw	r22,200(sp)
  80a204:	003e8906 	br	809c2c <__alt_mem_onchip_mem+0xff801c2c>
  80a208:	01002074 	movhi	r4,129
  80a20c:	211c4e84 	addi	r4,r4,28986
  80a210:	d9002b15 	stw	r4,172(sp)
  80a214:	003c9106 	br	80945c <__alt_mem_onchip_mem+0xff80145c>
  80a218:	e005883a 	mov	r2,fp
  80a21c:	003e7906 	br	809c04 <__alt_mem_onchip_mem+0xff801c04>
  80a220:	d9402917 	ldw	r5,164(sp)
  80a224:	df002783 	ldbu	fp,158(sp)
  80a228:	dcc02d15 	stw	r19,180(sp)
  80a22c:	d9402a15 	stw	r5,168(sp)
  80a230:	d9402e15 	stw	r5,184(sp)
  80a234:	d8002915 	stw	zero,164(sp)
  80a238:	d8003215 	stw	zero,200(sp)
  80a23c:	003a5d06 	br	808bb4 <__alt_mem_onchip_mem+0xff800bb4>
  80a240:	9080004c 	andi	r2,r18,1
  80a244:	0039883a 	mov	fp,zero
  80a248:	10000426 	beq	r2,zero,80a25c <___vfprintf_internal_r+0x1ddc>
  80a24c:	00800c04 	movi	r2,48
  80a250:	dc001dc4 	addi	r16,sp,119
  80a254:	d8801dc5 	stb	r2,119(sp)
  80a258:	003b8006 	br	80905c <__alt_mem_onchip_mem+0xff80105c>
  80a25c:	d8002e15 	stw	zero,184(sp)
  80a260:	dc001e04 	addi	r16,sp,120
  80a264:	003a4d06 	br	808b9c <__alt_mem_onchip_mem+0xff800b9c>
  80a268:	8c7fff84 	addi	r17,r17,-2
  80a26c:	b5bfffc4 	addi	r22,r22,-1
  80a270:	dd802615 	stw	r22,152(sp)
  80a274:	dc4022c5 	stb	r17,139(sp)
  80a278:	b000bf16 	blt	r22,zero,80a578 <___vfprintf_internal_r+0x20f8>
  80a27c:	00800ac4 	movi	r2,43
  80a280:	d8802305 	stb	r2,140(sp)
  80a284:	00800244 	movi	r2,9
  80a288:	15807016 	blt	r2,r22,80a44c <___vfprintf_internal_r+0x1fcc>
  80a28c:	00800c04 	movi	r2,48
  80a290:	b5800c04 	addi	r22,r22,48
  80a294:	d8802345 	stb	r2,141(sp)
  80a298:	dd802385 	stb	r22,142(sp)
  80a29c:	d88023c4 	addi	r2,sp,143
  80a2a0:	df0022c4 	addi	fp,sp,139
  80a2a4:	d8c03317 	ldw	r3,204(sp)
  80a2a8:	1739c83a 	sub	fp,r2,fp
  80a2ac:	d9003317 	ldw	r4,204(sp)
  80a2b0:	e0c7883a 	add	r3,fp,r3
  80a2b4:	df003a15 	stw	fp,232(sp)
  80a2b8:	d8c02e15 	stw	r3,184(sp)
  80a2bc:	00800044 	movi	r2,1
  80a2c0:	1100b30e 	bge	r2,r4,80a590 <___vfprintf_internal_r+0x2110>
  80a2c4:	d8c02e17 	ldw	r3,184(sp)
  80a2c8:	18c00044 	addi	r3,r3,1
  80a2cc:	d8c02e15 	stw	r3,184(sp)
  80a2d0:	1805883a 	mov	r2,r3
  80a2d4:	1800ac16 	blt	r3,zero,80a588 <___vfprintf_internal_r+0x2108>
  80a2d8:	d8003215 	stw	zero,200(sp)
  80a2dc:	003e5d06 	br	809c54 <__alt_mem_onchip_mem+0xff801c54>
  80a2e0:	d9002c17 	ldw	r4,176(sp)
  80a2e4:	d9801e04 	addi	r6,sp,120
  80a2e8:	b80b883a 	mov	r5,r23
  80a2ec:	080f1d80 	call	80f1d8 <__sprint_r>
  80a2f0:	1039651e 	bne	r2,zero,808888 <__alt_mem_onchip_mem+0xff800888>
  80a2f4:	dc402617 	ldw	r17,152(sp)
  80a2f8:	d8c02017 	ldw	r3,128(sp)
  80a2fc:	d8801f17 	ldw	r2,124(sp)
  80a300:	da000404 	addi	r8,sp,16
  80a304:	003ed606 	br	809e60 <__alt_mem_onchip_mem+0xff801e60>
  80a308:	582b883a 	mov	r21,r11
  80a30c:	d8002915 	stw	zero,164(sp)
  80a310:	0038bd06 	br	808608 <__alt_mem_onchip_mem+0xff800608>
  80a314:	d8802917 	ldw	r2,164(sp)
  80a318:	103e071e 	bne	r2,zero,809b38 <__alt_mem_onchip_mem+0xff801b38>
  80a31c:	dc002915 	stw	r16,164(sp)
  80a320:	003e0506 	br	809b38 <__alt_mem_onchip_mem+0xff801b38>
  80a324:	d9002917 	ldw	r4,164(sp)
  80a328:	20c00044 	addi	r3,r4,1
  80a32c:	003e0f06 	br	809b6c <__alt_mem_onchip_mem+0xff801b6c>
  80a330:	01400184 	movi	r5,6
  80a334:	d9402915 	stw	r5,164(sp)
  80a338:	003dff06 	br	809b38 <__alt_mem_onchip_mem+0xff801b38>
  80a33c:	d8802104 	addi	r2,sp,132
  80a340:	d8800315 	stw	r2,12(sp)
  80a344:	d8802504 	addi	r2,sp,148
  80a348:	d8800215 	stw	r2,8(sp)
  80a34c:	d8802604 	addi	r2,sp,152
  80a350:	d8800115 	stw	r2,4(sp)
  80a354:	d8802917 	ldw	r2,164(sp)
  80a358:	d9403617 	ldw	r5,216(sp)
  80a35c:	d9002c17 	ldw	r4,176(sp)
  80a360:	d8800015 	stw	r2,0(sp)
  80a364:	01c000c4 	movi	r7,3
  80a368:	980d883a 	mov	r6,r19
  80a36c:	da003d15 	stw	r8,244(sp)
  80a370:	080ab580 	call	80ab58 <_dtoa_r>
  80a374:	d8c02917 	ldw	r3,164(sp)
  80a378:	da003d17 	ldw	r8,244(sp)
  80a37c:	1021883a 	mov	r16,r2
  80a380:	10f9883a 	add	fp,r2,r3
  80a384:	81000007 	ldb	r4,0(r16)
  80a388:	00800c04 	movi	r2,48
  80a38c:	20805e26 	beq	r4,r2,80a508 <___vfprintf_internal_r+0x2088>
  80a390:	d8c02617 	ldw	r3,152(sp)
  80a394:	e0f9883a 	add	fp,fp,r3
  80a398:	003e0a06 	br	809bc4 <__alt_mem_onchip_mem+0xff801bc4>
  80a39c:	00c00b44 	movi	r3,45
  80a3a0:	24e0003c 	xorhi	r19,r4,32768
  80a3a4:	d8c02a05 	stb	r3,168(sp)
  80a3a8:	003de906 	br	809b50 <__alt_mem_onchip_mem+0xff801b50>
  80a3ac:	d8c03217 	ldw	r3,200(sp)
  80a3b0:	00c07a0e 	bge	zero,r3,80a59c <___vfprintf_internal_r+0x211c>
  80a3b4:	00800044 	movi	r2,1
  80a3b8:	d9003317 	ldw	r4,204(sp)
  80a3bc:	1105883a 	add	r2,r2,r4
  80a3c0:	d8802e15 	stw	r2,184(sp)
  80a3c4:	10004e16 	blt	r2,zero,80a500 <___vfprintf_internal_r+0x2080>
  80a3c8:	044019c4 	movi	r17,103
  80a3cc:	003e2106 	br	809c54 <__alt_mem_onchip_mem+0xff801c54>
  80a3d0:	d9002917 	ldw	r4,164(sp)
  80a3d4:	d8802104 	addi	r2,sp,132
  80a3d8:	d8800315 	stw	r2,12(sp)
  80a3dc:	d9000015 	stw	r4,0(sp)
  80a3e0:	d8802504 	addi	r2,sp,148
  80a3e4:	d9403617 	ldw	r5,216(sp)
  80a3e8:	d9002c17 	ldw	r4,176(sp)
  80a3ec:	d8800215 	stw	r2,8(sp)
  80a3f0:	d8802604 	addi	r2,sp,152
  80a3f4:	d8800115 	stw	r2,4(sp)
  80a3f8:	01c000c4 	movi	r7,3
  80a3fc:	980d883a 	mov	r6,r19
  80a400:	da003d15 	stw	r8,244(sp)
  80a404:	080ab580 	call	80ab58 <_dtoa_r>
  80a408:	d8c02917 	ldw	r3,164(sp)
  80a40c:	da003d17 	ldw	r8,244(sp)
  80a410:	1021883a 	mov	r16,r2
  80a414:	00801184 	movi	r2,70
  80a418:	80f9883a 	add	fp,r16,r3
  80a41c:	88bfd926 	beq	r17,r2,80a384 <__alt_mem_onchip_mem+0xff802384>
  80a420:	003de806 	br	809bc4 <__alt_mem_onchip_mem+0xff801bc4>
  80a424:	d9002917 	ldw	r4,164(sp)
  80a428:	00c04d0e 	bge	zero,r3,80a560 <___vfprintf_internal_r+0x20e0>
  80a42c:	2000441e 	bne	r4,zero,80a540 <___vfprintf_internal_r+0x20c0>
  80a430:	9480004c 	andi	r18,r18,1
  80a434:	9000421e 	bne	r18,zero,80a540 <___vfprintf_internal_r+0x20c0>
  80a438:	1805883a 	mov	r2,r3
  80a43c:	18007016 	blt	r3,zero,80a600 <___vfprintf_internal_r+0x2180>
  80a440:	d8c03217 	ldw	r3,200(sp)
  80a444:	d8c02e15 	stw	r3,184(sp)
  80a448:	003e0206 	br	809c54 <__alt_mem_onchip_mem+0xff801c54>
  80a44c:	df0022c4 	addi	fp,sp,139
  80a450:	dc002915 	stw	r16,164(sp)
  80a454:	4027883a 	mov	r19,r8
  80a458:	e021883a 	mov	r16,fp
  80a45c:	b009883a 	mov	r4,r22
  80a460:	01400284 	movi	r5,10
  80a464:	08119680 	call	811968 <__modsi3>
  80a468:	10800c04 	addi	r2,r2,48
  80a46c:	843fffc4 	addi	r16,r16,-1
  80a470:	b009883a 	mov	r4,r22
  80a474:	01400284 	movi	r5,10
  80a478:	80800005 	stb	r2,0(r16)
  80a47c:	08118e40 	call	8118e4 <__divsi3>
  80a480:	102d883a 	mov	r22,r2
  80a484:	00800244 	movi	r2,9
  80a488:	15bff416 	blt	r2,r22,80a45c <__alt_mem_onchip_mem+0xff80245c>
  80a48c:	9811883a 	mov	r8,r19
  80a490:	b0800c04 	addi	r2,r22,48
  80a494:	8027883a 	mov	r19,r16
  80a498:	997fffc4 	addi	r5,r19,-1
  80a49c:	98bfffc5 	stb	r2,-1(r19)
  80a4a0:	dc002917 	ldw	r16,164(sp)
  80a4a4:	2f006a2e 	bgeu	r5,fp,80a650 <___vfprintf_internal_r+0x21d0>
  80a4a8:	d9c02384 	addi	r7,sp,142
  80a4ac:	3ccfc83a 	sub	r7,r7,r19
  80a4b0:	d9002344 	addi	r4,sp,141
  80a4b4:	e1cf883a 	add	r7,fp,r7
  80a4b8:	00000106 	br	80a4c0 <___vfprintf_internal_r+0x2040>
  80a4bc:	28800003 	ldbu	r2,0(r5)
  80a4c0:	20800005 	stb	r2,0(r4)
  80a4c4:	21000044 	addi	r4,r4,1
  80a4c8:	29400044 	addi	r5,r5,1
  80a4cc:	393ffb1e 	bne	r7,r4,80a4bc <__alt_mem_onchip_mem+0xff8024bc>
  80a4d0:	d8802304 	addi	r2,sp,140
  80a4d4:	14c5c83a 	sub	r2,r2,r19
  80a4d8:	d8c02344 	addi	r3,sp,141
  80a4dc:	1885883a 	add	r2,r3,r2
  80a4e0:	003f7006 	br	80a2a4 <__alt_mem_onchip_mem+0xff8022a4>
  80a4e4:	0005883a 	mov	r2,zero
  80a4e8:	003f0f06 	br	80a128 <__alt_mem_onchip_mem+0xff802128>
  80a4ec:	d8c03217 	ldw	r3,200(sp)
  80a4f0:	18c00044 	addi	r3,r3,1
  80a4f4:	d8c02e15 	stw	r3,184(sp)
  80a4f8:	1805883a 	mov	r2,r3
  80a4fc:	183fb20e 	bge	r3,zero,80a3c8 <__alt_mem_onchip_mem+0xff8023c8>
  80a500:	0005883a 	mov	r2,zero
  80a504:	003fb006 	br	80a3c8 <__alt_mem_onchip_mem+0xff8023c8>
  80a508:	d9003617 	ldw	r4,216(sp)
  80a50c:	000d883a 	mov	r6,zero
  80a510:	000f883a 	mov	r7,zero
  80a514:	980b883a 	mov	r5,r19
  80a518:	d8c03c15 	stw	r3,240(sp)
  80a51c:	da003d15 	stw	r8,244(sp)
  80a520:	08123800 	call	812380 <__eqdf2>
  80a524:	d8c03c17 	ldw	r3,240(sp)
  80a528:	da003d17 	ldw	r8,244(sp)
  80a52c:	103f9826 	beq	r2,zero,80a390 <__alt_mem_onchip_mem+0xff802390>
  80a530:	00800044 	movi	r2,1
  80a534:	10c7c83a 	sub	r3,r2,r3
  80a538:	d8c02615 	stw	r3,152(sp)
  80a53c:	003f9506 	br	80a394 <__alt_mem_onchip_mem+0xff802394>
  80a540:	d9002917 	ldw	r4,164(sp)
  80a544:	d8c03217 	ldw	r3,200(sp)
  80a548:	20800044 	addi	r2,r4,1
  80a54c:	1885883a 	add	r2,r3,r2
  80a550:	d8802e15 	stw	r2,184(sp)
  80a554:	103dbf0e 	bge	r2,zero,809c54 <__alt_mem_onchip_mem+0xff801c54>
  80a558:	0005883a 	mov	r2,zero
  80a55c:	003dbd06 	br	809c54 <__alt_mem_onchip_mem+0xff801c54>
  80a560:	2000211e 	bne	r4,zero,80a5e8 <___vfprintf_internal_r+0x2168>
  80a564:	9480004c 	andi	r18,r18,1
  80a568:	90001f1e 	bne	r18,zero,80a5e8 <___vfprintf_internal_r+0x2168>
  80a56c:	00800044 	movi	r2,1
  80a570:	d8802e15 	stw	r2,184(sp)
  80a574:	003db706 	br	809c54 <__alt_mem_onchip_mem+0xff801c54>
  80a578:	00800b44 	movi	r2,45
  80a57c:	05adc83a 	sub	r22,zero,r22
  80a580:	d8802305 	stb	r2,140(sp)
  80a584:	003f3f06 	br	80a284 <__alt_mem_onchip_mem+0xff802284>
  80a588:	0005883a 	mov	r2,zero
  80a58c:	003f5206 	br	80a2d8 <__alt_mem_onchip_mem+0xff8022d8>
  80a590:	90a4703a 	and	r18,r18,r2
  80a594:	903f4e26 	beq	r18,zero,80a2d0 <__alt_mem_onchip_mem+0xff8022d0>
  80a598:	003f4a06 	br	80a2c4 <__alt_mem_onchip_mem+0xff8022c4>
  80a59c:	00800084 	movi	r2,2
  80a5a0:	10c5c83a 	sub	r2,r2,r3
  80a5a4:	003f8406 	br	80a3b8 <__alt_mem_onchip_mem+0xff8023b8>
  80a5a8:	d8802d17 	ldw	r2,180(sp)
  80a5ac:	d9002d17 	ldw	r4,180(sp)
  80a5b0:	ac400043 	ldbu	r17,1(r21)
  80a5b4:	10800017 	ldw	r2,0(r2)
  80a5b8:	582b883a 	mov	r21,r11
  80a5bc:	d8802915 	stw	r2,164(sp)
  80a5c0:	20800104 	addi	r2,r4,4
  80a5c4:	d9002917 	ldw	r4,164(sp)
  80a5c8:	d8802d15 	stw	r2,180(sp)
  80a5cc:	203e7a0e 	bge	r4,zero,809fb8 <__alt_mem_onchip_mem+0xff801fb8>
  80a5d0:	8c403fcc 	andi	r17,r17,255
  80a5d4:	00bfffc4 	movi	r2,-1
  80a5d8:	8c40201c 	xori	r17,r17,128
  80a5dc:	d8802915 	stw	r2,164(sp)
  80a5e0:	8c7fe004 	addi	r17,r17,-128
  80a5e4:	00380706 	br	808604 <__alt_mem_onchip_mem+0xff800604>
  80a5e8:	d8c02917 	ldw	r3,164(sp)
  80a5ec:	18c00084 	addi	r3,r3,2
  80a5f0:	d8c02e15 	stw	r3,184(sp)
  80a5f4:	1805883a 	mov	r2,r3
  80a5f8:	183d960e 	bge	r3,zero,809c54 <__alt_mem_onchip_mem+0xff801c54>
  80a5fc:	003fd606 	br	80a558 <__alt_mem_onchip_mem+0xff802558>
  80a600:	0005883a 	mov	r2,zero
  80a604:	003f8e06 	br	80a440 <__alt_mem_onchip_mem+0xff802440>
  80a608:	9080004c 	andi	r2,r18,1
  80a60c:	103f811e 	bne	r2,zero,80a414 <__alt_mem_onchip_mem+0xff802414>
  80a610:	d8802117 	ldw	r2,132(sp)
  80a614:	1405c83a 	sub	r2,r2,r16
  80a618:	d8803315 	stw	r2,204(sp)
  80a61c:	b47ef326 	beq	r22,r17,80a1ec <__alt_mem_onchip_mem+0xff8021ec>
  80a620:	dd802617 	ldw	r22,152(sp)
  80a624:	003f1106 	br	80a26c <__alt_mem_onchip_mem+0xff80226c>
  80a628:	d9c02785 	stb	r7,158(sp)
  80a62c:	00390406 	br	808a40 <__alt_mem_onchip_mem+0xff800a40>
  80a630:	d9c02785 	stb	r7,158(sp)
  80a634:	0038d306 	br	808984 <__alt_mem_onchip_mem+0xff800984>
  80a638:	d9c02785 	stb	r7,158(sp)
  80a63c:	003a6106 	br	808fc4 <__alt_mem_onchip_mem+0xff800fc4>
  80a640:	d9c02785 	stb	r7,158(sp)
  80a644:	003af806 	br	809228 <__alt_mem_onchip_mem+0xff801228>
  80a648:	0005883a 	mov	r2,zero
  80a64c:	003d7e06 	br	809c48 <__alt_mem_onchip_mem+0xff801c48>
  80a650:	d8802344 	addi	r2,sp,141
  80a654:	003f1306 	br	80a2a4 <__alt_mem_onchip_mem+0xff8022a4>
  80a658:	d9c02785 	stb	r7,158(sp)
  80a65c:	00392306 	br	808aec <__alt_mem_onchip_mem+0xff800aec>
  80a660:	d9c02785 	stb	r7,158(sp)
  80a664:	003aa906 	br	80910c <__alt_mem_onchip_mem+0xff80110c>
  80a668:	d9c02785 	stb	r7,158(sp)
  80a66c:	003a3d06 	br	808f64 <__alt_mem_onchip_mem+0xff800f64>
  80a670:	d9c02785 	stb	r7,158(sp)
  80a674:	003aca06 	br	8091a0 <__alt_mem_onchip_mem+0xff8011a0>

0080a678 <__vfprintf_internal>:
  80a678:	008020b4 	movhi	r2,130
  80a67c:	10a48504 	addi	r2,r2,-28140
  80a680:	300f883a 	mov	r7,r6
  80a684:	280d883a 	mov	r6,r5
  80a688:	200b883a 	mov	r5,r4
  80a68c:	11000017 	ldw	r4,0(r2)
  80a690:	08084801 	jmpi	808480 <___vfprintf_internal_r>

0080a694 <__sbprintf>:
  80a694:	2880030b 	ldhu	r2,12(r5)
  80a698:	2ac01917 	ldw	r11,100(r5)
  80a69c:	2a80038b 	ldhu	r10,14(r5)
  80a6a0:	2a400717 	ldw	r9,28(r5)
  80a6a4:	2a000917 	ldw	r8,36(r5)
  80a6a8:	defee204 	addi	sp,sp,-1144
  80a6ac:	00c10004 	movi	r3,1024
  80a6b0:	dc011a15 	stw	r16,1128(sp)
  80a6b4:	10bfff4c 	andi	r2,r2,65533
  80a6b8:	2821883a 	mov	r16,r5
  80a6bc:	d8cb883a 	add	r5,sp,r3
  80a6c0:	dc811c15 	stw	r18,1136(sp)
  80a6c4:	dc411b15 	stw	r17,1132(sp)
  80a6c8:	dfc11d15 	stw	ra,1140(sp)
  80a6cc:	2025883a 	mov	r18,r4
  80a6d0:	d881030d 	sth	r2,1036(sp)
  80a6d4:	dac11915 	stw	r11,1124(sp)
  80a6d8:	da81038d 	sth	r10,1038(sp)
  80a6dc:	da410715 	stw	r9,1052(sp)
  80a6e0:	da010915 	stw	r8,1060(sp)
  80a6e4:	dec10015 	stw	sp,1024(sp)
  80a6e8:	dec10415 	stw	sp,1040(sp)
  80a6ec:	d8c10215 	stw	r3,1032(sp)
  80a6f0:	d8c10515 	stw	r3,1044(sp)
  80a6f4:	d8010615 	stw	zero,1048(sp)
  80a6f8:	08084800 	call	808480 <___vfprintf_internal_r>
  80a6fc:	1023883a 	mov	r17,r2
  80a700:	10000416 	blt	r2,zero,80a714 <__sbprintf+0x80>
  80a704:	d9410004 	addi	r5,sp,1024
  80a708:	9009883a 	mov	r4,r18
  80a70c:	080c3fc0 	call	80c3fc <_fflush_r>
  80a710:	10000d1e 	bne	r2,zero,80a748 <__sbprintf+0xb4>
  80a714:	d881030b 	ldhu	r2,1036(sp)
  80a718:	1080100c 	andi	r2,r2,64
  80a71c:	10000326 	beq	r2,zero,80a72c <__sbprintf+0x98>
  80a720:	8080030b 	ldhu	r2,12(r16)
  80a724:	10801014 	ori	r2,r2,64
  80a728:	8080030d 	sth	r2,12(r16)
  80a72c:	8805883a 	mov	r2,r17
  80a730:	dfc11d17 	ldw	ra,1140(sp)
  80a734:	dc811c17 	ldw	r18,1136(sp)
  80a738:	dc411b17 	ldw	r17,1132(sp)
  80a73c:	dc011a17 	ldw	r16,1128(sp)
  80a740:	dec11e04 	addi	sp,sp,1144
  80a744:	f800283a 	ret
  80a748:	047fffc4 	movi	r17,-1
  80a74c:	003ff106 	br	80a714 <__alt_mem_onchip_mem+0xff802714>

0080a750 <_write_r>:
  80a750:	defffd04 	addi	sp,sp,-12
  80a754:	2805883a 	mov	r2,r5
  80a758:	dc000015 	stw	r16,0(sp)
  80a75c:	040020b4 	movhi	r16,130
  80a760:	dc400115 	stw	r17,4(sp)
  80a764:	300b883a 	mov	r5,r6
  80a768:	842bd504 	addi	r16,r16,-20652
  80a76c:	2023883a 	mov	r17,r4
  80a770:	380d883a 	mov	r6,r7
  80a774:	1009883a 	mov	r4,r2
  80a778:	dfc00215 	stw	ra,8(sp)
  80a77c:	80000015 	stw	zero,0(r16)
  80a780:	0813a900 	call	813a90 <write>
  80a784:	00ffffc4 	movi	r3,-1
  80a788:	10c00526 	beq	r2,r3,80a7a0 <_write_r+0x50>
  80a78c:	dfc00217 	ldw	ra,8(sp)
  80a790:	dc400117 	ldw	r17,4(sp)
  80a794:	dc000017 	ldw	r16,0(sp)
  80a798:	dec00304 	addi	sp,sp,12
  80a79c:	f800283a 	ret
  80a7a0:	80c00017 	ldw	r3,0(r16)
  80a7a4:	183ff926 	beq	r3,zero,80a78c <__alt_mem_onchip_mem+0xff80278c>
  80a7a8:	88c00015 	stw	r3,0(r17)
  80a7ac:	003ff706 	br	80a78c <__alt_mem_onchip_mem+0xff80278c>

0080a7b0 <__swsetup_r>:
  80a7b0:	008020b4 	movhi	r2,130
  80a7b4:	defffd04 	addi	sp,sp,-12
  80a7b8:	10a48504 	addi	r2,r2,-28140
  80a7bc:	dc400115 	stw	r17,4(sp)
  80a7c0:	2023883a 	mov	r17,r4
  80a7c4:	11000017 	ldw	r4,0(r2)
  80a7c8:	dc000015 	stw	r16,0(sp)
  80a7cc:	dfc00215 	stw	ra,8(sp)
  80a7d0:	2821883a 	mov	r16,r5
  80a7d4:	20000226 	beq	r4,zero,80a7e0 <__swsetup_r+0x30>
  80a7d8:	20800e17 	ldw	r2,56(r4)
  80a7dc:	10003126 	beq	r2,zero,80a8a4 <__swsetup_r+0xf4>
  80a7e0:	8080030b 	ldhu	r2,12(r16)
  80a7e4:	10c0020c 	andi	r3,r2,8
  80a7e8:	1009883a 	mov	r4,r2
  80a7ec:	18000f26 	beq	r3,zero,80a82c <__swsetup_r+0x7c>
  80a7f0:	80c00417 	ldw	r3,16(r16)
  80a7f4:	18001526 	beq	r3,zero,80a84c <__swsetup_r+0x9c>
  80a7f8:	1100004c 	andi	r4,r2,1
  80a7fc:	20001c1e 	bne	r4,zero,80a870 <__swsetup_r+0xc0>
  80a800:	1080008c 	andi	r2,r2,2
  80a804:	1000291e 	bne	r2,zero,80a8ac <__swsetup_r+0xfc>
  80a808:	80800517 	ldw	r2,20(r16)
  80a80c:	80800215 	stw	r2,8(r16)
  80a810:	18001c26 	beq	r3,zero,80a884 <__swsetup_r+0xd4>
  80a814:	0005883a 	mov	r2,zero
  80a818:	dfc00217 	ldw	ra,8(sp)
  80a81c:	dc400117 	ldw	r17,4(sp)
  80a820:	dc000017 	ldw	r16,0(sp)
  80a824:	dec00304 	addi	sp,sp,12
  80a828:	f800283a 	ret
  80a82c:	2080040c 	andi	r2,r4,16
  80a830:	10002e26 	beq	r2,zero,80a8ec <__swsetup_r+0x13c>
  80a834:	2080010c 	andi	r2,r4,4
  80a838:	10001e1e 	bne	r2,zero,80a8b4 <__swsetup_r+0x104>
  80a83c:	80c00417 	ldw	r3,16(r16)
  80a840:	20800214 	ori	r2,r4,8
  80a844:	8080030d 	sth	r2,12(r16)
  80a848:	183feb1e 	bne	r3,zero,80a7f8 <__alt_mem_onchip_mem+0xff8027f8>
  80a84c:	1100a00c 	andi	r4,r2,640
  80a850:	01408004 	movi	r5,512
  80a854:	217fe826 	beq	r4,r5,80a7f8 <__alt_mem_onchip_mem+0xff8027f8>
  80a858:	800b883a 	mov	r5,r16
  80a85c:	8809883a 	mov	r4,r17
  80a860:	08074240 	call	807424 <__smakebuf_r>
  80a864:	8080030b 	ldhu	r2,12(r16)
  80a868:	80c00417 	ldw	r3,16(r16)
  80a86c:	003fe206 	br	80a7f8 <__alt_mem_onchip_mem+0xff8027f8>
  80a870:	80800517 	ldw	r2,20(r16)
  80a874:	80000215 	stw	zero,8(r16)
  80a878:	0085c83a 	sub	r2,zero,r2
  80a87c:	80800615 	stw	r2,24(r16)
  80a880:	183fe41e 	bne	r3,zero,80a814 <__alt_mem_onchip_mem+0xff802814>
  80a884:	80c0030b 	ldhu	r3,12(r16)
  80a888:	0005883a 	mov	r2,zero
  80a88c:	1900200c 	andi	r4,r3,128
  80a890:	203fe126 	beq	r4,zero,80a818 <__alt_mem_onchip_mem+0xff802818>
  80a894:	18c01014 	ori	r3,r3,64
  80a898:	80c0030d 	sth	r3,12(r16)
  80a89c:	00bfffc4 	movi	r2,-1
  80a8a0:	003fdd06 	br	80a818 <__alt_mem_onchip_mem+0xff802818>
  80a8a4:	080c7d80 	call	80c7d8 <__sinit>
  80a8a8:	003fcd06 	br	80a7e0 <__alt_mem_onchip_mem+0xff8027e0>
  80a8ac:	0005883a 	mov	r2,zero
  80a8b0:	003fd606 	br	80a80c <__alt_mem_onchip_mem+0xff80280c>
  80a8b4:	81400c17 	ldw	r5,48(r16)
  80a8b8:	28000626 	beq	r5,zero,80a8d4 <__swsetup_r+0x124>
  80a8bc:	80801004 	addi	r2,r16,64
  80a8c0:	28800326 	beq	r5,r2,80a8d0 <__swsetup_r+0x120>
  80a8c4:	8809883a 	mov	r4,r17
  80a8c8:	080c9f80 	call	80c9f8 <_free_r>
  80a8cc:	8100030b 	ldhu	r4,12(r16)
  80a8d0:	80000c15 	stw	zero,48(r16)
  80a8d4:	80c00417 	ldw	r3,16(r16)
  80a8d8:	00bff6c4 	movi	r2,-37
  80a8dc:	1108703a 	and	r4,r2,r4
  80a8e0:	80000115 	stw	zero,4(r16)
  80a8e4:	80c00015 	stw	r3,0(r16)
  80a8e8:	003fd506 	br	80a840 <__alt_mem_onchip_mem+0xff802840>
  80a8ec:	00800244 	movi	r2,9
  80a8f0:	88800015 	stw	r2,0(r17)
  80a8f4:	20801014 	ori	r2,r4,64
  80a8f8:	8080030d 	sth	r2,12(r16)
  80a8fc:	00bfffc4 	movi	r2,-1
  80a900:	003fc506 	br	80a818 <__alt_mem_onchip_mem+0xff802818>

0080a904 <_close_r>:
  80a904:	defffd04 	addi	sp,sp,-12
  80a908:	dc000015 	stw	r16,0(sp)
  80a90c:	040020b4 	movhi	r16,130
  80a910:	dc400115 	stw	r17,4(sp)
  80a914:	842bd504 	addi	r16,r16,-20652
  80a918:	2023883a 	mov	r17,r4
  80a91c:	2809883a 	mov	r4,r5
  80a920:	dfc00215 	stw	ra,8(sp)
  80a924:	80000015 	stw	zero,0(r16)
  80a928:	0812d080 	call	812d08 <close>
  80a92c:	00ffffc4 	movi	r3,-1
  80a930:	10c00526 	beq	r2,r3,80a948 <_close_r+0x44>
  80a934:	dfc00217 	ldw	ra,8(sp)
  80a938:	dc400117 	ldw	r17,4(sp)
  80a93c:	dc000017 	ldw	r16,0(sp)
  80a940:	dec00304 	addi	sp,sp,12
  80a944:	f800283a 	ret
  80a948:	80c00017 	ldw	r3,0(r16)
  80a94c:	183ff926 	beq	r3,zero,80a934 <__alt_mem_onchip_mem+0xff802934>
  80a950:	88c00015 	stw	r3,0(r17)
  80a954:	003ff706 	br	80a934 <__alt_mem_onchip_mem+0xff802934>

0080a958 <quorem>:
  80a958:	defff704 	addi	sp,sp,-36
  80a95c:	dc800215 	stw	r18,8(sp)
  80a960:	20800417 	ldw	r2,16(r4)
  80a964:	2c800417 	ldw	r18,16(r5)
  80a968:	dfc00815 	stw	ra,32(sp)
  80a96c:	ddc00715 	stw	r23,28(sp)
  80a970:	dd800615 	stw	r22,24(sp)
  80a974:	dd400515 	stw	r21,20(sp)
  80a978:	dd000415 	stw	r20,16(sp)
  80a97c:	dcc00315 	stw	r19,12(sp)
  80a980:	dc400115 	stw	r17,4(sp)
  80a984:	dc000015 	stw	r16,0(sp)
  80a988:	14807116 	blt	r2,r18,80ab50 <quorem+0x1f8>
  80a98c:	94bfffc4 	addi	r18,r18,-1
  80a990:	94ad883a 	add	r22,r18,r18
  80a994:	b5ad883a 	add	r22,r22,r22
  80a998:	2c400504 	addi	r17,r5,20
  80a99c:	8da9883a 	add	r20,r17,r22
  80a9a0:	25400504 	addi	r21,r4,20
  80a9a4:	282f883a 	mov	r23,r5
  80a9a8:	adad883a 	add	r22,r21,r22
  80a9ac:	a1400017 	ldw	r5,0(r20)
  80a9b0:	2021883a 	mov	r16,r4
  80a9b4:	b1000017 	ldw	r4,0(r22)
  80a9b8:	29400044 	addi	r5,r5,1
  80a9bc:	08119dc0 	call	8119dc <__udivsi3>
  80a9c0:	1027883a 	mov	r19,r2
  80a9c4:	10002c26 	beq	r2,zero,80aa78 <quorem+0x120>
  80a9c8:	a813883a 	mov	r9,r21
  80a9cc:	880b883a 	mov	r5,r17
  80a9d0:	0009883a 	mov	r4,zero
  80a9d4:	000d883a 	mov	r6,zero
  80a9d8:	2a000017 	ldw	r8,0(r5)
  80a9dc:	49c00017 	ldw	r7,0(r9)
  80a9e0:	29400104 	addi	r5,r5,4
  80a9e4:	40bfffcc 	andi	r2,r8,65535
  80a9e8:	14c5383a 	mul	r2,r2,r19
  80a9ec:	4010d43a 	srli	r8,r8,16
  80a9f0:	38ffffcc 	andi	r3,r7,65535
  80a9f4:	1105883a 	add	r2,r2,r4
  80a9f8:	1008d43a 	srli	r4,r2,16
  80a9fc:	44d1383a 	mul	r8,r8,r19
  80aa00:	198d883a 	add	r6,r3,r6
  80aa04:	10ffffcc 	andi	r3,r2,65535
  80aa08:	30c7c83a 	sub	r3,r6,r3
  80aa0c:	380ed43a 	srli	r7,r7,16
  80aa10:	4105883a 	add	r2,r8,r4
  80aa14:	180dd43a 	srai	r6,r3,16
  80aa18:	113fffcc 	andi	r4,r2,65535
  80aa1c:	390fc83a 	sub	r7,r7,r4
  80aa20:	398d883a 	add	r6,r7,r6
  80aa24:	300e943a 	slli	r7,r6,16
  80aa28:	18ffffcc 	andi	r3,r3,65535
  80aa2c:	1008d43a 	srli	r4,r2,16
  80aa30:	38ceb03a 	or	r7,r7,r3
  80aa34:	49c00015 	stw	r7,0(r9)
  80aa38:	300dd43a 	srai	r6,r6,16
  80aa3c:	4a400104 	addi	r9,r9,4
  80aa40:	a17fe52e 	bgeu	r20,r5,80a9d8 <__alt_mem_onchip_mem+0xff8029d8>
  80aa44:	b0800017 	ldw	r2,0(r22)
  80aa48:	10000b1e 	bne	r2,zero,80aa78 <quorem+0x120>
  80aa4c:	b0bfff04 	addi	r2,r22,-4
  80aa50:	a880082e 	bgeu	r21,r2,80aa74 <quorem+0x11c>
  80aa54:	b0ffff17 	ldw	r3,-4(r22)
  80aa58:	18000326 	beq	r3,zero,80aa68 <quorem+0x110>
  80aa5c:	00000506 	br	80aa74 <quorem+0x11c>
  80aa60:	10c00017 	ldw	r3,0(r2)
  80aa64:	1800031e 	bne	r3,zero,80aa74 <quorem+0x11c>
  80aa68:	10bfff04 	addi	r2,r2,-4
  80aa6c:	94bfffc4 	addi	r18,r18,-1
  80aa70:	a8bffb36 	bltu	r21,r2,80aa60 <__alt_mem_onchip_mem+0xff802a60>
  80aa74:	84800415 	stw	r18,16(r16)
  80aa78:	b80b883a 	mov	r5,r23
  80aa7c:	8009883a 	mov	r4,r16
  80aa80:	080e12c0 	call	80e12c <__mcmp>
  80aa84:	10002616 	blt	r2,zero,80ab20 <quorem+0x1c8>
  80aa88:	9cc00044 	addi	r19,r19,1
  80aa8c:	a805883a 	mov	r2,r21
  80aa90:	000b883a 	mov	r5,zero
  80aa94:	11000017 	ldw	r4,0(r2)
  80aa98:	89800017 	ldw	r6,0(r17)
  80aa9c:	10800104 	addi	r2,r2,4
  80aaa0:	20ffffcc 	andi	r3,r4,65535
  80aaa4:	194b883a 	add	r5,r3,r5
  80aaa8:	30ffffcc 	andi	r3,r6,65535
  80aaac:	28c7c83a 	sub	r3,r5,r3
  80aab0:	300cd43a 	srli	r6,r6,16
  80aab4:	2008d43a 	srli	r4,r4,16
  80aab8:	180bd43a 	srai	r5,r3,16
  80aabc:	18ffffcc 	andi	r3,r3,65535
  80aac0:	2189c83a 	sub	r4,r4,r6
  80aac4:	2149883a 	add	r4,r4,r5
  80aac8:	200c943a 	slli	r6,r4,16
  80aacc:	8c400104 	addi	r17,r17,4
  80aad0:	200bd43a 	srai	r5,r4,16
  80aad4:	30c6b03a 	or	r3,r6,r3
  80aad8:	10ffff15 	stw	r3,-4(r2)
  80aadc:	a47fed2e 	bgeu	r20,r17,80aa94 <__alt_mem_onchip_mem+0xff802a94>
  80aae0:	9485883a 	add	r2,r18,r18
  80aae4:	1085883a 	add	r2,r2,r2
  80aae8:	a887883a 	add	r3,r21,r2
  80aaec:	18800017 	ldw	r2,0(r3)
  80aaf0:	10000b1e 	bne	r2,zero,80ab20 <quorem+0x1c8>
  80aaf4:	18bfff04 	addi	r2,r3,-4
  80aaf8:	a880082e 	bgeu	r21,r2,80ab1c <quorem+0x1c4>
  80aafc:	18ffff17 	ldw	r3,-4(r3)
  80ab00:	18000326 	beq	r3,zero,80ab10 <quorem+0x1b8>
  80ab04:	00000506 	br	80ab1c <quorem+0x1c4>
  80ab08:	10c00017 	ldw	r3,0(r2)
  80ab0c:	1800031e 	bne	r3,zero,80ab1c <quorem+0x1c4>
  80ab10:	10bfff04 	addi	r2,r2,-4
  80ab14:	94bfffc4 	addi	r18,r18,-1
  80ab18:	a8bffb36 	bltu	r21,r2,80ab08 <__alt_mem_onchip_mem+0xff802b08>
  80ab1c:	84800415 	stw	r18,16(r16)
  80ab20:	9805883a 	mov	r2,r19
  80ab24:	dfc00817 	ldw	ra,32(sp)
  80ab28:	ddc00717 	ldw	r23,28(sp)
  80ab2c:	dd800617 	ldw	r22,24(sp)
  80ab30:	dd400517 	ldw	r21,20(sp)
  80ab34:	dd000417 	ldw	r20,16(sp)
  80ab38:	dcc00317 	ldw	r19,12(sp)
  80ab3c:	dc800217 	ldw	r18,8(sp)
  80ab40:	dc400117 	ldw	r17,4(sp)
  80ab44:	dc000017 	ldw	r16,0(sp)
  80ab48:	dec00904 	addi	sp,sp,36
  80ab4c:	f800283a 	ret
  80ab50:	0005883a 	mov	r2,zero
  80ab54:	003ff306 	br	80ab24 <__alt_mem_onchip_mem+0xff802b24>

0080ab58 <_dtoa_r>:
  80ab58:	20801017 	ldw	r2,64(r4)
  80ab5c:	deffde04 	addi	sp,sp,-136
  80ab60:	df002015 	stw	fp,128(sp)
  80ab64:	dcc01b15 	stw	r19,108(sp)
  80ab68:	dc801a15 	stw	r18,104(sp)
  80ab6c:	dc401915 	stw	r17,100(sp)
  80ab70:	dc001815 	stw	r16,96(sp)
  80ab74:	dfc02115 	stw	ra,132(sp)
  80ab78:	ddc01f15 	stw	r23,124(sp)
  80ab7c:	dd801e15 	stw	r22,120(sp)
  80ab80:	dd401d15 	stw	r21,116(sp)
  80ab84:	dd001c15 	stw	r20,112(sp)
  80ab88:	d9c00315 	stw	r7,12(sp)
  80ab8c:	2039883a 	mov	fp,r4
  80ab90:	3023883a 	mov	r17,r6
  80ab94:	2825883a 	mov	r18,r5
  80ab98:	dc002417 	ldw	r16,144(sp)
  80ab9c:	3027883a 	mov	r19,r6
  80aba0:	10000826 	beq	r2,zero,80abc4 <_dtoa_r+0x6c>
  80aba4:	21801117 	ldw	r6,68(r4)
  80aba8:	00c00044 	movi	r3,1
  80abac:	100b883a 	mov	r5,r2
  80abb0:	1986983a 	sll	r3,r3,r6
  80abb4:	11800115 	stw	r6,4(r2)
  80abb8:	10c00215 	stw	r3,8(r2)
  80abbc:	080d90c0 	call	80d90c <_Bfree>
  80abc0:	e0001015 	stw	zero,64(fp)
  80abc4:	88002e16 	blt	r17,zero,80ac80 <_dtoa_r+0x128>
  80abc8:	80000015 	stw	zero,0(r16)
  80abcc:	889ffc2c 	andhi	r2,r17,32752
  80abd0:	00dffc34 	movhi	r3,32752
  80abd4:	10c01c26 	beq	r2,r3,80ac48 <_dtoa_r+0xf0>
  80abd8:	000d883a 	mov	r6,zero
  80abdc:	000f883a 	mov	r7,zero
  80abe0:	9009883a 	mov	r4,r18
  80abe4:	980b883a 	mov	r5,r19
  80abe8:	08123800 	call	812380 <__eqdf2>
  80abec:	10002b1e 	bne	r2,zero,80ac9c <_dtoa_r+0x144>
  80abf0:	d9c02317 	ldw	r7,140(sp)
  80abf4:	00800044 	movi	r2,1
  80abf8:	38800015 	stw	r2,0(r7)
  80abfc:	d8802517 	ldw	r2,148(sp)
  80ac00:	10019e26 	beq	r2,zero,80b27c <_dtoa_r+0x724>
  80ac04:	d8c02517 	ldw	r3,148(sp)
  80ac08:	00802074 	movhi	r2,129
  80ac0c:	109c4e44 	addi	r2,r2,28985
  80ac10:	18800015 	stw	r2,0(r3)
  80ac14:	10bfffc4 	addi	r2,r2,-1
  80ac18:	dfc02117 	ldw	ra,132(sp)
  80ac1c:	df002017 	ldw	fp,128(sp)
  80ac20:	ddc01f17 	ldw	r23,124(sp)
  80ac24:	dd801e17 	ldw	r22,120(sp)
  80ac28:	dd401d17 	ldw	r21,116(sp)
  80ac2c:	dd001c17 	ldw	r20,112(sp)
  80ac30:	dcc01b17 	ldw	r19,108(sp)
  80ac34:	dc801a17 	ldw	r18,104(sp)
  80ac38:	dc401917 	ldw	r17,100(sp)
  80ac3c:	dc001817 	ldw	r16,96(sp)
  80ac40:	dec02204 	addi	sp,sp,136
  80ac44:	f800283a 	ret
  80ac48:	d8c02317 	ldw	r3,140(sp)
  80ac4c:	0089c3c4 	movi	r2,9999
  80ac50:	18800015 	stw	r2,0(r3)
  80ac54:	90017726 	beq	r18,zero,80b234 <_dtoa_r+0x6dc>
  80ac58:	00802074 	movhi	r2,129
  80ac5c:	109c5a04 	addi	r2,r2,29032
  80ac60:	d9002517 	ldw	r4,148(sp)
  80ac64:	203fec26 	beq	r4,zero,80ac18 <__alt_mem_onchip_mem+0xff802c18>
  80ac68:	10c000c7 	ldb	r3,3(r2)
  80ac6c:	1801781e 	bne	r3,zero,80b250 <_dtoa_r+0x6f8>
  80ac70:	10c000c4 	addi	r3,r2,3
  80ac74:	d9802517 	ldw	r6,148(sp)
  80ac78:	30c00015 	stw	r3,0(r6)
  80ac7c:	003fe606 	br	80ac18 <__alt_mem_onchip_mem+0xff802c18>
  80ac80:	04e00034 	movhi	r19,32768
  80ac84:	9cffffc4 	addi	r19,r19,-1
  80ac88:	00800044 	movi	r2,1
  80ac8c:	8ce6703a 	and	r19,r17,r19
  80ac90:	80800015 	stw	r2,0(r16)
  80ac94:	9823883a 	mov	r17,r19
  80ac98:	003fcc06 	br	80abcc <__alt_mem_onchip_mem+0xff802bcc>
  80ac9c:	d8800204 	addi	r2,sp,8
  80aca0:	d8800015 	stw	r2,0(sp)
  80aca4:	d9c00104 	addi	r7,sp,4
  80aca8:	900b883a 	mov	r5,r18
  80acac:	980d883a 	mov	r6,r19
  80acb0:	e009883a 	mov	r4,fp
  80acb4:	8820d53a 	srli	r16,r17,20
  80acb8:	080e4f80 	call	80e4f8 <__d2b>
  80acbc:	d8800915 	stw	r2,36(sp)
  80acc0:	8001651e 	bne	r16,zero,80b258 <_dtoa_r+0x700>
  80acc4:	dd800217 	ldw	r22,8(sp)
  80acc8:	dc000117 	ldw	r16,4(sp)
  80accc:	00800804 	movi	r2,32
  80acd0:	b421883a 	add	r16,r22,r16
  80acd4:	80c10c84 	addi	r3,r16,1074
  80acd8:	10c2d10e 	bge	r2,r3,80b820 <_dtoa_r+0xcc8>
  80acdc:	00801004 	movi	r2,64
  80ace0:	81010484 	addi	r4,r16,1042
  80ace4:	10c7c83a 	sub	r3,r2,r3
  80ace8:	9108d83a 	srl	r4,r18,r4
  80acec:	88e2983a 	sll	r17,r17,r3
  80acf0:	2448b03a 	or	r4,r4,r17
  80acf4:	0806be40 	call	806be4 <__floatunsidf>
  80acf8:	017f8434 	movhi	r5,65040
  80acfc:	01800044 	movi	r6,1
  80ad00:	1009883a 	mov	r4,r2
  80ad04:	194b883a 	add	r5,r3,r5
  80ad08:	843fffc4 	addi	r16,r16,-1
  80ad0c:	d9801115 	stw	r6,68(sp)
  80ad10:	000d883a 	mov	r6,zero
  80ad14:	01cffe34 	movhi	r7,16376
  80ad18:	080620c0 	call	80620c <__subdf3>
  80ad1c:	0198dbf4 	movhi	r6,25455
  80ad20:	01cff4f4 	movhi	r7,16339
  80ad24:	3190d844 	addi	r6,r6,17249
  80ad28:	39e1e9c4 	addi	r7,r7,-30809
  80ad2c:	1009883a 	mov	r4,r2
  80ad30:	180b883a 	mov	r5,r3
  80ad34:	08124080 	call	812408 <__muldf3>
  80ad38:	01a2d874 	movhi	r6,35681
  80ad3c:	01cff1f4 	movhi	r7,16327
  80ad40:	31b22cc4 	addi	r6,r6,-14157
  80ad44:	39e28a04 	addi	r7,r7,-30168
  80ad48:	180b883a 	mov	r5,r3
  80ad4c:	1009883a 	mov	r4,r2
  80ad50:	08057900 	call	805790 <__adddf3>
  80ad54:	8009883a 	mov	r4,r16
  80ad58:	1029883a 	mov	r20,r2
  80ad5c:	1823883a 	mov	r17,r3
  80ad60:	0806b080 	call	806b08 <__floatsidf>
  80ad64:	019427f4 	movhi	r6,20639
  80ad68:	01cff4f4 	movhi	r7,16339
  80ad6c:	319e7ec4 	addi	r6,r6,31227
  80ad70:	39d104c4 	addi	r7,r7,17427
  80ad74:	1009883a 	mov	r4,r2
  80ad78:	180b883a 	mov	r5,r3
  80ad7c:	08124080 	call	812408 <__muldf3>
  80ad80:	100d883a 	mov	r6,r2
  80ad84:	180f883a 	mov	r7,r3
  80ad88:	a009883a 	mov	r4,r20
  80ad8c:	880b883a 	mov	r5,r17
  80ad90:	08057900 	call	805790 <__adddf3>
  80ad94:	1009883a 	mov	r4,r2
  80ad98:	180b883a 	mov	r5,r3
  80ad9c:	1029883a 	mov	r20,r2
  80ada0:	1823883a 	mov	r17,r3
  80ada4:	0812b200 	call	812b20 <__fixdfsi>
  80ada8:	000d883a 	mov	r6,zero
  80adac:	000f883a 	mov	r7,zero
  80adb0:	a009883a 	mov	r4,r20
  80adb4:	880b883a 	mov	r5,r17
  80adb8:	d8800515 	stw	r2,20(sp)
  80adbc:	08061180 	call	806118 <__ledf2>
  80adc0:	10028716 	blt	r2,zero,80b7e0 <_dtoa_r+0xc88>
  80adc4:	d8c00517 	ldw	r3,20(sp)
  80adc8:	00800584 	movi	r2,22
  80adcc:	10c27536 	bltu	r2,r3,80b7a4 <_dtoa_r+0xc4c>
  80add0:	180490fa 	slli	r2,r3,3
  80add4:	00c02074 	movhi	r3,129
  80add8:	18dc7504 	addi	r3,r3,29140
  80addc:	1885883a 	add	r2,r3,r2
  80ade0:	11000017 	ldw	r4,0(r2)
  80ade4:	11400117 	ldw	r5,4(r2)
  80ade8:	900d883a 	mov	r6,r18
  80adec:	980f883a 	mov	r7,r19
  80adf0:	080603c0 	call	80603c <__gedf2>
  80adf4:	00828d0e 	bge	zero,r2,80b82c <_dtoa_r+0xcd4>
  80adf8:	d9000517 	ldw	r4,20(sp)
  80adfc:	d8000e15 	stw	zero,56(sp)
  80ae00:	213fffc4 	addi	r4,r4,-1
  80ae04:	d9000515 	stw	r4,20(sp)
  80ae08:	b42dc83a 	sub	r22,r22,r16
  80ae0c:	b5bfffc4 	addi	r22,r22,-1
  80ae10:	b0026f16 	blt	r22,zero,80b7d0 <_dtoa_r+0xc78>
  80ae14:	d8000815 	stw	zero,32(sp)
  80ae18:	d9c00517 	ldw	r7,20(sp)
  80ae1c:	38026416 	blt	r7,zero,80b7b0 <_dtoa_r+0xc58>
  80ae20:	b1ed883a 	add	r22,r22,r7
  80ae24:	d9c00d15 	stw	r7,52(sp)
  80ae28:	d8000a15 	stw	zero,40(sp)
  80ae2c:	d9800317 	ldw	r6,12(sp)
  80ae30:	00800244 	movi	r2,9
  80ae34:	11811436 	bltu	r2,r6,80b288 <_dtoa_r+0x730>
  80ae38:	00800144 	movi	r2,5
  80ae3c:	1184e10e 	bge	r2,r6,80c1c4 <_dtoa_r+0x166c>
  80ae40:	31bfff04 	addi	r6,r6,-4
  80ae44:	d9800315 	stw	r6,12(sp)
  80ae48:	0023883a 	mov	r17,zero
  80ae4c:	d9800317 	ldw	r6,12(sp)
  80ae50:	008000c4 	movi	r2,3
  80ae54:	30836726 	beq	r6,r2,80bbf4 <_dtoa_r+0x109c>
  80ae58:	1183410e 	bge	r2,r6,80bb60 <_dtoa_r+0x1008>
  80ae5c:	d9c00317 	ldw	r7,12(sp)
  80ae60:	00800104 	movi	r2,4
  80ae64:	38827c26 	beq	r7,r2,80b858 <_dtoa_r+0xd00>
  80ae68:	00800144 	movi	r2,5
  80ae6c:	3884c41e 	bne	r7,r2,80c180 <_dtoa_r+0x1628>
  80ae70:	00800044 	movi	r2,1
  80ae74:	d8800b15 	stw	r2,44(sp)
  80ae78:	d8c00517 	ldw	r3,20(sp)
  80ae7c:	d9002217 	ldw	r4,136(sp)
  80ae80:	1907883a 	add	r3,r3,r4
  80ae84:	19800044 	addi	r6,r3,1
  80ae88:	d8c00c15 	stw	r3,48(sp)
  80ae8c:	d9800615 	stw	r6,24(sp)
  80ae90:	0183a40e 	bge	zero,r6,80bd24 <_dtoa_r+0x11cc>
  80ae94:	d9800617 	ldw	r6,24(sp)
  80ae98:	3021883a 	mov	r16,r6
  80ae9c:	e0001115 	stw	zero,68(fp)
  80aea0:	008005c4 	movi	r2,23
  80aea4:	1184c92e 	bgeu	r2,r6,80c1cc <_dtoa_r+0x1674>
  80aea8:	00c00044 	movi	r3,1
  80aeac:	00800104 	movi	r2,4
  80aeb0:	1085883a 	add	r2,r2,r2
  80aeb4:	11000504 	addi	r4,r2,20
  80aeb8:	180b883a 	mov	r5,r3
  80aebc:	18c00044 	addi	r3,r3,1
  80aec0:	313ffb2e 	bgeu	r6,r4,80aeb0 <__alt_mem_onchip_mem+0xff802eb0>
  80aec4:	e1401115 	stw	r5,68(fp)
  80aec8:	e009883a 	mov	r4,fp
  80aecc:	080d8640 	call	80d864 <_Balloc>
  80aed0:	d8800715 	stw	r2,28(sp)
  80aed4:	e0801015 	stw	r2,64(fp)
  80aed8:	00800384 	movi	r2,14
  80aedc:	1400f736 	bltu	r2,r16,80b2bc <_dtoa_r+0x764>
  80aee0:	8800f626 	beq	r17,zero,80b2bc <_dtoa_r+0x764>
  80aee4:	d9c00517 	ldw	r7,20(sp)
  80aee8:	01c39a0e 	bge	zero,r7,80bd54 <_dtoa_r+0x11fc>
  80aeec:	388003cc 	andi	r2,r7,15
  80aef0:	100490fa 	slli	r2,r2,3
  80aef4:	382bd13a 	srai	r21,r7,4
  80aef8:	00c02074 	movhi	r3,129
  80aefc:	18dc7504 	addi	r3,r3,29140
  80af00:	1885883a 	add	r2,r3,r2
  80af04:	a8c0040c 	andi	r3,r21,16
  80af08:	12400017 	ldw	r9,0(r2)
  80af0c:	12000117 	ldw	r8,4(r2)
  80af10:	18037926 	beq	r3,zero,80bcf8 <_dtoa_r+0x11a0>
  80af14:	00802074 	movhi	r2,129
  80af18:	109c6b04 	addi	r2,r2,29100
  80af1c:	11800817 	ldw	r6,32(r2)
  80af20:	11c00917 	ldw	r7,36(r2)
  80af24:	9009883a 	mov	r4,r18
  80af28:	980b883a 	mov	r5,r19
  80af2c:	da001715 	stw	r8,92(sp)
  80af30:	da401615 	stw	r9,88(sp)
  80af34:	0811a980 	call	811a98 <__divdf3>
  80af38:	da001717 	ldw	r8,92(sp)
  80af3c:	da401617 	ldw	r9,88(sp)
  80af40:	ad4003cc 	andi	r21,r21,15
  80af44:	040000c4 	movi	r16,3
  80af48:	1023883a 	mov	r17,r2
  80af4c:	1829883a 	mov	r20,r3
  80af50:	a8001126 	beq	r21,zero,80af98 <_dtoa_r+0x440>
  80af54:	05c02074 	movhi	r23,129
  80af58:	bddc6b04 	addi	r23,r23,29100
  80af5c:	4805883a 	mov	r2,r9
  80af60:	4007883a 	mov	r3,r8
  80af64:	a980004c 	andi	r6,r21,1
  80af68:	1009883a 	mov	r4,r2
  80af6c:	a82bd07a 	srai	r21,r21,1
  80af70:	180b883a 	mov	r5,r3
  80af74:	30000426 	beq	r6,zero,80af88 <_dtoa_r+0x430>
  80af78:	b9800017 	ldw	r6,0(r23)
  80af7c:	b9c00117 	ldw	r7,4(r23)
  80af80:	84000044 	addi	r16,r16,1
  80af84:	08124080 	call	812408 <__muldf3>
  80af88:	bdc00204 	addi	r23,r23,8
  80af8c:	a83ff51e 	bne	r21,zero,80af64 <__alt_mem_onchip_mem+0xff802f64>
  80af90:	1013883a 	mov	r9,r2
  80af94:	1811883a 	mov	r8,r3
  80af98:	480d883a 	mov	r6,r9
  80af9c:	400f883a 	mov	r7,r8
  80afa0:	8809883a 	mov	r4,r17
  80afa4:	a00b883a 	mov	r5,r20
  80afa8:	0811a980 	call	811a98 <__divdf3>
  80afac:	d8800f15 	stw	r2,60(sp)
  80afb0:	d8c01015 	stw	r3,64(sp)
  80afb4:	d8c00e17 	ldw	r3,56(sp)
  80afb8:	18000626 	beq	r3,zero,80afd4 <_dtoa_r+0x47c>
  80afbc:	d9000f17 	ldw	r4,60(sp)
  80afc0:	d9401017 	ldw	r5,64(sp)
  80afc4:	000d883a 	mov	r6,zero
  80afc8:	01cffc34 	movhi	r7,16368
  80afcc:	08061180 	call	806118 <__ledf2>
  80afd0:	10040b16 	blt	r2,zero,80c000 <_dtoa_r+0x14a8>
  80afd4:	8009883a 	mov	r4,r16
  80afd8:	0806b080 	call	806b08 <__floatsidf>
  80afdc:	d9800f17 	ldw	r6,60(sp)
  80afe0:	d9c01017 	ldw	r7,64(sp)
  80afe4:	1009883a 	mov	r4,r2
  80afe8:	180b883a 	mov	r5,r3
  80afec:	08124080 	call	812408 <__muldf3>
  80aff0:	000d883a 	mov	r6,zero
  80aff4:	01d00734 	movhi	r7,16412
  80aff8:	1009883a 	mov	r4,r2
  80affc:	180b883a 	mov	r5,r3
  80b000:	08057900 	call	805790 <__adddf3>
  80b004:	1021883a 	mov	r16,r2
  80b008:	d8800617 	ldw	r2,24(sp)
  80b00c:	047f3034 	movhi	r17,64704
  80b010:	1c63883a 	add	r17,r3,r17
  80b014:	10031826 	beq	r2,zero,80bc78 <_dtoa_r+0x1120>
  80b018:	d8c00517 	ldw	r3,20(sp)
  80b01c:	db000617 	ldw	r12,24(sp)
  80b020:	d8c01315 	stw	r3,76(sp)
  80b024:	d9000b17 	ldw	r4,44(sp)
  80b028:	20038f26 	beq	r4,zero,80be68 <_dtoa_r+0x1310>
  80b02c:	60bfffc4 	addi	r2,r12,-1
  80b030:	100490fa 	slli	r2,r2,3
  80b034:	00c02074 	movhi	r3,129
  80b038:	18dc7504 	addi	r3,r3,29140
  80b03c:	1885883a 	add	r2,r3,r2
  80b040:	11800017 	ldw	r6,0(r2)
  80b044:	11c00117 	ldw	r7,4(r2)
  80b048:	d8800717 	ldw	r2,28(sp)
  80b04c:	0009883a 	mov	r4,zero
  80b050:	014ff834 	movhi	r5,16352
  80b054:	db001615 	stw	r12,88(sp)
  80b058:	15c00044 	addi	r23,r2,1
  80b05c:	0811a980 	call	811a98 <__divdf3>
  80b060:	800d883a 	mov	r6,r16
  80b064:	880f883a 	mov	r7,r17
  80b068:	1009883a 	mov	r4,r2
  80b06c:	180b883a 	mov	r5,r3
  80b070:	080620c0 	call	80620c <__subdf3>
  80b074:	d9401017 	ldw	r5,64(sp)
  80b078:	d9000f17 	ldw	r4,60(sp)
  80b07c:	102b883a 	mov	r21,r2
  80b080:	d8c01215 	stw	r3,72(sp)
  80b084:	0812b200 	call	812b20 <__fixdfsi>
  80b088:	1009883a 	mov	r4,r2
  80b08c:	1029883a 	mov	r20,r2
  80b090:	0806b080 	call	806b08 <__floatsidf>
  80b094:	d9000f17 	ldw	r4,60(sp)
  80b098:	d9401017 	ldw	r5,64(sp)
  80b09c:	100d883a 	mov	r6,r2
  80b0a0:	180f883a 	mov	r7,r3
  80b0a4:	080620c0 	call	80620c <__subdf3>
  80b0a8:	1823883a 	mov	r17,r3
  80b0ac:	d8c00717 	ldw	r3,28(sp)
  80b0b0:	d9401217 	ldw	r5,72(sp)
  80b0b4:	a2000c04 	addi	r8,r20,48
  80b0b8:	1021883a 	mov	r16,r2
  80b0bc:	1a000005 	stb	r8,0(r3)
  80b0c0:	800d883a 	mov	r6,r16
  80b0c4:	880f883a 	mov	r7,r17
  80b0c8:	a809883a 	mov	r4,r21
  80b0cc:	4029883a 	mov	r20,r8
  80b0d0:	080603c0 	call	80603c <__gedf2>
  80b0d4:	00841d16 	blt	zero,r2,80c14c <_dtoa_r+0x15f4>
  80b0d8:	800d883a 	mov	r6,r16
  80b0dc:	880f883a 	mov	r7,r17
  80b0e0:	0009883a 	mov	r4,zero
  80b0e4:	014ffc34 	movhi	r5,16368
  80b0e8:	080620c0 	call	80620c <__subdf3>
  80b0ec:	d9401217 	ldw	r5,72(sp)
  80b0f0:	100d883a 	mov	r6,r2
  80b0f4:	180f883a 	mov	r7,r3
  80b0f8:	a809883a 	mov	r4,r21
  80b0fc:	080603c0 	call	80603c <__gedf2>
  80b100:	db001617 	ldw	r12,88(sp)
  80b104:	00840e16 	blt	zero,r2,80c140 <_dtoa_r+0x15e8>
  80b108:	00800044 	movi	r2,1
  80b10c:	13006b0e 	bge	r2,r12,80b2bc <_dtoa_r+0x764>
  80b110:	d9000717 	ldw	r4,28(sp)
  80b114:	dd800f15 	stw	r22,60(sp)
  80b118:	dcc01015 	stw	r19,64(sp)
  80b11c:	2319883a 	add	r12,r4,r12
  80b120:	dcc01217 	ldw	r19,72(sp)
  80b124:	602d883a 	mov	r22,r12
  80b128:	dc801215 	stw	r18,72(sp)
  80b12c:	b825883a 	mov	r18,r23
  80b130:	00000906 	br	80b158 <_dtoa_r+0x600>
  80b134:	080620c0 	call	80620c <__subdf3>
  80b138:	a80d883a 	mov	r6,r21
  80b13c:	980f883a 	mov	r7,r19
  80b140:	1009883a 	mov	r4,r2
  80b144:	180b883a 	mov	r5,r3
  80b148:	08061180 	call	806118 <__ledf2>
  80b14c:	1003e816 	blt	r2,zero,80c0f0 <_dtoa_r+0x1598>
  80b150:	b825883a 	mov	r18,r23
  80b154:	bd83e926 	beq	r23,r22,80c0fc <_dtoa_r+0x15a4>
  80b158:	a809883a 	mov	r4,r21
  80b15c:	980b883a 	mov	r5,r19
  80b160:	000d883a 	mov	r6,zero
  80b164:	01d00934 	movhi	r7,16420
  80b168:	08124080 	call	812408 <__muldf3>
  80b16c:	000d883a 	mov	r6,zero
  80b170:	01d00934 	movhi	r7,16420
  80b174:	8009883a 	mov	r4,r16
  80b178:	880b883a 	mov	r5,r17
  80b17c:	102b883a 	mov	r21,r2
  80b180:	1827883a 	mov	r19,r3
  80b184:	08124080 	call	812408 <__muldf3>
  80b188:	180b883a 	mov	r5,r3
  80b18c:	1009883a 	mov	r4,r2
  80b190:	1821883a 	mov	r16,r3
  80b194:	1023883a 	mov	r17,r2
  80b198:	0812b200 	call	812b20 <__fixdfsi>
  80b19c:	1009883a 	mov	r4,r2
  80b1a0:	1029883a 	mov	r20,r2
  80b1a4:	0806b080 	call	806b08 <__floatsidf>
  80b1a8:	8809883a 	mov	r4,r17
  80b1ac:	800b883a 	mov	r5,r16
  80b1b0:	100d883a 	mov	r6,r2
  80b1b4:	180f883a 	mov	r7,r3
  80b1b8:	080620c0 	call	80620c <__subdf3>
  80b1bc:	a5000c04 	addi	r20,r20,48
  80b1c0:	a80d883a 	mov	r6,r21
  80b1c4:	980f883a 	mov	r7,r19
  80b1c8:	1009883a 	mov	r4,r2
  80b1cc:	180b883a 	mov	r5,r3
  80b1d0:	95000005 	stb	r20,0(r18)
  80b1d4:	1021883a 	mov	r16,r2
  80b1d8:	1823883a 	mov	r17,r3
  80b1dc:	08061180 	call	806118 <__ledf2>
  80b1e0:	bdc00044 	addi	r23,r23,1
  80b1e4:	800d883a 	mov	r6,r16
  80b1e8:	880f883a 	mov	r7,r17
  80b1ec:	0009883a 	mov	r4,zero
  80b1f0:	014ffc34 	movhi	r5,16368
  80b1f4:	103fcf0e 	bge	r2,zero,80b134 <__alt_mem_onchip_mem+0xff803134>
  80b1f8:	d8c01317 	ldw	r3,76(sp)
  80b1fc:	d8c00515 	stw	r3,20(sp)
  80b200:	d9400917 	ldw	r5,36(sp)
  80b204:	e009883a 	mov	r4,fp
  80b208:	080d90c0 	call	80d90c <_Bfree>
  80b20c:	d9000517 	ldw	r4,20(sp)
  80b210:	d9802317 	ldw	r6,140(sp)
  80b214:	d9c02517 	ldw	r7,148(sp)
  80b218:	b8000005 	stb	zero,0(r23)
  80b21c:	20800044 	addi	r2,r4,1
  80b220:	30800015 	stw	r2,0(r6)
  80b224:	3802aa26 	beq	r7,zero,80bcd0 <_dtoa_r+0x1178>
  80b228:	3dc00015 	stw	r23,0(r7)
  80b22c:	d8800717 	ldw	r2,28(sp)
  80b230:	003e7906 	br	80ac18 <__alt_mem_onchip_mem+0xff802c18>
  80b234:	00800434 	movhi	r2,16
  80b238:	10bfffc4 	addi	r2,r2,-1
  80b23c:	88a2703a 	and	r17,r17,r2
  80b240:	883e851e 	bne	r17,zero,80ac58 <__alt_mem_onchip_mem+0xff802c58>
  80b244:	00802074 	movhi	r2,129
  80b248:	109c5704 	addi	r2,r2,29020
  80b24c:	003e8406 	br	80ac60 <__alt_mem_onchip_mem+0xff802c60>
  80b250:	10c00204 	addi	r3,r2,8
  80b254:	003e8706 	br	80ac74 <__alt_mem_onchip_mem+0xff802c74>
  80b258:	01400434 	movhi	r5,16
  80b25c:	297fffc4 	addi	r5,r5,-1
  80b260:	994a703a 	and	r5,r19,r5
  80b264:	9009883a 	mov	r4,r18
  80b268:	843f0044 	addi	r16,r16,-1023
  80b26c:	294ffc34 	orhi	r5,r5,16368
  80b270:	dd800217 	ldw	r22,8(sp)
  80b274:	d8001115 	stw	zero,68(sp)
  80b278:	003ea506 	br	80ad10 <__alt_mem_onchip_mem+0xff802d10>
  80b27c:	00802074 	movhi	r2,129
  80b280:	109c4e04 	addi	r2,r2,28984
  80b284:	003e6406 	br	80ac18 <__alt_mem_onchip_mem+0xff802c18>
  80b288:	e0001115 	stw	zero,68(fp)
  80b28c:	000b883a 	mov	r5,zero
  80b290:	e009883a 	mov	r4,fp
  80b294:	080d8640 	call	80d864 <_Balloc>
  80b298:	01bfffc4 	movi	r6,-1
  80b29c:	01c00044 	movi	r7,1
  80b2a0:	d8800715 	stw	r2,28(sp)
  80b2a4:	d9800c15 	stw	r6,48(sp)
  80b2a8:	e0801015 	stw	r2,64(fp)
  80b2ac:	d8000315 	stw	zero,12(sp)
  80b2b0:	d9c00b15 	stw	r7,44(sp)
  80b2b4:	d9800615 	stw	r6,24(sp)
  80b2b8:	d8002215 	stw	zero,136(sp)
  80b2bc:	d8800117 	ldw	r2,4(sp)
  80b2c0:	10008916 	blt	r2,zero,80b4e8 <_dtoa_r+0x990>
  80b2c4:	d9000517 	ldw	r4,20(sp)
  80b2c8:	00c00384 	movi	r3,14
  80b2cc:	19008616 	blt	r3,r4,80b4e8 <_dtoa_r+0x990>
  80b2d0:	200490fa 	slli	r2,r4,3
  80b2d4:	00c02074 	movhi	r3,129
  80b2d8:	d9802217 	ldw	r6,136(sp)
  80b2dc:	18dc7504 	addi	r3,r3,29140
  80b2e0:	1885883a 	add	r2,r3,r2
  80b2e4:	14000017 	ldw	r16,0(r2)
  80b2e8:	14400117 	ldw	r17,4(r2)
  80b2ec:	30016316 	blt	r6,zero,80b87c <_dtoa_r+0xd24>
  80b2f0:	800d883a 	mov	r6,r16
  80b2f4:	880f883a 	mov	r7,r17
  80b2f8:	9009883a 	mov	r4,r18
  80b2fc:	980b883a 	mov	r5,r19
  80b300:	0811a980 	call	811a98 <__divdf3>
  80b304:	180b883a 	mov	r5,r3
  80b308:	1009883a 	mov	r4,r2
  80b30c:	0812b200 	call	812b20 <__fixdfsi>
  80b310:	1009883a 	mov	r4,r2
  80b314:	102b883a 	mov	r21,r2
  80b318:	0806b080 	call	806b08 <__floatsidf>
  80b31c:	800d883a 	mov	r6,r16
  80b320:	880f883a 	mov	r7,r17
  80b324:	1009883a 	mov	r4,r2
  80b328:	180b883a 	mov	r5,r3
  80b32c:	08124080 	call	812408 <__muldf3>
  80b330:	100d883a 	mov	r6,r2
  80b334:	180f883a 	mov	r7,r3
  80b338:	9009883a 	mov	r4,r18
  80b33c:	980b883a 	mov	r5,r19
  80b340:	080620c0 	call	80620c <__subdf3>
  80b344:	d9c00717 	ldw	r7,28(sp)
  80b348:	1009883a 	mov	r4,r2
  80b34c:	a8800c04 	addi	r2,r21,48
  80b350:	38800005 	stb	r2,0(r7)
  80b354:	3dc00044 	addi	r23,r7,1
  80b358:	d9c00617 	ldw	r7,24(sp)
  80b35c:	01800044 	movi	r6,1
  80b360:	180b883a 	mov	r5,r3
  80b364:	2005883a 	mov	r2,r4
  80b368:	39803826 	beq	r7,r6,80b44c <_dtoa_r+0x8f4>
  80b36c:	000d883a 	mov	r6,zero
  80b370:	01d00934 	movhi	r7,16420
  80b374:	08124080 	call	812408 <__muldf3>
  80b378:	000d883a 	mov	r6,zero
  80b37c:	000f883a 	mov	r7,zero
  80b380:	1009883a 	mov	r4,r2
  80b384:	180b883a 	mov	r5,r3
  80b388:	1025883a 	mov	r18,r2
  80b38c:	1827883a 	mov	r19,r3
  80b390:	08123800 	call	812380 <__eqdf2>
  80b394:	103f9a26 	beq	r2,zero,80b200 <__alt_mem_onchip_mem+0xff803200>
  80b398:	d9c00617 	ldw	r7,24(sp)
  80b39c:	d8c00717 	ldw	r3,28(sp)
  80b3a0:	b829883a 	mov	r20,r23
  80b3a4:	38bfffc4 	addi	r2,r7,-1
  80b3a8:	18ad883a 	add	r22,r3,r2
  80b3ac:	00000a06 	br	80b3d8 <_dtoa_r+0x880>
  80b3b0:	08124080 	call	812408 <__muldf3>
  80b3b4:	000d883a 	mov	r6,zero
  80b3b8:	000f883a 	mov	r7,zero
  80b3bc:	1009883a 	mov	r4,r2
  80b3c0:	180b883a 	mov	r5,r3
  80b3c4:	1025883a 	mov	r18,r2
  80b3c8:	1827883a 	mov	r19,r3
  80b3cc:	b829883a 	mov	r20,r23
  80b3d0:	08123800 	call	812380 <__eqdf2>
  80b3d4:	103f8a26 	beq	r2,zero,80b200 <__alt_mem_onchip_mem+0xff803200>
  80b3d8:	800d883a 	mov	r6,r16
  80b3dc:	880f883a 	mov	r7,r17
  80b3e0:	9009883a 	mov	r4,r18
  80b3e4:	980b883a 	mov	r5,r19
  80b3e8:	0811a980 	call	811a98 <__divdf3>
  80b3ec:	180b883a 	mov	r5,r3
  80b3f0:	1009883a 	mov	r4,r2
  80b3f4:	0812b200 	call	812b20 <__fixdfsi>
  80b3f8:	1009883a 	mov	r4,r2
  80b3fc:	102b883a 	mov	r21,r2
  80b400:	0806b080 	call	806b08 <__floatsidf>
  80b404:	800d883a 	mov	r6,r16
  80b408:	880f883a 	mov	r7,r17
  80b40c:	1009883a 	mov	r4,r2
  80b410:	180b883a 	mov	r5,r3
  80b414:	08124080 	call	812408 <__muldf3>
  80b418:	100d883a 	mov	r6,r2
  80b41c:	180f883a 	mov	r7,r3
  80b420:	9009883a 	mov	r4,r18
  80b424:	980b883a 	mov	r5,r19
  80b428:	080620c0 	call	80620c <__subdf3>
  80b42c:	aa000c04 	addi	r8,r21,48
  80b430:	a2000005 	stb	r8,0(r20)
  80b434:	000d883a 	mov	r6,zero
  80b438:	01d00934 	movhi	r7,16420
  80b43c:	1009883a 	mov	r4,r2
  80b440:	180b883a 	mov	r5,r3
  80b444:	a5c00044 	addi	r23,r20,1
  80b448:	b53fd91e 	bne	r22,r20,80b3b0 <__alt_mem_onchip_mem+0xff8033b0>
  80b44c:	100d883a 	mov	r6,r2
  80b450:	180f883a 	mov	r7,r3
  80b454:	1009883a 	mov	r4,r2
  80b458:	180b883a 	mov	r5,r3
  80b45c:	08057900 	call	805790 <__adddf3>
  80b460:	100d883a 	mov	r6,r2
  80b464:	180f883a 	mov	r7,r3
  80b468:	8009883a 	mov	r4,r16
  80b46c:	880b883a 	mov	r5,r17
  80b470:	1027883a 	mov	r19,r2
  80b474:	1825883a 	mov	r18,r3
  80b478:	08061180 	call	806118 <__ledf2>
  80b47c:	10000816 	blt	r2,zero,80b4a0 <_dtoa_r+0x948>
  80b480:	980d883a 	mov	r6,r19
  80b484:	900f883a 	mov	r7,r18
  80b488:	8009883a 	mov	r4,r16
  80b48c:	880b883a 	mov	r5,r17
  80b490:	08123800 	call	812380 <__eqdf2>
  80b494:	103f5a1e 	bne	r2,zero,80b200 <__alt_mem_onchip_mem+0xff803200>
  80b498:	ad40004c 	andi	r21,r21,1
  80b49c:	a83f5826 	beq	r21,zero,80b200 <__alt_mem_onchip_mem+0xff803200>
  80b4a0:	bd3fffc3 	ldbu	r20,-1(r23)
  80b4a4:	b8bfffc4 	addi	r2,r23,-1
  80b4a8:	1007883a 	mov	r3,r2
  80b4ac:	01400e44 	movi	r5,57
  80b4b0:	d9800717 	ldw	r6,28(sp)
  80b4b4:	00000506 	br	80b4cc <_dtoa_r+0x974>
  80b4b8:	18ffffc4 	addi	r3,r3,-1
  80b4bc:	11824726 	beq	r2,r6,80bddc <_dtoa_r+0x1284>
  80b4c0:	1d000003 	ldbu	r20,0(r3)
  80b4c4:	102f883a 	mov	r23,r2
  80b4c8:	10bfffc4 	addi	r2,r2,-1
  80b4cc:	a1003fcc 	andi	r4,r20,255
  80b4d0:	2100201c 	xori	r4,r4,128
  80b4d4:	213fe004 	addi	r4,r4,-128
  80b4d8:	217ff726 	beq	r4,r5,80b4b8 <__alt_mem_onchip_mem+0xff8034b8>
  80b4dc:	a2000044 	addi	r8,r20,1
  80b4e0:	12000005 	stb	r8,0(r2)
  80b4e4:	003f4606 	br	80b200 <__alt_mem_onchip_mem+0xff803200>
  80b4e8:	d9000b17 	ldw	r4,44(sp)
  80b4ec:	2000c826 	beq	r4,zero,80b810 <_dtoa_r+0xcb8>
  80b4f0:	d9800317 	ldw	r6,12(sp)
  80b4f4:	00c00044 	movi	r3,1
  80b4f8:	1980f90e 	bge	r3,r6,80b8e0 <_dtoa_r+0xd88>
  80b4fc:	d8800617 	ldw	r2,24(sp)
  80b500:	d8c00a17 	ldw	r3,40(sp)
  80b504:	157fffc4 	addi	r21,r2,-1
  80b508:	1d41f316 	blt	r3,r21,80bcd8 <_dtoa_r+0x1180>
  80b50c:	1d6bc83a 	sub	r21,r3,r21
  80b510:	d9c00617 	ldw	r7,24(sp)
  80b514:	3802aa16 	blt	r7,zero,80bfc0 <_dtoa_r+0x1468>
  80b518:	dd000817 	ldw	r20,32(sp)
  80b51c:	d8800617 	ldw	r2,24(sp)
  80b520:	d8c00817 	ldw	r3,32(sp)
  80b524:	01400044 	movi	r5,1
  80b528:	e009883a 	mov	r4,fp
  80b52c:	1887883a 	add	r3,r3,r2
  80b530:	d8c00815 	stw	r3,32(sp)
  80b534:	b0ad883a 	add	r22,r22,r2
  80b538:	080dc700 	call	80dc70 <__i2b>
  80b53c:	1023883a 	mov	r17,r2
  80b540:	a0000826 	beq	r20,zero,80b564 <_dtoa_r+0xa0c>
  80b544:	0580070e 	bge	zero,r22,80b564 <_dtoa_r+0xa0c>
  80b548:	a005883a 	mov	r2,r20
  80b54c:	b500b916 	blt	r22,r20,80b834 <_dtoa_r+0xcdc>
  80b550:	d9000817 	ldw	r4,32(sp)
  80b554:	a0a9c83a 	sub	r20,r20,r2
  80b558:	b0adc83a 	sub	r22,r22,r2
  80b55c:	2089c83a 	sub	r4,r4,r2
  80b560:	d9000815 	stw	r4,32(sp)
  80b564:	d9800a17 	ldw	r6,40(sp)
  80b568:	0181810e 	bge	zero,r6,80bb70 <_dtoa_r+0x1018>
  80b56c:	d9c00b17 	ldw	r7,44(sp)
  80b570:	3800b326 	beq	r7,zero,80b840 <_dtoa_r+0xce8>
  80b574:	a800b226 	beq	r21,zero,80b840 <_dtoa_r+0xce8>
  80b578:	880b883a 	mov	r5,r17
  80b57c:	a80d883a 	mov	r6,r21
  80b580:	e009883a 	mov	r4,fp
  80b584:	080dea40 	call	80dea4 <__pow5mult>
  80b588:	d9800917 	ldw	r6,36(sp)
  80b58c:	100b883a 	mov	r5,r2
  80b590:	e009883a 	mov	r4,fp
  80b594:	1023883a 	mov	r17,r2
  80b598:	080dcac0 	call	80dcac <__multiply>
  80b59c:	1021883a 	mov	r16,r2
  80b5a0:	d8800a17 	ldw	r2,40(sp)
  80b5a4:	d9400917 	ldw	r5,36(sp)
  80b5a8:	e009883a 	mov	r4,fp
  80b5ac:	1545c83a 	sub	r2,r2,r21
  80b5b0:	d8800a15 	stw	r2,40(sp)
  80b5b4:	080d90c0 	call	80d90c <_Bfree>
  80b5b8:	d8c00a17 	ldw	r3,40(sp)
  80b5bc:	18009f1e 	bne	r3,zero,80b83c <_dtoa_r+0xce4>
  80b5c0:	05c00044 	movi	r23,1
  80b5c4:	e009883a 	mov	r4,fp
  80b5c8:	b80b883a 	mov	r5,r23
  80b5cc:	080dc700 	call	80dc70 <__i2b>
  80b5d0:	d9000d17 	ldw	r4,52(sp)
  80b5d4:	102b883a 	mov	r21,r2
  80b5d8:	2000ce26 	beq	r4,zero,80b914 <_dtoa_r+0xdbc>
  80b5dc:	200d883a 	mov	r6,r4
  80b5e0:	100b883a 	mov	r5,r2
  80b5e4:	e009883a 	mov	r4,fp
  80b5e8:	080dea40 	call	80dea4 <__pow5mult>
  80b5ec:	d9800317 	ldw	r6,12(sp)
  80b5f0:	102b883a 	mov	r21,r2
  80b5f4:	b981810e 	bge	r23,r6,80bbfc <_dtoa_r+0x10a4>
  80b5f8:	0027883a 	mov	r19,zero
  80b5fc:	a8800417 	ldw	r2,16(r21)
  80b600:	05c00804 	movi	r23,32
  80b604:	10800104 	addi	r2,r2,4
  80b608:	1085883a 	add	r2,r2,r2
  80b60c:	1085883a 	add	r2,r2,r2
  80b610:	a885883a 	add	r2,r21,r2
  80b614:	11000017 	ldw	r4,0(r2)
  80b618:	080db580 	call	80db58 <__hi0bits>
  80b61c:	b885c83a 	sub	r2,r23,r2
  80b620:	1585883a 	add	r2,r2,r22
  80b624:	108007cc 	andi	r2,r2,31
  80b628:	1000b326 	beq	r2,zero,80b8f8 <_dtoa_r+0xda0>
  80b62c:	00c00804 	movi	r3,32
  80b630:	1887c83a 	sub	r3,r3,r2
  80b634:	01000104 	movi	r4,4
  80b638:	20c2cd0e 	bge	r4,r3,80c170 <_dtoa_r+0x1618>
  80b63c:	00c00704 	movi	r3,28
  80b640:	1885c83a 	sub	r2,r3,r2
  80b644:	d8c00817 	ldw	r3,32(sp)
  80b648:	a0a9883a 	add	r20,r20,r2
  80b64c:	b0ad883a 	add	r22,r22,r2
  80b650:	1887883a 	add	r3,r3,r2
  80b654:	d8c00815 	stw	r3,32(sp)
  80b658:	d9800817 	ldw	r6,32(sp)
  80b65c:	0180040e 	bge	zero,r6,80b670 <_dtoa_r+0xb18>
  80b660:	800b883a 	mov	r5,r16
  80b664:	e009883a 	mov	r4,fp
  80b668:	080dfe40 	call	80dfe4 <__lshift>
  80b66c:	1021883a 	mov	r16,r2
  80b670:	0580050e 	bge	zero,r22,80b688 <_dtoa_r+0xb30>
  80b674:	a80b883a 	mov	r5,r21
  80b678:	b00d883a 	mov	r6,r22
  80b67c:	e009883a 	mov	r4,fp
  80b680:	080dfe40 	call	80dfe4 <__lshift>
  80b684:	102b883a 	mov	r21,r2
  80b688:	d9c00e17 	ldw	r7,56(sp)
  80b68c:	3801211e 	bne	r7,zero,80bb14 <_dtoa_r+0xfbc>
  80b690:	d9800617 	ldw	r6,24(sp)
  80b694:	0181380e 	bge	zero,r6,80bb78 <_dtoa_r+0x1020>
  80b698:	d8c00b17 	ldw	r3,44(sp)
  80b69c:	1800ab1e 	bne	r3,zero,80b94c <_dtoa_r+0xdf4>
  80b6a0:	dc800717 	ldw	r18,28(sp)
  80b6a4:	dcc00617 	ldw	r19,24(sp)
  80b6a8:	9029883a 	mov	r20,r18
  80b6ac:	00000206 	br	80b6b8 <_dtoa_r+0xb60>
  80b6b0:	080d9340 	call	80d934 <__multadd>
  80b6b4:	1021883a 	mov	r16,r2
  80b6b8:	a80b883a 	mov	r5,r21
  80b6bc:	8009883a 	mov	r4,r16
  80b6c0:	080a9580 	call	80a958 <quorem>
  80b6c4:	10800c04 	addi	r2,r2,48
  80b6c8:	90800005 	stb	r2,0(r18)
  80b6cc:	94800044 	addi	r18,r18,1
  80b6d0:	9507c83a 	sub	r3,r18,r20
  80b6d4:	000f883a 	mov	r7,zero
  80b6d8:	01800284 	movi	r6,10
  80b6dc:	800b883a 	mov	r5,r16
  80b6e0:	e009883a 	mov	r4,fp
  80b6e4:	1cfff216 	blt	r3,r19,80b6b0 <__alt_mem_onchip_mem+0xff8036b0>
  80b6e8:	1011883a 	mov	r8,r2
  80b6ec:	d8800617 	ldw	r2,24(sp)
  80b6f0:	0082370e 	bge	zero,r2,80bfd0 <_dtoa_r+0x1478>
  80b6f4:	d9000717 	ldw	r4,28(sp)
  80b6f8:	0025883a 	mov	r18,zero
  80b6fc:	20af883a 	add	r23,r4,r2
  80b700:	01800044 	movi	r6,1
  80b704:	800b883a 	mov	r5,r16
  80b708:	e009883a 	mov	r4,fp
  80b70c:	da001715 	stw	r8,92(sp)
  80b710:	080dfe40 	call	80dfe4 <__lshift>
  80b714:	a80b883a 	mov	r5,r21
  80b718:	1009883a 	mov	r4,r2
  80b71c:	d8800915 	stw	r2,36(sp)
  80b720:	080e12c0 	call	80e12c <__mcmp>
  80b724:	da001717 	ldw	r8,92(sp)
  80b728:	0081800e 	bge	zero,r2,80bd2c <_dtoa_r+0x11d4>
  80b72c:	b93fffc3 	ldbu	r4,-1(r23)
  80b730:	b8bfffc4 	addi	r2,r23,-1
  80b734:	1007883a 	mov	r3,r2
  80b738:	01800e44 	movi	r6,57
  80b73c:	d9c00717 	ldw	r7,28(sp)
  80b740:	00000506 	br	80b758 <_dtoa_r+0xc00>
  80b744:	18ffffc4 	addi	r3,r3,-1
  80b748:	11c12326 	beq	r2,r7,80bbd8 <_dtoa_r+0x1080>
  80b74c:	19000003 	ldbu	r4,0(r3)
  80b750:	102f883a 	mov	r23,r2
  80b754:	10bfffc4 	addi	r2,r2,-1
  80b758:	21403fcc 	andi	r5,r4,255
  80b75c:	2940201c 	xori	r5,r5,128
  80b760:	297fe004 	addi	r5,r5,-128
  80b764:	29bff726 	beq	r5,r6,80b744 <__alt_mem_onchip_mem+0xff803744>
  80b768:	21000044 	addi	r4,r4,1
  80b76c:	11000005 	stb	r4,0(r2)
  80b770:	a80b883a 	mov	r5,r21
  80b774:	e009883a 	mov	r4,fp
  80b778:	080d90c0 	call	80d90c <_Bfree>
  80b77c:	883ea026 	beq	r17,zero,80b200 <__alt_mem_onchip_mem+0xff803200>
  80b780:	90000426 	beq	r18,zero,80b794 <_dtoa_r+0xc3c>
  80b784:	94400326 	beq	r18,r17,80b794 <_dtoa_r+0xc3c>
  80b788:	900b883a 	mov	r5,r18
  80b78c:	e009883a 	mov	r4,fp
  80b790:	080d90c0 	call	80d90c <_Bfree>
  80b794:	880b883a 	mov	r5,r17
  80b798:	e009883a 	mov	r4,fp
  80b79c:	080d90c0 	call	80d90c <_Bfree>
  80b7a0:	003e9706 	br	80b200 <__alt_mem_onchip_mem+0xff803200>
  80b7a4:	01800044 	movi	r6,1
  80b7a8:	d9800e15 	stw	r6,56(sp)
  80b7ac:	003d9606 	br	80ae08 <__alt_mem_onchip_mem+0xff802e08>
  80b7b0:	d8800817 	ldw	r2,32(sp)
  80b7b4:	d8c00517 	ldw	r3,20(sp)
  80b7b8:	d8000d15 	stw	zero,52(sp)
  80b7bc:	10c5c83a 	sub	r2,r2,r3
  80b7c0:	00c9c83a 	sub	r4,zero,r3
  80b7c4:	d8800815 	stw	r2,32(sp)
  80b7c8:	d9000a15 	stw	r4,40(sp)
  80b7cc:	003d9706 	br	80ae2c <__alt_mem_onchip_mem+0xff802e2c>
  80b7d0:	05adc83a 	sub	r22,zero,r22
  80b7d4:	dd800815 	stw	r22,32(sp)
  80b7d8:	002d883a 	mov	r22,zero
  80b7dc:	003d8e06 	br	80ae18 <__alt_mem_onchip_mem+0xff802e18>
  80b7e0:	d9000517 	ldw	r4,20(sp)
  80b7e4:	0806b080 	call	806b08 <__floatsidf>
  80b7e8:	100d883a 	mov	r6,r2
  80b7ec:	180f883a 	mov	r7,r3
  80b7f0:	a009883a 	mov	r4,r20
  80b7f4:	880b883a 	mov	r5,r17
  80b7f8:	08123800 	call	812380 <__eqdf2>
  80b7fc:	103d7126 	beq	r2,zero,80adc4 <__alt_mem_onchip_mem+0xff802dc4>
  80b800:	d9c00517 	ldw	r7,20(sp)
  80b804:	39ffffc4 	addi	r7,r7,-1
  80b808:	d9c00515 	stw	r7,20(sp)
  80b80c:	003d6d06 	br	80adc4 <__alt_mem_onchip_mem+0xff802dc4>
  80b810:	dd400a17 	ldw	r21,40(sp)
  80b814:	dd000817 	ldw	r20,32(sp)
  80b818:	0023883a 	mov	r17,zero
  80b81c:	003f4806 	br	80b540 <__alt_mem_onchip_mem+0xff803540>
  80b820:	10e3c83a 	sub	r17,r2,r3
  80b824:	9448983a 	sll	r4,r18,r17
  80b828:	003d3206 	br	80acf4 <__alt_mem_onchip_mem+0xff802cf4>
  80b82c:	d8000e15 	stw	zero,56(sp)
  80b830:	003d7506 	br	80ae08 <__alt_mem_onchip_mem+0xff802e08>
  80b834:	b005883a 	mov	r2,r22
  80b838:	003f4506 	br	80b550 <__alt_mem_onchip_mem+0xff803550>
  80b83c:	dc000915 	stw	r16,36(sp)
  80b840:	d9800a17 	ldw	r6,40(sp)
  80b844:	d9400917 	ldw	r5,36(sp)
  80b848:	e009883a 	mov	r4,fp
  80b84c:	080dea40 	call	80dea4 <__pow5mult>
  80b850:	1021883a 	mov	r16,r2
  80b854:	003f5a06 	br	80b5c0 <__alt_mem_onchip_mem+0xff8035c0>
  80b858:	01c00044 	movi	r7,1
  80b85c:	d9c00b15 	stw	r7,44(sp)
  80b860:	d8802217 	ldw	r2,136(sp)
  80b864:	0081280e 	bge	zero,r2,80bd08 <_dtoa_r+0x11b0>
  80b868:	100d883a 	mov	r6,r2
  80b86c:	1021883a 	mov	r16,r2
  80b870:	d8800c15 	stw	r2,48(sp)
  80b874:	d8800615 	stw	r2,24(sp)
  80b878:	003d8806 	br	80ae9c <__alt_mem_onchip_mem+0xff802e9c>
  80b87c:	d8800617 	ldw	r2,24(sp)
  80b880:	00be9b16 	blt	zero,r2,80b2f0 <__alt_mem_onchip_mem+0xff8032f0>
  80b884:	10010f1e 	bne	r2,zero,80bcc4 <_dtoa_r+0x116c>
  80b888:	880b883a 	mov	r5,r17
  80b88c:	000d883a 	mov	r6,zero
  80b890:	01d00534 	movhi	r7,16404
  80b894:	8009883a 	mov	r4,r16
  80b898:	08124080 	call	812408 <__muldf3>
  80b89c:	900d883a 	mov	r6,r18
  80b8a0:	980f883a 	mov	r7,r19
  80b8a4:	1009883a 	mov	r4,r2
  80b8a8:	180b883a 	mov	r5,r3
  80b8ac:	080603c0 	call	80603c <__gedf2>
  80b8b0:	002b883a 	mov	r21,zero
  80b8b4:	0023883a 	mov	r17,zero
  80b8b8:	1000bf16 	blt	r2,zero,80bbb8 <_dtoa_r+0x1060>
  80b8bc:	d9802217 	ldw	r6,136(sp)
  80b8c0:	ddc00717 	ldw	r23,28(sp)
  80b8c4:	018c303a 	nor	r6,zero,r6
  80b8c8:	d9800515 	stw	r6,20(sp)
  80b8cc:	a80b883a 	mov	r5,r21
  80b8d0:	e009883a 	mov	r4,fp
  80b8d4:	080d90c0 	call	80d90c <_Bfree>
  80b8d8:	883e4926 	beq	r17,zero,80b200 <__alt_mem_onchip_mem+0xff803200>
  80b8dc:	003fad06 	br	80b794 <__alt_mem_onchip_mem+0xff803794>
  80b8e0:	d9c01117 	ldw	r7,68(sp)
  80b8e4:	3801bc26 	beq	r7,zero,80bfd8 <_dtoa_r+0x1480>
  80b8e8:	10810cc4 	addi	r2,r2,1075
  80b8ec:	dd400a17 	ldw	r21,40(sp)
  80b8f0:	dd000817 	ldw	r20,32(sp)
  80b8f4:	003f0a06 	br	80b520 <__alt_mem_onchip_mem+0xff803520>
  80b8f8:	00800704 	movi	r2,28
  80b8fc:	d9000817 	ldw	r4,32(sp)
  80b900:	a0a9883a 	add	r20,r20,r2
  80b904:	b0ad883a 	add	r22,r22,r2
  80b908:	2089883a 	add	r4,r4,r2
  80b90c:	d9000815 	stw	r4,32(sp)
  80b910:	003f5106 	br	80b658 <__alt_mem_onchip_mem+0xff803658>
  80b914:	d8c00317 	ldw	r3,12(sp)
  80b918:	b8c1fc0e 	bge	r23,r3,80c10c <_dtoa_r+0x15b4>
  80b91c:	0027883a 	mov	r19,zero
  80b920:	b805883a 	mov	r2,r23
  80b924:	003f3e06 	br	80b620 <__alt_mem_onchip_mem+0xff803620>
  80b928:	880b883a 	mov	r5,r17
  80b92c:	e009883a 	mov	r4,fp
  80b930:	000f883a 	mov	r7,zero
  80b934:	01800284 	movi	r6,10
  80b938:	080d9340 	call	80d934 <__multadd>
  80b93c:	d9000c17 	ldw	r4,48(sp)
  80b940:	1023883a 	mov	r17,r2
  80b944:	0102040e 	bge	zero,r4,80c158 <_dtoa_r+0x1600>
  80b948:	d9000615 	stw	r4,24(sp)
  80b94c:	0500050e 	bge	zero,r20,80b964 <_dtoa_r+0xe0c>
  80b950:	880b883a 	mov	r5,r17
  80b954:	a00d883a 	mov	r6,r20
  80b958:	e009883a 	mov	r4,fp
  80b95c:	080dfe40 	call	80dfe4 <__lshift>
  80b960:	1023883a 	mov	r17,r2
  80b964:	9801241e 	bne	r19,zero,80bdf8 <_dtoa_r+0x12a0>
  80b968:	8829883a 	mov	r20,r17
  80b96c:	d9000617 	ldw	r4,24(sp)
  80b970:	dcc00717 	ldw	r19,28(sp)
  80b974:	9480004c 	andi	r18,r18,1
  80b978:	20bfffc4 	addi	r2,r4,-1
  80b97c:	9885883a 	add	r2,r19,r2
  80b980:	d8800415 	stw	r2,16(sp)
  80b984:	dc800615 	stw	r18,24(sp)
  80b988:	a80b883a 	mov	r5,r21
  80b98c:	8009883a 	mov	r4,r16
  80b990:	080a9580 	call	80a958 <quorem>
  80b994:	880b883a 	mov	r5,r17
  80b998:	8009883a 	mov	r4,r16
  80b99c:	102f883a 	mov	r23,r2
  80b9a0:	080e12c0 	call	80e12c <__mcmp>
  80b9a4:	a80b883a 	mov	r5,r21
  80b9a8:	a00d883a 	mov	r6,r20
  80b9ac:	e009883a 	mov	r4,fp
  80b9b0:	102d883a 	mov	r22,r2
  80b9b4:	080e18c0 	call	80e18c <__mdiff>
  80b9b8:	1007883a 	mov	r3,r2
  80b9bc:	10800317 	ldw	r2,12(r2)
  80b9c0:	bc800c04 	addi	r18,r23,48
  80b9c4:	180b883a 	mov	r5,r3
  80b9c8:	10004e1e 	bne	r2,zero,80bb04 <_dtoa_r+0xfac>
  80b9cc:	8009883a 	mov	r4,r16
  80b9d0:	d8c01615 	stw	r3,88(sp)
  80b9d4:	080e12c0 	call	80e12c <__mcmp>
  80b9d8:	d8c01617 	ldw	r3,88(sp)
  80b9dc:	e009883a 	mov	r4,fp
  80b9e0:	d8801615 	stw	r2,88(sp)
  80b9e4:	180b883a 	mov	r5,r3
  80b9e8:	080d90c0 	call	80d90c <_Bfree>
  80b9ec:	d8801617 	ldw	r2,88(sp)
  80b9f0:	1000041e 	bne	r2,zero,80ba04 <_dtoa_r+0xeac>
  80b9f4:	d9800317 	ldw	r6,12(sp)
  80b9f8:	3000021e 	bne	r6,zero,80ba04 <_dtoa_r+0xeac>
  80b9fc:	d8c00617 	ldw	r3,24(sp)
  80ba00:	18003726 	beq	r3,zero,80bae0 <_dtoa_r+0xf88>
  80ba04:	b0002016 	blt	r22,zero,80ba88 <_dtoa_r+0xf30>
  80ba08:	b000041e 	bne	r22,zero,80ba1c <_dtoa_r+0xec4>
  80ba0c:	d9000317 	ldw	r4,12(sp)
  80ba10:	2000021e 	bne	r4,zero,80ba1c <_dtoa_r+0xec4>
  80ba14:	d8c00617 	ldw	r3,24(sp)
  80ba18:	18001b26 	beq	r3,zero,80ba88 <_dtoa_r+0xf30>
  80ba1c:	00810716 	blt	zero,r2,80be3c <_dtoa_r+0x12e4>
  80ba20:	d8c00417 	ldw	r3,16(sp)
  80ba24:	9d800044 	addi	r22,r19,1
  80ba28:	9c800005 	stb	r18,0(r19)
  80ba2c:	b02f883a 	mov	r23,r22
  80ba30:	98c10626 	beq	r19,r3,80be4c <_dtoa_r+0x12f4>
  80ba34:	800b883a 	mov	r5,r16
  80ba38:	000f883a 	mov	r7,zero
  80ba3c:	01800284 	movi	r6,10
  80ba40:	e009883a 	mov	r4,fp
  80ba44:	080d9340 	call	80d934 <__multadd>
  80ba48:	1021883a 	mov	r16,r2
  80ba4c:	000f883a 	mov	r7,zero
  80ba50:	01800284 	movi	r6,10
  80ba54:	880b883a 	mov	r5,r17
  80ba58:	e009883a 	mov	r4,fp
  80ba5c:	8d002526 	beq	r17,r20,80baf4 <_dtoa_r+0xf9c>
  80ba60:	080d9340 	call	80d934 <__multadd>
  80ba64:	a00b883a 	mov	r5,r20
  80ba68:	000f883a 	mov	r7,zero
  80ba6c:	01800284 	movi	r6,10
  80ba70:	e009883a 	mov	r4,fp
  80ba74:	1023883a 	mov	r17,r2
  80ba78:	080d9340 	call	80d934 <__multadd>
  80ba7c:	1029883a 	mov	r20,r2
  80ba80:	b027883a 	mov	r19,r22
  80ba84:	003fc006 	br	80b988 <__alt_mem_onchip_mem+0xff803988>
  80ba88:	9011883a 	mov	r8,r18
  80ba8c:	00800e0e 	bge	zero,r2,80bac8 <_dtoa_r+0xf70>
  80ba90:	800b883a 	mov	r5,r16
  80ba94:	01800044 	movi	r6,1
  80ba98:	e009883a 	mov	r4,fp
  80ba9c:	da001715 	stw	r8,92(sp)
  80baa0:	080dfe40 	call	80dfe4 <__lshift>
  80baa4:	a80b883a 	mov	r5,r21
  80baa8:	1009883a 	mov	r4,r2
  80baac:	1021883a 	mov	r16,r2
  80bab0:	080e12c0 	call	80e12c <__mcmp>
  80bab4:	da001717 	ldw	r8,92(sp)
  80bab8:	0081960e 	bge	zero,r2,80c114 <_dtoa_r+0x15bc>
  80babc:	00800e44 	movi	r2,57
  80bac0:	40817026 	beq	r8,r2,80c084 <_dtoa_r+0x152c>
  80bac4:	ba000c44 	addi	r8,r23,49
  80bac8:	8825883a 	mov	r18,r17
  80bacc:	9dc00044 	addi	r23,r19,1
  80bad0:	9a000005 	stb	r8,0(r19)
  80bad4:	a023883a 	mov	r17,r20
  80bad8:	dc000915 	stw	r16,36(sp)
  80badc:	003f2406 	br	80b770 <__alt_mem_onchip_mem+0xff803770>
  80bae0:	00800e44 	movi	r2,57
  80bae4:	9011883a 	mov	r8,r18
  80bae8:	90816626 	beq	r18,r2,80c084 <_dtoa_r+0x152c>
  80baec:	05bff516 	blt	zero,r22,80bac4 <__alt_mem_onchip_mem+0xff803ac4>
  80baf0:	003ff506 	br	80bac8 <__alt_mem_onchip_mem+0xff803ac8>
  80baf4:	080d9340 	call	80d934 <__multadd>
  80baf8:	1023883a 	mov	r17,r2
  80bafc:	1029883a 	mov	r20,r2
  80bb00:	003fdf06 	br	80ba80 <__alt_mem_onchip_mem+0xff803a80>
  80bb04:	e009883a 	mov	r4,fp
  80bb08:	080d90c0 	call	80d90c <_Bfree>
  80bb0c:	00800044 	movi	r2,1
  80bb10:	003fbc06 	br	80ba04 <__alt_mem_onchip_mem+0xff803a04>
  80bb14:	a80b883a 	mov	r5,r21
  80bb18:	8009883a 	mov	r4,r16
  80bb1c:	080e12c0 	call	80e12c <__mcmp>
  80bb20:	103edb0e 	bge	r2,zero,80b690 <__alt_mem_onchip_mem+0xff803690>
  80bb24:	800b883a 	mov	r5,r16
  80bb28:	000f883a 	mov	r7,zero
  80bb2c:	01800284 	movi	r6,10
  80bb30:	e009883a 	mov	r4,fp
  80bb34:	080d9340 	call	80d934 <__multadd>
  80bb38:	1021883a 	mov	r16,r2
  80bb3c:	d8800517 	ldw	r2,20(sp)
  80bb40:	d8c00b17 	ldw	r3,44(sp)
  80bb44:	10bfffc4 	addi	r2,r2,-1
  80bb48:	d8800515 	stw	r2,20(sp)
  80bb4c:	183f761e 	bne	r3,zero,80b928 <__alt_mem_onchip_mem+0xff803928>
  80bb50:	d9000c17 	ldw	r4,48(sp)
  80bb54:	0101730e 	bge	zero,r4,80c124 <_dtoa_r+0x15cc>
  80bb58:	d9000615 	stw	r4,24(sp)
  80bb5c:	003ed006 	br	80b6a0 <__alt_mem_onchip_mem+0xff8036a0>
  80bb60:	00800084 	movi	r2,2
  80bb64:	3081861e 	bne	r6,r2,80c180 <_dtoa_r+0x1628>
  80bb68:	d8000b15 	stw	zero,44(sp)
  80bb6c:	003f3c06 	br	80b860 <__alt_mem_onchip_mem+0xff803860>
  80bb70:	dc000917 	ldw	r16,36(sp)
  80bb74:	003e9206 	br	80b5c0 <__alt_mem_onchip_mem+0xff8035c0>
  80bb78:	d9c00317 	ldw	r7,12(sp)
  80bb7c:	00800084 	movi	r2,2
  80bb80:	11fec50e 	bge	r2,r7,80b698 <__alt_mem_onchip_mem+0xff803698>
  80bb84:	d9000617 	ldw	r4,24(sp)
  80bb88:	20013c1e 	bne	r4,zero,80c07c <_dtoa_r+0x1524>
  80bb8c:	a80b883a 	mov	r5,r21
  80bb90:	000f883a 	mov	r7,zero
  80bb94:	01800144 	movi	r6,5
  80bb98:	e009883a 	mov	r4,fp
  80bb9c:	080d9340 	call	80d934 <__multadd>
  80bba0:	100b883a 	mov	r5,r2
  80bba4:	8009883a 	mov	r4,r16
  80bba8:	102b883a 	mov	r21,r2
  80bbac:	080e12c0 	call	80e12c <__mcmp>
  80bbb0:	dc000915 	stw	r16,36(sp)
  80bbb4:	00bf410e 	bge	zero,r2,80b8bc <__alt_mem_onchip_mem+0xff8038bc>
  80bbb8:	d9c00717 	ldw	r7,28(sp)
  80bbbc:	00800c44 	movi	r2,49
  80bbc0:	38800005 	stb	r2,0(r7)
  80bbc4:	d8800517 	ldw	r2,20(sp)
  80bbc8:	3dc00044 	addi	r23,r7,1
  80bbcc:	10800044 	addi	r2,r2,1
  80bbd0:	d8800515 	stw	r2,20(sp)
  80bbd4:	003f3d06 	br	80b8cc <__alt_mem_onchip_mem+0xff8038cc>
  80bbd8:	d9800517 	ldw	r6,20(sp)
  80bbdc:	d9c00717 	ldw	r7,28(sp)
  80bbe0:	00800c44 	movi	r2,49
  80bbe4:	31800044 	addi	r6,r6,1
  80bbe8:	d9800515 	stw	r6,20(sp)
  80bbec:	38800005 	stb	r2,0(r7)
  80bbf0:	003edf06 	br	80b770 <__alt_mem_onchip_mem+0xff803770>
  80bbf4:	d8000b15 	stw	zero,44(sp)
  80bbf8:	003c9f06 	br	80ae78 <__alt_mem_onchip_mem+0xff802e78>
  80bbfc:	903e7e1e 	bne	r18,zero,80b5f8 <__alt_mem_onchip_mem+0xff8035f8>
  80bc00:	00800434 	movhi	r2,16
  80bc04:	10bfffc4 	addi	r2,r2,-1
  80bc08:	9884703a 	and	r2,r19,r2
  80bc0c:	1000ea1e 	bne	r2,zero,80bfb8 <_dtoa_r+0x1460>
  80bc10:	9cdffc2c 	andhi	r19,r19,32752
  80bc14:	9800e826 	beq	r19,zero,80bfb8 <_dtoa_r+0x1460>
  80bc18:	d9c00817 	ldw	r7,32(sp)
  80bc1c:	b5800044 	addi	r22,r22,1
  80bc20:	04c00044 	movi	r19,1
  80bc24:	39c00044 	addi	r7,r7,1
  80bc28:	d9c00815 	stw	r7,32(sp)
  80bc2c:	d8800d17 	ldw	r2,52(sp)
  80bc30:	103e721e 	bne	r2,zero,80b5fc <__alt_mem_onchip_mem+0xff8035fc>
  80bc34:	00800044 	movi	r2,1
  80bc38:	003e7906 	br	80b620 <__alt_mem_onchip_mem+0xff803620>
  80bc3c:	8009883a 	mov	r4,r16
  80bc40:	0806b080 	call	806b08 <__floatsidf>
  80bc44:	d9800f17 	ldw	r6,60(sp)
  80bc48:	d9c01017 	ldw	r7,64(sp)
  80bc4c:	1009883a 	mov	r4,r2
  80bc50:	180b883a 	mov	r5,r3
  80bc54:	08124080 	call	812408 <__muldf3>
  80bc58:	000d883a 	mov	r6,zero
  80bc5c:	01d00734 	movhi	r7,16412
  80bc60:	1009883a 	mov	r4,r2
  80bc64:	180b883a 	mov	r5,r3
  80bc68:	08057900 	call	805790 <__adddf3>
  80bc6c:	047f3034 	movhi	r17,64704
  80bc70:	1021883a 	mov	r16,r2
  80bc74:	1c63883a 	add	r17,r3,r17
  80bc78:	d9000f17 	ldw	r4,60(sp)
  80bc7c:	d9401017 	ldw	r5,64(sp)
  80bc80:	000d883a 	mov	r6,zero
  80bc84:	01d00534 	movhi	r7,16404
  80bc88:	080620c0 	call	80620c <__subdf3>
  80bc8c:	800d883a 	mov	r6,r16
  80bc90:	880f883a 	mov	r7,r17
  80bc94:	1009883a 	mov	r4,r2
  80bc98:	180b883a 	mov	r5,r3
  80bc9c:	102b883a 	mov	r21,r2
  80bca0:	1829883a 	mov	r20,r3
  80bca4:	080603c0 	call	80603c <__gedf2>
  80bca8:	00806c16 	blt	zero,r2,80be5c <_dtoa_r+0x1304>
  80bcac:	89e0003c 	xorhi	r7,r17,32768
  80bcb0:	800d883a 	mov	r6,r16
  80bcb4:	a809883a 	mov	r4,r21
  80bcb8:	a00b883a 	mov	r5,r20
  80bcbc:	08061180 	call	806118 <__ledf2>
  80bcc0:	103d7e0e 	bge	r2,zero,80b2bc <__alt_mem_onchip_mem+0xff8032bc>
  80bcc4:	002b883a 	mov	r21,zero
  80bcc8:	0023883a 	mov	r17,zero
  80bccc:	003efb06 	br	80b8bc <__alt_mem_onchip_mem+0xff8038bc>
  80bcd0:	d8800717 	ldw	r2,28(sp)
  80bcd4:	003bd006 	br	80ac18 <__alt_mem_onchip_mem+0xff802c18>
  80bcd8:	d9000a17 	ldw	r4,40(sp)
  80bcdc:	d9800d17 	ldw	r6,52(sp)
  80bce0:	dd400a15 	stw	r21,40(sp)
  80bce4:	a905c83a 	sub	r2,r21,r4
  80bce8:	308d883a 	add	r6,r6,r2
  80bcec:	d9800d15 	stw	r6,52(sp)
  80bcf0:	002b883a 	mov	r21,zero
  80bcf4:	003e0606 	br	80b510 <__alt_mem_onchip_mem+0xff803510>
  80bcf8:	9023883a 	mov	r17,r18
  80bcfc:	9829883a 	mov	r20,r19
  80bd00:	04000084 	movi	r16,2
  80bd04:	003c9206 	br	80af50 <__alt_mem_onchip_mem+0xff802f50>
  80bd08:	04000044 	movi	r16,1
  80bd0c:	dc000c15 	stw	r16,48(sp)
  80bd10:	dc000615 	stw	r16,24(sp)
  80bd14:	dc002215 	stw	r16,136(sp)
  80bd18:	e0001115 	stw	zero,68(fp)
  80bd1c:	000b883a 	mov	r5,zero
  80bd20:	003c6906 	br	80aec8 <__alt_mem_onchip_mem+0xff802ec8>
  80bd24:	3021883a 	mov	r16,r6
  80bd28:	003ffb06 	br	80bd18 <__alt_mem_onchip_mem+0xff803d18>
  80bd2c:	1000021e 	bne	r2,zero,80bd38 <_dtoa_r+0x11e0>
  80bd30:	4200004c 	andi	r8,r8,1
  80bd34:	403e7d1e 	bne	r8,zero,80b72c <__alt_mem_onchip_mem+0xff80372c>
  80bd38:	01000c04 	movi	r4,48
  80bd3c:	00000106 	br	80bd44 <_dtoa_r+0x11ec>
  80bd40:	102f883a 	mov	r23,r2
  80bd44:	b8bfffc4 	addi	r2,r23,-1
  80bd48:	10c00007 	ldb	r3,0(r2)
  80bd4c:	193ffc26 	beq	r3,r4,80bd40 <__alt_mem_onchip_mem+0xff803d40>
  80bd50:	003e8706 	br	80b770 <__alt_mem_onchip_mem+0xff803770>
  80bd54:	d8800517 	ldw	r2,20(sp)
  80bd58:	00a3c83a 	sub	r17,zero,r2
  80bd5c:	8800a426 	beq	r17,zero,80bff0 <_dtoa_r+0x1498>
  80bd60:	888003cc 	andi	r2,r17,15
  80bd64:	100490fa 	slli	r2,r2,3
  80bd68:	00c02074 	movhi	r3,129
  80bd6c:	18dc7504 	addi	r3,r3,29140
  80bd70:	1885883a 	add	r2,r3,r2
  80bd74:	11800017 	ldw	r6,0(r2)
  80bd78:	11c00117 	ldw	r7,4(r2)
  80bd7c:	9009883a 	mov	r4,r18
  80bd80:	980b883a 	mov	r5,r19
  80bd84:	8823d13a 	srai	r17,r17,4
  80bd88:	08124080 	call	812408 <__muldf3>
  80bd8c:	d8800f15 	stw	r2,60(sp)
  80bd90:	d8c01015 	stw	r3,64(sp)
  80bd94:	8800e826 	beq	r17,zero,80c138 <_dtoa_r+0x15e0>
  80bd98:	05002074 	movhi	r20,129
  80bd9c:	a51c6b04 	addi	r20,r20,29100
  80bda0:	04000084 	movi	r16,2
  80bda4:	8980004c 	andi	r6,r17,1
  80bda8:	1009883a 	mov	r4,r2
  80bdac:	8823d07a 	srai	r17,r17,1
  80bdb0:	180b883a 	mov	r5,r3
  80bdb4:	30000426 	beq	r6,zero,80bdc8 <_dtoa_r+0x1270>
  80bdb8:	a1800017 	ldw	r6,0(r20)
  80bdbc:	a1c00117 	ldw	r7,4(r20)
  80bdc0:	84000044 	addi	r16,r16,1
  80bdc4:	08124080 	call	812408 <__muldf3>
  80bdc8:	a5000204 	addi	r20,r20,8
  80bdcc:	883ff51e 	bne	r17,zero,80bda4 <__alt_mem_onchip_mem+0xff803da4>
  80bdd0:	d8800f15 	stw	r2,60(sp)
  80bdd4:	d8c01015 	stw	r3,64(sp)
  80bdd8:	003c7606 	br	80afb4 <__alt_mem_onchip_mem+0xff802fb4>
  80bddc:	00c00c04 	movi	r3,48
  80bde0:	10c00005 	stb	r3,0(r2)
  80bde4:	d8c00517 	ldw	r3,20(sp)
  80bde8:	bd3fffc3 	ldbu	r20,-1(r23)
  80bdec:	18c00044 	addi	r3,r3,1
  80bdf0:	d8c00515 	stw	r3,20(sp)
  80bdf4:	003db906 	br	80b4dc <__alt_mem_onchip_mem+0xff8034dc>
  80bdf8:	89400117 	ldw	r5,4(r17)
  80bdfc:	e009883a 	mov	r4,fp
  80be00:	080d8640 	call	80d864 <_Balloc>
  80be04:	89800417 	ldw	r6,16(r17)
  80be08:	89400304 	addi	r5,r17,12
  80be0c:	11000304 	addi	r4,r2,12
  80be10:	31800084 	addi	r6,r6,2
  80be14:	318d883a 	add	r6,r6,r6
  80be18:	318d883a 	add	r6,r6,r6
  80be1c:	1027883a 	mov	r19,r2
  80be20:	080d5c00 	call	80d5c0 <memcpy>
  80be24:	01800044 	movi	r6,1
  80be28:	980b883a 	mov	r5,r19
  80be2c:	e009883a 	mov	r4,fp
  80be30:	080dfe40 	call	80dfe4 <__lshift>
  80be34:	1029883a 	mov	r20,r2
  80be38:	003ecc06 	br	80b96c <__alt_mem_onchip_mem+0xff80396c>
  80be3c:	00800e44 	movi	r2,57
  80be40:	90809026 	beq	r18,r2,80c084 <_dtoa_r+0x152c>
  80be44:	92000044 	addi	r8,r18,1
  80be48:	003f1f06 	br	80bac8 <__alt_mem_onchip_mem+0xff803ac8>
  80be4c:	9011883a 	mov	r8,r18
  80be50:	8825883a 	mov	r18,r17
  80be54:	a023883a 	mov	r17,r20
  80be58:	003e2906 	br	80b700 <__alt_mem_onchip_mem+0xff803700>
  80be5c:	002b883a 	mov	r21,zero
  80be60:	0023883a 	mov	r17,zero
  80be64:	003f5406 	br	80bbb8 <__alt_mem_onchip_mem+0xff803bb8>
  80be68:	61bfffc4 	addi	r6,r12,-1
  80be6c:	300490fa 	slli	r2,r6,3
  80be70:	00c02074 	movhi	r3,129
  80be74:	18dc7504 	addi	r3,r3,29140
  80be78:	1885883a 	add	r2,r3,r2
  80be7c:	11000017 	ldw	r4,0(r2)
  80be80:	11400117 	ldw	r5,4(r2)
  80be84:	d8800717 	ldw	r2,28(sp)
  80be88:	880f883a 	mov	r7,r17
  80be8c:	d9801215 	stw	r6,72(sp)
  80be90:	800d883a 	mov	r6,r16
  80be94:	db001615 	stw	r12,88(sp)
  80be98:	15c00044 	addi	r23,r2,1
  80be9c:	08124080 	call	812408 <__muldf3>
  80bea0:	d9401017 	ldw	r5,64(sp)
  80bea4:	d9000f17 	ldw	r4,60(sp)
  80bea8:	d8c01515 	stw	r3,84(sp)
  80beac:	d8801415 	stw	r2,80(sp)
  80beb0:	0812b200 	call	812b20 <__fixdfsi>
  80beb4:	1009883a 	mov	r4,r2
  80beb8:	1021883a 	mov	r16,r2
  80bebc:	0806b080 	call	806b08 <__floatsidf>
  80bec0:	d9000f17 	ldw	r4,60(sp)
  80bec4:	d9401017 	ldw	r5,64(sp)
  80bec8:	100d883a 	mov	r6,r2
  80becc:	180f883a 	mov	r7,r3
  80bed0:	080620c0 	call	80620c <__subdf3>
  80bed4:	1829883a 	mov	r20,r3
  80bed8:	d8c00717 	ldw	r3,28(sp)
  80bedc:	84000c04 	addi	r16,r16,48
  80bee0:	1023883a 	mov	r17,r2
  80bee4:	1c000005 	stb	r16,0(r3)
  80bee8:	db001617 	ldw	r12,88(sp)
  80beec:	00800044 	movi	r2,1
  80bef0:	60802226 	beq	r12,r2,80bf7c <_dtoa_r+0x1424>
  80bef4:	d9c00717 	ldw	r7,28(sp)
  80bef8:	8805883a 	mov	r2,r17
  80befc:	b82b883a 	mov	r21,r23
  80bf00:	3b19883a 	add	r12,r7,r12
  80bf04:	6023883a 	mov	r17,r12
  80bf08:	a007883a 	mov	r3,r20
  80bf0c:	dc800f15 	stw	r18,60(sp)
  80bf10:	000d883a 	mov	r6,zero
  80bf14:	01d00934 	movhi	r7,16420
  80bf18:	1009883a 	mov	r4,r2
  80bf1c:	180b883a 	mov	r5,r3
  80bf20:	08124080 	call	812408 <__muldf3>
  80bf24:	180b883a 	mov	r5,r3
  80bf28:	1009883a 	mov	r4,r2
  80bf2c:	1829883a 	mov	r20,r3
  80bf30:	1025883a 	mov	r18,r2
  80bf34:	0812b200 	call	812b20 <__fixdfsi>
  80bf38:	1009883a 	mov	r4,r2
  80bf3c:	1021883a 	mov	r16,r2
  80bf40:	0806b080 	call	806b08 <__floatsidf>
  80bf44:	100d883a 	mov	r6,r2
  80bf48:	180f883a 	mov	r7,r3
  80bf4c:	9009883a 	mov	r4,r18
  80bf50:	a00b883a 	mov	r5,r20
  80bf54:	84000c04 	addi	r16,r16,48
  80bf58:	080620c0 	call	80620c <__subdf3>
  80bf5c:	ad400044 	addi	r21,r21,1
  80bf60:	ac3fffc5 	stb	r16,-1(r21)
  80bf64:	ac7fea1e 	bne	r21,r17,80bf10 <__alt_mem_onchip_mem+0xff803f10>
  80bf68:	1023883a 	mov	r17,r2
  80bf6c:	d8801217 	ldw	r2,72(sp)
  80bf70:	dc800f17 	ldw	r18,60(sp)
  80bf74:	1829883a 	mov	r20,r3
  80bf78:	b8af883a 	add	r23,r23,r2
  80bf7c:	d9001417 	ldw	r4,80(sp)
  80bf80:	d9401517 	ldw	r5,84(sp)
  80bf84:	000d883a 	mov	r6,zero
  80bf88:	01cff834 	movhi	r7,16352
  80bf8c:	08057900 	call	805790 <__adddf3>
  80bf90:	880d883a 	mov	r6,r17
  80bf94:	a00f883a 	mov	r7,r20
  80bf98:	1009883a 	mov	r4,r2
  80bf9c:	180b883a 	mov	r5,r3
  80bfa0:	08061180 	call	806118 <__ledf2>
  80bfa4:	10003e0e 	bge	r2,zero,80c0a0 <_dtoa_r+0x1548>
  80bfa8:	d9001317 	ldw	r4,76(sp)
  80bfac:	bd3fffc3 	ldbu	r20,-1(r23)
  80bfb0:	d9000515 	stw	r4,20(sp)
  80bfb4:	003d3b06 	br	80b4a4 <__alt_mem_onchip_mem+0xff8034a4>
  80bfb8:	0027883a 	mov	r19,zero
  80bfbc:	003f1b06 	br	80bc2c <__alt_mem_onchip_mem+0xff803c2c>
  80bfc0:	d8800817 	ldw	r2,32(sp)
  80bfc4:	11e9c83a 	sub	r20,r2,r7
  80bfc8:	0005883a 	mov	r2,zero
  80bfcc:	003d5406 	br	80b520 <__alt_mem_onchip_mem+0xff803520>
  80bfd0:	00800044 	movi	r2,1
  80bfd4:	003dc706 	br	80b6f4 <__alt_mem_onchip_mem+0xff8036f4>
  80bfd8:	d8c00217 	ldw	r3,8(sp)
  80bfdc:	00800d84 	movi	r2,54
  80bfe0:	dd400a17 	ldw	r21,40(sp)
  80bfe4:	10c5c83a 	sub	r2,r2,r3
  80bfe8:	dd000817 	ldw	r20,32(sp)
  80bfec:	003d4c06 	br	80b520 <__alt_mem_onchip_mem+0xff803520>
  80bff0:	dc800f15 	stw	r18,60(sp)
  80bff4:	dcc01015 	stw	r19,64(sp)
  80bff8:	04000084 	movi	r16,2
  80bffc:	003bed06 	br	80afb4 <__alt_mem_onchip_mem+0xff802fb4>
  80c000:	d9000617 	ldw	r4,24(sp)
  80c004:	203f0d26 	beq	r4,zero,80bc3c <__alt_mem_onchip_mem+0xff803c3c>
  80c008:	d9800c17 	ldw	r6,48(sp)
  80c00c:	01bcab0e 	bge	zero,r6,80b2bc <__alt_mem_onchip_mem+0xff8032bc>
  80c010:	d9401017 	ldw	r5,64(sp)
  80c014:	d9000f17 	ldw	r4,60(sp)
  80c018:	000d883a 	mov	r6,zero
  80c01c:	01d00934 	movhi	r7,16420
  80c020:	08124080 	call	812408 <__muldf3>
  80c024:	81000044 	addi	r4,r16,1
  80c028:	d8800f15 	stw	r2,60(sp)
  80c02c:	d8c01015 	stw	r3,64(sp)
  80c030:	0806b080 	call	806b08 <__floatsidf>
  80c034:	d9800f17 	ldw	r6,60(sp)
  80c038:	d9c01017 	ldw	r7,64(sp)
  80c03c:	1009883a 	mov	r4,r2
  80c040:	180b883a 	mov	r5,r3
  80c044:	08124080 	call	812408 <__muldf3>
  80c048:	01d00734 	movhi	r7,16412
  80c04c:	000d883a 	mov	r6,zero
  80c050:	1009883a 	mov	r4,r2
  80c054:	180b883a 	mov	r5,r3
  80c058:	08057900 	call	805790 <__adddf3>
  80c05c:	d9c00517 	ldw	r7,20(sp)
  80c060:	047f3034 	movhi	r17,64704
  80c064:	1021883a 	mov	r16,r2
  80c068:	39ffffc4 	addi	r7,r7,-1
  80c06c:	d9c01315 	stw	r7,76(sp)
  80c070:	1c63883a 	add	r17,r3,r17
  80c074:	db000c17 	ldw	r12,48(sp)
  80c078:	003bea06 	br	80b024 <__alt_mem_onchip_mem+0xff803024>
  80c07c:	dc000915 	stw	r16,36(sp)
  80c080:	003e0e06 	br	80b8bc <__alt_mem_onchip_mem+0xff8038bc>
  80c084:	01000e44 	movi	r4,57
  80c088:	8825883a 	mov	r18,r17
  80c08c:	9dc00044 	addi	r23,r19,1
  80c090:	99000005 	stb	r4,0(r19)
  80c094:	a023883a 	mov	r17,r20
  80c098:	dc000915 	stw	r16,36(sp)
  80c09c:	003da406 	br	80b730 <__alt_mem_onchip_mem+0xff803730>
  80c0a0:	d9801417 	ldw	r6,80(sp)
  80c0a4:	d9c01517 	ldw	r7,84(sp)
  80c0a8:	0009883a 	mov	r4,zero
  80c0ac:	014ff834 	movhi	r5,16352
  80c0b0:	080620c0 	call	80620c <__subdf3>
  80c0b4:	880d883a 	mov	r6,r17
  80c0b8:	a00f883a 	mov	r7,r20
  80c0bc:	1009883a 	mov	r4,r2
  80c0c0:	180b883a 	mov	r5,r3
  80c0c4:	080603c0 	call	80603c <__gedf2>
  80c0c8:	00bc7c0e 	bge	zero,r2,80b2bc <__alt_mem_onchip_mem+0xff8032bc>
  80c0cc:	01000c04 	movi	r4,48
  80c0d0:	00000106 	br	80c0d8 <_dtoa_r+0x1580>
  80c0d4:	102f883a 	mov	r23,r2
  80c0d8:	b8bfffc4 	addi	r2,r23,-1
  80c0dc:	10c00007 	ldb	r3,0(r2)
  80c0e0:	193ffc26 	beq	r3,r4,80c0d4 <__alt_mem_onchip_mem+0xff8040d4>
  80c0e4:	d9801317 	ldw	r6,76(sp)
  80c0e8:	d9800515 	stw	r6,20(sp)
  80c0ec:	003c4406 	br	80b200 <__alt_mem_onchip_mem+0xff803200>
  80c0f0:	d9801317 	ldw	r6,76(sp)
  80c0f4:	d9800515 	stw	r6,20(sp)
  80c0f8:	003cea06 	br	80b4a4 <__alt_mem_onchip_mem+0xff8034a4>
  80c0fc:	dd800f17 	ldw	r22,60(sp)
  80c100:	dcc01017 	ldw	r19,64(sp)
  80c104:	dc801217 	ldw	r18,72(sp)
  80c108:	003c6c06 	br	80b2bc <__alt_mem_onchip_mem+0xff8032bc>
  80c10c:	903e031e 	bne	r18,zero,80b91c <__alt_mem_onchip_mem+0xff80391c>
  80c110:	003ebb06 	br	80bc00 <__alt_mem_onchip_mem+0xff803c00>
  80c114:	103e6c1e 	bne	r2,zero,80bac8 <__alt_mem_onchip_mem+0xff803ac8>
  80c118:	4080004c 	andi	r2,r8,1
  80c11c:	103e6a26 	beq	r2,zero,80bac8 <__alt_mem_onchip_mem+0xff803ac8>
  80c120:	003e6606 	br	80babc <__alt_mem_onchip_mem+0xff803abc>
  80c124:	d8c00317 	ldw	r3,12(sp)
  80c128:	00800084 	movi	r2,2
  80c12c:	10c02916 	blt	r2,r3,80c1d4 <_dtoa_r+0x167c>
  80c130:	d9000c17 	ldw	r4,48(sp)
  80c134:	003e8806 	br	80bb58 <__alt_mem_onchip_mem+0xff803b58>
  80c138:	04000084 	movi	r16,2
  80c13c:	003b9d06 	br	80afb4 <__alt_mem_onchip_mem+0xff802fb4>
  80c140:	d9001317 	ldw	r4,76(sp)
  80c144:	d9000515 	stw	r4,20(sp)
  80c148:	003cd606 	br	80b4a4 <__alt_mem_onchip_mem+0xff8034a4>
  80c14c:	d8801317 	ldw	r2,76(sp)
  80c150:	d8800515 	stw	r2,20(sp)
  80c154:	003c2a06 	br	80b200 <__alt_mem_onchip_mem+0xff803200>
  80c158:	d9800317 	ldw	r6,12(sp)
  80c15c:	00800084 	movi	r2,2
  80c160:	11801516 	blt	r2,r6,80c1b8 <_dtoa_r+0x1660>
  80c164:	d9c00c17 	ldw	r7,48(sp)
  80c168:	d9c00615 	stw	r7,24(sp)
  80c16c:	003df706 	br	80b94c <__alt_mem_onchip_mem+0xff80394c>
  80c170:	193d3926 	beq	r3,r4,80b658 <__alt_mem_onchip_mem+0xff803658>
  80c174:	00c00f04 	movi	r3,60
  80c178:	1885c83a 	sub	r2,r3,r2
  80c17c:	003ddf06 	br	80b8fc <__alt_mem_onchip_mem+0xff8038fc>
  80c180:	e009883a 	mov	r4,fp
  80c184:	e0001115 	stw	zero,68(fp)
  80c188:	000b883a 	mov	r5,zero
  80c18c:	080d8640 	call	80d864 <_Balloc>
  80c190:	d8800715 	stw	r2,28(sp)
  80c194:	d8c00717 	ldw	r3,28(sp)
  80c198:	00bfffc4 	movi	r2,-1
  80c19c:	01000044 	movi	r4,1
  80c1a0:	d8800c15 	stw	r2,48(sp)
  80c1a4:	e0c01015 	stw	r3,64(fp)
  80c1a8:	d9000b15 	stw	r4,44(sp)
  80c1ac:	d8800615 	stw	r2,24(sp)
  80c1b0:	d8002215 	stw	zero,136(sp)
  80c1b4:	003c4106 	br	80b2bc <__alt_mem_onchip_mem+0xff8032bc>
  80c1b8:	d8c00c17 	ldw	r3,48(sp)
  80c1bc:	d8c00615 	stw	r3,24(sp)
  80c1c0:	003e7006 	br	80bb84 <__alt_mem_onchip_mem+0xff803b84>
  80c1c4:	04400044 	movi	r17,1
  80c1c8:	003b2006 	br	80ae4c <__alt_mem_onchip_mem+0xff802e4c>
  80c1cc:	000b883a 	mov	r5,zero
  80c1d0:	003b3d06 	br	80aec8 <__alt_mem_onchip_mem+0xff802ec8>
  80c1d4:	d8800c17 	ldw	r2,48(sp)
  80c1d8:	d8800615 	stw	r2,24(sp)
  80c1dc:	003e6906 	br	80bb84 <__alt_mem_onchip_mem+0xff803b84>

0080c1e0 <__sflush_r>:
  80c1e0:	2880030b 	ldhu	r2,12(r5)
  80c1e4:	defffb04 	addi	sp,sp,-20
  80c1e8:	dcc00315 	stw	r19,12(sp)
  80c1ec:	dc400115 	stw	r17,4(sp)
  80c1f0:	dfc00415 	stw	ra,16(sp)
  80c1f4:	dc800215 	stw	r18,8(sp)
  80c1f8:	dc000015 	stw	r16,0(sp)
  80c1fc:	10c0020c 	andi	r3,r2,8
  80c200:	2823883a 	mov	r17,r5
  80c204:	2027883a 	mov	r19,r4
  80c208:	1800311e 	bne	r3,zero,80c2d0 <__sflush_r+0xf0>
  80c20c:	28c00117 	ldw	r3,4(r5)
  80c210:	10820014 	ori	r2,r2,2048
  80c214:	2880030d 	sth	r2,12(r5)
  80c218:	00c04b0e 	bge	zero,r3,80c348 <__sflush_r+0x168>
  80c21c:	8a000a17 	ldw	r8,40(r17)
  80c220:	40002326 	beq	r8,zero,80c2b0 <__sflush_r+0xd0>
  80c224:	9c000017 	ldw	r16,0(r19)
  80c228:	10c4000c 	andi	r3,r2,4096
  80c22c:	98000015 	stw	zero,0(r19)
  80c230:	18004826 	beq	r3,zero,80c354 <__sflush_r+0x174>
  80c234:	89801417 	ldw	r6,80(r17)
  80c238:	10c0010c 	andi	r3,r2,4
  80c23c:	18000626 	beq	r3,zero,80c258 <__sflush_r+0x78>
  80c240:	88c00117 	ldw	r3,4(r17)
  80c244:	88800c17 	ldw	r2,48(r17)
  80c248:	30cdc83a 	sub	r6,r6,r3
  80c24c:	10000226 	beq	r2,zero,80c258 <__sflush_r+0x78>
  80c250:	88800f17 	ldw	r2,60(r17)
  80c254:	308dc83a 	sub	r6,r6,r2
  80c258:	89400717 	ldw	r5,28(r17)
  80c25c:	000f883a 	mov	r7,zero
  80c260:	9809883a 	mov	r4,r19
  80c264:	403ee83a 	callr	r8
  80c268:	00ffffc4 	movi	r3,-1
  80c26c:	10c04426 	beq	r2,r3,80c380 <__sflush_r+0x1a0>
  80c270:	88c0030b 	ldhu	r3,12(r17)
  80c274:	89000417 	ldw	r4,16(r17)
  80c278:	88000115 	stw	zero,4(r17)
  80c27c:	197dffcc 	andi	r5,r3,63487
  80c280:	8940030d 	sth	r5,12(r17)
  80c284:	89000015 	stw	r4,0(r17)
  80c288:	18c4000c 	andi	r3,r3,4096
  80c28c:	18002c1e 	bne	r3,zero,80c340 <__sflush_r+0x160>
  80c290:	89400c17 	ldw	r5,48(r17)
  80c294:	9c000015 	stw	r16,0(r19)
  80c298:	28000526 	beq	r5,zero,80c2b0 <__sflush_r+0xd0>
  80c29c:	88801004 	addi	r2,r17,64
  80c2a0:	28800226 	beq	r5,r2,80c2ac <__sflush_r+0xcc>
  80c2a4:	9809883a 	mov	r4,r19
  80c2a8:	080c9f80 	call	80c9f8 <_free_r>
  80c2ac:	88000c15 	stw	zero,48(r17)
  80c2b0:	0005883a 	mov	r2,zero
  80c2b4:	dfc00417 	ldw	ra,16(sp)
  80c2b8:	dcc00317 	ldw	r19,12(sp)
  80c2bc:	dc800217 	ldw	r18,8(sp)
  80c2c0:	dc400117 	ldw	r17,4(sp)
  80c2c4:	dc000017 	ldw	r16,0(sp)
  80c2c8:	dec00504 	addi	sp,sp,20
  80c2cc:	f800283a 	ret
  80c2d0:	2c800417 	ldw	r18,16(r5)
  80c2d4:	903ff626 	beq	r18,zero,80c2b0 <__alt_mem_onchip_mem+0xff8042b0>
  80c2d8:	2c000017 	ldw	r16,0(r5)
  80c2dc:	108000cc 	andi	r2,r2,3
  80c2e0:	2c800015 	stw	r18,0(r5)
  80c2e4:	84a1c83a 	sub	r16,r16,r18
  80c2e8:	1000131e 	bne	r2,zero,80c338 <__sflush_r+0x158>
  80c2ec:	28800517 	ldw	r2,20(r5)
  80c2f0:	88800215 	stw	r2,8(r17)
  80c2f4:	04000316 	blt	zero,r16,80c304 <__sflush_r+0x124>
  80c2f8:	003fed06 	br	80c2b0 <__alt_mem_onchip_mem+0xff8042b0>
  80c2fc:	90a5883a 	add	r18,r18,r2
  80c300:	043feb0e 	bge	zero,r16,80c2b0 <__alt_mem_onchip_mem+0xff8042b0>
  80c304:	88800917 	ldw	r2,36(r17)
  80c308:	89400717 	ldw	r5,28(r17)
  80c30c:	800f883a 	mov	r7,r16
  80c310:	900d883a 	mov	r6,r18
  80c314:	9809883a 	mov	r4,r19
  80c318:	103ee83a 	callr	r2
  80c31c:	80a1c83a 	sub	r16,r16,r2
  80c320:	00bff616 	blt	zero,r2,80c2fc <__alt_mem_onchip_mem+0xff8042fc>
  80c324:	88c0030b 	ldhu	r3,12(r17)
  80c328:	00bfffc4 	movi	r2,-1
  80c32c:	18c01014 	ori	r3,r3,64
  80c330:	88c0030d 	sth	r3,12(r17)
  80c334:	003fdf06 	br	80c2b4 <__alt_mem_onchip_mem+0xff8042b4>
  80c338:	0005883a 	mov	r2,zero
  80c33c:	003fec06 	br	80c2f0 <__alt_mem_onchip_mem+0xff8042f0>
  80c340:	88801415 	stw	r2,80(r17)
  80c344:	003fd206 	br	80c290 <__alt_mem_onchip_mem+0xff804290>
  80c348:	28c00f17 	ldw	r3,60(r5)
  80c34c:	00ffb316 	blt	zero,r3,80c21c <__alt_mem_onchip_mem+0xff80421c>
  80c350:	003fd706 	br	80c2b0 <__alt_mem_onchip_mem+0xff8042b0>
  80c354:	89400717 	ldw	r5,28(r17)
  80c358:	000d883a 	mov	r6,zero
  80c35c:	01c00044 	movi	r7,1
  80c360:	9809883a 	mov	r4,r19
  80c364:	403ee83a 	callr	r8
  80c368:	100d883a 	mov	r6,r2
  80c36c:	00bfffc4 	movi	r2,-1
  80c370:	30801426 	beq	r6,r2,80c3c4 <__sflush_r+0x1e4>
  80c374:	8880030b 	ldhu	r2,12(r17)
  80c378:	8a000a17 	ldw	r8,40(r17)
  80c37c:	003fae06 	br	80c238 <__alt_mem_onchip_mem+0xff804238>
  80c380:	98c00017 	ldw	r3,0(r19)
  80c384:	183fba26 	beq	r3,zero,80c270 <__alt_mem_onchip_mem+0xff804270>
  80c388:	01000744 	movi	r4,29
  80c38c:	19000626 	beq	r3,r4,80c3a8 <__sflush_r+0x1c8>
  80c390:	01000584 	movi	r4,22
  80c394:	19000426 	beq	r3,r4,80c3a8 <__sflush_r+0x1c8>
  80c398:	88c0030b 	ldhu	r3,12(r17)
  80c39c:	18c01014 	ori	r3,r3,64
  80c3a0:	88c0030d 	sth	r3,12(r17)
  80c3a4:	003fc306 	br	80c2b4 <__alt_mem_onchip_mem+0xff8042b4>
  80c3a8:	8880030b 	ldhu	r2,12(r17)
  80c3ac:	88c00417 	ldw	r3,16(r17)
  80c3b0:	88000115 	stw	zero,4(r17)
  80c3b4:	10bdffcc 	andi	r2,r2,63487
  80c3b8:	8880030d 	sth	r2,12(r17)
  80c3bc:	88c00015 	stw	r3,0(r17)
  80c3c0:	003fb306 	br	80c290 <__alt_mem_onchip_mem+0xff804290>
  80c3c4:	98800017 	ldw	r2,0(r19)
  80c3c8:	103fea26 	beq	r2,zero,80c374 <__alt_mem_onchip_mem+0xff804374>
  80c3cc:	00c00744 	movi	r3,29
  80c3d0:	10c00226 	beq	r2,r3,80c3dc <__sflush_r+0x1fc>
  80c3d4:	00c00584 	movi	r3,22
  80c3d8:	10c0031e 	bne	r2,r3,80c3e8 <__sflush_r+0x208>
  80c3dc:	9c000015 	stw	r16,0(r19)
  80c3e0:	0005883a 	mov	r2,zero
  80c3e4:	003fb306 	br	80c2b4 <__alt_mem_onchip_mem+0xff8042b4>
  80c3e8:	88c0030b 	ldhu	r3,12(r17)
  80c3ec:	3005883a 	mov	r2,r6
  80c3f0:	18c01014 	ori	r3,r3,64
  80c3f4:	88c0030d 	sth	r3,12(r17)
  80c3f8:	003fae06 	br	80c2b4 <__alt_mem_onchip_mem+0xff8042b4>

0080c3fc <_fflush_r>:
  80c3fc:	defffd04 	addi	sp,sp,-12
  80c400:	dc000115 	stw	r16,4(sp)
  80c404:	dfc00215 	stw	ra,8(sp)
  80c408:	2021883a 	mov	r16,r4
  80c40c:	20000226 	beq	r4,zero,80c418 <_fflush_r+0x1c>
  80c410:	20800e17 	ldw	r2,56(r4)
  80c414:	10000c26 	beq	r2,zero,80c448 <_fflush_r+0x4c>
  80c418:	2880030f 	ldh	r2,12(r5)
  80c41c:	1000051e 	bne	r2,zero,80c434 <_fflush_r+0x38>
  80c420:	0005883a 	mov	r2,zero
  80c424:	dfc00217 	ldw	ra,8(sp)
  80c428:	dc000117 	ldw	r16,4(sp)
  80c42c:	dec00304 	addi	sp,sp,12
  80c430:	f800283a 	ret
  80c434:	8009883a 	mov	r4,r16
  80c438:	dfc00217 	ldw	ra,8(sp)
  80c43c:	dc000117 	ldw	r16,4(sp)
  80c440:	dec00304 	addi	sp,sp,12
  80c444:	080c1e01 	jmpi	80c1e0 <__sflush_r>
  80c448:	d9400015 	stw	r5,0(sp)
  80c44c:	080c7d80 	call	80c7d8 <__sinit>
  80c450:	d9400017 	ldw	r5,0(sp)
  80c454:	003ff006 	br	80c418 <__alt_mem_onchip_mem+0xff804418>

0080c458 <fflush>:
  80c458:	20000526 	beq	r4,zero,80c470 <fflush+0x18>
  80c45c:	008020b4 	movhi	r2,130
  80c460:	10a48504 	addi	r2,r2,-28140
  80c464:	200b883a 	mov	r5,r4
  80c468:	11000017 	ldw	r4,0(r2)
  80c46c:	080c3fc1 	jmpi	80c3fc <_fflush_r>
  80c470:	008020b4 	movhi	r2,130
  80c474:	10a48404 	addi	r2,r2,-28144
  80c478:	11000017 	ldw	r4,0(r2)
  80c47c:	01402074 	movhi	r5,129
  80c480:	2970ff04 	addi	r5,r5,-15364
  80c484:	080d2881 	jmpi	80d288 <_fwalk_reent>

0080c488 <__fp_unlock>:
  80c488:	0005883a 	mov	r2,zero
  80c48c:	f800283a 	ret

0080c490 <_cleanup_r>:
  80c490:	01402074 	movhi	r5,129
  80c494:	29425004 	addi	r5,r5,2368
  80c498:	080d2881 	jmpi	80d288 <_fwalk_reent>

0080c49c <__sinit.part.1>:
  80c49c:	defff704 	addi	sp,sp,-36
  80c4a0:	00c02074 	movhi	r3,129
  80c4a4:	dfc00815 	stw	ra,32(sp)
  80c4a8:	ddc00715 	stw	r23,28(sp)
  80c4ac:	dd800615 	stw	r22,24(sp)
  80c4b0:	dd400515 	stw	r21,20(sp)
  80c4b4:	dd000415 	stw	r20,16(sp)
  80c4b8:	dcc00315 	stw	r19,12(sp)
  80c4bc:	dc800215 	stw	r18,8(sp)
  80c4c0:	dc400115 	stw	r17,4(sp)
  80c4c4:	dc000015 	stw	r16,0(sp)
  80c4c8:	18f12404 	addi	r3,r3,-15216
  80c4cc:	24000117 	ldw	r16,4(r4)
  80c4d0:	20c00f15 	stw	r3,60(r4)
  80c4d4:	2080bb04 	addi	r2,r4,748
  80c4d8:	00c000c4 	movi	r3,3
  80c4dc:	20c0b915 	stw	r3,740(r4)
  80c4e0:	2080ba15 	stw	r2,744(r4)
  80c4e4:	2000b815 	stw	zero,736(r4)
  80c4e8:	05c00204 	movi	r23,8
  80c4ec:	00800104 	movi	r2,4
  80c4f0:	2025883a 	mov	r18,r4
  80c4f4:	b80d883a 	mov	r6,r23
  80c4f8:	81001704 	addi	r4,r16,92
  80c4fc:	000b883a 	mov	r5,zero
  80c500:	80000015 	stw	zero,0(r16)
  80c504:	80000115 	stw	zero,4(r16)
  80c508:	80000215 	stw	zero,8(r16)
  80c50c:	8080030d 	sth	r2,12(r16)
  80c510:	80001915 	stw	zero,100(r16)
  80c514:	8000038d 	sth	zero,14(r16)
  80c518:	80000415 	stw	zero,16(r16)
  80c51c:	80000515 	stw	zero,20(r16)
  80c520:	80000615 	stw	zero,24(r16)
  80c524:	0807dec0 	call	807dec <memset>
  80c528:	05802074 	movhi	r22,129
  80c52c:	94400217 	ldw	r17,8(r18)
  80c530:	05402074 	movhi	r21,129
  80c534:	05002074 	movhi	r20,129
  80c538:	04c02074 	movhi	r19,129
  80c53c:	b5a0ab04 	addi	r22,r22,-32084
  80c540:	ad60c204 	addi	r21,r21,-31992
  80c544:	a520e104 	addi	r20,r20,-31868
  80c548:	9ce0f804 	addi	r19,r19,-31776
  80c54c:	85800815 	stw	r22,32(r16)
  80c550:	85400915 	stw	r21,36(r16)
  80c554:	85000a15 	stw	r20,40(r16)
  80c558:	84c00b15 	stw	r19,44(r16)
  80c55c:	84000715 	stw	r16,28(r16)
  80c560:	00800284 	movi	r2,10
  80c564:	8880030d 	sth	r2,12(r17)
  80c568:	00800044 	movi	r2,1
  80c56c:	b80d883a 	mov	r6,r23
  80c570:	89001704 	addi	r4,r17,92
  80c574:	000b883a 	mov	r5,zero
  80c578:	88000015 	stw	zero,0(r17)
  80c57c:	88000115 	stw	zero,4(r17)
  80c580:	88000215 	stw	zero,8(r17)
  80c584:	88001915 	stw	zero,100(r17)
  80c588:	8880038d 	sth	r2,14(r17)
  80c58c:	88000415 	stw	zero,16(r17)
  80c590:	88000515 	stw	zero,20(r17)
  80c594:	88000615 	stw	zero,24(r17)
  80c598:	0807dec0 	call	807dec <memset>
  80c59c:	94000317 	ldw	r16,12(r18)
  80c5a0:	00800484 	movi	r2,18
  80c5a4:	8c400715 	stw	r17,28(r17)
  80c5a8:	8d800815 	stw	r22,32(r17)
  80c5ac:	8d400915 	stw	r21,36(r17)
  80c5b0:	8d000a15 	stw	r20,40(r17)
  80c5b4:	8cc00b15 	stw	r19,44(r17)
  80c5b8:	8080030d 	sth	r2,12(r16)
  80c5bc:	00800084 	movi	r2,2
  80c5c0:	80000015 	stw	zero,0(r16)
  80c5c4:	80000115 	stw	zero,4(r16)
  80c5c8:	80000215 	stw	zero,8(r16)
  80c5cc:	80001915 	stw	zero,100(r16)
  80c5d0:	8080038d 	sth	r2,14(r16)
  80c5d4:	80000415 	stw	zero,16(r16)
  80c5d8:	80000515 	stw	zero,20(r16)
  80c5dc:	80000615 	stw	zero,24(r16)
  80c5e0:	b80d883a 	mov	r6,r23
  80c5e4:	000b883a 	mov	r5,zero
  80c5e8:	81001704 	addi	r4,r16,92
  80c5ec:	0807dec0 	call	807dec <memset>
  80c5f0:	00800044 	movi	r2,1
  80c5f4:	84000715 	stw	r16,28(r16)
  80c5f8:	85800815 	stw	r22,32(r16)
  80c5fc:	85400915 	stw	r21,36(r16)
  80c600:	85000a15 	stw	r20,40(r16)
  80c604:	84c00b15 	stw	r19,44(r16)
  80c608:	90800e15 	stw	r2,56(r18)
  80c60c:	dfc00817 	ldw	ra,32(sp)
  80c610:	ddc00717 	ldw	r23,28(sp)
  80c614:	dd800617 	ldw	r22,24(sp)
  80c618:	dd400517 	ldw	r21,20(sp)
  80c61c:	dd000417 	ldw	r20,16(sp)
  80c620:	dcc00317 	ldw	r19,12(sp)
  80c624:	dc800217 	ldw	r18,8(sp)
  80c628:	dc400117 	ldw	r17,4(sp)
  80c62c:	dc000017 	ldw	r16,0(sp)
  80c630:	dec00904 	addi	sp,sp,36
  80c634:	f800283a 	ret

0080c638 <__fp_lock>:
  80c638:	0005883a 	mov	r2,zero
  80c63c:	f800283a 	ret

0080c640 <__sfmoreglue>:
  80c640:	defffc04 	addi	sp,sp,-16
  80c644:	dc400115 	stw	r17,4(sp)
  80c648:	2c7fffc4 	addi	r17,r5,-1
  80c64c:	8c401a24 	muli	r17,r17,104
  80c650:	dc800215 	stw	r18,8(sp)
  80c654:	2825883a 	mov	r18,r5
  80c658:	89401d04 	addi	r5,r17,116
  80c65c:	dc000015 	stw	r16,0(sp)
  80c660:	dfc00315 	stw	ra,12(sp)
  80c664:	08075e00 	call	8075e0 <_malloc_r>
  80c668:	1021883a 	mov	r16,r2
  80c66c:	10000726 	beq	r2,zero,80c68c <__sfmoreglue+0x4c>
  80c670:	11000304 	addi	r4,r2,12
  80c674:	10000015 	stw	zero,0(r2)
  80c678:	14800115 	stw	r18,4(r2)
  80c67c:	11000215 	stw	r4,8(r2)
  80c680:	89801a04 	addi	r6,r17,104
  80c684:	000b883a 	mov	r5,zero
  80c688:	0807dec0 	call	807dec <memset>
  80c68c:	8005883a 	mov	r2,r16
  80c690:	dfc00317 	ldw	ra,12(sp)
  80c694:	dc800217 	ldw	r18,8(sp)
  80c698:	dc400117 	ldw	r17,4(sp)
  80c69c:	dc000017 	ldw	r16,0(sp)
  80c6a0:	dec00404 	addi	sp,sp,16
  80c6a4:	f800283a 	ret

0080c6a8 <__sfp>:
  80c6a8:	defffb04 	addi	sp,sp,-20
  80c6ac:	dc000015 	stw	r16,0(sp)
  80c6b0:	040020b4 	movhi	r16,130
  80c6b4:	84248404 	addi	r16,r16,-28144
  80c6b8:	dcc00315 	stw	r19,12(sp)
  80c6bc:	2027883a 	mov	r19,r4
  80c6c0:	81000017 	ldw	r4,0(r16)
  80c6c4:	dfc00415 	stw	ra,16(sp)
  80c6c8:	dc800215 	stw	r18,8(sp)
  80c6cc:	20800e17 	ldw	r2,56(r4)
  80c6d0:	dc400115 	stw	r17,4(sp)
  80c6d4:	1000021e 	bne	r2,zero,80c6e0 <__sfp+0x38>
  80c6d8:	080c49c0 	call	80c49c <__sinit.part.1>
  80c6dc:	81000017 	ldw	r4,0(r16)
  80c6e0:	2480b804 	addi	r18,r4,736
  80c6e4:	047fffc4 	movi	r17,-1
  80c6e8:	91000117 	ldw	r4,4(r18)
  80c6ec:	94000217 	ldw	r16,8(r18)
  80c6f0:	213fffc4 	addi	r4,r4,-1
  80c6f4:	20000a16 	blt	r4,zero,80c720 <__sfp+0x78>
  80c6f8:	8080030f 	ldh	r2,12(r16)
  80c6fc:	10000c26 	beq	r2,zero,80c730 <__sfp+0x88>
  80c700:	80c01d04 	addi	r3,r16,116
  80c704:	00000206 	br	80c710 <__sfp+0x68>
  80c708:	18bfe60f 	ldh	r2,-104(r3)
  80c70c:	10000826 	beq	r2,zero,80c730 <__sfp+0x88>
  80c710:	213fffc4 	addi	r4,r4,-1
  80c714:	1c3ffd04 	addi	r16,r3,-12
  80c718:	18c01a04 	addi	r3,r3,104
  80c71c:	247ffa1e 	bne	r4,r17,80c708 <__alt_mem_onchip_mem+0xff804708>
  80c720:	90800017 	ldw	r2,0(r18)
  80c724:	10001d26 	beq	r2,zero,80c79c <__sfp+0xf4>
  80c728:	1025883a 	mov	r18,r2
  80c72c:	003fee06 	br	80c6e8 <__alt_mem_onchip_mem+0xff8046e8>
  80c730:	00bfffc4 	movi	r2,-1
  80c734:	8080038d 	sth	r2,14(r16)
  80c738:	00800044 	movi	r2,1
  80c73c:	8080030d 	sth	r2,12(r16)
  80c740:	80001915 	stw	zero,100(r16)
  80c744:	80000015 	stw	zero,0(r16)
  80c748:	80000215 	stw	zero,8(r16)
  80c74c:	80000115 	stw	zero,4(r16)
  80c750:	80000415 	stw	zero,16(r16)
  80c754:	80000515 	stw	zero,20(r16)
  80c758:	80000615 	stw	zero,24(r16)
  80c75c:	01800204 	movi	r6,8
  80c760:	000b883a 	mov	r5,zero
  80c764:	81001704 	addi	r4,r16,92
  80c768:	0807dec0 	call	807dec <memset>
  80c76c:	8005883a 	mov	r2,r16
  80c770:	80000c15 	stw	zero,48(r16)
  80c774:	80000d15 	stw	zero,52(r16)
  80c778:	80001115 	stw	zero,68(r16)
  80c77c:	80001215 	stw	zero,72(r16)
  80c780:	dfc00417 	ldw	ra,16(sp)
  80c784:	dcc00317 	ldw	r19,12(sp)
  80c788:	dc800217 	ldw	r18,8(sp)
  80c78c:	dc400117 	ldw	r17,4(sp)
  80c790:	dc000017 	ldw	r16,0(sp)
  80c794:	dec00504 	addi	sp,sp,20
  80c798:	f800283a 	ret
  80c79c:	01400104 	movi	r5,4
  80c7a0:	9809883a 	mov	r4,r19
  80c7a4:	080c6400 	call	80c640 <__sfmoreglue>
  80c7a8:	90800015 	stw	r2,0(r18)
  80c7ac:	103fde1e 	bne	r2,zero,80c728 <__alt_mem_onchip_mem+0xff804728>
  80c7b0:	00800304 	movi	r2,12
  80c7b4:	98800015 	stw	r2,0(r19)
  80c7b8:	0005883a 	mov	r2,zero
  80c7bc:	003ff006 	br	80c780 <__alt_mem_onchip_mem+0xff804780>

0080c7c0 <_cleanup>:
  80c7c0:	008020b4 	movhi	r2,130
  80c7c4:	10a48404 	addi	r2,r2,-28144
  80c7c8:	11000017 	ldw	r4,0(r2)
  80c7cc:	01402074 	movhi	r5,129
  80c7d0:	29425004 	addi	r5,r5,2368
  80c7d4:	080d2881 	jmpi	80d288 <_fwalk_reent>

0080c7d8 <__sinit>:
  80c7d8:	20800e17 	ldw	r2,56(r4)
  80c7dc:	10000126 	beq	r2,zero,80c7e4 <__sinit+0xc>
  80c7e0:	f800283a 	ret
  80c7e4:	080c49c1 	jmpi	80c49c <__sinit.part.1>

0080c7e8 <__sfp_lock_acquire>:
  80c7e8:	f800283a 	ret

0080c7ec <__sfp_lock_release>:
  80c7ec:	f800283a 	ret

0080c7f0 <__sinit_lock_acquire>:
  80c7f0:	f800283a 	ret

0080c7f4 <__sinit_lock_release>:
  80c7f4:	f800283a 	ret

0080c7f8 <__fp_lock_all>:
  80c7f8:	008020b4 	movhi	r2,130
  80c7fc:	10a48504 	addi	r2,r2,-28140
  80c800:	11000017 	ldw	r4,0(r2)
  80c804:	01402074 	movhi	r5,129
  80c808:	29718e04 	addi	r5,r5,-14792
  80c80c:	080d1c41 	jmpi	80d1c4 <_fwalk>

0080c810 <__fp_unlock_all>:
  80c810:	008020b4 	movhi	r2,130
  80c814:	10a48504 	addi	r2,r2,-28140
  80c818:	11000017 	ldw	r4,0(r2)
  80c81c:	01402074 	movhi	r5,129
  80c820:	29712204 	addi	r5,r5,-15224
  80c824:	080d1c41 	jmpi	80d1c4 <_fwalk>

0080c828 <__sflags>:
  80c828:	28800007 	ldb	r2,0(r5)
  80c82c:	00c01c84 	movi	r3,114
  80c830:	10c02426 	beq	r2,r3,80c8c4 <__sflags+0x9c>
  80c834:	00c01dc4 	movi	r3,119
  80c838:	10c01e26 	beq	r2,r3,80c8b4 <__sflags+0x8c>
  80c83c:	00c01844 	movi	r3,97
  80c840:	10c00426 	beq	r2,r3,80c854 <__sflags+0x2c>
  80c844:	00800584 	movi	r2,22
  80c848:	20800015 	stw	r2,0(r4)
  80c84c:	0005883a 	mov	r2,zero
  80c850:	f800283a 	ret
  80c854:	02c08204 	movi	r11,520
  80c858:	01000044 	movi	r4,1
  80c85c:	00804204 	movi	r2,264
  80c860:	01c00ac4 	movi	r7,43
  80c864:	02bff8c4 	movi	r10,-29
  80c868:	027fff04 	movi	r9,-4
  80c86c:	02001e04 	movi	r8,120
  80c870:	29400044 	addi	r5,r5,1
  80c874:	28c00007 	ldb	r3,0(r5)
  80c878:	18000626 	beq	r3,zero,80c894 <__sflags+0x6c>
  80c87c:	19c00826 	beq	r3,r7,80c8a0 <__sflags+0x78>
  80c880:	1a3ffb1e 	bne	r3,r8,80c870 <__alt_mem_onchip_mem+0xff804870>
  80c884:	29400044 	addi	r5,r5,1
  80c888:	28c00007 	ldb	r3,0(r5)
  80c88c:	21020014 	ori	r4,r4,2048
  80c890:	183ffa1e 	bne	r3,zero,80c87c <__alt_mem_onchip_mem+0xff80487c>
  80c894:	22c8b03a 	or	r4,r4,r11
  80c898:	31000015 	stw	r4,0(r6)
  80c89c:	f800283a 	ret
  80c8a0:	1284703a 	and	r2,r2,r10
  80c8a4:	2248703a 	and	r4,r4,r9
  80c8a8:	10800414 	ori	r2,r2,16
  80c8ac:	21000094 	ori	r4,r4,2
  80c8b0:	003fef06 	br	80c870 <__alt_mem_onchip_mem+0xff804870>
  80c8b4:	02c18004 	movi	r11,1536
  80c8b8:	01000044 	movi	r4,1
  80c8bc:	00800204 	movi	r2,8
  80c8c0:	003fe706 	br	80c860 <__alt_mem_onchip_mem+0xff804860>
  80c8c4:	0017883a 	mov	r11,zero
  80c8c8:	0009883a 	mov	r4,zero
  80c8cc:	00800104 	movi	r2,4
  80c8d0:	003fe306 	br	80c860 <__alt_mem_onchip_mem+0xff804860>

0080c8d4 <_malloc_trim_r>:
  80c8d4:	defffb04 	addi	sp,sp,-20
  80c8d8:	dcc00315 	stw	r19,12(sp)
  80c8dc:	04c02074 	movhi	r19,129
  80c8e0:	dc800215 	stw	r18,8(sp)
  80c8e4:	dc400115 	stw	r17,4(sp)
  80c8e8:	dc000015 	stw	r16,0(sp)
  80c8ec:	dfc00415 	stw	ra,16(sp)
  80c8f0:	2821883a 	mov	r16,r5
  80c8f4:	9cde6904 	addi	r19,r19,31140
  80c8f8:	2025883a 	mov	r18,r4
  80c8fc:	08133c80 	call	8133c8 <__malloc_lock>
  80c900:	98800217 	ldw	r2,8(r19)
  80c904:	14400117 	ldw	r17,4(r2)
  80c908:	00bfff04 	movi	r2,-4
  80c90c:	88a2703a 	and	r17,r17,r2
  80c910:	8c21c83a 	sub	r16,r17,r16
  80c914:	8403fbc4 	addi	r16,r16,4079
  80c918:	8020d33a 	srli	r16,r16,12
  80c91c:	0083ffc4 	movi	r2,4095
  80c920:	843fffc4 	addi	r16,r16,-1
  80c924:	8020933a 	slli	r16,r16,12
  80c928:	1400060e 	bge	r2,r16,80c944 <_malloc_trim_r+0x70>
  80c92c:	000b883a 	mov	r5,zero
  80c930:	9009883a 	mov	r4,r18
  80c934:	08082580 	call	808258 <_sbrk_r>
  80c938:	98c00217 	ldw	r3,8(r19)
  80c93c:	1c47883a 	add	r3,r3,r17
  80c940:	10c00a26 	beq	r2,r3,80c96c <_malloc_trim_r+0x98>
  80c944:	9009883a 	mov	r4,r18
  80c948:	08133ec0 	call	8133ec <__malloc_unlock>
  80c94c:	0005883a 	mov	r2,zero
  80c950:	dfc00417 	ldw	ra,16(sp)
  80c954:	dcc00317 	ldw	r19,12(sp)
  80c958:	dc800217 	ldw	r18,8(sp)
  80c95c:	dc400117 	ldw	r17,4(sp)
  80c960:	dc000017 	ldw	r16,0(sp)
  80c964:	dec00504 	addi	sp,sp,20
  80c968:	f800283a 	ret
  80c96c:	040bc83a 	sub	r5,zero,r16
  80c970:	9009883a 	mov	r4,r18
  80c974:	08082580 	call	808258 <_sbrk_r>
  80c978:	00ffffc4 	movi	r3,-1
  80c97c:	10c00d26 	beq	r2,r3,80c9b4 <_malloc_trim_r+0xe0>
  80c980:	00c020b4 	movhi	r3,130
  80c984:	18ebe304 	addi	r3,r3,-20596
  80c988:	18800017 	ldw	r2,0(r3)
  80c98c:	99000217 	ldw	r4,8(r19)
  80c990:	8c23c83a 	sub	r17,r17,r16
  80c994:	8c400054 	ori	r17,r17,1
  80c998:	1421c83a 	sub	r16,r2,r16
  80c99c:	24400115 	stw	r17,4(r4)
  80c9a0:	9009883a 	mov	r4,r18
  80c9a4:	1c000015 	stw	r16,0(r3)
  80c9a8:	08133ec0 	call	8133ec <__malloc_unlock>
  80c9ac:	00800044 	movi	r2,1
  80c9b0:	003fe706 	br	80c950 <__alt_mem_onchip_mem+0xff804950>
  80c9b4:	000b883a 	mov	r5,zero
  80c9b8:	9009883a 	mov	r4,r18
  80c9bc:	08082580 	call	808258 <_sbrk_r>
  80c9c0:	99000217 	ldw	r4,8(r19)
  80c9c4:	014003c4 	movi	r5,15
  80c9c8:	1107c83a 	sub	r3,r2,r4
  80c9cc:	28ffdd0e 	bge	r5,r3,80c944 <__alt_mem_onchip_mem+0xff804944>
  80c9d0:	014020b4 	movhi	r5,130
  80c9d4:	29648604 	addi	r5,r5,-28136
  80c9d8:	29400017 	ldw	r5,0(r5)
  80c9dc:	18c00054 	ori	r3,r3,1
  80c9e0:	20c00115 	stw	r3,4(r4)
  80c9e4:	00c020b4 	movhi	r3,130
  80c9e8:	1145c83a 	sub	r2,r2,r5
  80c9ec:	18ebe304 	addi	r3,r3,-20596
  80c9f0:	18800015 	stw	r2,0(r3)
  80c9f4:	003fd306 	br	80c944 <__alt_mem_onchip_mem+0xff804944>

0080c9f8 <_free_r>:
  80c9f8:	28004126 	beq	r5,zero,80cb00 <_free_r+0x108>
  80c9fc:	defffd04 	addi	sp,sp,-12
  80ca00:	dc400115 	stw	r17,4(sp)
  80ca04:	dc000015 	stw	r16,0(sp)
  80ca08:	2023883a 	mov	r17,r4
  80ca0c:	2821883a 	mov	r16,r5
  80ca10:	dfc00215 	stw	ra,8(sp)
  80ca14:	08133c80 	call	8133c8 <__malloc_lock>
  80ca18:	81ffff17 	ldw	r7,-4(r16)
  80ca1c:	00bfff84 	movi	r2,-2
  80ca20:	01002074 	movhi	r4,129
  80ca24:	81bffe04 	addi	r6,r16,-8
  80ca28:	3884703a 	and	r2,r7,r2
  80ca2c:	211e6904 	addi	r4,r4,31140
  80ca30:	308b883a 	add	r5,r6,r2
  80ca34:	2a400117 	ldw	r9,4(r5)
  80ca38:	22000217 	ldw	r8,8(r4)
  80ca3c:	00ffff04 	movi	r3,-4
  80ca40:	48c6703a 	and	r3,r9,r3
  80ca44:	2a005726 	beq	r5,r8,80cba4 <_free_r+0x1ac>
  80ca48:	28c00115 	stw	r3,4(r5)
  80ca4c:	39c0004c 	andi	r7,r7,1
  80ca50:	3800091e 	bne	r7,zero,80ca78 <_free_r+0x80>
  80ca54:	823ffe17 	ldw	r8,-8(r16)
  80ca58:	22400204 	addi	r9,r4,8
  80ca5c:	320dc83a 	sub	r6,r6,r8
  80ca60:	31c00217 	ldw	r7,8(r6)
  80ca64:	1205883a 	add	r2,r2,r8
  80ca68:	3a406526 	beq	r7,r9,80cc00 <_free_r+0x208>
  80ca6c:	32000317 	ldw	r8,12(r6)
  80ca70:	3a000315 	stw	r8,12(r7)
  80ca74:	41c00215 	stw	r7,8(r8)
  80ca78:	28cf883a 	add	r7,r5,r3
  80ca7c:	39c00117 	ldw	r7,4(r7)
  80ca80:	39c0004c 	andi	r7,r7,1
  80ca84:	38003a26 	beq	r7,zero,80cb70 <_free_r+0x178>
  80ca88:	10c00054 	ori	r3,r2,1
  80ca8c:	30c00115 	stw	r3,4(r6)
  80ca90:	3087883a 	add	r3,r6,r2
  80ca94:	18800015 	stw	r2,0(r3)
  80ca98:	00c07fc4 	movi	r3,511
  80ca9c:	18801936 	bltu	r3,r2,80cb04 <_free_r+0x10c>
  80caa0:	1004d0fa 	srli	r2,r2,3
  80caa4:	01c00044 	movi	r7,1
  80caa8:	21400117 	ldw	r5,4(r4)
  80caac:	10c00044 	addi	r3,r2,1
  80cab0:	18c7883a 	add	r3,r3,r3
  80cab4:	1005d0ba 	srai	r2,r2,2
  80cab8:	18c7883a 	add	r3,r3,r3
  80cabc:	18c7883a 	add	r3,r3,r3
  80cac0:	1907883a 	add	r3,r3,r4
  80cac4:	3884983a 	sll	r2,r7,r2
  80cac8:	19c00017 	ldw	r7,0(r3)
  80cacc:	1a3ffe04 	addi	r8,r3,-8
  80cad0:	1144b03a 	or	r2,r2,r5
  80cad4:	32000315 	stw	r8,12(r6)
  80cad8:	31c00215 	stw	r7,8(r6)
  80cadc:	20800115 	stw	r2,4(r4)
  80cae0:	19800015 	stw	r6,0(r3)
  80cae4:	39800315 	stw	r6,12(r7)
  80cae8:	8809883a 	mov	r4,r17
  80caec:	dfc00217 	ldw	ra,8(sp)
  80caf0:	dc400117 	ldw	r17,4(sp)
  80caf4:	dc000017 	ldw	r16,0(sp)
  80caf8:	dec00304 	addi	sp,sp,12
  80cafc:	08133ec1 	jmpi	8133ec <__malloc_unlock>
  80cb00:	f800283a 	ret
  80cb04:	100ad27a 	srli	r5,r2,9
  80cb08:	00c00104 	movi	r3,4
  80cb0c:	19404a36 	bltu	r3,r5,80cc38 <_free_r+0x240>
  80cb10:	100ad1ba 	srli	r5,r2,6
  80cb14:	28c00e44 	addi	r3,r5,57
  80cb18:	18c7883a 	add	r3,r3,r3
  80cb1c:	29400e04 	addi	r5,r5,56
  80cb20:	18c7883a 	add	r3,r3,r3
  80cb24:	18c7883a 	add	r3,r3,r3
  80cb28:	1909883a 	add	r4,r3,r4
  80cb2c:	20c00017 	ldw	r3,0(r4)
  80cb30:	01c02074 	movhi	r7,129
  80cb34:	213ffe04 	addi	r4,r4,-8
  80cb38:	39de6904 	addi	r7,r7,31140
  80cb3c:	20c04426 	beq	r4,r3,80cc50 <_free_r+0x258>
  80cb40:	01ffff04 	movi	r7,-4
  80cb44:	19400117 	ldw	r5,4(r3)
  80cb48:	29ca703a 	and	r5,r5,r7
  80cb4c:	1140022e 	bgeu	r2,r5,80cb58 <_free_r+0x160>
  80cb50:	18c00217 	ldw	r3,8(r3)
  80cb54:	20fffb1e 	bne	r4,r3,80cb44 <__alt_mem_onchip_mem+0xff804b44>
  80cb58:	19000317 	ldw	r4,12(r3)
  80cb5c:	31000315 	stw	r4,12(r6)
  80cb60:	30c00215 	stw	r3,8(r6)
  80cb64:	21800215 	stw	r6,8(r4)
  80cb68:	19800315 	stw	r6,12(r3)
  80cb6c:	003fde06 	br	80cae8 <__alt_mem_onchip_mem+0xff804ae8>
  80cb70:	29c00217 	ldw	r7,8(r5)
  80cb74:	10c5883a 	add	r2,r2,r3
  80cb78:	00c02074 	movhi	r3,129
  80cb7c:	18de6b04 	addi	r3,r3,31148
  80cb80:	38c03b26 	beq	r7,r3,80cc70 <_free_r+0x278>
  80cb84:	2a000317 	ldw	r8,12(r5)
  80cb88:	11400054 	ori	r5,r2,1
  80cb8c:	3087883a 	add	r3,r6,r2
  80cb90:	3a000315 	stw	r8,12(r7)
  80cb94:	41c00215 	stw	r7,8(r8)
  80cb98:	31400115 	stw	r5,4(r6)
  80cb9c:	18800015 	stw	r2,0(r3)
  80cba0:	003fbd06 	br	80ca98 <__alt_mem_onchip_mem+0xff804a98>
  80cba4:	39c0004c 	andi	r7,r7,1
  80cba8:	10c5883a 	add	r2,r2,r3
  80cbac:	3800071e 	bne	r7,zero,80cbcc <_free_r+0x1d4>
  80cbb0:	81fffe17 	ldw	r7,-8(r16)
  80cbb4:	31cdc83a 	sub	r6,r6,r7
  80cbb8:	30c00317 	ldw	r3,12(r6)
  80cbbc:	31400217 	ldw	r5,8(r6)
  80cbc0:	11c5883a 	add	r2,r2,r7
  80cbc4:	28c00315 	stw	r3,12(r5)
  80cbc8:	19400215 	stw	r5,8(r3)
  80cbcc:	10c00054 	ori	r3,r2,1
  80cbd0:	30c00115 	stw	r3,4(r6)
  80cbd4:	00c020b4 	movhi	r3,130
  80cbd8:	18e48704 	addi	r3,r3,-28132
  80cbdc:	18c00017 	ldw	r3,0(r3)
  80cbe0:	21800215 	stw	r6,8(r4)
  80cbe4:	10ffc036 	bltu	r2,r3,80cae8 <__alt_mem_onchip_mem+0xff804ae8>
  80cbe8:	008020b4 	movhi	r2,130
  80cbec:	10abd804 	addi	r2,r2,-20640
  80cbf0:	11400017 	ldw	r5,0(r2)
  80cbf4:	8809883a 	mov	r4,r17
  80cbf8:	080c8d40 	call	80c8d4 <_malloc_trim_r>
  80cbfc:	003fba06 	br	80cae8 <__alt_mem_onchip_mem+0xff804ae8>
  80cc00:	28c9883a 	add	r4,r5,r3
  80cc04:	21000117 	ldw	r4,4(r4)
  80cc08:	2100004c 	andi	r4,r4,1
  80cc0c:	2000391e 	bne	r4,zero,80ccf4 <_free_r+0x2fc>
  80cc10:	29c00217 	ldw	r7,8(r5)
  80cc14:	29000317 	ldw	r4,12(r5)
  80cc18:	1885883a 	add	r2,r3,r2
  80cc1c:	10c00054 	ori	r3,r2,1
  80cc20:	39000315 	stw	r4,12(r7)
  80cc24:	21c00215 	stw	r7,8(r4)
  80cc28:	30c00115 	stw	r3,4(r6)
  80cc2c:	308d883a 	add	r6,r6,r2
  80cc30:	30800015 	stw	r2,0(r6)
  80cc34:	003fac06 	br	80cae8 <__alt_mem_onchip_mem+0xff804ae8>
  80cc38:	00c00504 	movi	r3,20
  80cc3c:	19401536 	bltu	r3,r5,80cc94 <_free_r+0x29c>
  80cc40:	28c01704 	addi	r3,r5,92
  80cc44:	18c7883a 	add	r3,r3,r3
  80cc48:	294016c4 	addi	r5,r5,91
  80cc4c:	003fb406 	br	80cb20 <__alt_mem_onchip_mem+0xff804b20>
  80cc50:	280bd0ba 	srai	r5,r5,2
  80cc54:	00c00044 	movi	r3,1
  80cc58:	38800117 	ldw	r2,4(r7)
  80cc5c:	194a983a 	sll	r5,r3,r5
  80cc60:	2007883a 	mov	r3,r4
  80cc64:	2884b03a 	or	r2,r5,r2
  80cc68:	38800115 	stw	r2,4(r7)
  80cc6c:	003fbb06 	br	80cb5c <__alt_mem_onchip_mem+0xff804b5c>
  80cc70:	21800515 	stw	r6,20(r4)
  80cc74:	21800415 	stw	r6,16(r4)
  80cc78:	10c00054 	ori	r3,r2,1
  80cc7c:	31c00315 	stw	r7,12(r6)
  80cc80:	31c00215 	stw	r7,8(r6)
  80cc84:	30c00115 	stw	r3,4(r6)
  80cc88:	308d883a 	add	r6,r6,r2
  80cc8c:	30800015 	stw	r2,0(r6)
  80cc90:	003f9506 	br	80cae8 <__alt_mem_onchip_mem+0xff804ae8>
  80cc94:	00c01504 	movi	r3,84
  80cc98:	19400536 	bltu	r3,r5,80ccb0 <_free_r+0x2b8>
  80cc9c:	100ad33a 	srli	r5,r2,12
  80cca0:	28c01bc4 	addi	r3,r5,111
  80cca4:	18c7883a 	add	r3,r3,r3
  80cca8:	29401b84 	addi	r5,r5,110
  80ccac:	003f9c06 	br	80cb20 <__alt_mem_onchip_mem+0xff804b20>
  80ccb0:	00c05504 	movi	r3,340
  80ccb4:	19400536 	bltu	r3,r5,80cccc <_free_r+0x2d4>
  80ccb8:	100ad3fa 	srli	r5,r2,15
  80ccbc:	28c01e04 	addi	r3,r5,120
  80ccc0:	18c7883a 	add	r3,r3,r3
  80ccc4:	29401dc4 	addi	r5,r5,119
  80ccc8:	003f9506 	br	80cb20 <__alt_mem_onchip_mem+0xff804b20>
  80cccc:	00c15504 	movi	r3,1364
  80ccd0:	19400536 	bltu	r3,r5,80cce8 <_free_r+0x2f0>
  80ccd4:	100ad4ba 	srli	r5,r2,18
  80ccd8:	28c01f44 	addi	r3,r5,125
  80ccdc:	18c7883a 	add	r3,r3,r3
  80cce0:	29401f04 	addi	r5,r5,124
  80cce4:	003f8e06 	br	80cb20 <__alt_mem_onchip_mem+0xff804b20>
  80cce8:	00c03f84 	movi	r3,254
  80ccec:	01401f84 	movi	r5,126
  80ccf0:	003f8b06 	br	80cb20 <__alt_mem_onchip_mem+0xff804b20>
  80ccf4:	10c00054 	ori	r3,r2,1
  80ccf8:	30c00115 	stw	r3,4(r6)
  80ccfc:	308d883a 	add	r6,r6,r2
  80cd00:	30800015 	stw	r2,0(r6)
  80cd04:	003f7806 	br	80cae8 <__alt_mem_onchip_mem+0xff804ae8>

0080cd08 <__sfvwrite_r>:
  80cd08:	30800217 	ldw	r2,8(r6)
  80cd0c:	10006726 	beq	r2,zero,80ceac <__sfvwrite_r+0x1a4>
  80cd10:	28c0030b 	ldhu	r3,12(r5)
  80cd14:	defff404 	addi	sp,sp,-48
  80cd18:	dd400715 	stw	r21,28(sp)
  80cd1c:	dd000615 	stw	r20,24(sp)
  80cd20:	dc000215 	stw	r16,8(sp)
  80cd24:	dfc00b15 	stw	ra,44(sp)
  80cd28:	df000a15 	stw	fp,40(sp)
  80cd2c:	ddc00915 	stw	r23,36(sp)
  80cd30:	dd800815 	stw	r22,32(sp)
  80cd34:	dcc00515 	stw	r19,20(sp)
  80cd38:	dc800415 	stw	r18,16(sp)
  80cd3c:	dc400315 	stw	r17,12(sp)
  80cd40:	1880020c 	andi	r2,r3,8
  80cd44:	2821883a 	mov	r16,r5
  80cd48:	202b883a 	mov	r21,r4
  80cd4c:	3029883a 	mov	r20,r6
  80cd50:	10002726 	beq	r2,zero,80cdf0 <__sfvwrite_r+0xe8>
  80cd54:	28800417 	ldw	r2,16(r5)
  80cd58:	10002526 	beq	r2,zero,80cdf0 <__sfvwrite_r+0xe8>
  80cd5c:	1880008c 	andi	r2,r3,2
  80cd60:	a4400017 	ldw	r17,0(r20)
  80cd64:	10002a26 	beq	r2,zero,80ce10 <__sfvwrite_r+0x108>
  80cd68:	05a00034 	movhi	r22,32768
  80cd6c:	0027883a 	mov	r19,zero
  80cd70:	0025883a 	mov	r18,zero
  80cd74:	b5bf0004 	addi	r22,r22,-1024
  80cd78:	980d883a 	mov	r6,r19
  80cd7c:	a809883a 	mov	r4,r21
  80cd80:	90004626 	beq	r18,zero,80ce9c <__sfvwrite_r+0x194>
  80cd84:	900f883a 	mov	r7,r18
  80cd88:	b480022e 	bgeu	r22,r18,80cd94 <__sfvwrite_r+0x8c>
  80cd8c:	01e00034 	movhi	r7,32768
  80cd90:	39ff0004 	addi	r7,r7,-1024
  80cd94:	80800917 	ldw	r2,36(r16)
  80cd98:	81400717 	ldw	r5,28(r16)
  80cd9c:	103ee83a 	callr	r2
  80cda0:	0080570e 	bge	zero,r2,80cf00 <__sfvwrite_r+0x1f8>
  80cda4:	a0c00217 	ldw	r3,8(r20)
  80cda8:	98a7883a 	add	r19,r19,r2
  80cdac:	90a5c83a 	sub	r18,r18,r2
  80cdb0:	1885c83a 	sub	r2,r3,r2
  80cdb4:	a0800215 	stw	r2,8(r20)
  80cdb8:	103fef1e 	bne	r2,zero,80cd78 <__alt_mem_onchip_mem+0xff804d78>
  80cdbc:	0005883a 	mov	r2,zero
  80cdc0:	dfc00b17 	ldw	ra,44(sp)
  80cdc4:	df000a17 	ldw	fp,40(sp)
  80cdc8:	ddc00917 	ldw	r23,36(sp)
  80cdcc:	dd800817 	ldw	r22,32(sp)
  80cdd0:	dd400717 	ldw	r21,28(sp)
  80cdd4:	dd000617 	ldw	r20,24(sp)
  80cdd8:	dcc00517 	ldw	r19,20(sp)
  80cddc:	dc800417 	ldw	r18,16(sp)
  80cde0:	dc400317 	ldw	r17,12(sp)
  80cde4:	dc000217 	ldw	r16,8(sp)
  80cde8:	dec00c04 	addi	sp,sp,48
  80cdec:	f800283a 	ret
  80cdf0:	800b883a 	mov	r5,r16
  80cdf4:	a809883a 	mov	r4,r21
  80cdf8:	080a7b00 	call	80a7b0 <__swsetup_r>
  80cdfc:	1000eb1e 	bne	r2,zero,80d1ac <__sfvwrite_r+0x4a4>
  80ce00:	80c0030b 	ldhu	r3,12(r16)
  80ce04:	a4400017 	ldw	r17,0(r20)
  80ce08:	1880008c 	andi	r2,r3,2
  80ce0c:	103fd61e 	bne	r2,zero,80cd68 <__alt_mem_onchip_mem+0xff804d68>
  80ce10:	1880004c 	andi	r2,r3,1
  80ce14:	10003f1e 	bne	r2,zero,80cf14 <__sfvwrite_r+0x20c>
  80ce18:	0039883a 	mov	fp,zero
  80ce1c:	0025883a 	mov	r18,zero
  80ce20:	90001a26 	beq	r18,zero,80ce8c <__sfvwrite_r+0x184>
  80ce24:	1880800c 	andi	r2,r3,512
  80ce28:	84c00217 	ldw	r19,8(r16)
  80ce2c:	10002126 	beq	r2,zero,80ceb4 <__sfvwrite_r+0x1ac>
  80ce30:	982f883a 	mov	r23,r19
  80ce34:	94c09336 	bltu	r18,r19,80d084 <__sfvwrite_r+0x37c>
  80ce38:	1881200c 	andi	r2,r3,1152
  80ce3c:	10009e1e 	bne	r2,zero,80d0b8 <__sfvwrite_r+0x3b0>
  80ce40:	81000017 	ldw	r4,0(r16)
  80ce44:	b80d883a 	mov	r6,r23
  80ce48:	e00b883a 	mov	r5,fp
  80ce4c:	080d7080 	call	80d708 <memmove>
  80ce50:	80c00217 	ldw	r3,8(r16)
  80ce54:	81000017 	ldw	r4,0(r16)
  80ce58:	9005883a 	mov	r2,r18
  80ce5c:	1ce7c83a 	sub	r19,r3,r19
  80ce60:	25cf883a 	add	r7,r4,r23
  80ce64:	84c00215 	stw	r19,8(r16)
  80ce68:	81c00015 	stw	r7,0(r16)
  80ce6c:	a0c00217 	ldw	r3,8(r20)
  80ce70:	e0b9883a 	add	fp,fp,r2
  80ce74:	90a5c83a 	sub	r18,r18,r2
  80ce78:	18a7c83a 	sub	r19,r3,r2
  80ce7c:	a4c00215 	stw	r19,8(r20)
  80ce80:	983fce26 	beq	r19,zero,80cdbc <__alt_mem_onchip_mem+0xff804dbc>
  80ce84:	80c0030b 	ldhu	r3,12(r16)
  80ce88:	903fe61e 	bne	r18,zero,80ce24 <__alt_mem_onchip_mem+0xff804e24>
  80ce8c:	8f000017 	ldw	fp,0(r17)
  80ce90:	8c800117 	ldw	r18,4(r17)
  80ce94:	8c400204 	addi	r17,r17,8
  80ce98:	003fe106 	br	80ce20 <__alt_mem_onchip_mem+0xff804e20>
  80ce9c:	8cc00017 	ldw	r19,0(r17)
  80cea0:	8c800117 	ldw	r18,4(r17)
  80cea4:	8c400204 	addi	r17,r17,8
  80cea8:	003fb306 	br	80cd78 <__alt_mem_onchip_mem+0xff804d78>
  80ceac:	0005883a 	mov	r2,zero
  80ceb0:	f800283a 	ret
  80ceb4:	81000017 	ldw	r4,0(r16)
  80ceb8:	80800417 	ldw	r2,16(r16)
  80cebc:	11005736 	bltu	r2,r4,80d01c <__sfvwrite_r+0x314>
  80cec0:	85c00517 	ldw	r23,20(r16)
  80cec4:	95c05536 	bltu	r18,r23,80d01c <__sfvwrite_r+0x314>
  80cec8:	00a00034 	movhi	r2,32768
  80cecc:	10bfffc4 	addi	r2,r2,-1
  80ced0:	9009883a 	mov	r4,r18
  80ced4:	1480012e 	bgeu	r2,r18,80cedc <__sfvwrite_r+0x1d4>
  80ced8:	1009883a 	mov	r4,r2
  80cedc:	b80b883a 	mov	r5,r23
  80cee0:	08118e40 	call	8118e4 <__divsi3>
  80cee4:	15cf383a 	mul	r7,r2,r23
  80cee8:	81400717 	ldw	r5,28(r16)
  80ceec:	80800917 	ldw	r2,36(r16)
  80cef0:	e00d883a 	mov	r6,fp
  80cef4:	a809883a 	mov	r4,r21
  80cef8:	103ee83a 	callr	r2
  80cefc:	00bfdb16 	blt	zero,r2,80ce6c <__alt_mem_onchip_mem+0xff804e6c>
  80cf00:	8080030b 	ldhu	r2,12(r16)
  80cf04:	10801014 	ori	r2,r2,64
  80cf08:	8080030d 	sth	r2,12(r16)
  80cf0c:	00bfffc4 	movi	r2,-1
  80cf10:	003fab06 	br	80cdc0 <__alt_mem_onchip_mem+0xff804dc0>
  80cf14:	0027883a 	mov	r19,zero
  80cf18:	0011883a 	mov	r8,zero
  80cf1c:	0039883a 	mov	fp,zero
  80cf20:	0025883a 	mov	r18,zero
  80cf24:	90001f26 	beq	r18,zero,80cfa4 <__sfvwrite_r+0x29c>
  80cf28:	40005a26 	beq	r8,zero,80d094 <__sfvwrite_r+0x38c>
  80cf2c:	982d883a 	mov	r22,r19
  80cf30:	94c0012e 	bgeu	r18,r19,80cf38 <__sfvwrite_r+0x230>
  80cf34:	902d883a 	mov	r22,r18
  80cf38:	81000017 	ldw	r4,0(r16)
  80cf3c:	80800417 	ldw	r2,16(r16)
  80cf40:	b02f883a 	mov	r23,r22
  80cf44:	81c00517 	ldw	r7,20(r16)
  80cf48:	1100032e 	bgeu	r2,r4,80cf58 <__sfvwrite_r+0x250>
  80cf4c:	80c00217 	ldw	r3,8(r16)
  80cf50:	38c7883a 	add	r3,r7,r3
  80cf54:	1d801816 	blt	r3,r22,80cfb8 <__sfvwrite_r+0x2b0>
  80cf58:	b1c03e16 	blt	r22,r7,80d054 <__sfvwrite_r+0x34c>
  80cf5c:	80800917 	ldw	r2,36(r16)
  80cf60:	81400717 	ldw	r5,28(r16)
  80cf64:	e00d883a 	mov	r6,fp
  80cf68:	da000115 	stw	r8,4(sp)
  80cf6c:	a809883a 	mov	r4,r21
  80cf70:	103ee83a 	callr	r2
  80cf74:	102f883a 	mov	r23,r2
  80cf78:	da000117 	ldw	r8,4(sp)
  80cf7c:	00bfe00e 	bge	zero,r2,80cf00 <__alt_mem_onchip_mem+0xff804f00>
  80cf80:	9de7c83a 	sub	r19,r19,r23
  80cf84:	98001f26 	beq	r19,zero,80d004 <__sfvwrite_r+0x2fc>
  80cf88:	a0800217 	ldw	r2,8(r20)
  80cf8c:	e5f9883a 	add	fp,fp,r23
  80cf90:	95e5c83a 	sub	r18,r18,r23
  80cf94:	15efc83a 	sub	r23,r2,r23
  80cf98:	a5c00215 	stw	r23,8(r20)
  80cf9c:	b83f8726 	beq	r23,zero,80cdbc <__alt_mem_onchip_mem+0xff804dbc>
  80cfa0:	903fe11e 	bne	r18,zero,80cf28 <__alt_mem_onchip_mem+0xff804f28>
  80cfa4:	8f000017 	ldw	fp,0(r17)
  80cfa8:	8c800117 	ldw	r18,4(r17)
  80cfac:	0011883a 	mov	r8,zero
  80cfb0:	8c400204 	addi	r17,r17,8
  80cfb4:	003fdb06 	br	80cf24 <__alt_mem_onchip_mem+0xff804f24>
  80cfb8:	180d883a 	mov	r6,r3
  80cfbc:	e00b883a 	mov	r5,fp
  80cfc0:	da000115 	stw	r8,4(sp)
  80cfc4:	d8c00015 	stw	r3,0(sp)
  80cfc8:	080d7080 	call	80d708 <memmove>
  80cfcc:	d8c00017 	ldw	r3,0(sp)
  80cfd0:	80800017 	ldw	r2,0(r16)
  80cfd4:	800b883a 	mov	r5,r16
  80cfd8:	a809883a 	mov	r4,r21
  80cfdc:	10c5883a 	add	r2,r2,r3
  80cfe0:	80800015 	stw	r2,0(r16)
  80cfe4:	d8c00015 	stw	r3,0(sp)
  80cfe8:	080c3fc0 	call	80c3fc <_fflush_r>
  80cfec:	d8c00017 	ldw	r3,0(sp)
  80cff0:	da000117 	ldw	r8,4(sp)
  80cff4:	103fc21e 	bne	r2,zero,80cf00 <__alt_mem_onchip_mem+0xff804f00>
  80cff8:	182f883a 	mov	r23,r3
  80cffc:	9de7c83a 	sub	r19,r19,r23
  80d000:	983fe11e 	bne	r19,zero,80cf88 <__alt_mem_onchip_mem+0xff804f88>
  80d004:	800b883a 	mov	r5,r16
  80d008:	a809883a 	mov	r4,r21
  80d00c:	080c3fc0 	call	80c3fc <_fflush_r>
  80d010:	103fbb1e 	bne	r2,zero,80cf00 <__alt_mem_onchip_mem+0xff804f00>
  80d014:	0011883a 	mov	r8,zero
  80d018:	003fdb06 	br	80cf88 <__alt_mem_onchip_mem+0xff804f88>
  80d01c:	94c0012e 	bgeu	r18,r19,80d024 <__sfvwrite_r+0x31c>
  80d020:	9027883a 	mov	r19,r18
  80d024:	980d883a 	mov	r6,r19
  80d028:	e00b883a 	mov	r5,fp
  80d02c:	080d7080 	call	80d708 <memmove>
  80d030:	80800217 	ldw	r2,8(r16)
  80d034:	80c00017 	ldw	r3,0(r16)
  80d038:	14c5c83a 	sub	r2,r2,r19
  80d03c:	1cc7883a 	add	r3,r3,r19
  80d040:	80800215 	stw	r2,8(r16)
  80d044:	80c00015 	stw	r3,0(r16)
  80d048:	10004326 	beq	r2,zero,80d158 <__sfvwrite_r+0x450>
  80d04c:	9805883a 	mov	r2,r19
  80d050:	003f8606 	br	80ce6c <__alt_mem_onchip_mem+0xff804e6c>
  80d054:	b00d883a 	mov	r6,r22
  80d058:	e00b883a 	mov	r5,fp
  80d05c:	da000115 	stw	r8,4(sp)
  80d060:	080d7080 	call	80d708 <memmove>
  80d064:	80800217 	ldw	r2,8(r16)
  80d068:	80c00017 	ldw	r3,0(r16)
  80d06c:	da000117 	ldw	r8,4(sp)
  80d070:	1585c83a 	sub	r2,r2,r22
  80d074:	1dad883a 	add	r22,r3,r22
  80d078:	80800215 	stw	r2,8(r16)
  80d07c:	85800015 	stw	r22,0(r16)
  80d080:	003fbf06 	br	80cf80 <__alt_mem_onchip_mem+0xff804f80>
  80d084:	81000017 	ldw	r4,0(r16)
  80d088:	9027883a 	mov	r19,r18
  80d08c:	902f883a 	mov	r23,r18
  80d090:	003f6c06 	br	80ce44 <__alt_mem_onchip_mem+0xff804e44>
  80d094:	900d883a 	mov	r6,r18
  80d098:	01400284 	movi	r5,10
  80d09c:	e009883a 	mov	r4,fp
  80d0a0:	080d4dc0 	call	80d4dc <memchr>
  80d0a4:	10003e26 	beq	r2,zero,80d1a0 <__sfvwrite_r+0x498>
  80d0a8:	10800044 	addi	r2,r2,1
  80d0ac:	1727c83a 	sub	r19,r2,fp
  80d0b0:	02000044 	movi	r8,1
  80d0b4:	003f9d06 	br	80cf2c <__alt_mem_onchip_mem+0xff804f2c>
  80d0b8:	80800517 	ldw	r2,20(r16)
  80d0bc:	81400417 	ldw	r5,16(r16)
  80d0c0:	81c00017 	ldw	r7,0(r16)
  80d0c4:	10a7883a 	add	r19,r2,r2
  80d0c8:	9885883a 	add	r2,r19,r2
  80d0cc:	1026d7fa 	srli	r19,r2,31
  80d0d0:	396dc83a 	sub	r22,r7,r5
  80d0d4:	b1000044 	addi	r4,r22,1
  80d0d8:	9885883a 	add	r2,r19,r2
  80d0dc:	1027d07a 	srai	r19,r2,1
  80d0e0:	2485883a 	add	r2,r4,r18
  80d0e4:	980d883a 	mov	r6,r19
  80d0e8:	9880022e 	bgeu	r19,r2,80d0f4 <__sfvwrite_r+0x3ec>
  80d0ec:	1027883a 	mov	r19,r2
  80d0f0:	100d883a 	mov	r6,r2
  80d0f4:	18c1000c 	andi	r3,r3,1024
  80d0f8:	18001c26 	beq	r3,zero,80d16c <__sfvwrite_r+0x464>
  80d0fc:	300b883a 	mov	r5,r6
  80d100:	a809883a 	mov	r4,r21
  80d104:	08075e00 	call	8075e0 <_malloc_r>
  80d108:	102f883a 	mov	r23,r2
  80d10c:	10002926 	beq	r2,zero,80d1b4 <__sfvwrite_r+0x4ac>
  80d110:	81400417 	ldw	r5,16(r16)
  80d114:	b00d883a 	mov	r6,r22
  80d118:	1009883a 	mov	r4,r2
  80d11c:	080d5c00 	call	80d5c0 <memcpy>
  80d120:	8080030b 	ldhu	r2,12(r16)
  80d124:	00fedfc4 	movi	r3,-1153
  80d128:	10c4703a 	and	r2,r2,r3
  80d12c:	10802014 	ori	r2,r2,128
  80d130:	8080030d 	sth	r2,12(r16)
  80d134:	bd89883a 	add	r4,r23,r22
  80d138:	9d8fc83a 	sub	r7,r19,r22
  80d13c:	85c00415 	stw	r23,16(r16)
  80d140:	84c00515 	stw	r19,20(r16)
  80d144:	81000015 	stw	r4,0(r16)
  80d148:	9027883a 	mov	r19,r18
  80d14c:	81c00215 	stw	r7,8(r16)
  80d150:	902f883a 	mov	r23,r18
  80d154:	003f3b06 	br	80ce44 <__alt_mem_onchip_mem+0xff804e44>
  80d158:	800b883a 	mov	r5,r16
  80d15c:	a809883a 	mov	r4,r21
  80d160:	080c3fc0 	call	80c3fc <_fflush_r>
  80d164:	103fb926 	beq	r2,zero,80d04c <__alt_mem_onchip_mem+0xff80504c>
  80d168:	003f6506 	br	80cf00 <__alt_mem_onchip_mem+0xff804f00>
  80d16c:	a809883a 	mov	r4,r21
  80d170:	080ea280 	call	80ea28 <_realloc_r>
  80d174:	102f883a 	mov	r23,r2
  80d178:	103fee1e 	bne	r2,zero,80d134 <__alt_mem_onchip_mem+0xff805134>
  80d17c:	81400417 	ldw	r5,16(r16)
  80d180:	a809883a 	mov	r4,r21
  80d184:	080c9f80 	call	80c9f8 <_free_r>
  80d188:	8080030b 	ldhu	r2,12(r16)
  80d18c:	00ffdfc4 	movi	r3,-129
  80d190:	1884703a 	and	r2,r3,r2
  80d194:	00c00304 	movi	r3,12
  80d198:	a8c00015 	stw	r3,0(r21)
  80d19c:	003f5906 	br	80cf04 <__alt_mem_onchip_mem+0xff804f04>
  80d1a0:	94c00044 	addi	r19,r18,1
  80d1a4:	02000044 	movi	r8,1
  80d1a8:	003f6006 	br	80cf2c <__alt_mem_onchip_mem+0xff804f2c>
  80d1ac:	00bfffc4 	movi	r2,-1
  80d1b0:	003f0306 	br	80cdc0 <__alt_mem_onchip_mem+0xff804dc0>
  80d1b4:	00800304 	movi	r2,12
  80d1b8:	a8800015 	stw	r2,0(r21)
  80d1bc:	8080030b 	ldhu	r2,12(r16)
  80d1c0:	003f5006 	br	80cf04 <__alt_mem_onchip_mem+0xff804f04>

0080d1c4 <_fwalk>:
  80d1c4:	defff704 	addi	sp,sp,-36
  80d1c8:	dd000415 	stw	r20,16(sp)
  80d1cc:	dfc00815 	stw	ra,32(sp)
  80d1d0:	ddc00715 	stw	r23,28(sp)
  80d1d4:	dd800615 	stw	r22,24(sp)
  80d1d8:	dd400515 	stw	r21,20(sp)
  80d1dc:	dcc00315 	stw	r19,12(sp)
  80d1e0:	dc800215 	stw	r18,8(sp)
  80d1e4:	dc400115 	stw	r17,4(sp)
  80d1e8:	dc000015 	stw	r16,0(sp)
  80d1ec:	2500b804 	addi	r20,r4,736
  80d1f0:	a0002326 	beq	r20,zero,80d280 <_fwalk+0xbc>
  80d1f4:	282b883a 	mov	r21,r5
  80d1f8:	002f883a 	mov	r23,zero
  80d1fc:	05800044 	movi	r22,1
  80d200:	04ffffc4 	movi	r19,-1
  80d204:	a4400117 	ldw	r17,4(r20)
  80d208:	a4800217 	ldw	r18,8(r20)
  80d20c:	8c7fffc4 	addi	r17,r17,-1
  80d210:	88000d16 	blt	r17,zero,80d248 <_fwalk+0x84>
  80d214:	94000304 	addi	r16,r18,12
  80d218:	94800384 	addi	r18,r18,14
  80d21c:	8080000b 	ldhu	r2,0(r16)
  80d220:	8c7fffc4 	addi	r17,r17,-1
  80d224:	813ffd04 	addi	r4,r16,-12
  80d228:	b080042e 	bgeu	r22,r2,80d23c <_fwalk+0x78>
  80d22c:	9080000f 	ldh	r2,0(r18)
  80d230:	14c00226 	beq	r2,r19,80d23c <_fwalk+0x78>
  80d234:	a83ee83a 	callr	r21
  80d238:	b8aeb03a 	or	r23,r23,r2
  80d23c:	84001a04 	addi	r16,r16,104
  80d240:	94801a04 	addi	r18,r18,104
  80d244:	8cfff51e 	bne	r17,r19,80d21c <__alt_mem_onchip_mem+0xff80521c>
  80d248:	a5000017 	ldw	r20,0(r20)
  80d24c:	a03fed1e 	bne	r20,zero,80d204 <__alt_mem_onchip_mem+0xff805204>
  80d250:	b805883a 	mov	r2,r23
  80d254:	dfc00817 	ldw	ra,32(sp)
  80d258:	ddc00717 	ldw	r23,28(sp)
  80d25c:	dd800617 	ldw	r22,24(sp)
  80d260:	dd400517 	ldw	r21,20(sp)
  80d264:	dd000417 	ldw	r20,16(sp)
  80d268:	dcc00317 	ldw	r19,12(sp)
  80d26c:	dc800217 	ldw	r18,8(sp)
  80d270:	dc400117 	ldw	r17,4(sp)
  80d274:	dc000017 	ldw	r16,0(sp)
  80d278:	dec00904 	addi	sp,sp,36
  80d27c:	f800283a 	ret
  80d280:	002f883a 	mov	r23,zero
  80d284:	003ff206 	br	80d250 <__alt_mem_onchip_mem+0xff805250>

0080d288 <_fwalk_reent>:
  80d288:	defff704 	addi	sp,sp,-36
  80d28c:	dd000415 	stw	r20,16(sp)
  80d290:	dfc00815 	stw	ra,32(sp)
  80d294:	ddc00715 	stw	r23,28(sp)
  80d298:	dd800615 	stw	r22,24(sp)
  80d29c:	dd400515 	stw	r21,20(sp)
  80d2a0:	dcc00315 	stw	r19,12(sp)
  80d2a4:	dc800215 	stw	r18,8(sp)
  80d2a8:	dc400115 	stw	r17,4(sp)
  80d2ac:	dc000015 	stw	r16,0(sp)
  80d2b0:	2500b804 	addi	r20,r4,736
  80d2b4:	a0002326 	beq	r20,zero,80d344 <_fwalk_reent+0xbc>
  80d2b8:	282b883a 	mov	r21,r5
  80d2bc:	2027883a 	mov	r19,r4
  80d2c0:	002f883a 	mov	r23,zero
  80d2c4:	05800044 	movi	r22,1
  80d2c8:	04bfffc4 	movi	r18,-1
  80d2cc:	a4400117 	ldw	r17,4(r20)
  80d2d0:	a4000217 	ldw	r16,8(r20)
  80d2d4:	8c7fffc4 	addi	r17,r17,-1
  80d2d8:	88000c16 	blt	r17,zero,80d30c <_fwalk_reent+0x84>
  80d2dc:	84000304 	addi	r16,r16,12
  80d2e0:	8080000b 	ldhu	r2,0(r16)
  80d2e4:	8c7fffc4 	addi	r17,r17,-1
  80d2e8:	817ffd04 	addi	r5,r16,-12
  80d2ec:	b080052e 	bgeu	r22,r2,80d304 <_fwalk_reent+0x7c>
  80d2f0:	8080008f 	ldh	r2,2(r16)
  80d2f4:	9809883a 	mov	r4,r19
  80d2f8:	14800226 	beq	r2,r18,80d304 <_fwalk_reent+0x7c>
  80d2fc:	a83ee83a 	callr	r21
  80d300:	b8aeb03a 	or	r23,r23,r2
  80d304:	84001a04 	addi	r16,r16,104
  80d308:	8cbff51e 	bne	r17,r18,80d2e0 <__alt_mem_onchip_mem+0xff8052e0>
  80d30c:	a5000017 	ldw	r20,0(r20)
  80d310:	a03fee1e 	bne	r20,zero,80d2cc <__alt_mem_onchip_mem+0xff8052cc>
  80d314:	b805883a 	mov	r2,r23
  80d318:	dfc00817 	ldw	ra,32(sp)
  80d31c:	ddc00717 	ldw	r23,28(sp)
  80d320:	dd800617 	ldw	r22,24(sp)
  80d324:	dd400517 	ldw	r21,20(sp)
  80d328:	dd000417 	ldw	r20,16(sp)
  80d32c:	dcc00317 	ldw	r19,12(sp)
  80d330:	dc800217 	ldw	r18,8(sp)
  80d334:	dc400117 	ldw	r17,4(sp)
  80d338:	dc000017 	ldw	r16,0(sp)
  80d33c:	dec00904 	addi	sp,sp,36
  80d340:	f800283a 	ret
  80d344:	002f883a 	mov	r23,zero
  80d348:	003ff206 	br	80d314 <__alt_mem_onchip_mem+0xff805314>

0080d34c <_isatty_r>:
  80d34c:	defffd04 	addi	sp,sp,-12
  80d350:	dc000015 	stw	r16,0(sp)
  80d354:	040020b4 	movhi	r16,130
  80d358:	dc400115 	stw	r17,4(sp)
  80d35c:	842bd504 	addi	r16,r16,-20652
  80d360:	2023883a 	mov	r17,r4
  80d364:	2809883a 	mov	r4,r5
  80d368:	dfc00215 	stw	ra,8(sp)
  80d36c:	80000015 	stw	zero,0(r16)
  80d370:	08130ac0 	call	8130ac <isatty>
  80d374:	00ffffc4 	movi	r3,-1
  80d378:	10c00526 	beq	r2,r3,80d390 <_isatty_r+0x44>
  80d37c:	dfc00217 	ldw	ra,8(sp)
  80d380:	dc400117 	ldw	r17,4(sp)
  80d384:	dc000017 	ldw	r16,0(sp)
  80d388:	dec00304 	addi	sp,sp,12
  80d38c:	f800283a 	ret
  80d390:	80c00017 	ldw	r3,0(r16)
  80d394:	183ff926 	beq	r3,zero,80d37c <__alt_mem_onchip_mem+0xff80537c>
  80d398:	88c00015 	stw	r3,0(r17)
  80d39c:	003ff706 	br	80d37c <__alt_mem_onchip_mem+0xff80537c>

0080d3a0 <_setlocale_r>:
  80d3a0:	30001b26 	beq	r6,zero,80d410 <_setlocale_r+0x70>
  80d3a4:	01402074 	movhi	r5,129
  80d3a8:	defffe04 	addi	sp,sp,-8
  80d3ac:	295c5b04 	addi	r5,r5,29036
  80d3b0:	3009883a 	mov	r4,r6
  80d3b4:	dc000015 	stw	r16,0(sp)
  80d3b8:	dfc00115 	stw	ra,4(sp)
  80d3bc:	3021883a 	mov	r16,r6
  80d3c0:	080f0000 	call	80f000 <strcmp>
  80d3c4:	1000061e 	bne	r2,zero,80d3e0 <_setlocale_r+0x40>
  80d3c8:	00802074 	movhi	r2,129
  80d3cc:	109c3c04 	addi	r2,r2,28912
  80d3d0:	dfc00117 	ldw	ra,4(sp)
  80d3d4:	dc000017 	ldw	r16,0(sp)
  80d3d8:	dec00204 	addi	sp,sp,8
  80d3dc:	f800283a 	ret
  80d3e0:	01402074 	movhi	r5,129
  80d3e4:	295c3c04 	addi	r5,r5,28912
  80d3e8:	8009883a 	mov	r4,r16
  80d3ec:	080f0000 	call	80f000 <strcmp>
  80d3f0:	103ff526 	beq	r2,zero,80d3c8 <__alt_mem_onchip_mem+0xff8053c8>
  80d3f4:	01402074 	movhi	r5,129
  80d3f8:	295c4604 	addi	r5,r5,28952
  80d3fc:	8009883a 	mov	r4,r16
  80d400:	080f0000 	call	80f000 <strcmp>
  80d404:	103ff026 	beq	r2,zero,80d3c8 <__alt_mem_onchip_mem+0xff8053c8>
  80d408:	0005883a 	mov	r2,zero
  80d40c:	003ff006 	br	80d3d0 <__alt_mem_onchip_mem+0xff8053d0>
  80d410:	00802074 	movhi	r2,129
  80d414:	109c3c04 	addi	r2,r2,28912
  80d418:	f800283a 	ret

0080d41c <__locale_charset>:
  80d41c:	00802074 	movhi	r2,129
  80d420:	109f7304 	addi	r2,r2,32204
  80d424:	f800283a 	ret

0080d428 <__locale_mb_cur_max>:
  80d428:	008020b4 	movhi	r2,130
  80d42c:	10a48804 	addi	r2,r2,-28128
  80d430:	10800017 	ldw	r2,0(r2)
  80d434:	f800283a 	ret

0080d438 <__locale_msgcharset>:
  80d438:	00802074 	movhi	r2,129
  80d43c:	109f6b04 	addi	r2,r2,32172
  80d440:	f800283a 	ret

0080d444 <__locale_cjk_lang>:
  80d444:	0005883a 	mov	r2,zero
  80d448:	f800283a 	ret

0080d44c <_localeconv_r>:
  80d44c:	00802074 	movhi	r2,129
  80d450:	109f7b04 	addi	r2,r2,32236
  80d454:	f800283a 	ret

0080d458 <setlocale>:
  80d458:	008020b4 	movhi	r2,130
  80d45c:	10a48504 	addi	r2,r2,-28140
  80d460:	280d883a 	mov	r6,r5
  80d464:	200b883a 	mov	r5,r4
  80d468:	11000017 	ldw	r4,0(r2)
  80d46c:	080d3a01 	jmpi	80d3a0 <_setlocale_r>

0080d470 <localeconv>:
  80d470:	00802074 	movhi	r2,129
  80d474:	109f7b04 	addi	r2,r2,32236
  80d478:	f800283a 	ret

0080d47c <_lseek_r>:
  80d47c:	defffd04 	addi	sp,sp,-12
  80d480:	2805883a 	mov	r2,r5
  80d484:	dc000015 	stw	r16,0(sp)
  80d488:	040020b4 	movhi	r16,130
  80d48c:	dc400115 	stw	r17,4(sp)
  80d490:	300b883a 	mov	r5,r6
  80d494:	842bd504 	addi	r16,r16,-20652
  80d498:	2023883a 	mov	r17,r4
  80d49c:	380d883a 	mov	r6,r7
  80d4a0:	1009883a 	mov	r4,r2
  80d4a4:	dfc00215 	stw	ra,8(sp)
  80d4a8:	80000015 	stw	zero,0(r16)
  80d4ac:	08132780 	call	813278 <lseek>
  80d4b0:	00ffffc4 	movi	r3,-1
  80d4b4:	10c00526 	beq	r2,r3,80d4cc <_lseek_r+0x50>
  80d4b8:	dfc00217 	ldw	ra,8(sp)
  80d4bc:	dc400117 	ldw	r17,4(sp)
  80d4c0:	dc000017 	ldw	r16,0(sp)
  80d4c4:	dec00304 	addi	sp,sp,12
  80d4c8:	f800283a 	ret
  80d4cc:	80c00017 	ldw	r3,0(r16)
  80d4d0:	183ff926 	beq	r3,zero,80d4b8 <__alt_mem_onchip_mem+0xff8054b8>
  80d4d4:	88c00015 	stw	r3,0(r17)
  80d4d8:	003ff706 	br	80d4b8 <__alt_mem_onchip_mem+0xff8054b8>

0080d4dc <memchr>:
  80d4dc:	208000cc 	andi	r2,r4,3
  80d4e0:	280f883a 	mov	r7,r5
  80d4e4:	10003426 	beq	r2,zero,80d5b8 <memchr+0xdc>
  80d4e8:	30bfffc4 	addi	r2,r6,-1
  80d4ec:	30001a26 	beq	r6,zero,80d558 <memchr+0x7c>
  80d4f0:	20c00003 	ldbu	r3,0(r4)
  80d4f4:	29803fcc 	andi	r6,r5,255
  80d4f8:	30c0051e 	bne	r6,r3,80d510 <memchr+0x34>
  80d4fc:	00001806 	br	80d560 <memchr+0x84>
  80d500:	10001526 	beq	r2,zero,80d558 <memchr+0x7c>
  80d504:	20c00003 	ldbu	r3,0(r4)
  80d508:	10bfffc4 	addi	r2,r2,-1
  80d50c:	30c01426 	beq	r6,r3,80d560 <memchr+0x84>
  80d510:	21000044 	addi	r4,r4,1
  80d514:	20c000cc 	andi	r3,r4,3
  80d518:	183ff91e 	bne	r3,zero,80d500 <__alt_mem_onchip_mem+0xff805500>
  80d51c:	020000c4 	movi	r8,3
  80d520:	40801136 	bltu	r8,r2,80d568 <memchr+0x8c>
  80d524:	10000c26 	beq	r2,zero,80d558 <memchr+0x7c>
  80d528:	20c00003 	ldbu	r3,0(r4)
  80d52c:	29403fcc 	andi	r5,r5,255
  80d530:	28c00b26 	beq	r5,r3,80d560 <memchr+0x84>
  80d534:	20c00044 	addi	r3,r4,1
  80d538:	39803fcc 	andi	r6,r7,255
  80d53c:	2089883a 	add	r4,r4,r2
  80d540:	00000306 	br	80d550 <memchr+0x74>
  80d544:	18c00044 	addi	r3,r3,1
  80d548:	197fffc3 	ldbu	r5,-1(r3)
  80d54c:	31400526 	beq	r6,r5,80d564 <memchr+0x88>
  80d550:	1805883a 	mov	r2,r3
  80d554:	20fffb1e 	bne	r4,r3,80d544 <__alt_mem_onchip_mem+0xff805544>
  80d558:	0005883a 	mov	r2,zero
  80d55c:	f800283a 	ret
  80d560:	2005883a 	mov	r2,r4
  80d564:	f800283a 	ret
  80d568:	28c03fcc 	andi	r3,r5,255
  80d56c:	1812923a 	slli	r9,r3,8
  80d570:	02ffbff4 	movhi	r11,65279
  80d574:	02a02074 	movhi	r10,32897
  80d578:	48d2b03a 	or	r9,r9,r3
  80d57c:	4806943a 	slli	r3,r9,16
  80d580:	5affbfc4 	addi	r11,r11,-257
  80d584:	52a02004 	addi	r10,r10,-32640
  80d588:	48d2b03a 	or	r9,r9,r3
  80d58c:	20c00017 	ldw	r3,0(r4)
  80d590:	48c6f03a 	xor	r3,r9,r3
  80d594:	1acd883a 	add	r6,r3,r11
  80d598:	00c6303a 	nor	r3,zero,r3
  80d59c:	30c6703a 	and	r3,r6,r3
  80d5a0:	1a86703a 	and	r3,r3,r10
  80d5a4:	183fe01e 	bne	r3,zero,80d528 <__alt_mem_onchip_mem+0xff805528>
  80d5a8:	10bfff04 	addi	r2,r2,-4
  80d5ac:	21000104 	addi	r4,r4,4
  80d5b0:	40bff636 	bltu	r8,r2,80d58c <__alt_mem_onchip_mem+0xff80558c>
  80d5b4:	003fdb06 	br	80d524 <__alt_mem_onchip_mem+0xff805524>
  80d5b8:	3005883a 	mov	r2,r6
  80d5bc:	003fd706 	br	80d51c <__alt_mem_onchip_mem+0xff80551c>

0080d5c0 <memcpy>:
  80d5c0:	defffd04 	addi	sp,sp,-12
  80d5c4:	dfc00215 	stw	ra,8(sp)
  80d5c8:	dc400115 	stw	r17,4(sp)
  80d5cc:	dc000015 	stw	r16,0(sp)
  80d5d0:	00c003c4 	movi	r3,15
  80d5d4:	2005883a 	mov	r2,r4
  80d5d8:	1980452e 	bgeu	r3,r6,80d6f0 <memcpy+0x130>
  80d5dc:	2906b03a 	or	r3,r5,r4
  80d5e0:	18c000cc 	andi	r3,r3,3
  80d5e4:	1800441e 	bne	r3,zero,80d6f8 <memcpy+0x138>
  80d5e8:	347ffc04 	addi	r17,r6,-16
  80d5ec:	8822d13a 	srli	r17,r17,4
  80d5f0:	28c00104 	addi	r3,r5,4
  80d5f4:	23400104 	addi	r13,r4,4
  80d5f8:	8820913a 	slli	r16,r17,4
  80d5fc:	2b000204 	addi	r12,r5,8
  80d600:	22c00204 	addi	r11,r4,8
  80d604:	84000504 	addi	r16,r16,20
  80d608:	2a800304 	addi	r10,r5,12
  80d60c:	22400304 	addi	r9,r4,12
  80d610:	2c21883a 	add	r16,r5,r16
  80d614:	2811883a 	mov	r8,r5
  80d618:	200f883a 	mov	r7,r4
  80d61c:	41000017 	ldw	r4,0(r8)
  80d620:	1fc00017 	ldw	ra,0(r3)
  80d624:	63c00017 	ldw	r15,0(r12)
  80d628:	39000015 	stw	r4,0(r7)
  80d62c:	53800017 	ldw	r14,0(r10)
  80d630:	6fc00015 	stw	ra,0(r13)
  80d634:	5bc00015 	stw	r15,0(r11)
  80d638:	4b800015 	stw	r14,0(r9)
  80d63c:	18c00404 	addi	r3,r3,16
  80d640:	39c00404 	addi	r7,r7,16
  80d644:	42000404 	addi	r8,r8,16
  80d648:	6b400404 	addi	r13,r13,16
  80d64c:	63000404 	addi	r12,r12,16
  80d650:	5ac00404 	addi	r11,r11,16
  80d654:	52800404 	addi	r10,r10,16
  80d658:	4a400404 	addi	r9,r9,16
  80d65c:	1c3fef1e 	bne	r3,r16,80d61c <__alt_mem_onchip_mem+0xff80561c>
  80d660:	89c00044 	addi	r7,r17,1
  80d664:	380e913a 	slli	r7,r7,4
  80d668:	310003cc 	andi	r4,r6,15
  80d66c:	02c000c4 	movi	r11,3
  80d670:	11c7883a 	add	r3,r2,r7
  80d674:	29cb883a 	add	r5,r5,r7
  80d678:	5900212e 	bgeu	r11,r4,80d700 <memcpy+0x140>
  80d67c:	1813883a 	mov	r9,r3
  80d680:	2811883a 	mov	r8,r5
  80d684:	200f883a 	mov	r7,r4
  80d688:	42800017 	ldw	r10,0(r8)
  80d68c:	4a400104 	addi	r9,r9,4
  80d690:	39ffff04 	addi	r7,r7,-4
  80d694:	4abfff15 	stw	r10,-4(r9)
  80d698:	42000104 	addi	r8,r8,4
  80d69c:	59fffa36 	bltu	r11,r7,80d688 <__alt_mem_onchip_mem+0xff805688>
  80d6a0:	213fff04 	addi	r4,r4,-4
  80d6a4:	2008d0ba 	srli	r4,r4,2
  80d6a8:	318000cc 	andi	r6,r6,3
  80d6ac:	21000044 	addi	r4,r4,1
  80d6b0:	2109883a 	add	r4,r4,r4
  80d6b4:	2109883a 	add	r4,r4,r4
  80d6b8:	1907883a 	add	r3,r3,r4
  80d6bc:	290b883a 	add	r5,r5,r4
  80d6c0:	30000626 	beq	r6,zero,80d6dc <memcpy+0x11c>
  80d6c4:	198d883a 	add	r6,r3,r6
  80d6c8:	29c00003 	ldbu	r7,0(r5)
  80d6cc:	18c00044 	addi	r3,r3,1
  80d6d0:	29400044 	addi	r5,r5,1
  80d6d4:	19ffffc5 	stb	r7,-1(r3)
  80d6d8:	19bffb1e 	bne	r3,r6,80d6c8 <__alt_mem_onchip_mem+0xff8056c8>
  80d6dc:	dfc00217 	ldw	ra,8(sp)
  80d6e0:	dc400117 	ldw	r17,4(sp)
  80d6e4:	dc000017 	ldw	r16,0(sp)
  80d6e8:	dec00304 	addi	sp,sp,12
  80d6ec:	f800283a 	ret
  80d6f0:	2007883a 	mov	r3,r4
  80d6f4:	003ff206 	br	80d6c0 <__alt_mem_onchip_mem+0xff8056c0>
  80d6f8:	2007883a 	mov	r3,r4
  80d6fc:	003ff106 	br	80d6c4 <__alt_mem_onchip_mem+0xff8056c4>
  80d700:	200d883a 	mov	r6,r4
  80d704:	003fee06 	br	80d6c0 <__alt_mem_onchip_mem+0xff8056c0>

0080d708 <memmove>:
  80d708:	2005883a 	mov	r2,r4
  80d70c:	29000b2e 	bgeu	r5,r4,80d73c <memmove+0x34>
  80d710:	298f883a 	add	r7,r5,r6
  80d714:	21c0092e 	bgeu	r4,r7,80d73c <memmove+0x34>
  80d718:	2187883a 	add	r3,r4,r6
  80d71c:	198bc83a 	sub	r5,r3,r6
  80d720:	30004826 	beq	r6,zero,80d844 <memmove+0x13c>
  80d724:	39ffffc4 	addi	r7,r7,-1
  80d728:	39000003 	ldbu	r4,0(r7)
  80d72c:	18ffffc4 	addi	r3,r3,-1
  80d730:	19000005 	stb	r4,0(r3)
  80d734:	28fffb1e 	bne	r5,r3,80d724 <__alt_mem_onchip_mem+0xff805724>
  80d738:	f800283a 	ret
  80d73c:	00c003c4 	movi	r3,15
  80d740:	1980412e 	bgeu	r3,r6,80d848 <memmove+0x140>
  80d744:	2886b03a 	or	r3,r5,r2
  80d748:	18c000cc 	andi	r3,r3,3
  80d74c:	1800401e 	bne	r3,zero,80d850 <memmove+0x148>
  80d750:	33fffc04 	addi	r15,r6,-16
  80d754:	781ed13a 	srli	r15,r15,4
  80d758:	28c00104 	addi	r3,r5,4
  80d75c:	13400104 	addi	r13,r2,4
  80d760:	781c913a 	slli	r14,r15,4
  80d764:	2b000204 	addi	r12,r5,8
  80d768:	12c00204 	addi	r11,r2,8
  80d76c:	73800504 	addi	r14,r14,20
  80d770:	2a800304 	addi	r10,r5,12
  80d774:	12400304 	addi	r9,r2,12
  80d778:	2b9d883a 	add	r14,r5,r14
  80d77c:	2811883a 	mov	r8,r5
  80d780:	100f883a 	mov	r7,r2
  80d784:	41000017 	ldw	r4,0(r8)
  80d788:	39c00404 	addi	r7,r7,16
  80d78c:	18c00404 	addi	r3,r3,16
  80d790:	393ffc15 	stw	r4,-16(r7)
  80d794:	193ffc17 	ldw	r4,-16(r3)
  80d798:	6b400404 	addi	r13,r13,16
  80d79c:	5ac00404 	addi	r11,r11,16
  80d7a0:	693ffc15 	stw	r4,-16(r13)
  80d7a4:	61000017 	ldw	r4,0(r12)
  80d7a8:	4a400404 	addi	r9,r9,16
  80d7ac:	42000404 	addi	r8,r8,16
  80d7b0:	593ffc15 	stw	r4,-16(r11)
  80d7b4:	51000017 	ldw	r4,0(r10)
  80d7b8:	63000404 	addi	r12,r12,16
  80d7bc:	52800404 	addi	r10,r10,16
  80d7c0:	493ffc15 	stw	r4,-16(r9)
  80d7c4:	1bbfef1e 	bne	r3,r14,80d784 <__alt_mem_onchip_mem+0xff805784>
  80d7c8:	79000044 	addi	r4,r15,1
  80d7cc:	2008913a 	slli	r4,r4,4
  80d7d0:	328003cc 	andi	r10,r6,15
  80d7d4:	02c000c4 	movi	r11,3
  80d7d8:	1107883a 	add	r3,r2,r4
  80d7dc:	290b883a 	add	r5,r5,r4
  80d7e0:	5a801e2e 	bgeu	r11,r10,80d85c <memmove+0x154>
  80d7e4:	1813883a 	mov	r9,r3
  80d7e8:	2811883a 	mov	r8,r5
  80d7ec:	500f883a 	mov	r7,r10
  80d7f0:	41000017 	ldw	r4,0(r8)
  80d7f4:	4a400104 	addi	r9,r9,4
  80d7f8:	39ffff04 	addi	r7,r7,-4
  80d7fc:	493fff15 	stw	r4,-4(r9)
  80d800:	42000104 	addi	r8,r8,4
  80d804:	59fffa36 	bltu	r11,r7,80d7f0 <__alt_mem_onchip_mem+0xff8057f0>
  80d808:	513fff04 	addi	r4,r10,-4
  80d80c:	2008d0ba 	srli	r4,r4,2
  80d810:	318000cc 	andi	r6,r6,3
  80d814:	21000044 	addi	r4,r4,1
  80d818:	2109883a 	add	r4,r4,r4
  80d81c:	2109883a 	add	r4,r4,r4
  80d820:	1907883a 	add	r3,r3,r4
  80d824:	290b883a 	add	r5,r5,r4
  80d828:	30000b26 	beq	r6,zero,80d858 <memmove+0x150>
  80d82c:	198d883a 	add	r6,r3,r6
  80d830:	29c00003 	ldbu	r7,0(r5)
  80d834:	18c00044 	addi	r3,r3,1
  80d838:	29400044 	addi	r5,r5,1
  80d83c:	19ffffc5 	stb	r7,-1(r3)
  80d840:	19bffb1e 	bne	r3,r6,80d830 <__alt_mem_onchip_mem+0xff805830>
  80d844:	f800283a 	ret
  80d848:	1007883a 	mov	r3,r2
  80d84c:	003ff606 	br	80d828 <__alt_mem_onchip_mem+0xff805828>
  80d850:	1007883a 	mov	r3,r2
  80d854:	003ff506 	br	80d82c <__alt_mem_onchip_mem+0xff80582c>
  80d858:	f800283a 	ret
  80d85c:	500d883a 	mov	r6,r10
  80d860:	003ff106 	br	80d828 <__alt_mem_onchip_mem+0xff805828>

0080d864 <_Balloc>:
  80d864:	20801317 	ldw	r2,76(r4)
  80d868:	defffc04 	addi	sp,sp,-16
  80d86c:	dc400115 	stw	r17,4(sp)
  80d870:	dc000015 	stw	r16,0(sp)
  80d874:	dfc00315 	stw	ra,12(sp)
  80d878:	dc800215 	stw	r18,8(sp)
  80d87c:	2023883a 	mov	r17,r4
  80d880:	2821883a 	mov	r16,r5
  80d884:	10000f26 	beq	r2,zero,80d8c4 <_Balloc+0x60>
  80d888:	8407883a 	add	r3,r16,r16
  80d88c:	18c7883a 	add	r3,r3,r3
  80d890:	10c7883a 	add	r3,r2,r3
  80d894:	18800017 	ldw	r2,0(r3)
  80d898:	10001126 	beq	r2,zero,80d8e0 <_Balloc+0x7c>
  80d89c:	11000017 	ldw	r4,0(r2)
  80d8a0:	19000015 	stw	r4,0(r3)
  80d8a4:	10000415 	stw	zero,16(r2)
  80d8a8:	10000315 	stw	zero,12(r2)
  80d8ac:	dfc00317 	ldw	ra,12(sp)
  80d8b0:	dc800217 	ldw	r18,8(sp)
  80d8b4:	dc400117 	ldw	r17,4(sp)
  80d8b8:	dc000017 	ldw	r16,0(sp)
  80d8bc:	dec00404 	addi	sp,sp,16
  80d8c0:	f800283a 	ret
  80d8c4:	01800844 	movi	r6,33
  80d8c8:	01400104 	movi	r5,4
  80d8cc:	081087c0 	call	81087c <_calloc_r>
  80d8d0:	88801315 	stw	r2,76(r17)
  80d8d4:	103fec1e 	bne	r2,zero,80d888 <__alt_mem_onchip_mem+0xff805888>
  80d8d8:	0005883a 	mov	r2,zero
  80d8dc:	003ff306 	br	80d8ac <__alt_mem_onchip_mem+0xff8058ac>
  80d8e0:	01400044 	movi	r5,1
  80d8e4:	2c24983a 	sll	r18,r5,r16
  80d8e8:	8809883a 	mov	r4,r17
  80d8ec:	91800144 	addi	r6,r18,5
  80d8f0:	318d883a 	add	r6,r6,r6
  80d8f4:	318d883a 	add	r6,r6,r6
  80d8f8:	081087c0 	call	81087c <_calloc_r>
  80d8fc:	103ff626 	beq	r2,zero,80d8d8 <__alt_mem_onchip_mem+0xff8058d8>
  80d900:	14000115 	stw	r16,4(r2)
  80d904:	14800215 	stw	r18,8(r2)
  80d908:	003fe606 	br	80d8a4 <__alt_mem_onchip_mem+0xff8058a4>

0080d90c <_Bfree>:
  80d90c:	28000826 	beq	r5,zero,80d930 <_Bfree+0x24>
  80d910:	28c00117 	ldw	r3,4(r5)
  80d914:	20801317 	ldw	r2,76(r4)
  80d918:	18c7883a 	add	r3,r3,r3
  80d91c:	18c7883a 	add	r3,r3,r3
  80d920:	10c5883a 	add	r2,r2,r3
  80d924:	10c00017 	ldw	r3,0(r2)
  80d928:	28c00015 	stw	r3,0(r5)
  80d92c:	11400015 	stw	r5,0(r2)
  80d930:	f800283a 	ret

0080d934 <__multadd>:
  80d934:	defffa04 	addi	sp,sp,-24
  80d938:	dc800315 	stw	r18,12(sp)
  80d93c:	dc400215 	stw	r17,8(sp)
  80d940:	dc000115 	stw	r16,4(sp)
  80d944:	2823883a 	mov	r17,r5
  80d948:	2c000417 	ldw	r16,16(r5)
  80d94c:	dfc00515 	stw	ra,20(sp)
  80d950:	dcc00415 	stw	r19,16(sp)
  80d954:	2025883a 	mov	r18,r4
  80d958:	29400504 	addi	r5,r5,20
  80d95c:	0011883a 	mov	r8,zero
  80d960:	28c00017 	ldw	r3,0(r5)
  80d964:	29400104 	addi	r5,r5,4
  80d968:	42000044 	addi	r8,r8,1
  80d96c:	18bfffcc 	andi	r2,r3,65535
  80d970:	1185383a 	mul	r2,r2,r6
  80d974:	1806d43a 	srli	r3,r3,16
  80d978:	11cf883a 	add	r7,r2,r7
  80d97c:	3808d43a 	srli	r4,r7,16
  80d980:	1987383a 	mul	r3,r3,r6
  80d984:	38bfffcc 	andi	r2,r7,65535
  80d988:	1907883a 	add	r3,r3,r4
  80d98c:	1808943a 	slli	r4,r3,16
  80d990:	180ed43a 	srli	r7,r3,16
  80d994:	2085883a 	add	r2,r4,r2
  80d998:	28bfff15 	stw	r2,-4(r5)
  80d99c:	443ff016 	blt	r8,r16,80d960 <__alt_mem_onchip_mem+0xff805960>
  80d9a0:	38000926 	beq	r7,zero,80d9c8 <__multadd+0x94>
  80d9a4:	88800217 	ldw	r2,8(r17)
  80d9a8:	80800f0e 	bge	r16,r2,80d9e8 <__multadd+0xb4>
  80d9ac:	80800144 	addi	r2,r16,5
  80d9b0:	1085883a 	add	r2,r2,r2
  80d9b4:	1085883a 	add	r2,r2,r2
  80d9b8:	8885883a 	add	r2,r17,r2
  80d9bc:	11c00015 	stw	r7,0(r2)
  80d9c0:	84000044 	addi	r16,r16,1
  80d9c4:	8c000415 	stw	r16,16(r17)
  80d9c8:	8805883a 	mov	r2,r17
  80d9cc:	dfc00517 	ldw	ra,20(sp)
  80d9d0:	dcc00417 	ldw	r19,16(sp)
  80d9d4:	dc800317 	ldw	r18,12(sp)
  80d9d8:	dc400217 	ldw	r17,8(sp)
  80d9dc:	dc000117 	ldw	r16,4(sp)
  80d9e0:	dec00604 	addi	sp,sp,24
  80d9e4:	f800283a 	ret
  80d9e8:	89400117 	ldw	r5,4(r17)
  80d9ec:	9009883a 	mov	r4,r18
  80d9f0:	d9c00015 	stw	r7,0(sp)
  80d9f4:	29400044 	addi	r5,r5,1
  80d9f8:	080d8640 	call	80d864 <_Balloc>
  80d9fc:	89800417 	ldw	r6,16(r17)
  80da00:	89400304 	addi	r5,r17,12
  80da04:	11000304 	addi	r4,r2,12
  80da08:	31800084 	addi	r6,r6,2
  80da0c:	318d883a 	add	r6,r6,r6
  80da10:	318d883a 	add	r6,r6,r6
  80da14:	1027883a 	mov	r19,r2
  80da18:	080d5c00 	call	80d5c0 <memcpy>
  80da1c:	d9c00017 	ldw	r7,0(sp)
  80da20:	88000a26 	beq	r17,zero,80da4c <__multadd+0x118>
  80da24:	88c00117 	ldw	r3,4(r17)
  80da28:	90801317 	ldw	r2,76(r18)
  80da2c:	18c7883a 	add	r3,r3,r3
  80da30:	18c7883a 	add	r3,r3,r3
  80da34:	10c5883a 	add	r2,r2,r3
  80da38:	10c00017 	ldw	r3,0(r2)
  80da3c:	88c00015 	stw	r3,0(r17)
  80da40:	14400015 	stw	r17,0(r2)
  80da44:	9823883a 	mov	r17,r19
  80da48:	003fd806 	br	80d9ac <__alt_mem_onchip_mem+0xff8059ac>
  80da4c:	9823883a 	mov	r17,r19
  80da50:	003fd606 	br	80d9ac <__alt_mem_onchip_mem+0xff8059ac>

0080da54 <__s2b>:
  80da54:	defff904 	addi	sp,sp,-28
  80da58:	dc400115 	stw	r17,4(sp)
  80da5c:	dc000015 	stw	r16,0(sp)
  80da60:	2023883a 	mov	r17,r4
  80da64:	2821883a 	mov	r16,r5
  80da68:	39000204 	addi	r4,r7,8
  80da6c:	01400244 	movi	r5,9
  80da70:	dcc00315 	stw	r19,12(sp)
  80da74:	dc800215 	stw	r18,8(sp)
  80da78:	dfc00615 	stw	ra,24(sp)
  80da7c:	dd400515 	stw	r21,20(sp)
  80da80:	dd000415 	stw	r20,16(sp)
  80da84:	3825883a 	mov	r18,r7
  80da88:	3027883a 	mov	r19,r6
  80da8c:	08118e40 	call	8118e4 <__divsi3>
  80da90:	00c00044 	movi	r3,1
  80da94:	000b883a 	mov	r5,zero
  80da98:	1880030e 	bge	r3,r2,80daa8 <__s2b+0x54>
  80da9c:	18c7883a 	add	r3,r3,r3
  80daa0:	29400044 	addi	r5,r5,1
  80daa4:	18bffd16 	blt	r3,r2,80da9c <__alt_mem_onchip_mem+0xff805a9c>
  80daa8:	8809883a 	mov	r4,r17
  80daac:	080d8640 	call	80d864 <_Balloc>
  80dab0:	d8c00717 	ldw	r3,28(sp)
  80dab4:	10c00515 	stw	r3,20(r2)
  80dab8:	00c00044 	movi	r3,1
  80dabc:	10c00415 	stw	r3,16(r2)
  80dac0:	00c00244 	movi	r3,9
  80dac4:	1cc0210e 	bge	r3,r19,80db4c <__s2b+0xf8>
  80dac8:	80eb883a 	add	r21,r16,r3
  80dacc:	a829883a 	mov	r20,r21
  80dad0:	84e1883a 	add	r16,r16,r19
  80dad4:	a1c00007 	ldb	r7,0(r20)
  80dad8:	01800284 	movi	r6,10
  80dadc:	a5000044 	addi	r20,r20,1
  80dae0:	100b883a 	mov	r5,r2
  80dae4:	39fff404 	addi	r7,r7,-48
  80dae8:	8809883a 	mov	r4,r17
  80daec:	080d9340 	call	80d934 <__multadd>
  80daf0:	a43ff81e 	bne	r20,r16,80dad4 <__alt_mem_onchip_mem+0xff805ad4>
  80daf4:	ace1883a 	add	r16,r21,r19
  80daf8:	843ffe04 	addi	r16,r16,-8
  80dafc:	9c800a0e 	bge	r19,r18,80db28 <__s2b+0xd4>
  80db00:	94e5c83a 	sub	r18,r18,r19
  80db04:	84a5883a 	add	r18,r16,r18
  80db08:	81c00007 	ldb	r7,0(r16)
  80db0c:	01800284 	movi	r6,10
  80db10:	84000044 	addi	r16,r16,1
  80db14:	100b883a 	mov	r5,r2
  80db18:	39fff404 	addi	r7,r7,-48
  80db1c:	8809883a 	mov	r4,r17
  80db20:	080d9340 	call	80d934 <__multadd>
  80db24:	84bff81e 	bne	r16,r18,80db08 <__alt_mem_onchip_mem+0xff805b08>
  80db28:	dfc00617 	ldw	ra,24(sp)
  80db2c:	dd400517 	ldw	r21,20(sp)
  80db30:	dd000417 	ldw	r20,16(sp)
  80db34:	dcc00317 	ldw	r19,12(sp)
  80db38:	dc800217 	ldw	r18,8(sp)
  80db3c:	dc400117 	ldw	r17,4(sp)
  80db40:	dc000017 	ldw	r16,0(sp)
  80db44:	dec00704 	addi	sp,sp,28
  80db48:	f800283a 	ret
  80db4c:	84000284 	addi	r16,r16,10
  80db50:	1827883a 	mov	r19,r3
  80db54:	003fe906 	br	80dafc <__alt_mem_onchip_mem+0xff805afc>

0080db58 <__hi0bits>:
  80db58:	20bfffec 	andhi	r2,r4,65535
  80db5c:	1000141e 	bne	r2,zero,80dbb0 <__hi0bits+0x58>
  80db60:	2008943a 	slli	r4,r4,16
  80db64:	00800404 	movi	r2,16
  80db68:	20ffc02c 	andhi	r3,r4,65280
  80db6c:	1800021e 	bne	r3,zero,80db78 <__hi0bits+0x20>
  80db70:	2008923a 	slli	r4,r4,8
  80db74:	10800204 	addi	r2,r2,8
  80db78:	20fc002c 	andhi	r3,r4,61440
  80db7c:	1800021e 	bne	r3,zero,80db88 <__hi0bits+0x30>
  80db80:	2008913a 	slli	r4,r4,4
  80db84:	10800104 	addi	r2,r2,4
  80db88:	20f0002c 	andhi	r3,r4,49152
  80db8c:	1800031e 	bne	r3,zero,80db9c <__hi0bits+0x44>
  80db90:	2109883a 	add	r4,r4,r4
  80db94:	10800084 	addi	r2,r2,2
  80db98:	2109883a 	add	r4,r4,r4
  80db9c:	20000316 	blt	r4,zero,80dbac <__hi0bits+0x54>
  80dba0:	2110002c 	andhi	r4,r4,16384
  80dba4:	2000041e 	bne	r4,zero,80dbb8 <__hi0bits+0x60>
  80dba8:	00800804 	movi	r2,32
  80dbac:	f800283a 	ret
  80dbb0:	0005883a 	mov	r2,zero
  80dbb4:	003fec06 	br	80db68 <__alt_mem_onchip_mem+0xff805b68>
  80dbb8:	10800044 	addi	r2,r2,1
  80dbbc:	f800283a 	ret

0080dbc0 <__lo0bits>:
  80dbc0:	20c00017 	ldw	r3,0(r4)
  80dbc4:	188001cc 	andi	r2,r3,7
  80dbc8:	10000826 	beq	r2,zero,80dbec <__lo0bits+0x2c>
  80dbcc:	1880004c 	andi	r2,r3,1
  80dbd0:	1000211e 	bne	r2,zero,80dc58 <__lo0bits+0x98>
  80dbd4:	1880008c 	andi	r2,r3,2
  80dbd8:	1000211e 	bne	r2,zero,80dc60 <__lo0bits+0xa0>
  80dbdc:	1806d0ba 	srli	r3,r3,2
  80dbe0:	00800084 	movi	r2,2
  80dbe4:	20c00015 	stw	r3,0(r4)
  80dbe8:	f800283a 	ret
  80dbec:	18bfffcc 	andi	r2,r3,65535
  80dbf0:	10001326 	beq	r2,zero,80dc40 <__lo0bits+0x80>
  80dbf4:	0005883a 	mov	r2,zero
  80dbf8:	19403fcc 	andi	r5,r3,255
  80dbfc:	2800021e 	bne	r5,zero,80dc08 <__lo0bits+0x48>
  80dc00:	1806d23a 	srli	r3,r3,8
  80dc04:	10800204 	addi	r2,r2,8
  80dc08:	194003cc 	andi	r5,r3,15
  80dc0c:	2800021e 	bne	r5,zero,80dc18 <__lo0bits+0x58>
  80dc10:	1806d13a 	srli	r3,r3,4
  80dc14:	10800104 	addi	r2,r2,4
  80dc18:	194000cc 	andi	r5,r3,3
  80dc1c:	2800021e 	bne	r5,zero,80dc28 <__lo0bits+0x68>
  80dc20:	1806d0ba 	srli	r3,r3,2
  80dc24:	10800084 	addi	r2,r2,2
  80dc28:	1940004c 	andi	r5,r3,1
  80dc2c:	2800081e 	bne	r5,zero,80dc50 <__lo0bits+0x90>
  80dc30:	1806d07a 	srli	r3,r3,1
  80dc34:	1800051e 	bne	r3,zero,80dc4c <__lo0bits+0x8c>
  80dc38:	00800804 	movi	r2,32
  80dc3c:	f800283a 	ret
  80dc40:	1806d43a 	srli	r3,r3,16
  80dc44:	00800404 	movi	r2,16
  80dc48:	003feb06 	br	80dbf8 <__alt_mem_onchip_mem+0xff805bf8>
  80dc4c:	10800044 	addi	r2,r2,1
  80dc50:	20c00015 	stw	r3,0(r4)
  80dc54:	f800283a 	ret
  80dc58:	0005883a 	mov	r2,zero
  80dc5c:	f800283a 	ret
  80dc60:	1806d07a 	srli	r3,r3,1
  80dc64:	00800044 	movi	r2,1
  80dc68:	20c00015 	stw	r3,0(r4)
  80dc6c:	f800283a 	ret

0080dc70 <__i2b>:
  80dc70:	defffd04 	addi	sp,sp,-12
  80dc74:	dc000015 	stw	r16,0(sp)
  80dc78:	04000044 	movi	r16,1
  80dc7c:	dc400115 	stw	r17,4(sp)
  80dc80:	2823883a 	mov	r17,r5
  80dc84:	800b883a 	mov	r5,r16
  80dc88:	dfc00215 	stw	ra,8(sp)
  80dc8c:	080d8640 	call	80d864 <_Balloc>
  80dc90:	14400515 	stw	r17,20(r2)
  80dc94:	14000415 	stw	r16,16(r2)
  80dc98:	dfc00217 	ldw	ra,8(sp)
  80dc9c:	dc400117 	ldw	r17,4(sp)
  80dca0:	dc000017 	ldw	r16,0(sp)
  80dca4:	dec00304 	addi	sp,sp,12
  80dca8:	f800283a 	ret

0080dcac <__multiply>:
  80dcac:	defffa04 	addi	sp,sp,-24
  80dcb0:	dcc00315 	stw	r19,12(sp)
  80dcb4:	dc800215 	stw	r18,8(sp)
  80dcb8:	34c00417 	ldw	r19,16(r6)
  80dcbc:	2c800417 	ldw	r18,16(r5)
  80dcc0:	dd000415 	stw	r20,16(sp)
  80dcc4:	dc400115 	stw	r17,4(sp)
  80dcc8:	dfc00515 	stw	ra,20(sp)
  80dccc:	dc000015 	stw	r16,0(sp)
  80dcd0:	2829883a 	mov	r20,r5
  80dcd4:	3023883a 	mov	r17,r6
  80dcd8:	94c0050e 	bge	r18,r19,80dcf0 <__multiply+0x44>
  80dcdc:	9007883a 	mov	r3,r18
  80dce0:	3029883a 	mov	r20,r6
  80dce4:	9825883a 	mov	r18,r19
  80dce8:	2823883a 	mov	r17,r5
  80dcec:	1827883a 	mov	r19,r3
  80dcf0:	a0800217 	ldw	r2,8(r20)
  80dcf4:	94e1883a 	add	r16,r18,r19
  80dcf8:	a1400117 	ldw	r5,4(r20)
  80dcfc:	1400010e 	bge	r2,r16,80dd04 <__multiply+0x58>
  80dd00:	29400044 	addi	r5,r5,1
  80dd04:	080d8640 	call	80d864 <_Balloc>
  80dd08:	8415883a 	add	r10,r16,r16
  80dd0c:	12c00504 	addi	r11,r2,20
  80dd10:	5295883a 	add	r10,r10,r10
  80dd14:	5a95883a 	add	r10,r11,r10
  80dd18:	5807883a 	mov	r3,r11
  80dd1c:	5a80032e 	bgeu	r11,r10,80dd2c <__multiply+0x80>
  80dd20:	18000015 	stw	zero,0(r3)
  80dd24:	18c00104 	addi	r3,r3,4
  80dd28:	1abffd36 	bltu	r3,r10,80dd20 <__alt_mem_onchip_mem+0xff805d20>
  80dd2c:	9ce7883a 	add	r19,r19,r19
  80dd30:	94a5883a 	add	r18,r18,r18
  80dd34:	89800504 	addi	r6,r17,20
  80dd38:	9ce7883a 	add	r19,r19,r19
  80dd3c:	a3400504 	addi	r13,r20,20
  80dd40:	94a5883a 	add	r18,r18,r18
  80dd44:	34d9883a 	add	r12,r6,r19
  80dd48:	6c93883a 	add	r9,r13,r18
  80dd4c:	3300422e 	bgeu	r6,r12,80de58 <__multiply+0x1ac>
  80dd50:	37c00017 	ldw	ra,0(r6)
  80dd54:	fbffffcc 	andi	r15,ra,65535
  80dd58:	78001b26 	beq	r15,zero,80ddc8 <__multiply+0x11c>
  80dd5c:	5811883a 	mov	r8,r11
  80dd60:	681d883a 	mov	r14,r13
  80dd64:	000f883a 	mov	r7,zero
  80dd68:	71000017 	ldw	r4,0(r14)
  80dd6c:	40c00017 	ldw	r3,0(r8)
  80dd70:	73800104 	addi	r14,r14,4
  80dd74:	217fffcc 	andi	r5,r4,65535
  80dd78:	2bcb383a 	mul	r5,r5,r15
  80dd7c:	2008d43a 	srli	r4,r4,16
  80dd80:	1c7fffcc 	andi	r17,r3,65535
  80dd84:	2c4b883a 	add	r5,r5,r17
  80dd88:	29cb883a 	add	r5,r5,r7
  80dd8c:	23c9383a 	mul	r4,r4,r15
  80dd90:	1806d43a 	srli	r3,r3,16
  80dd94:	280ed43a 	srli	r7,r5,16
  80dd98:	297fffcc 	andi	r5,r5,65535
  80dd9c:	20c7883a 	add	r3,r4,r3
  80dda0:	19c7883a 	add	r3,r3,r7
  80dda4:	1808943a 	slli	r4,r3,16
  80dda8:	4023883a 	mov	r17,r8
  80ddac:	180ed43a 	srli	r7,r3,16
  80ddb0:	214ab03a 	or	r5,r4,r5
  80ddb4:	41400015 	stw	r5,0(r8)
  80ddb8:	42000104 	addi	r8,r8,4
  80ddbc:	727fea36 	bltu	r14,r9,80dd68 <__alt_mem_onchip_mem+0xff805d68>
  80ddc0:	89c00115 	stw	r7,4(r17)
  80ddc4:	37c00017 	ldw	ra,0(r6)
  80ddc8:	f83ed43a 	srli	ra,ra,16
  80ddcc:	f8001f26 	beq	ra,zero,80de4c <__multiply+0x1a0>
  80ddd0:	58c00017 	ldw	r3,0(r11)
  80ddd4:	681d883a 	mov	r14,r13
  80ddd8:	581f883a 	mov	r15,r11
  80dddc:	1811883a 	mov	r8,r3
  80dde0:	5825883a 	mov	r18,r11
  80dde4:	000f883a 	mov	r7,zero
  80dde8:	00000106 	br	80ddf0 <__multiply+0x144>
  80ddec:	8825883a 	mov	r18,r17
  80ddf0:	7140000b 	ldhu	r5,0(r14)
  80ddf4:	4010d43a 	srli	r8,r8,16
  80ddf8:	193fffcc 	andi	r4,r3,65535
  80ddfc:	2fcb383a 	mul	r5,r5,ra
  80de00:	7bc00104 	addi	r15,r15,4
  80de04:	73800104 	addi	r14,r14,4
  80de08:	2a0b883a 	add	r5,r5,r8
  80de0c:	29cb883a 	add	r5,r5,r7
  80de10:	2806943a 	slli	r3,r5,16
  80de14:	94400104 	addi	r17,r18,4
  80de18:	280ad43a 	srli	r5,r5,16
  80de1c:	1908b03a 	or	r4,r3,r4
  80de20:	793fff15 	stw	r4,-4(r15)
  80de24:	70ffff17 	ldw	r3,-4(r14)
  80de28:	8a000017 	ldw	r8,0(r17)
  80de2c:	1806d43a 	srli	r3,r3,16
  80de30:	413fffcc 	andi	r4,r8,65535
  80de34:	1fc7383a 	mul	r3,r3,ra
  80de38:	1907883a 	add	r3,r3,r4
  80de3c:	1947883a 	add	r3,r3,r5
  80de40:	180ed43a 	srli	r7,r3,16
  80de44:	727fe936 	bltu	r14,r9,80ddec <__alt_mem_onchip_mem+0xff805dec>
  80de48:	90c00115 	stw	r3,4(r18)
  80de4c:	31800104 	addi	r6,r6,4
  80de50:	5ac00104 	addi	r11,r11,4
  80de54:	333fbe36 	bltu	r6,r12,80dd50 <__alt_mem_onchip_mem+0xff805d50>
  80de58:	0400090e 	bge	zero,r16,80de80 <__multiply+0x1d4>
  80de5c:	50ffff17 	ldw	r3,-4(r10)
  80de60:	52bfff04 	addi	r10,r10,-4
  80de64:	18000326 	beq	r3,zero,80de74 <__multiply+0x1c8>
  80de68:	00000506 	br	80de80 <__multiply+0x1d4>
  80de6c:	50c00017 	ldw	r3,0(r10)
  80de70:	1800031e 	bne	r3,zero,80de80 <__multiply+0x1d4>
  80de74:	843fffc4 	addi	r16,r16,-1
  80de78:	52bfff04 	addi	r10,r10,-4
  80de7c:	803ffb1e 	bne	r16,zero,80de6c <__alt_mem_onchip_mem+0xff805e6c>
  80de80:	14000415 	stw	r16,16(r2)
  80de84:	dfc00517 	ldw	ra,20(sp)
  80de88:	dd000417 	ldw	r20,16(sp)
  80de8c:	dcc00317 	ldw	r19,12(sp)
  80de90:	dc800217 	ldw	r18,8(sp)
  80de94:	dc400117 	ldw	r17,4(sp)
  80de98:	dc000017 	ldw	r16,0(sp)
  80de9c:	dec00604 	addi	sp,sp,24
  80dea0:	f800283a 	ret

0080dea4 <__pow5mult>:
  80dea4:	defffa04 	addi	sp,sp,-24
  80dea8:	dcc00315 	stw	r19,12(sp)
  80deac:	dc000015 	stw	r16,0(sp)
  80deb0:	dfc00515 	stw	ra,20(sp)
  80deb4:	dd000415 	stw	r20,16(sp)
  80deb8:	dc800215 	stw	r18,8(sp)
  80debc:	dc400115 	stw	r17,4(sp)
  80dec0:	308000cc 	andi	r2,r6,3
  80dec4:	3021883a 	mov	r16,r6
  80dec8:	2027883a 	mov	r19,r4
  80decc:	10002f1e 	bne	r2,zero,80df8c <__pow5mult+0xe8>
  80ded0:	2825883a 	mov	r18,r5
  80ded4:	8021d0ba 	srai	r16,r16,2
  80ded8:	80001a26 	beq	r16,zero,80df44 <__pow5mult+0xa0>
  80dedc:	9c401217 	ldw	r17,72(r19)
  80dee0:	8800061e 	bne	r17,zero,80defc <__pow5mult+0x58>
  80dee4:	00003406 	br	80dfb8 <__pow5mult+0x114>
  80dee8:	8021d07a 	srai	r16,r16,1
  80deec:	80001526 	beq	r16,zero,80df44 <__pow5mult+0xa0>
  80def0:	88800017 	ldw	r2,0(r17)
  80def4:	10001c26 	beq	r2,zero,80df68 <__pow5mult+0xc4>
  80def8:	1023883a 	mov	r17,r2
  80defc:	8080004c 	andi	r2,r16,1
  80df00:	103ff926 	beq	r2,zero,80dee8 <__alt_mem_onchip_mem+0xff805ee8>
  80df04:	880d883a 	mov	r6,r17
  80df08:	900b883a 	mov	r5,r18
  80df0c:	9809883a 	mov	r4,r19
  80df10:	080dcac0 	call	80dcac <__multiply>
  80df14:	90001b26 	beq	r18,zero,80df84 <__pow5mult+0xe0>
  80df18:	91000117 	ldw	r4,4(r18)
  80df1c:	98c01317 	ldw	r3,76(r19)
  80df20:	8021d07a 	srai	r16,r16,1
  80df24:	2109883a 	add	r4,r4,r4
  80df28:	2109883a 	add	r4,r4,r4
  80df2c:	1907883a 	add	r3,r3,r4
  80df30:	19000017 	ldw	r4,0(r3)
  80df34:	91000015 	stw	r4,0(r18)
  80df38:	1c800015 	stw	r18,0(r3)
  80df3c:	1025883a 	mov	r18,r2
  80df40:	803feb1e 	bne	r16,zero,80def0 <__alt_mem_onchip_mem+0xff805ef0>
  80df44:	9005883a 	mov	r2,r18
  80df48:	dfc00517 	ldw	ra,20(sp)
  80df4c:	dd000417 	ldw	r20,16(sp)
  80df50:	dcc00317 	ldw	r19,12(sp)
  80df54:	dc800217 	ldw	r18,8(sp)
  80df58:	dc400117 	ldw	r17,4(sp)
  80df5c:	dc000017 	ldw	r16,0(sp)
  80df60:	dec00604 	addi	sp,sp,24
  80df64:	f800283a 	ret
  80df68:	880d883a 	mov	r6,r17
  80df6c:	880b883a 	mov	r5,r17
  80df70:	9809883a 	mov	r4,r19
  80df74:	080dcac0 	call	80dcac <__multiply>
  80df78:	88800015 	stw	r2,0(r17)
  80df7c:	10000015 	stw	zero,0(r2)
  80df80:	003fdd06 	br	80def8 <__alt_mem_onchip_mem+0xff805ef8>
  80df84:	1025883a 	mov	r18,r2
  80df88:	003fd706 	br	80dee8 <__alt_mem_onchip_mem+0xff805ee8>
  80df8c:	10bfffc4 	addi	r2,r2,-1
  80df90:	1085883a 	add	r2,r2,r2
  80df94:	00c02074 	movhi	r3,129
  80df98:	18dc5e04 	addi	r3,r3,29048
  80df9c:	1085883a 	add	r2,r2,r2
  80dfa0:	1885883a 	add	r2,r3,r2
  80dfa4:	11800017 	ldw	r6,0(r2)
  80dfa8:	000f883a 	mov	r7,zero
  80dfac:	080d9340 	call	80d934 <__multadd>
  80dfb0:	1025883a 	mov	r18,r2
  80dfb4:	003fc706 	br	80ded4 <__alt_mem_onchip_mem+0xff805ed4>
  80dfb8:	05000044 	movi	r20,1
  80dfbc:	a00b883a 	mov	r5,r20
  80dfc0:	9809883a 	mov	r4,r19
  80dfc4:	080d8640 	call	80d864 <_Balloc>
  80dfc8:	1023883a 	mov	r17,r2
  80dfcc:	00809c44 	movi	r2,625
  80dfd0:	88800515 	stw	r2,20(r17)
  80dfd4:	8d000415 	stw	r20,16(r17)
  80dfd8:	9c401215 	stw	r17,72(r19)
  80dfdc:	88000015 	stw	zero,0(r17)
  80dfe0:	003fc606 	br	80defc <__alt_mem_onchip_mem+0xff805efc>

0080dfe4 <__lshift>:
  80dfe4:	defff904 	addi	sp,sp,-28
  80dfe8:	dd400515 	stw	r21,20(sp)
  80dfec:	dcc00315 	stw	r19,12(sp)
  80dff0:	302bd17a 	srai	r21,r6,5
  80dff4:	2cc00417 	ldw	r19,16(r5)
  80dff8:	28800217 	ldw	r2,8(r5)
  80dffc:	dd000415 	stw	r20,16(sp)
  80e000:	ace7883a 	add	r19,r21,r19
  80e004:	dc800215 	stw	r18,8(sp)
  80e008:	dc400115 	stw	r17,4(sp)
  80e00c:	dc000015 	stw	r16,0(sp)
  80e010:	dfc00615 	stw	ra,24(sp)
  80e014:	9c000044 	addi	r16,r19,1
  80e018:	2823883a 	mov	r17,r5
  80e01c:	3029883a 	mov	r20,r6
  80e020:	2025883a 	mov	r18,r4
  80e024:	29400117 	ldw	r5,4(r5)
  80e028:	1400030e 	bge	r2,r16,80e038 <__lshift+0x54>
  80e02c:	1085883a 	add	r2,r2,r2
  80e030:	29400044 	addi	r5,r5,1
  80e034:	143ffd16 	blt	r2,r16,80e02c <__alt_mem_onchip_mem+0xff80602c>
  80e038:	9009883a 	mov	r4,r18
  80e03c:	080d8640 	call	80d864 <_Balloc>
  80e040:	10c00504 	addi	r3,r2,20
  80e044:	0540070e 	bge	zero,r21,80e064 <__lshift+0x80>
  80e048:	ad6b883a 	add	r21,r21,r21
  80e04c:	ad6b883a 	add	r21,r21,r21
  80e050:	1809883a 	mov	r4,r3
  80e054:	1d47883a 	add	r3,r3,r21
  80e058:	20000015 	stw	zero,0(r4)
  80e05c:	21000104 	addi	r4,r4,4
  80e060:	193ffd1e 	bne	r3,r4,80e058 <__alt_mem_onchip_mem+0xff806058>
  80e064:	8a000417 	ldw	r8,16(r17)
  80e068:	89000504 	addi	r4,r17,20
  80e06c:	a18007cc 	andi	r6,r20,31
  80e070:	4211883a 	add	r8,r8,r8
  80e074:	4211883a 	add	r8,r8,r8
  80e078:	2211883a 	add	r8,r4,r8
  80e07c:	30002326 	beq	r6,zero,80e10c <__lshift+0x128>
  80e080:	02400804 	movi	r9,32
  80e084:	4993c83a 	sub	r9,r9,r6
  80e088:	000b883a 	mov	r5,zero
  80e08c:	21c00017 	ldw	r7,0(r4)
  80e090:	1815883a 	mov	r10,r3
  80e094:	18c00104 	addi	r3,r3,4
  80e098:	398e983a 	sll	r7,r7,r6
  80e09c:	21000104 	addi	r4,r4,4
  80e0a0:	394ab03a 	or	r5,r7,r5
  80e0a4:	197fff15 	stw	r5,-4(r3)
  80e0a8:	217fff17 	ldw	r5,-4(r4)
  80e0ac:	2a4ad83a 	srl	r5,r5,r9
  80e0b0:	223ff636 	bltu	r4,r8,80e08c <__alt_mem_onchip_mem+0xff80608c>
  80e0b4:	51400115 	stw	r5,4(r10)
  80e0b8:	28001a1e 	bne	r5,zero,80e124 <__lshift+0x140>
  80e0bc:	843fffc4 	addi	r16,r16,-1
  80e0c0:	14000415 	stw	r16,16(r2)
  80e0c4:	88000826 	beq	r17,zero,80e0e8 <__lshift+0x104>
  80e0c8:	89000117 	ldw	r4,4(r17)
  80e0cc:	90c01317 	ldw	r3,76(r18)
  80e0d0:	2109883a 	add	r4,r4,r4
  80e0d4:	2109883a 	add	r4,r4,r4
  80e0d8:	1907883a 	add	r3,r3,r4
  80e0dc:	19000017 	ldw	r4,0(r3)
  80e0e0:	89000015 	stw	r4,0(r17)
  80e0e4:	1c400015 	stw	r17,0(r3)
  80e0e8:	dfc00617 	ldw	ra,24(sp)
  80e0ec:	dd400517 	ldw	r21,20(sp)
  80e0f0:	dd000417 	ldw	r20,16(sp)
  80e0f4:	dcc00317 	ldw	r19,12(sp)
  80e0f8:	dc800217 	ldw	r18,8(sp)
  80e0fc:	dc400117 	ldw	r17,4(sp)
  80e100:	dc000017 	ldw	r16,0(sp)
  80e104:	dec00704 	addi	sp,sp,28
  80e108:	f800283a 	ret
  80e10c:	21400017 	ldw	r5,0(r4)
  80e110:	18c00104 	addi	r3,r3,4
  80e114:	21000104 	addi	r4,r4,4
  80e118:	197fff15 	stw	r5,-4(r3)
  80e11c:	223ffb36 	bltu	r4,r8,80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e120:	003fe606 	br	80e0bc <__alt_mem_onchip_mem+0xff8060bc>
  80e124:	9c000084 	addi	r16,r19,2
  80e128:	003fe406 	br	80e0bc <__alt_mem_onchip_mem+0xff8060bc>

0080e12c <__mcmp>:
  80e12c:	20800417 	ldw	r2,16(r4)
  80e130:	28c00417 	ldw	r3,16(r5)
  80e134:	10c5c83a 	sub	r2,r2,r3
  80e138:	1000111e 	bne	r2,zero,80e180 <__mcmp+0x54>
  80e13c:	18c7883a 	add	r3,r3,r3
  80e140:	18c7883a 	add	r3,r3,r3
  80e144:	21000504 	addi	r4,r4,20
  80e148:	29400504 	addi	r5,r5,20
  80e14c:	20c5883a 	add	r2,r4,r3
  80e150:	28cb883a 	add	r5,r5,r3
  80e154:	00000106 	br	80e15c <__mcmp+0x30>
  80e158:	20800a2e 	bgeu	r4,r2,80e184 <__mcmp+0x58>
  80e15c:	10bfff04 	addi	r2,r2,-4
  80e160:	297fff04 	addi	r5,r5,-4
  80e164:	11800017 	ldw	r6,0(r2)
  80e168:	28c00017 	ldw	r3,0(r5)
  80e16c:	30fffa26 	beq	r6,r3,80e158 <__alt_mem_onchip_mem+0xff806158>
  80e170:	30c00236 	bltu	r6,r3,80e17c <__mcmp+0x50>
  80e174:	00800044 	movi	r2,1
  80e178:	f800283a 	ret
  80e17c:	00bfffc4 	movi	r2,-1
  80e180:	f800283a 	ret
  80e184:	0005883a 	mov	r2,zero
  80e188:	f800283a 	ret

0080e18c <__mdiff>:
  80e18c:	28c00417 	ldw	r3,16(r5)
  80e190:	30800417 	ldw	r2,16(r6)
  80e194:	defffa04 	addi	sp,sp,-24
  80e198:	dcc00315 	stw	r19,12(sp)
  80e19c:	dc800215 	stw	r18,8(sp)
  80e1a0:	dfc00515 	stw	ra,20(sp)
  80e1a4:	dd000415 	stw	r20,16(sp)
  80e1a8:	dc400115 	stw	r17,4(sp)
  80e1ac:	dc000015 	stw	r16,0(sp)
  80e1b0:	1887c83a 	sub	r3,r3,r2
  80e1b4:	2825883a 	mov	r18,r5
  80e1b8:	3027883a 	mov	r19,r6
  80e1bc:	1800141e 	bne	r3,zero,80e210 <__mdiff+0x84>
  80e1c0:	1085883a 	add	r2,r2,r2
  80e1c4:	1085883a 	add	r2,r2,r2
  80e1c8:	2a000504 	addi	r8,r5,20
  80e1cc:	34000504 	addi	r16,r6,20
  80e1d0:	4087883a 	add	r3,r8,r2
  80e1d4:	8085883a 	add	r2,r16,r2
  80e1d8:	00000106 	br	80e1e0 <__mdiff+0x54>
  80e1dc:	40c0592e 	bgeu	r8,r3,80e344 <__mdiff+0x1b8>
  80e1e0:	18ffff04 	addi	r3,r3,-4
  80e1e4:	10bfff04 	addi	r2,r2,-4
  80e1e8:	19c00017 	ldw	r7,0(r3)
  80e1ec:	11400017 	ldw	r5,0(r2)
  80e1f0:	397ffa26 	beq	r7,r5,80e1dc <__alt_mem_onchip_mem+0xff8061dc>
  80e1f4:	3940592e 	bgeu	r7,r5,80e35c <__mdiff+0x1d0>
  80e1f8:	9005883a 	mov	r2,r18
  80e1fc:	4023883a 	mov	r17,r8
  80e200:	9825883a 	mov	r18,r19
  80e204:	05000044 	movi	r20,1
  80e208:	1027883a 	mov	r19,r2
  80e20c:	00000406 	br	80e220 <__mdiff+0x94>
  80e210:	18005616 	blt	r3,zero,80e36c <__mdiff+0x1e0>
  80e214:	34400504 	addi	r17,r6,20
  80e218:	2c000504 	addi	r16,r5,20
  80e21c:	0029883a 	mov	r20,zero
  80e220:	91400117 	ldw	r5,4(r18)
  80e224:	080d8640 	call	80d864 <_Balloc>
  80e228:	92400417 	ldw	r9,16(r18)
  80e22c:	9b000417 	ldw	r12,16(r19)
  80e230:	12c00504 	addi	r11,r2,20
  80e234:	4a51883a 	add	r8,r9,r9
  80e238:	6319883a 	add	r12,r12,r12
  80e23c:	4211883a 	add	r8,r8,r8
  80e240:	6319883a 	add	r12,r12,r12
  80e244:	15000315 	stw	r20,12(r2)
  80e248:	8211883a 	add	r8,r16,r8
  80e24c:	8b19883a 	add	r12,r17,r12
  80e250:	0007883a 	mov	r3,zero
  80e254:	81400017 	ldw	r5,0(r16)
  80e258:	89c00017 	ldw	r7,0(r17)
  80e25c:	59800104 	addi	r6,r11,4
  80e260:	293fffcc 	andi	r4,r5,65535
  80e264:	20c7883a 	add	r3,r4,r3
  80e268:	393fffcc 	andi	r4,r7,65535
  80e26c:	1909c83a 	sub	r4,r3,r4
  80e270:	280ad43a 	srli	r5,r5,16
  80e274:	380ed43a 	srli	r7,r7,16
  80e278:	2007d43a 	srai	r3,r4,16
  80e27c:	213fffcc 	andi	r4,r4,65535
  80e280:	29cbc83a 	sub	r5,r5,r7
  80e284:	28c7883a 	add	r3,r5,r3
  80e288:	180a943a 	slli	r5,r3,16
  80e28c:	8c400104 	addi	r17,r17,4
  80e290:	84000104 	addi	r16,r16,4
  80e294:	2908b03a 	or	r4,r5,r4
  80e298:	59000015 	stw	r4,0(r11)
  80e29c:	1807d43a 	srai	r3,r3,16
  80e2a0:	3015883a 	mov	r10,r6
  80e2a4:	3017883a 	mov	r11,r6
  80e2a8:	8b3fea36 	bltu	r17,r12,80e254 <__alt_mem_onchip_mem+0xff806254>
  80e2ac:	8200162e 	bgeu	r16,r8,80e308 <__mdiff+0x17c>
  80e2b0:	8017883a 	mov	r11,r16
  80e2b4:	59400017 	ldw	r5,0(r11)
  80e2b8:	31800104 	addi	r6,r6,4
  80e2bc:	5ac00104 	addi	r11,r11,4
  80e2c0:	293fffcc 	andi	r4,r5,65535
  80e2c4:	20c7883a 	add	r3,r4,r3
  80e2c8:	280ed43a 	srli	r7,r5,16
  80e2cc:	180bd43a 	srai	r5,r3,16
  80e2d0:	193fffcc 	andi	r4,r3,65535
  80e2d4:	3947883a 	add	r3,r7,r5
  80e2d8:	180a943a 	slli	r5,r3,16
  80e2dc:	1807d43a 	srai	r3,r3,16
  80e2e0:	2908b03a 	or	r4,r5,r4
  80e2e4:	313fff15 	stw	r4,-4(r6)
  80e2e8:	5a3ff236 	bltu	r11,r8,80e2b4 <__alt_mem_onchip_mem+0xff8062b4>
  80e2ec:	0406303a 	nor	r3,zero,r16
  80e2f0:	1a07883a 	add	r3,r3,r8
  80e2f4:	1806d0ba 	srli	r3,r3,2
  80e2f8:	18c00044 	addi	r3,r3,1
  80e2fc:	18c7883a 	add	r3,r3,r3
  80e300:	18c7883a 	add	r3,r3,r3
  80e304:	50d5883a 	add	r10,r10,r3
  80e308:	50ffff04 	addi	r3,r10,-4
  80e30c:	2000041e 	bne	r4,zero,80e320 <__mdiff+0x194>
  80e310:	18ffff04 	addi	r3,r3,-4
  80e314:	19000017 	ldw	r4,0(r3)
  80e318:	4a7fffc4 	addi	r9,r9,-1
  80e31c:	203ffc26 	beq	r4,zero,80e310 <__alt_mem_onchip_mem+0xff806310>
  80e320:	12400415 	stw	r9,16(r2)
  80e324:	dfc00517 	ldw	ra,20(sp)
  80e328:	dd000417 	ldw	r20,16(sp)
  80e32c:	dcc00317 	ldw	r19,12(sp)
  80e330:	dc800217 	ldw	r18,8(sp)
  80e334:	dc400117 	ldw	r17,4(sp)
  80e338:	dc000017 	ldw	r16,0(sp)
  80e33c:	dec00604 	addi	sp,sp,24
  80e340:	f800283a 	ret
  80e344:	000b883a 	mov	r5,zero
  80e348:	080d8640 	call	80d864 <_Balloc>
  80e34c:	00c00044 	movi	r3,1
  80e350:	10c00415 	stw	r3,16(r2)
  80e354:	10000515 	stw	zero,20(r2)
  80e358:	003ff206 	br	80e324 <__alt_mem_onchip_mem+0xff806324>
  80e35c:	8023883a 	mov	r17,r16
  80e360:	0029883a 	mov	r20,zero
  80e364:	4021883a 	mov	r16,r8
  80e368:	003fad06 	br	80e220 <__alt_mem_onchip_mem+0xff806220>
  80e36c:	9005883a 	mov	r2,r18
  80e370:	94400504 	addi	r17,r18,20
  80e374:	9c000504 	addi	r16,r19,20
  80e378:	9825883a 	mov	r18,r19
  80e37c:	05000044 	movi	r20,1
  80e380:	1027883a 	mov	r19,r2
  80e384:	003fa606 	br	80e220 <__alt_mem_onchip_mem+0xff806220>

0080e388 <__ulp>:
  80e388:	295ffc2c 	andhi	r5,r5,32752
  80e38c:	00bf3034 	movhi	r2,64704
  80e390:	2887883a 	add	r3,r5,r2
  80e394:	00c0020e 	bge	zero,r3,80e3a0 <__ulp+0x18>
  80e398:	0005883a 	mov	r2,zero
  80e39c:	f800283a 	ret
  80e3a0:	00c7c83a 	sub	r3,zero,r3
  80e3a4:	1807d53a 	srai	r3,r3,20
  80e3a8:	008004c4 	movi	r2,19
  80e3ac:	10c00b0e 	bge	r2,r3,80e3dc <__ulp+0x54>
  80e3b0:	18bffb04 	addi	r2,r3,-20
  80e3b4:	01000784 	movi	r4,30
  80e3b8:	0007883a 	mov	r3,zero
  80e3bc:	20800516 	blt	r4,r2,80e3d4 <__ulp+0x4c>
  80e3c0:	010007c4 	movi	r4,31
  80e3c4:	2089c83a 	sub	r4,r4,r2
  80e3c8:	00800044 	movi	r2,1
  80e3cc:	1104983a 	sll	r2,r2,r4
  80e3d0:	f800283a 	ret
  80e3d4:	00800044 	movi	r2,1
  80e3d8:	f800283a 	ret
  80e3dc:	01400234 	movhi	r5,8
  80e3e0:	28c7d83a 	sra	r3,r5,r3
  80e3e4:	0005883a 	mov	r2,zero
  80e3e8:	f800283a 	ret

0080e3ec <__b2d>:
  80e3ec:	defffa04 	addi	sp,sp,-24
  80e3f0:	dc000015 	stw	r16,0(sp)
  80e3f4:	24000417 	ldw	r16,16(r4)
  80e3f8:	dc400115 	stw	r17,4(sp)
  80e3fc:	24400504 	addi	r17,r4,20
  80e400:	8421883a 	add	r16,r16,r16
  80e404:	8421883a 	add	r16,r16,r16
  80e408:	8c21883a 	add	r16,r17,r16
  80e40c:	dc800215 	stw	r18,8(sp)
  80e410:	84bfff17 	ldw	r18,-4(r16)
  80e414:	dd000415 	stw	r20,16(sp)
  80e418:	dcc00315 	stw	r19,12(sp)
  80e41c:	9009883a 	mov	r4,r18
  80e420:	2829883a 	mov	r20,r5
  80e424:	dfc00515 	stw	ra,20(sp)
  80e428:	080db580 	call	80db58 <__hi0bits>
  80e42c:	00c00804 	movi	r3,32
  80e430:	1889c83a 	sub	r4,r3,r2
  80e434:	a1000015 	stw	r4,0(r20)
  80e438:	01000284 	movi	r4,10
  80e43c:	84ffff04 	addi	r19,r16,-4
  80e440:	20801216 	blt	r4,r2,80e48c <__b2d+0xa0>
  80e444:	018002c4 	movi	r6,11
  80e448:	308dc83a 	sub	r6,r6,r2
  80e44c:	9186d83a 	srl	r3,r18,r6
  80e450:	18cffc34 	orhi	r3,r3,16368
  80e454:	8cc0212e 	bgeu	r17,r19,80e4dc <__b2d+0xf0>
  80e458:	813ffe17 	ldw	r4,-8(r16)
  80e45c:	218cd83a 	srl	r6,r4,r6
  80e460:	10800544 	addi	r2,r2,21
  80e464:	9084983a 	sll	r2,r18,r2
  80e468:	1184b03a 	or	r2,r2,r6
  80e46c:	dfc00517 	ldw	ra,20(sp)
  80e470:	dd000417 	ldw	r20,16(sp)
  80e474:	dcc00317 	ldw	r19,12(sp)
  80e478:	dc800217 	ldw	r18,8(sp)
  80e47c:	dc400117 	ldw	r17,4(sp)
  80e480:	dc000017 	ldw	r16,0(sp)
  80e484:	dec00604 	addi	sp,sp,24
  80e488:	f800283a 	ret
  80e48c:	8cc00f2e 	bgeu	r17,r19,80e4cc <__b2d+0xe0>
  80e490:	117ffd44 	addi	r5,r2,-11
  80e494:	80bffe17 	ldw	r2,-8(r16)
  80e498:	28000e26 	beq	r5,zero,80e4d4 <__b2d+0xe8>
  80e49c:	1949c83a 	sub	r4,r3,r5
  80e4a0:	9164983a 	sll	r18,r18,r5
  80e4a4:	1106d83a 	srl	r3,r2,r4
  80e4a8:	81bffe04 	addi	r6,r16,-8
  80e4ac:	948ffc34 	orhi	r18,r18,16368
  80e4b0:	90c6b03a 	or	r3,r18,r3
  80e4b4:	89800e2e 	bgeu	r17,r6,80e4f0 <__b2d+0x104>
  80e4b8:	81bffd17 	ldw	r6,-12(r16)
  80e4bc:	1144983a 	sll	r2,r2,r5
  80e4c0:	310ad83a 	srl	r5,r6,r4
  80e4c4:	2884b03a 	or	r2,r5,r2
  80e4c8:	003fe806 	br	80e46c <__alt_mem_onchip_mem+0xff80646c>
  80e4cc:	10bffd44 	addi	r2,r2,-11
  80e4d0:	1000041e 	bne	r2,zero,80e4e4 <__b2d+0xf8>
  80e4d4:	90cffc34 	orhi	r3,r18,16368
  80e4d8:	003fe406 	br	80e46c <__alt_mem_onchip_mem+0xff80646c>
  80e4dc:	000d883a 	mov	r6,zero
  80e4e0:	003fdf06 	br	80e460 <__alt_mem_onchip_mem+0xff806460>
  80e4e4:	90a4983a 	sll	r18,r18,r2
  80e4e8:	0005883a 	mov	r2,zero
  80e4ec:	003ff906 	br	80e4d4 <__alt_mem_onchip_mem+0xff8064d4>
  80e4f0:	1144983a 	sll	r2,r2,r5
  80e4f4:	003fdd06 	br	80e46c <__alt_mem_onchip_mem+0xff80646c>

0080e4f8 <__d2b>:
  80e4f8:	defff804 	addi	sp,sp,-32
  80e4fc:	dc000215 	stw	r16,8(sp)
  80e500:	3021883a 	mov	r16,r6
  80e504:	dc400315 	stw	r17,12(sp)
  80e508:	8022907a 	slli	r17,r16,1
  80e50c:	dd000615 	stw	r20,24(sp)
  80e510:	2829883a 	mov	r20,r5
  80e514:	01400044 	movi	r5,1
  80e518:	dcc00515 	stw	r19,20(sp)
  80e51c:	dc800415 	stw	r18,16(sp)
  80e520:	dfc00715 	stw	ra,28(sp)
  80e524:	3825883a 	mov	r18,r7
  80e528:	8822d57a 	srli	r17,r17,21
  80e52c:	080d8640 	call	80d864 <_Balloc>
  80e530:	1027883a 	mov	r19,r2
  80e534:	00800434 	movhi	r2,16
  80e538:	10bfffc4 	addi	r2,r2,-1
  80e53c:	808c703a 	and	r6,r16,r2
  80e540:	88000126 	beq	r17,zero,80e548 <__d2b+0x50>
  80e544:	31800434 	orhi	r6,r6,16
  80e548:	d9800015 	stw	r6,0(sp)
  80e54c:	a0002426 	beq	r20,zero,80e5e0 <__d2b+0xe8>
  80e550:	d9000104 	addi	r4,sp,4
  80e554:	dd000115 	stw	r20,4(sp)
  80e558:	080dbc00 	call	80dbc0 <__lo0bits>
  80e55c:	d8c00017 	ldw	r3,0(sp)
  80e560:	10002f1e 	bne	r2,zero,80e620 <__d2b+0x128>
  80e564:	d9000117 	ldw	r4,4(sp)
  80e568:	99000515 	stw	r4,20(r19)
  80e56c:	1821003a 	cmpeq	r16,r3,zero
  80e570:	01000084 	movi	r4,2
  80e574:	2421c83a 	sub	r16,r4,r16
  80e578:	98c00615 	stw	r3,24(r19)
  80e57c:	9c000415 	stw	r16,16(r19)
  80e580:	88001f1e 	bne	r17,zero,80e600 <__d2b+0x108>
  80e584:	10bef384 	addi	r2,r2,-1074
  80e588:	90800015 	stw	r2,0(r18)
  80e58c:	00900034 	movhi	r2,16384
  80e590:	10bfffc4 	addi	r2,r2,-1
  80e594:	8085883a 	add	r2,r16,r2
  80e598:	1085883a 	add	r2,r2,r2
  80e59c:	1085883a 	add	r2,r2,r2
  80e5a0:	9885883a 	add	r2,r19,r2
  80e5a4:	11000517 	ldw	r4,20(r2)
  80e5a8:	8020917a 	slli	r16,r16,5
  80e5ac:	080db580 	call	80db58 <__hi0bits>
  80e5b0:	d8c00817 	ldw	r3,32(sp)
  80e5b4:	8085c83a 	sub	r2,r16,r2
  80e5b8:	18800015 	stw	r2,0(r3)
  80e5bc:	9805883a 	mov	r2,r19
  80e5c0:	dfc00717 	ldw	ra,28(sp)
  80e5c4:	dd000617 	ldw	r20,24(sp)
  80e5c8:	dcc00517 	ldw	r19,20(sp)
  80e5cc:	dc800417 	ldw	r18,16(sp)
  80e5d0:	dc400317 	ldw	r17,12(sp)
  80e5d4:	dc000217 	ldw	r16,8(sp)
  80e5d8:	dec00804 	addi	sp,sp,32
  80e5dc:	f800283a 	ret
  80e5e0:	d809883a 	mov	r4,sp
  80e5e4:	080dbc00 	call	80dbc0 <__lo0bits>
  80e5e8:	d8c00017 	ldw	r3,0(sp)
  80e5ec:	04000044 	movi	r16,1
  80e5f0:	9c000415 	stw	r16,16(r19)
  80e5f4:	98c00515 	stw	r3,20(r19)
  80e5f8:	10800804 	addi	r2,r2,32
  80e5fc:	883fe126 	beq	r17,zero,80e584 <__alt_mem_onchip_mem+0xff806584>
  80e600:	00c00d44 	movi	r3,53
  80e604:	8c7ef344 	addi	r17,r17,-1075
  80e608:	88a3883a 	add	r17,r17,r2
  80e60c:	1885c83a 	sub	r2,r3,r2
  80e610:	d8c00817 	ldw	r3,32(sp)
  80e614:	94400015 	stw	r17,0(r18)
  80e618:	18800015 	stw	r2,0(r3)
  80e61c:	003fe706 	br	80e5bc <__alt_mem_onchip_mem+0xff8065bc>
  80e620:	01000804 	movi	r4,32
  80e624:	2089c83a 	sub	r4,r4,r2
  80e628:	1908983a 	sll	r4,r3,r4
  80e62c:	d9400117 	ldw	r5,4(sp)
  80e630:	1886d83a 	srl	r3,r3,r2
  80e634:	2148b03a 	or	r4,r4,r5
  80e638:	99000515 	stw	r4,20(r19)
  80e63c:	d8c00015 	stw	r3,0(sp)
  80e640:	003fca06 	br	80e56c <__alt_mem_onchip_mem+0xff80656c>

0080e644 <__ratio>:
  80e644:	defff904 	addi	sp,sp,-28
  80e648:	dc400315 	stw	r17,12(sp)
  80e64c:	2823883a 	mov	r17,r5
  80e650:	d9400104 	addi	r5,sp,4
  80e654:	dfc00615 	stw	ra,24(sp)
  80e658:	dcc00515 	stw	r19,20(sp)
  80e65c:	dc800415 	stw	r18,16(sp)
  80e660:	2027883a 	mov	r19,r4
  80e664:	dc000215 	stw	r16,8(sp)
  80e668:	080e3ec0 	call	80e3ec <__b2d>
  80e66c:	d80b883a 	mov	r5,sp
  80e670:	8809883a 	mov	r4,r17
  80e674:	1025883a 	mov	r18,r2
  80e678:	1821883a 	mov	r16,r3
  80e67c:	080e3ec0 	call	80e3ec <__b2d>
  80e680:	8a000417 	ldw	r8,16(r17)
  80e684:	99000417 	ldw	r4,16(r19)
  80e688:	d9400117 	ldw	r5,4(sp)
  80e68c:	2209c83a 	sub	r4,r4,r8
  80e690:	2010917a 	slli	r8,r4,5
  80e694:	d9000017 	ldw	r4,0(sp)
  80e698:	2909c83a 	sub	r4,r5,r4
  80e69c:	4109883a 	add	r4,r8,r4
  80e6a0:	01000e0e 	bge	zero,r4,80e6dc <__ratio+0x98>
  80e6a4:	2008953a 	slli	r4,r4,20
  80e6a8:	2421883a 	add	r16,r4,r16
  80e6ac:	100d883a 	mov	r6,r2
  80e6b0:	180f883a 	mov	r7,r3
  80e6b4:	9009883a 	mov	r4,r18
  80e6b8:	800b883a 	mov	r5,r16
  80e6bc:	0811a980 	call	811a98 <__divdf3>
  80e6c0:	dfc00617 	ldw	ra,24(sp)
  80e6c4:	dcc00517 	ldw	r19,20(sp)
  80e6c8:	dc800417 	ldw	r18,16(sp)
  80e6cc:	dc400317 	ldw	r17,12(sp)
  80e6d0:	dc000217 	ldw	r16,8(sp)
  80e6d4:	dec00704 	addi	sp,sp,28
  80e6d8:	f800283a 	ret
  80e6dc:	2008953a 	slli	r4,r4,20
  80e6e0:	1907c83a 	sub	r3,r3,r4
  80e6e4:	003ff106 	br	80e6ac <__alt_mem_onchip_mem+0xff8066ac>

0080e6e8 <_mprec_log10>:
  80e6e8:	defffe04 	addi	sp,sp,-8
  80e6ec:	dc000015 	stw	r16,0(sp)
  80e6f0:	dfc00115 	stw	ra,4(sp)
  80e6f4:	008005c4 	movi	r2,23
  80e6f8:	2021883a 	mov	r16,r4
  80e6fc:	11000d0e 	bge	r2,r4,80e734 <_mprec_log10+0x4c>
  80e700:	0005883a 	mov	r2,zero
  80e704:	00cffc34 	movhi	r3,16368
  80e708:	843fffc4 	addi	r16,r16,-1
  80e70c:	000d883a 	mov	r6,zero
  80e710:	01d00934 	movhi	r7,16420
  80e714:	1009883a 	mov	r4,r2
  80e718:	180b883a 	mov	r5,r3
  80e71c:	08124080 	call	812408 <__muldf3>
  80e720:	803ff91e 	bne	r16,zero,80e708 <__alt_mem_onchip_mem+0xff806708>
  80e724:	dfc00117 	ldw	ra,4(sp)
  80e728:	dc000017 	ldw	r16,0(sp)
  80e72c:	dec00204 	addi	sp,sp,8
  80e730:	f800283a 	ret
  80e734:	202090fa 	slli	r16,r4,3
  80e738:	00802074 	movhi	r2,129
  80e73c:	109c7504 	addi	r2,r2,29140
  80e740:	1421883a 	add	r16,r2,r16
  80e744:	80800017 	ldw	r2,0(r16)
  80e748:	80c00117 	ldw	r3,4(r16)
  80e74c:	dfc00117 	ldw	ra,4(sp)
  80e750:	dc000017 	ldw	r16,0(sp)
  80e754:	dec00204 	addi	sp,sp,8
  80e758:	f800283a 	ret

0080e75c <__copybits>:
  80e75c:	297fffc4 	addi	r5,r5,-1
  80e760:	280fd17a 	srai	r7,r5,5
  80e764:	30c00417 	ldw	r3,16(r6)
  80e768:	30800504 	addi	r2,r6,20
  80e76c:	39c00044 	addi	r7,r7,1
  80e770:	18c7883a 	add	r3,r3,r3
  80e774:	39cf883a 	add	r7,r7,r7
  80e778:	18c7883a 	add	r3,r3,r3
  80e77c:	39cf883a 	add	r7,r7,r7
  80e780:	10c7883a 	add	r3,r2,r3
  80e784:	21cf883a 	add	r7,r4,r7
  80e788:	10c00d2e 	bgeu	r2,r3,80e7c0 <__copybits+0x64>
  80e78c:	200b883a 	mov	r5,r4
  80e790:	12000017 	ldw	r8,0(r2)
  80e794:	29400104 	addi	r5,r5,4
  80e798:	10800104 	addi	r2,r2,4
  80e79c:	2a3fff15 	stw	r8,-4(r5)
  80e7a0:	10fffb36 	bltu	r2,r3,80e790 <__alt_mem_onchip_mem+0xff806790>
  80e7a4:	1985c83a 	sub	r2,r3,r6
  80e7a8:	10bffac4 	addi	r2,r2,-21
  80e7ac:	1004d0ba 	srli	r2,r2,2
  80e7b0:	10800044 	addi	r2,r2,1
  80e7b4:	1085883a 	add	r2,r2,r2
  80e7b8:	1085883a 	add	r2,r2,r2
  80e7bc:	2089883a 	add	r4,r4,r2
  80e7c0:	21c0032e 	bgeu	r4,r7,80e7d0 <__copybits+0x74>
  80e7c4:	20000015 	stw	zero,0(r4)
  80e7c8:	21000104 	addi	r4,r4,4
  80e7cc:	21fffd36 	bltu	r4,r7,80e7c4 <__alt_mem_onchip_mem+0xff8067c4>
  80e7d0:	f800283a 	ret

0080e7d4 <__any_on>:
  80e7d4:	20c00417 	ldw	r3,16(r4)
  80e7d8:	2805d17a 	srai	r2,r5,5
  80e7dc:	21000504 	addi	r4,r4,20
  80e7e0:	18800d0e 	bge	r3,r2,80e818 <__any_on+0x44>
  80e7e4:	18c7883a 	add	r3,r3,r3
  80e7e8:	18c7883a 	add	r3,r3,r3
  80e7ec:	20c7883a 	add	r3,r4,r3
  80e7f0:	20c0192e 	bgeu	r4,r3,80e858 <__any_on+0x84>
  80e7f4:	18bfff17 	ldw	r2,-4(r3)
  80e7f8:	18ffff04 	addi	r3,r3,-4
  80e7fc:	1000041e 	bne	r2,zero,80e810 <__any_on+0x3c>
  80e800:	20c0142e 	bgeu	r4,r3,80e854 <__any_on+0x80>
  80e804:	18ffff04 	addi	r3,r3,-4
  80e808:	19400017 	ldw	r5,0(r3)
  80e80c:	283ffc26 	beq	r5,zero,80e800 <__alt_mem_onchip_mem+0xff806800>
  80e810:	00800044 	movi	r2,1
  80e814:	f800283a 	ret
  80e818:	10c00a0e 	bge	r2,r3,80e844 <__any_on+0x70>
  80e81c:	1085883a 	add	r2,r2,r2
  80e820:	1085883a 	add	r2,r2,r2
  80e824:	294007cc 	andi	r5,r5,31
  80e828:	2087883a 	add	r3,r4,r2
  80e82c:	283ff026 	beq	r5,zero,80e7f0 <__alt_mem_onchip_mem+0xff8067f0>
  80e830:	19800017 	ldw	r6,0(r3)
  80e834:	3144d83a 	srl	r2,r6,r5
  80e838:	114a983a 	sll	r5,r2,r5
  80e83c:	317ff41e 	bne	r6,r5,80e810 <__alt_mem_onchip_mem+0xff806810>
  80e840:	003feb06 	br	80e7f0 <__alt_mem_onchip_mem+0xff8067f0>
  80e844:	1085883a 	add	r2,r2,r2
  80e848:	1085883a 	add	r2,r2,r2
  80e84c:	2087883a 	add	r3,r4,r2
  80e850:	003fe706 	br	80e7f0 <__alt_mem_onchip_mem+0xff8067f0>
  80e854:	f800283a 	ret
  80e858:	0005883a 	mov	r2,zero
  80e85c:	f800283a 	ret

0080e860 <_putc_r>:
  80e860:	defffc04 	addi	sp,sp,-16
  80e864:	dc000215 	stw	r16,8(sp)
  80e868:	dfc00315 	stw	ra,12(sp)
  80e86c:	2021883a 	mov	r16,r4
  80e870:	20000226 	beq	r4,zero,80e87c <_putc_r+0x1c>
  80e874:	20800e17 	ldw	r2,56(r4)
  80e878:	10001b26 	beq	r2,zero,80e8e8 <_putc_r+0x88>
  80e87c:	30800217 	ldw	r2,8(r6)
  80e880:	10bfffc4 	addi	r2,r2,-1
  80e884:	30800215 	stw	r2,8(r6)
  80e888:	10000a16 	blt	r2,zero,80e8b4 <_putc_r+0x54>
  80e88c:	30800017 	ldw	r2,0(r6)
  80e890:	11400005 	stb	r5,0(r2)
  80e894:	30800017 	ldw	r2,0(r6)
  80e898:	10c00044 	addi	r3,r2,1
  80e89c:	30c00015 	stw	r3,0(r6)
  80e8a0:	10800003 	ldbu	r2,0(r2)
  80e8a4:	dfc00317 	ldw	ra,12(sp)
  80e8a8:	dc000217 	ldw	r16,8(sp)
  80e8ac:	dec00404 	addi	sp,sp,16
  80e8b0:	f800283a 	ret
  80e8b4:	30c00617 	ldw	r3,24(r6)
  80e8b8:	10c00616 	blt	r2,r3,80e8d4 <_putc_r+0x74>
  80e8bc:	30800017 	ldw	r2,0(r6)
  80e8c0:	00c00284 	movi	r3,10
  80e8c4:	11400005 	stb	r5,0(r2)
  80e8c8:	30800017 	ldw	r2,0(r6)
  80e8cc:	11400003 	ldbu	r5,0(r2)
  80e8d0:	28fff11e 	bne	r5,r3,80e898 <__alt_mem_onchip_mem+0xff806898>
  80e8d4:	8009883a 	mov	r4,r16
  80e8d8:	dfc00317 	ldw	ra,12(sp)
  80e8dc:	dc000217 	ldw	r16,8(sp)
  80e8e0:	dec00404 	addi	sp,sp,16
  80e8e4:	08107241 	jmpi	810724 <__swbuf_r>
  80e8e8:	d9400015 	stw	r5,0(sp)
  80e8ec:	d9800115 	stw	r6,4(sp)
  80e8f0:	080c7d80 	call	80c7d8 <__sinit>
  80e8f4:	d9800117 	ldw	r6,4(sp)
  80e8f8:	d9400017 	ldw	r5,0(sp)
  80e8fc:	003fdf06 	br	80e87c <__alt_mem_onchip_mem+0xff80687c>

0080e900 <putc>:
  80e900:	008020b4 	movhi	r2,130
  80e904:	defffc04 	addi	sp,sp,-16
  80e908:	10a48504 	addi	r2,r2,-28140
  80e90c:	dc000115 	stw	r16,4(sp)
  80e910:	14000017 	ldw	r16,0(r2)
  80e914:	dc400215 	stw	r17,8(sp)
  80e918:	dfc00315 	stw	ra,12(sp)
  80e91c:	2023883a 	mov	r17,r4
  80e920:	80000226 	beq	r16,zero,80e92c <putc+0x2c>
  80e924:	80800e17 	ldw	r2,56(r16)
  80e928:	10001a26 	beq	r2,zero,80e994 <putc+0x94>
  80e92c:	28800217 	ldw	r2,8(r5)
  80e930:	10bfffc4 	addi	r2,r2,-1
  80e934:	28800215 	stw	r2,8(r5)
  80e938:	10000b16 	blt	r2,zero,80e968 <putc+0x68>
  80e93c:	28800017 	ldw	r2,0(r5)
  80e940:	14400005 	stb	r17,0(r2)
  80e944:	28800017 	ldw	r2,0(r5)
  80e948:	10c00044 	addi	r3,r2,1
  80e94c:	28c00015 	stw	r3,0(r5)
  80e950:	10800003 	ldbu	r2,0(r2)
  80e954:	dfc00317 	ldw	ra,12(sp)
  80e958:	dc400217 	ldw	r17,8(sp)
  80e95c:	dc000117 	ldw	r16,4(sp)
  80e960:	dec00404 	addi	sp,sp,16
  80e964:	f800283a 	ret
  80e968:	28c00617 	ldw	r3,24(r5)
  80e96c:	10c00e16 	blt	r2,r3,80e9a8 <putc+0xa8>
  80e970:	28800017 	ldw	r2,0(r5)
  80e974:	01000284 	movi	r4,10
  80e978:	14400005 	stb	r17,0(r2)
  80e97c:	28800017 	ldw	r2,0(r5)
  80e980:	10c00003 	ldbu	r3,0(r2)
  80e984:	193ff01e 	bne	r3,r4,80e948 <__alt_mem_onchip_mem+0xff806948>
  80e988:	280d883a 	mov	r6,r5
  80e98c:	180b883a 	mov	r5,r3
  80e990:	00000706 	br	80e9b0 <putc+0xb0>
  80e994:	8009883a 	mov	r4,r16
  80e998:	d9400015 	stw	r5,0(sp)
  80e99c:	080c7d80 	call	80c7d8 <__sinit>
  80e9a0:	d9400017 	ldw	r5,0(sp)
  80e9a4:	003fe106 	br	80e92c <__alt_mem_onchip_mem+0xff80692c>
  80e9a8:	280d883a 	mov	r6,r5
  80e9ac:	880b883a 	mov	r5,r17
  80e9b0:	8009883a 	mov	r4,r16
  80e9b4:	dfc00317 	ldw	ra,12(sp)
  80e9b8:	dc400217 	ldw	r17,8(sp)
  80e9bc:	dc000117 	ldw	r16,4(sp)
  80e9c0:	dec00404 	addi	sp,sp,16
  80e9c4:	08107241 	jmpi	810724 <__swbuf_r>

0080e9c8 <_read_r>:
  80e9c8:	defffd04 	addi	sp,sp,-12
  80e9cc:	2805883a 	mov	r2,r5
  80e9d0:	dc000015 	stw	r16,0(sp)
  80e9d4:	040020b4 	movhi	r16,130
  80e9d8:	dc400115 	stw	r17,4(sp)
  80e9dc:	300b883a 	mov	r5,r6
  80e9e0:	842bd504 	addi	r16,r16,-20652
  80e9e4:	2023883a 	mov	r17,r4
  80e9e8:	380d883a 	mov	r6,r7
  80e9ec:	1009883a 	mov	r4,r2
  80e9f0:	dfc00215 	stw	ra,8(sp)
  80e9f4:	80000015 	stw	zero,0(r16)
  80e9f8:	08136a00 	call	8136a0 <read>
  80e9fc:	00ffffc4 	movi	r3,-1
  80ea00:	10c00526 	beq	r2,r3,80ea18 <_read_r+0x50>
  80ea04:	dfc00217 	ldw	ra,8(sp)
  80ea08:	dc400117 	ldw	r17,4(sp)
  80ea0c:	dc000017 	ldw	r16,0(sp)
  80ea10:	dec00304 	addi	sp,sp,12
  80ea14:	f800283a 	ret
  80ea18:	80c00017 	ldw	r3,0(r16)
  80ea1c:	183ff926 	beq	r3,zero,80ea04 <__alt_mem_onchip_mem+0xff806a04>
  80ea20:	88c00015 	stw	r3,0(r17)
  80ea24:	003ff706 	br	80ea04 <__alt_mem_onchip_mem+0xff806a04>

0080ea28 <_realloc_r>:
  80ea28:	defff604 	addi	sp,sp,-40
  80ea2c:	dc800215 	stw	r18,8(sp)
  80ea30:	dfc00915 	stw	ra,36(sp)
  80ea34:	df000815 	stw	fp,32(sp)
  80ea38:	ddc00715 	stw	r23,28(sp)
  80ea3c:	dd800615 	stw	r22,24(sp)
  80ea40:	dd400515 	stw	r21,20(sp)
  80ea44:	dd000415 	stw	r20,16(sp)
  80ea48:	dcc00315 	stw	r19,12(sp)
  80ea4c:	dc400115 	stw	r17,4(sp)
  80ea50:	dc000015 	stw	r16,0(sp)
  80ea54:	3025883a 	mov	r18,r6
  80ea58:	2800b726 	beq	r5,zero,80ed38 <_realloc_r+0x310>
  80ea5c:	282b883a 	mov	r21,r5
  80ea60:	2029883a 	mov	r20,r4
  80ea64:	08133c80 	call	8133c8 <__malloc_lock>
  80ea68:	a8bfff17 	ldw	r2,-4(r21)
  80ea6c:	043fff04 	movi	r16,-4
  80ea70:	90c002c4 	addi	r3,r18,11
  80ea74:	01000584 	movi	r4,22
  80ea78:	acfffe04 	addi	r19,r21,-8
  80ea7c:	1420703a 	and	r16,r2,r16
  80ea80:	20c0332e 	bgeu	r4,r3,80eb50 <_realloc_r+0x128>
  80ea84:	047ffe04 	movi	r17,-8
  80ea88:	1c62703a 	and	r17,r3,r17
  80ea8c:	8807883a 	mov	r3,r17
  80ea90:	88005816 	blt	r17,zero,80ebf4 <_realloc_r+0x1cc>
  80ea94:	8c805736 	bltu	r17,r18,80ebf4 <_realloc_r+0x1cc>
  80ea98:	80c0300e 	bge	r16,r3,80eb5c <_realloc_r+0x134>
  80ea9c:	07002074 	movhi	fp,129
  80eaa0:	e71e6904 	addi	fp,fp,31140
  80eaa4:	e1c00217 	ldw	r7,8(fp)
  80eaa8:	9c09883a 	add	r4,r19,r16
  80eaac:	22000117 	ldw	r8,4(r4)
  80eab0:	21c06326 	beq	r4,r7,80ec40 <_realloc_r+0x218>
  80eab4:	017fff84 	movi	r5,-2
  80eab8:	414a703a 	and	r5,r8,r5
  80eabc:	214b883a 	add	r5,r4,r5
  80eac0:	29800117 	ldw	r6,4(r5)
  80eac4:	3180004c 	andi	r6,r6,1
  80eac8:	30003f26 	beq	r6,zero,80ebc8 <_realloc_r+0x1a0>
  80eacc:	1080004c 	andi	r2,r2,1
  80ead0:	10008326 	beq	r2,zero,80ece0 <_realloc_r+0x2b8>
  80ead4:	900b883a 	mov	r5,r18
  80ead8:	a009883a 	mov	r4,r20
  80eadc:	08075e00 	call	8075e0 <_malloc_r>
  80eae0:	1025883a 	mov	r18,r2
  80eae4:	10011e26 	beq	r2,zero,80ef60 <_realloc_r+0x538>
  80eae8:	a93fff17 	ldw	r4,-4(r21)
  80eaec:	10fffe04 	addi	r3,r2,-8
  80eaf0:	00bfff84 	movi	r2,-2
  80eaf4:	2084703a 	and	r2,r4,r2
  80eaf8:	9885883a 	add	r2,r19,r2
  80eafc:	1880ee26 	beq	r3,r2,80eeb8 <_realloc_r+0x490>
  80eb00:	81bfff04 	addi	r6,r16,-4
  80eb04:	00800904 	movi	r2,36
  80eb08:	1180b836 	bltu	r2,r6,80edec <_realloc_r+0x3c4>
  80eb0c:	00c004c4 	movi	r3,19
  80eb10:	19809636 	bltu	r3,r6,80ed6c <_realloc_r+0x344>
  80eb14:	9005883a 	mov	r2,r18
  80eb18:	a807883a 	mov	r3,r21
  80eb1c:	19000017 	ldw	r4,0(r3)
  80eb20:	11000015 	stw	r4,0(r2)
  80eb24:	19000117 	ldw	r4,4(r3)
  80eb28:	11000115 	stw	r4,4(r2)
  80eb2c:	18c00217 	ldw	r3,8(r3)
  80eb30:	10c00215 	stw	r3,8(r2)
  80eb34:	a80b883a 	mov	r5,r21
  80eb38:	a009883a 	mov	r4,r20
  80eb3c:	080c9f80 	call	80c9f8 <_free_r>
  80eb40:	a009883a 	mov	r4,r20
  80eb44:	08133ec0 	call	8133ec <__malloc_unlock>
  80eb48:	9005883a 	mov	r2,r18
  80eb4c:	00001206 	br	80eb98 <_realloc_r+0x170>
  80eb50:	00c00404 	movi	r3,16
  80eb54:	1823883a 	mov	r17,r3
  80eb58:	003fce06 	br	80ea94 <__alt_mem_onchip_mem+0xff806a94>
  80eb5c:	a825883a 	mov	r18,r21
  80eb60:	8445c83a 	sub	r2,r16,r17
  80eb64:	00c003c4 	movi	r3,15
  80eb68:	18802636 	bltu	r3,r2,80ec04 <_realloc_r+0x1dc>
  80eb6c:	99800117 	ldw	r6,4(r19)
  80eb70:	9c07883a 	add	r3,r19,r16
  80eb74:	3180004c 	andi	r6,r6,1
  80eb78:	3420b03a 	or	r16,r6,r16
  80eb7c:	9c000115 	stw	r16,4(r19)
  80eb80:	18800117 	ldw	r2,4(r3)
  80eb84:	10800054 	ori	r2,r2,1
  80eb88:	18800115 	stw	r2,4(r3)
  80eb8c:	a009883a 	mov	r4,r20
  80eb90:	08133ec0 	call	8133ec <__malloc_unlock>
  80eb94:	9005883a 	mov	r2,r18
  80eb98:	dfc00917 	ldw	ra,36(sp)
  80eb9c:	df000817 	ldw	fp,32(sp)
  80eba0:	ddc00717 	ldw	r23,28(sp)
  80eba4:	dd800617 	ldw	r22,24(sp)
  80eba8:	dd400517 	ldw	r21,20(sp)
  80ebac:	dd000417 	ldw	r20,16(sp)
  80ebb0:	dcc00317 	ldw	r19,12(sp)
  80ebb4:	dc800217 	ldw	r18,8(sp)
  80ebb8:	dc400117 	ldw	r17,4(sp)
  80ebbc:	dc000017 	ldw	r16,0(sp)
  80ebc0:	dec00a04 	addi	sp,sp,40
  80ebc4:	f800283a 	ret
  80ebc8:	017fff04 	movi	r5,-4
  80ebcc:	414a703a 	and	r5,r8,r5
  80ebd0:	814d883a 	add	r6,r16,r5
  80ebd4:	30c01f16 	blt	r6,r3,80ec54 <_realloc_r+0x22c>
  80ebd8:	20800317 	ldw	r2,12(r4)
  80ebdc:	20c00217 	ldw	r3,8(r4)
  80ebe0:	a825883a 	mov	r18,r21
  80ebe4:	3021883a 	mov	r16,r6
  80ebe8:	18800315 	stw	r2,12(r3)
  80ebec:	10c00215 	stw	r3,8(r2)
  80ebf0:	003fdb06 	br	80eb60 <__alt_mem_onchip_mem+0xff806b60>
  80ebf4:	00800304 	movi	r2,12
  80ebf8:	a0800015 	stw	r2,0(r20)
  80ebfc:	0005883a 	mov	r2,zero
  80ec00:	003fe506 	br	80eb98 <__alt_mem_onchip_mem+0xff806b98>
  80ec04:	98c00117 	ldw	r3,4(r19)
  80ec08:	9c4b883a 	add	r5,r19,r17
  80ec0c:	11000054 	ori	r4,r2,1
  80ec10:	18c0004c 	andi	r3,r3,1
  80ec14:	1c62b03a 	or	r17,r3,r17
  80ec18:	9c400115 	stw	r17,4(r19)
  80ec1c:	29000115 	stw	r4,4(r5)
  80ec20:	2885883a 	add	r2,r5,r2
  80ec24:	10c00117 	ldw	r3,4(r2)
  80ec28:	29400204 	addi	r5,r5,8
  80ec2c:	a009883a 	mov	r4,r20
  80ec30:	18c00054 	ori	r3,r3,1
  80ec34:	10c00115 	stw	r3,4(r2)
  80ec38:	080c9f80 	call	80c9f8 <_free_r>
  80ec3c:	003fd306 	br	80eb8c <__alt_mem_onchip_mem+0xff806b8c>
  80ec40:	017fff04 	movi	r5,-4
  80ec44:	414a703a 	and	r5,r8,r5
  80ec48:	89800404 	addi	r6,r17,16
  80ec4c:	8151883a 	add	r8,r16,r5
  80ec50:	4180590e 	bge	r8,r6,80edb8 <_realloc_r+0x390>
  80ec54:	1080004c 	andi	r2,r2,1
  80ec58:	103f9e1e 	bne	r2,zero,80ead4 <__alt_mem_onchip_mem+0xff806ad4>
  80ec5c:	adbffe17 	ldw	r22,-8(r21)
  80ec60:	00bfff04 	movi	r2,-4
  80ec64:	9dadc83a 	sub	r22,r19,r22
  80ec68:	b1800117 	ldw	r6,4(r22)
  80ec6c:	3084703a 	and	r2,r6,r2
  80ec70:	20002026 	beq	r4,zero,80ecf4 <_realloc_r+0x2cc>
  80ec74:	80af883a 	add	r23,r16,r2
  80ec78:	b96f883a 	add	r23,r23,r5
  80ec7c:	21c05f26 	beq	r4,r7,80edfc <_realloc_r+0x3d4>
  80ec80:	b8c01c16 	blt	r23,r3,80ecf4 <_realloc_r+0x2cc>
  80ec84:	20800317 	ldw	r2,12(r4)
  80ec88:	20c00217 	ldw	r3,8(r4)
  80ec8c:	81bfff04 	addi	r6,r16,-4
  80ec90:	01000904 	movi	r4,36
  80ec94:	18800315 	stw	r2,12(r3)
  80ec98:	10c00215 	stw	r3,8(r2)
  80ec9c:	b0c00217 	ldw	r3,8(r22)
  80eca0:	b0800317 	ldw	r2,12(r22)
  80eca4:	b4800204 	addi	r18,r22,8
  80eca8:	18800315 	stw	r2,12(r3)
  80ecac:	10c00215 	stw	r3,8(r2)
  80ecb0:	21801b36 	bltu	r4,r6,80ed20 <_realloc_r+0x2f8>
  80ecb4:	008004c4 	movi	r2,19
  80ecb8:	1180352e 	bgeu	r2,r6,80ed90 <_realloc_r+0x368>
  80ecbc:	a8800017 	ldw	r2,0(r21)
  80ecc0:	b0800215 	stw	r2,8(r22)
  80ecc4:	a8800117 	ldw	r2,4(r21)
  80ecc8:	b0800315 	stw	r2,12(r22)
  80eccc:	008006c4 	movi	r2,27
  80ecd0:	11807f36 	bltu	r2,r6,80eed0 <_realloc_r+0x4a8>
  80ecd4:	b0800404 	addi	r2,r22,16
  80ecd8:	ad400204 	addi	r21,r21,8
  80ecdc:	00002d06 	br	80ed94 <_realloc_r+0x36c>
  80ece0:	adbffe17 	ldw	r22,-8(r21)
  80ece4:	00bfff04 	movi	r2,-4
  80ece8:	9dadc83a 	sub	r22,r19,r22
  80ecec:	b1000117 	ldw	r4,4(r22)
  80ecf0:	2084703a 	and	r2,r4,r2
  80ecf4:	b03f7726 	beq	r22,zero,80ead4 <__alt_mem_onchip_mem+0xff806ad4>
  80ecf8:	80af883a 	add	r23,r16,r2
  80ecfc:	b8ff7516 	blt	r23,r3,80ead4 <__alt_mem_onchip_mem+0xff806ad4>
  80ed00:	b0800317 	ldw	r2,12(r22)
  80ed04:	b0c00217 	ldw	r3,8(r22)
  80ed08:	81bfff04 	addi	r6,r16,-4
  80ed0c:	01000904 	movi	r4,36
  80ed10:	18800315 	stw	r2,12(r3)
  80ed14:	10c00215 	stw	r3,8(r2)
  80ed18:	b4800204 	addi	r18,r22,8
  80ed1c:	21bfe52e 	bgeu	r4,r6,80ecb4 <__alt_mem_onchip_mem+0xff806cb4>
  80ed20:	a80b883a 	mov	r5,r21
  80ed24:	9009883a 	mov	r4,r18
  80ed28:	080d7080 	call	80d708 <memmove>
  80ed2c:	b821883a 	mov	r16,r23
  80ed30:	b027883a 	mov	r19,r22
  80ed34:	003f8a06 	br	80eb60 <__alt_mem_onchip_mem+0xff806b60>
  80ed38:	300b883a 	mov	r5,r6
  80ed3c:	dfc00917 	ldw	ra,36(sp)
  80ed40:	df000817 	ldw	fp,32(sp)
  80ed44:	ddc00717 	ldw	r23,28(sp)
  80ed48:	dd800617 	ldw	r22,24(sp)
  80ed4c:	dd400517 	ldw	r21,20(sp)
  80ed50:	dd000417 	ldw	r20,16(sp)
  80ed54:	dcc00317 	ldw	r19,12(sp)
  80ed58:	dc800217 	ldw	r18,8(sp)
  80ed5c:	dc400117 	ldw	r17,4(sp)
  80ed60:	dc000017 	ldw	r16,0(sp)
  80ed64:	dec00a04 	addi	sp,sp,40
  80ed68:	08075e01 	jmpi	8075e0 <_malloc_r>
  80ed6c:	a8c00017 	ldw	r3,0(r21)
  80ed70:	90c00015 	stw	r3,0(r18)
  80ed74:	a8c00117 	ldw	r3,4(r21)
  80ed78:	90c00115 	stw	r3,4(r18)
  80ed7c:	00c006c4 	movi	r3,27
  80ed80:	19804536 	bltu	r3,r6,80ee98 <_realloc_r+0x470>
  80ed84:	90800204 	addi	r2,r18,8
  80ed88:	a8c00204 	addi	r3,r21,8
  80ed8c:	003f6306 	br	80eb1c <__alt_mem_onchip_mem+0xff806b1c>
  80ed90:	9005883a 	mov	r2,r18
  80ed94:	a8c00017 	ldw	r3,0(r21)
  80ed98:	b821883a 	mov	r16,r23
  80ed9c:	b027883a 	mov	r19,r22
  80eda0:	10c00015 	stw	r3,0(r2)
  80eda4:	a8c00117 	ldw	r3,4(r21)
  80eda8:	10c00115 	stw	r3,4(r2)
  80edac:	a8c00217 	ldw	r3,8(r21)
  80edb0:	10c00215 	stw	r3,8(r2)
  80edb4:	003f6a06 	br	80eb60 <__alt_mem_onchip_mem+0xff806b60>
  80edb8:	9c67883a 	add	r19,r19,r17
  80edbc:	4445c83a 	sub	r2,r8,r17
  80edc0:	e4c00215 	stw	r19,8(fp)
  80edc4:	10800054 	ori	r2,r2,1
  80edc8:	98800115 	stw	r2,4(r19)
  80edcc:	a8bfff17 	ldw	r2,-4(r21)
  80edd0:	a009883a 	mov	r4,r20
  80edd4:	1080004c 	andi	r2,r2,1
  80edd8:	1462b03a 	or	r17,r2,r17
  80eddc:	ac7fff15 	stw	r17,-4(r21)
  80ede0:	08133ec0 	call	8133ec <__malloc_unlock>
  80ede4:	a805883a 	mov	r2,r21
  80ede8:	003f6b06 	br	80eb98 <__alt_mem_onchip_mem+0xff806b98>
  80edec:	a80b883a 	mov	r5,r21
  80edf0:	9009883a 	mov	r4,r18
  80edf4:	080d7080 	call	80d708 <memmove>
  80edf8:	003f4e06 	br	80eb34 <__alt_mem_onchip_mem+0xff806b34>
  80edfc:	89000404 	addi	r4,r17,16
  80ee00:	b93fbc16 	blt	r23,r4,80ecf4 <__alt_mem_onchip_mem+0xff806cf4>
  80ee04:	b0800317 	ldw	r2,12(r22)
  80ee08:	b0c00217 	ldw	r3,8(r22)
  80ee0c:	81bfff04 	addi	r6,r16,-4
  80ee10:	01000904 	movi	r4,36
  80ee14:	18800315 	stw	r2,12(r3)
  80ee18:	10c00215 	stw	r3,8(r2)
  80ee1c:	b4800204 	addi	r18,r22,8
  80ee20:	21804336 	bltu	r4,r6,80ef30 <_realloc_r+0x508>
  80ee24:	008004c4 	movi	r2,19
  80ee28:	11803f2e 	bgeu	r2,r6,80ef28 <_realloc_r+0x500>
  80ee2c:	a8800017 	ldw	r2,0(r21)
  80ee30:	b0800215 	stw	r2,8(r22)
  80ee34:	a8800117 	ldw	r2,4(r21)
  80ee38:	b0800315 	stw	r2,12(r22)
  80ee3c:	008006c4 	movi	r2,27
  80ee40:	11803f36 	bltu	r2,r6,80ef40 <_realloc_r+0x518>
  80ee44:	b0800404 	addi	r2,r22,16
  80ee48:	ad400204 	addi	r21,r21,8
  80ee4c:	a8c00017 	ldw	r3,0(r21)
  80ee50:	10c00015 	stw	r3,0(r2)
  80ee54:	a8c00117 	ldw	r3,4(r21)
  80ee58:	10c00115 	stw	r3,4(r2)
  80ee5c:	a8c00217 	ldw	r3,8(r21)
  80ee60:	10c00215 	stw	r3,8(r2)
  80ee64:	b447883a 	add	r3,r22,r17
  80ee68:	bc45c83a 	sub	r2,r23,r17
  80ee6c:	e0c00215 	stw	r3,8(fp)
  80ee70:	10800054 	ori	r2,r2,1
  80ee74:	18800115 	stw	r2,4(r3)
  80ee78:	b0800117 	ldw	r2,4(r22)
  80ee7c:	a009883a 	mov	r4,r20
  80ee80:	1080004c 	andi	r2,r2,1
  80ee84:	1462b03a 	or	r17,r2,r17
  80ee88:	b4400115 	stw	r17,4(r22)
  80ee8c:	08133ec0 	call	8133ec <__malloc_unlock>
  80ee90:	9005883a 	mov	r2,r18
  80ee94:	003f4006 	br	80eb98 <__alt_mem_onchip_mem+0xff806b98>
  80ee98:	a8c00217 	ldw	r3,8(r21)
  80ee9c:	90c00215 	stw	r3,8(r18)
  80eea0:	a8c00317 	ldw	r3,12(r21)
  80eea4:	90c00315 	stw	r3,12(r18)
  80eea8:	30801126 	beq	r6,r2,80eef0 <_realloc_r+0x4c8>
  80eeac:	90800404 	addi	r2,r18,16
  80eeb0:	a8c00404 	addi	r3,r21,16
  80eeb4:	003f1906 	br	80eb1c <__alt_mem_onchip_mem+0xff806b1c>
  80eeb8:	90ffff17 	ldw	r3,-4(r18)
  80eebc:	00bfff04 	movi	r2,-4
  80eec0:	a825883a 	mov	r18,r21
  80eec4:	1884703a 	and	r2,r3,r2
  80eec8:	80a1883a 	add	r16,r16,r2
  80eecc:	003f2406 	br	80eb60 <__alt_mem_onchip_mem+0xff806b60>
  80eed0:	a8800217 	ldw	r2,8(r21)
  80eed4:	b0800415 	stw	r2,16(r22)
  80eed8:	a8800317 	ldw	r2,12(r21)
  80eedc:	b0800515 	stw	r2,20(r22)
  80eee0:	31000a26 	beq	r6,r4,80ef0c <_realloc_r+0x4e4>
  80eee4:	b0800604 	addi	r2,r22,24
  80eee8:	ad400404 	addi	r21,r21,16
  80eeec:	003fa906 	br	80ed94 <__alt_mem_onchip_mem+0xff806d94>
  80eef0:	a9000417 	ldw	r4,16(r21)
  80eef4:	90800604 	addi	r2,r18,24
  80eef8:	a8c00604 	addi	r3,r21,24
  80eefc:	91000415 	stw	r4,16(r18)
  80ef00:	a9000517 	ldw	r4,20(r21)
  80ef04:	91000515 	stw	r4,20(r18)
  80ef08:	003f0406 	br	80eb1c <__alt_mem_onchip_mem+0xff806b1c>
  80ef0c:	a8c00417 	ldw	r3,16(r21)
  80ef10:	ad400604 	addi	r21,r21,24
  80ef14:	b0800804 	addi	r2,r22,32
  80ef18:	b0c00615 	stw	r3,24(r22)
  80ef1c:	a8ffff17 	ldw	r3,-4(r21)
  80ef20:	b0c00715 	stw	r3,28(r22)
  80ef24:	003f9b06 	br	80ed94 <__alt_mem_onchip_mem+0xff806d94>
  80ef28:	9005883a 	mov	r2,r18
  80ef2c:	003fc706 	br	80ee4c <__alt_mem_onchip_mem+0xff806e4c>
  80ef30:	a80b883a 	mov	r5,r21
  80ef34:	9009883a 	mov	r4,r18
  80ef38:	080d7080 	call	80d708 <memmove>
  80ef3c:	003fc906 	br	80ee64 <__alt_mem_onchip_mem+0xff806e64>
  80ef40:	a8800217 	ldw	r2,8(r21)
  80ef44:	b0800415 	stw	r2,16(r22)
  80ef48:	a8800317 	ldw	r2,12(r21)
  80ef4c:	b0800515 	stw	r2,20(r22)
  80ef50:	31000726 	beq	r6,r4,80ef70 <_realloc_r+0x548>
  80ef54:	b0800604 	addi	r2,r22,24
  80ef58:	ad400404 	addi	r21,r21,16
  80ef5c:	003fbb06 	br	80ee4c <__alt_mem_onchip_mem+0xff806e4c>
  80ef60:	a009883a 	mov	r4,r20
  80ef64:	08133ec0 	call	8133ec <__malloc_unlock>
  80ef68:	0005883a 	mov	r2,zero
  80ef6c:	003f0a06 	br	80eb98 <__alt_mem_onchip_mem+0xff806b98>
  80ef70:	a8c00417 	ldw	r3,16(r21)
  80ef74:	ad400604 	addi	r21,r21,24
  80ef78:	b0800804 	addi	r2,r22,32
  80ef7c:	b0c00615 	stw	r3,24(r22)
  80ef80:	a8ffff17 	ldw	r3,-4(r21)
  80ef84:	b0c00715 	stw	r3,28(r22)
  80ef88:	003fb006 	br	80ee4c <__alt_mem_onchip_mem+0xff806e4c>

0080ef8c <__fpclassifyd>:
  80ef8c:	00a00034 	movhi	r2,32768
  80ef90:	10bfffc4 	addi	r2,r2,-1
  80ef94:	2884703a 	and	r2,r5,r2
  80ef98:	10000726 	beq	r2,zero,80efb8 <__fpclassifyd+0x2c>
  80ef9c:	00fffc34 	movhi	r3,65520
  80efa0:	019ff834 	movhi	r6,32736
  80efa4:	28c7883a 	add	r3,r5,r3
  80efa8:	31bfffc4 	addi	r6,r6,-1
  80efac:	30c00536 	bltu	r6,r3,80efc4 <__fpclassifyd+0x38>
  80efb0:	00800104 	movi	r2,4
  80efb4:	f800283a 	ret
  80efb8:	2000021e 	bne	r4,zero,80efc4 <__fpclassifyd+0x38>
  80efbc:	00800084 	movi	r2,2
  80efc0:	f800283a 	ret
  80efc4:	00dffc34 	movhi	r3,32752
  80efc8:	019ff834 	movhi	r6,32736
  80efcc:	28cb883a 	add	r5,r5,r3
  80efd0:	31bfffc4 	addi	r6,r6,-1
  80efd4:	317ff62e 	bgeu	r6,r5,80efb0 <__alt_mem_onchip_mem+0xff806fb0>
  80efd8:	01400434 	movhi	r5,16
  80efdc:	297fffc4 	addi	r5,r5,-1
  80efe0:	28800236 	bltu	r5,r2,80efec <__fpclassifyd+0x60>
  80efe4:	008000c4 	movi	r2,3
  80efe8:	f800283a 	ret
  80efec:	10c00226 	beq	r2,r3,80eff8 <__fpclassifyd+0x6c>
  80eff0:	0005883a 	mov	r2,zero
  80eff4:	f800283a 	ret
  80eff8:	2005003a 	cmpeq	r2,r4,zero
  80effc:	f800283a 	ret

0080f000 <strcmp>:
  80f000:	2144b03a 	or	r2,r4,r5
  80f004:	108000cc 	andi	r2,r2,3
  80f008:	1000171e 	bne	r2,zero,80f068 <strcmp+0x68>
  80f00c:	20800017 	ldw	r2,0(r4)
  80f010:	28c00017 	ldw	r3,0(r5)
  80f014:	10c0141e 	bne	r2,r3,80f068 <strcmp+0x68>
  80f018:	027fbff4 	movhi	r9,65279
  80f01c:	4a7fbfc4 	addi	r9,r9,-257
  80f020:	0086303a 	nor	r3,zero,r2
  80f024:	02202074 	movhi	r8,32897
  80f028:	1245883a 	add	r2,r2,r9
  80f02c:	42202004 	addi	r8,r8,-32640
  80f030:	10c4703a 	and	r2,r2,r3
  80f034:	1204703a 	and	r2,r2,r8
  80f038:	10000226 	beq	r2,zero,80f044 <strcmp+0x44>
  80f03c:	00002306 	br	80f0cc <strcmp+0xcc>
  80f040:	1000221e 	bne	r2,zero,80f0cc <strcmp+0xcc>
  80f044:	21000104 	addi	r4,r4,4
  80f048:	20c00017 	ldw	r3,0(r4)
  80f04c:	29400104 	addi	r5,r5,4
  80f050:	29800017 	ldw	r6,0(r5)
  80f054:	1a4f883a 	add	r7,r3,r9
  80f058:	00c4303a 	nor	r2,zero,r3
  80f05c:	3884703a 	and	r2,r7,r2
  80f060:	1204703a 	and	r2,r2,r8
  80f064:	19bff626 	beq	r3,r6,80f040 <__alt_mem_onchip_mem+0xff807040>
  80f068:	20800003 	ldbu	r2,0(r4)
  80f06c:	10c03fcc 	andi	r3,r2,255
  80f070:	18c0201c 	xori	r3,r3,128
  80f074:	18ffe004 	addi	r3,r3,-128
  80f078:	18000c26 	beq	r3,zero,80f0ac <strcmp+0xac>
  80f07c:	29800007 	ldb	r6,0(r5)
  80f080:	19800326 	beq	r3,r6,80f090 <strcmp+0x90>
  80f084:	00001306 	br	80f0d4 <strcmp+0xd4>
  80f088:	29800007 	ldb	r6,0(r5)
  80f08c:	11800b1e 	bne	r2,r6,80f0bc <strcmp+0xbc>
  80f090:	21000044 	addi	r4,r4,1
  80f094:	20c00003 	ldbu	r3,0(r4)
  80f098:	29400044 	addi	r5,r5,1
  80f09c:	18803fcc 	andi	r2,r3,255
  80f0a0:	1080201c 	xori	r2,r2,128
  80f0a4:	10bfe004 	addi	r2,r2,-128
  80f0a8:	103ff71e 	bne	r2,zero,80f088 <__alt_mem_onchip_mem+0xff807088>
  80f0ac:	0007883a 	mov	r3,zero
  80f0b0:	28800003 	ldbu	r2,0(r5)
  80f0b4:	1885c83a 	sub	r2,r3,r2
  80f0b8:	f800283a 	ret
  80f0bc:	28800003 	ldbu	r2,0(r5)
  80f0c0:	18c03fcc 	andi	r3,r3,255
  80f0c4:	1885c83a 	sub	r2,r3,r2
  80f0c8:	f800283a 	ret
  80f0cc:	0005883a 	mov	r2,zero
  80f0d0:	f800283a 	ret
  80f0d4:	10c03fcc 	andi	r3,r2,255
  80f0d8:	003ff506 	br	80f0b0 <__alt_mem_onchip_mem+0xff8070b0>

0080f0dc <__sprint_r.part.0>:
  80f0dc:	28801917 	ldw	r2,100(r5)
  80f0e0:	defff604 	addi	sp,sp,-40
  80f0e4:	dd400515 	stw	r21,20(sp)
  80f0e8:	dfc00915 	stw	ra,36(sp)
  80f0ec:	df000815 	stw	fp,32(sp)
  80f0f0:	ddc00715 	stw	r23,28(sp)
  80f0f4:	dd800615 	stw	r22,24(sp)
  80f0f8:	dd000415 	stw	r20,16(sp)
  80f0fc:	dcc00315 	stw	r19,12(sp)
  80f100:	dc800215 	stw	r18,8(sp)
  80f104:	dc400115 	stw	r17,4(sp)
  80f108:	dc000015 	stw	r16,0(sp)
  80f10c:	1088000c 	andi	r2,r2,8192
  80f110:	302b883a 	mov	r21,r6
  80f114:	10002e26 	beq	r2,zero,80f1d0 <__sprint_r.part.0+0xf4>
  80f118:	30800217 	ldw	r2,8(r6)
  80f11c:	35800017 	ldw	r22,0(r6)
  80f120:	10002926 	beq	r2,zero,80f1c8 <__sprint_r.part.0+0xec>
  80f124:	2827883a 	mov	r19,r5
  80f128:	2029883a 	mov	r20,r4
  80f12c:	b5c00104 	addi	r23,r22,4
  80f130:	04bfffc4 	movi	r18,-1
  80f134:	bc400017 	ldw	r17,0(r23)
  80f138:	b4000017 	ldw	r16,0(r22)
  80f13c:	0039883a 	mov	fp,zero
  80f140:	8822d0ba 	srli	r17,r17,2
  80f144:	8800031e 	bne	r17,zero,80f154 <__sprint_r.part.0+0x78>
  80f148:	00001806 	br	80f1ac <__sprint_r.part.0+0xd0>
  80f14c:	84000104 	addi	r16,r16,4
  80f150:	8f001526 	beq	r17,fp,80f1a8 <__sprint_r.part.0+0xcc>
  80f154:	81400017 	ldw	r5,0(r16)
  80f158:	980d883a 	mov	r6,r19
  80f15c:	a009883a 	mov	r4,r20
  80f160:	0810ba80 	call	810ba8 <_fputwc_r>
  80f164:	e7000044 	addi	fp,fp,1
  80f168:	14bff81e 	bne	r2,r18,80f14c <__alt_mem_onchip_mem+0xff80714c>
  80f16c:	9005883a 	mov	r2,r18
  80f170:	a8000215 	stw	zero,8(r21)
  80f174:	a8000115 	stw	zero,4(r21)
  80f178:	dfc00917 	ldw	ra,36(sp)
  80f17c:	df000817 	ldw	fp,32(sp)
  80f180:	ddc00717 	ldw	r23,28(sp)
  80f184:	dd800617 	ldw	r22,24(sp)
  80f188:	dd400517 	ldw	r21,20(sp)
  80f18c:	dd000417 	ldw	r20,16(sp)
  80f190:	dcc00317 	ldw	r19,12(sp)
  80f194:	dc800217 	ldw	r18,8(sp)
  80f198:	dc400117 	ldw	r17,4(sp)
  80f19c:	dc000017 	ldw	r16,0(sp)
  80f1a0:	dec00a04 	addi	sp,sp,40
  80f1a4:	f800283a 	ret
  80f1a8:	a8800217 	ldw	r2,8(r21)
  80f1ac:	8c63883a 	add	r17,r17,r17
  80f1b0:	8c63883a 	add	r17,r17,r17
  80f1b4:	1445c83a 	sub	r2,r2,r17
  80f1b8:	a8800215 	stw	r2,8(r21)
  80f1bc:	b5800204 	addi	r22,r22,8
  80f1c0:	bdc00204 	addi	r23,r23,8
  80f1c4:	103fdb1e 	bne	r2,zero,80f134 <__alt_mem_onchip_mem+0xff807134>
  80f1c8:	0005883a 	mov	r2,zero
  80f1cc:	003fe806 	br	80f170 <__alt_mem_onchip_mem+0xff807170>
  80f1d0:	080cd080 	call	80cd08 <__sfvwrite_r>
  80f1d4:	003fe606 	br	80f170 <__alt_mem_onchip_mem+0xff807170>

0080f1d8 <__sprint_r>:
  80f1d8:	30c00217 	ldw	r3,8(r6)
  80f1dc:	18000126 	beq	r3,zero,80f1e4 <__sprint_r+0xc>
  80f1e0:	080f0dc1 	jmpi	80f0dc <__sprint_r.part.0>
  80f1e4:	30000115 	stw	zero,4(r6)
  80f1e8:	0005883a 	mov	r2,zero
  80f1ec:	f800283a 	ret

0080f1f0 <___vfiprintf_internal_r>:
  80f1f0:	deffc904 	addi	sp,sp,-220
  80f1f4:	df003515 	stw	fp,212(sp)
  80f1f8:	dd003115 	stw	r20,196(sp)
  80f1fc:	dfc03615 	stw	ra,216(sp)
  80f200:	ddc03415 	stw	r23,208(sp)
  80f204:	dd803315 	stw	r22,204(sp)
  80f208:	dd403215 	stw	r21,200(sp)
  80f20c:	dcc03015 	stw	r19,192(sp)
  80f210:	dc802f15 	stw	r18,188(sp)
  80f214:	dc402e15 	stw	r17,184(sp)
  80f218:	dc002d15 	stw	r16,180(sp)
  80f21c:	d9002015 	stw	r4,128(sp)
  80f220:	d9c02215 	stw	r7,136(sp)
  80f224:	2829883a 	mov	r20,r5
  80f228:	3039883a 	mov	fp,r6
  80f22c:	20000226 	beq	r4,zero,80f238 <___vfiprintf_internal_r+0x48>
  80f230:	20800e17 	ldw	r2,56(r4)
  80f234:	1000cf26 	beq	r2,zero,80f574 <___vfiprintf_internal_r+0x384>
  80f238:	a080030b 	ldhu	r2,12(r20)
  80f23c:	10c8000c 	andi	r3,r2,8192
  80f240:	1800061e 	bne	r3,zero,80f25c <___vfiprintf_internal_r+0x6c>
  80f244:	a1001917 	ldw	r4,100(r20)
  80f248:	00f7ffc4 	movi	r3,-8193
  80f24c:	10880014 	ori	r2,r2,8192
  80f250:	20c6703a 	and	r3,r4,r3
  80f254:	a080030d 	sth	r2,12(r20)
  80f258:	a0c01915 	stw	r3,100(r20)
  80f25c:	10c0020c 	andi	r3,r2,8
  80f260:	1800a926 	beq	r3,zero,80f508 <___vfiprintf_internal_r+0x318>
  80f264:	a0c00417 	ldw	r3,16(r20)
  80f268:	1800a726 	beq	r3,zero,80f508 <___vfiprintf_internal_r+0x318>
  80f26c:	1080068c 	andi	r2,r2,26
  80f270:	00c00284 	movi	r3,10
  80f274:	10c0ac26 	beq	r2,r3,80f528 <___vfiprintf_internal_r+0x338>
  80f278:	da801a04 	addi	r10,sp,104
  80f27c:	da801e15 	stw	r10,120(sp)
  80f280:	d8801e17 	ldw	r2,120(sp)
  80f284:	da8019c4 	addi	r10,sp,103
  80f288:	05802074 	movhi	r22,129
  80f28c:	05c02074 	movhi	r23,129
  80f290:	da801f15 	stw	r10,124(sp)
  80f294:	1295c83a 	sub	r10,r2,r10
  80f298:	b59cab04 	addi	r22,r22,29356
  80f29c:	bddca704 	addi	r23,r23,29340
  80f2a0:	dec01a15 	stw	sp,104(sp)
  80f2a4:	d8001c15 	stw	zero,112(sp)
  80f2a8:	d8001b15 	stw	zero,108(sp)
  80f2ac:	d8002615 	stw	zero,152(sp)
  80f2b0:	d8002315 	stw	zero,140(sp)
  80f2b4:	da802715 	stw	r10,156(sp)
  80f2b8:	d811883a 	mov	r8,sp
  80f2bc:	dd002115 	stw	r20,132(sp)
  80f2c0:	e021883a 	mov	r16,fp
  80f2c4:	80800007 	ldb	r2,0(r16)
  80f2c8:	1003ea26 	beq	r2,zero,810274 <___vfiprintf_internal_r+0x1084>
  80f2cc:	00c00944 	movi	r3,37
  80f2d0:	8025883a 	mov	r18,r16
  80f2d4:	10c0021e 	bne	r2,r3,80f2e0 <___vfiprintf_internal_r+0xf0>
  80f2d8:	00001606 	br	80f334 <___vfiprintf_internal_r+0x144>
  80f2dc:	10c00326 	beq	r2,r3,80f2ec <___vfiprintf_internal_r+0xfc>
  80f2e0:	94800044 	addi	r18,r18,1
  80f2e4:	90800007 	ldb	r2,0(r18)
  80f2e8:	103ffc1e 	bne	r2,zero,80f2dc <__alt_mem_onchip_mem+0xff8072dc>
  80f2ec:	9423c83a 	sub	r17,r18,r16
  80f2f0:	88001026 	beq	r17,zero,80f334 <___vfiprintf_internal_r+0x144>
  80f2f4:	d8c01c17 	ldw	r3,112(sp)
  80f2f8:	d8801b17 	ldw	r2,108(sp)
  80f2fc:	44000015 	stw	r16,0(r8)
  80f300:	88c7883a 	add	r3,r17,r3
  80f304:	10800044 	addi	r2,r2,1
  80f308:	44400115 	stw	r17,4(r8)
  80f30c:	d8c01c15 	stw	r3,112(sp)
  80f310:	d8801b15 	stw	r2,108(sp)
  80f314:	010001c4 	movi	r4,7
  80f318:	2080760e 	bge	r4,r2,80f4f4 <___vfiprintf_internal_r+0x304>
  80f31c:	1803821e 	bne	r3,zero,810128 <___vfiprintf_internal_r+0xf38>
  80f320:	da802317 	ldw	r10,140(sp)
  80f324:	d8001b15 	stw	zero,108(sp)
  80f328:	d811883a 	mov	r8,sp
  80f32c:	5455883a 	add	r10,r10,r17
  80f330:	da802315 	stw	r10,140(sp)
  80f334:	90800007 	ldb	r2,0(r18)
  80f338:	10044626 	beq	r2,zero,810454 <___vfiprintf_internal_r+0x1264>
  80f33c:	90c00047 	ldb	r3,1(r18)
  80f340:	94000044 	addi	r16,r18,1
  80f344:	d8001d85 	stb	zero,118(sp)
  80f348:	0009883a 	mov	r4,zero
  80f34c:	000f883a 	mov	r7,zero
  80f350:	027fffc4 	movi	r9,-1
  80f354:	0023883a 	mov	r17,zero
  80f358:	0029883a 	mov	r20,zero
  80f35c:	01401604 	movi	r5,88
  80f360:	01800244 	movi	r6,9
  80f364:	03400a84 	movi	r13,42
  80f368:	03001b04 	movi	r12,108
  80f36c:	84000044 	addi	r16,r16,1
  80f370:	18bff804 	addi	r2,r3,-32
  80f374:	28827336 	bltu	r5,r2,80fd44 <___vfiprintf_internal_r+0xb54>
  80f378:	100490ba 	slli	r2,r2,2
  80f37c:	02802074 	movhi	r10,129
  80f380:	52bce404 	addi	r10,r10,-3184
  80f384:	1285883a 	add	r2,r2,r10
  80f388:	10800017 	ldw	r2,0(r2)
  80f38c:	1000683a 	jmp	r2
  80f390:	0080fa78 	rdprs	r2,zero,1001
  80f394:	0080fd44 	movi	r2,1013
  80f398:	0080fd44 	movi	r2,1013
  80f39c:	0080fa98 	cmpnei	r2,zero,1002
  80f3a0:	0080fd44 	movi	r2,1013
  80f3a4:	0080fd44 	movi	r2,1013
  80f3a8:	0080fd44 	movi	r2,1013
  80f3ac:	0080fd44 	movi	r2,1013
  80f3b0:	0080fd44 	movi	r2,1013
  80f3b4:	0080fd44 	movi	r2,1013
  80f3b8:	0080fc80 	call	80fc8 <__reset-0x77f038>
  80f3bc:	0080fc9c 	xori	r2,zero,1010
  80f3c0:	0080fd44 	movi	r2,1013
  80f3c4:	0080f584 	movi	r2,982
  80f3c8:	0080fcac 	andhi	r2,zero,1010
  80f3cc:	0080fd44 	movi	r2,1013
  80f3d0:	0080faa4 	muli	r2,zero,1002
  80f3d4:	0080fab0 	cmpltui	r2,zero,1002
  80f3d8:	0080fab0 	cmpltui	r2,zero,1002
  80f3dc:	0080fab0 	cmpltui	r2,zero,1002
  80f3e0:	0080fab0 	cmpltui	r2,zero,1002
  80f3e4:	0080fab0 	cmpltui	r2,zero,1002
  80f3e8:	0080fab0 	cmpltui	r2,zero,1002
  80f3ec:	0080fab0 	cmpltui	r2,zero,1002
  80f3f0:	0080fab0 	cmpltui	r2,zero,1002
  80f3f4:	0080fab0 	cmpltui	r2,zero,1002
  80f3f8:	0080fd44 	movi	r2,1013
  80f3fc:	0080fd44 	movi	r2,1013
  80f400:	0080fd44 	movi	r2,1013
  80f404:	0080fd44 	movi	r2,1013
  80f408:	0080fd44 	movi	r2,1013
  80f40c:	0080fd44 	movi	r2,1013
  80f410:	0080fd44 	movi	r2,1013
  80f414:	0080fd44 	movi	r2,1013
  80f418:	0080fd44 	movi	r2,1013
  80f41c:	0080fd44 	movi	r2,1013
  80f420:	0080fadc 	xori	r2,zero,1003
  80f424:	0080fd44 	movi	r2,1013
  80f428:	0080fd44 	movi	r2,1013
  80f42c:	0080fd44 	movi	r2,1013
  80f430:	0080fd44 	movi	r2,1013
  80f434:	0080fd44 	movi	r2,1013
  80f438:	0080fd44 	movi	r2,1013
  80f43c:	0080fd44 	movi	r2,1013
  80f440:	0080fd44 	movi	r2,1013
  80f444:	0080fd44 	movi	r2,1013
  80f448:	0080fd44 	movi	r2,1013
  80f44c:	0080fb14 	movui	r2,1004
  80f450:	0080fd44 	movi	r2,1013
  80f454:	0080fd44 	movi	r2,1013
  80f458:	0080fd44 	movi	r2,1013
  80f45c:	0080fd44 	movi	r2,1013
  80f460:	0080fd44 	movi	r2,1013
  80f464:	0080fb6c 	andhi	r2,zero,1005
  80f468:	0080fd44 	movi	r2,1013
  80f46c:	0080fd44 	movi	r2,1013
  80f470:	0080fbdc 	xori	r2,zero,1007
  80f474:	0080fd44 	movi	r2,1013
  80f478:	0080fd44 	movi	r2,1013
  80f47c:	0080fd44 	movi	r2,1013
  80f480:	0080fd44 	movi	r2,1013
  80f484:	0080fd44 	movi	r2,1013
  80f488:	0080fd44 	movi	r2,1013
  80f48c:	0080fd44 	movi	r2,1013
  80f490:	0080fd44 	movi	r2,1013
  80f494:	0080fd44 	movi	r2,1013
  80f498:	0080fd44 	movi	r2,1013
  80f49c:	0080f988 	cmpgei	r2,zero,998
  80f4a0:	0080f9b4 	movhi	r2,998
  80f4a4:	0080fd44 	movi	r2,1013
  80f4a8:	0080fd44 	movi	r2,1013
  80f4ac:	0080fd44 	movi	r2,1013
  80f4b0:	0080fcec 	andhi	r2,zero,1011
  80f4b4:	0080f9b4 	movhi	r2,998
  80f4b8:	0080fd44 	movi	r2,1013
  80f4bc:	0080fd44 	movi	r2,1013
  80f4c0:	0080f848 	cmpgei	r2,zero,993
  80f4c4:	0080fd44 	movi	r2,1013
  80f4c8:	0080f858 	cmpnei	r2,zero,993
  80f4cc:	0080f894 	movui	r2,994
  80f4d0:	0080f590 	cmplti	r2,zero,982
  80f4d4:	0080f83c 	xorhi	r2,zero,992
  80f4d8:	0080fd44 	movi	r2,1013
  80f4dc:	0080fc18 	cmpnei	r2,zero,1008
  80f4e0:	0080fd44 	movi	r2,1013
  80f4e4:	0080fc70 	cmpltui	r2,zero,1009
  80f4e8:	0080fd44 	movi	r2,1013
  80f4ec:	0080fd44 	movi	r2,1013
  80f4f0:	0080f934 	movhi	r2,996
  80f4f4:	42000204 	addi	r8,r8,8
  80f4f8:	da802317 	ldw	r10,140(sp)
  80f4fc:	5455883a 	add	r10,r10,r17
  80f500:	da802315 	stw	r10,140(sp)
  80f504:	003f8b06 	br	80f334 <__alt_mem_onchip_mem+0xff807334>
  80f508:	d9002017 	ldw	r4,128(sp)
  80f50c:	a00b883a 	mov	r5,r20
  80f510:	080a7b00 	call	80a7b0 <__swsetup_r>
  80f514:	1003b11e 	bne	r2,zero,8103dc <___vfiprintf_internal_r+0x11ec>
  80f518:	a080030b 	ldhu	r2,12(r20)
  80f51c:	00c00284 	movi	r3,10
  80f520:	1080068c 	andi	r2,r2,26
  80f524:	10ff541e 	bne	r2,r3,80f278 <__alt_mem_onchip_mem+0xff807278>
  80f528:	a080038f 	ldh	r2,14(r20)
  80f52c:	103f5216 	blt	r2,zero,80f278 <__alt_mem_onchip_mem+0xff807278>
  80f530:	d9c02217 	ldw	r7,136(sp)
  80f534:	d9002017 	ldw	r4,128(sp)
  80f538:	e00d883a 	mov	r6,fp
  80f53c:	a00b883a 	mov	r5,r20
  80f540:	08106680 	call	810668 <__sbprintf>
  80f544:	dfc03617 	ldw	ra,216(sp)
  80f548:	df003517 	ldw	fp,212(sp)
  80f54c:	ddc03417 	ldw	r23,208(sp)
  80f550:	dd803317 	ldw	r22,204(sp)
  80f554:	dd403217 	ldw	r21,200(sp)
  80f558:	dd003117 	ldw	r20,196(sp)
  80f55c:	dcc03017 	ldw	r19,192(sp)
  80f560:	dc802f17 	ldw	r18,188(sp)
  80f564:	dc402e17 	ldw	r17,184(sp)
  80f568:	dc002d17 	ldw	r16,180(sp)
  80f56c:	dec03704 	addi	sp,sp,220
  80f570:	f800283a 	ret
  80f574:	080c7d80 	call	80c7d8 <__sinit>
  80f578:	003f2f06 	br	80f238 <__alt_mem_onchip_mem+0xff807238>
  80f57c:	0463c83a 	sub	r17,zero,r17
  80f580:	d8802215 	stw	r2,136(sp)
  80f584:	a5000114 	ori	r20,r20,4
  80f588:	80c00007 	ldb	r3,0(r16)
  80f58c:	003f7706 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  80f590:	00800c04 	movi	r2,48
  80f594:	da802217 	ldw	r10,136(sp)
  80f598:	d8801d05 	stb	r2,116(sp)
  80f59c:	00801e04 	movi	r2,120
  80f5a0:	d8801d45 	stb	r2,117(sp)
  80f5a4:	d8001d85 	stb	zero,118(sp)
  80f5a8:	50c00104 	addi	r3,r10,4
  80f5ac:	54800017 	ldw	r18,0(r10)
  80f5b0:	0027883a 	mov	r19,zero
  80f5b4:	a0800094 	ori	r2,r20,2
  80f5b8:	48030b16 	blt	r9,zero,8101e8 <___vfiprintf_internal_r+0xff8>
  80f5bc:	00bfdfc4 	movi	r2,-129
  80f5c0:	a096703a 	and	r11,r20,r2
  80f5c4:	d8c02215 	stw	r3,136(sp)
  80f5c8:	5d000094 	ori	r20,r11,2
  80f5cc:	90032b1e 	bne	r18,zero,81027c <___vfiprintf_internal_r+0x108c>
  80f5d0:	00802074 	movhi	r2,129
  80f5d4:	109c4704 	addi	r2,r2,28956
  80f5d8:	d8802615 	stw	r2,152(sp)
  80f5dc:	0039883a 	mov	fp,zero
  80f5e0:	48017b1e 	bne	r9,zero,80fbd0 <___vfiprintf_internal_r+0x9e0>
  80f5e4:	0013883a 	mov	r9,zero
  80f5e8:	0027883a 	mov	r19,zero
  80f5ec:	dd401a04 	addi	r21,sp,104
  80f5f0:	4825883a 	mov	r18,r9
  80f5f4:	4cc0010e 	bge	r9,r19,80f5fc <___vfiprintf_internal_r+0x40c>
  80f5f8:	9825883a 	mov	r18,r19
  80f5fc:	e7003fcc 	andi	fp,fp,255
  80f600:	e700201c 	xori	fp,fp,128
  80f604:	e73fe004 	addi	fp,fp,-128
  80f608:	e0000126 	beq	fp,zero,80f610 <___vfiprintf_internal_r+0x420>
  80f60c:	94800044 	addi	r18,r18,1
  80f610:	a380008c 	andi	r14,r20,2
  80f614:	70000126 	beq	r14,zero,80f61c <___vfiprintf_internal_r+0x42c>
  80f618:	94800084 	addi	r18,r18,2
  80f61c:	a700210c 	andi	fp,r20,132
  80f620:	e001df1e 	bne	fp,zero,80fda0 <___vfiprintf_internal_r+0xbb0>
  80f624:	8c87c83a 	sub	r3,r17,r18
  80f628:	00c1dd0e 	bge	zero,r3,80fda0 <___vfiprintf_internal_r+0xbb0>
  80f62c:	01c00404 	movi	r7,16
  80f630:	d8801c17 	ldw	r2,112(sp)
  80f634:	38c3ad0e 	bge	r7,r3,8104ec <___vfiprintf_internal_r+0x12fc>
  80f638:	02802074 	movhi	r10,129
  80f63c:	529cab04 	addi	r10,r10,29356
  80f640:	dc002915 	stw	r16,164(sp)
  80f644:	d9801b17 	ldw	r6,108(sp)
  80f648:	da802415 	stw	r10,144(sp)
  80f64c:	03c001c4 	movi	r15,7
  80f650:	da402515 	stw	r9,148(sp)
  80f654:	db802815 	stw	r14,160(sp)
  80f658:	1821883a 	mov	r16,r3
  80f65c:	00000506 	br	80f674 <___vfiprintf_internal_r+0x484>
  80f660:	31400084 	addi	r5,r6,2
  80f664:	42000204 	addi	r8,r8,8
  80f668:	200d883a 	mov	r6,r4
  80f66c:	843ffc04 	addi	r16,r16,-16
  80f670:	3c000d0e 	bge	r7,r16,80f6a8 <___vfiprintf_internal_r+0x4b8>
  80f674:	10800404 	addi	r2,r2,16
  80f678:	31000044 	addi	r4,r6,1
  80f67c:	45800015 	stw	r22,0(r8)
  80f680:	41c00115 	stw	r7,4(r8)
  80f684:	d8801c15 	stw	r2,112(sp)
  80f688:	d9001b15 	stw	r4,108(sp)
  80f68c:	793ff40e 	bge	r15,r4,80f660 <__alt_mem_onchip_mem+0xff807660>
  80f690:	1001b51e 	bne	r2,zero,80fd68 <___vfiprintf_internal_r+0xb78>
  80f694:	843ffc04 	addi	r16,r16,-16
  80f698:	000d883a 	mov	r6,zero
  80f69c:	01400044 	movi	r5,1
  80f6a0:	d811883a 	mov	r8,sp
  80f6a4:	3c3ff316 	blt	r7,r16,80f674 <__alt_mem_onchip_mem+0xff807674>
  80f6a8:	8007883a 	mov	r3,r16
  80f6ac:	da402517 	ldw	r9,148(sp)
  80f6b0:	db802817 	ldw	r14,160(sp)
  80f6b4:	dc002917 	ldw	r16,164(sp)
  80f6b8:	da802417 	ldw	r10,144(sp)
  80f6bc:	1885883a 	add	r2,r3,r2
  80f6c0:	40c00115 	stw	r3,4(r8)
  80f6c4:	42800015 	stw	r10,0(r8)
  80f6c8:	d8801c15 	stw	r2,112(sp)
  80f6cc:	d9401b15 	stw	r5,108(sp)
  80f6d0:	00c001c4 	movi	r3,7
  80f6d4:	19426016 	blt	r3,r5,810058 <___vfiprintf_internal_r+0xe68>
  80f6d8:	d8c01d87 	ldb	r3,118(sp)
  80f6dc:	42000204 	addi	r8,r8,8
  80f6e0:	29000044 	addi	r4,r5,1
  80f6e4:	1801b31e 	bne	r3,zero,80fdb4 <___vfiprintf_internal_r+0xbc4>
  80f6e8:	7001c026 	beq	r14,zero,80fdec <___vfiprintf_internal_r+0xbfc>
  80f6ec:	d8c01d04 	addi	r3,sp,116
  80f6f0:	10800084 	addi	r2,r2,2
  80f6f4:	40c00015 	stw	r3,0(r8)
  80f6f8:	00c00084 	movi	r3,2
  80f6fc:	40c00115 	stw	r3,4(r8)
  80f700:	d8801c15 	stw	r2,112(sp)
  80f704:	d9001b15 	stw	r4,108(sp)
  80f708:	00c001c4 	movi	r3,7
  80f70c:	1902650e 	bge	r3,r4,8100a4 <___vfiprintf_internal_r+0xeb4>
  80f710:	10029a1e 	bne	r2,zero,81017c <___vfiprintf_internal_r+0xf8c>
  80f714:	00c02004 	movi	r3,128
  80f718:	01000044 	movi	r4,1
  80f71c:	000b883a 	mov	r5,zero
  80f720:	d811883a 	mov	r8,sp
  80f724:	e0c1b31e 	bne	fp,r3,80fdf4 <___vfiprintf_internal_r+0xc04>
  80f728:	8cb9c83a 	sub	fp,r17,r18
  80f72c:	0701b10e 	bge	zero,fp,80fdf4 <___vfiprintf_internal_r+0xc04>
  80f730:	01c00404 	movi	r7,16
  80f734:	3f03890e 	bge	r7,fp,81055c <___vfiprintf_internal_r+0x136c>
  80f738:	00c02074 	movhi	r3,129
  80f73c:	18dca704 	addi	r3,r3,29340
  80f740:	d8c02415 	stw	r3,144(sp)
  80f744:	8007883a 	mov	r3,r16
  80f748:	034001c4 	movi	r13,7
  80f74c:	e021883a 	mov	r16,fp
  80f750:	da402515 	stw	r9,148(sp)
  80f754:	1839883a 	mov	fp,r3
  80f758:	00000506 	br	80f770 <___vfiprintf_internal_r+0x580>
  80f75c:	29800084 	addi	r6,r5,2
  80f760:	42000204 	addi	r8,r8,8
  80f764:	180b883a 	mov	r5,r3
  80f768:	843ffc04 	addi	r16,r16,-16
  80f76c:	3c000d0e 	bge	r7,r16,80f7a4 <___vfiprintf_internal_r+0x5b4>
  80f770:	10800404 	addi	r2,r2,16
  80f774:	28c00044 	addi	r3,r5,1
  80f778:	45c00015 	stw	r23,0(r8)
  80f77c:	41c00115 	stw	r7,4(r8)
  80f780:	d8801c15 	stw	r2,112(sp)
  80f784:	d8c01b15 	stw	r3,108(sp)
  80f788:	68fff40e 	bge	r13,r3,80f75c <__alt_mem_onchip_mem+0xff80775c>
  80f78c:	1002241e 	bne	r2,zero,810020 <___vfiprintf_internal_r+0xe30>
  80f790:	843ffc04 	addi	r16,r16,-16
  80f794:	01800044 	movi	r6,1
  80f798:	000b883a 	mov	r5,zero
  80f79c:	d811883a 	mov	r8,sp
  80f7a0:	3c3ff316 	blt	r7,r16,80f770 <__alt_mem_onchip_mem+0xff807770>
  80f7a4:	da402517 	ldw	r9,148(sp)
  80f7a8:	e007883a 	mov	r3,fp
  80f7ac:	8039883a 	mov	fp,r16
  80f7b0:	1821883a 	mov	r16,r3
  80f7b4:	d8c02417 	ldw	r3,144(sp)
  80f7b8:	1705883a 	add	r2,r2,fp
  80f7bc:	47000115 	stw	fp,4(r8)
  80f7c0:	40c00015 	stw	r3,0(r8)
  80f7c4:	d8801c15 	stw	r2,112(sp)
  80f7c8:	d9801b15 	stw	r6,108(sp)
  80f7cc:	00c001c4 	movi	r3,7
  80f7d0:	19827616 	blt	r3,r6,8101ac <___vfiprintf_internal_r+0xfbc>
  80f7d4:	4cf9c83a 	sub	fp,r9,r19
  80f7d8:	42000204 	addi	r8,r8,8
  80f7dc:	31000044 	addi	r4,r6,1
  80f7e0:	300b883a 	mov	r5,r6
  80f7e4:	07018516 	blt	zero,fp,80fdfc <___vfiprintf_internal_r+0xc0c>
  80f7e8:	9885883a 	add	r2,r19,r2
  80f7ec:	45400015 	stw	r21,0(r8)
  80f7f0:	44c00115 	stw	r19,4(r8)
  80f7f4:	d8801c15 	stw	r2,112(sp)
  80f7f8:	d9001b15 	stw	r4,108(sp)
  80f7fc:	00c001c4 	movi	r3,7
  80f800:	1901dd0e 	bge	r3,r4,80ff78 <___vfiprintf_internal_r+0xd88>
  80f804:	1002401e 	bne	r2,zero,810108 <___vfiprintf_internal_r+0xf18>
  80f808:	d8001b15 	stw	zero,108(sp)
  80f80c:	a2c0010c 	andi	r11,r20,4
  80f810:	58000226 	beq	r11,zero,80f81c <___vfiprintf_internal_r+0x62c>
  80f814:	8ca7c83a 	sub	r19,r17,r18
  80f818:	04c2f216 	blt	zero,r19,8103e4 <___vfiprintf_internal_r+0x11f4>
  80f81c:	8c80010e 	bge	r17,r18,80f824 <___vfiprintf_internal_r+0x634>
  80f820:	9023883a 	mov	r17,r18
  80f824:	da802317 	ldw	r10,140(sp)
  80f828:	5455883a 	add	r10,r10,r17
  80f82c:	da802315 	stw	r10,140(sp)
  80f830:	d8001b15 	stw	zero,108(sp)
  80f834:	d811883a 	mov	r8,sp
  80f838:	003ea206 	br	80f2c4 <__alt_mem_onchip_mem+0xff8072c4>
  80f83c:	a5000814 	ori	r20,r20,32
  80f840:	80c00007 	ldb	r3,0(r16)
  80f844:	003ec906 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  80f848:	80c00007 	ldb	r3,0(r16)
  80f84c:	1b030926 	beq	r3,r12,810474 <___vfiprintf_internal_r+0x1284>
  80f850:	a5000414 	ori	r20,r20,16
  80f854:	003ec506 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  80f858:	21003fcc 	andi	r4,r4,255
  80f85c:	20035e1e 	bne	r4,zero,8105d8 <___vfiprintf_internal_r+0x13e8>
  80f860:	a080080c 	andi	r2,r20,32
  80f864:	1002a526 	beq	r2,zero,8102fc <___vfiprintf_internal_r+0x110c>
  80f868:	da802217 	ldw	r10,136(sp)
  80f86c:	50800017 	ldw	r2,0(r10)
  80f870:	da802317 	ldw	r10,140(sp)
  80f874:	5007d7fa 	srai	r3,r10,31
  80f878:	da802217 	ldw	r10,136(sp)
  80f87c:	10c00115 	stw	r3,4(r2)
  80f880:	52800104 	addi	r10,r10,4
  80f884:	da802215 	stw	r10,136(sp)
  80f888:	da802317 	ldw	r10,140(sp)
  80f88c:	12800015 	stw	r10,0(r2)
  80f890:	003e8c06 	br	80f2c4 <__alt_mem_onchip_mem+0xff8072c4>
  80f894:	21003fcc 	andi	r4,r4,255
  80f898:	2003511e 	bne	r4,zero,8105e0 <___vfiprintf_internal_r+0x13f0>
  80f89c:	a080080c 	andi	r2,r20,32
  80f8a0:	1000a126 	beq	r2,zero,80fb28 <___vfiprintf_internal_r+0x938>
  80f8a4:	da802217 	ldw	r10,136(sp)
  80f8a8:	d8001d85 	stb	zero,118(sp)
  80f8ac:	50800204 	addi	r2,r10,8
  80f8b0:	54800017 	ldw	r18,0(r10)
  80f8b4:	54c00117 	ldw	r19,4(r10)
  80f8b8:	4802b416 	blt	r9,zero,81038c <___vfiprintf_internal_r+0x119c>
  80f8bc:	013fdfc4 	movi	r4,-129
  80f8c0:	94c6b03a 	or	r3,r18,r19
  80f8c4:	d8802215 	stw	r2,136(sp)
  80f8c8:	a128703a 	and	r20,r20,r4
  80f8cc:	1800a226 	beq	r3,zero,80fb58 <___vfiprintf_internal_r+0x968>
  80f8d0:	0039883a 	mov	fp,zero
  80f8d4:	dd401a04 	addi	r21,sp,104
  80f8d8:	9006d0fa 	srli	r3,r18,3
  80f8dc:	9808977a 	slli	r4,r19,29
  80f8e0:	9826d0fa 	srli	r19,r19,3
  80f8e4:	948001cc 	andi	r18,r18,7
  80f8e8:	90800c04 	addi	r2,r18,48
  80f8ec:	ad7fffc4 	addi	r21,r21,-1
  80f8f0:	20e4b03a 	or	r18,r4,r3
  80f8f4:	a8800005 	stb	r2,0(r21)
  80f8f8:	94c6b03a 	or	r3,r18,r19
  80f8fc:	183ff61e 	bne	r3,zero,80f8d8 <__alt_mem_onchip_mem+0xff8078d8>
  80f900:	a0c0004c 	andi	r3,r20,1
  80f904:	18005926 	beq	r3,zero,80fa6c <___vfiprintf_internal_r+0x87c>
  80f908:	10803fcc 	andi	r2,r2,255
  80f90c:	1080201c 	xori	r2,r2,128
  80f910:	10bfe004 	addi	r2,r2,-128
  80f914:	00c00c04 	movi	r3,48
  80f918:	10c05426 	beq	r2,r3,80fa6c <___vfiprintf_internal_r+0x87c>
  80f91c:	da801e17 	ldw	r10,120(sp)
  80f920:	a8bfffc4 	addi	r2,r21,-1
  80f924:	a8ffffc5 	stb	r3,-1(r21)
  80f928:	50a7c83a 	sub	r19,r10,r2
  80f92c:	102b883a 	mov	r21,r2
  80f930:	003f2f06 	br	80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
  80f934:	21003fcc 	andi	r4,r4,255
  80f938:	2003421e 	bne	r4,zero,810644 <___vfiprintf_internal_r+0x1454>
  80f93c:	00802074 	movhi	r2,129
  80f940:	109c4704 	addi	r2,r2,28956
  80f944:	d8802615 	stw	r2,152(sp)
  80f948:	a080080c 	andi	r2,r20,32
  80f94c:	1000aa26 	beq	r2,zero,80fbf8 <___vfiprintf_internal_r+0xa08>
  80f950:	da802217 	ldw	r10,136(sp)
  80f954:	54800017 	ldw	r18,0(r10)
  80f958:	54c00117 	ldw	r19,4(r10)
  80f95c:	52800204 	addi	r10,r10,8
  80f960:	da802215 	stw	r10,136(sp)
  80f964:	a080004c 	andi	r2,r20,1
  80f968:	1001d226 	beq	r2,zero,8100b4 <___vfiprintf_internal_r+0xec4>
  80f96c:	94c4b03a 	or	r2,r18,r19
  80f970:	1002351e 	bne	r2,zero,810248 <___vfiprintf_internal_r+0x1058>
  80f974:	d8001d85 	stb	zero,118(sp)
  80f978:	48022216 	blt	r9,zero,810204 <___vfiprintf_internal_r+0x1014>
  80f97c:	00bfdfc4 	movi	r2,-129
  80f980:	a0a8703a 	and	r20,r20,r2
  80f984:	003f1506 	br	80f5dc <__alt_mem_onchip_mem+0xff8075dc>
  80f988:	da802217 	ldw	r10,136(sp)
  80f98c:	04800044 	movi	r18,1
  80f990:	d8001d85 	stb	zero,118(sp)
  80f994:	50800017 	ldw	r2,0(r10)
  80f998:	52800104 	addi	r10,r10,4
  80f99c:	da802215 	stw	r10,136(sp)
  80f9a0:	d8801005 	stb	r2,64(sp)
  80f9a4:	9027883a 	mov	r19,r18
  80f9a8:	dd401004 	addi	r21,sp,64
  80f9ac:	0013883a 	mov	r9,zero
  80f9b0:	003f1706 	br	80f610 <__alt_mem_onchip_mem+0xff807610>
  80f9b4:	21003fcc 	andi	r4,r4,255
  80f9b8:	2003201e 	bne	r4,zero,81063c <___vfiprintf_internal_r+0x144c>
  80f9bc:	a080080c 	andi	r2,r20,32
  80f9c0:	10004b26 	beq	r2,zero,80faf0 <___vfiprintf_internal_r+0x900>
  80f9c4:	da802217 	ldw	r10,136(sp)
  80f9c8:	50800117 	ldw	r2,4(r10)
  80f9cc:	54800017 	ldw	r18,0(r10)
  80f9d0:	52800204 	addi	r10,r10,8
  80f9d4:	da802215 	stw	r10,136(sp)
  80f9d8:	1027883a 	mov	r19,r2
  80f9dc:	10022c16 	blt	r2,zero,810290 <___vfiprintf_internal_r+0x10a0>
  80f9e0:	df001d83 	ldbu	fp,118(sp)
  80f9e4:	48007216 	blt	r9,zero,80fbb0 <___vfiprintf_internal_r+0x9c0>
  80f9e8:	00ffdfc4 	movi	r3,-129
  80f9ec:	94c4b03a 	or	r2,r18,r19
  80f9f0:	a0e8703a 	and	r20,r20,r3
  80f9f4:	1000cc26 	beq	r2,zero,80fd28 <___vfiprintf_internal_r+0xb38>
  80f9f8:	98021026 	beq	r19,zero,81023c <___vfiprintf_internal_r+0x104c>
  80f9fc:	dc402415 	stw	r17,144(sp)
  80fa00:	dc002515 	stw	r16,148(sp)
  80fa04:	9823883a 	mov	r17,r19
  80fa08:	9021883a 	mov	r16,r18
  80fa0c:	dd401a04 	addi	r21,sp,104
  80fa10:	4825883a 	mov	r18,r9
  80fa14:	4027883a 	mov	r19,r8
  80fa18:	8009883a 	mov	r4,r16
  80fa1c:	880b883a 	mov	r5,r17
  80fa20:	01800284 	movi	r6,10
  80fa24:	000f883a 	mov	r7,zero
  80fa28:	08113ac0 	call	8113ac <__umoddi3>
  80fa2c:	10800c04 	addi	r2,r2,48
  80fa30:	ad7fffc4 	addi	r21,r21,-1
  80fa34:	8009883a 	mov	r4,r16
  80fa38:	880b883a 	mov	r5,r17
  80fa3c:	a8800005 	stb	r2,0(r21)
  80fa40:	01800284 	movi	r6,10
  80fa44:	000f883a 	mov	r7,zero
  80fa48:	0810e340 	call	810e34 <__udivdi3>
  80fa4c:	1021883a 	mov	r16,r2
  80fa50:	10c4b03a 	or	r2,r2,r3
  80fa54:	1823883a 	mov	r17,r3
  80fa58:	103fef1e 	bne	r2,zero,80fa18 <__alt_mem_onchip_mem+0xff807a18>
  80fa5c:	dc402417 	ldw	r17,144(sp)
  80fa60:	dc002517 	ldw	r16,148(sp)
  80fa64:	9013883a 	mov	r9,r18
  80fa68:	9811883a 	mov	r8,r19
  80fa6c:	da801e17 	ldw	r10,120(sp)
  80fa70:	5567c83a 	sub	r19,r10,r21
  80fa74:	003ede06 	br	80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
  80fa78:	38803fcc 	andi	r2,r7,255
  80fa7c:	1080201c 	xori	r2,r2,128
  80fa80:	10bfe004 	addi	r2,r2,-128
  80fa84:	1002371e 	bne	r2,zero,810364 <___vfiprintf_internal_r+0x1174>
  80fa88:	01000044 	movi	r4,1
  80fa8c:	01c00804 	movi	r7,32
  80fa90:	80c00007 	ldb	r3,0(r16)
  80fa94:	003e3506 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  80fa98:	a5000054 	ori	r20,r20,1
  80fa9c:	80c00007 	ldb	r3,0(r16)
  80faa0:	003e3206 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  80faa4:	a5002014 	ori	r20,r20,128
  80faa8:	80c00007 	ldb	r3,0(r16)
  80faac:	003e2f06 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  80fab0:	8015883a 	mov	r10,r16
  80fab4:	0023883a 	mov	r17,zero
  80fab8:	18bff404 	addi	r2,r3,-48
  80fabc:	50c00007 	ldb	r3,0(r10)
  80fac0:	8c4002a4 	muli	r17,r17,10
  80fac4:	84000044 	addi	r16,r16,1
  80fac8:	8015883a 	mov	r10,r16
  80facc:	1463883a 	add	r17,r2,r17
  80fad0:	18bff404 	addi	r2,r3,-48
  80fad4:	30bff92e 	bgeu	r6,r2,80fabc <__alt_mem_onchip_mem+0xff807abc>
  80fad8:	003e2506 	br	80f370 <__alt_mem_onchip_mem+0xff807370>
  80fadc:	21003fcc 	andi	r4,r4,255
  80fae0:	2002d41e 	bne	r4,zero,810634 <___vfiprintf_internal_r+0x1444>
  80fae4:	a5000414 	ori	r20,r20,16
  80fae8:	a080080c 	andi	r2,r20,32
  80faec:	103fb51e 	bne	r2,zero,80f9c4 <__alt_mem_onchip_mem+0xff8079c4>
  80faf0:	a080040c 	andi	r2,r20,16
  80faf4:	1001f826 	beq	r2,zero,8102d8 <___vfiprintf_internal_r+0x10e8>
  80faf8:	da802217 	ldw	r10,136(sp)
  80fafc:	54800017 	ldw	r18,0(r10)
  80fb00:	52800104 	addi	r10,r10,4
  80fb04:	da802215 	stw	r10,136(sp)
  80fb08:	9027d7fa 	srai	r19,r18,31
  80fb0c:	9805883a 	mov	r2,r19
  80fb10:	003fb206 	br	80f9dc <__alt_mem_onchip_mem+0xff8079dc>
  80fb14:	21003fcc 	andi	r4,r4,255
  80fb18:	2002c41e 	bne	r4,zero,81062c <___vfiprintf_internal_r+0x143c>
  80fb1c:	a5000414 	ori	r20,r20,16
  80fb20:	a080080c 	andi	r2,r20,32
  80fb24:	103f5f1e 	bne	r2,zero,80f8a4 <__alt_mem_onchip_mem+0xff8078a4>
  80fb28:	a080040c 	andi	r2,r20,16
  80fb2c:	10020f26 	beq	r2,zero,81036c <___vfiprintf_internal_r+0x117c>
  80fb30:	da802217 	ldw	r10,136(sp)
  80fb34:	d8001d85 	stb	zero,118(sp)
  80fb38:	0027883a 	mov	r19,zero
  80fb3c:	50800104 	addi	r2,r10,4
  80fb40:	54800017 	ldw	r18,0(r10)
  80fb44:	48021116 	blt	r9,zero,81038c <___vfiprintf_internal_r+0x119c>
  80fb48:	00ffdfc4 	movi	r3,-129
  80fb4c:	d8802215 	stw	r2,136(sp)
  80fb50:	a0e8703a 	and	r20,r20,r3
  80fb54:	903f5e1e 	bne	r18,zero,80f8d0 <__alt_mem_onchip_mem+0xff8078d0>
  80fb58:	0039883a 	mov	fp,zero
  80fb5c:	4802a626 	beq	r9,zero,8105f8 <___vfiprintf_internal_r+0x1408>
  80fb60:	0025883a 	mov	r18,zero
  80fb64:	0027883a 	mov	r19,zero
  80fb68:	003f5a06 	br	80f8d4 <__alt_mem_onchip_mem+0xff8078d4>
  80fb6c:	21003fcc 	andi	r4,r4,255
  80fb70:	20029f1e 	bne	r4,zero,8105f0 <___vfiprintf_internal_r+0x1400>
  80fb74:	a5000414 	ori	r20,r20,16
  80fb78:	a080080c 	andi	r2,r20,32
  80fb7c:	10005e1e 	bne	r2,zero,80fcf8 <___vfiprintf_internal_r+0xb08>
  80fb80:	a080040c 	andi	r2,r20,16
  80fb84:	1001a21e 	bne	r2,zero,810210 <___vfiprintf_internal_r+0x1020>
  80fb88:	a080100c 	andi	r2,r20,64
  80fb8c:	d8001d85 	stb	zero,118(sp)
  80fb90:	da802217 	ldw	r10,136(sp)
  80fb94:	1002231e 	bne	r2,zero,810424 <___vfiprintf_internal_r+0x1234>
  80fb98:	50800104 	addi	r2,r10,4
  80fb9c:	54800017 	ldw	r18,0(r10)
  80fba0:	0027883a 	mov	r19,zero
  80fba4:	4801a00e 	bge	r9,zero,810228 <___vfiprintf_internal_r+0x1038>
  80fba8:	d8802215 	stw	r2,136(sp)
  80fbac:	0039883a 	mov	fp,zero
  80fbb0:	94c4b03a 	or	r2,r18,r19
  80fbb4:	103f901e 	bne	r2,zero,80f9f8 <__alt_mem_onchip_mem+0xff8079f8>
  80fbb8:	00800044 	movi	r2,1
  80fbbc:	10803fcc 	andi	r2,r2,255
  80fbc0:	00c00044 	movi	r3,1
  80fbc4:	10c05926 	beq	r2,r3,80fd2c <___vfiprintf_internal_r+0xb3c>
  80fbc8:	00c00084 	movi	r3,2
  80fbcc:	10ffe41e 	bne	r2,r3,80fb60 <__alt_mem_onchip_mem+0xff807b60>
  80fbd0:	0025883a 	mov	r18,zero
  80fbd4:	0027883a 	mov	r19,zero
  80fbd8:	00013d06 	br	8100d0 <___vfiprintf_internal_r+0xee0>
  80fbdc:	21003fcc 	andi	r4,r4,255
  80fbe0:	2002811e 	bne	r4,zero,8105e8 <___vfiprintf_internal_r+0x13f8>
  80fbe4:	00802074 	movhi	r2,129
  80fbe8:	109c4204 	addi	r2,r2,28936
  80fbec:	d8802615 	stw	r2,152(sp)
  80fbf0:	a080080c 	andi	r2,r20,32
  80fbf4:	103f561e 	bne	r2,zero,80f950 <__alt_mem_onchip_mem+0xff807950>
  80fbf8:	a080040c 	andi	r2,r20,16
  80fbfc:	1001d126 	beq	r2,zero,810344 <___vfiprintf_internal_r+0x1154>
  80fc00:	da802217 	ldw	r10,136(sp)
  80fc04:	0027883a 	mov	r19,zero
  80fc08:	54800017 	ldw	r18,0(r10)
  80fc0c:	52800104 	addi	r10,r10,4
  80fc10:	da802215 	stw	r10,136(sp)
  80fc14:	003f5306 	br	80f964 <__alt_mem_onchip_mem+0xff807964>
  80fc18:	da802217 	ldw	r10,136(sp)
  80fc1c:	d8001d85 	stb	zero,118(sp)
  80fc20:	55400017 	ldw	r21,0(r10)
  80fc24:	50c00104 	addi	r3,r10,4
  80fc28:	a8024226 	beq	r21,zero,810534 <___vfiprintf_internal_r+0x1344>
  80fc2c:	48021816 	blt	r9,zero,810490 <___vfiprintf_internal_r+0x12a0>
  80fc30:	480d883a 	mov	r6,r9
  80fc34:	000b883a 	mov	r5,zero
  80fc38:	a809883a 	mov	r4,r21
  80fc3c:	d8c02a15 	stw	r3,168(sp)
  80fc40:	da002b15 	stw	r8,172(sp)
  80fc44:	da402c15 	stw	r9,176(sp)
  80fc48:	080d4dc0 	call	80d4dc <memchr>
  80fc4c:	d8c02a17 	ldw	r3,168(sp)
  80fc50:	da002b17 	ldw	r8,172(sp)
  80fc54:	da402c17 	ldw	r9,176(sp)
  80fc58:	10024826 	beq	r2,zero,81057c <___vfiprintf_internal_r+0x138c>
  80fc5c:	1567c83a 	sub	r19,r2,r21
  80fc60:	df001d83 	ldbu	fp,118(sp)
  80fc64:	d8c02215 	stw	r3,136(sp)
  80fc68:	0013883a 	mov	r9,zero
  80fc6c:	003e6006 	br	80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
  80fc70:	21003fcc 	andi	r4,r4,255
  80fc74:	203fc026 	beq	r4,zero,80fb78 <__alt_mem_onchip_mem+0xff807b78>
  80fc78:	d9c01d85 	stb	r7,118(sp)
  80fc7c:	003fbe06 	br	80fb78 <__alt_mem_onchip_mem+0xff807b78>
  80fc80:	da802217 	ldw	r10,136(sp)
  80fc84:	54400017 	ldw	r17,0(r10)
  80fc88:	50800104 	addi	r2,r10,4
  80fc8c:	883e3b16 	blt	r17,zero,80f57c <__alt_mem_onchip_mem+0xff80757c>
  80fc90:	d8802215 	stw	r2,136(sp)
  80fc94:	80c00007 	ldb	r3,0(r16)
  80fc98:	003db406 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  80fc9c:	01000044 	movi	r4,1
  80fca0:	01c00ac4 	movi	r7,43
  80fca4:	80c00007 	ldb	r3,0(r16)
  80fca8:	003db006 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  80fcac:	80c00007 	ldb	r3,0(r16)
  80fcb0:	82800044 	addi	r10,r16,1
  80fcb4:	1b423c26 	beq	r3,r13,8105a8 <___vfiprintf_internal_r+0x13b8>
  80fcb8:	18bff404 	addi	r2,r3,-48
  80fcbc:	0013883a 	mov	r9,zero
  80fcc0:	30822b36 	bltu	r6,r2,810570 <___vfiprintf_internal_r+0x1380>
  80fcc4:	50c00007 	ldb	r3,0(r10)
  80fcc8:	4a4002a4 	muli	r9,r9,10
  80fccc:	54000044 	addi	r16,r10,1
  80fcd0:	8015883a 	mov	r10,r16
  80fcd4:	4893883a 	add	r9,r9,r2
  80fcd8:	18bff404 	addi	r2,r3,-48
  80fcdc:	30bff92e 	bgeu	r6,r2,80fcc4 <__alt_mem_onchip_mem+0xff807cc4>
  80fce0:	483da30e 	bge	r9,zero,80f370 <__alt_mem_onchip_mem+0xff807370>
  80fce4:	027fffc4 	movi	r9,-1
  80fce8:	003da106 	br	80f370 <__alt_mem_onchip_mem+0xff807370>
  80fcec:	a5001014 	ori	r20,r20,64
  80fcf0:	80c00007 	ldb	r3,0(r16)
  80fcf4:	003d9d06 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  80fcf8:	da802217 	ldw	r10,136(sp)
  80fcfc:	d8001d85 	stb	zero,118(sp)
  80fd00:	50c00204 	addi	r3,r10,8
  80fd04:	54800017 	ldw	r18,0(r10)
  80fd08:	54c00117 	ldw	r19,4(r10)
  80fd0c:	4801ca16 	blt	r9,zero,810438 <___vfiprintf_internal_r+0x1248>
  80fd10:	013fdfc4 	movi	r4,-129
  80fd14:	94c4b03a 	or	r2,r18,r19
  80fd18:	d8c02215 	stw	r3,136(sp)
  80fd1c:	a128703a 	and	r20,r20,r4
  80fd20:	0039883a 	mov	fp,zero
  80fd24:	103f341e 	bne	r2,zero,80f9f8 <__alt_mem_onchip_mem+0xff8079f8>
  80fd28:	483e2e26 	beq	r9,zero,80f5e4 <__alt_mem_onchip_mem+0xff8075e4>
  80fd2c:	0025883a 	mov	r18,zero
  80fd30:	94800c04 	addi	r18,r18,48
  80fd34:	dc8019c5 	stb	r18,103(sp)
  80fd38:	dcc02717 	ldw	r19,156(sp)
  80fd3c:	dd4019c4 	addi	r21,sp,103
  80fd40:	003e2b06 	br	80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
  80fd44:	21003fcc 	andi	r4,r4,255
  80fd48:	2002361e 	bne	r4,zero,810624 <___vfiprintf_internal_r+0x1434>
  80fd4c:	1801c126 	beq	r3,zero,810454 <___vfiprintf_internal_r+0x1264>
  80fd50:	04800044 	movi	r18,1
  80fd54:	d8c01005 	stb	r3,64(sp)
  80fd58:	d8001d85 	stb	zero,118(sp)
  80fd5c:	9027883a 	mov	r19,r18
  80fd60:	dd401004 	addi	r21,sp,64
  80fd64:	003f1106 	br	80f9ac <__alt_mem_onchip_mem+0xff8079ac>
  80fd68:	d9402117 	ldw	r5,132(sp)
  80fd6c:	d9002017 	ldw	r4,128(sp)
  80fd70:	d9801a04 	addi	r6,sp,104
  80fd74:	d9c02b15 	stw	r7,172(sp)
  80fd78:	dbc02a15 	stw	r15,168(sp)
  80fd7c:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  80fd80:	d9c02b17 	ldw	r7,172(sp)
  80fd84:	dbc02a17 	ldw	r15,168(sp)
  80fd88:	10006d1e 	bne	r2,zero,80ff40 <___vfiprintf_internal_r+0xd50>
  80fd8c:	d9801b17 	ldw	r6,108(sp)
  80fd90:	d8801c17 	ldw	r2,112(sp)
  80fd94:	d811883a 	mov	r8,sp
  80fd98:	31400044 	addi	r5,r6,1
  80fd9c:	003e3306 	br	80f66c <__alt_mem_onchip_mem+0xff80766c>
  80fda0:	d9401b17 	ldw	r5,108(sp)
  80fda4:	d8801c17 	ldw	r2,112(sp)
  80fda8:	29000044 	addi	r4,r5,1
  80fdac:	d8c01d87 	ldb	r3,118(sp)
  80fdb0:	183e4d26 	beq	r3,zero,80f6e8 <__alt_mem_onchip_mem+0xff8076e8>
  80fdb4:	00c00044 	movi	r3,1
  80fdb8:	d9401d84 	addi	r5,sp,118
  80fdbc:	10c5883a 	add	r2,r2,r3
  80fdc0:	41400015 	stw	r5,0(r8)
  80fdc4:	40c00115 	stw	r3,4(r8)
  80fdc8:	d8801c15 	stw	r2,112(sp)
  80fdcc:	d9001b15 	stw	r4,108(sp)
  80fdd0:	014001c4 	movi	r5,7
  80fdd4:	2900a90e 	bge	r5,r4,81007c <___vfiprintf_internal_r+0xe8c>
  80fdd8:	1000da1e 	bne	r2,zero,810144 <___vfiprintf_internal_r+0xf54>
  80fddc:	7000ab1e 	bne	r14,zero,81008c <___vfiprintf_internal_r+0xe9c>
  80fde0:	000b883a 	mov	r5,zero
  80fde4:	1809883a 	mov	r4,r3
  80fde8:	d811883a 	mov	r8,sp
  80fdec:	00c02004 	movi	r3,128
  80fdf0:	e0fe4d26 	beq	fp,r3,80f728 <__alt_mem_onchip_mem+0xff807728>
  80fdf4:	4cf9c83a 	sub	fp,r9,r19
  80fdf8:	073e7b0e 	bge	zero,fp,80f7e8 <__alt_mem_onchip_mem+0xff8077e8>
  80fdfc:	01c00404 	movi	r7,16
  80fe00:	3f01900e 	bge	r7,fp,810444 <___vfiprintf_internal_r+0x1254>
  80fe04:	00c02074 	movhi	r3,129
  80fe08:	18dca704 	addi	r3,r3,29340
  80fe0c:	d8c02415 	stw	r3,144(sp)
  80fe10:	034001c4 	movi	r13,7
  80fe14:	00000506 	br	80fe2c <___vfiprintf_internal_r+0xc3c>
  80fe18:	29000084 	addi	r4,r5,2
  80fe1c:	42000204 	addi	r8,r8,8
  80fe20:	180b883a 	mov	r5,r3
  80fe24:	e73ffc04 	addi	fp,fp,-16
  80fe28:	3f000d0e 	bge	r7,fp,80fe60 <___vfiprintf_internal_r+0xc70>
  80fe2c:	10800404 	addi	r2,r2,16
  80fe30:	28c00044 	addi	r3,r5,1
  80fe34:	45c00015 	stw	r23,0(r8)
  80fe38:	41c00115 	stw	r7,4(r8)
  80fe3c:	d8801c15 	stw	r2,112(sp)
  80fe40:	d8c01b15 	stw	r3,108(sp)
  80fe44:	68fff40e 	bge	r13,r3,80fe18 <__alt_mem_onchip_mem+0xff807e18>
  80fe48:	1000101e 	bne	r2,zero,80fe8c <___vfiprintf_internal_r+0xc9c>
  80fe4c:	e73ffc04 	addi	fp,fp,-16
  80fe50:	01000044 	movi	r4,1
  80fe54:	000b883a 	mov	r5,zero
  80fe58:	d811883a 	mov	r8,sp
  80fe5c:	3f3ff316 	blt	r7,fp,80fe2c <__alt_mem_onchip_mem+0xff807e2c>
  80fe60:	da802417 	ldw	r10,144(sp)
  80fe64:	1705883a 	add	r2,r2,fp
  80fe68:	47000115 	stw	fp,4(r8)
  80fe6c:	42800015 	stw	r10,0(r8)
  80fe70:	d8801c15 	stw	r2,112(sp)
  80fe74:	d9001b15 	stw	r4,108(sp)
  80fe78:	00c001c4 	movi	r3,7
  80fe7c:	19003616 	blt	r3,r4,80ff58 <___vfiprintf_internal_r+0xd68>
  80fe80:	42000204 	addi	r8,r8,8
  80fe84:	21000044 	addi	r4,r4,1
  80fe88:	003e5706 	br	80f7e8 <__alt_mem_onchip_mem+0xff8077e8>
  80fe8c:	d9402117 	ldw	r5,132(sp)
  80fe90:	d9002017 	ldw	r4,128(sp)
  80fe94:	d9801a04 	addi	r6,sp,104
  80fe98:	d9c02b15 	stw	r7,172(sp)
  80fe9c:	db402a15 	stw	r13,168(sp)
  80fea0:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  80fea4:	d9c02b17 	ldw	r7,172(sp)
  80fea8:	db402a17 	ldw	r13,168(sp)
  80feac:	1000241e 	bne	r2,zero,80ff40 <___vfiprintf_internal_r+0xd50>
  80feb0:	d9401b17 	ldw	r5,108(sp)
  80feb4:	d8801c17 	ldw	r2,112(sp)
  80feb8:	d811883a 	mov	r8,sp
  80febc:	29000044 	addi	r4,r5,1
  80fec0:	003fd806 	br	80fe24 <__alt_mem_onchip_mem+0xff807e24>
  80fec4:	d9401b17 	ldw	r5,108(sp)
  80fec8:	00c02074 	movhi	r3,129
  80fecc:	18dcab04 	addi	r3,r3,29356
  80fed0:	d8c02415 	stw	r3,144(sp)
  80fed4:	29400044 	addi	r5,r5,1
  80fed8:	d8c02417 	ldw	r3,144(sp)
  80fedc:	14c5883a 	add	r2,r2,r19
  80fee0:	44c00115 	stw	r19,4(r8)
  80fee4:	40c00015 	stw	r3,0(r8)
  80fee8:	d8801c15 	stw	r2,112(sp)
  80feec:	d9401b15 	stw	r5,108(sp)
  80fef0:	00c001c4 	movi	r3,7
  80fef4:	1940070e 	bge	r3,r5,80ff14 <___vfiprintf_internal_r+0xd24>
  80fef8:	103e4826 	beq	r2,zero,80f81c <__alt_mem_onchip_mem+0xff80781c>
  80fefc:	d9402117 	ldw	r5,132(sp)
  80ff00:	d9002017 	ldw	r4,128(sp)
  80ff04:	d9801a04 	addi	r6,sp,104
  80ff08:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  80ff0c:	10000c1e 	bne	r2,zero,80ff40 <___vfiprintf_internal_r+0xd50>
  80ff10:	d8801c17 	ldw	r2,112(sp)
  80ff14:	8c80010e 	bge	r17,r18,80ff1c <___vfiprintf_internal_r+0xd2c>
  80ff18:	9023883a 	mov	r17,r18
  80ff1c:	da802317 	ldw	r10,140(sp)
  80ff20:	5455883a 	add	r10,r10,r17
  80ff24:	da802315 	stw	r10,140(sp)
  80ff28:	103e4126 	beq	r2,zero,80f830 <__alt_mem_onchip_mem+0xff807830>
  80ff2c:	d9402117 	ldw	r5,132(sp)
  80ff30:	d9002017 	ldw	r4,128(sp)
  80ff34:	d9801a04 	addi	r6,sp,104
  80ff38:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  80ff3c:	103e3c26 	beq	r2,zero,80f830 <__alt_mem_onchip_mem+0xff807830>
  80ff40:	dd002117 	ldw	r20,132(sp)
  80ff44:	a080030b 	ldhu	r2,12(r20)
  80ff48:	1080100c 	andi	r2,r2,64
  80ff4c:	1001231e 	bne	r2,zero,8103dc <___vfiprintf_internal_r+0x11ec>
  80ff50:	d8802317 	ldw	r2,140(sp)
  80ff54:	003d7b06 	br	80f544 <__alt_mem_onchip_mem+0xff807544>
  80ff58:	1000991e 	bne	r2,zero,8101c0 <___vfiprintf_internal_r+0xfd0>
  80ff5c:	00c00044 	movi	r3,1
  80ff60:	9805883a 	mov	r2,r19
  80ff64:	dd400015 	stw	r21,0(sp)
  80ff68:	dcc00115 	stw	r19,4(sp)
  80ff6c:	dcc01c15 	stw	r19,112(sp)
  80ff70:	d8c01b15 	stw	r3,108(sp)
  80ff74:	d811883a 	mov	r8,sp
  80ff78:	42000204 	addi	r8,r8,8
  80ff7c:	a2c0010c 	andi	r11,r20,4
  80ff80:	583fe426 	beq	r11,zero,80ff14 <__alt_mem_onchip_mem+0xff807f14>
  80ff84:	8ca7c83a 	sub	r19,r17,r18
  80ff88:	04ffe20e 	bge	zero,r19,80ff14 <__alt_mem_onchip_mem+0xff807f14>
  80ff8c:	01c00404 	movi	r7,16
  80ff90:	3cffcc0e 	bge	r7,r19,80fec4 <__alt_mem_onchip_mem+0xff807ec4>
  80ff94:	02802074 	movhi	r10,129
  80ff98:	529cab04 	addi	r10,r10,29356
  80ff9c:	d9001b17 	ldw	r4,108(sp)
  80ffa0:	da802415 	stw	r10,144(sp)
  80ffa4:	382b883a 	mov	r21,r7
  80ffa8:	050001c4 	movi	r20,7
  80ffac:	df002017 	ldw	fp,128(sp)
  80ffb0:	00000506 	br	80ffc8 <___vfiprintf_internal_r+0xdd8>
  80ffb4:	21400084 	addi	r5,r4,2
  80ffb8:	42000204 	addi	r8,r8,8
  80ffbc:	1809883a 	mov	r4,r3
  80ffc0:	9cfffc04 	addi	r19,r19,-16
  80ffc4:	acffc40e 	bge	r21,r19,80fed8 <__alt_mem_onchip_mem+0xff807ed8>
  80ffc8:	10800404 	addi	r2,r2,16
  80ffcc:	20c00044 	addi	r3,r4,1
  80ffd0:	45800015 	stw	r22,0(r8)
  80ffd4:	45400115 	stw	r21,4(r8)
  80ffd8:	d8801c15 	stw	r2,112(sp)
  80ffdc:	d8c01b15 	stw	r3,108(sp)
  80ffe0:	a0fff40e 	bge	r20,r3,80ffb4 <__alt_mem_onchip_mem+0xff807fb4>
  80ffe4:	1000041e 	bne	r2,zero,80fff8 <___vfiprintf_internal_r+0xe08>
  80ffe8:	01400044 	movi	r5,1
  80ffec:	0009883a 	mov	r4,zero
  80fff0:	d811883a 	mov	r8,sp
  80fff4:	003ff206 	br	80ffc0 <__alt_mem_onchip_mem+0xff807fc0>
  80fff8:	d9402117 	ldw	r5,132(sp)
  80fffc:	d9801a04 	addi	r6,sp,104
  810000:	e009883a 	mov	r4,fp
  810004:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  810008:	103fcd1e 	bne	r2,zero,80ff40 <__alt_mem_onchip_mem+0xff807f40>
  81000c:	d9001b17 	ldw	r4,108(sp)
  810010:	d8801c17 	ldw	r2,112(sp)
  810014:	d811883a 	mov	r8,sp
  810018:	21400044 	addi	r5,r4,1
  81001c:	003fe806 	br	80ffc0 <__alt_mem_onchip_mem+0xff807fc0>
  810020:	d9402117 	ldw	r5,132(sp)
  810024:	d9002017 	ldw	r4,128(sp)
  810028:	d9801a04 	addi	r6,sp,104
  81002c:	d9c02b15 	stw	r7,172(sp)
  810030:	db402a15 	stw	r13,168(sp)
  810034:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  810038:	d9c02b17 	ldw	r7,172(sp)
  81003c:	db402a17 	ldw	r13,168(sp)
  810040:	103fbf1e 	bne	r2,zero,80ff40 <__alt_mem_onchip_mem+0xff807f40>
  810044:	d9401b17 	ldw	r5,108(sp)
  810048:	d8801c17 	ldw	r2,112(sp)
  81004c:	d811883a 	mov	r8,sp
  810050:	29800044 	addi	r6,r5,1
  810054:	003dc406 	br	80f768 <__alt_mem_onchip_mem+0xff807768>
  810058:	1000d21e 	bne	r2,zero,8103a4 <___vfiprintf_internal_r+0x11b4>
  81005c:	d8c01d87 	ldb	r3,118(sp)
  810060:	18009526 	beq	r3,zero,8102b8 <___vfiprintf_internal_r+0x10c8>
  810064:	00800044 	movi	r2,1
  810068:	d8c01d84 	addi	r3,sp,118
  81006c:	1009883a 	mov	r4,r2
  810070:	d8c00015 	stw	r3,0(sp)
  810074:	d8800115 	stw	r2,4(sp)
  810078:	d811883a 	mov	r8,sp
  81007c:	200b883a 	mov	r5,r4
  810080:	42000204 	addi	r8,r8,8
  810084:	21000044 	addi	r4,r4,1
  810088:	003d9706 	br	80f6e8 <__alt_mem_onchip_mem+0xff8076e8>
  81008c:	d9001d04 	addi	r4,sp,116
  810090:	00800084 	movi	r2,2
  810094:	d9000015 	stw	r4,0(sp)
  810098:	d8800115 	stw	r2,4(sp)
  81009c:	1809883a 	mov	r4,r3
  8100a0:	d811883a 	mov	r8,sp
  8100a4:	200b883a 	mov	r5,r4
  8100a8:	42000204 	addi	r8,r8,8
  8100ac:	21000044 	addi	r4,r4,1
  8100b0:	003f4e06 	br	80fdec <__alt_mem_onchip_mem+0xff807dec>
  8100b4:	d8001d85 	stb	zero,118(sp)
  8100b8:	48005016 	blt	r9,zero,8101fc <___vfiprintf_internal_r+0x100c>
  8100bc:	00ffdfc4 	movi	r3,-129
  8100c0:	94c4b03a 	or	r2,r18,r19
  8100c4:	a0e8703a 	and	r20,r20,r3
  8100c8:	103d4426 	beq	r2,zero,80f5dc <__alt_mem_onchip_mem+0xff8075dc>
  8100cc:	0039883a 	mov	fp,zero
  8100d0:	d9002617 	ldw	r4,152(sp)
  8100d4:	dd401a04 	addi	r21,sp,104
  8100d8:	908003cc 	andi	r2,r18,15
  8100dc:	9806973a 	slli	r3,r19,28
  8100e0:	2085883a 	add	r2,r4,r2
  8100e4:	9024d13a 	srli	r18,r18,4
  8100e8:	10800003 	ldbu	r2,0(r2)
  8100ec:	9826d13a 	srli	r19,r19,4
  8100f0:	ad7fffc4 	addi	r21,r21,-1
  8100f4:	1ca4b03a 	or	r18,r3,r18
  8100f8:	a8800005 	stb	r2,0(r21)
  8100fc:	94c4b03a 	or	r2,r18,r19
  810100:	103ff51e 	bne	r2,zero,8100d8 <__alt_mem_onchip_mem+0xff8080d8>
  810104:	003e5906 	br	80fa6c <__alt_mem_onchip_mem+0xff807a6c>
  810108:	d9402117 	ldw	r5,132(sp)
  81010c:	d9002017 	ldw	r4,128(sp)
  810110:	d9801a04 	addi	r6,sp,104
  810114:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  810118:	103f891e 	bne	r2,zero,80ff40 <__alt_mem_onchip_mem+0xff807f40>
  81011c:	d8801c17 	ldw	r2,112(sp)
  810120:	d811883a 	mov	r8,sp
  810124:	003f9506 	br	80ff7c <__alt_mem_onchip_mem+0xff807f7c>
  810128:	d9402117 	ldw	r5,132(sp)
  81012c:	d9002017 	ldw	r4,128(sp)
  810130:	d9801a04 	addi	r6,sp,104
  810134:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  810138:	103f811e 	bne	r2,zero,80ff40 <__alt_mem_onchip_mem+0xff807f40>
  81013c:	d811883a 	mov	r8,sp
  810140:	003ced06 	br	80f4f8 <__alt_mem_onchip_mem+0xff8074f8>
  810144:	d9402117 	ldw	r5,132(sp)
  810148:	d9002017 	ldw	r4,128(sp)
  81014c:	d9801a04 	addi	r6,sp,104
  810150:	da402c15 	stw	r9,176(sp)
  810154:	db802a15 	stw	r14,168(sp)
  810158:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  81015c:	da402c17 	ldw	r9,176(sp)
  810160:	db802a17 	ldw	r14,168(sp)
  810164:	103f761e 	bne	r2,zero,80ff40 <__alt_mem_onchip_mem+0xff807f40>
  810168:	d9401b17 	ldw	r5,108(sp)
  81016c:	d8801c17 	ldw	r2,112(sp)
  810170:	d811883a 	mov	r8,sp
  810174:	29000044 	addi	r4,r5,1
  810178:	003d5b06 	br	80f6e8 <__alt_mem_onchip_mem+0xff8076e8>
  81017c:	d9402117 	ldw	r5,132(sp)
  810180:	d9002017 	ldw	r4,128(sp)
  810184:	d9801a04 	addi	r6,sp,104
  810188:	da402c15 	stw	r9,176(sp)
  81018c:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  810190:	da402c17 	ldw	r9,176(sp)
  810194:	103f6a1e 	bne	r2,zero,80ff40 <__alt_mem_onchip_mem+0xff807f40>
  810198:	d9401b17 	ldw	r5,108(sp)
  81019c:	d8801c17 	ldw	r2,112(sp)
  8101a0:	d811883a 	mov	r8,sp
  8101a4:	29000044 	addi	r4,r5,1
  8101a8:	003f1006 	br	80fdec <__alt_mem_onchip_mem+0xff807dec>
  8101ac:	1000c31e 	bne	r2,zero,8104bc <___vfiprintf_internal_r+0x12cc>
  8101b0:	01000044 	movi	r4,1
  8101b4:	000b883a 	mov	r5,zero
  8101b8:	d811883a 	mov	r8,sp
  8101bc:	003f0d06 	br	80fdf4 <__alt_mem_onchip_mem+0xff807df4>
  8101c0:	d9402117 	ldw	r5,132(sp)
  8101c4:	d9002017 	ldw	r4,128(sp)
  8101c8:	d9801a04 	addi	r6,sp,104
  8101cc:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  8101d0:	103f5b1e 	bne	r2,zero,80ff40 <__alt_mem_onchip_mem+0xff807f40>
  8101d4:	d9001b17 	ldw	r4,108(sp)
  8101d8:	d8801c17 	ldw	r2,112(sp)
  8101dc:	d811883a 	mov	r8,sp
  8101e0:	21000044 	addi	r4,r4,1
  8101e4:	003d8006 	br	80f7e8 <__alt_mem_onchip_mem+0xff8077e8>
  8101e8:	01002074 	movhi	r4,129
  8101ec:	211c4704 	addi	r4,r4,28956
  8101f0:	d9002615 	stw	r4,152(sp)
  8101f4:	d8c02215 	stw	r3,136(sp)
  8101f8:	1029883a 	mov	r20,r2
  8101fc:	94c4b03a 	or	r2,r18,r19
  810200:	103fb21e 	bne	r2,zero,8100cc <__alt_mem_onchip_mem+0xff8080cc>
  810204:	0039883a 	mov	fp,zero
  810208:	00800084 	movi	r2,2
  81020c:	003e6b06 	br	80fbbc <__alt_mem_onchip_mem+0xff807bbc>
  810210:	da802217 	ldw	r10,136(sp)
  810214:	d8001d85 	stb	zero,118(sp)
  810218:	0027883a 	mov	r19,zero
  81021c:	50800104 	addi	r2,r10,4
  810220:	54800017 	ldw	r18,0(r10)
  810224:	483e6016 	blt	r9,zero,80fba8 <__alt_mem_onchip_mem+0xff807ba8>
  810228:	00ffdfc4 	movi	r3,-129
  81022c:	d8802215 	stw	r2,136(sp)
  810230:	a0e8703a 	and	r20,r20,r3
  810234:	0039883a 	mov	fp,zero
  810238:	903ebb26 	beq	r18,zero,80fd28 <__alt_mem_onchip_mem+0xff807d28>
  81023c:	00800244 	movi	r2,9
  810240:	14bdee36 	bltu	r2,r18,80f9fc <__alt_mem_onchip_mem+0xff8079fc>
  810244:	003eba06 	br	80fd30 <__alt_mem_onchip_mem+0xff807d30>
  810248:	00800c04 	movi	r2,48
  81024c:	d8c01d45 	stb	r3,117(sp)
  810250:	d8801d05 	stb	r2,116(sp)
  810254:	d8001d85 	stb	zero,118(sp)
  810258:	a0c00094 	ori	r3,r20,2
  81025c:	4800a916 	blt	r9,zero,810504 <___vfiprintf_internal_r+0x1314>
  810260:	00bfdfc4 	movi	r2,-129
  810264:	a096703a 	and	r11,r20,r2
  810268:	5d000094 	ori	r20,r11,2
  81026c:	0039883a 	mov	fp,zero
  810270:	003f9706 	br	8100d0 <__alt_mem_onchip_mem+0xff8080d0>
  810274:	8025883a 	mov	r18,r16
  810278:	003c2e06 	br	80f334 <__alt_mem_onchip_mem+0xff807334>
  81027c:	00802074 	movhi	r2,129
  810280:	109c4704 	addi	r2,r2,28956
  810284:	0039883a 	mov	fp,zero
  810288:	d8802615 	stw	r2,152(sp)
  81028c:	003f9006 	br	8100d0 <__alt_mem_onchip_mem+0xff8080d0>
  810290:	04a5c83a 	sub	r18,zero,r18
  810294:	07000b44 	movi	fp,45
  810298:	9004c03a 	cmpne	r2,r18,zero
  81029c:	04e7c83a 	sub	r19,zero,r19
  8102a0:	df001d85 	stb	fp,118(sp)
  8102a4:	98a7c83a 	sub	r19,r19,r2
  8102a8:	48009f16 	blt	r9,zero,810528 <___vfiprintf_internal_r+0x1338>
  8102ac:	00bfdfc4 	movi	r2,-129
  8102b0:	a0a8703a 	and	r20,r20,r2
  8102b4:	003dd006 	br	80f9f8 <__alt_mem_onchip_mem+0xff8079f8>
  8102b8:	70004c26 	beq	r14,zero,8103ec <___vfiprintf_internal_r+0x11fc>
  8102bc:	00800084 	movi	r2,2
  8102c0:	d8c01d04 	addi	r3,sp,116
  8102c4:	d8c00015 	stw	r3,0(sp)
  8102c8:	d8800115 	stw	r2,4(sp)
  8102cc:	01000044 	movi	r4,1
  8102d0:	d811883a 	mov	r8,sp
  8102d4:	003f7306 	br	8100a4 <__alt_mem_onchip_mem+0xff8080a4>
  8102d8:	a080100c 	andi	r2,r20,64
  8102dc:	da802217 	ldw	r10,136(sp)
  8102e0:	103e0626 	beq	r2,zero,80fafc <__alt_mem_onchip_mem+0xff807afc>
  8102e4:	5480000f 	ldh	r18,0(r10)
  8102e8:	52800104 	addi	r10,r10,4
  8102ec:	da802215 	stw	r10,136(sp)
  8102f0:	9027d7fa 	srai	r19,r18,31
  8102f4:	9805883a 	mov	r2,r19
  8102f8:	003db806 	br	80f9dc <__alt_mem_onchip_mem+0xff8079dc>
  8102fc:	a080040c 	andi	r2,r20,16
  810300:	1000091e 	bne	r2,zero,810328 <___vfiprintf_internal_r+0x1138>
  810304:	a2c0100c 	andi	r11,r20,64
  810308:	58000726 	beq	r11,zero,810328 <___vfiprintf_internal_r+0x1138>
  81030c:	da802217 	ldw	r10,136(sp)
  810310:	50800017 	ldw	r2,0(r10)
  810314:	52800104 	addi	r10,r10,4
  810318:	da802215 	stw	r10,136(sp)
  81031c:	da802317 	ldw	r10,140(sp)
  810320:	1280000d 	sth	r10,0(r2)
  810324:	003be706 	br	80f2c4 <__alt_mem_onchip_mem+0xff8072c4>
  810328:	da802217 	ldw	r10,136(sp)
  81032c:	50800017 	ldw	r2,0(r10)
  810330:	52800104 	addi	r10,r10,4
  810334:	da802215 	stw	r10,136(sp)
  810338:	da802317 	ldw	r10,140(sp)
  81033c:	12800015 	stw	r10,0(r2)
  810340:	003be006 	br	80f2c4 <__alt_mem_onchip_mem+0xff8072c4>
  810344:	a080100c 	andi	r2,r20,64
  810348:	da802217 	ldw	r10,136(sp)
  81034c:	10003026 	beq	r2,zero,810410 <___vfiprintf_internal_r+0x1220>
  810350:	5480000b 	ldhu	r18,0(r10)
  810354:	52800104 	addi	r10,r10,4
  810358:	0027883a 	mov	r19,zero
  81035c:	da802215 	stw	r10,136(sp)
  810360:	003d8006 	br	80f964 <__alt_mem_onchip_mem+0xff807964>
  810364:	80c00007 	ldb	r3,0(r16)
  810368:	003c0006 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  81036c:	a080100c 	andi	r2,r20,64
  810370:	d8001d85 	stb	zero,118(sp)
  810374:	da802217 	ldw	r10,136(sp)
  810378:	1000201e 	bne	r2,zero,8103fc <___vfiprintf_internal_r+0x120c>
  81037c:	50800104 	addi	r2,r10,4
  810380:	54800017 	ldw	r18,0(r10)
  810384:	0027883a 	mov	r19,zero
  810388:	483def0e 	bge	r9,zero,80fb48 <__alt_mem_onchip_mem+0xff807b48>
  81038c:	94c6b03a 	or	r3,r18,r19
  810390:	d8802215 	stw	r2,136(sp)
  810394:	183d4e1e 	bne	r3,zero,80f8d0 <__alt_mem_onchip_mem+0xff8078d0>
  810398:	0039883a 	mov	fp,zero
  81039c:	0005883a 	mov	r2,zero
  8103a0:	003e0606 	br	80fbbc <__alt_mem_onchip_mem+0xff807bbc>
  8103a4:	d9402117 	ldw	r5,132(sp)
  8103a8:	d9002017 	ldw	r4,128(sp)
  8103ac:	d9801a04 	addi	r6,sp,104
  8103b0:	da402c15 	stw	r9,176(sp)
  8103b4:	db802a15 	stw	r14,168(sp)
  8103b8:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  8103bc:	da402c17 	ldw	r9,176(sp)
  8103c0:	db802a17 	ldw	r14,168(sp)
  8103c4:	103ede1e 	bne	r2,zero,80ff40 <__alt_mem_onchip_mem+0xff807f40>
  8103c8:	d9401b17 	ldw	r5,108(sp)
  8103cc:	d8801c17 	ldw	r2,112(sp)
  8103d0:	d811883a 	mov	r8,sp
  8103d4:	29000044 	addi	r4,r5,1
  8103d8:	003e7406 	br	80fdac <__alt_mem_onchip_mem+0xff807dac>
  8103dc:	00bfffc4 	movi	r2,-1
  8103e0:	003c5806 	br	80f544 <__alt_mem_onchip_mem+0xff807544>
  8103e4:	d811883a 	mov	r8,sp
  8103e8:	003ee806 	br	80ff8c <__alt_mem_onchip_mem+0xff807f8c>
  8103ec:	000b883a 	mov	r5,zero
  8103f0:	01000044 	movi	r4,1
  8103f4:	d811883a 	mov	r8,sp
  8103f8:	003e7c06 	br	80fdec <__alt_mem_onchip_mem+0xff807dec>
  8103fc:	50800104 	addi	r2,r10,4
  810400:	5480000b 	ldhu	r18,0(r10)
  810404:	0027883a 	mov	r19,zero
  810408:	483dcf0e 	bge	r9,zero,80fb48 <__alt_mem_onchip_mem+0xff807b48>
  81040c:	003fdf06 	br	81038c <__alt_mem_onchip_mem+0xff80838c>
  810410:	54800017 	ldw	r18,0(r10)
  810414:	52800104 	addi	r10,r10,4
  810418:	0027883a 	mov	r19,zero
  81041c:	da802215 	stw	r10,136(sp)
  810420:	003d5006 	br	80f964 <__alt_mem_onchip_mem+0xff807964>
  810424:	50800104 	addi	r2,r10,4
  810428:	5480000b 	ldhu	r18,0(r10)
  81042c:	0027883a 	mov	r19,zero
  810430:	483f7d0e 	bge	r9,zero,810228 <__alt_mem_onchip_mem+0xff808228>
  810434:	003ddc06 	br	80fba8 <__alt_mem_onchip_mem+0xff807ba8>
  810438:	d8c02215 	stw	r3,136(sp)
  81043c:	0039883a 	mov	fp,zero
  810440:	003ddb06 	br	80fbb0 <__alt_mem_onchip_mem+0xff807bb0>
  810444:	02802074 	movhi	r10,129
  810448:	529ca704 	addi	r10,r10,29340
  81044c:	da802415 	stw	r10,144(sp)
  810450:	003e8306 	br	80fe60 <__alt_mem_onchip_mem+0xff807e60>
  810454:	d8801c17 	ldw	r2,112(sp)
  810458:	dd002117 	ldw	r20,132(sp)
  81045c:	103eb926 	beq	r2,zero,80ff44 <__alt_mem_onchip_mem+0xff807f44>
  810460:	d9002017 	ldw	r4,128(sp)
  810464:	d9801a04 	addi	r6,sp,104
  810468:	a00b883a 	mov	r5,r20
  81046c:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  810470:	003eb406 	br	80ff44 <__alt_mem_onchip_mem+0xff807f44>
  810474:	80c00043 	ldbu	r3,1(r16)
  810478:	a5000814 	ori	r20,r20,32
  81047c:	84000044 	addi	r16,r16,1
  810480:	18c03fcc 	andi	r3,r3,255
  810484:	18c0201c 	xori	r3,r3,128
  810488:	18ffe004 	addi	r3,r3,-128
  81048c:	003bb706 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  810490:	a809883a 	mov	r4,r21
  810494:	d8c02a15 	stw	r3,168(sp)
  810498:	da002b15 	stw	r8,172(sp)
  81049c:	08083e80 	call	8083e8 <strlen>
  8104a0:	d8c02a17 	ldw	r3,168(sp)
  8104a4:	1027883a 	mov	r19,r2
  8104a8:	df001d83 	ldbu	fp,118(sp)
  8104ac:	d8c02215 	stw	r3,136(sp)
  8104b0:	0013883a 	mov	r9,zero
  8104b4:	da002b17 	ldw	r8,172(sp)
  8104b8:	003c4d06 	br	80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
  8104bc:	d9402117 	ldw	r5,132(sp)
  8104c0:	d9002017 	ldw	r4,128(sp)
  8104c4:	d9801a04 	addi	r6,sp,104
  8104c8:	da402c15 	stw	r9,176(sp)
  8104cc:	080f0dc0 	call	80f0dc <__sprint_r.part.0>
  8104d0:	da402c17 	ldw	r9,176(sp)
  8104d4:	103e9a1e 	bne	r2,zero,80ff40 <__alt_mem_onchip_mem+0xff807f40>
  8104d8:	d9401b17 	ldw	r5,108(sp)
  8104dc:	d8801c17 	ldw	r2,112(sp)
  8104e0:	d811883a 	mov	r8,sp
  8104e4:	29000044 	addi	r4,r5,1
  8104e8:	003e4206 	br	80fdf4 <__alt_mem_onchip_mem+0xff807df4>
  8104ec:	d9401b17 	ldw	r5,108(sp)
  8104f0:	01002074 	movhi	r4,129
  8104f4:	211cab04 	addi	r4,r4,29356
  8104f8:	d9002415 	stw	r4,144(sp)
  8104fc:	29400044 	addi	r5,r5,1
  810500:	003c6d06 	br	80f6b8 <__alt_mem_onchip_mem+0xff8076b8>
  810504:	0039883a 	mov	fp,zero
  810508:	00800084 	movi	r2,2
  81050c:	10803fcc 	andi	r2,r2,255
  810510:	01000044 	movi	r4,1
  810514:	11001e26 	beq	r2,r4,810590 <___vfiprintf_internal_r+0x13a0>
  810518:	01000084 	movi	r4,2
  81051c:	11001e1e 	bne	r2,r4,810598 <___vfiprintf_internal_r+0x13a8>
  810520:	1829883a 	mov	r20,r3
  810524:	003eea06 	br	8100d0 <__alt_mem_onchip_mem+0xff8080d0>
  810528:	a007883a 	mov	r3,r20
  81052c:	00800044 	movi	r2,1
  810530:	003ff606 	br	81050c <__alt_mem_onchip_mem+0xff80850c>
  810534:	00800184 	movi	r2,6
  810538:	1240012e 	bgeu	r2,r9,810540 <___vfiprintf_internal_r+0x1350>
  81053c:	1013883a 	mov	r9,r2
  810540:	4827883a 	mov	r19,r9
  810544:	4825883a 	mov	r18,r9
  810548:	48001516 	blt	r9,zero,8105a0 <___vfiprintf_internal_r+0x13b0>
  81054c:	05402074 	movhi	r21,129
  810550:	d8c02215 	stw	r3,136(sp)
  810554:	ad5c4c04 	addi	r21,r21,28976
  810558:	003d1406 	br	80f9ac <__alt_mem_onchip_mem+0xff8079ac>
  81055c:	02802074 	movhi	r10,129
  810560:	529ca704 	addi	r10,r10,29340
  810564:	da802415 	stw	r10,144(sp)
  810568:	200d883a 	mov	r6,r4
  81056c:	003c9106 	br	80f7b4 <__alt_mem_onchip_mem+0xff8077b4>
  810570:	5021883a 	mov	r16,r10
  810574:	0013883a 	mov	r9,zero
  810578:	003b7d06 	br	80f370 <__alt_mem_onchip_mem+0xff807370>
  81057c:	4827883a 	mov	r19,r9
  810580:	df001d83 	ldbu	fp,118(sp)
  810584:	d8c02215 	stw	r3,136(sp)
  810588:	0013883a 	mov	r9,zero
  81058c:	003c1806 	br	80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
  810590:	1829883a 	mov	r20,r3
  810594:	003d1806 	br	80f9f8 <__alt_mem_onchip_mem+0xff8079f8>
  810598:	1829883a 	mov	r20,r3
  81059c:	003ccd06 	br	80f8d4 <__alt_mem_onchip_mem+0xff8078d4>
  8105a0:	0025883a 	mov	r18,zero
  8105a4:	003fe906 	br	81054c <__alt_mem_onchip_mem+0xff80854c>
  8105a8:	d8802217 	ldw	r2,136(sp)
  8105ac:	80c00043 	ldbu	r3,1(r16)
  8105b0:	5021883a 	mov	r16,r10
  8105b4:	12400017 	ldw	r9,0(r2)
  8105b8:	10800104 	addi	r2,r2,4
  8105bc:	d8802215 	stw	r2,136(sp)
  8105c0:	483faf0e 	bge	r9,zero,810480 <__alt_mem_onchip_mem+0xff808480>
  8105c4:	18c03fcc 	andi	r3,r3,255
  8105c8:	18c0201c 	xori	r3,r3,128
  8105cc:	027fffc4 	movi	r9,-1
  8105d0:	18ffe004 	addi	r3,r3,-128
  8105d4:	003b6506 	br	80f36c <__alt_mem_onchip_mem+0xff80736c>
  8105d8:	d9c01d85 	stb	r7,118(sp)
  8105dc:	003ca006 	br	80f860 <__alt_mem_onchip_mem+0xff807860>
  8105e0:	d9c01d85 	stb	r7,118(sp)
  8105e4:	003cad06 	br	80f89c <__alt_mem_onchip_mem+0xff80789c>
  8105e8:	d9c01d85 	stb	r7,118(sp)
  8105ec:	003d7d06 	br	80fbe4 <__alt_mem_onchip_mem+0xff807be4>
  8105f0:	d9c01d85 	stb	r7,118(sp)
  8105f4:	003d5f06 	br	80fb74 <__alt_mem_onchip_mem+0xff807b74>
  8105f8:	a080004c 	andi	r2,r20,1
  8105fc:	0039883a 	mov	fp,zero
  810600:	10000526 	beq	r2,zero,810618 <___vfiprintf_internal_r+0x1428>
  810604:	00800c04 	movi	r2,48
  810608:	d88019c5 	stb	r2,103(sp)
  81060c:	dcc02717 	ldw	r19,156(sp)
  810610:	dd4019c4 	addi	r21,sp,103
  810614:	003bf606 	br	80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
  810618:	0027883a 	mov	r19,zero
  81061c:	dd401a04 	addi	r21,sp,104
  810620:	003bf306 	br	80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
  810624:	d9c01d85 	stb	r7,118(sp)
  810628:	003dc806 	br	80fd4c <__alt_mem_onchip_mem+0xff807d4c>
  81062c:	d9c01d85 	stb	r7,118(sp)
  810630:	003d3a06 	br	80fb1c <__alt_mem_onchip_mem+0xff807b1c>
  810634:	d9c01d85 	stb	r7,118(sp)
  810638:	003d2a06 	br	80fae4 <__alt_mem_onchip_mem+0xff807ae4>
  81063c:	d9c01d85 	stb	r7,118(sp)
  810640:	003cde06 	br	80f9bc <__alt_mem_onchip_mem+0xff8079bc>
  810644:	d9c01d85 	stb	r7,118(sp)
  810648:	003cbc06 	br	80f93c <__alt_mem_onchip_mem+0xff80793c>

0081064c <__vfiprintf_internal>:
  81064c:	008020b4 	movhi	r2,130
  810650:	10a48504 	addi	r2,r2,-28140
  810654:	300f883a 	mov	r7,r6
  810658:	280d883a 	mov	r6,r5
  81065c:	200b883a 	mov	r5,r4
  810660:	11000017 	ldw	r4,0(r2)
  810664:	080f1f01 	jmpi	80f1f0 <___vfiprintf_internal_r>

00810668 <__sbprintf>:
  810668:	2880030b 	ldhu	r2,12(r5)
  81066c:	2ac01917 	ldw	r11,100(r5)
  810670:	2a80038b 	ldhu	r10,14(r5)
  810674:	2a400717 	ldw	r9,28(r5)
  810678:	2a000917 	ldw	r8,36(r5)
  81067c:	defee204 	addi	sp,sp,-1144
  810680:	00c10004 	movi	r3,1024
  810684:	dc011a15 	stw	r16,1128(sp)
  810688:	10bfff4c 	andi	r2,r2,65533
  81068c:	2821883a 	mov	r16,r5
  810690:	d8cb883a 	add	r5,sp,r3
  810694:	dc811c15 	stw	r18,1136(sp)
  810698:	dc411b15 	stw	r17,1132(sp)
  81069c:	dfc11d15 	stw	ra,1140(sp)
  8106a0:	2025883a 	mov	r18,r4
  8106a4:	d881030d 	sth	r2,1036(sp)
  8106a8:	dac11915 	stw	r11,1124(sp)
  8106ac:	da81038d 	sth	r10,1038(sp)
  8106b0:	da410715 	stw	r9,1052(sp)
  8106b4:	da010915 	stw	r8,1060(sp)
  8106b8:	dec10015 	stw	sp,1024(sp)
  8106bc:	dec10415 	stw	sp,1040(sp)
  8106c0:	d8c10215 	stw	r3,1032(sp)
  8106c4:	d8c10515 	stw	r3,1044(sp)
  8106c8:	d8010615 	stw	zero,1048(sp)
  8106cc:	080f1f00 	call	80f1f0 <___vfiprintf_internal_r>
  8106d0:	1023883a 	mov	r17,r2
  8106d4:	10000416 	blt	r2,zero,8106e8 <__sbprintf+0x80>
  8106d8:	d9410004 	addi	r5,sp,1024
  8106dc:	9009883a 	mov	r4,r18
  8106e0:	080c3fc0 	call	80c3fc <_fflush_r>
  8106e4:	10000d1e 	bne	r2,zero,81071c <__sbprintf+0xb4>
  8106e8:	d881030b 	ldhu	r2,1036(sp)
  8106ec:	1080100c 	andi	r2,r2,64
  8106f0:	10000326 	beq	r2,zero,810700 <__sbprintf+0x98>
  8106f4:	8080030b 	ldhu	r2,12(r16)
  8106f8:	10801014 	ori	r2,r2,64
  8106fc:	8080030d 	sth	r2,12(r16)
  810700:	8805883a 	mov	r2,r17
  810704:	dfc11d17 	ldw	ra,1140(sp)
  810708:	dc811c17 	ldw	r18,1136(sp)
  81070c:	dc411b17 	ldw	r17,1132(sp)
  810710:	dc011a17 	ldw	r16,1128(sp)
  810714:	dec11e04 	addi	sp,sp,1144
  810718:	f800283a 	ret
  81071c:	047fffc4 	movi	r17,-1
  810720:	003ff106 	br	8106e8 <__alt_mem_onchip_mem+0xff8086e8>

00810724 <__swbuf_r>:
  810724:	defffb04 	addi	sp,sp,-20
  810728:	dcc00315 	stw	r19,12(sp)
  81072c:	dc800215 	stw	r18,8(sp)
  810730:	dc000015 	stw	r16,0(sp)
  810734:	dfc00415 	stw	ra,16(sp)
  810738:	dc400115 	stw	r17,4(sp)
  81073c:	2025883a 	mov	r18,r4
  810740:	2827883a 	mov	r19,r5
  810744:	3021883a 	mov	r16,r6
  810748:	20000226 	beq	r4,zero,810754 <__swbuf_r+0x30>
  81074c:	20800e17 	ldw	r2,56(r4)
  810750:	10004226 	beq	r2,zero,81085c <__swbuf_r+0x138>
  810754:	80800617 	ldw	r2,24(r16)
  810758:	8100030b 	ldhu	r4,12(r16)
  81075c:	80800215 	stw	r2,8(r16)
  810760:	2080020c 	andi	r2,r4,8
  810764:	10003626 	beq	r2,zero,810840 <__swbuf_r+0x11c>
  810768:	80c00417 	ldw	r3,16(r16)
  81076c:	18003426 	beq	r3,zero,810840 <__swbuf_r+0x11c>
  810770:	2088000c 	andi	r2,r4,8192
  810774:	9c403fcc 	andi	r17,r19,255
  810778:	10001a26 	beq	r2,zero,8107e4 <__swbuf_r+0xc0>
  81077c:	80800017 	ldw	r2,0(r16)
  810780:	81000517 	ldw	r4,20(r16)
  810784:	10c7c83a 	sub	r3,r2,r3
  810788:	1900200e 	bge	r3,r4,81080c <__swbuf_r+0xe8>
  81078c:	18c00044 	addi	r3,r3,1
  810790:	81000217 	ldw	r4,8(r16)
  810794:	11400044 	addi	r5,r2,1
  810798:	81400015 	stw	r5,0(r16)
  81079c:	213fffc4 	addi	r4,r4,-1
  8107a0:	81000215 	stw	r4,8(r16)
  8107a4:	14c00005 	stb	r19,0(r2)
  8107a8:	80800517 	ldw	r2,20(r16)
  8107ac:	10c01e26 	beq	r2,r3,810828 <__swbuf_r+0x104>
  8107b0:	8080030b 	ldhu	r2,12(r16)
  8107b4:	1080004c 	andi	r2,r2,1
  8107b8:	10000226 	beq	r2,zero,8107c4 <__swbuf_r+0xa0>
  8107bc:	00800284 	movi	r2,10
  8107c0:	88801926 	beq	r17,r2,810828 <__swbuf_r+0x104>
  8107c4:	8805883a 	mov	r2,r17
  8107c8:	dfc00417 	ldw	ra,16(sp)
  8107cc:	dcc00317 	ldw	r19,12(sp)
  8107d0:	dc800217 	ldw	r18,8(sp)
  8107d4:	dc400117 	ldw	r17,4(sp)
  8107d8:	dc000017 	ldw	r16,0(sp)
  8107dc:	dec00504 	addi	sp,sp,20
  8107e0:	f800283a 	ret
  8107e4:	81401917 	ldw	r5,100(r16)
  8107e8:	00b7ffc4 	movi	r2,-8193
  8107ec:	21080014 	ori	r4,r4,8192
  8107f0:	2884703a 	and	r2,r5,r2
  8107f4:	80801915 	stw	r2,100(r16)
  8107f8:	80800017 	ldw	r2,0(r16)
  8107fc:	8100030d 	sth	r4,12(r16)
  810800:	81000517 	ldw	r4,20(r16)
  810804:	10c7c83a 	sub	r3,r2,r3
  810808:	193fe016 	blt	r3,r4,81078c <__alt_mem_onchip_mem+0xff80878c>
  81080c:	800b883a 	mov	r5,r16
  810810:	9009883a 	mov	r4,r18
  810814:	080c3fc0 	call	80c3fc <_fflush_r>
  810818:	1000071e 	bne	r2,zero,810838 <__swbuf_r+0x114>
  81081c:	80800017 	ldw	r2,0(r16)
  810820:	00c00044 	movi	r3,1
  810824:	003fda06 	br	810790 <__alt_mem_onchip_mem+0xff808790>
  810828:	800b883a 	mov	r5,r16
  81082c:	9009883a 	mov	r4,r18
  810830:	080c3fc0 	call	80c3fc <_fflush_r>
  810834:	103fe326 	beq	r2,zero,8107c4 <__alt_mem_onchip_mem+0xff8087c4>
  810838:	00bfffc4 	movi	r2,-1
  81083c:	003fe206 	br	8107c8 <__alt_mem_onchip_mem+0xff8087c8>
  810840:	800b883a 	mov	r5,r16
  810844:	9009883a 	mov	r4,r18
  810848:	080a7b00 	call	80a7b0 <__swsetup_r>
  81084c:	103ffa1e 	bne	r2,zero,810838 <__alt_mem_onchip_mem+0xff808838>
  810850:	8100030b 	ldhu	r4,12(r16)
  810854:	80c00417 	ldw	r3,16(r16)
  810858:	003fc506 	br	810770 <__alt_mem_onchip_mem+0xff808770>
  81085c:	080c7d80 	call	80c7d8 <__sinit>
  810860:	003fbc06 	br	810754 <__alt_mem_onchip_mem+0xff808754>

00810864 <__swbuf>:
  810864:	008020b4 	movhi	r2,130
  810868:	10a48504 	addi	r2,r2,-28140
  81086c:	280d883a 	mov	r6,r5
  810870:	200b883a 	mov	r5,r4
  810874:	11000017 	ldw	r4,0(r2)
  810878:	08107241 	jmpi	810724 <__swbuf_r>

0081087c <_calloc_r>:
  81087c:	298b383a 	mul	r5,r5,r6
  810880:	defffe04 	addi	sp,sp,-8
  810884:	dfc00115 	stw	ra,4(sp)
  810888:	dc000015 	stw	r16,0(sp)
  81088c:	08075e00 	call	8075e0 <_malloc_r>
  810890:	10002926 	beq	r2,zero,810938 <_calloc_r+0xbc>
  810894:	11bfff17 	ldw	r6,-4(r2)
  810898:	1021883a 	mov	r16,r2
  81089c:	00bfff04 	movi	r2,-4
  8108a0:	308c703a 	and	r6,r6,r2
  8108a4:	00c00904 	movi	r3,36
  8108a8:	308d883a 	add	r6,r6,r2
  8108ac:	19801636 	bltu	r3,r6,810908 <_calloc_r+0x8c>
  8108b0:	008004c4 	movi	r2,19
  8108b4:	11800b2e 	bgeu	r2,r6,8108e4 <_calloc_r+0x68>
  8108b8:	80000015 	stw	zero,0(r16)
  8108bc:	80000115 	stw	zero,4(r16)
  8108c0:	008006c4 	movi	r2,27
  8108c4:	11801a2e 	bgeu	r2,r6,810930 <_calloc_r+0xb4>
  8108c8:	80000215 	stw	zero,8(r16)
  8108cc:	80000315 	stw	zero,12(r16)
  8108d0:	30c0151e 	bne	r6,r3,810928 <_calloc_r+0xac>
  8108d4:	80000415 	stw	zero,16(r16)
  8108d8:	80800604 	addi	r2,r16,24
  8108dc:	80000515 	stw	zero,20(r16)
  8108e0:	00000106 	br	8108e8 <_calloc_r+0x6c>
  8108e4:	8005883a 	mov	r2,r16
  8108e8:	10000015 	stw	zero,0(r2)
  8108ec:	10000115 	stw	zero,4(r2)
  8108f0:	10000215 	stw	zero,8(r2)
  8108f4:	8005883a 	mov	r2,r16
  8108f8:	dfc00117 	ldw	ra,4(sp)
  8108fc:	dc000017 	ldw	r16,0(sp)
  810900:	dec00204 	addi	sp,sp,8
  810904:	f800283a 	ret
  810908:	000b883a 	mov	r5,zero
  81090c:	8009883a 	mov	r4,r16
  810910:	0807dec0 	call	807dec <memset>
  810914:	8005883a 	mov	r2,r16
  810918:	dfc00117 	ldw	ra,4(sp)
  81091c:	dc000017 	ldw	r16,0(sp)
  810920:	dec00204 	addi	sp,sp,8
  810924:	f800283a 	ret
  810928:	80800404 	addi	r2,r16,16
  81092c:	003fee06 	br	8108e8 <__alt_mem_onchip_mem+0xff8088e8>
  810930:	80800204 	addi	r2,r16,8
  810934:	003fec06 	br	8108e8 <__alt_mem_onchip_mem+0xff8088e8>
  810938:	0005883a 	mov	r2,zero
  81093c:	003fee06 	br	8108f8 <__alt_mem_onchip_mem+0xff8088f8>

00810940 <_fclose_r>:
  810940:	28003926 	beq	r5,zero,810a28 <_fclose_r+0xe8>
  810944:	defffc04 	addi	sp,sp,-16
  810948:	dc400115 	stw	r17,4(sp)
  81094c:	dc000015 	stw	r16,0(sp)
  810950:	dfc00315 	stw	ra,12(sp)
  810954:	dc800215 	stw	r18,8(sp)
  810958:	2023883a 	mov	r17,r4
  81095c:	2821883a 	mov	r16,r5
  810960:	20000226 	beq	r4,zero,81096c <_fclose_r+0x2c>
  810964:	20800e17 	ldw	r2,56(r4)
  810968:	10002726 	beq	r2,zero,810a08 <_fclose_r+0xc8>
  81096c:	8080030f 	ldh	r2,12(r16)
  810970:	1000071e 	bne	r2,zero,810990 <_fclose_r+0x50>
  810974:	0005883a 	mov	r2,zero
  810978:	dfc00317 	ldw	ra,12(sp)
  81097c:	dc800217 	ldw	r18,8(sp)
  810980:	dc400117 	ldw	r17,4(sp)
  810984:	dc000017 	ldw	r16,0(sp)
  810988:	dec00404 	addi	sp,sp,16
  81098c:	f800283a 	ret
  810990:	800b883a 	mov	r5,r16
  810994:	8809883a 	mov	r4,r17
  810998:	080c1e00 	call	80c1e0 <__sflush_r>
  81099c:	1025883a 	mov	r18,r2
  8109a0:	80800b17 	ldw	r2,44(r16)
  8109a4:	10000426 	beq	r2,zero,8109b8 <_fclose_r+0x78>
  8109a8:	81400717 	ldw	r5,28(r16)
  8109ac:	8809883a 	mov	r4,r17
  8109b0:	103ee83a 	callr	r2
  8109b4:	10001616 	blt	r2,zero,810a10 <_fclose_r+0xd0>
  8109b8:	8080030b 	ldhu	r2,12(r16)
  8109bc:	1080200c 	andi	r2,r2,128
  8109c0:	1000151e 	bne	r2,zero,810a18 <_fclose_r+0xd8>
  8109c4:	81400c17 	ldw	r5,48(r16)
  8109c8:	28000526 	beq	r5,zero,8109e0 <_fclose_r+0xa0>
  8109cc:	80801004 	addi	r2,r16,64
  8109d0:	28800226 	beq	r5,r2,8109dc <_fclose_r+0x9c>
  8109d4:	8809883a 	mov	r4,r17
  8109d8:	080c9f80 	call	80c9f8 <_free_r>
  8109dc:	80000c15 	stw	zero,48(r16)
  8109e0:	81401117 	ldw	r5,68(r16)
  8109e4:	28000326 	beq	r5,zero,8109f4 <_fclose_r+0xb4>
  8109e8:	8809883a 	mov	r4,r17
  8109ec:	080c9f80 	call	80c9f8 <_free_r>
  8109f0:	80001115 	stw	zero,68(r16)
  8109f4:	080c7e80 	call	80c7e8 <__sfp_lock_acquire>
  8109f8:	8000030d 	sth	zero,12(r16)
  8109fc:	080c7ec0 	call	80c7ec <__sfp_lock_release>
  810a00:	9005883a 	mov	r2,r18
  810a04:	003fdc06 	br	810978 <__alt_mem_onchip_mem+0xff808978>
  810a08:	080c7d80 	call	80c7d8 <__sinit>
  810a0c:	003fd706 	br	81096c <__alt_mem_onchip_mem+0xff80896c>
  810a10:	04bfffc4 	movi	r18,-1
  810a14:	003fe806 	br	8109b8 <__alt_mem_onchip_mem+0xff8089b8>
  810a18:	81400417 	ldw	r5,16(r16)
  810a1c:	8809883a 	mov	r4,r17
  810a20:	080c9f80 	call	80c9f8 <_free_r>
  810a24:	003fe706 	br	8109c4 <__alt_mem_onchip_mem+0xff8089c4>
  810a28:	0005883a 	mov	r2,zero
  810a2c:	f800283a 	ret

00810a30 <fclose>:
  810a30:	008020b4 	movhi	r2,130
  810a34:	10a48504 	addi	r2,r2,-28140
  810a38:	200b883a 	mov	r5,r4
  810a3c:	11000017 	ldw	r4,0(r2)
  810a40:	08109401 	jmpi	810940 <_fclose_r>

00810a44 <__fputwc>:
  810a44:	defff804 	addi	sp,sp,-32
  810a48:	dcc00415 	stw	r19,16(sp)
  810a4c:	dc800315 	stw	r18,12(sp)
  810a50:	dc000115 	stw	r16,4(sp)
  810a54:	dfc00715 	stw	ra,28(sp)
  810a58:	dd400615 	stw	r21,24(sp)
  810a5c:	dd000515 	stw	r20,20(sp)
  810a60:	dc400215 	stw	r17,8(sp)
  810a64:	2027883a 	mov	r19,r4
  810a68:	2825883a 	mov	r18,r5
  810a6c:	3021883a 	mov	r16,r6
  810a70:	080d4280 	call	80d428 <__locale_mb_cur_max>
  810a74:	00c00044 	movi	r3,1
  810a78:	10c03e26 	beq	r2,r3,810b74 <__fputwc+0x130>
  810a7c:	81c01704 	addi	r7,r16,92
  810a80:	900d883a 	mov	r6,r18
  810a84:	d80b883a 	mov	r5,sp
  810a88:	9809883a 	mov	r4,r19
  810a8c:	0810c4c0 	call	810c4c <_wcrtomb_r>
  810a90:	1029883a 	mov	r20,r2
  810a94:	00bfffc4 	movi	r2,-1
  810a98:	a0802026 	beq	r20,r2,810b1c <__fputwc+0xd8>
  810a9c:	d9400003 	ldbu	r5,0(sp)
  810aa0:	a0001c26 	beq	r20,zero,810b14 <__fputwc+0xd0>
  810aa4:	0023883a 	mov	r17,zero
  810aa8:	05400284 	movi	r21,10
  810aac:	00000906 	br	810ad4 <__fputwc+0x90>
  810ab0:	80800017 	ldw	r2,0(r16)
  810ab4:	11400005 	stb	r5,0(r2)
  810ab8:	80c00017 	ldw	r3,0(r16)
  810abc:	18c00044 	addi	r3,r3,1
  810ac0:	80c00015 	stw	r3,0(r16)
  810ac4:	8c400044 	addi	r17,r17,1
  810ac8:	dc45883a 	add	r2,sp,r17
  810acc:	8d00112e 	bgeu	r17,r20,810b14 <__fputwc+0xd0>
  810ad0:	11400003 	ldbu	r5,0(r2)
  810ad4:	80c00217 	ldw	r3,8(r16)
  810ad8:	18ffffc4 	addi	r3,r3,-1
  810adc:	80c00215 	stw	r3,8(r16)
  810ae0:	183ff30e 	bge	r3,zero,810ab0 <__alt_mem_onchip_mem+0xff808ab0>
  810ae4:	80800617 	ldw	r2,24(r16)
  810ae8:	18801916 	blt	r3,r2,810b50 <__fputwc+0x10c>
  810aec:	80800017 	ldw	r2,0(r16)
  810af0:	11400005 	stb	r5,0(r2)
  810af4:	80800017 	ldw	r2,0(r16)
  810af8:	10c00003 	ldbu	r3,0(r2)
  810afc:	10800044 	addi	r2,r2,1
  810b00:	1d402326 	beq	r3,r21,810b90 <__fputwc+0x14c>
  810b04:	80800015 	stw	r2,0(r16)
  810b08:	8c400044 	addi	r17,r17,1
  810b0c:	dc45883a 	add	r2,sp,r17
  810b10:	8d3fef36 	bltu	r17,r20,810ad0 <__alt_mem_onchip_mem+0xff808ad0>
  810b14:	9005883a 	mov	r2,r18
  810b18:	00000406 	br	810b2c <__fputwc+0xe8>
  810b1c:	80c0030b 	ldhu	r3,12(r16)
  810b20:	a005883a 	mov	r2,r20
  810b24:	18c01014 	ori	r3,r3,64
  810b28:	80c0030d 	sth	r3,12(r16)
  810b2c:	dfc00717 	ldw	ra,28(sp)
  810b30:	dd400617 	ldw	r21,24(sp)
  810b34:	dd000517 	ldw	r20,20(sp)
  810b38:	dcc00417 	ldw	r19,16(sp)
  810b3c:	dc800317 	ldw	r18,12(sp)
  810b40:	dc400217 	ldw	r17,8(sp)
  810b44:	dc000117 	ldw	r16,4(sp)
  810b48:	dec00804 	addi	sp,sp,32
  810b4c:	f800283a 	ret
  810b50:	800d883a 	mov	r6,r16
  810b54:	29403fcc 	andi	r5,r5,255
  810b58:	9809883a 	mov	r4,r19
  810b5c:	08107240 	call	810724 <__swbuf_r>
  810b60:	10bfffe0 	cmpeqi	r2,r2,-1
  810b64:	10803fcc 	andi	r2,r2,255
  810b68:	103fd626 	beq	r2,zero,810ac4 <__alt_mem_onchip_mem+0xff808ac4>
  810b6c:	00bfffc4 	movi	r2,-1
  810b70:	003fee06 	br	810b2c <__alt_mem_onchip_mem+0xff808b2c>
  810b74:	90ffffc4 	addi	r3,r18,-1
  810b78:	01003f84 	movi	r4,254
  810b7c:	20ffbf36 	bltu	r4,r3,810a7c <__alt_mem_onchip_mem+0xff808a7c>
  810b80:	900b883a 	mov	r5,r18
  810b84:	dc800005 	stb	r18,0(sp)
  810b88:	1029883a 	mov	r20,r2
  810b8c:	003fc506 	br	810aa4 <__alt_mem_onchip_mem+0xff808aa4>
  810b90:	800d883a 	mov	r6,r16
  810b94:	a80b883a 	mov	r5,r21
  810b98:	9809883a 	mov	r4,r19
  810b9c:	08107240 	call	810724 <__swbuf_r>
  810ba0:	10bfffe0 	cmpeqi	r2,r2,-1
  810ba4:	003fef06 	br	810b64 <__alt_mem_onchip_mem+0xff808b64>

00810ba8 <_fputwc_r>:
  810ba8:	3080030b 	ldhu	r2,12(r6)
  810bac:	10c8000c 	andi	r3,r2,8192
  810bb0:	1800051e 	bne	r3,zero,810bc8 <_fputwc_r+0x20>
  810bb4:	30c01917 	ldw	r3,100(r6)
  810bb8:	10880014 	ori	r2,r2,8192
  810bbc:	3080030d 	sth	r2,12(r6)
  810bc0:	18880014 	ori	r2,r3,8192
  810bc4:	30801915 	stw	r2,100(r6)
  810bc8:	0810a441 	jmpi	810a44 <__fputwc>

00810bcc <fputwc>:
  810bcc:	008020b4 	movhi	r2,130
  810bd0:	defffc04 	addi	sp,sp,-16
  810bd4:	10a48504 	addi	r2,r2,-28140
  810bd8:	dc000115 	stw	r16,4(sp)
  810bdc:	14000017 	ldw	r16,0(r2)
  810be0:	dc400215 	stw	r17,8(sp)
  810be4:	dfc00315 	stw	ra,12(sp)
  810be8:	2023883a 	mov	r17,r4
  810bec:	80000226 	beq	r16,zero,810bf8 <fputwc+0x2c>
  810bf0:	80800e17 	ldw	r2,56(r16)
  810bf4:	10001026 	beq	r2,zero,810c38 <fputwc+0x6c>
  810bf8:	2880030b 	ldhu	r2,12(r5)
  810bfc:	10c8000c 	andi	r3,r2,8192
  810c00:	1800051e 	bne	r3,zero,810c18 <fputwc+0x4c>
  810c04:	28c01917 	ldw	r3,100(r5)
  810c08:	10880014 	ori	r2,r2,8192
  810c0c:	2880030d 	sth	r2,12(r5)
  810c10:	18880014 	ori	r2,r3,8192
  810c14:	28801915 	stw	r2,100(r5)
  810c18:	280d883a 	mov	r6,r5
  810c1c:	8009883a 	mov	r4,r16
  810c20:	880b883a 	mov	r5,r17
  810c24:	dfc00317 	ldw	ra,12(sp)
  810c28:	dc400217 	ldw	r17,8(sp)
  810c2c:	dc000117 	ldw	r16,4(sp)
  810c30:	dec00404 	addi	sp,sp,16
  810c34:	0810a441 	jmpi	810a44 <__fputwc>
  810c38:	8009883a 	mov	r4,r16
  810c3c:	d9400015 	stw	r5,0(sp)
  810c40:	080c7d80 	call	80c7d8 <__sinit>
  810c44:	d9400017 	ldw	r5,0(sp)
  810c48:	003feb06 	br	810bf8 <__alt_mem_onchip_mem+0xff808bf8>

00810c4c <_wcrtomb_r>:
  810c4c:	defff604 	addi	sp,sp,-40
  810c50:	008020b4 	movhi	r2,130
  810c54:	dc800815 	stw	r18,32(sp)
  810c58:	dc400715 	stw	r17,28(sp)
  810c5c:	dc000615 	stw	r16,24(sp)
  810c60:	10a48904 	addi	r2,r2,-28124
  810c64:	dfc00915 	stw	ra,36(sp)
  810c68:	2021883a 	mov	r16,r4
  810c6c:	3823883a 	mov	r17,r7
  810c70:	14800017 	ldw	r18,0(r2)
  810c74:	28001426 	beq	r5,zero,810cc8 <_wcrtomb_r+0x7c>
  810c78:	d9400415 	stw	r5,16(sp)
  810c7c:	d9800515 	stw	r6,20(sp)
  810c80:	080d41c0 	call	80d41c <__locale_charset>
  810c84:	d9800517 	ldw	r6,20(sp)
  810c88:	d9400417 	ldw	r5,16(sp)
  810c8c:	100f883a 	mov	r7,r2
  810c90:	dc400015 	stw	r17,0(sp)
  810c94:	8009883a 	mov	r4,r16
  810c98:	903ee83a 	callr	r18
  810c9c:	00ffffc4 	movi	r3,-1
  810ca0:	10c0031e 	bne	r2,r3,810cb0 <_wcrtomb_r+0x64>
  810ca4:	88000015 	stw	zero,0(r17)
  810ca8:	00c02284 	movi	r3,138
  810cac:	80c00015 	stw	r3,0(r16)
  810cb0:	dfc00917 	ldw	ra,36(sp)
  810cb4:	dc800817 	ldw	r18,32(sp)
  810cb8:	dc400717 	ldw	r17,28(sp)
  810cbc:	dc000617 	ldw	r16,24(sp)
  810cc0:	dec00a04 	addi	sp,sp,40
  810cc4:	f800283a 	ret
  810cc8:	080d41c0 	call	80d41c <__locale_charset>
  810ccc:	100f883a 	mov	r7,r2
  810cd0:	dc400015 	stw	r17,0(sp)
  810cd4:	000d883a 	mov	r6,zero
  810cd8:	d9400104 	addi	r5,sp,4
  810cdc:	8009883a 	mov	r4,r16
  810ce0:	903ee83a 	callr	r18
  810ce4:	003fed06 	br	810c9c <__alt_mem_onchip_mem+0xff808c9c>

00810ce8 <wcrtomb>:
  810ce8:	defff604 	addi	sp,sp,-40
  810cec:	008020b4 	movhi	r2,130
  810cf0:	dc800615 	stw	r18,24(sp)
  810cf4:	dc400515 	stw	r17,20(sp)
  810cf8:	10a48504 	addi	r2,r2,-28140
  810cfc:	dfc00915 	stw	ra,36(sp)
  810d00:	dd000815 	stw	r20,32(sp)
  810d04:	dcc00715 	stw	r19,28(sp)
  810d08:	dc000415 	stw	r16,16(sp)
  810d0c:	3025883a 	mov	r18,r6
  810d10:	14400017 	ldw	r17,0(r2)
  810d14:	20001926 	beq	r4,zero,810d7c <wcrtomb+0x94>
  810d18:	008020b4 	movhi	r2,130
  810d1c:	10a48904 	addi	r2,r2,-28124
  810d20:	15000017 	ldw	r20,0(r2)
  810d24:	2021883a 	mov	r16,r4
  810d28:	2827883a 	mov	r19,r5
  810d2c:	080d41c0 	call	80d41c <__locale_charset>
  810d30:	100f883a 	mov	r7,r2
  810d34:	dc800015 	stw	r18,0(sp)
  810d38:	980d883a 	mov	r6,r19
  810d3c:	800b883a 	mov	r5,r16
  810d40:	8809883a 	mov	r4,r17
  810d44:	a03ee83a 	callr	r20
  810d48:	00ffffc4 	movi	r3,-1
  810d4c:	10c0031e 	bne	r2,r3,810d5c <wcrtomb+0x74>
  810d50:	90000015 	stw	zero,0(r18)
  810d54:	00c02284 	movi	r3,138
  810d58:	88c00015 	stw	r3,0(r17)
  810d5c:	dfc00917 	ldw	ra,36(sp)
  810d60:	dd000817 	ldw	r20,32(sp)
  810d64:	dcc00717 	ldw	r19,28(sp)
  810d68:	dc800617 	ldw	r18,24(sp)
  810d6c:	dc400517 	ldw	r17,20(sp)
  810d70:	dc000417 	ldw	r16,16(sp)
  810d74:	dec00a04 	addi	sp,sp,40
  810d78:	f800283a 	ret
  810d7c:	008020b4 	movhi	r2,130
  810d80:	10a48904 	addi	r2,r2,-28124
  810d84:	14000017 	ldw	r16,0(r2)
  810d88:	080d41c0 	call	80d41c <__locale_charset>
  810d8c:	100f883a 	mov	r7,r2
  810d90:	dc800015 	stw	r18,0(sp)
  810d94:	000d883a 	mov	r6,zero
  810d98:	d9400104 	addi	r5,sp,4
  810d9c:	8809883a 	mov	r4,r17
  810da0:	803ee83a 	callr	r16
  810da4:	003fe806 	br	810d48 <__alt_mem_onchip_mem+0xff808d48>

00810da8 <__ascii_wctomb>:
  810da8:	28000526 	beq	r5,zero,810dc0 <__ascii_wctomb+0x18>
  810dac:	00803fc4 	movi	r2,255
  810db0:	11800536 	bltu	r2,r6,810dc8 <__ascii_wctomb+0x20>
  810db4:	29800005 	stb	r6,0(r5)
  810db8:	00800044 	movi	r2,1
  810dbc:	f800283a 	ret
  810dc0:	0005883a 	mov	r2,zero
  810dc4:	f800283a 	ret
  810dc8:	00802284 	movi	r2,138
  810dcc:	20800015 	stw	r2,0(r4)
  810dd0:	00bfffc4 	movi	r2,-1
  810dd4:	f800283a 	ret

00810dd8 <_wctomb_r>:
  810dd8:	008020b4 	movhi	r2,130
  810ddc:	defff904 	addi	sp,sp,-28
  810de0:	10a48904 	addi	r2,r2,-28124
  810de4:	dfc00615 	stw	ra,24(sp)
  810de8:	dc400515 	stw	r17,20(sp)
  810dec:	dc000415 	stw	r16,16(sp)
  810df0:	3823883a 	mov	r17,r7
  810df4:	14000017 	ldw	r16,0(r2)
  810df8:	d9000115 	stw	r4,4(sp)
  810dfc:	d9400215 	stw	r5,8(sp)
  810e00:	d9800315 	stw	r6,12(sp)
  810e04:	080d41c0 	call	80d41c <__locale_charset>
  810e08:	d9800317 	ldw	r6,12(sp)
  810e0c:	d9400217 	ldw	r5,8(sp)
  810e10:	d9000117 	ldw	r4,4(sp)
  810e14:	100f883a 	mov	r7,r2
  810e18:	dc400015 	stw	r17,0(sp)
  810e1c:	803ee83a 	callr	r16
  810e20:	dfc00617 	ldw	ra,24(sp)
  810e24:	dc400517 	ldw	r17,20(sp)
  810e28:	dc000417 	ldw	r16,16(sp)
  810e2c:	dec00704 	addi	sp,sp,28
  810e30:	f800283a 	ret

00810e34 <__udivdi3>:
  810e34:	defff504 	addi	sp,sp,-44
  810e38:	dcc00415 	stw	r19,16(sp)
  810e3c:	dc000115 	stw	r16,4(sp)
  810e40:	dfc00a15 	stw	ra,40(sp)
  810e44:	df000915 	stw	fp,36(sp)
  810e48:	ddc00815 	stw	r23,32(sp)
  810e4c:	dd800715 	stw	r22,28(sp)
  810e50:	dd400615 	stw	r21,24(sp)
  810e54:	dd000515 	stw	r20,20(sp)
  810e58:	dc800315 	stw	r18,12(sp)
  810e5c:	dc400215 	stw	r17,8(sp)
  810e60:	2027883a 	mov	r19,r4
  810e64:	2821883a 	mov	r16,r5
  810e68:	3800411e 	bne	r7,zero,810f70 <__udivdi3+0x13c>
  810e6c:	3023883a 	mov	r17,r6
  810e70:	2025883a 	mov	r18,r4
  810e74:	2980522e 	bgeu	r5,r6,810fc0 <__udivdi3+0x18c>
  810e78:	00bfffd4 	movui	r2,65535
  810e7c:	282d883a 	mov	r22,r5
  810e80:	1180a836 	bltu	r2,r6,811124 <__udivdi3+0x2f0>
  810e84:	00803fc4 	movi	r2,255
  810e88:	1185803a 	cmpltu	r2,r2,r6
  810e8c:	100490fa 	slli	r2,r2,3
  810e90:	3086d83a 	srl	r3,r6,r2
  810e94:	01002074 	movhi	r4,129
  810e98:	211bfbc4 	addi	r4,r4,28655
  810e9c:	20c7883a 	add	r3,r4,r3
  810ea0:	18c00003 	ldbu	r3,0(r3)
  810ea4:	1885883a 	add	r2,r3,r2
  810ea8:	00c00804 	movi	r3,32
  810eac:	1887c83a 	sub	r3,r3,r2
  810eb0:	18000526 	beq	r3,zero,810ec8 <__udivdi3+0x94>
  810eb4:	80e0983a 	sll	r16,r16,r3
  810eb8:	9884d83a 	srl	r2,r19,r2
  810ebc:	30e2983a 	sll	r17,r6,r3
  810ec0:	98e4983a 	sll	r18,r19,r3
  810ec4:	142cb03a 	or	r22,r2,r16
  810ec8:	882ad43a 	srli	r21,r17,16
  810ecc:	b009883a 	mov	r4,r22
  810ed0:	8d3fffcc 	andi	r20,r17,65535
  810ed4:	a80b883a 	mov	r5,r21
  810ed8:	0811a400 	call	811a40 <__umodsi3>
  810edc:	b009883a 	mov	r4,r22
  810ee0:	a80b883a 	mov	r5,r21
  810ee4:	1027883a 	mov	r19,r2
  810ee8:	08119dc0 	call	8119dc <__udivsi3>
  810eec:	102d883a 	mov	r22,r2
  810ef0:	9826943a 	slli	r19,r19,16
  810ef4:	9004d43a 	srli	r2,r18,16
  810ef8:	a5a1383a 	mul	r16,r20,r22
  810efc:	14c4b03a 	or	r2,r2,r19
  810f00:	1400052e 	bgeu	r2,r16,810f18 <__udivdi3+0xe4>
  810f04:	1445883a 	add	r2,r2,r17
  810f08:	b0ffffc4 	addi	r3,r22,-1
  810f0c:	14400136 	bltu	r2,r17,810f14 <__udivdi3+0xe0>
  810f10:	14012336 	bltu	r2,r16,8113a0 <__udivdi3+0x56c>
  810f14:	182d883a 	mov	r22,r3
  810f18:	1421c83a 	sub	r16,r2,r16
  810f1c:	a80b883a 	mov	r5,r21
  810f20:	8009883a 	mov	r4,r16
  810f24:	0811a400 	call	811a40 <__umodsi3>
  810f28:	1027883a 	mov	r19,r2
  810f2c:	a80b883a 	mov	r5,r21
  810f30:	8009883a 	mov	r4,r16
  810f34:	08119dc0 	call	8119dc <__udivsi3>
  810f38:	9826943a 	slli	r19,r19,16
  810f3c:	a0a9383a 	mul	r20,r20,r2
  810f40:	94bfffcc 	andi	r18,r18,65535
  810f44:	94e4b03a 	or	r18,r18,r19
  810f48:	9500052e 	bgeu	r18,r20,810f60 <__udivdi3+0x12c>
  810f4c:	8ca5883a 	add	r18,r17,r18
  810f50:	10ffffc4 	addi	r3,r2,-1
  810f54:	9440f136 	bltu	r18,r17,81131c <__udivdi3+0x4e8>
  810f58:	9500f02e 	bgeu	r18,r20,81131c <__udivdi3+0x4e8>
  810f5c:	10bfff84 	addi	r2,r2,-2
  810f60:	b00c943a 	slli	r6,r22,16
  810f64:	0007883a 	mov	r3,zero
  810f68:	3084b03a 	or	r2,r6,r2
  810f6c:	00005906 	br	8110d4 <__udivdi3+0x2a0>
  810f70:	29c05636 	bltu	r5,r7,8110cc <__udivdi3+0x298>
  810f74:	00bfffd4 	movui	r2,65535
  810f78:	11c0622e 	bgeu	r2,r7,811104 <__udivdi3+0x2d0>
  810f7c:	00804034 	movhi	r2,256
  810f80:	10bfffc4 	addi	r2,r2,-1
  810f84:	11c0ee36 	bltu	r2,r7,811340 <__udivdi3+0x50c>
  810f88:	00800404 	movi	r2,16
  810f8c:	3886d83a 	srl	r3,r7,r2
  810f90:	01002074 	movhi	r4,129
  810f94:	211bfbc4 	addi	r4,r4,28655
  810f98:	20c7883a 	add	r3,r4,r3
  810f9c:	18c00003 	ldbu	r3,0(r3)
  810fa0:	05400804 	movi	r21,32
  810fa4:	1885883a 	add	r2,r3,r2
  810fa8:	a8abc83a 	sub	r21,r21,r2
  810fac:	a800621e 	bne	r21,zero,811138 <__udivdi3+0x304>
  810fb0:	3c00e936 	bltu	r7,r16,811358 <__udivdi3+0x524>
  810fb4:	9985403a 	cmpgeu	r2,r19,r6
  810fb8:	0007883a 	mov	r3,zero
  810fbc:	00004506 	br	8110d4 <__udivdi3+0x2a0>
  810fc0:	3000041e 	bne	r6,zero,810fd4 <__udivdi3+0x1a0>
  810fc4:	000b883a 	mov	r5,zero
  810fc8:	01000044 	movi	r4,1
  810fcc:	08119dc0 	call	8119dc <__udivsi3>
  810fd0:	1023883a 	mov	r17,r2
  810fd4:	00bfffd4 	movui	r2,65535
  810fd8:	14404e2e 	bgeu	r2,r17,811114 <__udivdi3+0x2e0>
  810fdc:	00804034 	movhi	r2,256
  810fe0:	10bfffc4 	addi	r2,r2,-1
  810fe4:	1440d836 	bltu	r2,r17,811348 <__udivdi3+0x514>
  810fe8:	00800404 	movi	r2,16
  810fec:	8886d83a 	srl	r3,r17,r2
  810ff0:	01002074 	movhi	r4,129
  810ff4:	211bfbc4 	addi	r4,r4,28655
  810ff8:	20c7883a 	add	r3,r4,r3
  810ffc:	18c00003 	ldbu	r3,0(r3)
  811000:	1885883a 	add	r2,r3,r2
  811004:	00c00804 	movi	r3,32
  811008:	1887c83a 	sub	r3,r3,r2
  81100c:	18008f1e 	bne	r3,zero,81124c <__udivdi3+0x418>
  811010:	882ad43a 	srli	r21,r17,16
  811014:	8461c83a 	sub	r16,r16,r17
  811018:	8d3fffcc 	andi	r20,r17,65535
  81101c:	00c00044 	movi	r3,1
  811020:	8009883a 	mov	r4,r16
  811024:	a80b883a 	mov	r5,r21
  811028:	d8c00015 	stw	r3,0(sp)
  81102c:	0811a400 	call	811a40 <__umodsi3>
  811030:	8009883a 	mov	r4,r16
  811034:	a80b883a 	mov	r5,r21
  811038:	1027883a 	mov	r19,r2
  81103c:	08119dc0 	call	8119dc <__udivsi3>
  811040:	9826943a 	slli	r19,r19,16
  811044:	9008d43a 	srli	r4,r18,16
  811048:	1521383a 	mul	r16,r2,r20
  81104c:	102d883a 	mov	r22,r2
  811050:	24c8b03a 	or	r4,r4,r19
  811054:	d8c00017 	ldw	r3,0(sp)
  811058:	2400052e 	bgeu	r4,r16,811070 <__udivdi3+0x23c>
  81105c:	2449883a 	add	r4,r4,r17
  811060:	b0bfffc4 	addi	r2,r22,-1
  811064:	24400136 	bltu	r4,r17,81106c <__udivdi3+0x238>
  811068:	2400ca36 	bltu	r4,r16,811394 <__udivdi3+0x560>
  81106c:	102d883a 	mov	r22,r2
  811070:	2421c83a 	sub	r16,r4,r16
  811074:	a80b883a 	mov	r5,r21
  811078:	8009883a 	mov	r4,r16
  81107c:	d8c00015 	stw	r3,0(sp)
  811080:	0811a400 	call	811a40 <__umodsi3>
  811084:	1027883a 	mov	r19,r2
  811088:	a80b883a 	mov	r5,r21
  81108c:	8009883a 	mov	r4,r16
  811090:	08119dc0 	call	8119dc <__udivsi3>
  811094:	9826943a 	slli	r19,r19,16
  811098:	1529383a 	mul	r20,r2,r20
  81109c:	94bfffcc 	andi	r18,r18,65535
  8110a0:	94e4b03a 	or	r18,r18,r19
  8110a4:	d8c00017 	ldw	r3,0(sp)
  8110a8:	9500052e 	bgeu	r18,r20,8110c0 <__udivdi3+0x28c>
  8110ac:	8ca5883a 	add	r18,r17,r18
  8110b0:	113fffc4 	addi	r4,r2,-1
  8110b4:	94409736 	bltu	r18,r17,811314 <__udivdi3+0x4e0>
  8110b8:	9500962e 	bgeu	r18,r20,811314 <__udivdi3+0x4e0>
  8110bc:	10bfff84 	addi	r2,r2,-2
  8110c0:	b00c943a 	slli	r6,r22,16
  8110c4:	3084b03a 	or	r2,r6,r2
  8110c8:	00000206 	br	8110d4 <__udivdi3+0x2a0>
  8110cc:	0007883a 	mov	r3,zero
  8110d0:	0005883a 	mov	r2,zero
  8110d4:	dfc00a17 	ldw	ra,40(sp)
  8110d8:	df000917 	ldw	fp,36(sp)
  8110dc:	ddc00817 	ldw	r23,32(sp)
  8110e0:	dd800717 	ldw	r22,28(sp)
  8110e4:	dd400617 	ldw	r21,24(sp)
  8110e8:	dd000517 	ldw	r20,20(sp)
  8110ec:	dcc00417 	ldw	r19,16(sp)
  8110f0:	dc800317 	ldw	r18,12(sp)
  8110f4:	dc400217 	ldw	r17,8(sp)
  8110f8:	dc000117 	ldw	r16,4(sp)
  8110fc:	dec00b04 	addi	sp,sp,44
  811100:	f800283a 	ret
  811104:	00803fc4 	movi	r2,255
  811108:	11c5803a 	cmpltu	r2,r2,r7
  81110c:	100490fa 	slli	r2,r2,3
  811110:	003f9e06 	br	810f8c <__alt_mem_onchip_mem+0xff808f8c>
  811114:	00803fc4 	movi	r2,255
  811118:	1445803a 	cmpltu	r2,r2,r17
  81111c:	100490fa 	slli	r2,r2,3
  811120:	003fb206 	br	810fec <__alt_mem_onchip_mem+0xff808fec>
  811124:	00804034 	movhi	r2,256
  811128:	10bfffc4 	addi	r2,r2,-1
  81112c:	11808836 	bltu	r2,r6,811350 <__udivdi3+0x51c>
  811130:	00800404 	movi	r2,16
  811134:	003f5606 	br	810e90 <__alt_mem_onchip_mem+0xff808e90>
  811138:	30aed83a 	srl	r23,r6,r2
  81113c:	3d4e983a 	sll	r7,r7,r21
  811140:	80acd83a 	srl	r22,r16,r2
  811144:	9884d83a 	srl	r2,r19,r2
  811148:	3deeb03a 	or	r23,r7,r23
  81114c:	b824d43a 	srli	r18,r23,16
  811150:	8560983a 	sll	r16,r16,r21
  811154:	b009883a 	mov	r4,r22
  811158:	900b883a 	mov	r5,r18
  81115c:	3568983a 	sll	r20,r6,r21
  811160:	1420b03a 	or	r16,r2,r16
  811164:	0811a400 	call	811a40 <__umodsi3>
  811168:	b009883a 	mov	r4,r22
  81116c:	900b883a 	mov	r5,r18
  811170:	1023883a 	mov	r17,r2
  811174:	08119dc0 	call	8119dc <__udivsi3>
  811178:	8808943a 	slli	r4,r17,16
  81117c:	bf3fffcc 	andi	fp,r23,65535
  811180:	8006d43a 	srli	r3,r16,16
  811184:	e0a3383a 	mul	r17,fp,r2
  811188:	100d883a 	mov	r6,r2
  81118c:	1906b03a 	or	r3,r3,r4
  811190:	1c40042e 	bgeu	r3,r17,8111a4 <__udivdi3+0x370>
  811194:	1dc7883a 	add	r3,r3,r23
  811198:	10bfffc4 	addi	r2,r2,-1
  81119c:	1dc0752e 	bgeu	r3,r23,811374 <__udivdi3+0x540>
  8111a0:	100d883a 	mov	r6,r2
  8111a4:	1c63c83a 	sub	r17,r3,r17
  8111a8:	900b883a 	mov	r5,r18
  8111ac:	8809883a 	mov	r4,r17
  8111b0:	d9800015 	stw	r6,0(sp)
  8111b4:	0811a400 	call	811a40 <__umodsi3>
  8111b8:	102d883a 	mov	r22,r2
  8111bc:	8809883a 	mov	r4,r17
  8111c0:	900b883a 	mov	r5,r18
  8111c4:	08119dc0 	call	8119dc <__udivsi3>
  8111c8:	b02c943a 	slli	r22,r22,16
  8111cc:	e089383a 	mul	r4,fp,r2
  8111d0:	843fffcc 	andi	r16,r16,65535
  8111d4:	85a0b03a 	or	r16,r16,r22
  8111d8:	d9800017 	ldw	r6,0(sp)
  8111dc:	8100042e 	bgeu	r16,r4,8111f0 <__udivdi3+0x3bc>
  8111e0:	85e1883a 	add	r16,r16,r23
  8111e4:	10ffffc4 	addi	r3,r2,-1
  8111e8:	85c05e2e 	bgeu	r16,r23,811364 <__udivdi3+0x530>
  8111ec:	1805883a 	mov	r2,r3
  8111f0:	300c943a 	slli	r6,r6,16
  8111f4:	a17fffcc 	andi	r5,r20,65535
  8111f8:	a028d43a 	srli	r20,r20,16
  8111fc:	3084b03a 	or	r2,r6,r2
  811200:	10ffffcc 	andi	r3,r2,65535
  811204:	100cd43a 	srli	r6,r2,16
  811208:	194f383a 	mul	r7,r3,r5
  81120c:	1d07383a 	mul	r3,r3,r20
  811210:	314b383a 	mul	r5,r6,r5
  811214:	3810d43a 	srli	r8,r7,16
  811218:	8121c83a 	sub	r16,r16,r4
  81121c:	1947883a 	add	r3,r3,r5
  811220:	40c7883a 	add	r3,r8,r3
  811224:	350d383a 	mul	r6,r6,r20
  811228:	1940022e 	bgeu	r3,r5,811234 <__udivdi3+0x400>
  81122c:	01000074 	movhi	r4,1
  811230:	310d883a 	add	r6,r6,r4
  811234:	1828d43a 	srli	r20,r3,16
  811238:	a18d883a 	add	r6,r20,r6
  81123c:	81803e36 	bltu	r16,r6,811338 <__udivdi3+0x504>
  811240:	81803826 	beq	r16,r6,811324 <__udivdi3+0x4f0>
  811244:	0007883a 	mov	r3,zero
  811248:	003fa206 	br	8110d4 <__alt_mem_onchip_mem+0xff8090d4>
  81124c:	88e2983a 	sll	r17,r17,r3
  811250:	80a8d83a 	srl	r20,r16,r2
  811254:	80e0983a 	sll	r16,r16,r3
  811258:	882ad43a 	srli	r21,r17,16
  81125c:	9884d83a 	srl	r2,r19,r2
  811260:	a009883a 	mov	r4,r20
  811264:	a80b883a 	mov	r5,r21
  811268:	142eb03a 	or	r23,r2,r16
  81126c:	98e4983a 	sll	r18,r19,r3
  811270:	0811a400 	call	811a40 <__umodsi3>
  811274:	a009883a 	mov	r4,r20
  811278:	a80b883a 	mov	r5,r21
  81127c:	1021883a 	mov	r16,r2
  811280:	08119dc0 	call	8119dc <__udivsi3>
  811284:	1039883a 	mov	fp,r2
  811288:	8d3fffcc 	andi	r20,r17,65535
  81128c:	8020943a 	slli	r16,r16,16
  811290:	b804d43a 	srli	r2,r23,16
  811294:	a72d383a 	mul	r22,r20,fp
  811298:	1404b03a 	or	r2,r2,r16
  81129c:	1580062e 	bgeu	r2,r22,8112b8 <__udivdi3+0x484>
  8112a0:	1445883a 	add	r2,r2,r17
  8112a4:	e0ffffc4 	addi	r3,fp,-1
  8112a8:	14403836 	bltu	r2,r17,81138c <__udivdi3+0x558>
  8112ac:	1580372e 	bgeu	r2,r22,81138c <__udivdi3+0x558>
  8112b0:	e73fff84 	addi	fp,fp,-2
  8112b4:	1445883a 	add	r2,r2,r17
  8112b8:	15adc83a 	sub	r22,r2,r22
  8112bc:	a80b883a 	mov	r5,r21
  8112c0:	b009883a 	mov	r4,r22
  8112c4:	0811a400 	call	811a40 <__umodsi3>
  8112c8:	1027883a 	mov	r19,r2
  8112cc:	b009883a 	mov	r4,r22
  8112d0:	a80b883a 	mov	r5,r21
  8112d4:	08119dc0 	call	8119dc <__udivsi3>
  8112d8:	9826943a 	slli	r19,r19,16
  8112dc:	a0a1383a 	mul	r16,r20,r2
  8112e0:	b93fffcc 	andi	r4,r23,65535
  8112e4:	24c8b03a 	or	r4,r4,r19
  8112e8:	2400062e 	bgeu	r4,r16,811304 <__udivdi3+0x4d0>
  8112ec:	2449883a 	add	r4,r4,r17
  8112f0:	10ffffc4 	addi	r3,r2,-1
  8112f4:	24402336 	bltu	r4,r17,811384 <__udivdi3+0x550>
  8112f8:	2400222e 	bgeu	r4,r16,811384 <__udivdi3+0x550>
  8112fc:	10bfff84 	addi	r2,r2,-2
  811300:	2449883a 	add	r4,r4,r17
  811304:	e038943a 	slli	fp,fp,16
  811308:	2421c83a 	sub	r16,r4,r16
  81130c:	e086b03a 	or	r3,fp,r2
  811310:	003f4306 	br	811020 <__alt_mem_onchip_mem+0xff809020>
  811314:	2005883a 	mov	r2,r4
  811318:	003f6906 	br	8110c0 <__alt_mem_onchip_mem+0xff8090c0>
  81131c:	1805883a 	mov	r2,r3
  811320:	003f0f06 	br	810f60 <__alt_mem_onchip_mem+0xff808f60>
  811324:	1806943a 	slli	r3,r3,16
  811328:	9d66983a 	sll	r19,r19,r21
  81132c:	39ffffcc 	andi	r7,r7,65535
  811330:	19c7883a 	add	r3,r3,r7
  811334:	98ffc32e 	bgeu	r19,r3,811244 <__alt_mem_onchip_mem+0xff809244>
  811338:	10bfffc4 	addi	r2,r2,-1
  81133c:	003fc106 	br	811244 <__alt_mem_onchip_mem+0xff809244>
  811340:	00800604 	movi	r2,24
  811344:	003f1106 	br	810f8c <__alt_mem_onchip_mem+0xff808f8c>
  811348:	00800604 	movi	r2,24
  81134c:	003f2706 	br	810fec <__alt_mem_onchip_mem+0xff808fec>
  811350:	00800604 	movi	r2,24
  811354:	003ece06 	br	810e90 <__alt_mem_onchip_mem+0xff808e90>
  811358:	0007883a 	mov	r3,zero
  81135c:	00800044 	movi	r2,1
  811360:	003f5c06 	br	8110d4 <__alt_mem_onchip_mem+0xff8090d4>
  811364:	813fa12e 	bgeu	r16,r4,8111ec <__alt_mem_onchip_mem+0xff8091ec>
  811368:	10bfff84 	addi	r2,r2,-2
  81136c:	85e1883a 	add	r16,r16,r23
  811370:	003f9f06 	br	8111f0 <__alt_mem_onchip_mem+0xff8091f0>
  811374:	1c7f8a2e 	bgeu	r3,r17,8111a0 <__alt_mem_onchip_mem+0xff8091a0>
  811378:	31bfff84 	addi	r6,r6,-2
  81137c:	1dc7883a 	add	r3,r3,r23
  811380:	003f8806 	br	8111a4 <__alt_mem_onchip_mem+0xff8091a4>
  811384:	1805883a 	mov	r2,r3
  811388:	003fde06 	br	811304 <__alt_mem_onchip_mem+0xff809304>
  81138c:	1839883a 	mov	fp,r3
  811390:	003fc906 	br	8112b8 <__alt_mem_onchip_mem+0xff8092b8>
  811394:	b5bfff84 	addi	r22,r22,-2
  811398:	2449883a 	add	r4,r4,r17
  81139c:	003f3406 	br	811070 <__alt_mem_onchip_mem+0xff809070>
  8113a0:	b5bfff84 	addi	r22,r22,-2
  8113a4:	1445883a 	add	r2,r2,r17
  8113a8:	003edb06 	br	810f18 <__alt_mem_onchip_mem+0xff808f18>

008113ac <__umoddi3>:
  8113ac:	defff404 	addi	sp,sp,-48
  8113b0:	df000a15 	stw	fp,40(sp)
  8113b4:	dc400315 	stw	r17,12(sp)
  8113b8:	dc000215 	stw	r16,8(sp)
  8113bc:	dfc00b15 	stw	ra,44(sp)
  8113c0:	ddc00915 	stw	r23,36(sp)
  8113c4:	dd800815 	stw	r22,32(sp)
  8113c8:	dd400715 	stw	r21,28(sp)
  8113cc:	dd000615 	stw	r20,24(sp)
  8113d0:	dcc00515 	stw	r19,20(sp)
  8113d4:	dc800415 	stw	r18,16(sp)
  8113d8:	2021883a 	mov	r16,r4
  8113dc:	2823883a 	mov	r17,r5
  8113e0:	2839883a 	mov	fp,r5
  8113e4:	38003c1e 	bne	r7,zero,8114d8 <__umoddi3+0x12c>
  8113e8:	3027883a 	mov	r19,r6
  8113ec:	2029883a 	mov	r20,r4
  8113f0:	2980512e 	bgeu	r5,r6,811538 <__umoddi3+0x18c>
  8113f4:	00bfffd4 	movui	r2,65535
  8113f8:	11809a36 	bltu	r2,r6,811664 <__umoddi3+0x2b8>
  8113fc:	01003fc4 	movi	r4,255
  811400:	2189803a 	cmpltu	r4,r4,r6
  811404:	200890fa 	slli	r4,r4,3
  811408:	3104d83a 	srl	r2,r6,r4
  81140c:	00c02074 	movhi	r3,129
  811410:	18dbfbc4 	addi	r3,r3,28655
  811414:	1885883a 	add	r2,r3,r2
  811418:	10c00003 	ldbu	r3,0(r2)
  81141c:	00800804 	movi	r2,32
  811420:	1909883a 	add	r4,r3,r4
  811424:	1125c83a 	sub	r18,r2,r4
  811428:	90000526 	beq	r18,zero,811440 <__umoddi3+0x94>
  81142c:	8ca2983a 	sll	r17,r17,r18
  811430:	8108d83a 	srl	r4,r16,r4
  811434:	34a6983a 	sll	r19,r6,r18
  811438:	84a8983a 	sll	r20,r16,r18
  81143c:	2478b03a 	or	fp,r4,r17
  811440:	982ed43a 	srli	r23,r19,16
  811444:	e009883a 	mov	r4,fp
  811448:	9dbfffcc 	andi	r22,r19,65535
  81144c:	b80b883a 	mov	r5,r23
  811450:	0811a400 	call	811a40 <__umodsi3>
  811454:	e009883a 	mov	r4,fp
  811458:	b80b883a 	mov	r5,r23
  81145c:	102b883a 	mov	r21,r2
  811460:	08119dc0 	call	8119dc <__udivsi3>
  811464:	a806943a 	slli	r3,r21,16
  811468:	a008d43a 	srli	r4,r20,16
  81146c:	b085383a 	mul	r2,r22,r2
  811470:	20c8b03a 	or	r4,r4,r3
  811474:	2080032e 	bgeu	r4,r2,811484 <__umoddi3+0xd8>
  811478:	24c9883a 	add	r4,r4,r19
  81147c:	24c00136 	bltu	r4,r19,811484 <__umoddi3+0xd8>
  811480:	20811036 	bltu	r4,r2,8118c4 <__umoddi3+0x518>
  811484:	20abc83a 	sub	r21,r4,r2
  811488:	b80b883a 	mov	r5,r23
  81148c:	a809883a 	mov	r4,r21
  811490:	0811a400 	call	811a40 <__umodsi3>
  811494:	1023883a 	mov	r17,r2
  811498:	b80b883a 	mov	r5,r23
  81149c:	a809883a 	mov	r4,r21
  8114a0:	08119dc0 	call	8119dc <__udivsi3>
  8114a4:	8822943a 	slli	r17,r17,16
  8114a8:	b085383a 	mul	r2,r22,r2
  8114ac:	a0ffffcc 	andi	r3,r20,65535
  8114b0:	1c46b03a 	or	r3,r3,r17
  8114b4:	1880042e 	bgeu	r3,r2,8114c8 <__umoddi3+0x11c>
  8114b8:	1cc7883a 	add	r3,r3,r19
  8114bc:	1cc00236 	bltu	r3,r19,8114c8 <__umoddi3+0x11c>
  8114c0:	1880012e 	bgeu	r3,r2,8114c8 <__umoddi3+0x11c>
  8114c4:	1cc7883a 	add	r3,r3,r19
  8114c8:	1885c83a 	sub	r2,r3,r2
  8114cc:	1484d83a 	srl	r2,r2,r18
  8114d0:	0007883a 	mov	r3,zero
  8114d4:	00004f06 	br	811614 <__umoddi3+0x268>
  8114d8:	29c04c36 	bltu	r5,r7,81160c <__umoddi3+0x260>
  8114dc:	00bfffd4 	movui	r2,65535
  8114e0:	11c0582e 	bgeu	r2,r7,811644 <__umoddi3+0x298>
  8114e4:	00804034 	movhi	r2,256
  8114e8:	10bfffc4 	addi	r2,r2,-1
  8114ec:	11c0e736 	bltu	r2,r7,81188c <__umoddi3+0x4e0>
  8114f0:	01000404 	movi	r4,16
  8114f4:	3904d83a 	srl	r2,r7,r4
  8114f8:	00c02074 	movhi	r3,129
  8114fc:	18dbfbc4 	addi	r3,r3,28655
  811500:	1885883a 	add	r2,r3,r2
  811504:	14c00003 	ldbu	r19,0(r2)
  811508:	00c00804 	movi	r3,32
  81150c:	9927883a 	add	r19,r19,r4
  811510:	1ce9c83a 	sub	r20,r3,r19
  811514:	a000581e 	bne	r20,zero,811678 <__umoddi3+0x2cc>
  811518:	3c400136 	bltu	r7,r17,811520 <__umoddi3+0x174>
  81151c:	8180eb36 	bltu	r16,r6,8118cc <__umoddi3+0x520>
  811520:	8185c83a 	sub	r2,r16,r6
  811524:	89e3c83a 	sub	r17,r17,r7
  811528:	8089803a 	cmpltu	r4,r16,r2
  81152c:	8939c83a 	sub	fp,r17,r4
  811530:	e007883a 	mov	r3,fp
  811534:	00003706 	br	811614 <__umoddi3+0x268>
  811538:	3000041e 	bne	r6,zero,81154c <__umoddi3+0x1a0>
  81153c:	000b883a 	mov	r5,zero
  811540:	01000044 	movi	r4,1
  811544:	08119dc0 	call	8119dc <__udivsi3>
  811548:	1027883a 	mov	r19,r2
  81154c:	00bfffd4 	movui	r2,65535
  811550:	14c0402e 	bgeu	r2,r19,811654 <__umoddi3+0x2a8>
  811554:	00804034 	movhi	r2,256
  811558:	10bfffc4 	addi	r2,r2,-1
  81155c:	14c0cd36 	bltu	r2,r19,811894 <__umoddi3+0x4e8>
  811560:	00800404 	movi	r2,16
  811564:	9886d83a 	srl	r3,r19,r2
  811568:	01002074 	movhi	r4,129
  81156c:	211bfbc4 	addi	r4,r4,28655
  811570:	20c7883a 	add	r3,r4,r3
  811574:	18c00003 	ldbu	r3,0(r3)
  811578:	1887883a 	add	r3,r3,r2
  81157c:	00800804 	movi	r2,32
  811580:	10e5c83a 	sub	r18,r2,r3
  811584:	9000901e 	bne	r18,zero,8117c8 <__umoddi3+0x41c>
  811588:	982cd43a 	srli	r22,r19,16
  81158c:	8ce3c83a 	sub	r17,r17,r19
  811590:	9d7fffcc 	andi	r21,r19,65535
  811594:	b00b883a 	mov	r5,r22
  811598:	8809883a 	mov	r4,r17
  81159c:	0811a400 	call	811a40 <__umodsi3>
  8115a0:	8809883a 	mov	r4,r17
  8115a4:	b00b883a 	mov	r5,r22
  8115a8:	1021883a 	mov	r16,r2
  8115ac:	08119dc0 	call	8119dc <__udivsi3>
  8115b0:	8006943a 	slli	r3,r16,16
  8115b4:	a008d43a 	srli	r4,r20,16
  8115b8:	1545383a 	mul	r2,r2,r21
  8115bc:	20c8b03a 	or	r4,r4,r3
  8115c0:	2080042e 	bgeu	r4,r2,8115d4 <__umoddi3+0x228>
  8115c4:	24c9883a 	add	r4,r4,r19
  8115c8:	24c00236 	bltu	r4,r19,8115d4 <__umoddi3+0x228>
  8115cc:	2080012e 	bgeu	r4,r2,8115d4 <__umoddi3+0x228>
  8115d0:	24c9883a 	add	r4,r4,r19
  8115d4:	20a1c83a 	sub	r16,r4,r2
  8115d8:	b00b883a 	mov	r5,r22
  8115dc:	8009883a 	mov	r4,r16
  8115e0:	0811a400 	call	811a40 <__umodsi3>
  8115e4:	1023883a 	mov	r17,r2
  8115e8:	b00b883a 	mov	r5,r22
  8115ec:	8009883a 	mov	r4,r16
  8115f0:	08119dc0 	call	8119dc <__udivsi3>
  8115f4:	8822943a 	slli	r17,r17,16
  8115f8:	1545383a 	mul	r2,r2,r21
  8115fc:	a53fffcc 	andi	r20,r20,65535
  811600:	a446b03a 	or	r3,r20,r17
  811604:	18bfb02e 	bgeu	r3,r2,8114c8 <__alt_mem_onchip_mem+0xff8094c8>
  811608:	003fab06 	br	8114b8 <__alt_mem_onchip_mem+0xff8094b8>
  81160c:	2005883a 	mov	r2,r4
  811610:	2807883a 	mov	r3,r5
  811614:	dfc00b17 	ldw	ra,44(sp)
  811618:	df000a17 	ldw	fp,40(sp)
  81161c:	ddc00917 	ldw	r23,36(sp)
  811620:	dd800817 	ldw	r22,32(sp)
  811624:	dd400717 	ldw	r21,28(sp)
  811628:	dd000617 	ldw	r20,24(sp)
  81162c:	dcc00517 	ldw	r19,20(sp)
  811630:	dc800417 	ldw	r18,16(sp)
  811634:	dc400317 	ldw	r17,12(sp)
  811638:	dc000217 	ldw	r16,8(sp)
  81163c:	dec00c04 	addi	sp,sp,48
  811640:	f800283a 	ret
  811644:	04c03fc4 	movi	r19,255
  811648:	99c9803a 	cmpltu	r4,r19,r7
  81164c:	200890fa 	slli	r4,r4,3
  811650:	003fa806 	br	8114f4 <__alt_mem_onchip_mem+0xff8094f4>
  811654:	00803fc4 	movi	r2,255
  811658:	14c5803a 	cmpltu	r2,r2,r19
  81165c:	100490fa 	slli	r2,r2,3
  811660:	003fc006 	br	811564 <__alt_mem_onchip_mem+0xff809564>
  811664:	00804034 	movhi	r2,256
  811668:	10bfffc4 	addi	r2,r2,-1
  81166c:	11808b36 	bltu	r2,r6,81189c <__umoddi3+0x4f0>
  811670:	01000404 	movi	r4,16
  811674:	003f6406 	br	811408 <__alt_mem_onchip_mem+0xff809408>
  811678:	34c4d83a 	srl	r2,r6,r19
  81167c:	3d0e983a 	sll	r7,r7,r20
  811680:	8cf8d83a 	srl	fp,r17,r19
  811684:	8d10983a 	sll	r8,r17,r20
  811688:	38aab03a 	or	r21,r7,r2
  81168c:	a82cd43a 	srli	r22,r21,16
  811690:	84e2d83a 	srl	r17,r16,r19
  811694:	e009883a 	mov	r4,fp
  811698:	b00b883a 	mov	r5,r22
  81169c:	8a22b03a 	or	r17,r17,r8
  8116a0:	3524983a 	sll	r18,r6,r20
  8116a4:	0811a400 	call	811a40 <__umodsi3>
  8116a8:	e009883a 	mov	r4,fp
  8116ac:	b00b883a 	mov	r5,r22
  8116b0:	102f883a 	mov	r23,r2
  8116b4:	08119dc0 	call	8119dc <__udivsi3>
  8116b8:	100d883a 	mov	r6,r2
  8116bc:	b808943a 	slli	r4,r23,16
  8116c0:	aa3fffcc 	andi	r8,r21,65535
  8116c4:	8804d43a 	srli	r2,r17,16
  8116c8:	41af383a 	mul	r23,r8,r6
  8116cc:	8520983a 	sll	r16,r16,r20
  8116d0:	1104b03a 	or	r2,r2,r4
  8116d4:	15c0042e 	bgeu	r2,r23,8116e8 <__umoddi3+0x33c>
  8116d8:	1545883a 	add	r2,r2,r21
  8116dc:	30ffffc4 	addi	r3,r6,-1
  8116e0:	1540742e 	bgeu	r2,r21,8118b4 <__umoddi3+0x508>
  8116e4:	180d883a 	mov	r6,r3
  8116e8:	15efc83a 	sub	r23,r2,r23
  8116ec:	b00b883a 	mov	r5,r22
  8116f0:	b809883a 	mov	r4,r23
  8116f4:	d9800115 	stw	r6,4(sp)
  8116f8:	da000015 	stw	r8,0(sp)
  8116fc:	0811a400 	call	811a40 <__umodsi3>
  811700:	b00b883a 	mov	r5,r22
  811704:	b809883a 	mov	r4,r23
  811708:	1039883a 	mov	fp,r2
  81170c:	08119dc0 	call	8119dc <__udivsi3>
  811710:	da000017 	ldw	r8,0(sp)
  811714:	e038943a 	slli	fp,fp,16
  811718:	100b883a 	mov	r5,r2
  81171c:	4089383a 	mul	r4,r8,r2
  811720:	8a3fffcc 	andi	r8,r17,65535
  811724:	4710b03a 	or	r8,r8,fp
  811728:	d9800117 	ldw	r6,4(sp)
  81172c:	4100042e 	bgeu	r8,r4,811740 <__umoddi3+0x394>
  811730:	4551883a 	add	r8,r8,r21
  811734:	10bfffc4 	addi	r2,r2,-1
  811738:	45405a2e 	bgeu	r8,r21,8118a4 <__umoddi3+0x4f8>
  81173c:	100b883a 	mov	r5,r2
  811740:	300c943a 	slli	r6,r6,16
  811744:	91ffffcc 	andi	r7,r18,65535
  811748:	9004d43a 	srli	r2,r18,16
  81174c:	314cb03a 	or	r6,r6,r5
  811750:	317fffcc 	andi	r5,r6,65535
  811754:	300cd43a 	srli	r6,r6,16
  811758:	29d3383a 	mul	r9,r5,r7
  81175c:	288b383a 	mul	r5,r5,r2
  811760:	31cf383a 	mul	r7,r6,r7
  811764:	4806d43a 	srli	r3,r9,16
  811768:	4111c83a 	sub	r8,r8,r4
  81176c:	29cb883a 	add	r5,r5,r7
  811770:	194b883a 	add	r5,r3,r5
  811774:	3085383a 	mul	r2,r6,r2
  811778:	29c0022e 	bgeu	r5,r7,811784 <__umoddi3+0x3d8>
  81177c:	00c00074 	movhi	r3,1
  811780:	10c5883a 	add	r2,r2,r3
  811784:	2808d43a 	srli	r4,r5,16
  811788:	280a943a 	slli	r5,r5,16
  81178c:	4a7fffcc 	andi	r9,r9,65535
  811790:	2085883a 	add	r2,r4,r2
  811794:	2a4b883a 	add	r5,r5,r9
  811798:	40803636 	bltu	r8,r2,811874 <__umoddi3+0x4c8>
  81179c:	40804d26 	beq	r8,r2,8118d4 <__umoddi3+0x528>
  8117a0:	4089c83a 	sub	r4,r8,r2
  8117a4:	280f883a 	mov	r7,r5
  8117a8:	81cfc83a 	sub	r7,r16,r7
  8117ac:	81c7803a 	cmpltu	r3,r16,r7
  8117b0:	20c7c83a 	sub	r3,r4,r3
  8117b4:	1cc4983a 	sll	r2,r3,r19
  8117b8:	3d0ed83a 	srl	r7,r7,r20
  8117bc:	1d06d83a 	srl	r3,r3,r20
  8117c0:	11c4b03a 	or	r2,r2,r7
  8117c4:	003f9306 	br	811614 <__alt_mem_onchip_mem+0xff809614>
  8117c8:	9ca6983a 	sll	r19,r19,r18
  8117cc:	88e8d83a 	srl	r20,r17,r3
  8117d0:	80c4d83a 	srl	r2,r16,r3
  8117d4:	982cd43a 	srli	r22,r19,16
  8117d8:	8ca2983a 	sll	r17,r17,r18
  8117dc:	a009883a 	mov	r4,r20
  8117e0:	b00b883a 	mov	r5,r22
  8117e4:	1478b03a 	or	fp,r2,r17
  8117e8:	0811a400 	call	811a40 <__umodsi3>
  8117ec:	a009883a 	mov	r4,r20
  8117f0:	b00b883a 	mov	r5,r22
  8117f4:	1023883a 	mov	r17,r2
  8117f8:	08119dc0 	call	8119dc <__udivsi3>
  8117fc:	9d7fffcc 	andi	r21,r19,65535
  811800:	880a943a 	slli	r5,r17,16
  811804:	e008d43a 	srli	r4,fp,16
  811808:	a885383a 	mul	r2,r21,r2
  81180c:	84a8983a 	sll	r20,r16,r18
  811810:	2148b03a 	or	r4,r4,r5
  811814:	2080042e 	bgeu	r4,r2,811828 <__umoddi3+0x47c>
  811818:	24c9883a 	add	r4,r4,r19
  81181c:	24c00236 	bltu	r4,r19,811828 <__umoddi3+0x47c>
  811820:	2080012e 	bgeu	r4,r2,811828 <__umoddi3+0x47c>
  811824:	24c9883a 	add	r4,r4,r19
  811828:	20a3c83a 	sub	r17,r4,r2
  81182c:	b00b883a 	mov	r5,r22
  811830:	8809883a 	mov	r4,r17
  811834:	0811a400 	call	811a40 <__umodsi3>
  811838:	102f883a 	mov	r23,r2
  81183c:	8809883a 	mov	r4,r17
  811840:	b00b883a 	mov	r5,r22
  811844:	08119dc0 	call	8119dc <__udivsi3>
  811848:	b82e943a 	slli	r23,r23,16
  81184c:	a885383a 	mul	r2,r21,r2
  811850:	e13fffcc 	andi	r4,fp,65535
  811854:	25c8b03a 	or	r4,r4,r23
  811858:	2080042e 	bgeu	r4,r2,81186c <__umoddi3+0x4c0>
  81185c:	24c9883a 	add	r4,r4,r19
  811860:	24c00236 	bltu	r4,r19,81186c <__umoddi3+0x4c0>
  811864:	2080012e 	bgeu	r4,r2,81186c <__umoddi3+0x4c0>
  811868:	24c9883a 	add	r4,r4,r19
  81186c:	20a3c83a 	sub	r17,r4,r2
  811870:	003f4806 	br	811594 <__alt_mem_onchip_mem+0xff809594>
  811874:	2c8fc83a 	sub	r7,r5,r18
  811878:	1545c83a 	sub	r2,r2,r21
  81187c:	29cb803a 	cmpltu	r5,r5,r7
  811880:	1145c83a 	sub	r2,r2,r5
  811884:	4089c83a 	sub	r4,r8,r2
  811888:	003fc706 	br	8117a8 <__alt_mem_onchip_mem+0xff8097a8>
  81188c:	01000604 	movi	r4,24
  811890:	003f1806 	br	8114f4 <__alt_mem_onchip_mem+0xff8094f4>
  811894:	00800604 	movi	r2,24
  811898:	003f3206 	br	811564 <__alt_mem_onchip_mem+0xff809564>
  81189c:	01000604 	movi	r4,24
  8118a0:	003ed906 	br	811408 <__alt_mem_onchip_mem+0xff809408>
  8118a4:	413fa52e 	bgeu	r8,r4,81173c <__alt_mem_onchip_mem+0xff80973c>
  8118a8:	297fff84 	addi	r5,r5,-2
  8118ac:	4551883a 	add	r8,r8,r21
  8118b0:	003fa306 	br	811740 <__alt_mem_onchip_mem+0xff809740>
  8118b4:	15ff8b2e 	bgeu	r2,r23,8116e4 <__alt_mem_onchip_mem+0xff8096e4>
  8118b8:	31bfff84 	addi	r6,r6,-2
  8118bc:	1545883a 	add	r2,r2,r21
  8118c0:	003f8906 	br	8116e8 <__alt_mem_onchip_mem+0xff8096e8>
  8118c4:	24c9883a 	add	r4,r4,r19
  8118c8:	003eee06 	br	811484 <__alt_mem_onchip_mem+0xff809484>
  8118cc:	8005883a 	mov	r2,r16
  8118d0:	003f1706 	br	811530 <__alt_mem_onchip_mem+0xff809530>
  8118d4:	817fe736 	bltu	r16,r5,811874 <__alt_mem_onchip_mem+0xff809874>
  8118d8:	280f883a 	mov	r7,r5
  8118dc:	0009883a 	mov	r4,zero
  8118e0:	003fb106 	br	8117a8 <__alt_mem_onchip_mem+0xff8097a8>

008118e4 <__divsi3>:
  8118e4:	20001b16 	blt	r4,zero,811954 <__divsi3+0x70>
  8118e8:	000f883a 	mov	r7,zero
  8118ec:	28001616 	blt	r5,zero,811948 <__divsi3+0x64>
  8118f0:	200d883a 	mov	r6,r4
  8118f4:	29001a2e 	bgeu	r5,r4,811960 <__divsi3+0x7c>
  8118f8:	00800804 	movi	r2,32
  8118fc:	00c00044 	movi	r3,1
  811900:	00000106 	br	811908 <__divsi3+0x24>
  811904:	10000d26 	beq	r2,zero,81193c <__divsi3+0x58>
  811908:	294b883a 	add	r5,r5,r5
  81190c:	10bfffc4 	addi	r2,r2,-1
  811910:	18c7883a 	add	r3,r3,r3
  811914:	293ffb36 	bltu	r5,r4,811904 <__alt_mem_onchip_mem+0xff809904>
  811918:	0005883a 	mov	r2,zero
  81191c:	18000726 	beq	r3,zero,81193c <__divsi3+0x58>
  811920:	0005883a 	mov	r2,zero
  811924:	31400236 	bltu	r6,r5,811930 <__divsi3+0x4c>
  811928:	314dc83a 	sub	r6,r6,r5
  81192c:	10c4b03a 	or	r2,r2,r3
  811930:	1806d07a 	srli	r3,r3,1
  811934:	280ad07a 	srli	r5,r5,1
  811938:	183ffa1e 	bne	r3,zero,811924 <__alt_mem_onchip_mem+0xff809924>
  81193c:	38000126 	beq	r7,zero,811944 <__divsi3+0x60>
  811940:	0085c83a 	sub	r2,zero,r2
  811944:	f800283a 	ret
  811948:	014bc83a 	sub	r5,zero,r5
  81194c:	39c0005c 	xori	r7,r7,1
  811950:	003fe706 	br	8118f0 <__alt_mem_onchip_mem+0xff8098f0>
  811954:	0109c83a 	sub	r4,zero,r4
  811958:	01c00044 	movi	r7,1
  81195c:	003fe306 	br	8118ec <__alt_mem_onchip_mem+0xff8098ec>
  811960:	00c00044 	movi	r3,1
  811964:	003fee06 	br	811920 <__alt_mem_onchip_mem+0xff809920>

00811968 <__modsi3>:
  811968:	20001716 	blt	r4,zero,8119c8 <__modsi3+0x60>
  81196c:	000f883a 	mov	r7,zero
  811970:	2005883a 	mov	r2,r4
  811974:	28001216 	blt	r5,zero,8119c0 <__modsi3+0x58>
  811978:	2900162e 	bgeu	r5,r4,8119d4 <__modsi3+0x6c>
  81197c:	01800804 	movi	r6,32
  811980:	00c00044 	movi	r3,1
  811984:	00000106 	br	81198c <__modsi3+0x24>
  811988:	30000a26 	beq	r6,zero,8119b4 <__modsi3+0x4c>
  81198c:	294b883a 	add	r5,r5,r5
  811990:	31bfffc4 	addi	r6,r6,-1
  811994:	18c7883a 	add	r3,r3,r3
  811998:	293ffb36 	bltu	r5,r4,811988 <__alt_mem_onchip_mem+0xff809988>
  81199c:	18000526 	beq	r3,zero,8119b4 <__modsi3+0x4c>
  8119a0:	1806d07a 	srli	r3,r3,1
  8119a4:	11400136 	bltu	r2,r5,8119ac <__modsi3+0x44>
  8119a8:	1145c83a 	sub	r2,r2,r5
  8119ac:	280ad07a 	srli	r5,r5,1
  8119b0:	183ffb1e 	bne	r3,zero,8119a0 <__alt_mem_onchip_mem+0xff8099a0>
  8119b4:	38000126 	beq	r7,zero,8119bc <__modsi3+0x54>
  8119b8:	0085c83a 	sub	r2,zero,r2
  8119bc:	f800283a 	ret
  8119c0:	014bc83a 	sub	r5,zero,r5
  8119c4:	003fec06 	br	811978 <__alt_mem_onchip_mem+0xff809978>
  8119c8:	0109c83a 	sub	r4,zero,r4
  8119cc:	01c00044 	movi	r7,1
  8119d0:	003fe706 	br	811970 <__alt_mem_onchip_mem+0xff809970>
  8119d4:	00c00044 	movi	r3,1
  8119d8:	003ff106 	br	8119a0 <__alt_mem_onchip_mem+0xff8099a0>

008119dc <__udivsi3>:
  8119dc:	200d883a 	mov	r6,r4
  8119e0:	2900152e 	bgeu	r5,r4,811a38 <__udivsi3+0x5c>
  8119e4:	28001416 	blt	r5,zero,811a38 <__udivsi3+0x5c>
  8119e8:	00800804 	movi	r2,32
  8119ec:	00c00044 	movi	r3,1
  8119f0:	00000206 	br	8119fc <__udivsi3+0x20>
  8119f4:	10000e26 	beq	r2,zero,811a30 <__udivsi3+0x54>
  8119f8:	28000516 	blt	r5,zero,811a10 <__udivsi3+0x34>
  8119fc:	294b883a 	add	r5,r5,r5
  811a00:	10bfffc4 	addi	r2,r2,-1
  811a04:	18c7883a 	add	r3,r3,r3
  811a08:	293ffa36 	bltu	r5,r4,8119f4 <__alt_mem_onchip_mem+0xff8099f4>
  811a0c:	18000826 	beq	r3,zero,811a30 <__udivsi3+0x54>
  811a10:	0005883a 	mov	r2,zero
  811a14:	31400236 	bltu	r6,r5,811a20 <__udivsi3+0x44>
  811a18:	314dc83a 	sub	r6,r6,r5
  811a1c:	10c4b03a 	or	r2,r2,r3
  811a20:	1806d07a 	srli	r3,r3,1
  811a24:	280ad07a 	srli	r5,r5,1
  811a28:	183ffa1e 	bne	r3,zero,811a14 <__alt_mem_onchip_mem+0xff809a14>
  811a2c:	f800283a 	ret
  811a30:	0005883a 	mov	r2,zero
  811a34:	f800283a 	ret
  811a38:	00c00044 	movi	r3,1
  811a3c:	003ff406 	br	811a10 <__alt_mem_onchip_mem+0xff809a10>

00811a40 <__umodsi3>:
  811a40:	2005883a 	mov	r2,r4
  811a44:	2900122e 	bgeu	r5,r4,811a90 <__umodsi3+0x50>
  811a48:	28001116 	blt	r5,zero,811a90 <__umodsi3+0x50>
  811a4c:	01800804 	movi	r6,32
  811a50:	00c00044 	movi	r3,1
  811a54:	00000206 	br	811a60 <__umodsi3+0x20>
  811a58:	30000c26 	beq	r6,zero,811a8c <__umodsi3+0x4c>
  811a5c:	28000516 	blt	r5,zero,811a74 <__umodsi3+0x34>
  811a60:	294b883a 	add	r5,r5,r5
  811a64:	31bfffc4 	addi	r6,r6,-1
  811a68:	18c7883a 	add	r3,r3,r3
  811a6c:	293ffa36 	bltu	r5,r4,811a58 <__alt_mem_onchip_mem+0xff809a58>
  811a70:	18000626 	beq	r3,zero,811a8c <__umodsi3+0x4c>
  811a74:	1806d07a 	srli	r3,r3,1
  811a78:	11400136 	bltu	r2,r5,811a80 <__umodsi3+0x40>
  811a7c:	1145c83a 	sub	r2,r2,r5
  811a80:	280ad07a 	srli	r5,r5,1
  811a84:	183ffb1e 	bne	r3,zero,811a74 <__alt_mem_onchip_mem+0xff809a74>
  811a88:	f800283a 	ret
  811a8c:	f800283a 	ret
  811a90:	00c00044 	movi	r3,1
  811a94:	003ff706 	br	811a74 <__alt_mem_onchip_mem+0xff809a74>

00811a98 <__divdf3>:
  811a98:	defff204 	addi	sp,sp,-56
  811a9c:	dd400915 	stw	r21,36(sp)
  811aa0:	282ad53a 	srli	r21,r5,20
  811aa4:	dd000815 	stw	r20,32(sp)
  811aa8:	2828d7fa 	srli	r20,r5,31
  811aac:	dc000415 	stw	r16,16(sp)
  811ab0:	04000434 	movhi	r16,16
  811ab4:	df000c15 	stw	fp,48(sp)
  811ab8:	843fffc4 	addi	r16,r16,-1
  811abc:	dfc00d15 	stw	ra,52(sp)
  811ac0:	ddc00b15 	stw	r23,44(sp)
  811ac4:	dd800a15 	stw	r22,40(sp)
  811ac8:	dcc00715 	stw	r19,28(sp)
  811acc:	dc800615 	stw	r18,24(sp)
  811ad0:	dc400515 	stw	r17,20(sp)
  811ad4:	ad41ffcc 	andi	r21,r21,2047
  811ad8:	2c20703a 	and	r16,r5,r16
  811adc:	a7003fcc 	andi	fp,r20,255
  811ae0:	a8006126 	beq	r21,zero,811c68 <__divdf3+0x1d0>
  811ae4:	0081ffc4 	movi	r2,2047
  811ae8:	2025883a 	mov	r18,r4
  811aec:	a8803726 	beq	r21,r2,811bcc <__divdf3+0x134>
  811af0:	80800434 	orhi	r2,r16,16
  811af4:	100490fa 	slli	r2,r2,3
  811af8:	2020d77a 	srli	r16,r4,29
  811afc:	202490fa 	slli	r18,r4,3
  811b00:	ad7f0044 	addi	r21,r21,-1023
  811b04:	80a0b03a 	or	r16,r16,r2
  811b08:	0027883a 	mov	r19,zero
  811b0c:	0013883a 	mov	r9,zero
  811b10:	3804d53a 	srli	r2,r7,20
  811b14:	382cd7fa 	srli	r22,r7,31
  811b18:	04400434 	movhi	r17,16
  811b1c:	8c7fffc4 	addi	r17,r17,-1
  811b20:	1081ffcc 	andi	r2,r2,2047
  811b24:	3011883a 	mov	r8,r6
  811b28:	3c62703a 	and	r17,r7,r17
  811b2c:	b5c03fcc 	andi	r23,r22,255
  811b30:	10006c26 	beq	r2,zero,811ce4 <__divdf3+0x24c>
  811b34:	00c1ffc4 	movi	r3,2047
  811b38:	10c06426 	beq	r2,r3,811ccc <__divdf3+0x234>
  811b3c:	88c00434 	orhi	r3,r17,16
  811b40:	180690fa 	slli	r3,r3,3
  811b44:	3022d77a 	srli	r17,r6,29
  811b48:	301090fa 	slli	r8,r6,3
  811b4c:	10bf0044 	addi	r2,r2,-1023
  811b50:	88e2b03a 	or	r17,r17,r3
  811b54:	000f883a 	mov	r7,zero
  811b58:	a58cf03a 	xor	r6,r20,r22
  811b5c:	3cc8b03a 	or	r4,r7,r19
  811b60:	a8abc83a 	sub	r21,r21,r2
  811b64:	008003c4 	movi	r2,15
  811b68:	3007883a 	mov	r3,r6
  811b6c:	34c03fcc 	andi	r19,r6,255
  811b70:	11009036 	bltu	r2,r4,811db4 <__divdf3+0x31c>
  811b74:	200890ba 	slli	r4,r4,2
  811b78:	00802074 	movhi	r2,129
  811b7c:	1086e304 	addi	r2,r2,7052
  811b80:	2089883a 	add	r4,r4,r2
  811b84:	20800017 	ldw	r2,0(r4)
  811b88:	1000683a 	jmp	r2
  811b8c:	00811db4 	movhi	r2,1142
  811b90:	00811c04 	movi	r2,1136
  811b94:	00811da4 	muli	r2,zero,1142
  811b98:	00811bf8 	rdprs	r2,zero,1135
  811b9c:	00811da4 	muli	r2,zero,1142
  811ba0:	00811d78 	rdprs	r2,zero,1141
  811ba4:	00811da4 	muli	r2,zero,1142
  811ba8:	00811bf8 	rdprs	r2,zero,1135
  811bac:	00811c04 	movi	r2,1136
  811bb0:	00811c04 	movi	r2,1136
  811bb4:	00811d78 	rdprs	r2,zero,1141
  811bb8:	00811bf8 	rdprs	r2,zero,1135
  811bbc:	00811be8 	cmpgeui	r2,zero,1135
  811bc0:	00811be8 	cmpgeui	r2,zero,1135
  811bc4:	00811be8 	cmpgeui	r2,zero,1135
  811bc8:	00812098 	cmpnei	r2,zero,1154
  811bcc:	2404b03a 	or	r2,r4,r16
  811bd0:	1000661e 	bne	r2,zero,811d6c <__divdf3+0x2d4>
  811bd4:	04c00204 	movi	r19,8
  811bd8:	0021883a 	mov	r16,zero
  811bdc:	0025883a 	mov	r18,zero
  811be0:	02400084 	movi	r9,2
  811be4:	003fca06 	br	811b10 <__alt_mem_onchip_mem+0xff809b10>
  811be8:	8023883a 	mov	r17,r16
  811bec:	9011883a 	mov	r8,r18
  811bf0:	e02f883a 	mov	r23,fp
  811bf4:	480f883a 	mov	r7,r9
  811bf8:	00800084 	movi	r2,2
  811bfc:	3881311e 	bne	r7,r2,8120c4 <__divdf3+0x62c>
  811c00:	b827883a 	mov	r19,r23
  811c04:	98c0004c 	andi	r3,r19,1
  811c08:	0081ffc4 	movi	r2,2047
  811c0c:	000b883a 	mov	r5,zero
  811c10:	0025883a 	mov	r18,zero
  811c14:	1004953a 	slli	r2,r2,20
  811c18:	18c03fcc 	andi	r3,r3,255
  811c1c:	04400434 	movhi	r17,16
  811c20:	8c7fffc4 	addi	r17,r17,-1
  811c24:	180697fa 	slli	r3,r3,31
  811c28:	2c4a703a 	and	r5,r5,r17
  811c2c:	288ab03a 	or	r5,r5,r2
  811c30:	28c6b03a 	or	r3,r5,r3
  811c34:	9005883a 	mov	r2,r18
  811c38:	dfc00d17 	ldw	ra,52(sp)
  811c3c:	df000c17 	ldw	fp,48(sp)
  811c40:	ddc00b17 	ldw	r23,44(sp)
  811c44:	dd800a17 	ldw	r22,40(sp)
  811c48:	dd400917 	ldw	r21,36(sp)
  811c4c:	dd000817 	ldw	r20,32(sp)
  811c50:	dcc00717 	ldw	r19,28(sp)
  811c54:	dc800617 	ldw	r18,24(sp)
  811c58:	dc400517 	ldw	r17,20(sp)
  811c5c:	dc000417 	ldw	r16,16(sp)
  811c60:	dec00e04 	addi	sp,sp,56
  811c64:	f800283a 	ret
  811c68:	2404b03a 	or	r2,r4,r16
  811c6c:	2027883a 	mov	r19,r4
  811c70:	10003926 	beq	r2,zero,811d58 <__divdf3+0x2c0>
  811c74:	80012e26 	beq	r16,zero,812130 <__divdf3+0x698>
  811c78:	8009883a 	mov	r4,r16
  811c7c:	d9800315 	stw	r6,12(sp)
  811c80:	d9c00215 	stw	r7,8(sp)
  811c84:	0806c8c0 	call	806c8c <__clzsi2>
  811c88:	d9800317 	ldw	r6,12(sp)
  811c8c:	d9c00217 	ldw	r7,8(sp)
  811c90:	113ffd44 	addi	r4,r2,-11
  811c94:	00c00704 	movi	r3,28
  811c98:	19012116 	blt	r3,r4,812120 <__divdf3+0x688>
  811c9c:	00c00744 	movi	r3,29
  811ca0:	147ffe04 	addi	r17,r2,-8
  811ca4:	1907c83a 	sub	r3,r3,r4
  811ca8:	8460983a 	sll	r16,r16,r17
  811cac:	98c6d83a 	srl	r3,r19,r3
  811cb0:	9c64983a 	sll	r18,r19,r17
  811cb4:	1c20b03a 	or	r16,r3,r16
  811cb8:	1080fcc4 	addi	r2,r2,1011
  811cbc:	00abc83a 	sub	r21,zero,r2
  811cc0:	0027883a 	mov	r19,zero
  811cc4:	0013883a 	mov	r9,zero
  811cc8:	003f9106 	br	811b10 <__alt_mem_onchip_mem+0xff809b10>
  811ccc:	3446b03a 	or	r3,r6,r17
  811cd0:	18001f1e 	bne	r3,zero,811d50 <__divdf3+0x2b8>
  811cd4:	0023883a 	mov	r17,zero
  811cd8:	0011883a 	mov	r8,zero
  811cdc:	01c00084 	movi	r7,2
  811ce0:	003f9d06 	br	811b58 <__alt_mem_onchip_mem+0xff809b58>
  811ce4:	3446b03a 	or	r3,r6,r17
  811ce8:	18001526 	beq	r3,zero,811d40 <__divdf3+0x2a8>
  811cec:	88011b26 	beq	r17,zero,81215c <__divdf3+0x6c4>
  811cf0:	8809883a 	mov	r4,r17
  811cf4:	d9800315 	stw	r6,12(sp)
  811cf8:	da400115 	stw	r9,4(sp)
  811cfc:	0806c8c0 	call	806c8c <__clzsi2>
  811d00:	d9800317 	ldw	r6,12(sp)
  811d04:	da400117 	ldw	r9,4(sp)
  811d08:	113ffd44 	addi	r4,r2,-11
  811d0c:	00c00704 	movi	r3,28
  811d10:	19010e16 	blt	r3,r4,81214c <__divdf3+0x6b4>
  811d14:	00c00744 	movi	r3,29
  811d18:	123ffe04 	addi	r8,r2,-8
  811d1c:	1907c83a 	sub	r3,r3,r4
  811d20:	8a22983a 	sll	r17,r17,r8
  811d24:	30c6d83a 	srl	r3,r6,r3
  811d28:	3210983a 	sll	r8,r6,r8
  811d2c:	1c62b03a 	or	r17,r3,r17
  811d30:	1080fcc4 	addi	r2,r2,1011
  811d34:	0085c83a 	sub	r2,zero,r2
  811d38:	000f883a 	mov	r7,zero
  811d3c:	003f8606 	br	811b58 <__alt_mem_onchip_mem+0xff809b58>
  811d40:	0023883a 	mov	r17,zero
  811d44:	0011883a 	mov	r8,zero
  811d48:	01c00044 	movi	r7,1
  811d4c:	003f8206 	br	811b58 <__alt_mem_onchip_mem+0xff809b58>
  811d50:	01c000c4 	movi	r7,3
  811d54:	003f8006 	br	811b58 <__alt_mem_onchip_mem+0xff809b58>
  811d58:	04c00104 	movi	r19,4
  811d5c:	0021883a 	mov	r16,zero
  811d60:	0025883a 	mov	r18,zero
  811d64:	02400044 	movi	r9,1
  811d68:	003f6906 	br	811b10 <__alt_mem_onchip_mem+0xff809b10>
  811d6c:	04c00304 	movi	r19,12
  811d70:	024000c4 	movi	r9,3
  811d74:	003f6606 	br	811b10 <__alt_mem_onchip_mem+0xff809b10>
  811d78:	01400434 	movhi	r5,16
  811d7c:	0007883a 	mov	r3,zero
  811d80:	297fffc4 	addi	r5,r5,-1
  811d84:	04bfffc4 	movi	r18,-1
  811d88:	0081ffc4 	movi	r2,2047
  811d8c:	003fa106 	br	811c14 <__alt_mem_onchip_mem+0xff809c14>
  811d90:	00c00044 	movi	r3,1
  811d94:	1887c83a 	sub	r3,r3,r2
  811d98:	01000e04 	movi	r4,56
  811d9c:	20c1210e 	bge	r4,r3,812224 <__divdf3+0x78c>
  811da0:	98c0004c 	andi	r3,r19,1
  811da4:	0005883a 	mov	r2,zero
  811da8:	000b883a 	mov	r5,zero
  811dac:	0025883a 	mov	r18,zero
  811db0:	003f9806 	br	811c14 <__alt_mem_onchip_mem+0xff809c14>
  811db4:	8c00fd36 	bltu	r17,r16,8121ac <__divdf3+0x714>
  811db8:	8440fb26 	beq	r16,r17,8121a8 <__divdf3+0x710>
  811dbc:	8007883a 	mov	r3,r16
  811dc0:	ad7fffc4 	addi	r21,r21,-1
  811dc4:	0021883a 	mov	r16,zero
  811dc8:	4004d63a 	srli	r2,r8,24
  811dcc:	8822923a 	slli	r17,r17,8
  811dd0:	1809883a 	mov	r4,r3
  811dd4:	402c923a 	slli	r22,r8,8
  811dd8:	88b8b03a 	or	fp,r17,r2
  811ddc:	e028d43a 	srli	r20,fp,16
  811de0:	d8c00015 	stw	r3,0(sp)
  811de4:	e5ffffcc 	andi	r23,fp,65535
  811de8:	a00b883a 	mov	r5,r20
  811dec:	08119dc0 	call	8119dc <__udivsi3>
  811df0:	d8c00017 	ldw	r3,0(sp)
  811df4:	a00b883a 	mov	r5,r20
  811df8:	d8800315 	stw	r2,12(sp)
  811dfc:	1809883a 	mov	r4,r3
  811e00:	0811a400 	call	811a40 <__umodsi3>
  811e04:	d9800317 	ldw	r6,12(sp)
  811e08:	1006943a 	slli	r3,r2,16
  811e0c:	9004d43a 	srli	r2,r18,16
  811e10:	b9a3383a 	mul	r17,r23,r6
  811e14:	10c4b03a 	or	r2,r2,r3
  811e18:	1440062e 	bgeu	r2,r17,811e34 <__divdf3+0x39c>
  811e1c:	1705883a 	add	r2,r2,fp
  811e20:	30ffffc4 	addi	r3,r6,-1
  811e24:	1700ee36 	bltu	r2,fp,8121e0 <__divdf3+0x748>
  811e28:	1440ed2e 	bgeu	r2,r17,8121e0 <__divdf3+0x748>
  811e2c:	31bfff84 	addi	r6,r6,-2
  811e30:	1705883a 	add	r2,r2,fp
  811e34:	1463c83a 	sub	r17,r2,r17
  811e38:	a00b883a 	mov	r5,r20
  811e3c:	8809883a 	mov	r4,r17
  811e40:	d9800315 	stw	r6,12(sp)
  811e44:	08119dc0 	call	8119dc <__udivsi3>
  811e48:	a00b883a 	mov	r5,r20
  811e4c:	8809883a 	mov	r4,r17
  811e50:	d8800215 	stw	r2,8(sp)
  811e54:	0811a400 	call	811a40 <__umodsi3>
  811e58:	d9c00217 	ldw	r7,8(sp)
  811e5c:	1004943a 	slli	r2,r2,16
  811e60:	94bfffcc 	andi	r18,r18,65535
  811e64:	b9d1383a 	mul	r8,r23,r7
  811e68:	90a4b03a 	or	r18,r18,r2
  811e6c:	d9800317 	ldw	r6,12(sp)
  811e70:	9200062e 	bgeu	r18,r8,811e8c <__divdf3+0x3f4>
  811e74:	9725883a 	add	r18,r18,fp
  811e78:	38bfffc4 	addi	r2,r7,-1
  811e7c:	9700d636 	bltu	r18,fp,8121d8 <__divdf3+0x740>
  811e80:	9200d52e 	bgeu	r18,r8,8121d8 <__divdf3+0x740>
  811e84:	39ffff84 	addi	r7,r7,-2
  811e88:	9725883a 	add	r18,r18,fp
  811e8c:	3004943a 	slli	r2,r6,16
  811e90:	b012d43a 	srli	r9,r22,16
  811e94:	b1bfffcc 	andi	r6,r22,65535
  811e98:	11e2b03a 	or	r17,r2,r7
  811e9c:	8806d43a 	srli	r3,r17,16
  811ea0:	893fffcc 	andi	r4,r17,65535
  811ea4:	218b383a 	mul	r5,r4,r6
  811ea8:	30c5383a 	mul	r2,r6,r3
  811eac:	2249383a 	mul	r4,r4,r9
  811eb0:	280ed43a 	srli	r7,r5,16
  811eb4:	9225c83a 	sub	r18,r18,r8
  811eb8:	2089883a 	add	r4,r4,r2
  811ebc:	3909883a 	add	r4,r7,r4
  811ec0:	1a47383a 	mul	r3,r3,r9
  811ec4:	2080022e 	bgeu	r4,r2,811ed0 <__divdf3+0x438>
  811ec8:	00800074 	movhi	r2,1
  811ecc:	1887883a 	add	r3,r3,r2
  811ed0:	2004d43a 	srli	r2,r4,16
  811ed4:	2008943a 	slli	r4,r4,16
  811ed8:	297fffcc 	andi	r5,r5,65535
  811edc:	10c7883a 	add	r3,r2,r3
  811ee0:	2149883a 	add	r4,r4,r5
  811ee4:	90c0a536 	bltu	r18,r3,81217c <__divdf3+0x6e4>
  811ee8:	90c0bf26 	beq	r18,r3,8121e8 <__divdf3+0x750>
  811eec:	90c7c83a 	sub	r3,r18,r3
  811ef0:	810fc83a 	sub	r7,r16,r4
  811ef4:	81e5803a 	cmpltu	r18,r16,r7
  811ef8:	1ca5c83a 	sub	r18,r3,r18
  811efc:	e480c126 	beq	fp,r18,812204 <__divdf3+0x76c>
  811f00:	a00b883a 	mov	r5,r20
  811f04:	9009883a 	mov	r4,r18
  811f08:	d9800315 	stw	r6,12(sp)
  811f0c:	d9c00215 	stw	r7,8(sp)
  811f10:	da400115 	stw	r9,4(sp)
  811f14:	08119dc0 	call	8119dc <__udivsi3>
  811f18:	a00b883a 	mov	r5,r20
  811f1c:	9009883a 	mov	r4,r18
  811f20:	d8800015 	stw	r2,0(sp)
  811f24:	0811a400 	call	811a40 <__umodsi3>
  811f28:	d9c00217 	ldw	r7,8(sp)
  811f2c:	da000017 	ldw	r8,0(sp)
  811f30:	1006943a 	slli	r3,r2,16
  811f34:	3804d43a 	srli	r2,r7,16
  811f38:	ba21383a 	mul	r16,r23,r8
  811f3c:	d9800317 	ldw	r6,12(sp)
  811f40:	10c4b03a 	or	r2,r2,r3
  811f44:	da400117 	ldw	r9,4(sp)
  811f48:	1400062e 	bgeu	r2,r16,811f64 <__divdf3+0x4cc>
  811f4c:	1705883a 	add	r2,r2,fp
  811f50:	40ffffc4 	addi	r3,r8,-1
  811f54:	1700ad36 	bltu	r2,fp,81220c <__divdf3+0x774>
  811f58:	1400ac2e 	bgeu	r2,r16,81220c <__divdf3+0x774>
  811f5c:	423fff84 	addi	r8,r8,-2
  811f60:	1705883a 	add	r2,r2,fp
  811f64:	1421c83a 	sub	r16,r2,r16
  811f68:	a00b883a 	mov	r5,r20
  811f6c:	8009883a 	mov	r4,r16
  811f70:	d9800315 	stw	r6,12(sp)
  811f74:	d9c00215 	stw	r7,8(sp)
  811f78:	da000015 	stw	r8,0(sp)
  811f7c:	da400115 	stw	r9,4(sp)
  811f80:	08119dc0 	call	8119dc <__udivsi3>
  811f84:	8009883a 	mov	r4,r16
  811f88:	a00b883a 	mov	r5,r20
  811f8c:	1025883a 	mov	r18,r2
  811f90:	0811a400 	call	811a40 <__umodsi3>
  811f94:	d9c00217 	ldw	r7,8(sp)
  811f98:	1004943a 	slli	r2,r2,16
  811f9c:	bcaf383a 	mul	r23,r23,r18
  811fa0:	393fffcc 	andi	r4,r7,65535
  811fa4:	2088b03a 	or	r4,r4,r2
  811fa8:	d9800317 	ldw	r6,12(sp)
  811fac:	da000017 	ldw	r8,0(sp)
  811fb0:	da400117 	ldw	r9,4(sp)
  811fb4:	25c0062e 	bgeu	r4,r23,811fd0 <__divdf3+0x538>
  811fb8:	2709883a 	add	r4,r4,fp
  811fbc:	90bfffc4 	addi	r2,r18,-1
  811fc0:	27009436 	bltu	r4,fp,812214 <__divdf3+0x77c>
  811fc4:	25c0932e 	bgeu	r4,r23,812214 <__divdf3+0x77c>
  811fc8:	94bfff84 	addi	r18,r18,-2
  811fcc:	2709883a 	add	r4,r4,fp
  811fd0:	4004943a 	slli	r2,r8,16
  811fd4:	25efc83a 	sub	r23,r4,r23
  811fd8:	1490b03a 	or	r8,r2,r18
  811fdc:	4008d43a 	srli	r4,r8,16
  811fe0:	40ffffcc 	andi	r3,r8,65535
  811fe4:	30c5383a 	mul	r2,r6,r3
  811fe8:	1a47383a 	mul	r3,r3,r9
  811fec:	310d383a 	mul	r6,r6,r4
  811ff0:	100ad43a 	srli	r5,r2,16
  811ff4:	4913383a 	mul	r9,r9,r4
  811ff8:	1987883a 	add	r3,r3,r6
  811ffc:	28c7883a 	add	r3,r5,r3
  812000:	1980022e 	bgeu	r3,r6,81200c <__divdf3+0x574>
  812004:	01000074 	movhi	r4,1
  812008:	4913883a 	add	r9,r9,r4
  81200c:	1808d43a 	srli	r4,r3,16
  812010:	1806943a 	slli	r3,r3,16
  812014:	10bfffcc 	andi	r2,r2,65535
  812018:	2253883a 	add	r9,r4,r9
  81201c:	1887883a 	add	r3,r3,r2
  812020:	ba403836 	bltu	r23,r9,812104 <__divdf3+0x66c>
  812024:	ba403626 	beq	r23,r9,812100 <__divdf3+0x668>
  812028:	42000054 	ori	r8,r8,1
  81202c:	a880ffc4 	addi	r2,r21,1023
  812030:	00bf570e 	bge	zero,r2,811d90 <__alt_mem_onchip_mem+0xff809d90>
  812034:	40c001cc 	andi	r3,r8,7
  812038:	18000726 	beq	r3,zero,812058 <__divdf3+0x5c0>
  81203c:	40c003cc 	andi	r3,r8,15
  812040:	01000104 	movi	r4,4
  812044:	19000426 	beq	r3,r4,812058 <__divdf3+0x5c0>
  812048:	4107883a 	add	r3,r8,r4
  81204c:	1a11803a 	cmpltu	r8,r3,r8
  812050:	8a23883a 	add	r17,r17,r8
  812054:	1811883a 	mov	r8,r3
  812058:	88c0402c 	andhi	r3,r17,256
  81205c:	18000426 	beq	r3,zero,812070 <__divdf3+0x5d8>
  812060:	00ffc034 	movhi	r3,65280
  812064:	18ffffc4 	addi	r3,r3,-1
  812068:	a8810004 	addi	r2,r21,1024
  81206c:	88e2703a 	and	r17,r17,r3
  812070:	00c1ff84 	movi	r3,2046
  812074:	18bee316 	blt	r3,r2,811c04 <__alt_mem_onchip_mem+0xff809c04>
  812078:	8824977a 	slli	r18,r17,29
  81207c:	4010d0fa 	srli	r8,r8,3
  812080:	8822927a 	slli	r17,r17,9
  812084:	1081ffcc 	andi	r2,r2,2047
  812088:	9224b03a 	or	r18,r18,r8
  81208c:	880ad33a 	srli	r5,r17,12
  812090:	98c0004c 	andi	r3,r19,1
  812094:	003edf06 	br	811c14 <__alt_mem_onchip_mem+0xff809c14>
  812098:	8080022c 	andhi	r2,r16,8
  81209c:	10001226 	beq	r2,zero,8120e8 <__divdf3+0x650>
  8120a0:	8880022c 	andhi	r2,r17,8
  8120a4:	1000101e 	bne	r2,zero,8120e8 <__divdf3+0x650>
  8120a8:	00800434 	movhi	r2,16
  8120ac:	89400234 	orhi	r5,r17,8
  8120b0:	10bfffc4 	addi	r2,r2,-1
  8120b4:	b007883a 	mov	r3,r22
  8120b8:	288a703a 	and	r5,r5,r2
  8120bc:	4025883a 	mov	r18,r8
  8120c0:	003f3106 	br	811d88 <__alt_mem_onchip_mem+0xff809d88>
  8120c4:	008000c4 	movi	r2,3
  8120c8:	3880a626 	beq	r7,r2,812364 <__divdf3+0x8cc>
  8120cc:	00800044 	movi	r2,1
  8120d0:	3880521e 	bne	r7,r2,81221c <__divdf3+0x784>
  8120d4:	b807883a 	mov	r3,r23
  8120d8:	0005883a 	mov	r2,zero
  8120dc:	000b883a 	mov	r5,zero
  8120e0:	0025883a 	mov	r18,zero
  8120e4:	003ecb06 	br	811c14 <__alt_mem_onchip_mem+0xff809c14>
  8120e8:	00800434 	movhi	r2,16
  8120ec:	81400234 	orhi	r5,r16,8
  8120f0:	10bfffc4 	addi	r2,r2,-1
  8120f4:	a007883a 	mov	r3,r20
  8120f8:	288a703a 	and	r5,r5,r2
  8120fc:	003f2206 	br	811d88 <__alt_mem_onchip_mem+0xff809d88>
  812100:	183fca26 	beq	r3,zero,81202c <__alt_mem_onchip_mem+0xff80a02c>
  812104:	e5ef883a 	add	r23,fp,r23
  812108:	40bfffc4 	addi	r2,r8,-1
  81210c:	bf00392e 	bgeu	r23,fp,8121f4 <__divdf3+0x75c>
  812110:	1011883a 	mov	r8,r2
  812114:	ba7fc41e 	bne	r23,r9,812028 <__alt_mem_onchip_mem+0xff80a028>
  812118:	b0ffc31e 	bne	r22,r3,812028 <__alt_mem_onchip_mem+0xff80a028>
  81211c:	003fc306 	br	81202c <__alt_mem_onchip_mem+0xff80a02c>
  812120:	143ff604 	addi	r16,r2,-40
  812124:	9c20983a 	sll	r16,r19,r16
  812128:	0025883a 	mov	r18,zero
  81212c:	003ee206 	br	811cb8 <__alt_mem_onchip_mem+0xff809cb8>
  812130:	d9800315 	stw	r6,12(sp)
  812134:	d9c00215 	stw	r7,8(sp)
  812138:	0806c8c0 	call	806c8c <__clzsi2>
  81213c:	10800804 	addi	r2,r2,32
  812140:	d9c00217 	ldw	r7,8(sp)
  812144:	d9800317 	ldw	r6,12(sp)
  812148:	003ed106 	br	811c90 <__alt_mem_onchip_mem+0xff809c90>
  81214c:	147ff604 	addi	r17,r2,-40
  812150:	3462983a 	sll	r17,r6,r17
  812154:	0011883a 	mov	r8,zero
  812158:	003ef506 	br	811d30 <__alt_mem_onchip_mem+0xff809d30>
  81215c:	3009883a 	mov	r4,r6
  812160:	d9800315 	stw	r6,12(sp)
  812164:	da400115 	stw	r9,4(sp)
  812168:	0806c8c0 	call	806c8c <__clzsi2>
  81216c:	10800804 	addi	r2,r2,32
  812170:	da400117 	ldw	r9,4(sp)
  812174:	d9800317 	ldw	r6,12(sp)
  812178:	003ee306 	br	811d08 <__alt_mem_onchip_mem+0xff809d08>
  81217c:	85a1883a 	add	r16,r16,r22
  812180:	8585803a 	cmpltu	r2,r16,r22
  812184:	1705883a 	add	r2,r2,fp
  812188:	14a5883a 	add	r18,r2,r18
  81218c:	88bfffc4 	addi	r2,r17,-1
  812190:	e4800c2e 	bgeu	fp,r18,8121c4 <__divdf3+0x72c>
  812194:	90c03e36 	bltu	r18,r3,812290 <__divdf3+0x7f8>
  812198:	1c806926 	beq	r3,r18,812340 <__divdf3+0x8a8>
  81219c:	90c7c83a 	sub	r3,r18,r3
  8121a0:	1023883a 	mov	r17,r2
  8121a4:	003f5206 	br	811ef0 <__alt_mem_onchip_mem+0xff809ef0>
  8121a8:	923f0436 	bltu	r18,r8,811dbc <__alt_mem_onchip_mem+0xff809dbc>
  8121ac:	800897fa 	slli	r4,r16,31
  8121b0:	9004d07a 	srli	r2,r18,1
  8121b4:	8006d07a 	srli	r3,r16,1
  8121b8:	902097fa 	slli	r16,r18,31
  8121bc:	20a4b03a 	or	r18,r4,r2
  8121c0:	003f0106 	br	811dc8 <__alt_mem_onchip_mem+0xff809dc8>
  8121c4:	e4bff51e 	bne	fp,r18,81219c <__alt_mem_onchip_mem+0xff80a19c>
  8121c8:	85bff22e 	bgeu	r16,r22,812194 <__alt_mem_onchip_mem+0xff80a194>
  8121cc:	e0c7c83a 	sub	r3,fp,r3
  8121d0:	1023883a 	mov	r17,r2
  8121d4:	003f4606 	br	811ef0 <__alt_mem_onchip_mem+0xff809ef0>
  8121d8:	100f883a 	mov	r7,r2
  8121dc:	003f2b06 	br	811e8c <__alt_mem_onchip_mem+0xff809e8c>
  8121e0:	180d883a 	mov	r6,r3
  8121e4:	003f1306 	br	811e34 <__alt_mem_onchip_mem+0xff809e34>
  8121e8:	813fe436 	bltu	r16,r4,81217c <__alt_mem_onchip_mem+0xff80a17c>
  8121ec:	0007883a 	mov	r3,zero
  8121f0:	003f3f06 	br	811ef0 <__alt_mem_onchip_mem+0xff809ef0>
  8121f4:	ba402c36 	bltu	r23,r9,8122a8 <__divdf3+0x810>
  8121f8:	4dc05426 	beq	r9,r23,81234c <__divdf3+0x8b4>
  8121fc:	1011883a 	mov	r8,r2
  812200:	003f8906 	br	812028 <__alt_mem_onchip_mem+0xff80a028>
  812204:	023fffc4 	movi	r8,-1
  812208:	003f8806 	br	81202c <__alt_mem_onchip_mem+0xff80a02c>
  81220c:	1811883a 	mov	r8,r3
  812210:	003f5406 	br	811f64 <__alt_mem_onchip_mem+0xff809f64>
  812214:	1025883a 	mov	r18,r2
  812218:	003f6d06 	br	811fd0 <__alt_mem_onchip_mem+0xff809fd0>
  81221c:	b827883a 	mov	r19,r23
  812220:	003f8206 	br	81202c <__alt_mem_onchip_mem+0xff80a02c>
  812224:	010007c4 	movi	r4,31
  812228:	20c02616 	blt	r4,r3,8122c4 <__divdf3+0x82c>
  81222c:	00800804 	movi	r2,32
  812230:	10c5c83a 	sub	r2,r2,r3
  812234:	888a983a 	sll	r5,r17,r2
  812238:	40c8d83a 	srl	r4,r8,r3
  81223c:	4084983a 	sll	r2,r8,r2
  812240:	88e2d83a 	srl	r17,r17,r3
  812244:	2906b03a 	or	r3,r5,r4
  812248:	1004c03a 	cmpne	r2,r2,zero
  81224c:	1886b03a 	or	r3,r3,r2
  812250:	188001cc 	andi	r2,r3,7
  812254:	10000726 	beq	r2,zero,812274 <__divdf3+0x7dc>
  812258:	188003cc 	andi	r2,r3,15
  81225c:	01000104 	movi	r4,4
  812260:	11000426 	beq	r2,r4,812274 <__divdf3+0x7dc>
  812264:	1805883a 	mov	r2,r3
  812268:	10c00104 	addi	r3,r2,4
  81226c:	1885803a 	cmpltu	r2,r3,r2
  812270:	88a3883a 	add	r17,r17,r2
  812274:	8880202c 	andhi	r2,r17,128
  812278:	10002726 	beq	r2,zero,812318 <__divdf3+0x880>
  81227c:	98c0004c 	andi	r3,r19,1
  812280:	00800044 	movi	r2,1
  812284:	000b883a 	mov	r5,zero
  812288:	0025883a 	mov	r18,zero
  81228c:	003e6106 	br	811c14 <__alt_mem_onchip_mem+0xff809c14>
  812290:	85a1883a 	add	r16,r16,r22
  812294:	8585803a 	cmpltu	r2,r16,r22
  812298:	1705883a 	add	r2,r2,fp
  81229c:	14a5883a 	add	r18,r2,r18
  8122a0:	8c7fff84 	addi	r17,r17,-2
  8122a4:	003f1106 	br	811eec <__alt_mem_onchip_mem+0xff809eec>
  8122a8:	b589883a 	add	r4,r22,r22
  8122ac:	25ad803a 	cmpltu	r22,r4,r22
  8122b0:	b739883a 	add	fp,r22,fp
  8122b4:	40bfff84 	addi	r2,r8,-2
  8122b8:	bf2f883a 	add	r23,r23,fp
  8122bc:	202d883a 	mov	r22,r4
  8122c0:	003f9306 	br	812110 <__alt_mem_onchip_mem+0xff80a110>
  8122c4:	013ff844 	movi	r4,-31
  8122c8:	2085c83a 	sub	r2,r4,r2
  8122cc:	8888d83a 	srl	r4,r17,r2
  8122d0:	00800804 	movi	r2,32
  8122d4:	18802126 	beq	r3,r2,81235c <__divdf3+0x8c4>
  8122d8:	00801004 	movi	r2,64
  8122dc:	10c5c83a 	sub	r2,r2,r3
  8122e0:	8884983a 	sll	r2,r17,r2
  8122e4:	1204b03a 	or	r2,r2,r8
  8122e8:	1004c03a 	cmpne	r2,r2,zero
  8122ec:	2084b03a 	or	r2,r4,r2
  8122f0:	144001cc 	andi	r17,r2,7
  8122f4:	88000d1e 	bne	r17,zero,81232c <__divdf3+0x894>
  8122f8:	000b883a 	mov	r5,zero
  8122fc:	1024d0fa 	srli	r18,r2,3
  812300:	98c0004c 	andi	r3,r19,1
  812304:	0005883a 	mov	r2,zero
  812308:	9464b03a 	or	r18,r18,r17
  81230c:	003e4106 	br	811c14 <__alt_mem_onchip_mem+0xff809c14>
  812310:	1007883a 	mov	r3,r2
  812314:	0023883a 	mov	r17,zero
  812318:	880a927a 	slli	r5,r17,9
  81231c:	1805883a 	mov	r2,r3
  812320:	8822977a 	slli	r17,r17,29
  812324:	280ad33a 	srli	r5,r5,12
  812328:	003ff406 	br	8122fc <__alt_mem_onchip_mem+0xff80a2fc>
  81232c:	10c003cc 	andi	r3,r2,15
  812330:	01000104 	movi	r4,4
  812334:	193ff626 	beq	r3,r4,812310 <__alt_mem_onchip_mem+0xff80a310>
  812338:	0023883a 	mov	r17,zero
  81233c:	003fca06 	br	812268 <__alt_mem_onchip_mem+0xff80a268>
  812340:	813fd336 	bltu	r16,r4,812290 <__alt_mem_onchip_mem+0xff80a290>
  812344:	1023883a 	mov	r17,r2
  812348:	003fa806 	br	8121ec <__alt_mem_onchip_mem+0xff80a1ec>
  81234c:	b0ffd636 	bltu	r22,r3,8122a8 <__alt_mem_onchip_mem+0xff80a2a8>
  812350:	1011883a 	mov	r8,r2
  812354:	b0ff341e 	bne	r22,r3,812028 <__alt_mem_onchip_mem+0xff80a028>
  812358:	003f3406 	br	81202c <__alt_mem_onchip_mem+0xff80a02c>
  81235c:	0005883a 	mov	r2,zero
  812360:	003fe006 	br	8122e4 <__alt_mem_onchip_mem+0xff80a2e4>
  812364:	00800434 	movhi	r2,16
  812368:	89400234 	orhi	r5,r17,8
  81236c:	10bfffc4 	addi	r2,r2,-1
  812370:	b807883a 	mov	r3,r23
  812374:	288a703a 	and	r5,r5,r2
  812378:	4025883a 	mov	r18,r8
  81237c:	003e8206 	br	811d88 <__alt_mem_onchip_mem+0xff809d88>

00812380 <__eqdf2>:
  812380:	2804d53a 	srli	r2,r5,20
  812384:	3806d53a 	srli	r3,r7,20
  812388:	02000434 	movhi	r8,16
  81238c:	423fffc4 	addi	r8,r8,-1
  812390:	1081ffcc 	andi	r2,r2,2047
  812394:	0281ffc4 	movi	r10,2047
  812398:	2a12703a 	and	r9,r5,r8
  81239c:	18c1ffcc 	andi	r3,r3,2047
  8123a0:	3a10703a 	and	r8,r7,r8
  8123a4:	280ad7fa 	srli	r5,r5,31
  8123a8:	380ed7fa 	srli	r7,r7,31
  8123ac:	12801026 	beq	r2,r10,8123f0 <__eqdf2+0x70>
  8123b0:	0281ffc4 	movi	r10,2047
  8123b4:	1a800a26 	beq	r3,r10,8123e0 <__eqdf2+0x60>
  8123b8:	10c00226 	beq	r2,r3,8123c4 <__eqdf2+0x44>
  8123bc:	00800044 	movi	r2,1
  8123c0:	f800283a 	ret
  8123c4:	4a3ffd1e 	bne	r9,r8,8123bc <__alt_mem_onchip_mem+0xff80a3bc>
  8123c8:	21bffc1e 	bne	r4,r6,8123bc <__alt_mem_onchip_mem+0xff80a3bc>
  8123cc:	29c00c26 	beq	r5,r7,812400 <__eqdf2+0x80>
  8123d0:	103ffa1e 	bne	r2,zero,8123bc <__alt_mem_onchip_mem+0xff80a3bc>
  8123d4:	2244b03a 	or	r2,r4,r9
  8123d8:	1004c03a 	cmpne	r2,r2,zero
  8123dc:	f800283a 	ret
  8123e0:	3214b03a 	or	r10,r6,r8
  8123e4:	503ff426 	beq	r10,zero,8123b8 <__alt_mem_onchip_mem+0xff80a3b8>
  8123e8:	00800044 	movi	r2,1
  8123ec:	f800283a 	ret
  8123f0:	2254b03a 	or	r10,r4,r9
  8123f4:	503fee26 	beq	r10,zero,8123b0 <__alt_mem_onchip_mem+0xff80a3b0>
  8123f8:	00800044 	movi	r2,1
  8123fc:	f800283a 	ret
  812400:	0005883a 	mov	r2,zero
  812404:	f800283a 	ret

00812408 <__muldf3>:
  812408:	defff304 	addi	sp,sp,-52
  81240c:	2804d53a 	srli	r2,r5,20
  812410:	dd800915 	stw	r22,36(sp)
  812414:	282cd7fa 	srli	r22,r5,31
  812418:	dc000315 	stw	r16,12(sp)
  81241c:	04000434 	movhi	r16,16
  812420:	dd400815 	stw	r21,32(sp)
  812424:	dc800515 	stw	r18,20(sp)
  812428:	843fffc4 	addi	r16,r16,-1
  81242c:	dfc00c15 	stw	ra,48(sp)
  812430:	df000b15 	stw	fp,44(sp)
  812434:	ddc00a15 	stw	r23,40(sp)
  812438:	dd000715 	stw	r20,28(sp)
  81243c:	dcc00615 	stw	r19,24(sp)
  812440:	dc400415 	stw	r17,16(sp)
  812444:	1481ffcc 	andi	r18,r2,2047
  812448:	2c20703a 	and	r16,r5,r16
  81244c:	b02b883a 	mov	r21,r22
  812450:	b2403fcc 	andi	r9,r22,255
  812454:	90006026 	beq	r18,zero,8125d8 <__muldf3+0x1d0>
  812458:	0081ffc4 	movi	r2,2047
  81245c:	2029883a 	mov	r20,r4
  812460:	90803626 	beq	r18,r2,81253c <__muldf3+0x134>
  812464:	80800434 	orhi	r2,r16,16
  812468:	100490fa 	slli	r2,r2,3
  81246c:	2020d77a 	srli	r16,r4,29
  812470:	202890fa 	slli	r20,r4,3
  812474:	94bf0044 	addi	r18,r18,-1023
  812478:	80a0b03a 	or	r16,r16,r2
  81247c:	0027883a 	mov	r19,zero
  812480:	0039883a 	mov	fp,zero
  812484:	3804d53a 	srli	r2,r7,20
  812488:	382ed7fa 	srli	r23,r7,31
  81248c:	04400434 	movhi	r17,16
  812490:	8c7fffc4 	addi	r17,r17,-1
  812494:	1081ffcc 	andi	r2,r2,2047
  812498:	3011883a 	mov	r8,r6
  81249c:	3c62703a 	and	r17,r7,r17
  8124a0:	ba803fcc 	andi	r10,r23,255
  8124a4:	10006d26 	beq	r2,zero,81265c <__muldf3+0x254>
  8124a8:	00c1ffc4 	movi	r3,2047
  8124ac:	10c06526 	beq	r2,r3,812644 <__muldf3+0x23c>
  8124b0:	88c00434 	orhi	r3,r17,16
  8124b4:	180690fa 	slli	r3,r3,3
  8124b8:	3022d77a 	srli	r17,r6,29
  8124bc:	301090fa 	slli	r8,r6,3
  8124c0:	10bf0044 	addi	r2,r2,-1023
  8124c4:	88e2b03a 	or	r17,r17,r3
  8124c8:	000b883a 	mov	r5,zero
  8124cc:	9085883a 	add	r2,r18,r2
  8124d0:	2cc8b03a 	or	r4,r5,r19
  8124d4:	00c003c4 	movi	r3,15
  8124d8:	bdacf03a 	xor	r22,r23,r22
  8124dc:	12c00044 	addi	r11,r2,1
  8124e0:	19009936 	bltu	r3,r4,812748 <__muldf3+0x340>
  8124e4:	200890ba 	slli	r4,r4,2
  8124e8:	00c02074 	movhi	r3,129
  8124ec:	18c93f04 	addi	r3,r3,9468
  8124f0:	20c9883a 	add	r4,r4,r3
  8124f4:	20c00017 	ldw	r3,0(r4)
  8124f8:	1800683a 	jmp	r3
  8124fc:	00812748 	cmpgei	r2,zero,1181
  812500:	0081255c 	xori	r2,zero,1173
  812504:	0081255c 	xori	r2,zero,1173
  812508:	00812558 	cmpnei	r2,zero,1173
  81250c:	00812724 	muli	r2,zero,1180
  812510:	00812724 	muli	r2,zero,1180
  812514:	0081270c 	andi	r2,zero,1180
  812518:	00812558 	cmpnei	r2,zero,1173
  81251c:	00812724 	muli	r2,zero,1180
  812520:	0081270c 	andi	r2,zero,1180
  812524:	00812724 	muli	r2,zero,1180
  812528:	00812558 	cmpnei	r2,zero,1173
  81252c:	00812734 	movhi	r2,1180
  812530:	00812734 	movhi	r2,1180
  812534:	00812734 	movhi	r2,1180
  812538:	00812950 	cmplti	r2,zero,1189
  81253c:	2404b03a 	or	r2,r4,r16
  812540:	10006f1e 	bne	r2,zero,812700 <__muldf3+0x2f8>
  812544:	04c00204 	movi	r19,8
  812548:	0021883a 	mov	r16,zero
  81254c:	0029883a 	mov	r20,zero
  812550:	07000084 	movi	fp,2
  812554:	003fcb06 	br	812484 <__alt_mem_onchip_mem+0xff80a484>
  812558:	502d883a 	mov	r22,r10
  81255c:	00800084 	movi	r2,2
  812560:	28805726 	beq	r5,r2,8126c0 <__muldf3+0x2b8>
  812564:	008000c4 	movi	r2,3
  812568:	28816626 	beq	r5,r2,812b04 <__muldf3+0x6fc>
  81256c:	00800044 	movi	r2,1
  812570:	2881411e 	bne	r5,r2,812a78 <__muldf3+0x670>
  812574:	b02b883a 	mov	r21,r22
  812578:	0005883a 	mov	r2,zero
  81257c:	000b883a 	mov	r5,zero
  812580:	0029883a 	mov	r20,zero
  812584:	1004953a 	slli	r2,r2,20
  812588:	a8c03fcc 	andi	r3,r21,255
  81258c:	04400434 	movhi	r17,16
  812590:	8c7fffc4 	addi	r17,r17,-1
  812594:	180697fa 	slli	r3,r3,31
  812598:	2c4a703a 	and	r5,r5,r17
  81259c:	288ab03a 	or	r5,r5,r2
  8125a0:	28c6b03a 	or	r3,r5,r3
  8125a4:	a005883a 	mov	r2,r20
  8125a8:	dfc00c17 	ldw	ra,48(sp)
  8125ac:	df000b17 	ldw	fp,44(sp)
  8125b0:	ddc00a17 	ldw	r23,40(sp)
  8125b4:	dd800917 	ldw	r22,36(sp)
  8125b8:	dd400817 	ldw	r21,32(sp)
  8125bc:	dd000717 	ldw	r20,28(sp)
  8125c0:	dcc00617 	ldw	r19,24(sp)
  8125c4:	dc800517 	ldw	r18,20(sp)
  8125c8:	dc400417 	ldw	r17,16(sp)
  8125cc:	dc000317 	ldw	r16,12(sp)
  8125d0:	dec00d04 	addi	sp,sp,52
  8125d4:	f800283a 	ret
  8125d8:	2404b03a 	or	r2,r4,r16
  8125dc:	2027883a 	mov	r19,r4
  8125e0:	10004226 	beq	r2,zero,8126ec <__muldf3+0x2e4>
  8125e4:	8000fc26 	beq	r16,zero,8129d8 <__muldf3+0x5d0>
  8125e8:	8009883a 	mov	r4,r16
  8125ec:	d9800215 	stw	r6,8(sp)
  8125f0:	d9c00015 	stw	r7,0(sp)
  8125f4:	da400115 	stw	r9,4(sp)
  8125f8:	0806c8c0 	call	806c8c <__clzsi2>
  8125fc:	d9800217 	ldw	r6,8(sp)
  812600:	d9c00017 	ldw	r7,0(sp)
  812604:	da400117 	ldw	r9,4(sp)
  812608:	113ffd44 	addi	r4,r2,-11
  81260c:	00c00704 	movi	r3,28
  812610:	1900ed16 	blt	r3,r4,8129c8 <__muldf3+0x5c0>
  812614:	00c00744 	movi	r3,29
  812618:	147ffe04 	addi	r17,r2,-8
  81261c:	1907c83a 	sub	r3,r3,r4
  812620:	8460983a 	sll	r16,r16,r17
  812624:	98c6d83a 	srl	r3,r19,r3
  812628:	9c68983a 	sll	r20,r19,r17
  81262c:	1c20b03a 	or	r16,r3,r16
  812630:	1080fcc4 	addi	r2,r2,1011
  812634:	00a5c83a 	sub	r18,zero,r2
  812638:	0027883a 	mov	r19,zero
  81263c:	0039883a 	mov	fp,zero
  812640:	003f9006 	br	812484 <__alt_mem_onchip_mem+0xff80a484>
  812644:	3446b03a 	or	r3,r6,r17
  812648:	1800261e 	bne	r3,zero,8126e4 <__muldf3+0x2dc>
  81264c:	0023883a 	mov	r17,zero
  812650:	0011883a 	mov	r8,zero
  812654:	01400084 	movi	r5,2
  812658:	003f9c06 	br	8124cc <__alt_mem_onchip_mem+0xff80a4cc>
  81265c:	3446b03a 	or	r3,r6,r17
  812660:	18001c26 	beq	r3,zero,8126d4 <__muldf3+0x2cc>
  812664:	8800ce26 	beq	r17,zero,8129a0 <__muldf3+0x598>
  812668:	8809883a 	mov	r4,r17
  81266c:	d9800215 	stw	r6,8(sp)
  812670:	da400115 	stw	r9,4(sp)
  812674:	da800015 	stw	r10,0(sp)
  812678:	0806c8c0 	call	806c8c <__clzsi2>
  81267c:	d9800217 	ldw	r6,8(sp)
  812680:	da400117 	ldw	r9,4(sp)
  812684:	da800017 	ldw	r10,0(sp)
  812688:	113ffd44 	addi	r4,r2,-11
  81268c:	00c00704 	movi	r3,28
  812690:	1900bf16 	blt	r3,r4,812990 <__muldf3+0x588>
  812694:	00c00744 	movi	r3,29
  812698:	123ffe04 	addi	r8,r2,-8
  81269c:	1907c83a 	sub	r3,r3,r4
  8126a0:	8a22983a 	sll	r17,r17,r8
  8126a4:	30c6d83a 	srl	r3,r6,r3
  8126a8:	3210983a 	sll	r8,r6,r8
  8126ac:	1c62b03a 	or	r17,r3,r17
  8126b0:	1080fcc4 	addi	r2,r2,1011
  8126b4:	0085c83a 	sub	r2,zero,r2
  8126b8:	000b883a 	mov	r5,zero
  8126bc:	003f8306 	br	8124cc <__alt_mem_onchip_mem+0xff80a4cc>
  8126c0:	b02b883a 	mov	r21,r22
  8126c4:	0081ffc4 	movi	r2,2047
  8126c8:	000b883a 	mov	r5,zero
  8126cc:	0029883a 	mov	r20,zero
  8126d0:	003fac06 	br	812584 <__alt_mem_onchip_mem+0xff80a584>
  8126d4:	0023883a 	mov	r17,zero
  8126d8:	0011883a 	mov	r8,zero
  8126dc:	01400044 	movi	r5,1
  8126e0:	003f7a06 	br	8124cc <__alt_mem_onchip_mem+0xff80a4cc>
  8126e4:	014000c4 	movi	r5,3
  8126e8:	003f7806 	br	8124cc <__alt_mem_onchip_mem+0xff80a4cc>
  8126ec:	04c00104 	movi	r19,4
  8126f0:	0021883a 	mov	r16,zero
  8126f4:	0029883a 	mov	r20,zero
  8126f8:	07000044 	movi	fp,1
  8126fc:	003f6106 	br	812484 <__alt_mem_onchip_mem+0xff80a484>
  812700:	04c00304 	movi	r19,12
  812704:	070000c4 	movi	fp,3
  812708:	003f5e06 	br	812484 <__alt_mem_onchip_mem+0xff80a484>
  81270c:	01400434 	movhi	r5,16
  812710:	002b883a 	mov	r21,zero
  812714:	297fffc4 	addi	r5,r5,-1
  812718:	053fffc4 	movi	r20,-1
  81271c:	0081ffc4 	movi	r2,2047
  812720:	003f9806 	br	812584 <__alt_mem_onchip_mem+0xff80a584>
  812724:	8023883a 	mov	r17,r16
  812728:	a011883a 	mov	r8,r20
  81272c:	e00b883a 	mov	r5,fp
  812730:	003f8a06 	br	81255c <__alt_mem_onchip_mem+0xff80a55c>
  812734:	8023883a 	mov	r17,r16
  812738:	a011883a 	mov	r8,r20
  81273c:	482d883a 	mov	r22,r9
  812740:	e00b883a 	mov	r5,fp
  812744:	003f8506 	br	81255c <__alt_mem_onchip_mem+0xff80a55c>
  812748:	a00ad43a 	srli	r5,r20,16
  81274c:	401ad43a 	srli	r13,r8,16
  812750:	a53fffcc 	andi	r20,r20,65535
  812754:	423fffcc 	andi	r8,r8,65535
  812758:	4519383a 	mul	r12,r8,r20
  81275c:	4147383a 	mul	r3,r8,r5
  812760:	6d09383a 	mul	r4,r13,r20
  812764:	600cd43a 	srli	r6,r12,16
  812768:	2b5d383a 	mul	r14,r5,r13
  81276c:	20c9883a 	add	r4,r4,r3
  812770:	310d883a 	add	r6,r6,r4
  812774:	30c0022e 	bgeu	r6,r3,812780 <__muldf3+0x378>
  812778:	00c00074 	movhi	r3,1
  81277c:	70dd883a 	add	r14,r14,r3
  812780:	8826d43a 	srli	r19,r17,16
  812784:	8bffffcc 	andi	r15,r17,65535
  812788:	7d23383a 	mul	r17,r15,r20
  81278c:	7949383a 	mul	r4,r15,r5
  812790:	9d29383a 	mul	r20,r19,r20
  812794:	8814d43a 	srli	r10,r17,16
  812798:	3012943a 	slli	r9,r6,16
  81279c:	a129883a 	add	r20,r20,r4
  8127a0:	633fffcc 	andi	r12,r12,65535
  8127a4:	5515883a 	add	r10,r10,r20
  8127a8:	3006d43a 	srli	r3,r6,16
  8127ac:	4b13883a 	add	r9,r9,r12
  8127b0:	2ccb383a 	mul	r5,r5,r19
  8127b4:	5100022e 	bgeu	r10,r4,8127c0 <__muldf3+0x3b8>
  8127b8:	01000074 	movhi	r4,1
  8127bc:	290b883a 	add	r5,r5,r4
  8127c0:	802ad43a 	srli	r21,r16,16
  8127c4:	843fffcc 	andi	r16,r16,65535
  8127c8:	440d383a 	mul	r6,r8,r16
  8127cc:	4565383a 	mul	r18,r8,r21
  8127d0:	8349383a 	mul	r4,r16,r13
  8127d4:	500e943a 	slli	r7,r10,16
  8127d8:	3010d43a 	srli	r8,r6,16
  8127dc:	5028d43a 	srli	r20,r10,16
  8127e0:	2489883a 	add	r4,r4,r18
  8127e4:	8abfffcc 	andi	r10,r17,65535
  8127e8:	3a95883a 	add	r10,r7,r10
  8127ec:	4119883a 	add	r12,r8,r4
  8127f0:	a169883a 	add	r20,r20,r5
  8127f4:	1a87883a 	add	r3,r3,r10
  8127f8:	6d5b383a 	mul	r13,r13,r21
  8127fc:	6480022e 	bgeu	r12,r18,812808 <__muldf3+0x400>
  812800:	01000074 	movhi	r4,1
  812804:	691b883a 	add	r13,r13,r4
  812808:	7c25383a 	mul	r18,r15,r16
  81280c:	7d4b383a 	mul	r5,r15,r21
  812810:	84cf383a 	mul	r7,r16,r19
  812814:	901ed43a 	srli	r15,r18,16
  812818:	6008d43a 	srli	r4,r12,16
  81281c:	6010943a 	slli	r8,r12,16
  812820:	394f883a 	add	r7,r7,r5
  812824:	333fffcc 	andi	r12,r6,65535
  812828:	79df883a 	add	r15,r15,r7
  81282c:	235b883a 	add	r13,r4,r13
  812830:	9d63383a 	mul	r17,r19,r21
  812834:	4309883a 	add	r4,r8,r12
  812838:	7940022e 	bgeu	r15,r5,812844 <__muldf3+0x43c>
  81283c:	01400074 	movhi	r5,1
  812840:	8963883a 	add	r17,r17,r5
  812844:	780a943a 	slli	r5,r15,16
  812848:	91bfffcc 	andi	r6,r18,65535
  81284c:	70c7883a 	add	r3,r14,r3
  812850:	298d883a 	add	r6,r5,r6
  812854:	1a8f803a 	cmpltu	r7,r3,r10
  812858:	350b883a 	add	r5,r6,r20
  81285c:	20c7883a 	add	r3,r4,r3
  812860:	3955883a 	add	r10,r7,r5
  812864:	1909803a 	cmpltu	r4,r3,r4
  812868:	6a91883a 	add	r8,r13,r10
  81286c:	780cd43a 	srli	r6,r15,16
  812870:	2219883a 	add	r12,r4,r8
  812874:	2d0b803a 	cmpltu	r5,r5,r20
  812878:	51cf803a 	cmpltu	r7,r10,r7
  81287c:	29ceb03a 	or	r7,r5,r7
  812880:	4351803a 	cmpltu	r8,r8,r13
  812884:	610b803a 	cmpltu	r5,r12,r4
  812888:	4148b03a 	or	r4,r8,r5
  81288c:	398f883a 	add	r7,r7,r6
  812890:	3909883a 	add	r4,r7,r4
  812894:	1810927a 	slli	r8,r3,9
  812898:	2449883a 	add	r4,r4,r17
  81289c:	2008927a 	slli	r4,r4,9
  8128a0:	6022d5fa 	srli	r17,r12,23
  8128a4:	1806d5fa 	srli	r3,r3,23
  8128a8:	4252b03a 	or	r9,r8,r9
  8128ac:	600a927a 	slli	r5,r12,9
  8128b0:	4810c03a 	cmpne	r8,r9,zero
  8128b4:	2462b03a 	or	r17,r4,r17
  8128b8:	40c6b03a 	or	r3,r8,r3
  8128bc:	8900402c 	andhi	r4,r17,256
  8128c0:	1950b03a 	or	r8,r3,r5
  8128c4:	20000726 	beq	r4,zero,8128e4 <__muldf3+0x4dc>
  8128c8:	4006d07a 	srli	r3,r8,1
  8128cc:	880497fa 	slli	r2,r17,31
  8128d0:	4200004c 	andi	r8,r8,1
  8128d4:	8822d07a 	srli	r17,r17,1
  8128d8:	1a10b03a 	or	r8,r3,r8
  8128dc:	1210b03a 	or	r8,r2,r8
  8128e0:	5805883a 	mov	r2,r11
  8128e4:	1140ffc4 	addi	r5,r2,1023
  8128e8:	0140440e 	bge	zero,r5,8129fc <__muldf3+0x5f4>
  8128ec:	40c001cc 	andi	r3,r8,7
  8128f0:	18000726 	beq	r3,zero,812910 <__muldf3+0x508>
  8128f4:	40c003cc 	andi	r3,r8,15
  8128f8:	01000104 	movi	r4,4
  8128fc:	19000426 	beq	r3,r4,812910 <__muldf3+0x508>
  812900:	4107883a 	add	r3,r8,r4
  812904:	1a11803a 	cmpltu	r8,r3,r8
  812908:	8a23883a 	add	r17,r17,r8
  81290c:	1811883a 	mov	r8,r3
  812910:	88c0402c 	andhi	r3,r17,256
  812914:	18000426 	beq	r3,zero,812928 <__muldf3+0x520>
  812918:	11410004 	addi	r5,r2,1024
  81291c:	00bfc034 	movhi	r2,65280
  812920:	10bfffc4 	addi	r2,r2,-1
  812924:	88a2703a 	and	r17,r17,r2
  812928:	0081ff84 	movi	r2,2046
  81292c:	117f6416 	blt	r2,r5,8126c0 <__alt_mem_onchip_mem+0xff80a6c0>
  812930:	8828977a 	slli	r20,r17,29
  812934:	4010d0fa 	srli	r8,r8,3
  812938:	8822927a 	slli	r17,r17,9
  81293c:	2881ffcc 	andi	r2,r5,2047
  812940:	a228b03a 	or	r20,r20,r8
  812944:	880ad33a 	srli	r5,r17,12
  812948:	b02b883a 	mov	r21,r22
  81294c:	003f0d06 	br	812584 <__alt_mem_onchip_mem+0xff80a584>
  812950:	8080022c 	andhi	r2,r16,8
  812954:	10000926 	beq	r2,zero,81297c <__muldf3+0x574>
  812958:	8880022c 	andhi	r2,r17,8
  81295c:	1000071e 	bne	r2,zero,81297c <__muldf3+0x574>
  812960:	00800434 	movhi	r2,16
  812964:	89400234 	orhi	r5,r17,8
  812968:	10bfffc4 	addi	r2,r2,-1
  81296c:	b82b883a 	mov	r21,r23
  812970:	288a703a 	and	r5,r5,r2
  812974:	4029883a 	mov	r20,r8
  812978:	003f6806 	br	81271c <__alt_mem_onchip_mem+0xff80a71c>
  81297c:	00800434 	movhi	r2,16
  812980:	81400234 	orhi	r5,r16,8
  812984:	10bfffc4 	addi	r2,r2,-1
  812988:	288a703a 	and	r5,r5,r2
  81298c:	003f6306 	br	81271c <__alt_mem_onchip_mem+0xff80a71c>
  812990:	147ff604 	addi	r17,r2,-40
  812994:	3462983a 	sll	r17,r6,r17
  812998:	0011883a 	mov	r8,zero
  81299c:	003f4406 	br	8126b0 <__alt_mem_onchip_mem+0xff80a6b0>
  8129a0:	3009883a 	mov	r4,r6
  8129a4:	d9800215 	stw	r6,8(sp)
  8129a8:	da400115 	stw	r9,4(sp)
  8129ac:	da800015 	stw	r10,0(sp)
  8129b0:	0806c8c0 	call	806c8c <__clzsi2>
  8129b4:	10800804 	addi	r2,r2,32
  8129b8:	da800017 	ldw	r10,0(sp)
  8129bc:	da400117 	ldw	r9,4(sp)
  8129c0:	d9800217 	ldw	r6,8(sp)
  8129c4:	003f3006 	br	812688 <__alt_mem_onchip_mem+0xff80a688>
  8129c8:	143ff604 	addi	r16,r2,-40
  8129cc:	9c20983a 	sll	r16,r19,r16
  8129d0:	0029883a 	mov	r20,zero
  8129d4:	003f1606 	br	812630 <__alt_mem_onchip_mem+0xff80a630>
  8129d8:	d9800215 	stw	r6,8(sp)
  8129dc:	d9c00015 	stw	r7,0(sp)
  8129e0:	da400115 	stw	r9,4(sp)
  8129e4:	0806c8c0 	call	806c8c <__clzsi2>
  8129e8:	10800804 	addi	r2,r2,32
  8129ec:	da400117 	ldw	r9,4(sp)
  8129f0:	d9c00017 	ldw	r7,0(sp)
  8129f4:	d9800217 	ldw	r6,8(sp)
  8129f8:	003f0306 	br	812608 <__alt_mem_onchip_mem+0xff80a608>
  8129fc:	00c00044 	movi	r3,1
  812a00:	1947c83a 	sub	r3,r3,r5
  812a04:	00800e04 	movi	r2,56
  812a08:	10feda16 	blt	r2,r3,812574 <__alt_mem_onchip_mem+0xff80a574>
  812a0c:	008007c4 	movi	r2,31
  812a10:	10c01b16 	blt	r2,r3,812a80 <__muldf3+0x678>
  812a14:	00800804 	movi	r2,32
  812a18:	10c5c83a 	sub	r2,r2,r3
  812a1c:	888a983a 	sll	r5,r17,r2
  812a20:	40c8d83a 	srl	r4,r8,r3
  812a24:	4084983a 	sll	r2,r8,r2
  812a28:	88e2d83a 	srl	r17,r17,r3
  812a2c:	2906b03a 	or	r3,r5,r4
  812a30:	1004c03a 	cmpne	r2,r2,zero
  812a34:	1886b03a 	or	r3,r3,r2
  812a38:	188001cc 	andi	r2,r3,7
  812a3c:	10000726 	beq	r2,zero,812a5c <__muldf3+0x654>
  812a40:	188003cc 	andi	r2,r3,15
  812a44:	01000104 	movi	r4,4
  812a48:	11000426 	beq	r2,r4,812a5c <__muldf3+0x654>
  812a4c:	1805883a 	mov	r2,r3
  812a50:	10c00104 	addi	r3,r2,4
  812a54:	1885803a 	cmpltu	r2,r3,r2
  812a58:	88a3883a 	add	r17,r17,r2
  812a5c:	8880202c 	andhi	r2,r17,128
  812a60:	10001c26 	beq	r2,zero,812ad4 <__muldf3+0x6cc>
  812a64:	b02b883a 	mov	r21,r22
  812a68:	00800044 	movi	r2,1
  812a6c:	000b883a 	mov	r5,zero
  812a70:	0029883a 	mov	r20,zero
  812a74:	003ec306 	br	812584 <__alt_mem_onchip_mem+0xff80a584>
  812a78:	5805883a 	mov	r2,r11
  812a7c:	003f9906 	br	8128e4 <__alt_mem_onchip_mem+0xff80a8e4>
  812a80:	00bff844 	movi	r2,-31
  812a84:	1145c83a 	sub	r2,r2,r5
  812a88:	8888d83a 	srl	r4,r17,r2
  812a8c:	00800804 	movi	r2,32
  812a90:	18801a26 	beq	r3,r2,812afc <__muldf3+0x6f4>
  812a94:	00801004 	movi	r2,64
  812a98:	10c5c83a 	sub	r2,r2,r3
  812a9c:	8884983a 	sll	r2,r17,r2
  812aa0:	1204b03a 	or	r2,r2,r8
  812aa4:	1004c03a 	cmpne	r2,r2,zero
  812aa8:	2084b03a 	or	r2,r4,r2
  812aac:	144001cc 	andi	r17,r2,7
  812ab0:	88000d1e 	bne	r17,zero,812ae8 <__muldf3+0x6e0>
  812ab4:	000b883a 	mov	r5,zero
  812ab8:	1028d0fa 	srli	r20,r2,3
  812abc:	b02b883a 	mov	r21,r22
  812ac0:	0005883a 	mov	r2,zero
  812ac4:	a468b03a 	or	r20,r20,r17
  812ac8:	003eae06 	br	812584 <__alt_mem_onchip_mem+0xff80a584>
  812acc:	1007883a 	mov	r3,r2
  812ad0:	0023883a 	mov	r17,zero
  812ad4:	880a927a 	slli	r5,r17,9
  812ad8:	1805883a 	mov	r2,r3
  812adc:	8822977a 	slli	r17,r17,29
  812ae0:	280ad33a 	srli	r5,r5,12
  812ae4:	003ff406 	br	812ab8 <__alt_mem_onchip_mem+0xff80aab8>
  812ae8:	10c003cc 	andi	r3,r2,15
  812aec:	01000104 	movi	r4,4
  812af0:	193ff626 	beq	r3,r4,812acc <__alt_mem_onchip_mem+0xff80aacc>
  812af4:	0023883a 	mov	r17,zero
  812af8:	003fd506 	br	812a50 <__alt_mem_onchip_mem+0xff80aa50>
  812afc:	0005883a 	mov	r2,zero
  812b00:	003fe706 	br	812aa0 <__alt_mem_onchip_mem+0xff80aaa0>
  812b04:	00800434 	movhi	r2,16
  812b08:	89400234 	orhi	r5,r17,8
  812b0c:	10bfffc4 	addi	r2,r2,-1
  812b10:	b02b883a 	mov	r21,r22
  812b14:	288a703a 	and	r5,r5,r2
  812b18:	4029883a 	mov	r20,r8
  812b1c:	003eff06 	br	81271c <__alt_mem_onchip_mem+0xff80a71c>

00812b20 <__fixdfsi>:
  812b20:	280cd53a 	srli	r6,r5,20
  812b24:	00c00434 	movhi	r3,16
  812b28:	18ffffc4 	addi	r3,r3,-1
  812b2c:	3181ffcc 	andi	r6,r6,2047
  812b30:	01c0ff84 	movi	r7,1022
  812b34:	28c6703a 	and	r3,r5,r3
  812b38:	280ad7fa 	srli	r5,r5,31
  812b3c:	3980120e 	bge	r7,r6,812b88 <__fixdfsi+0x68>
  812b40:	00810744 	movi	r2,1053
  812b44:	11800c16 	blt	r2,r6,812b78 <__fixdfsi+0x58>
  812b48:	00810cc4 	movi	r2,1075
  812b4c:	1185c83a 	sub	r2,r2,r6
  812b50:	01c007c4 	movi	r7,31
  812b54:	18c00434 	orhi	r3,r3,16
  812b58:	38800d16 	blt	r7,r2,812b90 <__fixdfsi+0x70>
  812b5c:	31befb44 	addi	r6,r6,-1043
  812b60:	2084d83a 	srl	r2,r4,r2
  812b64:	1986983a 	sll	r3,r3,r6
  812b68:	1884b03a 	or	r2,r3,r2
  812b6c:	28000726 	beq	r5,zero,812b8c <__fixdfsi+0x6c>
  812b70:	0085c83a 	sub	r2,zero,r2
  812b74:	f800283a 	ret
  812b78:	00a00034 	movhi	r2,32768
  812b7c:	10bfffc4 	addi	r2,r2,-1
  812b80:	2885883a 	add	r2,r5,r2
  812b84:	f800283a 	ret
  812b88:	0005883a 	mov	r2,zero
  812b8c:	f800283a 	ret
  812b90:	008104c4 	movi	r2,1043
  812b94:	1185c83a 	sub	r2,r2,r6
  812b98:	1884d83a 	srl	r2,r3,r2
  812b9c:	003ff306 	br	812b6c <__alt_mem_onchip_mem+0xff80ab6c>

00812ba0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  812ba0:	defff504 	addi	sp,sp,-44
  812ba4:	df000a15 	stw	fp,40(sp)
  812ba8:	df000a04 	addi	fp,sp,40
  812bac:	e13ffc15 	stw	r4,-16(fp)
  812bb0:	e17ffd15 	stw	r5,-12(fp)
  812bb4:	e1bffe15 	stw	r6,-8(fp)
  812bb8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  812bbc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  812bc0:	d0a75c17 	ldw	r2,-25232(gp)
  
  if (alt_ticks_per_second ())
  812bc4:	10003c26 	beq	r2,zero,812cb8 <alt_alarm_start+0x118>
  {
    if (alarm)
  812bc8:	e0bffc17 	ldw	r2,-16(fp)
  812bcc:	10003826 	beq	r2,zero,812cb0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  812bd0:	e0bffc17 	ldw	r2,-16(fp)
  812bd4:	e0fffe17 	ldw	r3,-8(fp)
  812bd8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  812bdc:	e0bffc17 	ldw	r2,-16(fp)
  812be0:	e0ffff17 	ldw	r3,-4(fp)
  812be4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812be8:	0005303a 	rdctl	r2,status
  812bec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812bf0:	e0fff917 	ldw	r3,-28(fp)
  812bf4:	00bfff84 	movi	r2,-2
  812bf8:	1884703a 	and	r2,r3,r2
  812bfc:	1001703a 	wrctl	status,r2
  
  return context;
  812c00:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  812c04:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812c08:	d0a75d17 	ldw	r2,-25228(gp)
      
      current_nticks = alt_nticks();
  812c0c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  812c10:	e0fffd17 	ldw	r3,-12(fp)
  812c14:	e0bff617 	ldw	r2,-40(fp)
  812c18:	1885883a 	add	r2,r3,r2
  812c1c:	10c00044 	addi	r3,r2,1
  812c20:	e0bffc17 	ldw	r2,-16(fp)
  812c24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  812c28:	e0bffc17 	ldw	r2,-16(fp)
  812c2c:	10c00217 	ldw	r3,8(r2)
  812c30:	e0bff617 	ldw	r2,-40(fp)
  812c34:	1880042e 	bgeu	r3,r2,812c48 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  812c38:	e0bffc17 	ldw	r2,-16(fp)
  812c3c:	00c00044 	movi	r3,1
  812c40:	10c00405 	stb	r3,16(r2)
  812c44:	00000206 	br	812c50 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  812c48:	e0bffc17 	ldw	r2,-16(fp)
  812c4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  812c50:	e0bffc17 	ldw	r2,-16(fp)
  812c54:	d0e00e04 	addi	r3,gp,-32712
  812c58:	e0fffa15 	stw	r3,-24(fp)
  812c5c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812c60:	e0bffb17 	ldw	r2,-20(fp)
  812c64:	e0fffa17 	ldw	r3,-24(fp)
  812c68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  812c6c:	e0bffa17 	ldw	r2,-24(fp)
  812c70:	10c00017 	ldw	r3,0(r2)
  812c74:	e0bffb17 	ldw	r2,-20(fp)
  812c78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812c7c:	e0bffa17 	ldw	r2,-24(fp)
  812c80:	10800017 	ldw	r2,0(r2)
  812c84:	e0fffb17 	ldw	r3,-20(fp)
  812c88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  812c8c:	e0bffa17 	ldw	r2,-24(fp)
  812c90:	e0fffb17 	ldw	r3,-20(fp)
  812c94:	10c00015 	stw	r3,0(r2)
  812c98:	e0bff817 	ldw	r2,-32(fp)
  812c9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ca0:	e0bff717 	ldw	r2,-36(fp)
  812ca4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  812ca8:	0005883a 	mov	r2,zero
  812cac:	00000306 	br	812cbc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  812cb0:	00bffa84 	movi	r2,-22
  812cb4:	00000106 	br	812cbc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  812cb8:	00bfde84 	movi	r2,-134
  }
}
  812cbc:	e037883a 	mov	sp,fp
  812cc0:	df000017 	ldw	fp,0(sp)
  812cc4:	dec00104 	addi	sp,sp,4
  812cc8:	f800283a 	ret

00812ccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812ccc:	defffe04 	addi	sp,sp,-8
  812cd0:	dfc00115 	stw	ra,4(sp)
  812cd4:	df000015 	stw	fp,0(sp)
  812cd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812cdc:	d0a00b17 	ldw	r2,-32724(gp)
  812ce0:	10000326 	beq	r2,zero,812cf0 <alt_get_errno+0x24>
  812ce4:	d0a00b17 	ldw	r2,-32724(gp)
  812ce8:	103ee83a 	callr	r2
  812cec:	00000106 	br	812cf4 <alt_get_errno+0x28>
  812cf0:	d0a75104 	addi	r2,gp,-25276
}
  812cf4:	e037883a 	mov	sp,fp
  812cf8:	dfc00117 	ldw	ra,4(sp)
  812cfc:	df000017 	ldw	fp,0(sp)
  812d00:	dec00204 	addi	sp,sp,8
  812d04:	f800283a 	ret

00812d08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  812d08:	defffb04 	addi	sp,sp,-20
  812d0c:	dfc00415 	stw	ra,16(sp)
  812d10:	df000315 	stw	fp,12(sp)
  812d14:	df000304 	addi	fp,sp,12
  812d18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  812d1c:	e0bfff17 	ldw	r2,-4(fp)
  812d20:	10000616 	blt	r2,zero,812d3c <close+0x34>
  812d24:	e0bfff17 	ldw	r2,-4(fp)
  812d28:	10c00324 	muli	r3,r2,12
  812d2c:	00802074 	movhi	r2,129
  812d30:	109f9304 	addi	r2,r2,32332
  812d34:	1885883a 	add	r2,r3,r2
  812d38:	00000106 	br	812d40 <close+0x38>
  812d3c:	0005883a 	mov	r2,zero
  812d40:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  812d44:	e0bffd17 	ldw	r2,-12(fp)
  812d48:	10001926 	beq	r2,zero,812db0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  812d4c:	e0bffd17 	ldw	r2,-12(fp)
  812d50:	10800017 	ldw	r2,0(r2)
  812d54:	10800417 	ldw	r2,16(r2)
  812d58:	10000626 	beq	r2,zero,812d74 <close+0x6c>
  812d5c:	e0bffd17 	ldw	r2,-12(fp)
  812d60:	10800017 	ldw	r2,0(r2)
  812d64:	10800417 	ldw	r2,16(r2)
  812d68:	e13ffd17 	ldw	r4,-12(fp)
  812d6c:	103ee83a 	callr	r2
  812d70:	00000106 	br	812d78 <close+0x70>
  812d74:	0005883a 	mov	r2,zero
  812d78:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  812d7c:	e13fff17 	ldw	r4,-4(fp)
  812d80:	081379c0 	call	81379c <alt_release_fd>
    if (rval < 0)
  812d84:	e0bffe17 	ldw	r2,-8(fp)
  812d88:	1000070e 	bge	r2,zero,812da8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  812d8c:	0812ccc0 	call	812ccc <alt_get_errno>
  812d90:	1007883a 	mov	r3,r2
  812d94:	e0bffe17 	ldw	r2,-8(fp)
  812d98:	0085c83a 	sub	r2,zero,r2
  812d9c:	18800015 	stw	r2,0(r3)
      return -1;
  812da0:	00bfffc4 	movi	r2,-1
  812da4:	00000706 	br	812dc4 <close+0xbc>
    }
    return 0;
  812da8:	0005883a 	mov	r2,zero
  812dac:	00000506 	br	812dc4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812db0:	0812ccc0 	call	812ccc <alt_get_errno>
  812db4:	1007883a 	mov	r3,r2
  812db8:	00801444 	movi	r2,81
  812dbc:	18800015 	stw	r2,0(r3)
    return -1;
  812dc0:	00bfffc4 	movi	r2,-1
  }
}
  812dc4:	e037883a 	mov	sp,fp
  812dc8:	dfc00117 	ldw	ra,4(sp)
  812dcc:	df000017 	ldw	fp,0(sp)
  812dd0:	dec00204 	addi	sp,sp,8
  812dd4:	f800283a 	ret

00812dd8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  812dd8:	defffc04 	addi	sp,sp,-16
  812ddc:	df000315 	stw	fp,12(sp)
  812de0:	df000304 	addi	fp,sp,12
  812de4:	e13ffd15 	stw	r4,-12(fp)
  812de8:	e17ffe15 	stw	r5,-8(fp)
  812dec:	e1bfff15 	stw	r6,-4(fp)
  return len;
  812df0:	e0bfff17 	ldw	r2,-4(fp)
}
  812df4:	e037883a 	mov	sp,fp
  812df8:	df000017 	ldw	fp,0(sp)
  812dfc:	dec00104 	addi	sp,sp,4
  812e00:	f800283a 	ret

00812e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812e04:	defffe04 	addi	sp,sp,-8
  812e08:	dfc00115 	stw	ra,4(sp)
  812e0c:	df000015 	stw	fp,0(sp)
  812e10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812e14:	d0a00b17 	ldw	r2,-32724(gp)
  812e18:	10000326 	beq	r2,zero,812e28 <alt_get_errno+0x24>
  812e1c:	d0a00b17 	ldw	r2,-32724(gp)
  812e20:	103ee83a 	callr	r2
  812e24:	00000106 	br	812e2c <alt_get_errno+0x28>
  812e28:	d0a75104 	addi	r2,gp,-25276
}
  812e2c:	e037883a 	mov	sp,fp
  812e30:	dfc00117 	ldw	ra,4(sp)
  812e34:	df000017 	ldw	fp,0(sp)
  812e38:	dec00204 	addi	sp,sp,8
  812e3c:	f800283a 	ret

00812e40 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  812e40:	defffb04 	addi	sp,sp,-20
  812e44:	dfc00415 	stw	ra,16(sp)
  812e48:	df000315 	stw	fp,12(sp)
  812e4c:	df000304 	addi	fp,sp,12
  812e50:	e13ffe15 	stw	r4,-8(fp)
  812e54:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812e58:	e0bffe17 	ldw	r2,-8(fp)
  812e5c:	10000616 	blt	r2,zero,812e78 <fstat+0x38>
  812e60:	e0bffe17 	ldw	r2,-8(fp)
  812e64:	10c00324 	muli	r3,r2,12
  812e68:	00802074 	movhi	r2,129
  812e6c:	109f9304 	addi	r2,r2,32332
  812e70:	1885883a 	add	r2,r3,r2
  812e74:	00000106 	br	812e7c <fstat+0x3c>
  812e78:	0005883a 	mov	r2,zero
  812e7c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  812e80:	e0bffd17 	ldw	r2,-12(fp)
  812e84:	10001026 	beq	r2,zero,812ec8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  812e88:	e0bffd17 	ldw	r2,-12(fp)
  812e8c:	10800017 	ldw	r2,0(r2)
  812e90:	10800817 	ldw	r2,32(r2)
  812e94:	10000726 	beq	r2,zero,812eb4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  812e98:	e0bffd17 	ldw	r2,-12(fp)
  812e9c:	10800017 	ldw	r2,0(r2)
  812ea0:	10800817 	ldw	r2,32(r2)
  812ea4:	e17fff17 	ldw	r5,-4(fp)
  812ea8:	e13ffd17 	ldw	r4,-12(fp)
  812eac:	103ee83a 	callr	r2
  812eb0:	00000a06 	br	812edc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  812eb4:	e0bfff17 	ldw	r2,-4(fp)
  812eb8:	00c80004 	movi	r3,8192
  812ebc:	10c00115 	stw	r3,4(r2)
      return 0;
  812ec0:	0005883a 	mov	r2,zero
  812ec4:	00000506 	br	812edc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812ec8:	0812e040 	call	812e04 <alt_get_errno>
  812ecc:	1007883a 	mov	r3,r2
  812ed0:	00801444 	movi	r2,81
  812ed4:	18800015 	stw	r2,0(r3)
    return -1;
  812ed8:	00bfffc4 	movi	r2,-1
  }
}
  812edc:	e037883a 	mov	sp,fp
  812ee0:	dfc00117 	ldw	ra,4(sp)
  812ee4:	df000017 	ldw	fp,0(sp)
  812ee8:	dec00204 	addi	sp,sp,8
  812eec:	f800283a 	ret

00812ef0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  812ef0:	defff004 	addi	sp,sp,-64
  812ef4:	df000f15 	stw	fp,60(sp)
  812ef8:	df000f04 	addi	fp,sp,60
  812efc:	e13ffd15 	stw	r4,-12(fp)
  812f00:	e17ffe15 	stw	r5,-8(fp)
  812f04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  812f08:	00bffa84 	movi	r2,-22
  812f0c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812f10:	e0bffd17 	ldw	r2,-12(fp)
  812f14:	10800828 	cmpgeui	r2,r2,32
  812f18:	1000501e 	bne	r2,zero,81305c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f1c:	0005303a 	rdctl	r2,status
  812f20:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f24:	e0fff617 	ldw	r3,-40(fp)
  812f28:	00bfff84 	movi	r2,-2
  812f2c:	1884703a 	and	r2,r3,r2
  812f30:	1001703a 	wrctl	status,r2
  
  return context;
  812f34:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  812f38:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  812f3c:	008020b4 	movhi	r2,130
  812f40:	10abed04 	addi	r2,r2,-20556
  812f44:	e0fffd17 	ldw	r3,-12(fp)
  812f48:	180690fa 	slli	r3,r3,3
  812f4c:	10c5883a 	add	r2,r2,r3
  812f50:	e0ffff17 	ldw	r3,-4(fp)
  812f54:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  812f58:	008020b4 	movhi	r2,130
  812f5c:	10abed04 	addi	r2,r2,-20556
  812f60:	e0fffd17 	ldw	r3,-12(fp)
  812f64:	180690fa 	slli	r3,r3,3
  812f68:	10c5883a 	add	r2,r2,r3
  812f6c:	10800104 	addi	r2,r2,4
  812f70:	e0fffe17 	ldw	r3,-8(fp)
  812f74:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  812f78:	e0bfff17 	ldw	r2,-4(fp)
  812f7c:	10001926 	beq	r2,zero,812fe4 <alt_irq_register+0xf4>
  812f80:	e0bffd17 	ldw	r2,-12(fp)
  812f84:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f88:	0005303a 	rdctl	r2,status
  812f8c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f90:	e0fff717 	ldw	r3,-36(fp)
  812f94:	00bfff84 	movi	r2,-2
  812f98:	1884703a 	and	r2,r3,r2
  812f9c:	1001703a 	wrctl	status,r2
  
  return context;
  812fa0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812fa4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  812fa8:	00c00044 	movi	r3,1
  812fac:	e0bff217 	ldw	r2,-56(fp)
  812fb0:	1884983a 	sll	r2,r3,r2
  812fb4:	1007883a 	mov	r3,r2
  812fb8:	d0a75817 	ldw	r2,-25248(gp)
  812fbc:	1884b03a 	or	r2,r3,r2
  812fc0:	d0a75815 	stw	r2,-25248(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812fc4:	d0a75817 	ldw	r2,-25248(gp)
  812fc8:	100170fa 	wrctl	ienable,r2
  812fcc:	e0bff817 	ldw	r2,-32(fp)
  812fd0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812fd4:	e0bff917 	ldw	r2,-28(fp)
  812fd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812fdc:	0005883a 	mov	r2,zero
  812fe0:	00001906 	br	813048 <alt_irq_register+0x158>
  812fe4:	e0bffd17 	ldw	r2,-12(fp)
  812fe8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812fec:	0005303a 	rdctl	r2,status
  812ff0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ff4:	e0fffa17 	ldw	r3,-24(fp)
  812ff8:	00bfff84 	movi	r2,-2
  812ffc:	1884703a 	and	r2,r3,r2
  813000:	1001703a 	wrctl	status,r2
  
  return context;
  813004:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813008:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  81300c:	00c00044 	movi	r3,1
  813010:	e0bff417 	ldw	r2,-48(fp)
  813014:	1884983a 	sll	r2,r3,r2
  813018:	0084303a 	nor	r2,zero,r2
  81301c:	1007883a 	mov	r3,r2
  813020:	d0a75817 	ldw	r2,-25248(gp)
  813024:	1884703a 	and	r2,r3,r2
  813028:	d0a75815 	stw	r2,-25248(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81302c:	d0a75817 	ldw	r2,-25248(gp)
  813030:	100170fa 	wrctl	ienable,r2
  813034:	e0bffb17 	ldw	r2,-20(fp)
  813038:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81303c:	e0bffc17 	ldw	r2,-16(fp)
  813040:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813044:	0005883a 	mov	r2,zero
  813048:	e0bff115 	stw	r2,-60(fp)
  81304c:	e0bff317 	ldw	r2,-52(fp)
  813050:	e0bff515 	stw	r2,-44(fp)
  813054:	e0bff517 	ldw	r2,-44(fp)
  813058:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81305c:	e0bff117 	ldw	r2,-60(fp)
}
  813060:	e037883a 	mov	sp,fp
  813064:	df000017 	ldw	fp,0(sp)
  813068:	dec00104 	addi	sp,sp,4
  81306c:	f800283a 	ret

00813070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813070:	defffe04 	addi	sp,sp,-8
  813074:	dfc00115 	stw	ra,4(sp)
  813078:	df000015 	stw	fp,0(sp)
  81307c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813080:	d0a00b17 	ldw	r2,-32724(gp)
  813084:	10000326 	beq	r2,zero,813094 <alt_get_errno+0x24>
  813088:	d0a00b17 	ldw	r2,-32724(gp)
  81308c:	103ee83a 	callr	r2
  813090:	00000106 	br	813098 <alt_get_errno+0x28>
  813094:	d0a75104 	addi	r2,gp,-25276
}
  813098:	e037883a 	mov	sp,fp
  81309c:	dfc00117 	ldw	ra,4(sp)
  8130a0:	df000017 	ldw	fp,0(sp)
  8130a4:	dec00204 	addi	sp,sp,8
  8130a8:	f800283a 	ret

008130ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8130ac:	deffed04 	addi	sp,sp,-76
  8130b0:	dfc01215 	stw	ra,72(sp)
  8130b4:	df001115 	stw	fp,68(sp)
  8130b8:	df001104 	addi	fp,sp,68
  8130bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8130c0:	e0bfff17 	ldw	r2,-4(fp)
  8130c4:	10000616 	blt	r2,zero,8130e0 <isatty+0x34>
  8130c8:	e0bfff17 	ldw	r2,-4(fp)
  8130cc:	10c00324 	muli	r3,r2,12
  8130d0:	00802074 	movhi	r2,129
  8130d4:	109f9304 	addi	r2,r2,32332
  8130d8:	1885883a 	add	r2,r3,r2
  8130dc:	00000106 	br	8130e4 <isatty+0x38>
  8130e0:	0005883a 	mov	r2,zero
  8130e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8130e8:	e0bfef17 	ldw	r2,-68(fp)
  8130ec:	10000e26 	beq	r2,zero,813128 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8130f0:	e0bfef17 	ldw	r2,-68(fp)
  8130f4:	10800017 	ldw	r2,0(r2)
  8130f8:	10800817 	ldw	r2,32(r2)
  8130fc:	1000021e 	bne	r2,zero,813108 <isatty+0x5c>
    {
      return 1;
  813100:	00800044 	movi	r2,1
  813104:	00000d06 	br	81313c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  813108:	e0bff004 	addi	r2,fp,-64
  81310c:	100b883a 	mov	r5,r2
  813110:	e13fff17 	ldw	r4,-4(fp)
  813114:	0812e400 	call	812e40 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  813118:	e0bff117 	ldw	r2,-60(fp)
  81311c:	10880020 	cmpeqi	r2,r2,8192
  813120:	10803fcc 	andi	r2,r2,255
  813124:	00000506 	br	81313c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  813128:	08130700 	call	813070 <alt_get_errno>
  81312c:	1007883a 	mov	r3,r2
  813130:	00801444 	movi	r2,81
  813134:	18800015 	stw	r2,0(r3)
    return 0;
  813138:	0005883a 	mov	r2,zero
  }
}
  81313c:	e037883a 	mov	sp,fp
  813140:	dfc00117 	ldw	ra,4(sp)
  813144:	df000017 	ldw	fp,0(sp)
  813148:	dec00204 	addi	sp,sp,8
  81314c:	f800283a 	ret

00813150 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  813150:	defffc04 	addi	sp,sp,-16
  813154:	df000315 	stw	fp,12(sp)
  813158:	df000304 	addi	fp,sp,12
  81315c:	e13ffd15 	stw	r4,-12(fp)
  813160:	e17ffe15 	stw	r5,-8(fp)
  813164:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  813168:	e0fffe17 	ldw	r3,-8(fp)
  81316c:	e0bffd17 	ldw	r2,-12(fp)
  813170:	18800c26 	beq	r3,r2,8131a4 <alt_load_section+0x54>
  {
    while( to != end )
  813174:	00000806 	br	813198 <alt_load_section+0x48>
    {
      *to++ = *from++;
  813178:	e0bffe17 	ldw	r2,-8(fp)
  81317c:	10c00104 	addi	r3,r2,4
  813180:	e0fffe15 	stw	r3,-8(fp)
  813184:	e0fffd17 	ldw	r3,-12(fp)
  813188:	19000104 	addi	r4,r3,4
  81318c:	e13ffd15 	stw	r4,-12(fp)
  813190:	18c00017 	ldw	r3,0(r3)
  813194:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  813198:	e0fffe17 	ldw	r3,-8(fp)
  81319c:	e0bfff17 	ldw	r2,-4(fp)
  8131a0:	18bff51e 	bne	r3,r2,813178 <__alt_mem_onchip_mem+0xff80b178>
    {
      *to++ = *from++;
    }
  }
}
  8131a4:	0001883a 	nop
  8131a8:	e037883a 	mov	sp,fp
  8131ac:	df000017 	ldw	fp,0(sp)
  8131b0:	dec00104 	addi	sp,sp,4
  8131b4:	f800283a 	ret

008131b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8131b8:	defffe04 	addi	sp,sp,-8
  8131bc:	dfc00115 	stw	ra,4(sp)
  8131c0:	df000015 	stw	fp,0(sp)
  8131c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8131c8:	018020b4 	movhi	r6,130
  8131cc:	31a49604 	addi	r6,r6,-28072
  8131d0:	01402074 	movhi	r5,129
  8131d4:	295d6004 	addi	r5,r5,30080
  8131d8:	010020b4 	movhi	r4,130
  8131dc:	21249604 	addi	r4,r4,-28072
  8131e0:	08131500 	call	813150 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8131e4:	01802034 	movhi	r6,128
  8131e8:	31809104 	addi	r6,r6,580
  8131ec:	01402034 	movhi	r5,128
  8131f0:	29400804 	addi	r5,r5,32
  8131f4:	01002034 	movhi	r4,128
  8131f8:	21000804 	addi	r4,r4,32
  8131fc:	08131500 	call	813150 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  813200:	01802074 	movhi	r6,129
  813204:	319d6004 	addi	r6,r6,30080
  813208:	01402074 	movhi	r5,129
  81320c:	295b9004 	addi	r5,r5,28224
  813210:	01002074 	movhi	r4,129
  813214:	211b9004 	addi	r4,r4,28224
  813218:	08131500 	call	813150 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  81321c:	0815f9c0 	call	815f9c <alt_dcache_flush_all>
  alt_icache_flush_all();
  813220:	08163c00 	call	8163c0 <alt_icache_flush_all>
}
  813224:	0001883a 	nop
  813228:	e037883a 	mov	sp,fp
  81322c:	dfc00117 	ldw	ra,4(sp)
  813230:	df000017 	ldw	fp,0(sp)
  813234:	dec00204 	addi	sp,sp,8
  813238:	f800283a 	ret

0081323c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81323c:	defffe04 	addi	sp,sp,-8
  813240:	dfc00115 	stw	ra,4(sp)
  813244:	df000015 	stw	fp,0(sp)
  813248:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81324c:	d0a00b17 	ldw	r2,-32724(gp)
  813250:	10000326 	beq	r2,zero,813260 <alt_get_errno+0x24>
  813254:	d0a00b17 	ldw	r2,-32724(gp)
  813258:	103ee83a 	callr	r2
  81325c:	00000106 	br	813264 <alt_get_errno+0x28>
  813260:	d0a75104 	addi	r2,gp,-25276
}
  813264:	e037883a 	mov	sp,fp
  813268:	dfc00117 	ldw	ra,4(sp)
  81326c:	df000017 	ldw	fp,0(sp)
  813270:	dec00204 	addi	sp,sp,8
  813274:	f800283a 	ret

00813278 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  813278:	defff904 	addi	sp,sp,-28
  81327c:	dfc00615 	stw	ra,24(sp)
  813280:	df000515 	stw	fp,20(sp)
  813284:	df000504 	addi	fp,sp,20
  813288:	e13ffd15 	stw	r4,-12(fp)
  81328c:	e17ffe15 	stw	r5,-8(fp)
  813290:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  813294:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813298:	e0bffd17 	ldw	r2,-12(fp)
  81329c:	10000616 	blt	r2,zero,8132b8 <lseek+0x40>
  8132a0:	e0bffd17 	ldw	r2,-12(fp)
  8132a4:	10c00324 	muli	r3,r2,12
  8132a8:	00802074 	movhi	r2,129
  8132ac:	109f9304 	addi	r2,r2,32332
  8132b0:	1885883a 	add	r2,r3,r2
  8132b4:	00000106 	br	8132bc <lseek+0x44>
  8132b8:	0005883a 	mov	r2,zero
  8132bc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8132c0:	e0bffc17 	ldw	r2,-16(fp)
  8132c4:	10001026 	beq	r2,zero,813308 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8132c8:	e0bffc17 	ldw	r2,-16(fp)
  8132cc:	10800017 	ldw	r2,0(r2)
  8132d0:	10800717 	ldw	r2,28(r2)
  8132d4:	10000926 	beq	r2,zero,8132fc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8132d8:	e0bffc17 	ldw	r2,-16(fp)
  8132dc:	10800017 	ldw	r2,0(r2)
  8132e0:	10800717 	ldw	r2,28(r2)
  8132e4:	e1bfff17 	ldw	r6,-4(fp)
  8132e8:	e17ffe17 	ldw	r5,-8(fp)
  8132ec:	e13ffc17 	ldw	r4,-16(fp)
  8132f0:	103ee83a 	callr	r2
  8132f4:	e0bffb15 	stw	r2,-20(fp)
  8132f8:	00000506 	br	813310 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8132fc:	00bfde84 	movi	r2,-134
  813300:	e0bffb15 	stw	r2,-20(fp)
  813304:	00000206 	br	813310 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  813308:	00bfebc4 	movi	r2,-81
  81330c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  813310:	e0bffb17 	ldw	r2,-20(fp)
  813314:	1000070e 	bge	r2,zero,813334 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  813318:	081323c0 	call	81323c <alt_get_errno>
  81331c:	1007883a 	mov	r3,r2
  813320:	e0bffb17 	ldw	r2,-20(fp)
  813324:	0085c83a 	sub	r2,zero,r2
  813328:	18800015 	stw	r2,0(r3)
    rc = -1;
  81332c:	00bfffc4 	movi	r2,-1
  813330:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  813334:	e0bffb17 	ldw	r2,-20(fp)
}
  813338:	e037883a 	mov	sp,fp
  81333c:	dfc00117 	ldw	ra,4(sp)
  813340:	df000017 	ldw	fp,0(sp)
  813344:	dec00204 	addi	sp,sp,8
  813348:	f800283a 	ret

0081334c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81334c:	defffd04 	addi	sp,sp,-12
  813350:	dfc00215 	stw	ra,8(sp)
  813354:	df000115 	stw	fp,4(sp)
  813358:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81335c:	0009883a 	mov	r4,zero
  813360:	0813bbc0 	call	813bbc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  813364:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  813368:	0813bf40 	call	813bf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  81336c:	01802074 	movhi	r6,129
  813370:	319cb204 	addi	r6,r6,29384
  813374:	01402074 	movhi	r5,129
  813378:	295cb204 	addi	r5,r5,29384
  81337c:	01002074 	movhi	r4,129
  813380:	211cb204 	addi	r4,r4,29384
  813384:	08167580 	call	816758 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  813388:	08160c40 	call	8160c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  81338c:	01002074 	movhi	r4,129
  813390:	21184904 	addi	r4,r4,24868
  813394:	0816aac0 	call	816aac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  813398:	d0a75917 	ldw	r2,-25244(gp)
  81339c:	d0e75a17 	ldw	r3,-25240(gp)
  8133a0:	d1275b17 	ldw	r4,-25236(gp)
  8133a4:	200d883a 	mov	r6,r4
  8133a8:	180b883a 	mov	r5,r3
  8133ac:	1009883a 	mov	r4,r2
  8133b0:	08008840 	call	800884 <main>
  8133b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8133b8:	01000044 	movi	r4,1
  8133bc:	0812d080 	call	812d08 <close>
  exit (result);
  8133c0:	e13fff17 	ldw	r4,-4(fp)
  8133c4:	0816ac00 	call	816ac0 <exit>

008133c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8133c8:	defffe04 	addi	sp,sp,-8
  8133cc:	df000115 	stw	fp,4(sp)
  8133d0:	df000104 	addi	fp,sp,4
  8133d4:	e13fff15 	stw	r4,-4(fp)
}
  8133d8:	0001883a 	nop
  8133dc:	e037883a 	mov	sp,fp
  8133e0:	df000017 	ldw	fp,0(sp)
  8133e4:	dec00104 	addi	sp,sp,4
  8133e8:	f800283a 	ret

008133ec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8133ec:	defffe04 	addi	sp,sp,-8
  8133f0:	df000115 	stw	fp,4(sp)
  8133f4:	df000104 	addi	fp,sp,4
  8133f8:	e13fff15 	stw	r4,-4(fp)
}
  8133fc:	0001883a 	nop
  813400:	e037883a 	mov	sp,fp
  813404:	df000017 	ldw	fp,0(sp)
  813408:	dec00104 	addi	sp,sp,4
  81340c:	f800283a 	ret

00813410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813410:	defffe04 	addi	sp,sp,-8
  813414:	dfc00115 	stw	ra,4(sp)
  813418:	df000015 	stw	fp,0(sp)
  81341c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813420:	d0a00b17 	ldw	r2,-32724(gp)
  813424:	10000326 	beq	r2,zero,813434 <alt_get_errno+0x24>
  813428:	d0a00b17 	ldw	r2,-32724(gp)
  81342c:	103ee83a 	callr	r2
  813430:	00000106 	br	813438 <alt_get_errno+0x28>
  813434:	d0a75104 	addi	r2,gp,-25276
}
  813438:	e037883a 	mov	sp,fp
  81343c:	dfc00117 	ldw	ra,4(sp)
  813440:	df000017 	ldw	fp,0(sp)
  813444:	dec00204 	addi	sp,sp,8
  813448:	f800283a 	ret

0081344c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81344c:	defffd04 	addi	sp,sp,-12
  813450:	df000215 	stw	fp,8(sp)
  813454:	df000204 	addi	fp,sp,8
  813458:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81345c:	e0bfff17 	ldw	r2,-4(fp)
  813460:	10800217 	ldw	r2,8(r2)
  813464:	10d00034 	orhi	r3,r2,16384
  813468:	e0bfff17 	ldw	r2,-4(fp)
  81346c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813470:	e03ffe15 	stw	zero,-8(fp)
  813474:	00001d06 	br	8134ec <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813478:	00802074 	movhi	r2,129
  81347c:	109f9304 	addi	r2,r2,32332
  813480:	e0fffe17 	ldw	r3,-8(fp)
  813484:	18c00324 	muli	r3,r3,12
  813488:	10c5883a 	add	r2,r2,r3
  81348c:	10c00017 	ldw	r3,0(r2)
  813490:	e0bfff17 	ldw	r2,-4(fp)
  813494:	10800017 	ldw	r2,0(r2)
  813498:	1880111e 	bne	r3,r2,8134e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81349c:	00802074 	movhi	r2,129
  8134a0:	109f9304 	addi	r2,r2,32332
  8134a4:	e0fffe17 	ldw	r3,-8(fp)
  8134a8:	18c00324 	muli	r3,r3,12
  8134ac:	10c5883a 	add	r2,r2,r3
  8134b0:	10800204 	addi	r2,r2,8
  8134b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8134b8:	1000090e 	bge	r2,zero,8134e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8134bc:	e0bffe17 	ldw	r2,-8(fp)
  8134c0:	10c00324 	muli	r3,r2,12
  8134c4:	00802074 	movhi	r2,129
  8134c8:	109f9304 	addi	r2,r2,32332
  8134cc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8134d0:	e0bfff17 	ldw	r2,-4(fp)
  8134d4:	18800226 	beq	r3,r2,8134e0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8134d8:	00bffcc4 	movi	r2,-13
  8134dc:	00000806 	br	813500 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8134e0:	e0bffe17 	ldw	r2,-8(fp)
  8134e4:	10800044 	addi	r2,r2,1
  8134e8:	e0bffe15 	stw	r2,-8(fp)
  8134ec:	d0a00a17 	ldw	r2,-32728(gp)
  8134f0:	1007883a 	mov	r3,r2
  8134f4:	e0bffe17 	ldw	r2,-8(fp)
  8134f8:	18bfdf2e 	bgeu	r3,r2,813478 <__alt_mem_onchip_mem+0xff80b478>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8134fc:	0005883a 	mov	r2,zero
}
  813500:	e037883a 	mov	sp,fp
  813504:	df000017 	ldw	fp,0(sp)
  813508:	dec00104 	addi	sp,sp,4
  81350c:	f800283a 	ret

00813510 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813510:	defff604 	addi	sp,sp,-40
  813514:	dfc00915 	stw	ra,36(sp)
  813518:	df000815 	stw	fp,32(sp)
  81351c:	df000804 	addi	fp,sp,32
  813520:	e13ffd15 	stw	r4,-12(fp)
  813524:	e17ffe15 	stw	r5,-8(fp)
  813528:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81352c:	00bfffc4 	movi	r2,-1
  813530:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  813534:	00bffb44 	movi	r2,-19
  813538:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  81353c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813540:	d1600804 	addi	r5,gp,-32736
  813544:	e13ffd17 	ldw	r4,-12(fp)
  813548:	08161840 	call	816184 <alt_find_dev>
  81354c:	e0bff815 	stw	r2,-32(fp)
  813550:	e0bff817 	ldw	r2,-32(fp)
  813554:	1000051e 	bne	r2,zero,81356c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  813558:	e13ffd17 	ldw	r4,-12(fp)
  81355c:	08162140 	call	816214 <alt_find_file>
  813560:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  813564:	00800044 	movi	r2,1
  813568:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81356c:	e0bff817 	ldw	r2,-32(fp)
  813570:	10002926 	beq	r2,zero,813618 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  813574:	e13ff817 	ldw	r4,-32(fp)
  813578:	081631c0 	call	81631c <alt_get_fd>
  81357c:	e0bff915 	stw	r2,-28(fp)
  813580:	e0bff917 	ldw	r2,-28(fp)
  813584:	1000030e 	bge	r2,zero,813594 <open+0x84>
    {
      status = index;
  813588:	e0bff917 	ldw	r2,-28(fp)
  81358c:	e0bffa15 	stw	r2,-24(fp)
  813590:	00002306 	br	813620 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  813594:	e0bff917 	ldw	r2,-28(fp)
  813598:	10c00324 	muli	r3,r2,12
  81359c:	00802074 	movhi	r2,129
  8135a0:	109f9304 	addi	r2,r2,32332
  8135a4:	1885883a 	add	r2,r3,r2
  8135a8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8135ac:	e0fffe17 	ldw	r3,-8(fp)
  8135b0:	00900034 	movhi	r2,16384
  8135b4:	10bfffc4 	addi	r2,r2,-1
  8135b8:	1886703a 	and	r3,r3,r2
  8135bc:	e0bffc17 	ldw	r2,-16(fp)
  8135c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8135c4:	e0bffb17 	ldw	r2,-20(fp)
  8135c8:	1000051e 	bne	r2,zero,8135e0 <open+0xd0>
  8135cc:	e13ffc17 	ldw	r4,-16(fp)
  8135d0:	081344c0 	call	81344c <alt_file_locked>
  8135d4:	e0bffa15 	stw	r2,-24(fp)
  8135d8:	e0bffa17 	ldw	r2,-24(fp)
  8135dc:	10001016 	blt	r2,zero,813620 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8135e0:	e0bff817 	ldw	r2,-32(fp)
  8135e4:	10800317 	ldw	r2,12(r2)
  8135e8:	10000826 	beq	r2,zero,81360c <open+0xfc>
  8135ec:	e0bff817 	ldw	r2,-32(fp)
  8135f0:	10800317 	ldw	r2,12(r2)
  8135f4:	e1ffff17 	ldw	r7,-4(fp)
  8135f8:	e1bffe17 	ldw	r6,-8(fp)
  8135fc:	e17ffd17 	ldw	r5,-12(fp)
  813600:	e13ffc17 	ldw	r4,-16(fp)
  813604:	103ee83a 	callr	r2
  813608:	00000106 	br	813610 <open+0x100>
  81360c:	0005883a 	mov	r2,zero
  813610:	e0bffa15 	stw	r2,-24(fp)
  813614:	00000206 	br	813620 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  813618:	00bffb44 	movi	r2,-19
  81361c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813620:	e0bffa17 	ldw	r2,-24(fp)
  813624:	1000090e 	bge	r2,zero,81364c <open+0x13c>
  {
    alt_release_fd (index);  
  813628:	e13ff917 	ldw	r4,-28(fp)
  81362c:	081379c0 	call	81379c <alt_release_fd>
    ALT_ERRNO = -status;
  813630:	08134100 	call	813410 <alt_get_errno>
  813634:	1007883a 	mov	r3,r2
  813638:	e0bffa17 	ldw	r2,-24(fp)
  81363c:	0085c83a 	sub	r2,zero,r2
  813640:	18800015 	stw	r2,0(r3)
    return -1;
  813644:	00bfffc4 	movi	r2,-1
  813648:	00000106 	br	813650 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  81364c:	e0bff917 	ldw	r2,-28(fp)
}
  813650:	e037883a 	mov	sp,fp
  813654:	dfc00117 	ldw	ra,4(sp)
  813658:	df000017 	ldw	fp,0(sp)
  81365c:	dec00204 	addi	sp,sp,8
  813660:	f800283a 	ret

00813664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813664:	defffe04 	addi	sp,sp,-8
  813668:	dfc00115 	stw	ra,4(sp)
  81366c:	df000015 	stw	fp,0(sp)
  813670:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813674:	d0a00b17 	ldw	r2,-32724(gp)
  813678:	10000326 	beq	r2,zero,813688 <alt_get_errno+0x24>
  81367c:	d0a00b17 	ldw	r2,-32724(gp)
  813680:	103ee83a 	callr	r2
  813684:	00000106 	br	81368c <alt_get_errno+0x28>
  813688:	d0a75104 	addi	r2,gp,-25276
}
  81368c:	e037883a 	mov	sp,fp
  813690:	dfc00117 	ldw	ra,4(sp)
  813694:	df000017 	ldw	fp,0(sp)
  813698:	dec00204 	addi	sp,sp,8
  81369c:	f800283a 	ret

008136a0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8136a0:	defff904 	addi	sp,sp,-28
  8136a4:	dfc00615 	stw	ra,24(sp)
  8136a8:	df000515 	stw	fp,20(sp)
  8136ac:	df000504 	addi	fp,sp,20
  8136b0:	e13ffd15 	stw	r4,-12(fp)
  8136b4:	e17ffe15 	stw	r5,-8(fp)
  8136b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8136bc:	e0bffd17 	ldw	r2,-12(fp)
  8136c0:	10000616 	blt	r2,zero,8136dc <read+0x3c>
  8136c4:	e0bffd17 	ldw	r2,-12(fp)
  8136c8:	10c00324 	muli	r3,r2,12
  8136cc:	00802074 	movhi	r2,129
  8136d0:	109f9304 	addi	r2,r2,32332
  8136d4:	1885883a 	add	r2,r3,r2
  8136d8:	00000106 	br	8136e0 <read+0x40>
  8136dc:	0005883a 	mov	r2,zero
  8136e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8136e4:	e0bffb17 	ldw	r2,-20(fp)
  8136e8:	10002226 	beq	r2,zero,813774 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8136ec:	e0bffb17 	ldw	r2,-20(fp)
  8136f0:	10800217 	ldw	r2,8(r2)
  8136f4:	108000cc 	andi	r2,r2,3
  8136f8:	10800060 	cmpeqi	r2,r2,1
  8136fc:	1000181e 	bne	r2,zero,813760 <read+0xc0>
        (fd->dev->read))
  813700:	e0bffb17 	ldw	r2,-20(fp)
  813704:	10800017 	ldw	r2,0(r2)
  813708:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81370c:	10001426 	beq	r2,zero,813760 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  813710:	e0bffb17 	ldw	r2,-20(fp)
  813714:	10800017 	ldw	r2,0(r2)
  813718:	10800517 	ldw	r2,20(r2)
  81371c:	e0ffff17 	ldw	r3,-4(fp)
  813720:	180d883a 	mov	r6,r3
  813724:	e17ffe17 	ldw	r5,-8(fp)
  813728:	e13ffb17 	ldw	r4,-20(fp)
  81372c:	103ee83a 	callr	r2
  813730:	e0bffc15 	stw	r2,-16(fp)
  813734:	e0bffc17 	ldw	r2,-16(fp)
  813738:	1000070e 	bge	r2,zero,813758 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  81373c:	08136640 	call	813664 <alt_get_errno>
  813740:	1007883a 	mov	r3,r2
  813744:	e0bffc17 	ldw	r2,-16(fp)
  813748:	0085c83a 	sub	r2,zero,r2
  81374c:	18800015 	stw	r2,0(r3)
          return -1;
  813750:	00bfffc4 	movi	r2,-1
  813754:	00000c06 	br	813788 <read+0xe8>
        }
        return rval;
  813758:	e0bffc17 	ldw	r2,-16(fp)
  81375c:	00000a06 	br	813788 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  813760:	08136640 	call	813664 <alt_get_errno>
  813764:	1007883a 	mov	r3,r2
  813768:	00800344 	movi	r2,13
  81376c:	18800015 	stw	r2,0(r3)
  813770:	00000406 	br	813784 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  813774:	08136640 	call	813664 <alt_get_errno>
  813778:	1007883a 	mov	r3,r2
  81377c:	00801444 	movi	r2,81
  813780:	18800015 	stw	r2,0(r3)
  }
  return -1;
  813784:	00bfffc4 	movi	r2,-1
}
  813788:	e037883a 	mov	sp,fp
  81378c:	dfc00117 	ldw	ra,4(sp)
  813790:	df000017 	ldw	fp,0(sp)
  813794:	dec00204 	addi	sp,sp,8
  813798:	f800283a 	ret

0081379c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  81379c:	defffe04 	addi	sp,sp,-8
  8137a0:	df000115 	stw	fp,4(sp)
  8137a4:	df000104 	addi	fp,sp,4
  8137a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8137ac:	e0bfff17 	ldw	r2,-4(fp)
  8137b0:	108000d0 	cmplti	r2,r2,3
  8137b4:	10000d1e 	bne	r2,zero,8137ec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8137b8:	00802074 	movhi	r2,129
  8137bc:	109f9304 	addi	r2,r2,32332
  8137c0:	e0ffff17 	ldw	r3,-4(fp)
  8137c4:	18c00324 	muli	r3,r3,12
  8137c8:	10c5883a 	add	r2,r2,r3
  8137cc:	10800204 	addi	r2,r2,8
  8137d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8137d4:	00802074 	movhi	r2,129
  8137d8:	109f9304 	addi	r2,r2,32332
  8137dc:	e0ffff17 	ldw	r3,-4(fp)
  8137e0:	18c00324 	muli	r3,r3,12
  8137e4:	10c5883a 	add	r2,r2,r3
  8137e8:	10000015 	stw	zero,0(r2)
  }
}
  8137ec:	0001883a 	nop
  8137f0:	e037883a 	mov	sp,fp
  8137f4:	df000017 	ldw	fp,0(sp)
  8137f8:	dec00104 	addi	sp,sp,4
  8137fc:	f800283a 	ret

00813800 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  813800:	defff904 	addi	sp,sp,-28
  813804:	df000615 	stw	fp,24(sp)
  813808:	df000604 	addi	fp,sp,24
  81380c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813810:	0005303a 	rdctl	r2,status
  813814:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813818:	e0fffe17 	ldw	r3,-8(fp)
  81381c:	00bfff84 	movi	r2,-2
  813820:	1884703a 	and	r2,r3,r2
  813824:	1001703a 	wrctl	status,r2
  
  return context;
  813828:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  81382c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  813830:	d0a00d17 	ldw	r2,-32716(gp)
  813834:	10c000c4 	addi	r3,r2,3
  813838:	00bfff04 	movi	r2,-4
  81383c:	1884703a 	and	r2,r3,r2
  813840:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  813844:	d0e00d17 	ldw	r3,-32716(gp)
  813848:	e0bfff17 	ldw	r2,-4(fp)
  81384c:	1887883a 	add	r3,r3,r2
  813850:	00804034 	movhi	r2,256
  813854:	10800004 	addi	r2,r2,0
  813858:	10c0062e 	bgeu	r2,r3,813874 <sbrk+0x74>
  81385c:	e0bffb17 	ldw	r2,-20(fp)
  813860:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813864:	e0bffa17 	ldw	r2,-24(fp)
  813868:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  81386c:	00bfffc4 	movi	r2,-1
  813870:	00000b06 	br	8138a0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  813874:	d0a00d17 	ldw	r2,-32716(gp)
  813878:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  81387c:	d0e00d17 	ldw	r3,-32716(gp)
  813880:	e0bfff17 	ldw	r2,-4(fp)
  813884:	1885883a 	add	r2,r3,r2
  813888:	d0a00d15 	stw	r2,-32716(gp)
  81388c:	e0bffb17 	ldw	r2,-20(fp)
  813890:	e0bffc15 	stw	r2,-16(fp)
  813894:	e0bffc17 	ldw	r2,-16(fp)
  813898:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  81389c:	e0bffd17 	ldw	r2,-12(fp)
} 
  8138a0:	e037883a 	mov	sp,fp
  8138a4:	df000017 	ldw	fp,0(sp)
  8138a8:	dec00104 	addi	sp,sp,4
  8138ac:	f800283a 	ret

008138b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8138b0:	defffa04 	addi	sp,sp,-24
  8138b4:	df000515 	stw	fp,20(sp)
  8138b8:	df000504 	addi	fp,sp,20
  8138bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8138c0:	0005303a 	rdctl	r2,status
  8138c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8138c8:	e0fffc17 	ldw	r3,-16(fp)
  8138cc:	00bfff84 	movi	r2,-2
  8138d0:	1884703a 	and	r2,r3,r2
  8138d4:	1001703a 	wrctl	status,r2
  
  return context;
  8138d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8138dc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8138e0:	e0bfff17 	ldw	r2,-4(fp)
  8138e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8138e8:	e0bffd17 	ldw	r2,-12(fp)
  8138ec:	10800017 	ldw	r2,0(r2)
  8138f0:	e0fffd17 	ldw	r3,-12(fp)
  8138f4:	18c00117 	ldw	r3,4(r3)
  8138f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8138fc:	e0bffd17 	ldw	r2,-12(fp)
  813900:	10800117 	ldw	r2,4(r2)
  813904:	e0fffd17 	ldw	r3,-12(fp)
  813908:	18c00017 	ldw	r3,0(r3)
  81390c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  813910:	e0bffd17 	ldw	r2,-12(fp)
  813914:	e0fffd17 	ldw	r3,-12(fp)
  813918:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  81391c:	e0bffd17 	ldw	r2,-12(fp)
  813920:	e0fffd17 	ldw	r3,-12(fp)
  813924:	10c00015 	stw	r3,0(r2)
  813928:	e0bffb17 	ldw	r2,-20(fp)
  81392c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813930:	e0bffe17 	ldw	r2,-8(fp)
  813934:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  813938:	0001883a 	nop
  81393c:	e037883a 	mov	sp,fp
  813940:	df000017 	ldw	fp,0(sp)
  813944:	dec00104 	addi	sp,sp,4
  813948:	f800283a 	ret

0081394c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81394c:	defffb04 	addi	sp,sp,-20
  813950:	dfc00415 	stw	ra,16(sp)
  813954:	df000315 	stw	fp,12(sp)
  813958:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81395c:	d0a00e17 	ldw	r2,-32712(gp)
  813960:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813964:	d0a75d17 	ldw	r2,-25228(gp)
  813968:	10800044 	addi	r2,r2,1
  81396c:	d0a75d15 	stw	r2,-25228(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813970:	00002e06 	br	813a2c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  813974:	e0bffd17 	ldw	r2,-12(fp)
  813978:	10800017 	ldw	r2,0(r2)
  81397c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813980:	e0bffd17 	ldw	r2,-12(fp)
  813984:	10800403 	ldbu	r2,16(r2)
  813988:	10803fcc 	andi	r2,r2,255
  81398c:	10000426 	beq	r2,zero,8139a0 <alt_tick+0x54>
  813990:	d0a75d17 	ldw	r2,-25228(gp)
  813994:	1000021e 	bne	r2,zero,8139a0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  813998:	e0bffd17 	ldw	r2,-12(fp)
  81399c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8139a0:	e0bffd17 	ldw	r2,-12(fp)
  8139a4:	10800217 	ldw	r2,8(r2)
  8139a8:	d0e75d17 	ldw	r3,-25228(gp)
  8139ac:	18801d36 	bltu	r3,r2,813a24 <alt_tick+0xd8>
  8139b0:	e0bffd17 	ldw	r2,-12(fp)
  8139b4:	10800403 	ldbu	r2,16(r2)
  8139b8:	10803fcc 	andi	r2,r2,255
  8139bc:	1000191e 	bne	r2,zero,813a24 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8139c0:	e0bffd17 	ldw	r2,-12(fp)
  8139c4:	10800317 	ldw	r2,12(r2)
  8139c8:	e0fffd17 	ldw	r3,-12(fp)
  8139cc:	18c00517 	ldw	r3,20(r3)
  8139d0:	1809883a 	mov	r4,r3
  8139d4:	103ee83a 	callr	r2
  8139d8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8139dc:	e0bfff17 	ldw	r2,-4(fp)
  8139e0:	1000031e 	bne	r2,zero,8139f0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8139e4:	e13ffd17 	ldw	r4,-12(fp)
  8139e8:	08138b00 	call	8138b0 <alt_alarm_stop>
  8139ec:	00000d06 	br	813a24 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8139f0:	e0bffd17 	ldw	r2,-12(fp)
  8139f4:	10c00217 	ldw	r3,8(r2)
  8139f8:	e0bfff17 	ldw	r2,-4(fp)
  8139fc:	1887883a 	add	r3,r3,r2
  813a00:	e0bffd17 	ldw	r2,-12(fp)
  813a04:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  813a08:	e0bffd17 	ldw	r2,-12(fp)
  813a0c:	10c00217 	ldw	r3,8(r2)
  813a10:	d0a75d17 	ldw	r2,-25228(gp)
  813a14:	1880032e 	bgeu	r3,r2,813a24 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  813a18:	e0bffd17 	ldw	r2,-12(fp)
  813a1c:	00c00044 	movi	r3,1
  813a20:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  813a24:	e0bffe17 	ldw	r2,-8(fp)
  813a28:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813a2c:	e0fffd17 	ldw	r3,-12(fp)
  813a30:	d0a00e04 	addi	r2,gp,-32712
  813a34:	18bfcf1e 	bne	r3,r2,813974 <__alt_mem_onchip_mem+0xff80b974>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  813a38:	0001883a 	nop
}
  813a3c:	0001883a 	nop
  813a40:	e037883a 	mov	sp,fp
  813a44:	dfc00117 	ldw	ra,4(sp)
  813a48:	df000017 	ldw	fp,0(sp)
  813a4c:	dec00204 	addi	sp,sp,8
  813a50:	f800283a 	ret

00813a54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813a54:	defffe04 	addi	sp,sp,-8
  813a58:	dfc00115 	stw	ra,4(sp)
  813a5c:	df000015 	stw	fp,0(sp)
  813a60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813a64:	d0a00b17 	ldw	r2,-32724(gp)
  813a68:	10000326 	beq	r2,zero,813a78 <alt_get_errno+0x24>
  813a6c:	d0a00b17 	ldw	r2,-32724(gp)
  813a70:	103ee83a 	callr	r2
  813a74:	00000106 	br	813a7c <alt_get_errno+0x28>
  813a78:	d0a75104 	addi	r2,gp,-25276
}
  813a7c:	e037883a 	mov	sp,fp
  813a80:	dfc00117 	ldw	ra,4(sp)
  813a84:	df000017 	ldw	fp,0(sp)
  813a88:	dec00204 	addi	sp,sp,8
  813a8c:	f800283a 	ret

00813a90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  813a90:	defff904 	addi	sp,sp,-28
  813a94:	dfc00615 	stw	ra,24(sp)
  813a98:	df000515 	stw	fp,20(sp)
  813a9c:	df000504 	addi	fp,sp,20
  813aa0:	e13ffd15 	stw	r4,-12(fp)
  813aa4:	e17ffe15 	stw	r5,-8(fp)
  813aa8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813aac:	e0bffd17 	ldw	r2,-12(fp)
  813ab0:	10000616 	blt	r2,zero,813acc <write+0x3c>
  813ab4:	e0bffd17 	ldw	r2,-12(fp)
  813ab8:	10c00324 	muli	r3,r2,12
  813abc:	00802074 	movhi	r2,129
  813ac0:	109f9304 	addi	r2,r2,32332
  813ac4:	1885883a 	add	r2,r3,r2
  813ac8:	00000106 	br	813ad0 <write+0x40>
  813acc:	0005883a 	mov	r2,zero
  813ad0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  813ad4:	e0bffb17 	ldw	r2,-20(fp)
  813ad8:	10002126 	beq	r2,zero,813b60 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  813adc:	e0bffb17 	ldw	r2,-20(fp)
  813ae0:	10800217 	ldw	r2,8(r2)
  813ae4:	108000cc 	andi	r2,r2,3
  813ae8:	10001826 	beq	r2,zero,813b4c <write+0xbc>
  813aec:	e0bffb17 	ldw	r2,-20(fp)
  813af0:	10800017 	ldw	r2,0(r2)
  813af4:	10800617 	ldw	r2,24(r2)
  813af8:	10001426 	beq	r2,zero,813b4c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  813afc:	e0bffb17 	ldw	r2,-20(fp)
  813b00:	10800017 	ldw	r2,0(r2)
  813b04:	10800617 	ldw	r2,24(r2)
  813b08:	e0ffff17 	ldw	r3,-4(fp)
  813b0c:	180d883a 	mov	r6,r3
  813b10:	e17ffe17 	ldw	r5,-8(fp)
  813b14:	e13ffb17 	ldw	r4,-20(fp)
  813b18:	103ee83a 	callr	r2
  813b1c:	e0bffc15 	stw	r2,-16(fp)
  813b20:	e0bffc17 	ldw	r2,-16(fp)
  813b24:	1000070e 	bge	r2,zero,813b44 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  813b28:	0813a540 	call	813a54 <alt_get_errno>
  813b2c:	1007883a 	mov	r3,r2
  813b30:	e0bffc17 	ldw	r2,-16(fp)
  813b34:	0085c83a 	sub	r2,zero,r2
  813b38:	18800015 	stw	r2,0(r3)
        return -1;
  813b3c:	00bfffc4 	movi	r2,-1
  813b40:	00000c06 	br	813b74 <write+0xe4>
      }
      return rval;
  813b44:	e0bffc17 	ldw	r2,-16(fp)
  813b48:	00000a06 	br	813b74 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  813b4c:	0813a540 	call	813a54 <alt_get_errno>
  813b50:	1007883a 	mov	r3,r2
  813b54:	00800344 	movi	r2,13
  813b58:	18800015 	stw	r2,0(r3)
  813b5c:	00000406 	br	813b70 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  813b60:	0813a540 	call	813a54 <alt_get_errno>
  813b64:	1007883a 	mov	r3,r2
  813b68:	00801444 	movi	r2,81
  813b6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  813b70:	00bfffc4 	movi	r2,-1
}
  813b74:	e037883a 	mov	sp,fp
  813b78:	dfc00117 	ldw	ra,4(sp)
  813b7c:	df000017 	ldw	fp,0(sp)
  813b80:	dec00204 	addi	sp,sp,8
  813b84:	f800283a 	ret

00813b88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  813b88:	defffd04 	addi	sp,sp,-12
  813b8c:	dfc00215 	stw	ra,8(sp)
  813b90:	df000115 	stw	fp,4(sp)
  813b94:	df000104 	addi	fp,sp,4
  813b98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  813b9c:	d1600804 	addi	r5,gp,-32736
  813ba0:	e13fff17 	ldw	r4,-4(fp)
  813ba4:	08160200 	call	816020 <alt_dev_llist_insert>
}
  813ba8:	e037883a 	mov	sp,fp
  813bac:	dfc00117 	ldw	ra,4(sp)
  813bb0:	df000017 	ldw	fp,0(sp)
  813bb4:	dec00204 	addi	sp,sp,8
  813bb8:	f800283a 	ret

00813bbc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  813bbc:	defffd04 	addi	sp,sp,-12
  813bc0:	dfc00215 	stw	ra,8(sp)
  813bc4:	df000115 	stw	fp,4(sp)
  813bc8:	df000104 	addi	fp,sp,4
  813bcc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  813bd0:	08168040 	call	816804 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  813bd4:	00800044 	movi	r2,1
  813bd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  813bdc:	0001883a 	nop
  813be0:	e037883a 	mov	sp,fp
  813be4:	dfc00117 	ldw	ra,4(sp)
  813be8:	df000017 	ldw	fp,0(sp)
  813bec:	dec00204 	addi	sp,sp,8
  813bf0:	f800283a 	ret

00813bf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  813bf4:	defffe04 	addi	sp,sp,-8
  813bf8:	dfc00115 	stw	ra,4(sp)
  813bfc:	df000015 	stw	fp,0(sp)
  813c00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  813c04:	01c0fa04 	movi	r7,1000
  813c08:	01800084 	movi	r6,2
  813c0c:	000b883a 	mov	r5,zero
  813c10:	01004074 	movhi	r4,257
  813c14:	21040804 	addi	r4,r4,4128
  813c18:	08156480 	call	815648 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  813c1c:	01800044 	movi	r6,1
  813c20:	000b883a 	mov	r5,zero
  813c24:	01002074 	movhi	r4,129
  813c28:	211ffd04 	addi	r4,r4,32756
  813c2c:	0813df00 	call	813df0 <altera_avalon_jtag_uart_init>
  813c30:	01002074 	movhi	r4,129
  813c34:	211ff304 	addi	r4,r4,32716
  813c38:	0813b880 	call	813b88 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  813c3c:	010020b4 	movhi	r4,130
  813c40:	21241504 	addi	r4,r4,-28588
  813c44:	081543c0 	call	81543c <altera_avalon_lcd_16207_init>
  813c48:	010020b4 	movhi	r4,130
  813c4c:	21240b04 	addi	r4,r4,-28628
  813c50:	0813b880 	call	813b88 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  813c54:	000d883a 	mov	r6,zero
  813c58:	000b883a 	mov	r5,zero
  813c5c:	010020b4 	movhi	r4,130
  813c60:	21245d04 	addi	r4,r4,-28300
  813c64:	08157d40 	call	8157d4 <altera_avalon_uart_init>
  813c68:	010020b4 	movhi	r4,130
  813c6c:	21245304 	addi	r4,r4,-28340
  813c70:	0813b880 	call	813b88 <alt_dev_reg>
}
  813c74:	0001883a 	nop
  813c78:	e037883a 	mov	sp,fp
  813c7c:	dfc00117 	ldw	ra,4(sp)
  813c80:	df000017 	ldw	fp,0(sp)
  813c84:	dec00204 	addi	sp,sp,8
  813c88:	f800283a 	ret

00813c8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  813c8c:	defffa04 	addi	sp,sp,-24
  813c90:	dfc00515 	stw	ra,20(sp)
  813c94:	df000415 	stw	fp,16(sp)
  813c98:	df000404 	addi	fp,sp,16
  813c9c:	e13ffd15 	stw	r4,-12(fp)
  813ca0:	e17ffe15 	stw	r5,-8(fp)
  813ca4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813ca8:	e0bffd17 	ldw	r2,-12(fp)
  813cac:	10800017 	ldw	r2,0(r2)
  813cb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  813cb4:	e0bffc17 	ldw	r2,-16(fp)
  813cb8:	10c00a04 	addi	r3,r2,40
  813cbc:	e0bffd17 	ldw	r2,-12(fp)
  813cc0:	10800217 	ldw	r2,8(r2)
  813cc4:	100f883a 	mov	r7,r2
  813cc8:	e1bfff17 	ldw	r6,-4(fp)
  813ccc:	e17ffe17 	ldw	r5,-8(fp)
  813cd0:	1809883a 	mov	r4,r3
  813cd4:	08142b40 	call	8142b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  813cd8:	e037883a 	mov	sp,fp
  813cdc:	dfc00117 	ldw	ra,4(sp)
  813ce0:	df000017 	ldw	fp,0(sp)
  813ce4:	dec00204 	addi	sp,sp,8
  813ce8:	f800283a 	ret

00813cec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813cec:	defffa04 	addi	sp,sp,-24
  813cf0:	dfc00515 	stw	ra,20(sp)
  813cf4:	df000415 	stw	fp,16(sp)
  813cf8:	df000404 	addi	fp,sp,16
  813cfc:	e13ffd15 	stw	r4,-12(fp)
  813d00:	e17ffe15 	stw	r5,-8(fp)
  813d04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813d08:	e0bffd17 	ldw	r2,-12(fp)
  813d0c:	10800017 	ldw	r2,0(r2)
  813d10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  813d14:	e0bffc17 	ldw	r2,-16(fp)
  813d18:	10c00a04 	addi	r3,r2,40
  813d1c:	e0bffd17 	ldw	r2,-12(fp)
  813d20:	10800217 	ldw	r2,8(r2)
  813d24:	100f883a 	mov	r7,r2
  813d28:	e1bfff17 	ldw	r6,-4(fp)
  813d2c:	e17ffe17 	ldw	r5,-8(fp)
  813d30:	1809883a 	mov	r4,r3
  813d34:	08144d00 	call	8144d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  813d38:	e037883a 	mov	sp,fp
  813d3c:	dfc00117 	ldw	ra,4(sp)
  813d40:	df000017 	ldw	fp,0(sp)
  813d44:	dec00204 	addi	sp,sp,8
  813d48:	f800283a 	ret

00813d4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  813d4c:	defffc04 	addi	sp,sp,-16
  813d50:	dfc00315 	stw	ra,12(sp)
  813d54:	df000215 	stw	fp,8(sp)
  813d58:	df000204 	addi	fp,sp,8
  813d5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813d60:	e0bfff17 	ldw	r2,-4(fp)
  813d64:	10800017 	ldw	r2,0(r2)
  813d68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  813d6c:	e0bffe17 	ldw	r2,-8(fp)
  813d70:	10c00a04 	addi	r3,r2,40
  813d74:	e0bfff17 	ldw	r2,-4(fp)
  813d78:	10800217 	ldw	r2,8(r2)
  813d7c:	100b883a 	mov	r5,r2
  813d80:	1809883a 	mov	r4,r3
  813d84:	081415c0 	call	81415c <altera_avalon_jtag_uart_close>
}
  813d88:	e037883a 	mov	sp,fp
  813d8c:	dfc00117 	ldw	ra,4(sp)
  813d90:	df000017 	ldw	fp,0(sp)
  813d94:	dec00204 	addi	sp,sp,8
  813d98:	f800283a 	ret

00813d9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  813d9c:	defffa04 	addi	sp,sp,-24
  813da0:	dfc00515 	stw	ra,20(sp)
  813da4:	df000415 	stw	fp,16(sp)
  813da8:	df000404 	addi	fp,sp,16
  813dac:	e13ffd15 	stw	r4,-12(fp)
  813db0:	e17ffe15 	stw	r5,-8(fp)
  813db4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  813db8:	e0bffd17 	ldw	r2,-12(fp)
  813dbc:	10800017 	ldw	r2,0(r2)
  813dc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  813dc4:	e0bffc17 	ldw	r2,-16(fp)
  813dc8:	10800a04 	addi	r2,r2,40
  813dcc:	e1bfff17 	ldw	r6,-4(fp)
  813dd0:	e17ffe17 	ldw	r5,-8(fp)
  813dd4:	1009883a 	mov	r4,r2
  813dd8:	08141c40 	call	8141c4 <altera_avalon_jtag_uart_ioctl>
}
  813ddc:	e037883a 	mov	sp,fp
  813de0:	dfc00117 	ldw	ra,4(sp)
  813de4:	df000017 	ldw	fp,0(sp)
  813de8:	dec00204 	addi	sp,sp,8
  813dec:	f800283a 	ret

00813df0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  813df0:	defffa04 	addi	sp,sp,-24
  813df4:	dfc00515 	stw	ra,20(sp)
  813df8:	df000415 	stw	fp,16(sp)
  813dfc:	df000404 	addi	fp,sp,16
  813e00:	e13ffd15 	stw	r4,-12(fp)
  813e04:	e17ffe15 	stw	r5,-8(fp)
  813e08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813e0c:	e0bffd17 	ldw	r2,-12(fp)
  813e10:	00c00044 	movi	r3,1
  813e14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  813e18:	e0bffd17 	ldw	r2,-12(fp)
  813e1c:	10800017 	ldw	r2,0(r2)
  813e20:	10800104 	addi	r2,r2,4
  813e24:	1007883a 	mov	r3,r2
  813e28:	e0bffd17 	ldw	r2,-12(fp)
  813e2c:	10800817 	ldw	r2,32(r2)
  813e30:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  813e34:	e0bffe17 	ldw	r2,-8(fp)
  813e38:	e0ffff17 	ldw	r3,-4(fp)
  813e3c:	d8000015 	stw	zero,0(sp)
  813e40:	e1fffd17 	ldw	r7,-12(fp)
  813e44:	01802074 	movhi	r6,129
  813e48:	318fac04 	addi	r6,r6,16048
  813e4c:	180b883a 	mov	r5,r3
  813e50:	1009883a 	mov	r4,r2
  813e54:	08163f40 	call	8163f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  813e58:	e0bffd17 	ldw	r2,-12(fp)
  813e5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  813e60:	e0bffd17 	ldw	r2,-12(fp)
  813e64:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  813e68:	d0e75c17 	ldw	r3,-25232(gp)
  813e6c:	e1fffd17 	ldw	r7,-12(fp)
  813e70:	01802074 	movhi	r6,129
  813e74:	31902f04 	addi	r6,r6,16572
  813e78:	180b883a 	mov	r5,r3
  813e7c:	1009883a 	mov	r4,r2
  813e80:	0812ba00 	call	812ba0 <alt_alarm_start>
  813e84:	1000040e 	bge	r2,zero,813e98 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  813e88:	e0fffd17 	ldw	r3,-12(fp)
  813e8c:	00a00034 	movhi	r2,32768
  813e90:	10bfffc4 	addi	r2,r2,-1
  813e94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  813e98:	0001883a 	nop
  813e9c:	e037883a 	mov	sp,fp
  813ea0:	dfc00117 	ldw	ra,4(sp)
  813ea4:	df000017 	ldw	fp,0(sp)
  813ea8:	dec00204 	addi	sp,sp,8
  813eac:	f800283a 	ret

00813eb0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  813eb0:	defff804 	addi	sp,sp,-32
  813eb4:	df000715 	stw	fp,28(sp)
  813eb8:	df000704 	addi	fp,sp,28
  813ebc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  813ec0:	e0bfff17 	ldw	r2,-4(fp)
  813ec4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  813ec8:	e0bffb17 	ldw	r2,-20(fp)
  813ecc:	10800017 	ldw	r2,0(r2)
  813ed0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813ed4:	e0bffc17 	ldw	r2,-16(fp)
  813ed8:	10800104 	addi	r2,r2,4
  813edc:	10800037 	ldwio	r2,0(r2)
  813ee0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  813ee4:	e0bffd17 	ldw	r2,-12(fp)
  813ee8:	1080c00c 	andi	r2,r2,768
  813eec:	10006d26 	beq	r2,zero,8140a4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  813ef0:	e0bffd17 	ldw	r2,-12(fp)
  813ef4:	1080400c 	andi	r2,r2,256
  813ef8:	10003526 	beq	r2,zero,813fd0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  813efc:	00800074 	movhi	r2,1
  813f00:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813f04:	e0bffb17 	ldw	r2,-20(fp)
  813f08:	10800a17 	ldw	r2,40(r2)
  813f0c:	10800044 	addi	r2,r2,1
  813f10:	1081ffcc 	andi	r2,r2,2047
  813f14:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  813f18:	e0bffb17 	ldw	r2,-20(fp)
  813f1c:	10c00b17 	ldw	r3,44(r2)
  813f20:	e0bffe17 	ldw	r2,-8(fp)
  813f24:	18801526 	beq	r3,r2,813f7c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  813f28:	e0bffc17 	ldw	r2,-16(fp)
  813f2c:	10800037 	ldwio	r2,0(r2)
  813f30:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  813f34:	e0bff917 	ldw	r2,-28(fp)
  813f38:	10a0000c 	andi	r2,r2,32768
  813f3c:	10001126 	beq	r2,zero,813f84 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  813f40:	e0bffb17 	ldw	r2,-20(fp)
  813f44:	10800a17 	ldw	r2,40(r2)
  813f48:	e0fff917 	ldw	r3,-28(fp)
  813f4c:	1809883a 	mov	r4,r3
  813f50:	e0fffb17 	ldw	r3,-20(fp)
  813f54:	1885883a 	add	r2,r3,r2
  813f58:	10800e04 	addi	r2,r2,56
  813f5c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813f60:	e0bffb17 	ldw	r2,-20(fp)
  813f64:	10800a17 	ldw	r2,40(r2)
  813f68:	10800044 	addi	r2,r2,1
  813f6c:	10c1ffcc 	andi	r3,r2,2047
  813f70:	e0bffb17 	ldw	r2,-20(fp)
  813f74:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  813f78:	003fe206 	br	813f04 <__alt_mem_onchip_mem+0xff80bf04>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  813f7c:	0001883a 	nop
  813f80:	00000106 	br	813f88 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  813f84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  813f88:	e0bff917 	ldw	r2,-28(fp)
  813f8c:	10bfffec 	andhi	r2,r2,65535
  813f90:	10000f26 	beq	r2,zero,813fd0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813f94:	e0bffb17 	ldw	r2,-20(fp)
  813f98:	10c00817 	ldw	r3,32(r2)
  813f9c:	00bfff84 	movi	r2,-2
  813fa0:	1886703a 	and	r3,r3,r2
  813fa4:	e0bffb17 	ldw	r2,-20(fp)
  813fa8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  813fac:	e0bffc17 	ldw	r2,-16(fp)
  813fb0:	10800104 	addi	r2,r2,4
  813fb4:	1007883a 	mov	r3,r2
  813fb8:	e0bffb17 	ldw	r2,-20(fp)
  813fbc:	10800817 	ldw	r2,32(r2)
  813fc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813fc4:	e0bffc17 	ldw	r2,-16(fp)
  813fc8:	10800104 	addi	r2,r2,4
  813fcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  813fd0:	e0bffd17 	ldw	r2,-12(fp)
  813fd4:	1080800c 	andi	r2,r2,512
  813fd8:	103fbe26 	beq	r2,zero,813ed4 <__alt_mem_onchip_mem+0xff80bed4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  813fdc:	e0bffd17 	ldw	r2,-12(fp)
  813fe0:	1004d43a 	srli	r2,r2,16
  813fe4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  813fe8:	00001406 	br	81403c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  813fec:	e0bffc17 	ldw	r2,-16(fp)
  813ff0:	e0fffb17 	ldw	r3,-20(fp)
  813ff4:	18c00d17 	ldw	r3,52(r3)
  813ff8:	e13ffb17 	ldw	r4,-20(fp)
  813ffc:	20c7883a 	add	r3,r4,r3
  814000:	18c20e04 	addi	r3,r3,2104
  814004:	18c00003 	ldbu	r3,0(r3)
  814008:	18c03fcc 	andi	r3,r3,255
  81400c:	18c0201c 	xori	r3,r3,128
  814010:	18ffe004 	addi	r3,r3,-128
  814014:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814018:	e0bffb17 	ldw	r2,-20(fp)
  81401c:	10800d17 	ldw	r2,52(r2)
  814020:	10800044 	addi	r2,r2,1
  814024:	10c1ffcc 	andi	r3,r2,2047
  814028:	e0bffb17 	ldw	r2,-20(fp)
  81402c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  814030:	e0bffa17 	ldw	r2,-24(fp)
  814034:	10bfffc4 	addi	r2,r2,-1
  814038:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  81403c:	e0bffa17 	ldw	r2,-24(fp)
  814040:	10000526 	beq	r2,zero,814058 <altera_avalon_jtag_uart_irq+0x1a8>
  814044:	e0bffb17 	ldw	r2,-20(fp)
  814048:	10c00d17 	ldw	r3,52(r2)
  81404c:	e0bffb17 	ldw	r2,-20(fp)
  814050:	10800c17 	ldw	r2,48(r2)
  814054:	18bfe51e 	bne	r3,r2,813fec <__alt_mem_onchip_mem+0xff80bfec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  814058:	e0bffa17 	ldw	r2,-24(fp)
  81405c:	103f9d26 	beq	r2,zero,813ed4 <__alt_mem_onchip_mem+0xff80bed4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  814060:	e0bffb17 	ldw	r2,-20(fp)
  814064:	10c00817 	ldw	r3,32(r2)
  814068:	00bfff44 	movi	r2,-3
  81406c:	1886703a 	and	r3,r3,r2
  814070:	e0bffb17 	ldw	r2,-20(fp)
  814074:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814078:	e0bffb17 	ldw	r2,-20(fp)
  81407c:	10800017 	ldw	r2,0(r2)
  814080:	10800104 	addi	r2,r2,4
  814084:	1007883a 	mov	r3,r2
  814088:	e0bffb17 	ldw	r2,-20(fp)
  81408c:	10800817 	ldw	r2,32(r2)
  814090:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  814094:	e0bffc17 	ldw	r2,-16(fp)
  814098:	10800104 	addi	r2,r2,4
  81409c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8140a0:	003f8c06 	br	813ed4 <__alt_mem_onchip_mem+0xff80bed4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  8140a4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  8140a8:	0001883a 	nop
  8140ac:	e037883a 	mov	sp,fp
  8140b0:	df000017 	ldw	fp,0(sp)
  8140b4:	dec00104 	addi	sp,sp,4
  8140b8:	f800283a 	ret

008140bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8140bc:	defff804 	addi	sp,sp,-32
  8140c0:	df000715 	stw	fp,28(sp)
  8140c4:	df000704 	addi	fp,sp,28
  8140c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8140cc:	e0bffb17 	ldw	r2,-20(fp)
  8140d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8140d4:	e0bff917 	ldw	r2,-28(fp)
  8140d8:	10800017 	ldw	r2,0(r2)
  8140dc:	10800104 	addi	r2,r2,4
  8140e0:	10800037 	ldwio	r2,0(r2)
  8140e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8140e8:	e0bffa17 	ldw	r2,-24(fp)
  8140ec:	1081000c 	andi	r2,r2,1024
  8140f0:	10000b26 	beq	r2,zero,814120 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8140f4:	e0bff917 	ldw	r2,-28(fp)
  8140f8:	10800017 	ldw	r2,0(r2)
  8140fc:	10800104 	addi	r2,r2,4
  814100:	1007883a 	mov	r3,r2
  814104:	e0bff917 	ldw	r2,-28(fp)
  814108:	10800817 	ldw	r2,32(r2)
  81410c:	10810014 	ori	r2,r2,1024
  814110:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  814114:	e0bff917 	ldw	r2,-28(fp)
  814118:	10000915 	stw	zero,36(r2)
  81411c:	00000a06 	br	814148 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  814120:	e0bff917 	ldw	r2,-28(fp)
  814124:	10c00917 	ldw	r3,36(r2)
  814128:	00a00034 	movhi	r2,32768
  81412c:	10bfff04 	addi	r2,r2,-4
  814130:	10c00536 	bltu	r2,r3,814148 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  814134:	e0bff917 	ldw	r2,-28(fp)
  814138:	10800917 	ldw	r2,36(r2)
  81413c:	10c00044 	addi	r3,r2,1
  814140:	e0bff917 	ldw	r2,-28(fp)
  814144:	10c00915 	stw	r3,36(r2)
  814148:	d0a75c17 	ldw	r2,-25232(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  81414c:	e037883a 	mov	sp,fp
  814150:	df000017 	ldw	fp,0(sp)
  814154:	dec00104 	addi	sp,sp,4
  814158:	f800283a 	ret

0081415c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  81415c:	defffd04 	addi	sp,sp,-12
  814160:	df000215 	stw	fp,8(sp)
  814164:	df000204 	addi	fp,sp,8
  814168:	e13ffe15 	stw	r4,-8(fp)
  81416c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  814170:	00000506 	br	814188 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  814174:	e0bfff17 	ldw	r2,-4(fp)
  814178:	1090000c 	andi	r2,r2,16384
  81417c:	10000226 	beq	r2,zero,814188 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  814180:	00bffd44 	movi	r2,-11
  814184:	00000b06 	br	8141b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  814188:	e0bffe17 	ldw	r2,-8(fp)
  81418c:	10c00d17 	ldw	r3,52(r2)
  814190:	e0bffe17 	ldw	r2,-8(fp)
  814194:	10800c17 	ldw	r2,48(r2)
  814198:	18800526 	beq	r3,r2,8141b0 <altera_avalon_jtag_uart_close+0x54>
  81419c:	e0bffe17 	ldw	r2,-8(fp)
  8141a0:	10c00917 	ldw	r3,36(r2)
  8141a4:	e0bffe17 	ldw	r2,-8(fp)
  8141a8:	10800117 	ldw	r2,4(r2)
  8141ac:	18bff136 	bltu	r3,r2,814174 <__alt_mem_onchip_mem+0xff80c174>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8141b0:	0005883a 	mov	r2,zero
}
  8141b4:	e037883a 	mov	sp,fp
  8141b8:	df000017 	ldw	fp,0(sp)
  8141bc:	dec00104 	addi	sp,sp,4
  8141c0:	f800283a 	ret

008141c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8141c4:	defffa04 	addi	sp,sp,-24
  8141c8:	df000515 	stw	fp,20(sp)
  8141cc:	df000504 	addi	fp,sp,20
  8141d0:	e13ffd15 	stw	r4,-12(fp)
  8141d4:	e17ffe15 	stw	r5,-8(fp)
  8141d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  8141dc:	00bff9c4 	movi	r2,-25
  8141e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  8141e4:	e0bffe17 	ldw	r2,-8(fp)
  8141e8:	10da8060 	cmpeqi	r3,r2,27137
  8141ec:	1800031e 	bne	r3,zero,8141fc <altera_avalon_jtag_uart_ioctl+0x38>
  8141f0:	109a80a0 	cmpeqi	r2,r2,27138
  8141f4:	1000181e 	bne	r2,zero,814258 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  8141f8:	00002906 	br	8142a0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8141fc:	e0bffd17 	ldw	r2,-12(fp)
  814200:	10c00117 	ldw	r3,4(r2)
  814204:	00a00034 	movhi	r2,32768
  814208:	10bfffc4 	addi	r2,r2,-1
  81420c:	18802126 	beq	r3,r2,814294 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  814210:	e0bfff17 	ldw	r2,-4(fp)
  814214:	10800017 	ldw	r2,0(r2)
  814218:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81421c:	e0bffc17 	ldw	r2,-16(fp)
  814220:	10800090 	cmplti	r2,r2,2
  814224:	1000061e 	bne	r2,zero,814240 <altera_avalon_jtag_uart_ioctl+0x7c>
  814228:	e0fffc17 	ldw	r3,-16(fp)
  81422c:	00a00034 	movhi	r2,32768
  814230:	10bfffc4 	addi	r2,r2,-1
  814234:	18800226 	beq	r3,r2,814240 <altera_avalon_jtag_uart_ioctl+0x7c>
  814238:	e0bffc17 	ldw	r2,-16(fp)
  81423c:	00000206 	br	814248 <altera_avalon_jtag_uart_ioctl+0x84>
  814240:	00a00034 	movhi	r2,32768
  814244:	10bfff84 	addi	r2,r2,-2
  814248:	e0fffd17 	ldw	r3,-12(fp)
  81424c:	18800115 	stw	r2,4(r3)
      rc = 0;
  814250:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  814254:	00000f06 	br	814294 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  814258:	e0bffd17 	ldw	r2,-12(fp)
  81425c:	10c00117 	ldw	r3,4(r2)
  814260:	00a00034 	movhi	r2,32768
  814264:	10bfffc4 	addi	r2,r2,-1
  814268:	18800c26 	beq	r3,r2,81429c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81426c:	e0bffd17 	ldw	r2,-12(fp)
  814270:	10c00917 	ldw	r3,36(r2)
  814274:	e0bffd17 	ldw	r2,-12(fp)
  814278:	10800117 	ldw	r2,4(r2)
  81427c:	1885803a 	cmpltu	r2,r3,r2
  814280:	10c03fcc 	andi	r3,r2,255
  814284:	e0bfff17 	ldw	r2,-4(fp)
  814288:	10c00015 	stw	r3,0(r2)
      rc = 0;
  81428c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  814290:	00000206 	br	81429c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  814294:	0001883a 	nop
  814298:	00000106 	br	8142a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  81429c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8142a0:	e0bffb17 	ldw	r2,-20(fp)
}
  8142a4:	e037883a 	mov	sp,fp
  8142a8:	df000017 	ldw	fp,0(sp)
  8142ac:	dec00104 	addi	sp,sp,4
  8142b0:	f800283a 	ret

008142b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8142b4:	defff304 	addi	sp,sp,-52
  8142b8:	dfc00c15 	stw	ra,48(sp)
  8142bc:	df000b15 	stw	fp,44(sp)
  8142c0:	df000b04 	addi	fp,sp,44
  8142c4:	e13ffc15 	stw	r4,-16(fp)
  8142c8:	e17ffd15 	stw	r5,-12(fp)
  8142cc:	e1bffe15 	stw	r6,-8(fp)
  8142d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  8142d4:	e0bffd17 	ldw	r2,-12(fp)
  8142d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8142dc:	00004706 	br	8143fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8142e0:	e0bffc17 	ldw	r2,-16(fp)
  8142e4:	10800a17 	ldw	r2,40(r2)
  8142e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8142ec:	e0bffc17 	ldw	r2,-16(fp)
  8142f0:	10800b17 	ldw	r2,44(r2)
  8142f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  8142f8:	e0fff717 	ldw	r3,-36(fp)
  8142fc:	e0bff817 	ldw	r2,-32(fp)
  814300:	18800536 	bltu	r3,r2,814318 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  814304:	e0fff717 	ldw	r3,-36(fp)
  814308:	e0bff817 	ldw	r2,-32(fp)
  81430c:	1885c83a 	sub	r2,r3,r2
  814310:	e0bff615 	stw	r2,-40(fp)
  814314:	00000406 	br	814328 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  814318:	00c20004 	movi	r3,2048
  81431c:	e0bff817 	ldw	r2,-32(fp)
  814320:	1885c83a 	sub	r2,r3,r2
  814324:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  814328:	e0bff617 	ldw	r2,-40(fp)
  81432c:	10001e26 	beq	r2,zero,8143a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  814330:	e0fffe17 	ldw	r3,-8(fp)
  814334:	e0bff617 	ldw	r2,-40(fp)
  814338:	1880022e 	bgeu	r3,r2,814344 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  81433c:	e0bffe17 	ldw	r2,-8(fp)
  814340:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  814344:	e0bffc17 	ldw	r2,-16(fp)
  814348:	10c00e04 	addi	r3,r2,56
  81434c:	e0bff817 	ldw	r2,-32(fp)
  814350:	1885883a 	add	r2,r3,r2
  814354:	e1bff617 	ldw	r6,-40(fp)
  814358:	100b883a 	mov	r5,r2
  81435c:	e13ff517 	ldw	r4,-44(fp)
  814360:	080d5c00 	call	80d5c0 <memcpy>
      ptr   += n;
  814364:	e0fff517 	ldw	r3,-44(fp)
  814368:	e0bff617 	ldw	r2,-40(fp)
  81436c:	1885883a 	add	r2,r3,r2
  814370:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  814374:	e0fffe17 	ldw	r3,-8(fp)
  814378:	e0bff617 	ldw	r2,-40(fp)
  81437c:	1885c83a 	sub	r2,r3,r2
  814380:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814384:	e0fff817 	ldw	r3,-32(fp)
  814388:	e0bff617 	ldw	r2,-40(fp)
  81438c:	1885883a 	add	r2,r3,r2
  814390:	10c1ffcc 	andi	r3,r2,2047
  814394:	e0bffc17 	ldw	r2,-16(fp)
  814398:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  81439c:	e0bffe17 	ldw	r2,-8(fp)
  8143a0:	00bfcf16 	blt	zero,r2,8142e0 <__alt_mem_onchip_mem+0xff80c2e0>
  8143a4:	00000106 	br	8143ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8143a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8143ac:	e0fff517 	ldw	r3,-44(fp)
  8143b0:	e0bffd17 	ldw	r2,-12(fp)
  8143b4:	1880141e 	bne	r3,r2,814408 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8143b8:	e0bfff17 	ldw	r2,-4(fp)
  8143bc:	1090000c 	andi	r2,r2,16384
  8143c0:	1000131e 	bne	r2,zero,814410 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8143c4:	0001883a 	nop
  8143c8:	e0bffc17 	ldw	r2,-16(fp)
  8143cc:	10c00a17 	ldw	r3,40(r2)
  8143d0:	e0bff717 	ldw	r2,-36(fp)
  8143d4:	1880051e 	bne	r3,r2,8143ec <altera_avalon_jtag_uart_read+0x138>
  8143d8:	e0bffc17 	ldw	r2,-16(fp)
  8143dc:	10c00917 	ldw	r3,36(r2)
  8143e0:	e0bffc17 	ldw	r2,-16(fp)
  8143e4:	10800117 	ldw	r2,4(r2)
  8143e8:	18bff736 	bltu	r3,r2,8143c8 <__alt_mem_onchip_mem+0xff80c3c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8143ec:	e0bffc17 	ldw	r2,-16(fp)
  8143f0:	10c00a17 	ldw	r3,40(r2)
  8143f4:	e0bff717 	ldw	r2,-36(fp)
  8143f8:	18800726 	beq	r3,r2,814418 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8143fc:	e0bffe17 	ldw	r2,-8(fp)
  814400:	00bfb716 	blt	zero,r2,8142e0 <__alt_mem_onchip_mem+0xff80c2e0>
  814404:	00000506 	br	81441c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  814408:	0001883a 	nop
  81440c:	00000306 	br	81441c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  814410:	0001883a 	nop
  814414:	00000106 	br	81441c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  814418:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  81441c:	e0fff517 	ldw	r3,-44(fp)
  814420:	e0bffd17 	ldw	r2,-12(fp)
  814424:	18801826 	beq	r3,r2,814488 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814428:	0005303a 	rdctl	r2,status
  81442c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814430:	e0fffb17 	ldw	r3,-20(fp)
  814434:	00bfff84 	movi	r2,-2
  814438:	1884703a 	and	r2,r3,r2
  81443c:	1001703a 	wrctl	status,r2
  
  return context;
  814440:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  814444:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814448:	e0bffc17 	ldw	r2,-16(fp)
  81444c:	10800817 	ldw	r2,32(r2)
  814450:	10c00054 	ori	r3,r2,1
  814454:	e0bffc17 	ldw	r2,-16(fp)
  814458:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81445c:	e0bffc17 	ldw	r2,-16(fp)
  814460:	10800017 	ldw	r2,0(r2)
  814464:	10800104 	addi	r2,r2,4
  814468:	1007883a 	mov	r3,r2
  81446c:	e0bffc17 	ldw	r2,-16(fp)
  814470:	10800817 	ldw	r2,32(r2)
  814474:	18800035 	stwio	r2,0(r3)
  814478:	e0bffa17 	ldw	r2,-24(fp)
  81447c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814480:	e0bff917 	ldw	r2,-28(fp)
  814484:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  814488:	e0fff517 	ldw	r3,-44(fp)
  81448c:	e0bffd17 	ldw	r2,-12(fp)
  814490:	18800426 	beq	r3,r2,8144a4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  814494:	e0fff517 	ldw	r3,-44(fp)
  814498:	e0bffd17 	ldw	r2,-12(fp)
  81449c:	1885c83a 	sub	r2,r3,r2
  8144a0:	00000606 	br	8144bc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8144a4:	e0bfff17 	ldw	r2,-4(fp)
  8144a8:	1090000c 	andi	r2,r2,16384
  8144ac:	10000226 	beq	r2,zero,8144b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8144b0:	00bffd44 	movi	r2,-11
  8144b4:	00000106 	br	8144bc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8144b8:	00bffec4 	movi	r2,-5
}
  8144bc:	e037883a 	mov	sp,fp
  8144c0:	dfc00117 	ldw	ra,4(sp)
  8144c4:	df000017 	ldw	fp,0(sp)
  8144c8:	dec00204 	addi	sp,sp,8
  8144cc:	f800283a 	ret

008144d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8144d0:	defff304 	addi	sp,sp,-52
  8144d4:	dfc00c15 	stw	ra,48(sp)
  8144d8:	df000b15 	stw	fp,44(sp)
  8144dc:	df000b04 	addi	fp,sp,44
  8144e0:	e13ffc15 	stw	r4,-16(fp)
  8144e4:	e17ffd15 	stw	r5,-12(fp)
  8144e8:	e1bffe15 	stw	r6,-8(fp)
  8144ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8144f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8144f4:	e0bffd17 	ldw	r2,-12(fp)
  8144f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8144fc:	00003706 	br	8145dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  814500:	e0bffc17 	ldw	r2,-16(fp)
  814504:	10800c17 	ldw	r2,48(r2)
  814508:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  81450c:	e0bffc17 	ldw	r2,-16(fp)
  814510:	10800d17 	ldw	r2,52(r2)
  814514:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  814518:	e0fff917 	ldw	r3,-28(fp)
  81451c:	e0bff517 	ldw	r2,-44(fp)
  814520:	1880062e 	bgeu	r3,r2,81453c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  814524:	e0fff517 	ldw	r3,-44(fp)
  814528:	e0bff917 	ldw	r2,-28(fp)
  81452c:	1885c83a 	sub	r2,r3,r2
  814530:	10bfffc4 	addi	r2,r2,-1
  814534:	e0bff615 	stw	r2,-40(fp)
  814538:	00000b06 	br	814568 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  81453c:	e0bff517 	ldw	r2,-44(fp)
  814540:	10000526 	beq	r2,zero,814558 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  814544:	00c20004 	movi	r3,2048
  814548:	e0bff917 	ldw	r2,-28(fp)
  81454c:	1885c83a 	sub	r2,r3,r2
  814550:	e0bff615 	stw	r2,-40(fp)
  814554:	00000406 	br	814568 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  814558:	00c1ffc4 	movi	r3,2047
  81455c:	e0bff917 	ldw	r2,-28(fp)
  814560:	1885c83a 	sub	r2,r3,r2
  814564:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  814568:	e0bff617 	ldw	r2,-40(fp)
  81456c:	10001e26 	beq	r2,zero,8145e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  814570:	e0fffe17 	ldw	r3,-8(fp)
  814574:	e0bff617 	ldw	r2,-40(fp)
  814578:	1880022e 	bgeu	r3,r2,814584 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  81457c:	e0bffe17 	ldw	r2,-8(fp)
  814580:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  814584:	e0bffc17 	ldw	r2,-16(fp)
  814588:	10c20e04 	addi	r3,r2,2104
  81458c:	e0bff917 	ldw	r2,-28(fp)
  814590:	1885883a 	add	r2,r3,r2
  814594:	e1bff617 	ldw	r6,-40(fp)
  814598:	e17ffd17 	ldw	r5,-12(fp)
  81459c:	1009883a 	mov	r4,r2
  8145a0:	080d5c00 	call	80d5c0 <memcpy>
      ptr   += n;
  8145a4:	e0fffd17 	ldw	r3,-12(fp)
  8145a8:	e0bff617 	ldw	r2,-40(fp)
  8145ac:	1885883a 	add	r2,r3,r2
  8145b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8145b4:	e0fffe17 	ldw	r3,-8(fp)
  8145b8:	e0bff617 	ldw	r2,-40(fp)
  8145bc:	1885c83a 	sub	r2,r3,r2
  8145c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8145c4:	e0fff917 	ldw	r3,-28(fp)
  8145c8:	e0bff617 	ldw	r2,-40(fp)
  8145cc:	1885883a 	add	r2,r3,r2
  8145d0:	10c1ffcc 	andi	r3,r2,2047
  8145d4:	e0bffc17 	ldw	r2,-16(fp)
  8145d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8145dc:	e0bffe17 	ldw	r2,-8(fp)
  8145e0:	00bfc716 	blt	zero,r2,814500 <__alt_mem_onchip_mem+0xff80c500>
  8145e4:	00000106 	br	8145ec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8145e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8145ec:	0005303a 	rdctl	r2,status
  8145f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8145f4:	e0fffb17 	ldw	r3,-20(fp)
  8145f8:	00bfff84 	movi	r2,-2
  8145fc:	1884703a 	and	r2,r3,r2
  814600:	1001703a 	wrctl	status,r2
  
  return context;
  814604:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  814608:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81460c:	e0bffc17 	ldw	r2,-16(fp)
  814610:	10800817 	ldw	r2,32(r2)
  814614:	10c00094 	ori	r3,r2,2
  814618:	e0bffc17 	ldw	r2,-16(fp)
  81461c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814620:	e0bffc17 	ldw	r2,-16(fp)
  814624:	10800017 	ldw	r2,0(r2)
  814628:	10800104 	addi	r2,r2,4
  81462c:	1007883a 	mov	r3,r2
  814630:	e0bffc17 	ldw	r2,-16(fp)
  814634:	10800817 	ldw	r2,32(r2)
  814638:	18800035 	stwio	r2,0(r3)
  81463c:	e0bffa17 	ldw	r2,-24(fp)
  814640:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814644:	e0bff817 	ldw	r2,-32(fp)
  814648:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81464c:	e0bffe17 	ldw	r2,-8(fp)
  814650:	0080100e 	bge	zero,r2,814694 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  814654:	e0bfff17 	ldw	r2,-4(fp)
  814658:	1090000c 	andi	r2,r2,16384
  81465c:	1000101e 	bne	r2,zero,8146a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  814660:	0001883a 	nop
  814664:	e0bffc17 	ldw	r2,-16(fp)
  814668:	10c00d17 	ldw	r3,52(r2)
  81466c:	e0bff517 	ldw	r2,-44(fp)
  814670:	1880051e 	bne	r3,r2,814688 <altera_avalon_jtag_uart_write+0x1b8>
  814674:	e0bffc17 	ldw	r2,-16(fp)
  814678:	10c00917 	ldw	r3,36(r2)
  81467c:	e0bffc17 	ldw	r2,-16(fp)
  814680:	10800117 	ldw	r2,4(r2)
  814684:	18bff736 	bltu	r3,r2,814664 <__alt_mem_onchip_mem+0xff80c664>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  814688:	e0bffc17 	ldw	r2,-16(fp)
  81468c:	10800917 	ldw	r2,36(r2)
  814690:	1000051e 	bne	r2,zero,8146a8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  814694:	e0bffe17 	ldw	r2,-8(fp)
  814698:	00bfd016 	blt	zero,r2,8145dc <__alt_mem_onchip_mem+0xff80c5dc>
  81469c:	00000306 	br	8146ac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8146a0:	0001883a 	nop
  8146a4:	00000106 	br	8146ac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8146a8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8146ac:	e0fffd17 	ldw	r3,-12(fp)
  8146b0:	e0bff717 	ldw	r2,-36(fp)
  8146b4:	18800426 	beq	r3,r2,8146c8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8146b8:	e0fffd17 	ldw	r3,-12(fp)
  8146bc:	e0bff717 	ldw	r2,-36(fp)
  8146c0:	1885c83a 	sub	r2,r3,r2
  8146c4:	00000606 	br	8146e0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8146c8:	e0bfff17 	ldw	r2,-4(fp)
  8146cc:	1090000c 	andi	r2,r2,16384
  8146d0:	10000226 	beq	r2,zero,8146dc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  8146d4:	00bffd44 	movi	r2,-11
  8146d8:	00000106 	br	8146e0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8146dc:	00bffec4 	movi	r2,-5
}
  8146e0:	e037883a 	mov	sp,fp
  8146e4:	dfc00117 	ldw	ra,4(sp)
  8146e8:	df000017 	ldw	fp,0(sp)
  8146ec:	dec00204 	addi	sp,sp,8
  8146f0:	f800283a 	ret

008146f4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8146f4:	defffa04 	addi	sp,sp,-24
  8146f8:	dfc00515 	stw	ra,20(sp)
  8146fc:	df000415 	stw	fp,16(sp)
  814700:	df000404 	addi	fp,sp,16
  814704:	e13ffe15 	stw	r4,-8(fp)
  814708:	2805883a 	mov	r2,r5
  81470c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  814710:	e0bffe17 	ldw	r2,-8(fp)
  814714:	10800017 	ldw	r2,0(r2)
  814718:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81471c:	008003f4 	movhi	r2,15
  814720:	10909004 	addi	r2,r2,16960
  814724:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  814728:	e0bffe17 	ldw	r2,-8(fp)
  81472c:	10800803 	ldbu	r2,32(r2)
  814730:	10803fcc 	andi	r2,r2,255
  814734:	1080201c 	xori	r2,r2,128
  814738:	10bfe004 	addi	r2,r2,-128
  81473c:	1000151e 	bne	r2,zero,814794 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814740:	00000906 	br	814768 <lcd_write_command+0x74>
    if (--i == 0)
  814744:	e0bffc17 	ldw	r2,-16(fp)
  814748:	10bfffc4 	addi	r2,r2,-1
  81474c:	e0bffc15 	stw	r2,-16(fp)
  814750:	e0bffc17 	ldw	r2,-16(fp)
  814754:	1000041e 	bne	r2,zero,814768 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  814758:	e0bffe17 	ldw	r2,-8(fp)
  81475c:	00c00044 	movi	r3,1
  814760:	10c00805 	stb	r3,32(r2)
      return;
  814764:	00000c06 	br	814798 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814768:	e0bffd17 	ldw	r2,-12(fp)
  81476c:	10800104 	addi	r2,r2,4
  814770:	10800037 	ldwio	r2,0(r2)
  814774:	1080200c 	andi	r2,r2,128
  814778:	103ff21e 	bne	r2,zero,814744 <__alt_mem_onchip_mem+0xff80c744>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81477c:	01001904 	movi	r4,100
  814780:	08167d40 	call	8167d4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  814784:	e0bffd17 	ldw	r2,-12(fp)
  814788:	e0ffff03 	ldbu	r3,-4(fp)
  81478c:	10c00035 	stwio	r3,0(r2)
  814790:	00000106 	br	814798 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  814794:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  814798:	e037883a 	mov	sp,fp
  81479c:	dfc00117 	ldw	ra,4(sp)
  8147a0:	df000017 	ldw	fp,0(sp)
  8147a4:	dec00204 	addi	sp,sp,8
  8147a8:	f800283a 	ret

008147ac <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8147ac:	defffa04 	addi	sp,sp,-24
  8147b0:	dfc00515 	stw	ra,20(sp)
  8147b4:	df000415 	stw	fp,16(sp)
  8147b8:	df000404 	addi	fp,sp,16
  8147bc:	e13ffe15 	stw	r4,-8(fp)
  8147c0:	2805883a 	mov	r2,r5
  8147c4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8147c8:	e0bffe17 	ldw	r2,-8(fp)
  8147cc:	10800017 	ldw	r2,0(r2)
  8147d0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8147d4:	008003f4 	movhi	r2,15
  8147d8:	10909004 	addi	r2,r2,16960
  8147dc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8147e0:	e0bffe17 	ldw	r2,-8(fp)
  8147e4:	10800803 	ldbu	r2,32(r2)
  8147e8:	10803fcc 	andi	r2,r2,255
  8147ec:	1080201c 	xori	r2,r2,128
  8147f0:	10bfe004 	addi	r2,r2,-128
  8147f4:	10001d1e 	bne	r2,zero,81486c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8147f8:	00000906 	br	814820 <lcd_write_data+0x74>
    if (--i == 0)
  8147fc:	e0bffc17 	ldw	r2,-16(fp)
  814800:	10bfffc4 	addi	r2,r2,-1
  814804:	e0bffc15 	stw	r2,-16(fp)
  814808:	e0bffc17 	ldw	r2,-16(fp)
  81480c:	1000041e 	bne	r2,zero,814820 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  814810:	e0bffe17 	ldw	r2,-8(fp)
  814814:	00c00044 	movi	r3,1
  814818:	10c00805 	stb	r3,32(r2)
      return;
  81481c:	00001406 	br	814870 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814820:	e0bffd17 	ldw	r2,-12(fp)
  814824:	10800104 	addi	r2,r2,4
  814828:	10800037 	ldwio	r2,0(r2)
  81482c:	1080200c 	andi	r2,r2,128
  814830:	103ff21e 	bne	r2,zero,8147fc <__alt_mem_onchip_mem+0xff80c7fc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  814834:	01001904 	movi	r4,100
  814838:	08167d40 	call	8167d4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  81483c:	e0bffd17 	ldw	r2,-12(fp)
  814840:	10800204 	addi	r2,r2,8
  814844:	1007883a 	mov	r3,r2
  814848:	e0bfff03 	ldbu	r2,-4(fp)
  81484c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  814850:	e0bffe17 	ldw	r2,-8(fp)
  814854:	108008c3 	ldbu	r2,35(r2)
  814858:	10800044 	addi	r2,r2,1
  81485c:	1007883a 	mov	r3,r2
  814860:	e0bffe17 	ldw	r2,-8(fp)
  814864:	10c008c5 	stb	r3,35(r2)
  814868:	00000106 	br	814870 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  81486c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  814870:	e037883a 	mov	sp,fp
  814874:	dfc00117 	ldw	ra,4(sp)
  814878:	df000017 	ldw	fp,0(sp)
  81487c:	dec00204 	addi	sp,sp,8
  814880:	f800283a 	ret

00814884 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  814884:	defffc04 	addi	sp,sp,-16
  814888:	dfc00315 	stw	ra,12(sp)
  81488c:	df000215 	stw	fp,8(sp)
  814890:	df000204 	addi	fp,sp,8
  814894:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  814898:	01400044 	movi	r5,1
  81489c:	e13fff17 	ldw	r4,-4(fp)
  8148a0:	08146f40 	call	8146f4 <lcd_write_command>

  sp->x = 0;
  8148a4:	e0bfff17 	ldw	r2,-4(fp)
  8148a8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8148ac:	e0bfff17 	ldw	r2,-4(fp)
  8148b0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8148b4:	e0bfff17 	ldw	r2,-4(fp)
  8148b8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8148bc:	e03ffe15 	stw	zero,-8(fp)
  8148c0:	00001b06 	br	814930 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8148c4:	e0bffe17 	ldw	r2,-8(fp)
  8148c8:	108018e4 	muli	r2,r2,99
  8148cc:	10801004 	addi	r2,r2,64
  8148d0:	e0ffff17 	ldw	r3,-4(fp)
  8148d4:	1885883a 	add	r2,r3,r2
  8148d8:	01801444 	movi	r6,81
  8148dc:	01400804 	movi	r5,32
  8148e0:	1009883a 	mov	r4,r2
  8148e4:	0807dec0 	call	807dec <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8148e8:	e0bffe17 	ldw	r2,-8(fp)
  8148ec:	108018e4 	muli	r2,r2,99
  8148f0:	10800c04 	addi	r2,r2,48
  8148f4:	e0ffff17 	ldw	r3,-4(fp)
  8148f8:	1885883a 	add	r2,r3,r2
  8148fc:	01800404 	movi	r6,16
  814900:	01400804 	movi	r5,32
  814904:	1009883a 	mov	r4,r2
  814908:	0807dec0 	call	807dec <memset>
    sp->line[y].width = 0;
  81490c:	e0ffff17 	ldw	r3,-4(fp)
  814910:	e0bffe17 	ldw	r2,-8(fp)
  814914:	108018e4 	muli	r2,r2,99
  814918:	1885883a 	add	r2,r3,r2
  81491c:	10802444 	addi	r2,r2,145
  814920:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814924:	e0bffe17 	ldw	r2,-8(fp)
  814928:	10800044 	addi	r2,r2,1
  81492c:	e0bffe15 	stw	r2,-8(fp)
  814930:	e0bffe17 	ldw	r2,-8(fp)
  814934:	10800090 	cmplti	r2,r2,2
  814938:	103fe21e 	bne	r2,zero,8148c4 <__alt_mem_onchip_mem+0xff80c8c4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  81493c:	0001883a 	nop
  814940:	e037883a 	mov	sp,fp
  814944:	dfc00117 	ldw	ra,4(sp)
  814948:	df000017 	ldw	fp,0(sp)
  81494c:	dec00204 	addi	sp,sp,8
  814950:	f800283a 	ret

00814954 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  814954:	defff704 	addi	sp,sp,-36
  814958:	dfc00815 	stw	ra,32(sp)
  81495c:	df000715 	stw	fp,28(sp)
  814960:	df000704 	addi	fp,sp,28
  814964:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  814968:	e0bfff17 	ldw	r2,-4(fp)
  81496c:	10800943 	ldbu	r2,37(r2)
  814970:	10803fcc 	andi	r2,r2,255
  814974:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814978:	e03ff915 	stw	zero,-28(fp)
  81497c:	00006706 	br	814b1c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  814980:	e0ffff17 	ldw	r3,-4(fp)
  814984:	e0bff917 	ldw	r2,-28(fp)
  814988:	108018e4 	muli	r2,r2,99
  81498c:	1885883a 	add	r2,r3,r2
  814990:	10802444 	addi	r2,r2,145
  814994:	10800003 	ldbu	r2,0(r2)
  814998:	10803fcc 	andi	r2,r2,255
  81499c:	1080201c 	xori	r2,r2,128
  8149a0:	10bfe004 	addi	r2,r2,-128
  8149a4:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8149a8:	e0ffff17 	ldw	r3,-4(fp)
  8149ac:	e0bff917 	ldw	r2,-28(fp)
  8149b0:	108018e4 	muli	r2,r2,99
  8149b4:	1885883a 	add	r2,r3,r2
  8149b8:	10802484 	addi	r2,r2,146
  8149bc:	10800003 	ldbu	r2,0(r2)
  8149c0:	10c03fcc 	andi	r3,r2,255
  8149c4:	e0bffc17 	ldw	r2,-16(fp)
  8149c8:	1885383a 	mul	r2,r3,r2
  8149cc:	1005d23a 	srai	r2,r2,8
  8149d0:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  8149d4:	e0fffb17 	ldw	r3,-20(fp)
  8149d8:	e0bffd17 	ldw	r2,-12(fp)
  8149dc:	18800116 	blt	r3,r2,8149e4 <lcd_repaint_screen+0x90>
      offset = 0;
  8149e0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8149e4:	e03ffa15 	stw	zero,-24(fp)
  8149e8:	00004606 	br	814b04 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8149ec:	e0fffa17 	ldw	r3,-24(fp)
  8149f0:	e0bffb17 	ldw	r2,-20(fp)
  8149f4:	1885883a 	add	r2,r3,r2
  8149f8:	e17ffd17 	ldw	r5,-12(fp)
  8149fc:	1009883a 	mov	r4,r2
  814a00:	08119680 	call	811968 <__modsi3>
  814a04:	1009883a 	mov	r4,r2
  814a08:	e0ffff17 	ldw	r3,-4(fp)
  814a0c:	e0bff917 	ldw	r2,-28(fp)
  814a10:	108018e4 	muli	r2,r2,99
  814a14:	1885883a 	add	r2,r3,r2
  814a18:	1105883a 	add	r2,r2,r4
  814a1c:	10801004 	addi	r2,r2,64
  814a20:	10800003 	ldbu	r2,0(r2)
  814a24:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  814a28:	e0ffff17 	ldw	r3,-4(fp)
  814a2c:	e0bff917 	ldw	r2,-28(fp)
  814a30:	108018e4 	muli	r2,r2,99
  814a34:	1887883a 	add	r3,r3,r2
  814a38:	e0bffa17 	ldw	r2,-24(fp)
  814a3c:	1885883a 	add	r2,r3,r2
  814a40:	10800c04 	addi	r2,r2,48
  814a44:	10800003 	ldbu	r2,0(r2)
  814a48:	10c03fcc 	andi	r3,r2,255
  814a4c:	18c0201c 	xori	r3,r3,128
  814a50:	18ffe004 	addi	r3,r3,-128
  814a54:	e0bffe07 	ldb	r2,-8(fp)
  814a58:	18802726 	beq	r3,r2,814af8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  814a5c:	e0fff917 	ldw	r3,-28(fp)
  814a60:	d0a01004 	addi	r2,gp,-32704
  814a64:	1885883a 	add	r2,r3,r2
  814a68:	10800003 	ldbu	r2,0(r2)
  814a6c:	1007883a 	mov	r3,r2
  814a70:	e0bffa17 	ldw	r2,-24(fp)
  814a74:	1885883a 	add	r2,r3,r2
  814a78:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  814a7c:	e0fffe43 	ldbu	r3,-7(fp)
  814a80:	e0bfff17 	ldw	r2,-4(fp)
  814a84:	108008c3 	ldbu	r2,35(r2)
  814a88:	10803fcc 	andi	r2,r2,255
  814a8c:	1080201c 	xori	r2,r2,128
  814a90:	10bfe004 	addi	r2,r2,-128
  814a94:	18800a26 	beq	r3,r2,814ac0 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  814a98:	e0fffe43 	ldbu	r3,-7(fp)
  814a9c:	00bfe004 	movi	r2,-128
  814aa0:	1884b03a 	or	r2,r3,r2
  814aa4:	10803fcc 	andi	r2,r2,255
  814aa8:	100b883a 	mov	r5,r2
  814aac:	e13fff17 	ldw	r4,-4(fp)
  814ab0:	08146f40 	call	8146f4 <lcd_write_command>
          sp->address = address;
  814ab4:	e0fffe43 	ldbu	r3,-7(fp)
  814ab8:	e0bfff17 	ldw	r2,-4(fp)
  814abc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  814ac0:	e0bffe03 	ldbu	r2,-8(fp)
  814ac4:	10803fcc 	andi	r2,r2,255
  814ac8:	100b883a 	mov	r5,r2
  814acc:	e13fff17 	ldw	r4,-4(fp)
  814ad0:	08147ac0 	call	8147ac <lcd_write_data>
        sp->line[y].visible[x] = c;
  814ad4:	e0ffff17 	ldw	r3,-4(fp)
  814ad8:	e0bff917 	ldw	r2,-28(fp)
  814adc:	108018e4 	muli	r2,r2,99
  814ae0:	1887883a 	add	r3,r3,r2
  814ae4:	e0bffa17 	ldw	r2,-24(fp)
  814ae8:	1885883a 	add	r2,r3,r2
  814aec:	10800c04 	addi	r2,r2,48
  814af0:	e0fffe03 	ldbu	r3,-8(fp)
  814af4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  814af8:	e0bffa17 	ldw	r2,-24(fp)
  814afc:	10800044 	addi	r2,r2,1
  814b00:	e0bffa15 	stw	r2,-24(fp)
  814b04:	e0bffa17 	ldw	r2,-24(fp)
  814b08:	10800410 	cmplti	r2,r2,16
  814b0c:	103fb71e 	bne	r2,zero,8149ec <__alt_mem_onchip_mem+0xff80c9ec>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814b10:	e0bff917 	ldw	r2,-28(fp)
  814b14:	10800044 	addi	r2,r2,1
  814b18:	e0bff915 	stw	r2,-28(fp)
  814b1c:	e0bff917 	ldw	r2,-28(fp)
  814b20:	10800090 	cmplti	r2,r2,2
  814b24:	103f961e 	bne	r2,zero,814980 <__alt_mem_onchip_mem+0xff80c980>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  814b28:	0001883a 	nop
  814b2c:	e037883a 	mov	sp,fp
  814b30:	dfc00117 	ldw	ra,4(sp)
  814b34:	df000017 	ldw	fp,0(sp)
  814b38:	dec00204 	addi	sp,sp,8
  814b3c:	f800283a 	ret

00814b40 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  814b40:	defffc04 	addi	sp,sp,-16
  814b44:	dfc00315 	stw	ra,12(sp)
  814b48:	df000215 	stw	fp,8(sp)
  814b4c:	df000204 	addi	fp,sp,8
  814b50:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814b54:	e03ffe15 	stw	zero,-8(fp)
  814b58:	00001d06 	br	814bd0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  814b5c:	e0bffe17 	ldw	r2,-8(fp)
  814b60:	00800f16 	blt	zero,r2,814ba0 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  814b64:	e0bffe17 	ldw	r2,-8(fp)
  814b68:	108018e4 	muli	r2,r2,99
  814b6c:	10801004 	addi	r2,r2,64
  814b70:	e0ffff17 	ldw	r3,-4(fp)
  814b74:	1889883a 	add	r4,r3,r2
  814b78:	e0bffe17 	ldw	r2,-8(fp)
  814b7c:	10800044 	addi	r2,r2,1
  814b80:	108018e4 	muli	r2,r2,99
  814b84:	10801004 	addi	r2,r2,64
  814b88:	e0ffff17 	ldw	r3,-4(fp)
  814b8c:	1885883a 	add	r2,r3,r2
  814b90:	01801404 	movi	r6,80
  814b94:	100b883a 	mov	r5,r2
  814b98:	080d5c00 	call	80d5c0 <memcpy>
  814b9c:	00000906 	br	814bc4 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  814ba0:	e0bffe17 	ldw	r2,-8(fp)
  814ba4:	108018e4 	muli	r2,r2,99
  814ba8:	10801004 	addi	r2,r2,64
  814bac:	e0ffff17 	ldw	r3,-4(fp)
  814bb0:	1885883a 	add	r2,r3,r2
  814bb4:	01801404 	movi	r6,80
  814bb8:	01400804 	movi	r5,32
  814bbc:	1009883a 	mov	r4,r2
  814bc0:	0807dec0 	call	807dec <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814bc4:	e0bffe17 	ldw	r2,-8(fp)
  814bc8:	10800044 	addi	r2,r2,1
  814bcc:	e0bffe15 	stw	r2,-8(fp)
  814bd0:	e0bffe17 	ldw	r2,-8(fp)
  814bd4:	10800090 	cmplti	r2,r2,2
  814bd8:	103fe01e 	bne	r2,zero,814b5c <__alt_mem_onchip_mem+0xff80cb5c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  814bdc:	e0bfff17 	ldw	r2,-4(fp)
  814be0:	10800883 	ldbu	r2,34(r2)
  814be4:	10bfffc4 	addi	r2,r2,-1
  814be8:	1007883a 	mov	r3,r2
  814bec:	e0bfff17 	ldw	r2,-4(fp)
  814bf0:	10c00885 	stb	r3,34(r2)
}
  814bf4:	0001883a 	nop
  814bf8:	e037883a 	mov	sp,fp
  814bfc:	dfc00117 	ldw	ra,4(sp)
  814c00:	df000017 	ldw	fp,0(sp)
  814c04:	dec00204 	addi	sp,sp,8
  814c08:	f800283a 	ret

00814c0c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  814c0c:	defff904 	addi	sp,sp,-28
  814c10:	dfc00615 	stw	ra,24(sp)
  814c14:	df000515 	stw	fp,20(sp)
  814c18:	df000504 	addi	fp,sp,20
  814c1c:	e13ffe15 	stw	r4,-8(fp)
  814c20:	2805883a 	mov	r2,r5
  814c24:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  814c28:	e03ffb15 	stw	zero,-20(fp)
  814c2c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  814c30:	e0bffe17 	ldw	r2,-8(fp)
  814c34:	10800a03 	ldbu	r2,40(r2)
  814c38:	10803fcc 	andi	r2,r2,255
  814c3c:	1080201c 	xori	r2,r2,128
  814c40:	10bfe004 	addi	r2,r2,-128
  814c44:	108016d8 	cmpnei	r2,r2,91
  814c48:	1000411e 	bne	r2,zero,814d50 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  814c4c:	e0bffe17 	ldw	r2,-8(fp)
  814c50:	10800a04 	addi	r2,r2,40
  814c54:	10800044 	addi	r2,r2,1
  814c58:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  814c5c:	00000c06 	br	814c90 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  814c60:	e0bffb17 	ldw	r2,-20(fp)
  814c64:	10c002a4 	muli	r3,r2,10
  814c68:	e0bffd17 	ldw	r2,-12(fp)
  814c6c:	11000044 	addi	r4,r2,1
  814c70:	e13ffd15 	stw	r4,-12(fp)
  814c74:	10800003 	ldbu	r2,0(r2)
  814c78:	10803fcc 	andi	r2,r2,255
  814c7c:	1080201c 	xori	r2,r2,128
  814c80:	10bfe004 	addi	r2,r2,-128
  814c84:	10bff404 	addi	r2,r2,-48
  814c88:	1885883a 	add	r2,r3,r2
  814c8c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  814c90:	d0e01117 	ldw	r3,-32700(gp)
  814c94:	e0bffd17 	ldw	r2,-12(fp)
  814c98:	10800003 	ldbu	r2,0(r2)
  814c9c:	10803fcc 	andi	r2,r2,255
  814ca0:	1080201c 	xori	r2,r2,128
  814ca4:	10bfe004 	addi	r2,r2,-128
  814ca8:	10800044 	addi	r2,r2,1
  814cac:	1885883a 	add	r2,r3,r2
  814cb0:	10800003 	ldbu	r2,0(r2)
  814cb4:	10803fcc 	andi	r2,r2,255
  814cb8:	1080010c 	andi	r2,r2,4
  814cbc:	103fe81e 	bne	r2,zero,814c60 <__alt_mem_onchip_mem+0xff80cc60>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  814cc0:	e0bffd17 	ldw	r2,-12(fp)
  814cc4:	10800003 	ldbu	r2,0(r2)
  814cc8:	10803fcc 	andi	r2,r2,255
  814ccc:	1080201c 	xori	r2,r2,128
  814cd0:	10bfe004 	addi	r2,r2,-128
  814cd4:	10800ed8 	cmpnei	r2,r2,59
  814cd8:	10001f1e 	bne	r2,zero,814d58 <lcd_handle_escape+0x14c>
    {
      ptr++;
  814cdc:	e0bffd17 	ldw	r2,-12(fp)
  814ce0:	10800044 	addi	r2,r2,1
  814ce4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  814ce8:	00000c06 	br	814d1c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  814cec:	e0bffc17 	ldw	r2,-16(fp)
  814cf0:	10c002a4 	muli	r3,r2,10
  814cf4:	e0bffd17 	ldw	r2,-12(fp)
  814cf8:	11000044 	addi	r4,r2,1
  814cfc:	e13ffd15 	stw	r4,-12(fp)
  814d00:	10800003 	ldbu	r2,0(r2)
  814d04:	10803fcc 	andi	r2,r2,255
  814d08:	1080201c 	xori	r2,r2,128
  814d0c:	10bfe004 	addi	r2,r2,-128
  814d10:	10bff404 	addi	r2,r2,-48
  814d14:	1885883a 	add	r2,r3,r2
  814d18:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  814d1c:	d0e01117 	ldw	r3,-32700(gp)
  814d20:	e0bffd17 	ldw	r2,-12(fp)
  814d24:	10800003 	ldbu	r2,0(r2)
  814d28:	10803fcc 	andi	r2,r2,255
  814d2c:	1080201c 	xori	r2,r2,128
  814d30:	10bfe004 	addi	r2,r2,-128
  814d34:	10800044 	addi	r2,r2,1
  814d38:	1885883a 	add	r2,r3,r2
  814d3c:	10800003 	ldbu	r2,0(r2)
  814d40:	10803fcc 	andi	r2,r2,255
  814d44:	1080010c 	andi	r2,r2,4
  814d48:	103fe81e 	bne	r2,zero,814cec <__alt_mem_onchip_mem+0xff80ccec>
  814d4c:	00000206 	br	814d58 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  814d50:	00bfffc4 	movi	r2,-1
  814d54:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  814d58:	e0bfff07 	ldb	r2,-4(fp)
  814d5c:	10c012a0 	cmpeqi	r3,r2,74
  814d60:	1800291e 	bne	r3,zero,814e08 <lcd_handle_escape+0x1fc>
  814d64:	10c012c8 	cmpgei	r3,r2,75
  814d68:	1800031e 	bne	r3,zero,814d78 <lcd_handle_escape+0x16c>
  814d6c:	10801220 	cmpeqi	r2,r2,72
  814d70:	1000061e 	bne	r2,zero,814d8c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  814d74:	00004a06 	br	814ea0 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  814d78:	10c012e0 	cmpeqi	r3,r2,75
  814d7c:	1800281e 	bne	r3,zero,814e20 <lcd_handle_escape+0x214>
  814d80:	108019a0 	cmpeqi	r2,r2,102
  814d84:	1000011e 	bne	r2,zero,814d8c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  814d88:	00004506 	br	814ea0 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  814d8c:	e0bffc17 	ldw	r2,-16(fp)
  814d90:	0080050e 	bge	zero,r2,814da8 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  814d94:	e0bffc17 	ldw	r2,-16(fp)
  814d98:	10bfffc4 	addi	r2,r2,-1
  814d9c:	1007883a 	mov	r3,r2
  814da0:	e0bffe17 	ldw	r2,-8(fp)
  814da4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  814da8:	e0bffb17 	ldw	r2,-20(fp)
  814dac:	0080370e 	bge	zero,r2,814e8c <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  814db0:	e0bffb17 	ldw	r2,-20(fp)
  814db4:	10bfffc4 	addi	r2,r2,-1
  814db8:	1007883a 	mov	r3,r2
  814dbc:	e0bffe17 	ldw	r2,-8(fp)
  814dc0:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  814dc4:	e0bffe17 	ldw	r2,-8(fp)
  814dc8:	10800883 	ldbu	r2,34(r2)
  814dcc:	10803fcc 	andi	r2,r2,255
  814dd0:	10800170 	cmpltui	r2,r2,5
  814dd4:	1000061e 	bne	r2,zero,814df0 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  814dd8:	e0bffe17 	ldw	r2,-8(fp)
  814ddc:	00c00104 	movi	r3,4
  814de0:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  814de4:	00000206 	br	814df0 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  814de8:	e13ffe17 	ldw	r4,-8(fp)
  814dec:	0814b400 	call	814b40 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  814df0:	e0bffe17 	ldw	r2,-8(fp)
  814df4:	10800883 	ldbu	r2,34(r2)
  814df8:	10803fcc 	andi	r2,r2,255
  814dfc:	108000e8 	cmpgeui	r2,r2,3
  814e00:	103ff91e 	bne	r2,zero,814de8 <__alt_mem_onchip_mem+0xff80cde8>
        lcd_scroll_up(sp);
    }
    break;
  814e04:	00002106 	br	814e8c <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  814e08:	e0bffb17 	ldw	r2,-20(fp)
  814e0c:	10800098 	cmpnei	r2,r2,2
  814e10:	1000201e 	bne	r2,zero,814e94 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  814e14:	e13ffe17 	ldw	r4,-8(fp)
  814e18:	08148840 	call	814884 <lcd_clear_screen>
    break;
  814e1c:	00001d06 	br	814e94 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  814e20:	e0bffb17 	ldw	r2,-20(fp)
  814e24:	00801d16 	blt	zero,r2,814e9c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  814e28:	e0bffe17 	ldw	r2,-8(fp)
  814e2c:	10800843 	ldbu	r2,33(r2)
  814e30:	10803fcc 	andi	r2,r2,255
  814e34:	10801428 	cmpgeui	r2,r2,80
  814e38:	1000181e 	bne	r2,zero,814e9c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  814e3c:	e0bffe17 	ldw	r2,-8(fp)
  814e40:	10800883 	ldbu	r2,34(r2)
  814e44:	10803fcc 	andi	r2,r2,255
  814e48:	108018e4 	muli	r2,r2,99
  814e4c:	10801004 	addi	r2,r2,64
  814e50:	e0fffe17 	ldw	r3,-8(fp)
  814e54:	1887883a 	add	r3,r3,r2
  814e58:	e0bffe17 	ldw	r2,-8(fp)
  814e5c:	10800843 	ldbu	r2,33(r2)
  814e60:	10803fcc 	andi	r2,r2,255
  814e64:	1889883a 	add	r4,r3,r2
  814e68:	e0bffe17 	ldw	r2,-8(fp)
  814e6c:	10800843 	ldbu	r2,33(r2)
  814e70:	10803fcc 	andi	r2,r2,255
  814e74:	00c01404 	movi	r3,80
  814e78:	1885c83a 	sub	r2,r3,r2
  814e7c:	100d883a 	mov	r6,r2
  814e80:	01400804 	movi	r5,32
  814e84:	0807dec0 	call	807dec <memset>
    }
    break;
  814e88:	00000406 	br	814e9c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  814e8c:	0001883a 	nop
  814e90:	00000306 	br	814ea0 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  814e94:	0001883a 	nop
  814e98:	00000106 	br	814ea0 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  814e9c:	0001883a 	nop
  }
}
  814ea0:	0001883a 	nop
  814ea4:	e037883a 	mov	sp,fp
  814ea8:	dfc00117 	ldw	ra,4(sp)
  814eac:	df000017 	ldw	fp,0(sp)
  814eb0:	dec00204 	addi	sp,sp,8
  814eb4:	f800283a 	ret

00814eb8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  814eb8:	defff304 	addi	sp,sp,-52
  814ebc:	dfc00c15 	stw	ra,48(sp)
  814ec0:	df000b15 	stw	fp,44(sp)
  814ec4:	df000b04 	addi	fp,sp,44
  814ec8:	e13ffc15 	stw	r4,-16(fp)
  814ecc:	e17ffd15 	stw	r5,-12(fp)
  814ed0:	e1bffe15 	stw	r6,-8(fp)
  814ed4:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  814ed8:	e0bffe17 	ldw	r2,-8(fp)
  814edc:	e0fffd17 	ldw	r3,-12(fp)
  814ee0:	1885883a 	add	r2,r3,r2
  814ee4:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  814ee8:	e0bffc17 	ldw	r2,-16(fp)
  814eec:	00c00044 	movi	r3,1
  814ef0:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  814ef4:	00009906 	br	81515c <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  814ef8:	e0bffd17 	ldw	r2,-12(fp)
  814efc:	10800003 	ldbu	r2,0(r2)
  814f00:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  814f04:	e0bffc17 	ldw	r2,-16(fp)
  814f08:	10800903 	ldbu	r2,36(r2)
  814f0c:	10803fcc 	andi	r2,r2,255
  814f10:	1080201c 	xori	r2,r2,128
  814f14:	10bfe004 	addi	r2,r2,-128
  814f18:	10003716 	blt	r2,zero,814ff8 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  814f1c:	e0bffc17 	ldw	r2,-16(fp)
  814f20:	10800903 	ldbu	r2,36(r2)
  814f24:	10803fcc 	andi	r2,r2,255
  814f28:	1080201c 	xori	r2,r2,128
  814f2c:	10bfe004 	addi	r2,r2,-128
  814f30:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  814f34:	e0bffa17 	ldw	r2,-24(fp)
  814f38:	1000031e 	bne	r2,zero,814f48 <altera_avalon_lcd_16207_write+0x90>
  814f3c:	e0bff907 	ldb	r2,-28(fp)
  814f40:	108016d8 	cmpnei	r2,r2,91
  814f44:	10000d1e 	bne	r2,zero,814f7c <altera_avalon_lcd_16207_write+0xc4>
  814f48:	e0bffa17 	ldw	r2,-24(fp)
  814f4c:	10001826 	beq	r2,zero,814fb0 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  814f50:	d0e01117 	ldw	r3,-32700(gp)
  814f54:	e0bff907 	ldb	r2,-28(fp)
  814f58:	10800044 	addi	r2,r2,1
  814f5c:	1885883a 	add	r2,r3,r2
  814f60:	10800003 	ldbu	r2,0(r2)
  814f64:	10803fcc 	andi	r2,r2,255
  814f68:	1080010c 	andi	r2,r2,4
  814f6c:	1000101e 	bne	r2,zero,814fb0 <altera_avalon_lcd_16207_write+0xf8>
  814f70:	e0bff907 	ldb	r2,-28(fp)
  814f74:	10800ee0 	cmpeqi	r2,r2,59
  814f78:	10000d1e 	bne	r2,zero,814fb0 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  814f7c:	e0fffc17 	ldw	r3,-16(fp)
  814f80:	e0bffa17 	ldw	r2,-24(fp)
  814f84:	1885883a 	add	r2,r3,r2
  814f88:	10800a04 	addi	r2,r2,40
  814f8c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  814f90:	e0bff907 	ldb	r2,-28(fp)
  814f94:	100b883a 	mov	r5,r2
  814f98:	e13ffc17 	ldw	r4,-16(fp)
  814f9c:	0814c0c0 	call	814c0c <lcd_handle_escape>

        sp->esccount = -1;
  814fa0:	e0bffc17 	ldw	r2,-16(fp)
  814fa4:	00ffffc4 	movi	r3,-1
  814fa8:	10c00905 	stb	r3,36(r2)
  814fac:	00006806 	br	815150 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  814fb0:	e0bffc17 	ldw	r2,-16(fp)
  814fb4:	10800903 	ldbu	r2,36(r2)
  814fb8:	10803fcc 	andi	r2,r2,255
  814fbc:	108001e8 	cmpgeui	r2,r2,7
  814fc0:	1000631e 	bne	r2,zero,815150 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  814fc4:	e0fffc17 	ldw	r3,-16(fp)
  814fc8:	e0bffa17 	ldw	r2,-24(fp)
  814fcc:	1885883a 	add	r2,r3,r2
  814fd0:	10800a04 	addi	r2,r2,40
  814fd4:	e0fff903 	ldbu	r3,-28(fp)
  814fd8:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  814fdc:	e0bffc17 	ldw	r2,-16(fp)
  814fe0:	10800903 	ldbu	r2,36(r2)
  814fe4:	10800044 	addi	r2,r2,1
  814fe8:	1007883a 	mov	r3,r2
  814fec:	e0bffc17 	ldw	r2,-16(fp)
  814ff0:	10c00905 	stb	r3,36(r2)
  814ff4:	00005606 	br	815150 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  814ff8:	e0bff907 	ldb	r2,-28(fp)
  814ffc:	108006d8 	cmpnei	r2,r2,27
  815000:	1000031e 	bne	r2,zero,815010 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  815004:	e0bffc17 	ldw	r2,-16(fp)
  815008:	10000905 	stb	zero,36(r2)
  81500c:	00005006 	br	815150 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  815010:	e0bff907 	ldb	r2,-28(fp)
  815014:	10800358 	cmpnei	r2,r2,13
  815018:	1000031e 	bne	r2,zero,815028 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  81501c:	e0bffc17 	ldw	r2,-16(fp)
  815020:	10000845 	stb	zero,33(r2)
  815024:	00004a06 	br	815150 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  815028:	e0bff907 	ldb	r2,-28(fp)
  81502c:	10800298 	cmpnei	r2,r2,10
  815030:	1000101e 	bne	r2,zero,815074 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  815034:	e0bffc17 	ldw	r2,-16(fp)
  815038:	10000845 	stb	zero,33(r2)
      sp->y++;
  81503c:	e0bffc17 	ldw	r2,-16(fp)
  815040:	10800883 	ldbu	r2,34(r2)
  815044:	10800044 	addi	r2,r2,1
  815048:	1007883a 	mov	r3,r2
  81504c:	e0bffc17 	ldw	r2,-16(fp)
  815050:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  815054:	e0bffc17 	ldw	r2,-16(fp)
  815058:	10800883 	ldbu	r2,34(r2)
  81505c:	10803fcc 	andi	r2,r2,255
  815060:	108000f0 	cmpltui	r2,r2,3
  815064:	10003a1e 	bne	r2,zero,815150 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  815068:	e13ffc17 	ldw	r4,-16(fp)
  81506c:	0814b400 	call	814b40 <lcd_scroll_up>
  815070:	00003706 	br	815150 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  815074:	e0bff907 	ldb	r2,-28(fp)
  815078:	10800218 	cmpnei	r2,r2,8
  81507c:	10000b1e 	bne	r2,zero,8150ac <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  815080:	e0bffc17 	ldw	r2,-16(fp)
  815084:	10800843 	ldbu	r2,33(r2)
  815088:	10803fcc 	andi	r2,r2,255
  81508c:	10003026 	beq	r2,zero,815150 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  815090:	e0bffc17 	ldw	r2,-16(fp)
  815094:	10800843 	ldbu	r2,33(r2)
  815098:	10bfffc4 	addi	r2,r2,-1
  81509c:	1007883a 	mov	r3,r2
  8150a0:	e0bffc17 	ldw	r2,-16(fp)
  8150a4:	10c00845 	stb	r3,33(r2)
  8150a8:	00002906 	br	815150 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  8150ac:	d0e01117 	ldw	r3,-32700(gp)
  8150b0:	e0bff907 	ldb	r2,-28(fp)
  8150b4:	10800044 	addi	r2,r2,1
  8150b8:	1885883a 	add	r2,r3,r2
  8150bc:	10800003 	ldbu	r2,0(r2)
  8150c0:	10803fcc 	andi	r2,r2,255
  8150c4:	1080201c 	xori	r2,r2,128
  8150c8:	10bfe004 	addi	r2,r2,-128
  8150cc:	108025cc 	andi	r2,r2,151
  8150d0:	10001f26 	beq	r2,zero,815150 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  8150d4:	e0bffc17 	ldw	r2,-16(fp)
  8150d8:	10800883 	ldbu	r2,34(r2)
  8150dc:	10803fcc 	andi	r2,r2,255
  8150e0:	108000b0 	cmpltui	r2,r2,2
  8150e4:	1000021e 	bne	r2,zero,8150f0 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  8150e8:	e13ffc17 	ldw	r4,-16(fp)
  8150ec:	0814b400 	call	814b40 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8150f0:	e0bffc17 	ldw	r2,-16(fp)
  8150f4:	10800843 	ldbu	r2,33(r2)
  8150f8:	10803fcc 	andi	r2,r2,255
  8150fc:	10801428 	cmpgeui	r2,r2,80
  815100:	10000d1e 	bne	r2,zero,815138 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  815104:	e0bffc17 	ldw	r2,-16(fp)
  815108:	10800883 	ldbu	r2,34(r2)
  81510c:	10c03fcc 	andi	r3,r2,255
  815110:	e0bffc17 	ldw	r2,-16(fp)
  815114:	10800843 	ldbu	r2,33(r2)
  815118:	10803fcc 	andi	r2,r2,255
  81511c:	e13ffc17 	ldw	r4,-16(fp)
  815120:	18c018e4 	muli	r3,r3,99
  815124:	20c7883a 	add	r3,r4,r3
  815128:	1885883a 	add	r2,r3,r2
  81512c:	10801004 	addi	r2,r2,64
  815130:	e0fff903 	ldbu	r3,-28(fp)
  815134:	10c00005 	stb	r3,0(r2)

      sp->x++;
  815138:	e0bffc17 	ldw	r2,-16(fp)
  81513c:	10800843 	ldbu	r2,33(r2)
  815140:	10800044 	addi	r2,r2,1
  815144:	1007883a 	mov	r3,r2
  815148:	e0bffc17 	ldw	r2,-16(fp)
  81514c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  815150:	e0bffd17 	ldw	r2,-12(fp)
  815154:	10800044 	addi	r2,r2,1
  815158:	e0bffd15 	stw	r2,-12(fp)
  81515c:	e0fffd17 	ldw	r3,-12(fp)
  815160:	e0bff817 	ldw	r2,-32(fp)
  815164:	18bf6436 	bltu	r3,r2,814ef8 <__alt_mem_onchip_mem+0xff80cef8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  815168:	00800404 	movi	r2,16
  81516c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815170:	e03ff515 	stw	zero,-44(fp)
  815174:	00003706 	br	815254 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  815178:	00801404 	movi	r2,80
  81517c:	e0bff715 	stw	r2,-36(fp)
  815180:	00001106 	br	8151c8 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  815184:	e0bff717 	ldw	r2,-36(fp)
  815188:	10bfffc4 	addi	r2,r2,-1
  81518c:	e13ffc17 	ldw	r4,-16(fp)
  815190:	e0fff517 	ldw	r3,-44(fp)
  815194:	18c018e4 	muli	r3,r3,99
  815198:	20c7883a 	add	r3,r4,r3
  81519c:	1885883a 	add	r2,r3,r2
  8151a0:	10801004 	addi	r2,r2,64
  8151a4:	10800003 	ldbu	r2,0(r2)
  8151a8:	10803fcc 	andi	r2,r2,255
  8151ac:	1080201c 	xori	r2,r2,128
  8151b0:	10bfe004 	addi	r2,r2,-128
  8151b4:	10800820 	cmpeqi	r2,r2,32
  8151b8:	10000626 	beq	r2,zero,8151d4 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8151bc:	e0bff717 	ldw	r2,-36(fp)
  8151c0:	10bfffc4 	addi	r2,r2,-1
  8151c4:	e0bff715 	stw	r2,-36(fp)
  8151c8:	e0bff717 	ldw	r2,-36(fp)
  8151cc:	00bfed16 	blt	zero,r2,815184 <__alt_mem_onchip_mem+0xff80d184>
  8151d0:	00000106 	br	8151d8 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  8151d4:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  8151d8:	e0bff717 	ldw	r2,-36(fp)
  8151dc:	10800448 	cmpgei	r2,r2,17
  8151e0:	1000031e 	bne	r2,zero,8151f0 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  8151e4:	00800404 	movi	r2,16
  8151e8:	e0bff715 	stw	r2,-36(fp)
  8151ec:	00000306 	br	8151fc <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  8151f0:	e0bff717 	ldw	r2,-36(fp)
  8151f4:	10800044 	addi	r2,r2,1
  8151f8:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  8151fc:	e0bff717 	ldw	r2,-36(fp)
  815200:	1009883a 	mov	r4,r2
  815204:	e0fffc17 	ldw	r3,-16(fp)
  815208:	e0bff517 	ldw	r2,-44(fp)
  81520c:	108018e4 	muli	r2,r2,99
  815210:	1885883a 	add	r2,r3,r2
  815214:	10802444 	addi	r2,r2,145
  815218:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  81521c:	e0fff617 	ldw	r3,-40(fp)
  815220:	e0bff717 	ldw	r2,-36(fp)
  815224:	1880020e 	bge	r3,r2,815230 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  815228:	e0bff717 	ldw	r2,-36(fp)
  81522c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  815230:	e0fffc17 	ldw	r3,-16(fp)
  815234:	e0bff517 	ldw	r2,-44(fp)
  815238:	108018e4 	muli	r2,r2,99
  81523c:	1885883a 	add	r2,r3,r2
  815240:	10802484 	addi	r2,r2,146
  815244:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815248:	e0bff517 	ldw	r2,-44(fp)
  81524c:	10800044 	addi	r2,r2,1
  815250:	e0bff515 	stw	r2,-44(fp)
  815254:	e0bff517 	ldw	r2,-44(fp)
  815258:	10800090 	cmplti	r2,r2,2
  81525c:	103fc61e 	bne	r2,zero,815178 <__alt_mem_onchip_mem+0xff80d178>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  815260:	e0bff617 	ldw	r2,-40(fp)
  815264:	10800448 	cmpgei	r2,r2,17
  815268:	1000031e 	bne	r2,zero,815278 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  81526c:	e0bffc17 	ldw	r2,-16(fp)
  815270:	10000985 	stb	zero,38(r2)
  815274:	00002e06 	br	815330 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  815278:	e0bff617 	ldw	r2,-40(fp)
  81527c:	1085883a 	add	r2,r2,r2
  815280:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  815284:	e0bff617 	ldw	r2,-40(fp)
  815288:	1007883a 	mov	r3,r2
  81528c:	e0bffc17 	ldw	r2,-16(fp)
  815290:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815294:	e03ff515 	stw	zero,-44(fp)
  815298:	00002206 	br	815324 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  81529c:	e0fffc17 	ldw	r3,-16(fp)
  8152a0:	e0bff517 	ldw	r2,-44(fp)
  8152a4:	108018e4 	muli	r2,r2,99
  8152a8:	1885883a 	add	r2,r3,r2
  8152ac:	10802444 	addi	r2,r2,145
  8152b0:	10800003 	ldbu	r2,0(r2)
  8152b4:	10803fcc 	andi	r2,r2,255
  8152b8:	1080201c 	xori	r2,r2,128
  8152bc:	10bfe004 	addi	r2,r2,-128
  8152c0:	10800450 	cmplti	r2,r2,17
  8152c4:	1000141e 	bne	r2,zero,815318 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  8152c8:	e0fffc17 	ldw	r3,-16(fp)
  8152cc:	e0bff517 	ldw	r2,-44(fp)
  8152d0:	108018e4 	muli	r2,r2,99
  8152d4:	1885883a 	add	r2,r3,r2
  8152d8:	10802444 	addi	r2,r2,145
  8152dc:	10800003 	ldbu	r2,0(r2)
  8152e0:	10803fcc 	andi	r2,r2,255
  8152e4:	1080201c 	xori	r2,r2,128
  8152e8:	10bfe004 	addi	r2,r2,-128
  8152ec:	1004923a 	slli	r2,r2,8
  8152f0:	e17ff617 	ldw	r5,-40(fp)
  8152f4:	1009883a 	mov	r4,r2
  8152f8:	08118e40 	call	8118e4 <__divsi3>
  8152fc:	1009883a 	mov	r4,r2
  815300:	e0fffc17 	ldw	r3,-16(fp)
  815304:	e0bff517 	ldw	r2,-44(fp)
  815308:	108018e4 	muli	r2,r2,99
  81530c:	1885883a 	add	r2,r3,r2
  815310:	10802484 	addi	r2,r2,146
  815314:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815318:	e0bff517 	ldw	r2,-44(fp)
  81531c:	10800044 	addi	r2,r2,1
  815320:	e0bff515 	stw	r2,-44(fp)
  815324:	e0bff517 	ldw	r2,-44(fp)
  815328:	10800090 	cmplti	r2,r2,2
  81532c:	103fdb1e 	bne	r2,zero,81529c <__alt_mem_onchip_mem+0xff80d29c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  815330:	e0bffc17 	ldw	r2,-16(fp)
  815334:	10800943 	ldbu	r2,37(r2)
  815338:	10803fcc 	andi	r2,r2,255
  81533c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  815340:	e13ffc17 	ldw	r4,-16(fp)
  815344:	08149540 	call	814954 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  815348:	e0bffc17 	ldw	r2,-16(fp)
  81534c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  815350:	e0bffc17 	ldw	r2,-16(fp)
  815354:	10800943 	ldbu	r2,37(r2)
  815358:	10c03fcc 	andi	r3,r2,255
  81535c:	e0bffb17 	ldw	r2,-20(fp)
  815360:	18800426 	beq	r3,r2,815374 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  815364:	e0bffc17 	ldw	r2,-16(fp)
  815368:	00c00044 	movi	r3,1
  81536c:	10c009c5 	stb	r3,39(r2)
  }
  815370:	003fef06 	br	815330 <__alt_mem_onchip_mem+0xff80d330>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  815374:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  815378:	e0bffe17 	ldw	r2,-8(fp)
}
  81537c:	e037883a 	mov	sp,fp
  815380:	dfc00117 	ldw	ra,4(sp)
  815384:	df000017 	ldw	fp,0(sp)
  815388:	dec00204 	addi	sp,sp,8
  81538c:	f800283a 	ret

00815390 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  815390:	defffc04 	addi	sp,sp,-16
  815394:	dfc00315 	stw	ra,12(sp)
  815398:	df000215 	stw	fp,8(sp)
  81539c:	df000204 	addi	fp,sp,8
  8153a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8153a4:	e0bfff17 	ldw	r2,-4(fp)
  8153a8:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8153ac:	e0bffe17 	ldw	r2,-8(fp)
  8153b0:	10800943 	ldbu	r2,37(r2)
  8153b4:	10803fcc 	andi	r2,r2,255
  8153b8:	10c00044 	addi	r3,r2,1
  8153bc:	e0bffe17 	ldw	r2,-8(fp)
  8153c0:	10800983 	ldbu	r2,38(r2)
  8153c4:	10803fcc 	andi	r2,r2,255
  8153c8:	18800316 	blt	r3,r2,8153d8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  8153cc:	e0bffe17 	ldw	r2,-8(fp)
  8153d0:	10000945 	stb	zero,37(r2)
  8153d4:	00000606 	br	8153f0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8153d8:	e0bffe17 	ldw	r2,-8(fp)
  8153dc:	10800943 	ldbu	r2,37(r2)
  8153e0:	10800044 	addi	r2,r2,1
  8153e4:	1007883a 	mov	r3,r2
  8153e8:	e0bffe17 	ldw	r2,-8(fp)
  8153ec:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8153f0:	e0bffe17 	ldw	r2,-8(fp)
  8153f4:	10800983 	ldbu	r2,38(r2)
  8153f8:	10803fcc 	andi	r2,r2,255
  8153fc:	10000826 	beq	r2,zero,815420 <alt_lcd_16207_timeout+0x90>
  815400:	e0bffe17 	ldw	r2,-8(fp)
  815404:	108009c3 	ldbu	r2,39(r2)
  815408:	10803fcc 	andi	r2,r2,255
  81540c:	1080201c 	xori	r2,r2,128
  815410:	10bfe004 	addi	r2,r2,-128
  815414:	1000021e 	bne	r2,zero,815420 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  815418:	e13ffe17 	ldw	r4,-8(fp)
  81541c:	08149540 	call	814954 <lcd_repaint_screen>

  return sp->period;
  815420:	e0bffe17 	ldw	r2,-8(fp)
  815424:	10800717 	ldw	r2,28(r2)
}
  815428:	e037883a 	mov	sp,fp
  81542c:	dfc00117 	ldw	ra,4(sp)
  815430:	df000017 	ldw	fp,0(sp)
  815434:	dec00204 	addi	sp,sp,8
  815438:	f800283a 	ret

0081543c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  81543c:	defffc04 	addi	sp,sp,-16
  815440:	dfc00315 	stw	ra,12(sp)
  815444:	df000215 	stw	fp,8(sp)
  815448:	df000204 	addi	fp,sp,8
  81544c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  815450:	e0bfff17 	ldw	r2,-4(fp)
  815454:	10800017 	ldw	r2,0(r2)
  815458:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  81545c:	e0bfff17 	ldw	r2,-4(fp)
  815460:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  815464:	010ea604 	movi	r4,15000
  815468:	08167d40 	call	8167d4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81546c:	e0bffe17 	ldw	r2,-8(fp)
  815470:	00c00c04 	movi	r3,48
  815474:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  815478:	01040104 	movi	r4,4100
  81547c:	08167d40 	call	8167d4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  815480:	e0bffe17 	ldw	r2,-8(fp)
  815484:	00c00c04 	movi	r3,48
  815488:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  81548c:	0100fa04 	movi	r4,1000
  815490:	08167d40 	call	8167d4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  815494:	e0bffe17 	ldw	r2,-8(fp)
  815498:	00c00c04 	movi	r3,48
  81549c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8154a0:	01400e04 	movi	r5,56
  8154a4:	e13fff17 	ldw	r4,-4(fp)
  8154a8:	08146f40 	call	8146f4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8154ac:	01400204 	movi	r5,8
  8154b0:	e13fff17 	ldw	r4,-4(fp)
  8154b4:	08146f40 	call	8146f4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8154b8:	e13fff17 	ldw	r4,-4(fp)
  8154bc:	08148840 	call	814884 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8154c0:	01400184 	movi	r5,6
  8154c4:	e13fff17 	ldw	r4,-4(fp)
  8154c8:	08146f40 	call	8146f4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8154cc:	01400304 	movi	r5,12
  8154d0:	e13fff17 	ldw	r4,-4(fp)
  8154d4:	08146f40 	call	8146f4 <lcd_write_command>

  sp->esccount = -1;
  8154d8:	e0bfff17 	ldw	r2,-4(fp)
  8154dc:	00ffffc4 	movi	r3,-1
  8154e0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  8154e4:	e0bfff17 	ldw	r2,-4(fp)
  8154e8:	10800a04 	addi	r2,r2,40
  8154ec:	01800204 	movi	r6,8
  8154f0:	000b883a 	mov	r5,zero
  8154f4:	1009883a 	mov	r4,r2
  8154f8:	0807dec0 	call	807dec <memset>

  sp->scrollpos = 0;
  8154fc:	e0bfff17 	ldw	r2,-4(fp)
  815500:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  815504:	e0bfff17 	ldw	r2,-4(fp)
  815508:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81550c:	e0bfff17 	ldw	r2,-4(fp)
  815510:	100009c5 	stb	zero,39(r2)
  815514:	d0a75c17 	ldw	r2,-25232(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  815518:	01400284 	movi	r5,10
  81551c:	1009883a 	mov	r4,r2
  815520:	08119dc0 	call	8119dc <__udivsi3>
  815524:	1007883a 	mov	r3,r2
  815528:	e0bfff17 	ldw	r2,-4(fp)
  81552c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  815530:	e0bfff17 	ldw	r2,-4(fp)
  815534:	10c00104 	addi	r3,r2,4
  815538:	e0bfff17 	ldw	r2,-4(fp)
  81553c:	10800717 	ldw	r2,28(r2)
  815540:	e1ffff17 	ldw	r7,-4(fp)
  815544:	01802074 	movhi	r6,129
  815548:	3194e404 	addi	r6,r6,21392
  81554c:	100b883a 	mov	r5,r2
  815550:	1809883a 	mov	r4,r3
  815554:	0812ba00 	call	812ba0 <alt_alarm_start>
}
  815558:	0001883a 	nop
  81555c:	e037883a 	mov	sp,fp
  815560:	dfc00117 	ldw	ra,4(sp)
  815564:	df000017 	ldw	fp,0(sp)
  815568:	dec00204 	addi	sp,sp,8
  81556c:	f800283a 	ret

00815570 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  815570:	defffa04 	addi	sp,sp,-24
  815574:	dfc00515 	stw	ra,20(sp)
  815578:	df000415 	stw	fp,16(sp)
  81557c:	df000404 	addi	fp,sp,16
  815580:	e13ffd15 	stw	r4,-12(fp)
  815584:	e17ffe15 	stw	r5,-8(fp)
  815588:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  81558c:	e0bffd17 	ldw	r2,-12(fp)
  815590:	10800017 	ldw	r2,0(r2)
  815594:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  815598:	e0bffc17 	ldw	r2,-16(fp)
  81559c:	10c00a04 	addi	r3,r2,40
  8155a0:	e0bffd17 	ldw	r2,-12(fp)
  8155a4:	10800217 	ldw	r2,8(r2)
  8155a8:	100f883a 	mov	r7,r2
  8155ac:	e1bfff17 	ldw	r6,-4(fp)
  8155b0:	e17ffe17 	ldw	r5,-8(fp)
  8155b4:	1809883a 	mov	r4,r3
  8155b8:	0814eb80 	call	814eb8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8155bc:	e037883a 	mov	sp,fp
  8155c0:	dfc00117 	ldw	ra,4(sp)
  8155c4:	df000017 	ldw	fp,0(sp)
  8155c8:	dec00204 	addi	sp,sp,8
  8155cc:	f800283a 	ret

008155d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8155d0:	defffa04 	addi	sp,sp,-24
  8155d4:	dfc00515 	stw	ra,20(sp)
  8155d8:	df000415 	stw	fp,16(sp)
  8155dc:	df000404 	addi	fp,sp,16
  8155e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8155e4:	0007883a 	mov	r3,zero
  8155e8:	e0bfff17 	ldw	r2,-4(fp)
  8155ec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8155f0:	e0bfff17 	ldw	r2,-4(fp)
  8155f4:	10800104 	addi	r2,r2,4
  8155f8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8155fc:	0005303a 	rdctl	r2,status
  815600:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815604:	e0fffd17 	ldw	r3,-12(fp)
  815608:	00bfff84 	movi	r2,-2
  81560c:	1884703a 	and	r2,r3,r2
  815610:	1001703a 	wrctl	status,r2
  
  return context;
  815614:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  815618:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  81561c:	081394c0 	call	81394c <alt_tick>
  815620:	e0bffc17 	ldw	r2,-16(fp)
  815624:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815628:	e0bffe17 	ldw	r2,-8(fp)
  81562c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  815630:	0001883a 	nop
  815634:	e037883a 	mov	sp,fp
  815638:	dfc00117 	ldw	ra,4(sp)
  81563c:	df000017 	ldw	fp,0(sp)
  815640:	dec00204 	addi	sp,sp,8
  815644:	f800283a 	ret

00815648 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  815648:	defff804 	addi	sp,sp,-32
  81564c:	dfc00715 	stw	ra,28(sp)
  815650:	df000615 	stw	fp,24(sp)
  815654:	df000604 	addi	fp,sp,24
  815658:	e13ffc15 	stw	r4,-16(fp)
  81565c:	e17ffd15 	stw	r5,-12(fp)
  815660:	e1bffe15 	stw	r6,-8(fp)
  815664:	e1ffff15 	stw	r7,-4(fp)
  815668:	e0bfff17 	ldw	r2,-4(fp)
  81566c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  815670:	d0a75c17 	ldw	r2,-25232(gp)
  815674:	1000021e 	bne	r2,zero,815680 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  815678:	e0bffb17 	ldw	r2,-20(fp)
  81567c:	d0a75c15 	stw	r2,-25232(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  815680:	e0bffc17 	ldw	r2,-16(fp)
  815684:	10800104 	addi	r2,r2,4
  815688:	00c001c4 	movi	r3,7
  81568c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  815690:	d8000015 	stw	zero,0(sp)
  815694:	e1fffc17 	ldw	r7,-16(fp)
  815698:	01802074 	movhi	r6,129
  81569c:	31957404 	addi	r6,r6,21968
  8156a0:	e17ffe17 	ldw	r5,-8(fp)
  8156a4:	e13ffd17 	ldw	r4,-12(fp)
  8156a8:	08163f40 	call	8163f4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8156ac:	0001883a 	nop
  8156b0:	e037883a 	mov	sp,fp
  8156b4:	dfc00117 	ldw	ra,4(sp)
  8156b8:	df000017 	ldw	fp,0(sp)
  8156bc:	dec00204 	addi	sp,sp,8
  8156c0:	f800283a 	ret

008156c4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8156c4:	defffa04 	addi	sp,sp,-24
  8156c8:	dfc00515 	stw	ra,20(sp)
  8156cc:	df000415 	stw	fp,16(sp)
  8156d0:	df000404 	addi	fp,sp,16
  8156d4:	e13ffd15 	stw	r4,-12(fp)
  8156d8:	e17ffe15 	stw	r5,-8(fp)
  8156dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8156e0:	e0bffd17 	ldw	r2,-12(fp)
  8156e4:	10800017 	ldw	r2,0(r2)
  8156e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8156ec:	e0bffc17 	ldw	r2,-16(fp)
  8156f0:	10c00a04 	addi	r3,r2,40
  8156f4:	e0bffd17 	ldw	r2,-12(fp)
  8156f8:	10800217 	ldw	r2,8(r2)
  8156fc:	100f883a 	mov	r7,r2
  815700:	e1bfff17 	ldw	r6,-4(fp)
  815704:	e17ffe17 	ldw	r5,-8(fp)
  815708:	1809883a 	mov	r4,r3
  81570c:	0815bd80 	call	815bd8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  815710:	e037883a 	mov	sp,fp
  815714:	dfc00117 	ldw	ra,4(sp)
  815718:	df000017 	ldw	fp,0(sp)
  81571c:	dec00204 	addi	sp,sp,8
  815720:	f800283a 	ret

00815724 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  815724:	defffa04 	addi	sp,sp,-24
  815728:	dfc00515 	stw	ra,20(sp)
  81572c:	df000415 	stw	fp,16(sp)
  815730:	df000404 	addi	fp,sp,16
  815734:	e13ffd15 	stw	r4,-12(fp)
  815738:	e17ffe15 	stw	r5,-8(fp)
  81573c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815740:	e0bffd17 	ldw	r2,-12(fp)
  815744:	10800017 	ldw	r2,0(r2)
  815748:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  81574c:	e0bffc17 	ldw	r2,-16(fp)
  815750:	10c00a04 	addi	r3,r2,40
  815754:	e0bffd17 	ldw	r2,-12(fp)
  815758:	10800217 	ldw	r2,8(r2)
  81575c:	100f883a 	mov	r7,r2
  815760:	e1bfff17 	ldw	r6,-4(fp)
  815764:	e17ffe17 	ldw	r5,-8(fp)
  815768:	1809883a 	mov	r4,r3
  81576c:	0815df00 	call	815df0 <altera_avalon_uart_write>
      fd->fd_flags);
}
  815770:	e037883a 	mov	sp,fp
  815774:	dfc00117 	ldw	ra,4(sp)
  815778:	df000017 	ldw	fp,0(sp)
  81577c:	dec00204 	addi	sp,sp,8
  815780:	f800283a 	ret

00815784 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  815784:	defffc04 	addi	sp,sp,-16
  815788:	dfc00315 	stw	ra,12(sp)
  81578c:	df000215 	stw	fp,8(sp)
  815790:	df000204 	addi	fp,sp,8
  815794:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815798:	e0bfff17 	ldw	r2,-4(fp)
  81579c:	10800017 	ldw	r2,0(r2)
  8157a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8157a4:	e0bffe17 	ldw	r2,-8(fp)
  8157a8:	10c00a04 	addi	r3,r2,40
  8157ac:	e0bfff17 	ldw	r2,-4(fp)
  8157b0:	10800217 	ldw	r2,8(r2)
  8157b4:	100b883a 	mov	r5,r2
  8157b8:	1809883a 	mov	r4,r3
  8157bc:	0815b480 	call	815b48 <altera_avalon_uart_close>
}
  8157c0:	e037883a 	mov	sp,fp
  8157c4:	dfc00117 	ldw	ra,4(sp)
  8157c8:	df000017 	ldw	fp,0(sp)
  8157cc:	dec00204 	addi	sp,sp,8
  8157d0:	f800283a 	ret

008157d4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8157d4:	defff804 	addi	sp,sp,-32
  8157d8:	dfc00715 	stw	ra,28(sp)
  8157dc:	df000615 	stw	fp,24(sp)
  8157e0:	df000604 	addi	fp,sp,24
  8157e4:	e13ffd15 	stw	r4,-12(fp)
  8157e8:	e17ffe15 	stw	r5,-8(fp)
  8157ec:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8157f0:	e0bffd17 	ldw	r2,-12(fp)
  8157f4:	10800017 	ldw	r2,0(r2)
  8157f8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8157fc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  815800:	1000041e 	bne	r2,zero,815814 <altera_avalon_uart_init+0x40>
  815804:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  815808:	1000021e 	bne	r2,zero,815814 <altera_avalon_uart_init+0x40>
  81580c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  815810:	10000226 	beq	r2,zero,81581c <altera_avalon_uart_init+0x48>
  815814:	00800044 	movi	r2,1
  815818:	00000106 	br	815820 <altera_avalon_uart_init+0x4c>
  81581c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  815820:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  815824:	e0bffc17 	ldw	r2,-16(fp)
  815828:	10000f1e 	bne	r2,zero,815868 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  81582c:	e0bffd17 	ldw	r2,-12(fp)
  815830:	00c32004 	movi	r3,3200
  815834:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  815838:	e0bffb17 	ldw	r2,-20(fp)
  81583c:	10800304 	addi	r2,r2,12
  815840:	e0fffd17 	ldw	r3,-12(fp)
  815844:	18c00117 	ldw	r3,4(r3)
  815848:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  81584c:	d8000015 	stw	zero,0(sp)
  815850:	e1fffd17 	ldw	r7,-12(fp)
  815854:	01802074 	movhi	r6,129
  815858:	31962004 	addi	r6,r6,22656
  81585c:	e17fff17 	ldw	r5,-4(fp)
  815860:	e13ffe17 	ldw	r4,-8(fp)
  815864:	08163f40 	call	8163f4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  815868:	0001883a 	nop
  81586c:	e037883a 	mov	sp,fp
  815870:	dfc00117 	ldw	ra,4(sp)
  815874:	df000017 	ldw	fp,0(sp)
  815878:	dec00204 	addi	sp,sp,8
  81587c:	f800283a 	ret

00815880 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  815880:	defffa04 	addi	sp,sp,-24
  815884:	dfc00515 	stw	ra,20(sp)
  815888:	df000415 	stw	fp,16(sp)
  81588c:	df000404 	addi	fp,sp,16
  815890:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  815894:	e0bfff17 	ldw	r2,-4(fp)
  815898:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  81589c:	e0bffc17 	ldw	r2,-16(fp)
  8158a0:	10800017 	ldw	r2,0(r2)
  8158a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8158a8:	e0bffd17 	ldw	r2,-12(fp)
  8158ac:	10800204 	addi	r2,r2,8
  8158b0:	10800037 	ldwio	r2,0(r2)
  8158b4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8158b8:	e0bffd17 	ldw	r2,-12(fp)
  8158bc:	10800204 	addi	r2,r2,8
  8158c0:	0007883a 	mov	r3,zero
  8158c4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8158c8:	e0bffd17 	ldw	r2,-12(fp)
  8158cc:	10800204 	addi	r2,r2,8
  8158d0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8158d4:	e0bffe17 	ldw	r2,-8(fp)
  8158d8:	1080200c 	andi	r2,r2,128
  8158dc:	10000326 	beq	r2,zero,8158ec <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8158e0:	e17ffe17 	ldw	r5,-8(fp)
  8158e4:	e13ffc17 	ldw	r4,-16(fp)
  8158e8:	081591c0 	call	81591c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8158ec:	e0bffe17 	ldw	r2,-8(fp)
  8158f0:	1081100c 	andi	r2,r2,1088
  8158f4:	10000326 	beq	r2,zero,815904 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8158f8:	e17ffe17 	ldw	r5,-8(fp)
  8158fc:	e13ffc17 	ldw	r4,-16(fp)
  815900:	0815a000 	call	815a00 <altera_avalon_uart_txirq>
  }
  

}
  815904:	0001883a 	nop
  815908:	e037883a 	mov	sp,fp
  81590c:	dfc00117 	ldw	ra,4(sp)
  815910:	df000017 	ldw	fp,0(sp)
  815914:	dec00204 	addi	sp,sp,8
  815918:	f800283a 	ret

0081591c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81591c:	defffc04 	addi	sp,sp,-16
  815920:	df000315 	stw	fp,12(sp)
  815924:	df000304 	addi	fp,sp,12
  815928:	e13ffe15 	stw	r4,-8(fp)
  81592c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  815930:	e0bfff17 	ldw	r2,-4(fp)
  815934:	108000cc 	andi	r2,r2,3
  815938:	10002c1e 	bne	r2,zero,8159ec <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  81593c:	e0bffe17 	ldw	r2,-8(fp)
  815940:	10800317 	ldw	r2,12(r2)
  815944:	e0bffe17 	ldw	r2,-8(fp)
  815948:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81594c:	e0bffe17 	ldw	r2,-8(fp)
  815950:	10800317 	ldw	r2,12(r2)
  815954:	10800044 	addi	r2,r2,1
  815958:	10800fcc 	andi	r2,r2,63
  81595c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  815960:	e0bffe17 	ldw	r2,-8(fp)
  815964:	10800317 	ldw	r2,12(r2)
  815968:	e0fffe17 	ldw	r3,-8(fp)
  81596c:	18c00017 	ldw	r3,0(r3)
  815970:	18c00037 	ldwio	r3,0(r3)
  815974:	1809883a 	mov	r4,r3
  815978:	e0fffe17 	ldw	r3,-8(fp)
  81597c:	1885883a 	add	r2,r3,r2
  815980:	10800704 	addi	r2,r2,28
  815984:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  815988:	e0bffe17 	ldw	r2,-8(fp)
  81598c:	e0fffd17 	ldw	r3,-12(fp)
  815990:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815994:	e0bffe17 	ldw	r2,-8(fp)
  815998:	10800317 	ldw	r2,12(r2)
  81599c:	10800044 	addi	r2,r2,1
  8159a0:	10800fcc 	andi	r2,r2,63
  8159a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8159a8:	e0bffe17 	ldw	r2,-8(fp)
  8159ac:	10c00217 	ldw	r3,8(r2)
  8159b0:	e0bffd17 	ldw	r2,-12(fp)
  8159b4:	18800e1e 	bne	r3,r2,8159f0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8159b8:	e0bffe17 	ldw	r2,-8(fp)
  8159bc:	10c00117 	ldw	r3,4(r2)
  8159c0:	00bfdfc4 	movi	r2,-129
  8159c4:	1886703a 	and	r3,r3,r2
  8159c8:	e0bffe17 	ldw	r2,-8(fp)
  8159cc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8159d0:	e0bffe17 	ldw	r2,-8(fp)
  8159d4:	10800017 	ldw	r2,0(r2)
  8159d8:	10800304 	addi	r2,r2,12
  8159dc:	e0fffe17 	ldw	r3,-8(fp)
  8159e0:	18c00117 	ldw	r3,4(r3)
  8159e4:	10c00035 	stwio	r3,0(r2)
  8159e8:	00000106 	br	8159f0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8159ec:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8159f0:	e037883a 	mov	sp,fp
  8159f4:	df000017 	ldw	fp,0(sp)
  8159f8:	dec00104 	addi	sp,sp,4
  8159fc:	f800283a 	ret

00815a00 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  815a00:	defffb04 	addi	sp,sp,-20
  815a04:	df000415 	stw	fp,16(sp)
  815a08:	df000404 	addi	fp,sp,16
  815a0c:	e13ffc15 	stw	r4,-16(fp)
  815a10:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  815a14:	e0bffc17 	ldw	r2,-16(fp)
  815a18:	10c00417 	ldw	r3,16(r2)
  815a1c:	e0bffc17 	ldw	r2,-16(fp)
  815a20:	10800517 	ldw	r2,20(r2)
  815a24:	18803226 	beq	r3,r2,815af0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  815a28:	e0bffc17 	ldw	r2,-16(fp)
  815a2c:	10800617 	ldw	r2,24(r2)
  815a30:	1080008c 	andi	r2,r2,2
  815a34:	10000326 	beq	r2,zero,815a44 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  815a38:	e0bffd17 	ldw	r2,-12(fp)
  815a3c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  815a40:	10001d26 	beq	r2,zero,815ab8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  815a44:	e0bffc17 	ldw	r2,-16(fp)
  815a48:	10800417 	ldw	r2,16(r2)
  815a4c:	e0bffc17 	ldw	r2,-16(fp)
  815a50:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  815a54:	e0bffc17 	ldw	r2,-16(fp)
  815a58:	10800017 	ldw	r2,0(r2)
  815a5c:	10800104 	addi	r2,r2,4
  815a60:	e0fffc17 	ldw	r3,-16(fp)
  815a64:	18c00417 	ldw	r3,16(r3)
  815a68:	e13ffc17 	ldw	r4,-16(fp)
  815a6c:	20c7883a 	add	r3,r4,r3
  815a70:	18c01704 	addi	r3,r3,92
  815a74:	18c00003 	ldbu	r3,0(r3)
  815a78:	18c03fcc 	andi	r3,r3,255
  815a7c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  815a80:	e0bffc17 	ldw	r2,-16(fp)
  815a84:	10800417 	ldw	r2,16(r2)
  815a88:	10800044 	addi	r2,r2,1
  815a8c:	e0fffc17 	ldw	r3,-16(fp)
  815a90:	18800415 	stw	r2,16(r3)
  815a94:	10c00fcc 	andi	r3,r2,63
  815a98:	e0bffc17 	ldw	r2,-16(fp)
  815a9c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  815aa0:	e0bffc17 	ldw	r2,-16(fp)
  815aa4:	10800117 	ldw	r2,4(r2)
  815aa8:	10c01014 	ori	r3,r2,64
  815aac:	e0bffc17 	ldw	r2,-16(fp)
  815ab0:	10c00115 	stw	r3,4(r2)
  815ab4:	00000e06 	br	815af0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  815ab8:	e0bffc17 	ldw	r2,-16(fp)
  815abc:	10800017 	ldw	r2,0(r2)
  815ac0:	10800204 	addi	r2,r2,8
  815ac4:	10800037 	ldwio	r2,0(r2)
  815ac8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  815acc:	e0bffd17 	ldw	r2,-12(fp)
  815ad0:	1082000c 	andi	r2,r2,2048
  815ad4:	1000061e 	bne	r2,zero,815af0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  815ad8:	e0bffc17 	ldw	r2,-16(fp)
  815adc:	10c00117 	ldw	r3,4(r2)
  815ae0:	00bfefc4 	movi	r2,-65
  815ae4:	1886703a 	and	r3,r3,r2
  815ae8:	e0bffc17 	ldw	r2,-16(fp)
  815aec:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  815af0:	e0bffc17 	ldw	r2,-16(fp)
  815af4:	10c00417 	ldw	r3,16(r2)
  815af8:	e0bffc17 	ldw	r2,-16(fp)
  815afc:	10800517 	ldw	r2,20(r2)
  815b00:	1880061e 	bne	r3,r2,815b1c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815b04:	e0bffc17 	ldw	r2,-16(fp)
  815b08:	10c00117 	ldw	r3,4(r2)
  815b0c:	00beefc4 	movi	r2,-1089
  815b10:	1886703a 	and	r3,r3,r2
  815b14:	e0bffc17 	ldw	r2,-16(fp)
  815b18:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815b1c:	e0bffc17 	ldw	r2,-16(fp)
  815b20:	10800017 	ldw	r2,0(r2)
  815b24:	10800304 	addi	r2,r2,12
  815b28:	e0fffc17 	ldw	r3,-16(fp)
  815b2c:	18c00117 	ldw	r3,4(r3)
  815b30:	10c00035 	stwio	r3,0(r2)
}
  815b34:	0001883a 	nop
  815b38:	e037883a 	mov	sp,fp
  815b3c:	df000017 	ldw	fp,0(sp)
  815b40:	dec00104 	addi	sp,sp,4
  815b44:	f800283a 	ret

00815b48 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  815b48:	defffd04 	addi	sp,sp,-12
  815b4c:	df000215 	stw	fp,8(sp)
  815b50:	df000204 	addi	fp,sp,8
  815b54:	e13ffe15 	stw	r4,-8(fp)
  815b58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  815b5c:	00000506 	br	815b74 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  815b60:	e0bfff17 	ldw	r2,-4(fp)
  815b64:	1090000c 	andi	r2,r2,16384
  815b68:	10000226 	beq	r2,zero,815b74 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  815b6c:	00bffd44 	movi	r2,-11
  815b70:	00000606 	br	815b8c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  815b74:	e0bffe17 	ldw	r2,-8(fp)
  815b78:	10c00417 	ldw	r3,16(r2)
  815b7c:	e0bffe17 	ldw	r2,-8(fp)
  815b80:	10800517 	ldw	r2,20(r2)
  815b84:	18bff61e 	bne	r3,r2,815b60 <__alt_mem_onchip_mem+0xff80db60>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  815b88:	0005883a 	mov	r2,zero
}
  815b8c:	e037883a 	mov	sp,fp
  815b90:	df000017 	ldw	fp,0(sp)
  815b94:	dec00104 	addi	sp,sp,4
  815b98:	f800283a 	ret

00815b9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815b9c:	defffe04 	addi	sp,sp,-8
  815ba0:	dfc00115 	stw	ra,4(sp)
  815ba4:	df000015 	stw	fp,0(sp)
  815ba8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  815bac:	d0a00b17 	ldw	r2,-32724(gp)
  815bb0:	10000326 	beq	r2,zero,815bc0 <alt_get_errno+0x24>
  815bb4:	d0a00b17 	ldw	r2,-32724(gp)
  815bb8:	103ee83a 	callr	r2
  815bbc:	00000106 	br	815bc4 <alt_get_errno+0x28>
  815bc0:	d0a75104 	addi	r2,gp,-25276
}
  815bc4:	e037883a 	mov	sp,fp
  815bc8:	dfc00117 	ldw	ra,4(sp)
  815bcc:	df000017 	ldw	fp,0(sp)
  815bd0:	dec00204 	addi	sp,sp,8
  815bd4:	f800283a 	ret

00815bd8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  815bd8:	defff204 	addi	sp,sp,-56
  815bdc:	dfc00d15 	stw	ra,52(sp)
  815be0:	df000c15 	stw	fp,48(sp)
  815be4:	df000c04 	addi	fp,sp,48
  815be8:	e13ffc15 	stw	r4,-16(fp)
  815bec:	e17ffd15 	stw	r5,-12(fp)
  815bf0:	e1bffe15 	stw	r6,-8(fp)
  815bf4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  815bf8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  815bfc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  815c00:	e0bfff17 	ldw	r2,-4(fp)
  815c04:	1090000c 	andi	r2,r2,16384
  815c08:	1005003a 	cmpeq	r2,r2,zero
  815c0c:	10803fcc 	andi	r2,r2,255
  815c10:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  815c14:	00001306 	br	815c64 <altera_avalon_uart_read+0x8c>
    {
      count++;
  815c18:	e0bff517 	ldw	r2,-44(fp)
  815c1c:	10800044 	addi	r2,r2,1
  815c20:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  815c24:	e0bffd17 	ldw	r2,-12(fp)
  815c28:	10c00044 	addi	r3,r2,1
  815c2c:	e0fffd15 	stw	r3,-12(fp)
  815c30:	e0fffc17 	ldw	r3,-16(fp)
  815c34:	18c00217 	ldw	r3,8(r3)
  815c38:	e13ffc17 	ldw	r4,-16(fp)
  815c3c:	20c7883a 	add	r3,r4,r3
  815c40:	18c00704 	addi	r3,r3,28
  815c44:	18c00003 	ldbu	r3,0(r3)
  815c48:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  815c4c:	e0bffc17 	ldw	r2,-16(fp)
  815c50:	10800217 	ldw	r2,8(r2)
  815c54:	10800044 	addi	r2,r2,1
  815c58:	10c00fcc 	andi	r3,r2,63
  815c5c:	e0bffc17 	ldw	r2,-16(fp)
  815c60:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  815c64:	e0fff517 	ldw	r3,-44(fp)
  815c68:	e0bffe17 	ldw	r2,-8(fp)
  815c6c:	1880050e 	bge	r3,r2,815c84 <altera_avalon_uart_read+0xac>
  815c70:	e0bffc17 	ldw	r2,-16(fp)
  815c74:	10c00217 	ldw	r3,8(r2)
  815c78:	e0bffc17 	ldw	r2,-16(fp)
  815c7c:	10800317 	ldw	r2,12(r2)
  815c80:	18bfe51e 	bne	r3,r2,815c18 <__alt_mem_onchip_mem+0xff80dc18>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  815c84:	e0bff517 	ldw	r2,-44(fp)
  815c88:	1000251e 	bne	r2,zero,815d20 <altera_avalon_uart_read+0x148>
  815c8c:	e0bffc17 	ldw	r2,-16(fp)
  815c90:	10c00217 	ldw	r3,8(r2)
  815c94:	e0bffc17 	ldw	r2,-16(fp)
  815c98:	10800317 	ldw	r2,12(r2)
  815c9c:	1880201e 	bne	r3,r2,815d20 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  815ca0:	e0bff617 	ldw	r2,-40(fp)
  815ca4:	1000071e 	bne	r2,zero,815cc4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  815ca8:	0815b9c0 	call	815b9c <alt_get_errno>
  815cac:	1007883a 	mov	r3,r2
  815cb0:	008002c4 	movi	r2,11
  815cb4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  815cb8:	00800044 	movi	r2,1
  815cbc:	e0bff405 	stb	r2,-48(fp)
        break;
  815cc0:	00001b06 	br	815d30 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815cc4:	0005303a 	rdctl	r2,status
  815cc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815ccc:	e0fff917 	ldw	r3,-28(fp)
  815cd0:	00bfff84 	movi	r2,-2
  815cd4:	1884703a 	and	r2,r3,r2
  815cd8:	1001703a 	wrctl	status,r2
  
  return context;
  815cdc:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  815ce0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  815ce4:	e0bffc17 	ldw	r2,-16(fp)
  815ce8:	10800117 	ldw	r2,4(r2)
  815cec:	10c02014 	ori	r3,r2,128
  815cf0:	e0bffc17 	ldw	r2,-16(fp)
  815cf4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815cf8:	e0bffc17 	ldw	r2,-16(fp)
  815cfc:	10800017 	ldw	r2,0(r2)
  815d00:	10800304 	addi	r2,r2,12
  815d04:	e0fffc17 	ldw	r3,-16(fp)
  815d08:	18c00117 	ldw	r3,4(r3)
  815d0c:	10c00035 	stwio	r3,0(r2)
  815d10:	e0bff817 	ldw	r2,-32(fp)
  815d14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815d18:	e0bffa17 	ldw	r2,-24(fp)
  815d1c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  815d20:	e0bff517 	ldw	r2,-44(fp)
  815d24:	1000021e 	bne	r2,zero,815d30 <altera_avalon_uart_read+0x158>
  815d28:	e0bffe17 	ldw	r2,-8(fp)
  815d2c:	103fcd1e 	bne	r2,zero,815c64 <__alt_mem_onchip_mem+0xff80dc64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815d30:	0005303a 	rdctl	r2,status
  815d34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815d38:	e0fffb17 	ldw	r3,-20(fp)
  815d3c:	00bfff84 	movi	r2,-2
  815d40:	1884703a 	and	r2,r3,r2
  815d44:	1001703a 	wrctl	status,r2
  
  return context;
  815d48:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  815d4c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  815d50:	e0bffc17 	ldw	r2,-16(fp)
  815d54:	10800117 	ldw	r2,4(r2)
  815d58:	10c02014 	ori	r3,r2,128
  815d5c:	e0bffc17 	ldw	r2,-16(fp)
  815d60:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815d64:	e0bffc17 	ldw	r2,-16(fp)
  815d68:	10800017 	ldw	r2,0(r2)
  815d6c:	10800304 	addi	r2,r2,12
  815d70:	e0fffc17 	ldw	r3,-16(fp)
  815d74:	18c00117 	ldw	r3,4(r3)
  815d78:	10c00035 	stwio	r3,0(r2)
  815d7c:	e0bff817 	ldw	r2,-32(fp)
  815d80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815d84:	e0bff717 	ldw	r2,-36(fp)
  815d88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  815d8c:	e0bff403 	ldbu	r2,-48(fp)
  815d90:	10000226 	beq	r2,zero,815d9c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  815d94:	00bffd44 	movi	r2,-11
  815d98:	00000106 	br	815da0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  815d9c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  815da0:	e037883a 	mov	sp,fp
  815da4:	dfc00117 	ldw	ra,4(sp)
  815da8:	df000017 	ldw	fp,0(sp)
  815dac:	dec00204 	addi	sp,sp,8
  815db0:	f800283a 	ret

00815db4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815db4:	defffe04 	addi	sp,sp,-8
  815db8:	dfc00115 	stw	ra,4(sp)
  815dbc:	df000015 	stw	fp,0(sp)
  815dc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  815dc4:	d0a00b17 	ldw	r2,-32724(gp)
  815dc8:	10000326 	beq	r2,zero,815dd8 <alt_get_errno+0x24>
  815dcc:	d0a00b17 	ldw	r2,-32724(gp)
  815dd0:	103ee83a 	callr	r2
  815dd4:	00000106 	br	815ddc <alt_get_errno+0x28>
  815dd8:	d0a75104 	addi	r2,gp,-25276
}
  815ddc:	e037883a 	mov	sp,fp
  815de0:	dfc00117 	ldw	ra,4(sp)
  815de4:	df000017 	ldw	fp,0(sp)
  815de8:	dec00204 	addi	sp,sp,8
  815dec:	f800283a 	ret

00815df0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  815df0:	defff204 	addi	sp,sp,-56
  815df4:	dfc00d15 	stw	ra,52(sp)
  815df8:	df000c15 	stw	fp,48(sp)
  815dfc:	df000c04 	addi	fp,sp,48
  815e00:	e13ffc15 	stw	r4,-16(fp)
  815e04:	e17ffd15 	stw	r5,-12(fp)
  815e08:	e1bffe15 	stw	r6,-8(fp)
  815e0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  815e10:	e0bffe17 	ldw	r2,-8(fp)
  815e14:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  815e18:	e0bfff17 	ldw	r2,-4(fp)
  815e1c:	1090000c 	andi	r2,r2,16384
  815e20:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  815e24:	00003c06 	br	815f18 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815e28:	e0bffc17 	ldw	r2,-16(fp)
  815e2c:	10800517 	ldw	r2,20(r2)
  815e30:	10800044 	addi	r2,r2,1
  815e34:	10800fcc 	andi	r2,r2,63
  815e38:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  815e3c:	e0bffc17 	ldw	r2,-16(fp)
  815e40:	10c00417 	ldw	r3,16(r2)
  815e44:	e0bff717 	ldw	r2,-36(fp)
  815e48:	1880221e 	bne	r3,r2,815ed4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  815e4c:	e0bff517 	ldw	r2,-44(fp)
  815e50:	10000526 	beq	r2,zero,815e68 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  815e54:	0815db40 	call	815db4 <alt_get_errno>
  815e58:	1007883a 	mov	r3,r2
  815e5c:	008002c4 	movi	r2,11
  815e60:	18800015 	stw	r2,0(r3)
        break;
  815e64:	00002e06 	br	815f20 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815e68:	0005303a 	rdctl	r2,status
  815e6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815e70:	e0fff917 	ldw	r3,-28(fp)
  815e74:	00bfff84 	movi	r2,-2
  815e78:	1884703a 	and	r2,r3,r2
  815e7c:	1001703a 	wrctl	status,r2
  
  return context;
  815e80:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  815e84:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815e88:	e0bffc17 	ldw	r2,-16(fp)
  815e8c:	10800117 	ldw	r2,4(r2)
  815e90:	10c11014 	ori	r3,r2,1088
  815e94:	e0bffc17 	ldw	r2,-16(fp)
  815e98:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815e9c:	e0bffc17 	ldw	r2,-16(fp)
  815ea0:	10800017 	ldw	r2,0(r2)
  815ea4:	10800304 	addi	r2,r2,12
  815ea8:	e0fffc17 	ldw	r3,-16(fp)
  815eac:	18c00117 	ldw	r3,4(r3)
  815eb0:	10c00035 	stwio	r3,0(r2)
  815eb4:	e0bff817 	ldw	r2,-32(fp)
  815eb8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815ebc:	e0bff617 	ldw	r2,-40(fp)
  815ec0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  815ec4:	e0bffc17 	ldw	r2,-16(fp)
  815ec8:	10c00417 	ldw	r3,16(r2)
  815ecc:	e0bff717 	ldw	r2,-36(fp)
  815ed0:	18bffc26 	beq	r3,r2,815ec4 <__alt_mem_onchip_mem+0xff80dec4>
      }
    }

    count--;
  815ed4:	e0bff417 	ldw	r2,-48(fp)
  815ed8:	10bfffc4 	addi	r2,r2,-1
  815edc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  815ee0:	e0bffc17 	ldw	r2,-16(fp)
  815ee4:	10c00517 	ldw	r3,20(r2)
  815ee8:	e0bffd17 	ldw	r2,-12(fp)
  815eec:	11000044 	addi	r4,r2,1
  815ef0:	e13ffd15 	stw	r4,-12(fp)
  815ef4:	10800003 	ldbu	r2,0(r2)
  815ef8:	1009883a 	mov	r4,r2
  815efc:	e0bffc17 	ldw	r2,-16(fp)
  815f00:	10c5883a 	add	r2,r2,r3
  815f04:	10801704 	addi	r2,r2,92
  815f08:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  815f0c:	e0bffc17 	ldw	r2,-16(fp)
  815f10:	e0fff717 	ldw	r3,-36(fp)
  815f14:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  815f18:	e0bff417 	ldw	r2,-48(fp)
  815f1c:	103fc21e 	bne	r2,zero,815e28 <__alt_mem_onchip_mem+0xff80de28>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815f20:	0005303a 	rdctl	r2,status
  815f24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815f28:	e0fffb17 	ldw	r3,-20(fp)
  815f2c:	00bfff84 	movi	r2,-2
  815f30:	1884703a 	and	r2,r3,r2
  815f34:	1001703a 	wrctl	status,r2
  
  return context;
  815f38:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  815f3c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815f40:	e0bffc17 	ldw	r2,-16(fp)
  815f44:	10800117 	ldw	r2,4(r2)
  815f48:	10c11014 	ori	r3,r2,1088
  815f4c:	e0bffc17 	ldw	r2,-16(fp)
  815f50:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815f54:	e0bffc17 	ldw	r2,-16(fp)
  815f58:	10800017 	ldw	r2,0(r2)
  815f5c:	10800304 	addi	r2,r2,12
  815f60:	e0fffc17 	ldw	r3,-16(fp)
  815f64:	18c00117 	ldw	r3,4(r3)
  815f68:	10c00035 	stwio	r3,0(r2)
  815f6c:	e0bff817 	ldw	r2,-32(fp)
  815f70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815f74:	e0bffa17 	ldw	r2,-24(fp)
  815f78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  815f7c:	e0fffe17 	ldw	r3,-8(fp)
  815f80:	e0bff417 	ldw	r2,-48(fp)
  815f84:	1885c83a 	sub	r2,r3,r2
}
  815f88:	e037883a 	mov	sp,fp
  815f8c:	dfc00117 	ldw	ra,4(sp)
  815f90:	df000017 	ldw	fp,0(sp)
  815f94:	dec00204 	addi	sp,sp,8
  815f98:	f800283a 	ret

00815f9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  815f9c:	defffe04 	addi	sp,sp,-8
  815fa0:	df000115 	stw	fp,4(sp)
  815fa4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  815fa8:	e03fff15 	stw	zero,-4(fp)
  815fac:	00000506 	br	815fc4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  815fb0:	e0bfff17 	ldw	r2,-4(fp)
  815fb4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  815fb8:	e0bfff17 	ldw	r2,-4(fp)
  815fbc:	10800804 	addi	r2,r2,32
  815fc0:	e0bfff15 	stw	r2,-4(fp)
  815fc4:	e0bfff17 	ldw	r2,-4(fp)
  815fc8:	10820030 	cmpltui	r2,r2,2048
  815fcc:	103ff81e 	bne	r2,zero,815fb0 <__alt_mem_onchip_mem+0xff80dfb0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  815fd0:	0001883a 	nop
  815fd4:	e037883a 	mov	sp,fp
  815fd8:	df000017 	ldw	fp,0(sp)
  815fdc:	dec00104 	addi	sp,sp,4
  815fe0:	f800283a 	ret

00815fe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815fe4:	defffe04 	addi	sp,sp,-8
  815fe8:	dfc00115 	stw	ra,4(sp)
  815fec:	df000015 	stw	fp,0(sp)
  815ff0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  815ff4:	d0a00b17 	ldw	r2,-32724(gp)
  815ff8:	10000326 	beq	r2,zero,816008 <alt_get_errno+0x24>
  815ffc:	d0a00b17 	ldw	r2,-32724(gp)
  816000:	103ee83a 	callr	r2
  816004:	00000106 	br	81600c <alt_get_errno+0x28>
  816008:	d0a75104 	addi	r2,gp,-25276
}
  81600c:	e037883a 	mov	sp,fp
  816010:	dfc00117 	ldw	ra,4(sp)
  816014:	df000017 	ldw	fp,0(sp)
  816018:	dec00204 	addi	sp,sp,8
  81601c:	f800283a 	ret

00816020 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  816020:	defffa04 	addi	sp,sp,-24
  816024:	dfc00515 	stw	ra,20(sp)
  816028:	df000415 	stw	fp,16(sp)
  81602c:	df000404 	addi	fp,sp,16
  816030:	e13ffe15 	stw	r4,-8(fp)
  816034:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  816038:	e0bffe17 	ldw	r2,-8(fp)
  81603c:	10000326 	beq	r2,zero,81604c <alt_dev_llist_insert+0x2c>
  816040:	e0bffe17 	ldw	r2,-8(fp)
  816044:	10800217 	ldw	r2,8(r2)
  816048:	1000061e 	bne	r2,zero,816064 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  81604c:	0815fe40 	call	815fe4 <alt_get_errno>
  816050:	1007883a 	mov	r3,r2
  816054:	00800584 	movi	r2,22
  816058:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81605c:	00bffa84 	movi	r2,-22
  816060:	00001306 	br	8160b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  816064:	e0bffe17 	ldw	r2,-8(fp)
  816068:	e0ffff17 	ldw	r3,-4(fp)
  81606c:	e0fffc15 	stw	r3,-16(fp)
  816070:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  816074:	e0bffd17 	ldw	r2,-12(fp)
  816078:	e0fffc17 	ldw	r3,-16(fp)
  81607c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  816080:	e0bffc17 	ldw	r2,-16(fp)
  816084:	10c00017 	ldw	r3,0(r2)
  816088:	e0bffd17 	ldw	r2,-12(fp)
  81608c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  816090:	e0bffc17 	ldw	r2,-16(fp)
  816094:	10800017 	ldw	r2,0(r2)
  816098:	e0fffd17 	ldw	r3,-12(fp)
  81609c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8160a0:	e0bffc17 	ldw	r2,-16(fp)
  8160a4:	e0fffd17 	ldw	r3,-12(fp)
  8160a8:	10c00015 	stw	r3,0(r2)

  return 0;  
  8160ac:	0005883a 	mov	r2,zero
}
  8160b0:	e037883a 	mov	sp,fp
  8160b4:	dfc00117 	ldw	ra,4(sp)
  8160b8:	df000017 	ldw	fp,0(sp)
  8160bc:	dec00204 	addi	sp,sp,8
  8160c0:	f800283a 	ret

008160c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8160c4:	defffd04 	addi	sp,sp,-12
  8160c8:	dfc00215 	stw	ra,8(sp)
  8160cc:	df000115 	stw	fp,4(sp)
  8160d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8160d4:	00802074 	movhi	r2,129
  8160d8:	109b8f04 	addi	r2,r2,28220
  8160dc:	e0bfff15 	stw	r2,-4(fp)
  8160e0:	00000606 	br	8160fc <_do_ctors+0x38>
        (*ctor) (); 
  8160e4:	e0bfff17 	ldw	r2,-4(fp)
  8160e8:	10800017 	ldw	r2,0(r2)
  8160ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8160f0:	e0bfff17 	ldw	r2,-4(fp)
  8160f4:	10bfff04 	addi	r2,r2,-4
  8160f8:	e0bfff15 	stw	r2,-4(fp)
  8160fc:	e0ffff17 	ldw	r3,-4(fp)
  816100:	00802074 	movhi	r2,129
  816104:	109b9004 	addi	r2,r2,28224
  816108:	18bff62e 	bgeu	r3,r2,8160e4 <__alt_mem_onchip_mem+0xff80e0e4>
        (*ctor) (); 
}
  81610c:	0001883a 	nop
  816110:	e037883a 	mov	sp,fp
  816114:	dfc00117 	ldw	ra,4(sp)
  816118:	df000017 	ldw	fp,0(sp)
  81611c:	dec00204 	addi	sp,sp,8
  816120:	f800283a 	ret

00816124 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  816124:	defffd04 	addi	sp,sp,-12
  816128:	dfc00215 	stw	ra,8(sp)
  81612c:	df000115 	stw	fp,4(sp)
  816130:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  816134:	00802074 	movhi	r2,129
  816138:	109b8f04 	addi	r2,r2,28220
  81613c:	e0bfff15 	stw	r2,-4(fp)
  816140:	00000606 	br	81615c <_do_dtors+0x38>
        (*dtor) (); 
  816144:	e0bfff17 	ldw	r2,-4(fp)
  816148:	10800017 	ldw	r2,0(r2)
  81614c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  816150:	e0bfff17 	ldw	r2,-4(fp)
  816154:	10bfff04 	addi	r2,r2,-4
  816158:	e0bfff15 	stw	r2,-4(fp)
  81615c:	e0ffff17 	ldw	r3,-4(fp)
  816160:	00802074 	movhi	r2,129
  816164:	109b9004 	addi	r2,r2,28224
  816168:	18bff62e 	bgeu	r3,r2,816144 <__alt_mem_onchip_mem+0xff80e144>
        (*dtor) (); 
}
  81616c:	0001883a 	nop
  816170:	e037883a 	mov	sp,fp
  816174:	dfc00117 	ldw	ra,4(sp)
  816178:	df000017 	ldw	fp,0(sp)
  81617c:	dec00204 	addi	sp,sp,8
  816180:	f800283a 	ret

00816184 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  816184:	defffa04 	addi	sp,sp,-24
  816188:	dfc00515 	stw	ra,20(sp)
  81618c:	df000415 	stw	fp,16(sp)
  816190:	df000404 	addi	fp,sp,16
  816194:	e13ffe15 	stw	r4,-8(fp)
  816198:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81619c:	e0bfff17 	ldw	r2,-4(fp)
  8161a0:	10800017 	ldw	r2,0(r2)
  8161a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8161a8:	e13ffe17 	ldw	r4,-8(fp)
  8161ac:	08083e80 	call	8083e8 <strlen>
  8161b0:	10800044 	addi	r2,r2,1
  8161b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8161b8:	00000d06 	br	8161f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8161bc:	e0bffc17 	ldw	r2,-16(fp)
  8161c0:	10800217 	ldw	r2,8(r2)
  8161c4:	e0fffd17 	ldw	r3,-12(fp)
  8161c8:	180d883a 	mov	r6,r3
  8161cc:	e17ffe17 	ldw	r5,-8(fp)
  8161d0:	1009883a 	mov	r4,r2
  8161d4:	0816af80 	call	816af8 <memcmp>
  8161d8:	1000021e 	bne	r2,zero,8161e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8161dc:	e0bffc17 	ldw	r2,-16(fp)
  8161e0:	00000706 	br	816200 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8161e4:	e0bffc17 	ldw	r2,-16(fp)
  8161e8:	10800017 	ldw	r2,0(r2)
  8161ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8161f0:	e0fffc17 	ldw	r3,-16(fp)
  8161f4:	e0bfff17 	ldw	r2,-4(fp)
  8161f8:	18bff01e 	bne	r3,r2,8161bc <__alt_mem_onchip_mem+0xff80e1bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8161fc:	0005883a 	mov	r2,zero
}
  816200:	e037883a 	mov	sp,fp
  816204:	dfc00117 	ldw	ra,4(sp)
  816208:	df000017 	ldw	fp,0(sp)
  81620c:	dec00204 	addi	sp,sp,8
  816210:	f800283a 	ret

00816214 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  816214:	defffb04 	addi	sp,sp,-20
  816218:	dfc00415 	stw	ra,16(sp)
  81621c:	df000315 	stw	fp,12(sp)
  816220:	df000304 	addi	fp,sp,12
  816224:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  816228:	d0a00617 	ldw	r2,-32744(gp)
  81622c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  816230:	00003106 	br	8162f8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  816234:	e0bffd17 	ldw	r2,-12(fp)
  816238:	10800217 	ldw	r2,8(r2)
  81623c:	1009883a 	mov	r4,r2
  816240:	08083e80 	call	8083e8 <strlen>
  816244:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  816248:	e0bffd17 	ldw	r2,-12(fp)
  81624c:	10c00217 	ldw	r3,8(r2)
  816250:	e0bffe17 	ldw	r2,-8(fp)
  816254:	10bfffc4 	addi	r2,r2,-1
  816258:	1885883a 	add	r2,r3,r2
  81625c:	10800003 	ldbu	r2,0(r2)
  816260:	10803fcc 	andi	r2,r2,255
  816264:	1080201c 	xori	r2,r2,128
  816268:	10bfe004 	addi	r2,r2,-128
  81626c:	10800bd8 	cmpnei	r2,r2,47
  816270:	1000031e 	bne	r2,zero,816280 <alt_find_file+0x6c>
    {
      len -= 1;
  816274:	e0bffe17 	ldw	r2,-8(fp)
  816278:	10bfffc4 	addi	r2,r2,-1
  81627c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  816280:	e0bffe17 	ldw	r2,-8(fp)
  816284:	e0ffff17 	ldw	r3,-4(fp)
  816288:	1885883a 	add	r2,r3,r2
  81628c:	10800003 	ldbu	r2,0(r2)
  816290:	10803fcc 	andi	r2,r2,255
  816294:	1080201c 	xori	r2,r2,128
  816298:	10bfe004 	addi	r2,r2,-128
  81629c:	10800be0 	cmpeqi	r2,r2,47
  8162a0:	1000081e 	bne	r2,zero,8162c4 <alt_find_file+0xb0>
  8162a4:	e0bffe17 	ldw	r2,-8(fp)
  8162a8:	e0ffff17 	ldw	r3,-4(fp)
  8162ac:	1885883a 	add	r2,r3,r2
  8162b0:	10800003 	ldbu	r2,0(r2)
  8162b4:	10803fcc 	andi	r2,r2,255
  8162b8:	1080201c 	xori	r2,r2,128
  8162bc:	10bfe004 	addi	r2,r2,-128
  8162c0:	10000a1e 	bne	r2,zero,8162ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8162c4:	e0bffd17 	ldw	r2,-12(fp)
  8162c8:	10800217 	ldw	r2,8(r2)
  8162cc:	e0fffe17 	ldw	r3,-8(fp)
  8162d0:	180d883a 	mov	r6,r3
  8162d4:	e17fff17 	ldw	r5,-4(fp)
  8162d8:	1009883a 	mov	r4,r2
  8162dc:	0816af80 	call	816af8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8162e0:	1000021e 	bne	r2,zero,8162ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8162e4:	e0bffd17 	ldw	r2,-12(fp)
  8162e8:	00000706 	br	816308 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8162ec:	e0bffd17 	ldw	r2,-12(fp)
  8162f0:	10800017 	ldw	r2,0(r2)
  8162f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8162f8:	e0fffd17 	ldw	r3,-12(fp)
  8162fc:	d0a00604 	addi	r2,gp,-32744
  816300:	18bfcc1e 	bne	r3,r2,816234 <__alt_mem_onchip_mem+0xff80e234>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  816304:	0005883a 	mov	r2,zero
}
  816308:	e037883a 	mov	sp,fp
  81630c:	dfc00117 	ldw	ra,4(sp)
  816310:	df000017 	ldw	fp,0(sp)
  816314:	dec00204 	addi	sp,sp,8
  816318:	f800283a 	ret

0081631c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81631c:	defffc04 	addi	sp,sp,-16
  816320:	df000315 	stw	fp,12(sp)
  816324:	df000304 	addi	fp,sp,12
  816328:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81632c:	00bffa04 	movi	r2,-24
  816330:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  816334:	e03ffd15 	stw	zero,-12(fp)
  816338:	00001906 	br	8163a0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  81633c:	00802074 	movhi	r2,129
  816340:	109f9304 	addi	r2,r2,32332
  816344:	e0fffd17 	ldw	r3,-12(fp)
  816348:	18c00324 	muli	r3,r3,12
  81634c:	10c5883a 	add	r2,r2,r3
  816350:	10800017 	ldw	r2,0(r2)
  816354:	10000f1e 	bne	r2,zero,816394 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  816358:	00802074 	movhi	r2,129
  81635c:	109f9304 	addi	r2,r2,32332
  816360:	e0fffd17 	ldw	r3,-12(fp)
  816364:	18c00324 	muli	r3,r3,12
  816368:	10c5883a 	add	r2,r2,r3
  81636c:	e0ffff17 	ldw	r3,-4(fp)
  816370:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  816374:	d0e00a17 	ldw	r3,-32728(gp)
  816378:	e0bffd17 	ldw	r2,-12(fp)
  81637c:	1880020e 	bge	r3,r2,816388 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  816380:	e0bffd17 	ldw	r2,-12(fp)
  816384:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  816388:	e0bffd17 	ldw	r2,-12(fp)
  81638c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  816390:	00000606 	br	8163ac <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  816394:	e0bffd17 	ldw	r2,-12(fp)
  816398:	10800044 	addi	r2,r2,1
  81639c:	e0bffd15 	stw	r2,-12(fp)
  8163a0:	e0bffd17 	ldw	r2,-12(fp)
  8163a4:	10800810 	cmplti	r2,r2,32
  8163a8:	103fe41e 	bne	r2,zero,81633c <__alt_mem_onchip_mem+0xff80e33c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8163ac:	e0bffe17 	ldw	r2,-8(fp)
}
  8163b0:	e037883a 	mov	sp,fp
  8163b4:	df000017 	ldw	fp,0(sp)
  8163b8:	dec00104 	addi	sp,sp,4
  8163bc:	f800283a 	ret

008163c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8163c0:	defffe04 	addi	sp,sp,-8
  8163c4:	dfc00115 	stw	ra,4(sp)
  8163c8:	df000015 	stw	fp,0(sp)
  8163cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8163d0:	01440004 	movi	r5,4096
  8163d4:	0009883a 	mov	r4,zero
  8163d8:	08169800 	call	816980 <alt_icache_flush>
#endif
}
  8163dc:	0001883a 	nop
  8163e0:	e037883a 	mov	sp,fp
  8163e4:	dfc00117 	ldw	ra,4(sp)
  8163e8:	df000017 	ldw	fp,0(sp)
  8163ec:	dec00204 	addi	sp,sp,8
  8163f0:	f800283a 	ret

008163f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8163f4:	defff904 	addi	sp,sp,-28
  8163f8:	dfc00615 	stw	ra,24(sp)
  8163fc:	df000515 	stw	fp,20(sp)
  816400:	df000504 	addi	fp,sp,20
  816404:	e13ffc15 	stw	r4,-16(fp)
  816408:	e17ffd15 	stw	r5,-12(fp)
  81640c:	e1bffe15 	stw	r6,-8(fp)
  816410:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  816414:	e0800217 	ldw	r2,8(fp)
  816418:	d8800015 	stw	r2,0(sp)
  81641c:	e1ffff17 	ldw	r7,-4(fp)
  816420:	e1bffe17 	ldw	r6,-8(fp)
  816424:	e17ffd17 	ldw	r5,-12(fp)
  816428:	e13ffc17 	ldw	r4,-16(fp)
  81642c:	08165a40 	call	8165a4 <alt_iic_isr_register>
}  
  816430:	e037883a 	mov	sp,fp
  816434:	dfc00117 	ldw	ra,4(sp)
  816438:	df000017 	ldw	fp,0(sp)
  81643c:	dec00204 	addi	sp,sp,8
  816440:	f800283a 	ret

00816444 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  816444:	defff904 	addi	sp,sp,-28
  816448:	df000615 	stw	fp,24(sp)
  81644c:	df000604 	addi	fp,sp,24
  816450:	e13ffe15 	stw	r4,-8(fp)
  816454:	e17fff15 	stw	r5,-4(fp)
  816458:	e0bfff17 	ldw	r2,-4(fp)
  81645c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816460:	0005303a 	rdctl	r2,status
  816464:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816468:	e0fffb17 	ldw	r3,-20(fp)
  81646c:	00bfff84 	movi	r2,-2
  816470:	1884703a 	and	r2,r3,r2
  816474:	1001703a 	wrctl	status,r2
  
  return context;
  816478:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81647c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  816480:	00c00044 	movi	r3,1
  816484:	e0bffa17 	ldw	r2,-24(fp)
  816488:	1884983a 	sll	r2,r3,r2
  81648c:	1007883a 	mov	r3,r2
  816490:	d0a75817 	ldw	r2,-25248(gp)
  816494:	1884b03a 	or	r2,r3,r2
  816498:	d0a75815 	stw	r2,-25248(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81649c:	d0a75817 	ldw	r2,-25248(gp)
  8164a0:	100170fa 	wrctl	ienable,r2
  8164a4:	e0bffc17 	ldw	r2,-16(fp)
  8164a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8164ac:	e0bffd17 	ldw	r2,-12(fp)
  8164b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8164b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8164b8:	0001883a 	nop
}
  8164bc:	e037883a 	mov	sp,fp
  8164c0:	df000017 	ldw	fp,0(sp)
  8164c4:	dec00104 	addi	sp,sp,4
  8164c8:	f800283a 	ret

008164cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8164cc:	defff904 	addi	sp,sp,-28
  8164d0:	df000615 	stw	fp,24(sp)
  8164d4:	df000604 	addi	fp,sp,24
  8164d8:	e13ffe15 	stw	r4,-8(fp)
  8164dc:	e17fff15 	stw	r5,-4(fp)
  8164e0:	e0bfff17 	ldw	r2,-4(fp)
  8164e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8164e8:	0005303a 	rdctl	r2,status
  8164ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8164f0:	e0fffb17 	ldw	r3,-20(fp)
  8164f4:	00bfff84 	movi	r2,-2
  8164f8:	1884703a 	and	r2,r3,r2
  8164fc:	1001703a 	wrctl	status,r2
  
  return context;
  816500:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  816504:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  816508:	00c00044 	movi	r3,1
  81650c:	e0bffa17 	ldw	r2,-24(fp)
  816510:	1884983a 	sll	r2,r3,r2
  816514:	0084303a 	nor	r2,zero,r2
  816518:	1007883a 	mov	r3,r2
  81651c:	d0a75817 	ldw	r2,-25248(gp)
  816520:	1884703a 	and	r2,r3,r2
  816524:	d0a75815 	stw	r2,-25248(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  816528:	d0a75817 	ldw	r2,-25248(gp)
  81652c:	100170fa 	wrctl	ienable,r2
  816530:	e0bffc17 	ldw	r2,-16(fp)
  816534:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816538:	e0bffd17 	ldw	r2,-12(fp)
  81653c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  816540:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  816544:	0001883a 	nop
}
  816548:	e037883a 	mov	sp,fp
  81654c:	df000017 	ldw	fp,0(sp)
  816550:	dec00104 	addi	sp,sp,4
  816554:	f800283a 	ret

00816558 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  816558:	defffc04 	addi	sp,sp,-16
  81655c:	df000315 	stw	fp,12(sp)
  816560:	df000304 	addi	fp,sp,12
  816564:	e13ffe15 	stw	r4,-8(fp)
  816568:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  81656c:	000530fa 	rdctl	r2,ienable
  816570:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  816574:	00c00044 	movi	r3,1
  816578:	e0bfff17 	ldw	r2,-4(fp)
  81657c:	1884983a 	sll	r2,r3,r2
  816580:	1007883a 	mov	r3,r2
  816584:	e0bffd17 	ldw	r2,-12(fp)
  816588:	1884703a 	and	r2,r3,r2
  81658c:	1004c03a 	cmpne	r2,r2,zero
  816590:	10803fcc 	andi	r2,r2,255
}
  816594:	e037883a 	mov	sp,fp
  816598:	df000017 	ldw	fp,0(sp)
  81659c:	dec00104 	addi	sp,sp,4
  8165a0:	f800283a 	ret

008165a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8165a4:	defff504 	addi	sp,sp,-44
  8165a8:	dfc00a15 	stw	ra,40(sp)
  8165ac:	df000915 	stw	fp,36(sp)
  8165b0:	df000904 	addi	fp,sp,36
  8165b4:	e13ffc15 	stw	r4,-16(fp)
  8165b8:	e17ffd15 	stw	r5,-12(fp)
  8165bc:	e1bffe15 	stw	r6,-8(fp)
  8165c0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8165c4:	00bffa84 	movi	r2,-22
  8165c8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8165cc:	e0bffd17 	ldw	r2,-12(fp)
  8165d0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8165d4:	e0bff817 	ldw	r2,-32(fp)
  8165d8:	10800808 	cmpgei	r2,r2,32
  8165dc:	1000271e 	bne	r2,zero,81667c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8165e0:	0005303a 	rdctl	r2,status
  8165e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8165e8:	e0fffb17 	ldw	r3,-20(fp)
  8165ec:	00bfff84 	movi	r2,-2
  8165f0:	1884703a 	and	r2,r3,r2
  8165f4:	1001703a 	wrctl	status,r2
  
  return context;
  8165f8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8165fc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  816600:	008020b4 	movhi	r2,130
  816604:	10abed04 	addi	r2,r2,-20556
  816608:	e0fff817 	ldw	r3,-32(fp)
  81660c:	180690fa 	slli	r3,r3,3
  816610:	10c5883a 	add	r2,r2,r3
  816614:	e0fffe17 	ldw	r3,-8(fp)
  816618:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  81661c:	008020b4 	movhi	r2,130
  816620:	10abed04 	addi	r2,r2,-20556
  816624:	e0fff817 	ldw	r3,-32(fp)
  816628:	180690fa 	slli	r3,r3,3
  81662c:	10c5883a 	add	r2,r2,r3
  816630:	10800104 	addi	r2,r2,4
  816634:	e0ffff17 	ldw	r3,-4(fp)
  816638:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  81663c:	e0bffe17 	ldw	r2,-8(fp)
  816640:	10000526 	beq	r2,zero,816658 <alt_iic_isr_register+0xb4>
  816644:	e0bff817 	ldw	r2,-32(fp)
  816648:	100b883a 	mov	r5,r2
  81664c:	e13ffc17 	ldw	r4,-16(fp)
  816650:	08164440 	call	816444 <alt_ic_irq_enable>
  816654:	00000406 	br	816668 <alt_iic_isr_register+0xc4>
  816658:	e0bff817 	ldw	r2,-32(fp)
  81665c:	100b883a 	mov	r5,r2
  816660:	e13ffc17 	ldw	r4,-16(fp)
  816664:	08164cc0 	call	8164cc <alt_ic_irq_disable>
  816668:	e0bff715 	stw	r2,-36(fp)
  81666c:	e0bffa17 	ldw	r2,-24(fp)
  816670:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816674:	e0bff917 	ldw	r2,-28(fp)
  816678:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  81667c:	e0bff717 	ldw	r2,-36(fp)
}
  816680:	e037883a 	mov	sp,fp
  816684:	dfc00117 	ldw	ra,4(sp)
  816688:	df000017 	ldw	fp,0(sp)
  81668c:	dec00204 	addi	sp,sp,8
  816690:	f800283a 	ret

00816694 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  816694:	defff904 	addi	sp,sp,-28
  816698:	dfc00615 	stw	ra,24(sp)
  81669c:	df000515 	stw	fp,20(sp)
  8166a0:	df000504 	addi	fp,sp,20
  8166a4:	e13ffc15 	stw	r4,-16(fp)
  8166a8:	e17ffd15 	stw	r5,-12(fp)
  8166ac:	e1bffe15 	stw	r6,-8(fp)
  8166b0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8166b4:	e1bfff17 	ldw	r6,-4(fp)
  8166b8:	e17ffe17 	ldw	r5,-8(fp)
  8166bc:	e13ffd17 	ldw	r4,-12(fp)
  8166c0:	08135100 	call	813510 <open>
  8166c4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8166c8:	e0bffb17 	ldw	r2,-20(fp)
  8166cc:	10001c16 	blt	r2,zero,816740 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  8166d0:	00802074 	movhi	r2,129
  8166d4:	109f9304 	addi	r2,r2,32332
  8166d8:	e0fffb17 	ldw	r3,-20(fp)
  8166dc:	18c00324 	muli	r3,r3,12
  8166e0:	10c5883a 	add	r2,r2,r3
  8166e4:	10c00017 	ldw	r3,0(r2)
  8166e8:	e0bffc17 	ldw	r2,-16(fp)
  8166ec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8166f0:	00802074 	movhi	r2,129
  8166f4:	109f9304 	addi	r2,r2,32332
  8166f8:	e0fffb17 	ldw	r3,-20(fp)
  8166fc:	18c00324 	muli	r3,r3,12
  816700:	10c5883a 	add	r2,r2,r3
  816704:	10800104 	addi	r2,r2,4
  816708:	10c00017 	ldw	r3,0(r2)
  81670c:	e0bffc17 	ldw	r2,-16(fp)
  816710:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  816714:	00802074 	movhi	r2,129
  816718:	109f9304 	addi	r2,r2,32332
  81671c:	e0fffb17 	ldw	r3,-20(fp)
  816720:	18c00324 	muli	r3,r3,12
  816724:	10c5883a 	add	r2,r2,r3
  816728:	10800204 	addi	r2,r2,8
  81672c:	10c00017 	ldw	r3,0(r2)
  816730:	e0bffc17 	ldw	r2,-16(fp)
  816734:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  816738:	e13ffb17 	ldw	r4,-20(fp)
  81673c:	081379c0 	call	81379c <alt_release_fd>
  }
} 
  816740:	0001883a 	nop
  816744:	e037883a 	mov	sp,fp
  816748:	dfc00117 	ldw	ra,4(sp)
  81674c:	df000017 	ldw	fp,0(sp)
  816750:	dec00204 	addi	sp,sp,8
  816754:	f800283a 	ret

00816758 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  816758:	defffb04 	addi	sp,sp,-20
  81675c:	dfc00415 	stw	ra,16(sp)
  816760:	df000315 	stw	fp,12(sp)
  816764:	df000304 	addi	fp,sp,12
  816768:	e13ffd15 	stw	r4,-12(fp)
  81676c:	e17ffe15 	stw	r5,-8(fp)
  816770:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  816774:	01c07fc4 	movi	r7,511
  816778:	01800044 	movi	r6,1
  81677c:	e17ffd17 	ldw	r5,-12(fp)
  816780:	01002074 	movhi	r4,129
  816784:	211f9604 	addi	r4,r4,32344
  816788:	08166940 	call	816694 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81678c:	01c07fc4 	movi	r7,511
  816790:	000d883a 	mov	r6,zero
  816794:	e17ffe17 	ldw	r5,-8(fp)
  816798:	01002074 	movhi	r4,129
  81679c:	211f9304 	addi	r4,r4,32332
  8167a0:	08166940 	call	816694 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8167a4:	01c07fc4 	movi	r7,511
  8167a8:	01800044 	movi	r6,1
  8167ac:	e17fff17 	ldw	r5,-4(fp)
  8167b0:	01002074 	movhi	r4,129
  8167b4:	211f9904 	addi	r4,r4,32356
  8167b8:	08166940 	call	816694 <alt_open_fd>
}  
  8167bc:	0001883a 	nop
  8167c0:	e037883a 	mov	sp,fp
  8167c4:	dfc00117 	ldw	ra,4(sp)
  8167c8:	df000017 	ldw	fp,0(sp)
  8167cc:	dec00204 	addi	sp,sp,8
  8167d0:	f800283a 	ret

008167d4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8167d4:	defffd04 	addi	sp,sp,-12
  8167d8:	dfc00215 	stw	ra,8(sp)
  8167dc:	df000115 	stw	fp,4(sp)
  8167e0:	df000104 	addi	fp,sp,4
  8167e4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8167e8:	e13fff17 	ldw	r4,-4(fp)
  8167ec:	08168280 	call	816828 <alt_busy_sleep>
}
  8167f0:	e037883a 	mov	sp,fp
  8167f4:	dfc00117 	ldw	ra,4(sp)
  8167f8:	df000017 	ldw	fp,0(sp)
  8167fc:	dec00204 	addi	sp,sp,8
  816800:	f800283a 	ret

00816804 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  816804:	deffff04 	addi	sp,sp,-4
  816808:	df000015 	stw	fp,0(sp)
  81680c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  816810:	000170fa 	wrctl	ienable,zero
}
  816814:	0001883a 	nop
  816818:	e037883a 	mov	sp,fp
  81681c:	df000017 	ldw	fp,0(sp)
  816820:	dec00104 	addi	sp,sp,4
  816824:	f800283a 	ret

00816828 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  816828:	defffa04 	addi	sp,sp,-24
  81682c:	dfc00515 	stw	ra,20(sp)
  816830:	df000415 	stw	fp,16(sp)
  816834:	df000404 	addi	fp,sp,16
  816838:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81683c:	008000c4 	movi	r2,3
  816840:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  816844:	e0fffd17 	ldw	r3,-12(fp)
  816848:	008003f4 	movhi	r2,15
  81684c:	10909004 	addi	r2,r2,16960
  816850:	1885383a 	mul	r2,r3,r2
  816854:	100b883a 	mov	r5,r2
  816858:	0100bef4 	movhi	r4,763
  81685c:	213c2004 	addi	r4,r4,-3968
  816860:	08119dc0 	call	8119dc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  816864:	100b883a 	mov	r5,r2
  816868:	01200034 	movhi	r4,32768
  81686c:	213fffc4 	addi	r4,r4,-1
  816870:	08119dc0 	call	8119dc <__udivsi3>
  816874:	100b883a 	mov	r5,r2
  816878:	e13fff17 	ldw	r4,-4(fp)
  81687c:	08119dc0 	call	8119dc <__udivsi3>
  816880:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  816884:	e0bffe17 	ldw	r2,-8(fp)
  816888:	10002a26 	beq	r2,zero,816934 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  81688c:	e03ffc15 	stw	zero,-16(fp)
  816890:	00001706 	br	8168f0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  816894:	00a00034 	movhi	r2,32768
  816898:	10bfffc4 	addi	r2,r2,-1
  81689c:	10bfffc4 	addi	r2,r2,-1
  8168a0:	103ffe1e 	bne	r2,zero,81689c <__alt_mem_onchip_mem+0xff80e89c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8168a4:	e0fffd17 	ldw	r3,-12(fp)
  8168a8:	008003f4 	movhi	r2,15
  8168ac:	10909004 	addi	r2,r2,16960
  8168b0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8168b4:	100b883a 	mov	r5,r2
  8168b8:	0100bef4 	movhi	r4,763
  8168bc:	213c2004 	addi	r4,r4,-3968
  8168c0:	08119dc0 	call	8119dc <__udivsi3>
  8168c4:	100b883a 	mov	r5,r2
  8168c8:	01200034 	movhi	r4,32768
  8168cc:	213fffc4 	addi	r4,r4,-1
  8168d0:	08119dc0 	call	8119dc <__udivsi3>
  8168d4:	1007883a 	mov	r3,r2
  8168d8:	e0bfff17 	ldw	r2,-4(fp)
  8168dc:	10c5c83a 	sub	r2,r2,r3
  8168e0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8168e4:	e0bffc17 	ldw	r2,-16(fp)
  8168e8:	10800044 	addi	r2,r2,1
  8168ec:	e0bffc15 	stw	r2,-16(fp)
  8168f0:	e0fffc17 	ldw	r3,-16(fp)
  8168f4:	e0bffe17 	ldw	r2,-8(fp)
  8168f8:	18bfe616 	blt	r3,r2,816894 <__alt_mem_onchip_mem+0xff80e894>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8168fc:	e0fffd17 	ldw	r3,-12(fp)
  816900:	008003f4 	movhi	r2,15
  816904:	10909004 	addi	r2,r2,16960
  816908:	1885383a 	mul	r2,r3,r2
  81690c:	100b883a 	mov	r5,r2
  816910:	0100bef4 	movhi	r4,763
  816914:	213c2004 	addi	r4,r4,-3968
  816918:	08119dc0 	call	8119dc <__udivsi3>
  81691c:	1007883a 	mov	r3,r2
  816920:	e0bfff17 	ldw	r2,-4(fp)
  816924:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  816928:	10bfffc4 	addi	r2,r2,-1
  81692c:	103ffe1e 	bne	r2,zero,816928 <__alt_mem_onchip_mem+0xff80e928>
  816930:	00000d06 	br	816968 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  816934:	e0fffd17 	ldw	r3,-12(fp)
  816938:	008003f4 	movhi	r2,15
  81693c:	10909004 	addi	r2,r2,16960
  816940:	1885383a 	mul	r2,r3,r2
  816944:	100b883a 	mov	r5,r2
  816948:	0100bef4 	movhi	r4,763
  81694c:	213c2004 	addi	r4,r4,-3968
  816950:	08119dc0 	call	8119dc <__udivsi3>
  816954:	1007883a 	mov	r3,r2
  816958:	e0bfff17 	ldw	r2,-4(fp)
  81695c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  816960:	10bfffc4 	addi	r2,r2,-1
  816964:	00bffe16 	blt	zero,r2,816960 <__alt_mem_onchip_mem+0xff80e960>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  816968:	0005883a 	mov	r2,zero
}
  81696c:	e037883a 	mov	sp,fp
  816970:	dfc00117 	ldw	ra,4(sp)
  816974:	df000017 	ldw	fp,0(sp)
  816978:	dec00204 	addi	sp,sp,8
  81697c:	f800283a 	ret

00816980 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  816980:	defffb04 	addi	sp,sp,-20
  816984:	df000415 	stw	fp,16(sp)
  816988:	df000404 	addi	fp,sp,16
  81698c:	e13ffe15 	stw	r4,-8(fp)
  816990:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  816994:	e0bfff17 	ldw	r2,-4(fp)
  816998:	10840070 	cmpltui	r2,r2,4097
  81699c:	1000021e 	bne	r2,zero,8169a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8169a0:	00840004 	movi	r2,4096
  8169a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8169a8:	e0fffe17 	ldw	r3,-8(fp)
  8169ac:	e0bfff17 	ldw	r2,-4(fp)
  8169b0:	1885883a 	add	r2,r3,r2
  8169b4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8169b8:	e0bffe17 	ldw	r2,-8(fp)
  8169bc:	e0bffc15 	stw	r2,-16(fp)
  8169c0:	00000506 	br	8169d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8169c4:	e0bffc17 	ldw	r2,-16(fp)
  8169c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8169cc:	e0bffc17 	ldw	r2,-16(fp)
  8169d0:	10800804 	addi	r2,r2,32
  8169d4:	e0bffc15 	stw	r2,-16(fp)
  8169d8:	e0fffc17 	ldw	r3,-16(fp)
  8169dc:	e0bffd17 	ldw	r2,-12(fp)
  8169e0:	18bff836 	bltu	r3,r2,8169c4 <__alt_mem_onchip_mem+0xff80e9c4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8169e4:	e0bffe17 	ldw	r2,-8(fp)
  8169e8:	108007cc 	andi	r2,r2,31
  8169ec:	10000226 	beq	r2,zero,8169f8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8169f0:	e0bffc17 	ldw	r2,-16(fp)
  8169f4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8169f8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8169fc:	0001883a 	nop
  816a00:	e037883a 	mov	sp,fp
  816a04:	df000017 	ldw	fp,0(sp)
  816a08:	dec00104 	addi	sp,sp,4
  816a0c:	f800283a 	ret

00816a10 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  816a10:	defffe04 	addi	sp,sp,-8
  816a14:	df000115 	stw	fp,4(sp)
  816a18:	df000104 	addi	fp,sp,4
  816a1c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  816a20:	e0bfff17 	ldw	r2,-4(fp)
  816a24:	10bffe84 	addi	r2,r2,-6
  816a28:	10c00428 	cmpgeui	r3,r2,16
  816a2c:	18001a1e 	bne	r3,zero,816a98 <alt_exception_cause_generated_bad_addr+0x88>
  816a30:	100690ba 	slli	r3,r2,2
  816a34:	00802074 	movhi	r2,129
  816a38:	109a9204 	addi	r2,r2,27208
  816a3c:	1885883a 	add	r2,r3,r2
  816a40:	10800017 	ldw	r2,0(r2)
  816a44:	1000683a 	jmp	r2
  816a48:	00816a88 	cmpgei	r2,zero,1450
  816a4c:	00816a88 	cmpgei	r2,zero,1450
  816a50:	00816a98 	cmpnei	r2,zero,1450
  816a54:	00816a98 	cmpnei	r2,zero,1450
  816a58:	00816a98 	cmpnei	r2,zero,1450
  816a5c:	00816a88 	cmpgei	r2,zero,1450
  816a60:	00816a90 	cmplti	r2,zero,1450
  816a64:	00816a98 	cmpnei	r2,zero,1450
  816a68:	00816a88 	cmpgei	r2,zero,1450
  816a6c:	00816a88 	cmpgei	r2,zero,1450
  816a70:	00816a98 	cmpnei	r2,zero,1450
  816a74:	00816a88 	cmpgei	r2,zero,1450
  816a78:	00816a90 	cmplti	r2,zero,1450
  816a7c:	00816a98 	cmpnei	r2,zero,1450
  816a80:	00816a98 	cmpnei	r2,zero,1450
  816a84:	00816a88 	cmpgei	r2,zero,1450
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  816a88:	00800044 	movi	r2,1
  816a8c:	00000306 	br	816a9c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  816a90:	0005883a 	mov	r2,zero
  816a94:	00000106 	br	816a9c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  816a98:	0005883a 	mov	r2,zero
  }
}
  816a9c:	e037883a 	mov	sp,fp
  816aa0:	df000017 	ldw	fp,0(sp)
  816aa4:	dec00104 	addi	sp,sp,4
  816aa8:	f800283a 	ret

00816aac <atexit>:
  816aac:	200b883a 	mov	r5,r4
  816ab0:	000f883a 	mov	r7,zero
  816ab4:	000d883a 	mov	r6,zero
  816ab8:	0009883a 	mov	r4,zero
  816abc:	0816b741 	jmpi	816b74 <__register_exitproc>

00816ac0 <exit>:
  816ac0:	defffe04 	addi	sp,sp,-8
  816ac4:	000b883a 	mov	r5,zero
  816ac8:	dc000015 	stw	r16,0(sp)
  816acc:	dfc00115 	stw	ra,4(sp)
  816ad0:	2021883a 	mov	r16,r4
  816ad4:	0816c8c0 	call	816c8c <__call_exitprocs>
  816ad8:	008020b4 	movhi	r2,130
  816adc:	10a48404 	addi	r2,r2,-28144
  816ae0:	11000017 	ldw	r4,0(r2)
  816ae4:	20800f17 	ldw	r2,60(r4)
  816ae8:	10000126 	beq	r2,zero,816af0 <exit+0x30>
  816aec:	103ee83a 	callr	r2
  816af0:	8009883a 	mov	r4,r16
  816af4:	0816e0c0 	call	816e0c <_exit>

00816af8 <memcmp>:
  816af8:	01c000c4 	movi	r7,3
  816afc:	3980192e 	bgeu	r7,r6,816b64 <memcmp+0x6c>
  816b00:	2144b03a 	or	r2,r4,r5
  816b04:	11c4703a 	and	r2,r2,r7
  816b08:	10000f26 	beq	r2,zero,816b48 <memcmp+0x50>
  816b0c:	20800003 	ldbu	r2,0(r4)
  816b10:	28c00003 	ldbu	r3,0(r5)
  816b14:	10c0151e 	bne	r2,r3,816b6c <memcmp+0x74>
  816b18:	31bfff84 	addi	r6,r6,-2
  816b1c:	01ffffc4 	movi	r7,-1
  816b20:	00000406 	br	816b34 <memcmp+0x3c>
  816b24:	20800003 	ldbu	r2,0(r4)
  816b28:	28c00003 	ldbu	r3,0(r5)
  816b2c:	31bfffc4 	addi	r6,r6,-1
  816b30:	10c00e1e 	bne	r2,r3,816b6c <memcmp+0x74>
  816b34:	21000044 	addi	r4,r4,1
  816b38:	29400044 	addi	r5,r5,1
  816b3c:	31fff91e 	bne	r6,r7,816b24 <__alt_mem_onchip_mem+0xff80eb24>
  816b40:	0005883a 	mov	r2,zero
  816b44:	f800283a 	ret
  816b48:	20c00017 	ldw	r3,0(r4)
  816b4c:	28800017 	ldw	r2,0(r5)
  816b50:	18bfee1e 	bne	r3,r2,816b0c <__alt_mem_onchip_mem+0xff80eb0c>
  816b54:	31bfff04 	addi	r6,r6,-4
  816b58:	21000104 	addi	r4,r4,4
  816b5c:	29400104 	addi	r5,r5,4
  816b60:	39bff936 	bltu	r7,r6,816b48 <__alt_mem_onchip_mem+0xff80eb48>
  816b64:	303fe91e 	bne	r6,zero,816b0c <__alt_mem_onchip_mem+0xff80eb0c>
  816b68:	003ff506 	br	816b40 <__alt_mem_onchip_mem+0xff80eb40>
  816b6c:	10c5c83a 	sub	r2,r2,r3
  816b70:	f800283a 	ret

00816b74 <__register_exitproc>:
  816b74:	defffa04 	addi	sp,sp,-24
  816b78:	dc000315 	stw	r16,12(sp)
  816b7c:	040020b4 	movhi	r16,130
  816b80:	84248404 	addi	r16,r16,-28144
  816b84:	80c00017 	ldw	r3,0(r16)
  816b88:	dc400415 	stw	r17,16(sp)
  816b8c:	dfc00515 	stw	ra,20(sp)
  816b90:	18805217 	ldw	r2,328(r3)
  816b94:	2023883a 	mov	r17,r4
  816b98:	10003726 	beq	r2,zero,816c78 <__register_exitproc+0x104>
  816b9c:	10c00117 	ldw	r3,4(r2)
  816ba0:	010007c4 	movi	r4,31
  816ba4:	20c00e16 	blt	r4,r3,816be0 <__register_exitproc+0x6c>
  816ba8:	1a000044 	addi	r8,r3,1
  816bac:	8800221e 	bne	r17,zero,816c38 <__register_exitproc+0xc4>
  816bb0:	18c00084 	addi	r3,r3,2
  816bb4:	18c7883a 	add	r3,r3,r3
  816bb8:	18c7883a 	add	r3,r3,r3
  816bbc:	12000115 	stw	r8,4(r2)
  816bc0:	10c7883a 	add	r3,r2,r3
  816bc4:	19400015 	stw	r5,0(r3)
  816bc8:	0005883a 	mov	r2,zero
  816bcc:	dfc00517 	ldw	ra,20(sp)
  816bd0:	dc400417 	ldw	r17,16(sp)
  816bd4:	dc000317 	ldw	r16,12(sp)
  816bd8:	dec00604 	addi	sp,sp,24
  816bdc:	f800283a 	ret
  816be0:	00800034 	movhi	r2,0
  816be4:	10800004 	addi	r2,r2,0
  816be8:	10002626 	beq	r2,zero,816c84 <__register_exitproc+0x110>
  816bec:	01006404 	movi	r4,400
  816bf0:	d9400015 	stw	r5,0(sp)
  816bf4:	d9800115 	stw	r6,4(sp)
  816bf8:	d9c00215 	stw	r7,8(sp)
  816bfc:	00000000 	call	0 <__reset-0x800000>
  816c00:	d9400017 	ldw	r5,0(sp)
  816c04:	d9800117 	ldw	r6,4(sp)
  816c08:	d9c00217 	ldw	r7,8(sp)
  816c0c:	10001d26 	beq	r2,zero,816c84 <__register_exitproc+0x110>
  816c10:	81000017 	ldw	r4,0(r16)
  816c14:	10000115 	stw	zero,4(r2)
  816c18:	02000044 	movi	r8,1
  816c1c:	22405217 	ldw	r9,328(r4)
  816c20:	0007883a 	mov	r3,zero
  816c24:	12400015 	stw	r9,0(r2)
  816c28:	20805215 	stw	r2,328(r4)
  816c2c:	10006215 	stw	zero,392(r2)
  816c30:	10006315 	stw	zero,396(r2)
  816c34:	883fde26 	beq	r17,zero,816bb0 <__alt_mem_onchip_mem+0xff80ebb0>
  816c38:	18c9883a 	add	r4,r3,r3
  816c3c:	2109883a 	add	r4,r4,r4
  816c40:	1109883a 	add	r4,r2,r4
  816c44:	21802215 	stw	r6,136(r4)
  816c48:	01800044 	movi	r6,1
  816c4c:	12406217 	ldw	r9,392(r2)
  816c50:	30cc983a 	sll	r6,r6,r3
  816c54:	4992b03a 	or	r9,r9,r6
  816c58:	12406215 	stw	r9,392(r2)
  816c5c:	21c04215 	stw	r7,264(r4)
  816c60:	01000084 	movi	r4,2
  816c64:	893fd21e 	bne	r17,r4,816bb0 <__alt_mem_onchip_mem+0xff80ebb0>
  816c68:	11006317 	ldw	r4,396(r2)
  816c6c:	218cb03a 	or	r6,r4,r6
  816c70:	11806315 	stw	r6,396(r2)
  816c74:	003fce06 	br	816bb0 <__alt_mem_onchip_mem+0xff80ebb0>
  816c78:	18805304 	addi	r2,r3,332
  816c7c:	18805215 	stw	r2,328(r3)
  816c80:	003fc606 	br	816b9c <__alt_mem_onchip_mem+0xff80eb9c>
  816c84:	00bfffc4 	movi	r2,-1
  816c88:	003fd006 	br	816bcc <__alt_mem_onchip_mem+0xff80ebcc>

00816c8c <__call_exitprocs>:
  816c8c:	defff504 	addi	sp,sp,-44
  816c90:	df000915 	stw	fp,36(sp)
  816c94:	dd400615 	stw	r21,24(sp)
  816c98:	dc800315 	stw	r18,12(sp)
  816c9c:	dfc00a15 	stw	ra,40(sp)
  816ca0:	ddc00815 	stw	r23,32(sp)
  816ca4:	dd800715 	stw	r22,28(sp)
  816ca8:	dd000515 	stw	r20,20(sp)
  816cac:	dcc00415 	stw	r19,16(sp)
  816cb0:	dc400215 	stw	r17,8(sp)
  816cb4:	dc000115 	stw	r16,4(sp)
  816cb8:	d9000015 	stw	r4,0(sp)
  816cbc:	2839883a 	mov	fp,r5
  816cc0:	04800044 	movi	r18,1
  816cc4:	057fffc4 	movi	r21,-1
  816cc8:	008020b4 	movhi	r2,130
  816ccc:	10a48404 	addi	r2,r2,-28144
  816cd0:	12000017 	ldw	r8,0(r2)
  816cd4:	45005217 	ldw	r20,328(r8)
  816cd8:	44c05204 	addi	r19,r8,328
  816cdc:	a0001c26 	beq	r20,zero,816d50 <__call_exitprocs+0xc4>
  816ce0:	a0800117 	ldw	r2,4(r20)
  816ce4:	15ffffc4 	addi	r23,r2,-1
  816ce8:	b8000d16 	blt	r23,zero,816d20 <__call_exitprocs+0x94>
  816cec:	14000044 	addi	r16,r2,1
  816cf0:	8421883a 	add	r16,r16,r16
  816cf4:	8421883a 	add	r16,r16,r16
  816cf8:	84402004 	addi	r17,r16,128
  816cfc:	a463883a 	add	r17,r20,r17
  816d00:	a421883a 	add	r16,r20,r16
  816d04:	e0001e26 	beq	fp,zero,816d80 <__call_exitprocs+0xf4>
  816d08:	80804017 	ldw	r2,256(r16)
  816d0c:	e0801c26 	beq	fp,r2,816d80 <__call_exitprocs+0xf4>
  816d10:	bdffffc4 	addi	r23,r23,-1
  816d14:	843fff04 	addi	r16,r16,-4
  816d18:	8c7fff04 	addi	r17,r17,-4
  816d1c:	bd7ff91e 	bne	r23,r21,816d04 <__alt_mem_onchip_mem+0xff80ed04>
  816d20:	00800034 	movhi	r2,0
  816d24:	10800004 	addi	r2,r2,0
  816d28:	10000926 	beq	r2,zero,816d50 <__call_exitprocs+0xc4>
  816d2c:	a0800117 	ldw	r2,4(r20)
  816d30:	1000301e 	bne	r2,zero,816df4 <__call_exitprocs+0x168>
  816d34:	a0800017 	ldw	r2,0(r20)
  816d38:	10003226 	beq	r2,zero,816e04 <__call_exitprocs+0x178>
  816d3c:	a009883a 	mov	r4,r20
  816d40:	98800015 	stw	r2,0(r19)
  816d44:	00000000 	call	0 <__reset-0x800000>
  816d48:	9d000017 	ldw	r20,0(r19)
  816d4c:	a03fe41e 	bne	r20,zero,816ce0 <__alt_mem_onchip_mem+0xff80ece0>
  816d50:	dfc00a17 	ldw	ra,40(sp)
  816d54:	df000917 	ldw	fp,36(sp)
  816d58:	ddc00817 	ldw	r23,32(sp)
  816d5c:	dd800717 	ldw	r22,28(sp)
  816d60:	dd400617 	ldw	r21,24(sp)
  816d64:	dd000517 	ldw	r20,20(sp)
  816d68:	dcc00417 	ldw	r19,16(sp)
  816d6c:	dc800317 	ldw	r18,12(sp)
  816d70:	dc400217 	ldw	r17,8(sp)
  816d74:	dc000117 	ldw	r16,4(sp)
  816d78:	dec00b04 	addi	sp,sp,44
  816d7c:	f800283a 	ret
  816d80:	a0800117 	ldw	r2,4(r20)
  816d84:	80c00017 	ldw	r3,0(r16)
  816d88:	10bfffc4 	addi	r2,r2,-1
  816d8c:	15c01426 	beq	r2,r23,816de0 <__call_exitprocs+0x154>
  816d90:	80000015 	stw	zero,0(r16)
  816d94:	183fde26 	beq	r3,zero,816d10 <__alt_mem_onchip_mem+0xff80ed10>
  816d98:	95c8983a 	sll	r4,r18,r23
  816d9c:	a0806217 	ldw	r2,392(r20)
  816da0:	a5800117 	ldw	r22,4(r20)
  816da4:	2084703a 	and	r2,r4,r2
  816da8:	10000b26 	beq	r2,zero,816dd8 <__call_exitprocs+0x14c>
  816dac:	a0806317 	ldw	r2,396(r20)
  816db0:	2088703a 	and	r4,r4,r2
  816db4:	20000c1e 	bne	r4,zero,816de8 <__call_exitprocs+0x15c>
  816db8:	89400017 	ldw	r5,0(r17)
  816dbc:	d9000017 	ldw	r4,0(sp)
  816dc0:	183ee83a 	callr	r3
  816dc4:	a0800117 	ldw	r2,4(r20)
  816dc8:	15bfbf1e 	bne	r2,r22,816cc8 <__alt_mem_onchip_mem+0xff80ecc8>
  816dcc:	98800017 	ldw	r2,0(r19)
  816dd0:	153fcf26 	beq	r2,r20,816d10 <__alt_mem_onchip_mem+0xff80ed10>
  816dd4:	003fbc06 	br	816cc8 <__alt_mem_onchip_mem+0xff80ecc8>
  816dd8:	183ee83a 	callr	r3
  816ddc:	003ff906 	br	816dc4 <__alt_mem_onchip_mem+0xff80edc4>
  816de0:	a5c00115 	stw	r23,4(r20)
  816de4:	003feb06 	br	816d94 <__alt_mem_onchip_mem+0xff80ed94>
  816de8:	89000017 	ldw	r4,0(r17)
  816dec:	183ee83a 	callr	r3
  816df0:	003ff406 	br	816dc4 <__alt_mem_onchip_mem+0xff80edc4>
  816df4:	a0800017 	ldw	r2,0(r20)
  816df8:	a027883a 	mov	r19,r20
  816dfc:	1029883a 	mov	r20,r2
  816e00:	003fb606 	br	816cdc <__alt_mem_onchip_mem+0xff80ecdc>
  816e04:	0005883a 	mov	r2,zero
  816e08:	003ffb06 	br	816df8 <__alt_mem_onchip_mem+0xff80edf8>

00816e0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  816e0c:	defffd04 	addi	sp,sp,-12
  816e10:	df000215 	stw	fp,8(sp)
  816e14:	df000204 	addi	fp,sp,8
  816e18:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  816e1c:	0001883a 	nop
  816e20:	e0bfff17 	ldw	r2,-4(fp)
  816e24:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  816e28:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  816e2c:	10000226 	beq	r2,zero,816e38 <_exit+0x2c>
    ALT_SIM_FAIL();
  816e30:	002af070 	cmpltui	zero,zero,43969
  816e34:	00000106 	br	816e3c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  816e38:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  816e3c:	003fff06 	br	816e3c <__alt_mem_onchip_mem+0xff80ee3c>
