
pacemaker_c_implementation.elf:     file format elf32-littlenios2
pacemaker_c_implementation.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000085fc memsz 0x000085fc flags r-x
    LOAD off    0x0000961c vaddr 0x0080861c paddr 0x0080a274 align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x0000becc vaddr 0x0080becc paddr 0x0080becc align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007fe0  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003f8  00808224  00808224  00009224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  0080861c  0080a274  0000961c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  0080becc  0080becc  0000becc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0080c034  0080c034  0000b274  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0000b274  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000b274  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000be0  00000000  00000000  0000b298  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001aa69  00000000  00000000  0000be78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007440  00000000  00000000  000268e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008030  00000000  00000000  0002dd21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001d14  00000000  00000000  00035d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000329b  00000000  00000000  00037a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ea3  00000000  00000000  0003ad03  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0003fba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000728  00000000  00000000  0003fc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00043419  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0004341c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0004341f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00043420  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00043421  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0004342a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00043433  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0004343c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000030  00000000  00000000  00043448  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000677b7  00000000  00000000  00043478  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00808224 l    d  .rodata	00000000 .rodata
0080861c l    d  .rwdata	00000000 .rwdata
0080becc l    d  .bss	00000000 .bss
0080c034 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Projects/University/303-Assignment/pacemaker_c_implementation_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 buttons_test.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 switches.c
00000000 l    df *ABS*	00000000 uart_test.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00801068 l     F .text	00000008 __fp_unlock
0080107c l     F .text	0000019c __sinit.part.1
00801218 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080861c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008040b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008041bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008041e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00804454 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00804534 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00804620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
008047f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080a260 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00804be4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00804d18 l     F .text	00000034 alt_dev_reg
00808ff0 l     O .rwdata	00001060 jtag_uart
0080a050 l     O .rwdata	00000120 lcd
0080a170 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00805040 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080524c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080a26c l     O .rwdata	00000004 colstart
00805884 l     F .text	000000b8 lcd_write_command
0080593c l     F .text	000000d8 lcd_write_data
00805a14 l     F .text	000000d0 lcd_clear_screen
00805ae4 l     F .text	000001ec lcd_repaint_screen
00805cd0 l     F .text	000000cc lcd_scroll_up
00805d9c l     F .text	000002ac lcd_handle_escape
00806520 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00806760 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00806a10 l     F .text	0000009c altera_avalon_uart_irq
00806aac l     F .text	000000e4 altera_avalon_uart_rxirq
00806b90 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00806d2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00806f44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00807174 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008075e8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00807728 l     F .text	0000003c alt_get_errno
00807764 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080849b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080bf08 g     O .bss	00000004 alt_instruction_exception_handler
0080beda g     O .bss	00000001 a_pace_led_timer_already_started
00800ee4 g     F .text	00000018 putchar
00803d7c g     F .text	00000054 _isatty_r
00804730 g     F .text	0000007c alt_main
00800efc g     F .text	000000c0 _puts_r
0080bf34 g     O .bss	00000100 alt_irq
00803aa4 g     F .text	00000060 _lseek_r
0080a274 g       *ABS*	00000000 __flash_rwdata_start
0080c034 g       *ABS*	00000000 __alt_heap_start
00802f00 g     F .text	0000005c __sseek
008013b8 g     F .text	00000010 __sinit
00802f64 g     F .text	00000140 __swbuf_r
00801220 g     F .text	00000068 __sfmoreglue
008047d0 g     F .text	00000024 __malloc_unlock
00800d10 g     F .text	00000104 clear_sense_led_events
00802484 g     F .text	0000015c memmove
008013a0 g     F .text	00000018 _cleanup
00800290 g     F .text	000000e0 buttons_interrupts_function
008079ac g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
0080bed5 g     O .bss	00000001 ventricular_sense_paced
00800020 g       *ABS*	00000000 __flash_exceptions_start
00803d20 g     F .text	0000005c _fstat_r
0080beec g     O .bss	00000004 errno
00802e7c g     F .text	00000008 __seofread
0080bef8 g     O .bss	00000004 alt_argv
00812234 g       *ABS*	00000000 _gp
0080797c g     F .text	00000030 usleep
00808e70 g     O .rwdata	00000180 alt_fd_list
00800edc g     F .text	00000008 _putchar_r
00800398 g     F .text	00000028 v_pace_led_timer_isr_function
00807b28 g     F .text	00000090 alt_find_dev
0080233c g     F .text	00000148 memcpy
00801070 g     F .text	0000000c _cleanup_r
008076ac g     F .text	0000007c alt_io_redirect
00808224 g       *ABS*	00000000 __DTOR_END__
00800fbc g     F .text	00000014 puts
00807df4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00805444 g     F .text	0000021c altera_avalon_jtag_uart_read
00803ec8 g     F .text	00000064 .hidden __udivsi3
00804490 g     F .text	000000a4 isatty
00807d64 g     F .text	00000090 alt_icache_flush
008004fc g     F .text	00000040 v_events_timer_isr_function
0080bee8 g     O .bss	00000004 __malloc_top_pad
0080bed3 g     O .bss	00000001 ventricular_sense
00801408 g     F .text	000004bc __sfvwrite_r
00802dd4 g     F .text	00000054 _sbrk_r
00800370 g     F .text	00000028 a_pace_led_timer_isr_function
00803cc0 g     F .text	00000060 _read_r
0080a254 g     O .rwdata	00000004 alt_max_fd
008032c4 g     F .text	000000f0 _fclose_r
00803640 g     F .text	00000030 fflush
0080bee4 g     O .bss	00000004 __malloc_max_sbrked_mem
008042d4 g     F .text	00000180 alt_irq_register
0080465c g     F .text	000000d4 lseek
008003e8 g     F .text	00000028 v_sense_led_timer_isr_function
0080a234 g     O .rwdata	00000004 _global_impure_ptr
00802870 g     F .text	00000564 _realloc_r
0080c034 g       *ABS*	00000000 __bss_end
008074f8 g     F .text	000000f0 alt_iic_isr_register
00804adc g     F .text	00000108 alt_tick
00806964 g     F .text	000000ac altera_avalon_uart_init
008013d8 g     F .text	00000018 __fp_lock_all
008074ac g     F .text	0000004c alt_ic_irq_enabled
00804a40 g     F .text	0000009c alt_alarm_stop
0080bed4 g     O .bss	00000001 atrial_sense_paced
0080bef0 g     O .bss	00000004 alt_irq_active
0080becd g     O .bss	00000001 implementation_mode
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00808e48 g     O .rwdata	00000028 alt_dev_null
0080712c g     F .text	00000048 alt_dcache_flush_all
0080bed2 g     O .bss	00000001 atrial_sense
0080a274 g       *ABS*	00000000 __ram_rwdata_end
0080a24c g     O .rwdata	00000008 alt_dev_list
00804c20 g     F .text	000000f8 write
00802708 g     F .text	000000a0 _putc_r
0080861c g       *ABS*	00000000 __ram_rodata_end
00804224 g     F .text	000000b0 fstat
008003c0 g     F .text	00000028 a_sense_led_timer_isr_function
00803f2c g     F .text	00000058 .hidden __umodsi3
00800e14 g     F .text	000000a8 C_Mode_Pacemaker
0080c034 g       *ABS*	00000000 end
00806048 g     F .text	000004d8 altera_avalon_lcd_16207_write
00800b7c g     F .text	00000060 send_ventricular_event
00806f80 g     F .text	000001ac altera_avalon_uart_write
00804f80 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00808224 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080becc g     O .bss	00000001 pulse_mode
008067d8 g     F .text	0000007c alt_avalon_timer_sc_init
008068b4 g     F .text	00000060 altera_avalon_uart_write_fd
00806914 g     F .text	00000050 altera_avalon_uart_close_fd
00805660 g     F .text	00000224 altera_avalon_jtag_uart_write
008013c8 g     F .text	00000004 __sfp_lock_acquire
00802258 g     F .text	000000e4 memchr
00803794 g     F .text	00000310 _free_r
00808070 g     F .text	00000180 __call_exitprocs
0080a23c g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
008004bc g     F .text	00000040 a_events_timer_isr_function
0080bf00 g     O .bss	00000004 _alt_tick_rate
0080bf04 g     O .bss	00000004 _alt_nticks
00804830 g     F .text	000000fc read
00804d84 g     F .text	00000098 alt_sys_init
00800c0c g     F .text	00000104 clear_pace_led_events
00807f58 g     F .text	00000118 __register_exitproc
0080bed1 g     O .bss	00000001 v_is_paced
008052ec g     F .text	00000068 altera_avalon_jtag_uart_close
0080861c g       *ABS*	00000000 __ram_rwdata_start
00808224 g       *ABS*	00000000 __ram_rodata_start
0080bf0c g     O .bss	00000028 __malloc_current_mallinfo
00804e1c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00807cc0 g     F .text	000000a4 alt_get_fd
008079d0 g     F .text	00000158 alt_busy_sleep
00803270 g     F .text	00000054 _close_r
00807edc g     F .text	0000007c memcmp
00804edc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0080c034 g       *ABS*	00000000 __alt_stack_base
00804f2c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080311c g     F .text	00000154 __swsetup_r
00801288 g     F .text	00000118 __sfp
00808a40 g     O .rwdata	00000408 __malloc_av_
008013d4 g     F .text	00000004 __sinit_lock_release
00802e28 g     F .text	00000054 __sread
00807bb8 g     F .text	00000108 alt_find_file
008071b0 g     F .text	000000a4 alt_dev_llist_insert
008047ac g     F .text	00000024 __malloc_lock
00804990 g     F .text	000000b0 sbrk
008035e4 g     F .text	0000005c _fflush_r
0080bece g     O .bss	00000001 atrial_event
0080becc g       *ABS*	00000000 __bss_start
008025e0 g     F .text	00000128 memset
0080053c g     F .text	000005e0 main
0080befc g     O .bss	00000004 alt_envp
0080bee0 g     O .bss	00000004 __malloc_max_total_mem
00804e7c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008030a4 g     F .text	00000018 __swbuf
008065cc g     F .text	00000134 altera_avalon_lcd_16207_init
00802f5c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008033b4 g     F .text	00000014 fclose
00801a4c g     F .text	0000080c _malloc_r
0080a258 g     O .rwdata	00000004 alt_errno
008018c4 g     F .text	000000c4 _fwalk
00800410 g     F .text	000000ac uart_read_isr_function
008027a8 g     F .text	000000c8 putc
00803dd0 g     F .text	00000084 .hidden __divsi3
00803670 g     F .text	00000124 _malloc_trim_r
00808224 g       *ABS*	00000000 __CTOR_END__
0080bed9 g     O .bss	00000001 led_sense_ventricular_event
00808224 g       *ABS*	00000000 __flash_rodata_start
00808224 g       *ABS*	00000000 __DTOR_LIST__
00804d4c g     F .text	00000038 alt_irq_init
0080492c g     F .text	00000064 alt_release_fd
00807e90 g     F .text	00000014 atexit
008030bc g     F .text	00000060 _write_r
00800bdc g     F .text	00000030 clear_heart_flags
0080a238 g     O .rwdata	00000004 _impure_ptr
0080bef4 g     O .bss	00000004 alt_argc
00800ebc g     F .text	00000020 SCCHARTS_Mode_Pacemaker
008033c8 g     F .text	0000021c __sflush_r
008072b4 g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
008013f0 g     F .text	00000018 __fp_unlock_all
00806700 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0080a244 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807348 g     F .text	00000050 alt_ic_isr_register
0080a274 g       *ABS*	00000000 _edata
00806854 g     F .text	00000060 altera_avalon_uart_read_fd
0080bed0 g     O .bss	00000001 ventricular_event
0080c034 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00805354 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00807420 g     F .text	0000008c alt_ic_irq_disable
00802e84 g     F .text	0000007c __swrite
0080a240 g     O .rwdata	00000004 __malloc_trim_threshold
00807ea4 g     F .text	00000038 exit
0080bed6 g     O .bss	00000001 led_pace_atrial_event
00801988 g     F .text	000000c4 _fwalk_reent
00803e54 g     F .text	00000074 .hidden __modsi3
0080a270 g     O .rwdata	00000004 __ctype_ptr__
0080bed8 g     O .bss	00000001 led_sense_atrial_event
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008013cc g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080839a g     O .rodata	00000101 _ctype_
0080becf g     O .bss	00000001 a_is_paced
00806cd8 g     F .text	00000054 altera_avalon_uart_close
008081f0 g     F .text	00000034 _exit
00803f84 g     F .text	0000012c alt_alarm_start
00803b04 g     F .text	000001bc __smakebuf_r
00800fd0 g     F .text	00000098 strlen
00807828 g     F .text	00000154 open
0080bedc g     O .bss	00000001 a_sense_led_timer_already_started
00807314 g     F .text	00000034 alt_icache_flush_all
0080a25c g     O .rwdata	00000004 alt_priority_mask
00807398 g     F .text	00000088 alt_ic_irq_enable
0080bedd g     O .bss	00000001 v_sense_led_timer_already_started
00806d68 g     F .text	000001dc altera_avalon_uart_read
0080bed7 g     O .bss	00000001 led_pace_ventricular_event
0080bedb g     O .bss	00000001 v_pace_led_timer_already_started
00800b1c g     F .text	00000060 send_atrial_event
0080a264 g     O .rwdata	00000008 alt_alarm_list
00807254 g     F .text	00000060 _do_ctors
008040ec g     F .text	000000d0 close
0080459c g     F .text	00000084 alt_load
008013d0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10afcd04 	addi	r2,r2,-16588
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10afcd04 	addi	r2,r2,-16588
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73517 	ldw	r2,-25388(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73517 	ldw	r2,-25388(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6888d14 	ori	gp,gp,8756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	10afb314 	ori	r2,r2,48844

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18f00d14 	ori	r3,r3,49204

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080459c0 	call	80459c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08047300 	call	804730 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <buttons_interrupts_function>:

bool a_sense_led_timer_already_started = false;
bool v_sense_led_timer_already_started = false;

void buttons_interrupts_function(void* context, alt_u32 id)
{
  800290:	defffb04 	addi	sp,sp,-20
  800294:	dfc00415 	stw	ra,16(sp)
  800298:	df000315 	stw	fp,12(sp)
  80029c:	df000304 	addi	fp,sp,12
  8002a0:	e13ffe15 	stw	r4,-8(fp)
  8002a4:	e17fff15 	stw	r5,-4(fp)

	int* temp_button_value = (int*) context; // Cast the context before using it
  8002a8:	e0bffe17 	ldw	r2,-8(fp)
  8002ac:	e0bffd15 	stw	r2,-12(fp)
	(*temp_button_value) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8002b0:	00804074 	movhi	r2,257
  8002b4:	10842b04 	addi	r2,r2,4268
  8002b8:	10c00037 	ldwio	r3,0(r2)
  8002bc:	e0bffd17 	ldw	r2,-12(fp)
  8002c0:	10c00015 	stw	r3,0(r2)

	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8002c4:	0007883a 	mov	r3,zero
  8002c8:	00804074 	movhi	r2,257
  8002cc:	10842b04 	addi	r2,r2,4268
  8002d0:	10c00035 	stwio	r3,0(r2)

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
  8002d4:	d0a72603 	ldbu	r2,-25448(gp)
  8002d8:	1080005c 	xori	r2,r2,1
  8002dc:	10803fcc 	andi	r2,r2,255
  8002e0:	10001d1e 	bne	r2,zero,800358 <buttons_interrupts_function+0xc8>
		return;
	}


	if ((*temp_button_value & (1 << KEY1))) {
  8002e4:	e0bffd17 	ldw	r2,-12(fp)
  8002e8:	10800017 	ldw	r2,0(r2)
  8002ec:	1080008c 	andi	r2,r2,2
  8002f0:	10000526 	beq	r2,zero,800308 <buttons_interrupts_function+0x78>
		//printf("KEY0 : ATRIAL EVENT!\n");
		send_atrial_event(true);
  8002f4:	01000044 	movi	r4,1
  8002f8:	0800b1c0 	call	800b1c <send_atrial_event>
		printf("Atrium Manually Paced!\n");
  8002fc:	01002074 	movhi	r4,129
  800300:	21208904 	addi	r4,r4,-32220
  800304:	0800fbc0 	call	800fbc <puts>
	}

	if ((*temp_button_value & (1 << KEY0))) {
  800308:	e0bffd17 	ldw	r2,-12(fp)
  80030c:	10800017 	ldw	r2,0(r2)
  800310:	1080004c 	andi	r2,r2,1
  800314:	10000526 	beq	r2,zero,80032c <buttons_interrupts_function+0x9c>
		//printf("KEY1 : VENTRICULAR EVENT!\n");
		send_ventricular_event(true);
  800318:	01000044 	movi	r4,1
  80031c:	0800b7c0 	call	800b7c <send_ventricular_event>
		printf("Ventricular Manually Paced!\n");
  800320:	01002074 	movhi	r4,129
  800324:	21208f04 	addi	r4,r4,-32196
  800328:	0800fbc0 	call	800fbc <puts>
	}

	if ((*temp_button_value & (1 << 2))) {
  80032c:	e0bffd17 	ldw	r2,-12(fp)
  800330:	10800017 	ldw	r2,0(r2)
  800334:	1080010c 	andi	r2,r2,4
  800338:	10000826 	beq	r2,zero,80035c <buttons_interrupts_function+0xcc>
		// reset leds -- DEBUGGING / CLEAR EVENTS
		atrial_event = false;
  80033c:	d0272685 	stb	zero,-25446(gp)
		ventricular_event = false;
  800340:	d0272705 	stb	zero,-25444(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  800344:	0007883a 	mov	r3,zero
  800348:	00804074 	movhi	r2,257
  80034c:	10841c04 	addi	r2,r2,4208
  800350:	10c00035 	stwio	r3,0(r2)
  800354:	00000106 	br	80035c <buttons_interrupts_function+0xcc>
	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
		return;
  800358:	0001883a 	nop
		ventricular_event = false;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	}

	//printf("button pressed: %i\n", *temp_button_value); DEBUGGING PURPOSES
}
  80035c:	e037883a 	mov	sp,fp
  800360:	dfc00117 	ldw	ra,4(sp)
  800364:	df000017 	ldw	fp,0(sp)
  800368:	dec00204 	addi	sp,sp,8
  80036c:	f800283a 	ret

00800370 <a_pace_led_timer_isr_function>:

alt_u32 a_pace_led_timer_isr_function(void* context) {
  800370:	defffe04 	addi	sp,sp,-8
  800374:	df000115 	stw	fp,4(sp)
  800378:	df000104 	addi	fp,sp,4
  80037c:	e13fff15 	stw	r4,-4(fp)

	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	//int *led_time_count = (int*) context;
	led_pace_atrial_event = false;
  800380:	d0272885 	stb	zero,-25438(gp)
	return LED_ON_MILLISECONDS;
  800384:	00800644 	movi	r2,25
}
  800388:	e037883a 	mov	sp,fp
  80038c:	df000017 	ldw	fp,0(sp)
  800390:	dec00104 	addi	sp,sp,4
  800394:	f800283a 	ret

00800398 <v_pace_led_timer_isr_function>:

alt_u32 v_pace_led_timer_isr_function(void* context) {
  800398:	defffe04 	addi	sp,sp,-8
  80039c:	df000115 	stw	fp,4(sp)
  8003a0:	df000104 	addi	fp,sp,4
  8003a4:	e13fff15 	stw	r4,-4(fp)

	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	//int *(led_time_count) = (int*) context;
	led_pace_ventricular_event = false;
  8003a8:	d02728c5 	stb	zero,-25437(gp)
	return LED_ON_MILLISECONDS;
  8003ac:	00800644 	movi	r2,25
}
  8003b0:	e037883a 	mov	sp,fp
  8003b4:	df000017 	ldw	fp,0(sp)
  8003b8:	dec00104 	addi	sp,sp,4
  8003bc:	f800283a 	ret

008003c0 <a_sense_led_timer_isr_function>:

alt_u32 a_sense_led_timer_isr_function(void* contxet) {
  8003c0:	defffe04 	addi	sp,sp,-8
  8003c4:	df000115 	stw	fp,4(sp)
  8003c8:	df000104 	addi	fp,sp,4
  8003cc:	e13fff15 	stw	r4,-4(fp)
	led_sense_atrial_event = false;
  8003d0:	d0272905 	stb	zero,-25436(gp)
	return LED_ON_MILLISECONDS;
  8003d4:	00800644 	movi	r2,25
}
  8003d8:	e037883a 	mov	sp,fp
  8003dc:	df000017 	ldw	fp,0(sp)
  8003e0:	dec00104 	addi	sp,sp,4
  8003e4:	f800283a 	ret

008003e8 <v_sense_led_timer_isr_function>:

alt_u32 v_sense_led_timer_isr_function(void* contxet) {
  8003e8:	defffe04 	addi	sp,sp,-8
  8003ec:	df000115 	stw	fp,4(sp)
  8003f0:	df000104 	addi	fp,sp,4
  8003f4:	e13fff15 	stw	r4,-4(fp)
	led_sense_ventricular_event = false;
  8003f8:	d0272945 	stb	zero,-25435(gp)
	return LED_ON_MILLISECONDS;
  8003fc:	00800644 	movi	r2,25
}
  800400:	e037883a 	mov	sp,fp
  800404:	df000017 	ldw	fp,0(sp)
  800408:	dec00104 	addi	sp,sp,4
  80040c:	f800283a 	ret

00800410 <uart_read_isr_function>:

void uart_read_isr_function(void* context, alt_u32 id)
{
  800410:	defffb04 	addi	sp,sp,-20
  800414:	dfc00415 	stw	ra,16(sp)
  800418:	df000315 	stw	fp,12(sp)
  80041c:	df000304 	addi	fp,sp,12
  800420:	e13ffe15 	stw	r4,-8(fp)
  800424:	e17fff15 	stw	r5,-4(fp)
	// if we are NOT in UART MODE then exit early;

	char temp;
	temp = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
  800428:	00804074 	movhi	r2,257
  80042c:	10841004 	addi	r2,r2,4160
  800430:	10800037 	ldwio	r2,0(r2)
  800434:	e0bffd05 	stb	r2,-12(fp)

	if (pulse_mode == BUTTON_MODE) {
  800438:	d0a72603 	ldbu	r2,-25448(gp)
  80043c:	10803fcc 	andi	r2,r2,255
  800440:	10000d26 	beq	r2,zero,800478 <uart_read_isr_function+0x68>

		if (atrial_event) {
  800444:	d0a72683 	ldbu	r2,-25446(gp)
  800448:	10803fcc 	andi	r2,r2,255
  80044c:	10000326 	beq	r2,zero,80045c <uart_read_isr_function+0x4c>
			printf("Atrial Transmitted to UART!\n");
  800450:	01002074 	movhi	r4,129
  800454:	21209604 	addi	r4,r4,-32168
  800458:	0800fbc0 	call	800fbc <puts>
		}

		if (ventricular_event) {
  80045c:	d0a72703 	ldbu	r2,-25444(gp)
  800460:	10803fcc 	andi	r2,r2,255
  800464:	10000f26 	beq	r2,zero,8004a4 <uart_read_isr_function+0x94>
			printf("Ventricular Transmitted to UART!\n");
  800468:	01002074 	movhi	r4,129
  80046c:	21209d04 	addi	r4,r4,-32140
  800470:	0800fbc0 	call	800fbc <puts>
		}
		return;
  800474:	00000b06 	br	8004a4 <uart_read_isr_function+0x94>
	}

	if (temp == 'A') {
  800478:	e0bffd07 	ldb	r2,-12(fp)
  80047c:	10801058 	cmpnei	r2,r2,65
  800480:	1000021e 	bne	r2,zero,80048c <uart_read_isr_function+0x7c>
		send_atrial_event(false);
  800484:	0009883a 	mov	r4,zero
  800488:	0800b1c0 	call	800b1c <send_atrial_event>
	}
	if (temp == 'V') {
  80048c:	e0bffd07 	ldb	r2,-12(fp)
  800490:	10801598 	cmpnei	r2,r2,86
  800494:	1000041e 	bne	r2,zero,8004a8 <uart_read_isr_function+0x98>
		send_ventricular_event(false);
  800498:	0009883a 	mov	r4,zero
  80049c:	0800b7c0 	call	800b7c <send_ventricular_event>
  8004a0:	00000106 	br	8004a8 <uart_read_isr_function+0x98>
		}

		if (ventricular_event) {
			printf("Ventricular Transmitted to UART!\n");
		}
		return;
  8004a4:	0001883a 	nop
	}
	if (temp == 'V') {
		send_ventricular_event(false);
	}
	//printf("UART read: %c\n", temp);
}
  8004a8:	e037883a 	mov	sp,fp
  8004ac:	dfc00117 	ldw	ra,4(sp)
  8004b0:	df000017 	ldw	fp,0(sp)
  8004b4:	dec00204 	addi	sp,sp,8
  8004b8:	f800283a 	ret

008004bc <a_events_timer_isr_function>:

alt_u32 a_events_timer_isr_function(void* context) {
  8004bc:	defffd04 	addi	sp,sp,-12
  8004c0:	df000215 	stw	fp,8(sp)
  8004c4:	df000204 	addi	fp,sp,8
  8004c8:	e13fff15 	stw	r4,-4(fp)
	int *a_timer_count =(int*) context;
  8004cc:	e0bfff17 	ldw	r2,-4(fp)
  8004d0:	e0bffe15 	stw	r2,-8(fp)
	(*a_timer_count)++;
  8004d4:	e0bffe17 	ldw	r2,-8(fp)
  8004d8:	10800017 	ldw	r2,0(r2)
  8004dc:	10c00044 	addi	r3,r2,1
  8004e0:	e0bffe17 	ldw	r2,-8(fp)
  8004e4:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  8004e8:	00800044 	movi	r2,1
}
  8004ec:	e037883a 	mov	sp,fp
  8004f0:	df000017 	ldw	fp,0(sp)
  8004f4:	dec00104 	addi	sp,sp,4
  8004f8:	f800283a 	ret

008004fc <v_events_timer_isr_function>:

alt_u32 v_events_timer_isr_function(void* context) {
  8004fc:	defffd04 	addi	sp,sp,-12
  800500:	df000215 	stw	fp,8(sp)
  800504:	df000204 	addi	fp,sp,8
  800508:	e13fff15 	stw	r4,-4(fp)
	int *v_timer_count =(int*) context;
  80050c:	e0bfff17 	ldw	r2,-4(fp)
  800510:	e0bffe15 	stw	r2,-8(fp)
	(*v_timer_count)++;
  800514:	e0bffe17 	ldw	r2,-8(fp)
  800518:	10800017 	ldw	r2,0(r2)
  80051c:	10c00044 	addi	r3,r2,1
  800520:	e0bffe17 	ldw	r2,-8(fp)
  800524:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  800528:	00800044 	movi	r2,1
}
  80052c:	e037883a 	mov	sp,fp
  800530:	df000017 	ldw	fp,0(sp)
  800534:	dec00104 	addi	sp,sp,4
  800538:	f800283a 	ret

0080053c <main>:

int main(void)
{
  80053c:	deffcb04 	addi	sp,sp,-212
  800540:	dfc03415 	stw	ra,208(sp)
  800544:	df003315 	stw	fp,204(sp)
  800548:	df003304 	addi	fp,sp,204
	printf("Starting.\n");
  80054c:	01002074 	movhi	r4,129
  800550:	2120a604 	addi	r4,r4,-32104
  800554:	0800fbc0 	call	800fbc <puts>

	unsigned int switch_value = 0;
  800558:	e03fd515 	stw	zero,-172(fp)
	int button_value = 1;
  80055c:	00800044 	movi	r2,1
  800560:	e0bfd915 	stw	r2,-156(fp)
	void* button_context = (void*) &button_value; // Cast before passing context to isr
  800564:	e0bfd904 	addi	r2,fp,-156
  800568:	e0bfd615 	stw	r2,-168(fp)
	//========= 	  INTERRUPTS  	   =========

	// Clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  80056c:	0007883a 	mov	r3,zero
  800570:	00804074 	movhi	r2,257
  800574:	10842b04 	addi	r2,r2,4268
  800578:	10c00035 	stwio	r3,0(r2)

	// Enable interrupts
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  80057c:	00c001c4 	movi	r3,7
  800580:	00804074 	movhi	r2,257
  800584:	10842a04 	addi	r2,r2,4264
  800588:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(UART_BASE, 0x0080);
  80058c:	00c02004 	movi	r3,128
  800590:	00804074 	movhi	r2,257
  800594:	10841204 	addi	r2,r2,4168
  800598:	10c00035 	stwio	r3,0(r2)

	// Register the isr
	alt_irq_register(KEYS_IRQ, button_context, buttons_interrupts_function);
  80059c:	01802034 	movhi	r6,128
  8005a0:	3180a404 	addi	r6,r6,656
  8005a4:	e17fd617 	ldw	r5,-168(fp)
  8005a8:	01000104 	movi	r4,4
  8005ac:	08042d40 	call	8042d4 <alt_irq_register>
	alt_irq_register(UART_IRQ, NULL, uart_read_isr_function);
  8005b0:	01802034 	movhi	r6,128
  8005b4:	31810404 	addi	r6,r6,1040
  8005b8:	000b883a 	mov	r5,zero
  8005bc:	0009883a 	mov	r4,zero
  8005c0:	08042d40 	call	8042d4 <alt_irq_register>

	printf("Interrupts Initialised.\n");
  8005c4:	01002074 	movhi	r4,129
  8005c8:	2120a904 	addi	r4,r4,-32092
  8005cc:	0800fbc0 	call	800fbc <puts>
	//========= 	  INTERRUPTS  	   =========
	//========= 	    TIMERS  	   =========
	// Lets LEDs stay on for 500 seconds.
	alt_alarm a_pace_led_timer;
	alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  8005d0:	e0bfda04 	addi	r2,fp,-152
  8005d4:	000f883a 	mov	r7,zero
  8005d8:	01802034 	movhi	r6,128
  8005dc:	3180dc04 	addi	r6,r6,880
  8005e0:	01400644 	movi	r5,25
  8005e4:	1009883a 	mov	r4,r2
  8005e8:	0803f840 	call	803f84 <alt_alarm_start>

	alt_alarm v_pace_led_timer;
	alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  8005ec:	e0bfe004 	addi	r2,fp,-128
  8005f0:	000f883a 	mov	r7,zero
  8005f4:	01802034 	movhi	r6,128
  8005f8:	3180e604 	addi	r6,r6,920
  8005fc:	01400644 	movi	r5,25
  800600:	1009883a 	mov	r4,r2
  800604:	0803f840 	call	803f84 <alt_alarm_start>

	alt_alarm a_sense_led_timer;
	alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  800608:	e0bfe604 	addi	r2,fp,-104
  80060c:	000f883a 	mov	r7,zero
  800610:	01802034 	movhi	r6,128
  800614:	3180f004 	addi	r6,r6,960
  800618:	01400644 	movi	r5,25
  80061c:	1009883a 	mov	r4,r2
  800620:	0803f840 	call	803f84 <alt_alarm_start>

	alt_alarm v_sense_led_timer;
	alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  800624:	e0bfec04 	addi	r2,fp,-80
  800628:	000f883a 	mov	r7,zero
  80062c:	01802034 	movhi	r6,128
  800630:	3180fa04 	addi	r6,r6,1000
  800634:	01400644 	movi	r5,25
  800638:	1009883a 	mov	r4,r2
  80063c:	0803f840 	call	803f84 <alt_alarm_start>

	alt_alarm a_events_timer;
	int a_timer_count = 0;
  800640:	e03ff815 	stw	zero,-32(fp)
	void *a_events_timer_context = (void*) &a_timer_count;
  800644:	e0bff804 	addi	r2,fp,-32
  800648:	e0bfd715 	stw	r2,-164(fp)
	alt_alarm_start(&a_events_timer, 1, a_events_timer_isr_function, a_events_timer_context);
  80064c:	e0bff204 	addi	r2,fp,-56
  800650:	e1ffd717 	ldw	r7,-164(fp)
  800654:	01802034 	movhi	r6,128
  800658:	31812f04 	addi	r6,r6,1212
  80065c:	01400044 	movi	r5,1
  800660:	1009883a 	mov	r4,r2
  800664:	0803f840 	call	803f84 <alt_alarm_start>

	alt_alarm v_events_timer;
	int v_timer_count = 0;
  800668:	e03fff15 	stw	zero,-4(fp)
	void *v_events_timer_context = (void*) &v_timer_count;
  80066c:	e0bfff04 	addi	r2,fp,-4
  800670:	e0bfd815 	stw	r2,-160(fp)
	alt_alarm_start(&v_events_timer, 1, v_events_timer_isr_function, v_events_timer_context);
  800674:	e0bff904 	addi	r2,fp,-28
  800678:	e1ffd817 	ldw	r7,-160(fp)
  80067c:	01802034 	movhi	r6,128
  800680:	31813f04 	addi	r6,r6,1276
  800684:	01400044 	movi	r5,1
  800688:	1009883a 	mov	r4,r2
  80068c:	0803f840 	call	803f84 <alt_alarm_start>


	//========= 	    TIMERS  	   =========
	printf("Timers Initialised.\n");
  800690:	01002074 	movhi	r4,129
  800694:	2120af04 	addi	r4,r4,-32068
  800698:	0800fbc0 	call	800fbc <puts>

	printf("Entering Loop.\n");
  80069c:	01002074 	movhi	r4,129
  8006a0:	2120b404 	addi	r4,r4,-32048
  8006a4:	0800fbc0 	call	800fbc <puts>
	while(1) {
		// Get switch state from switch peripheral (returns a binary)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  8006a8:	00804074 	movhi	r2,257
  8006ac:	10842404 	addi	r2,r2,4240
  8006b0:	10800037 	ldwio	r2,0(r2)
  8006b4:	e0bfd515 	stw	r2,-172(fp)


		// ========= 	  PULSE MODES 	  =========
		if (switch_value & (1 << PULSE_MODE_SWITCH)) {
  8006b8:	e0bfd517 	ldw	r2,-172(fp)
  8006bc:	1080004c 	andi	r2,r2,1
  8006c0:	10000326 	beq	r2,zero,8006d0 <main+0x194>
			// SW0 is ON
			pulse_mode = BUTTON_MODE;
  8006c4:	00800044 	movi	r2,1
  8006c8:	d0a72605 	stb	r2,-25448(gp)
  8006cc:	00000406 	br	8006e0 <main+0x1a4>
		} else if (!(switch_value & (1 << PULSE_MODE_SWITCH))) {
  8006d0:	e0bfd517 	ldw	r2,-172(fp)
  8006d4:	1080004c 	andi	r2,r2,1
  8006d8:	1000011e 	bne	r2,zero,8006e0 <main+0x1a4>
			// SW0 is OFF
			pulse_mode = UART_MODE;
  8006dc:	d0272605 	stb	zero,-25448(gp)
		}
		// ========= 	  PULSE MODES 	  =========

		// ========= IMPLEMENTATION MODES =========
		if (switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH)) {
  8006e0:	e0bfd517 	ldw	r2,-172(fp)
  8006e4:	1080008c 	andi	r2,r2,2
  8006e8:	10000326 	beq	r2,zero,8006f8 <main+0x1bc>
			// SW1 is ON
			implementation_mode = SCCHARTS_MODE;
  8006ec:	00800044 	movi	r2,1
  8006f0:	d0a72645 	stb	r2,-25447(gp)
  8006f4:	00000406 	br	800708 <main+0x1cc>
		} else if (!(switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH))) {
  8006f8:	e0bfd517 	ldw	r2,-172(fp)
  8006fc:	1080008c 	andi	r2,r2,2
  800700:	1000011e 	bne	r2,zero,800708 <main+0x1cc>
			// SW1 is OFF
			implementation_mode = C_MODE;
  800704:	d0272645 	stb	zero,-25447(gp)
		}
		// ========= IMPLEMENTATION MODES =========

		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING
		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING
		if (atrial_event) {
  800708:	d0a72683 	ldbu	r2,-25446(gp)
  80070c:	10803fcc 	andi	r2,r2,255
  800710:	10002526 	beq	r2,zero,8007a8 <main+0x26c>
			printf("\n");
  800714:	01000284 	movi	r4,10
  800718:	0800ee40 	call	800ee4 <putchar>
			atrial_event = false; // COULD BE A PROBLEM?
  80071c:	d0272685 	stb	zero,-25446(gp)
			// If we are in C_Mode, restart timer
			if (implementation_mode == C_MODE) {
  800720:	d0a72643 	ldbu	r2,-25447(gp)
  800724:	1080005c 	xori	r2,r2,1
  800728:	10803fcc 	andi	r2,r2,255
  80072c:	10000726 	beq	r2,zero,80074c <main+0x210>
				if (v_timer_count >= PVARP_VALUE) {
  800730:	e0bfff17 	ldw	r2,-4(fp)
  800734:	10800c90 	cmplti	r2,r2,50
  800738:	1000081e 	bne	r2,zero,80075c <main+0x220>
					atrial_sense = true;
  80073c:	00800044 	movi	r2,1
  800740:	d0a72785 	stb	r2,-25442(gp)
					a_timer_count = 0;
  800744:	e03ff815 	stw	zero,-32(fp)
  800748:	00000406 	br	80075c <main+0x220>
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  80074c:	d0a72643 	ldbu	r2,-25447(gp)
  800750:	10803fcc 	andi	r2,r2,255
  800754:	10000126 	beq	r2,zero,80075c <main+0x220>
				SCCHARTS_Mode_Pacemaker();
  800758:	0800ebc0 	call	800ebc <SCCHARTS_Mode_Pacemaker>
			}

			if (a_is_paced) {
  80075c:	d0a726c3 	ldbu	r2,-25445(gp)
  800760:	10803fcc 	andi	r2,r2,255
  800764:	10000826 	beq	r2,zero,800788 <main+0x24c>
				led_pace_atrial_event = true;
  800768:	00800044 	movi	r2,1
  80076c:	d0a72885 	stb	r2,-25438(gp)
				atrial_sense_paced = true;
  800770:	00800044 	movi	r2,1
  800774:	d0a72805 	stb	r2,-25440(gp)
				printf("Atrial Sensed! - Paced!\n");
  800778:	01002074 	movhi	r4,129
  80077c:	2120b804 	addi	r4,r4,-32032
  800780:	0800fbc0 	call	800fbc <puts>
  800784:	00000606 	br	8007a0 <main+0x264>
			} else {
				led_sense_atrial_event = true;
  800788:	00800044 	movi	r2,1
  80078c:	d0a72905 	stb	r2,-25436(gp)
				atrial_sense_paced = false;
  800790:	d0272805 	stb	zero,-25440(gp)
				printf("Atrial Sensed! - Not Paced\n");
  800794:	01002074 	movhi	r4,129
  800798:	2120be04 	addi	r4,r4,-32008
  80079c:	0800fbc0 	call	800fbc <puts>
			}

			//atrial_sense = true;
			ventricular_sense = false;
  8007a0:	d02727c5 	stb	zero,-25441(gp)
			a_is_paced = false;
  8007a4:	d02726c5 	stb	zero,-25445(gp)
		}

		if (ventricular_event) {
  8007a8:	d0a72703 	ldbu	r2,-25444(gp)
  8007ac:	10803fcc 	andi	r2,r2,255
  8007b0:	10002326 	beq	r2,zero,800840 <main+0x304>
			ventricular_event = false;
  8007b4:	d0272705 	stb	zero,-25444(gp)

			// do stuff
			// If we are in C_Mode, restart timer
			if (implementation_mode == C_MODE) {
  8007b8:	d0a72643 	ldbu	r2,-25447(gp)
  8007bc:	1080005c 	xori	r2,r2,1
  8007c0:	10803fcc 	andi	r2,r2,255
  8007c4:	10000726 	beq	r2,zero,8007e4 <main+0x2a8>
				// Reset timer if v is sensed after VRP
				if (v_timer_count >= VRP_VALUE) {
  8007c8:	e0bfff17 	ldw	r2,-4(fp)
  8007cc:	10802590 	cmplti	r2,r2,150
  8007d0:	1000081e 	bne	r2,zero,8007f4 <main+0x2b8>
					ventricular_sense = true;
  8007d4:	00800044 	movi	r2,1
  8007d8:	d0a727c5 	stb	r2,-25441(gp)
					v_timer_count = 0;
  8007dc:	e03fff15 	stw	zero,-4(fp)
  8007e0:	00000406 	br	8007f4 <main+0x2b8>
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  8007e4:	d0a72643 	ldbu	r2,-25447(gp)
  8007e8:	10803fcc 	andi	r2,r2,255
  8007ec:	10000126 	beq	r2,zero,8007f4 <main+0x2b8>
				SCCHARTS_Mode_Pacemaker();
  8007f0:	0800ebc0 	call	800ebc <SCCHARTS_Mode_Pacemaker>
			}

			if (v_is_paced) {
  8007f4:	d0a72743 	ldbu	r2,-25443(gp)
  8007f8:	10803fcc 	andi	r2,r2,255
  8007fc:	10000826 	beq	r2,zero,800820 <main+0x2e4>
				led_pace_ventricular_event = true;
  800800:	00800044 	movi	r2,1
  800804:	d0a728c5 	stb	r2,-25437(gp)
				ventricular_sense_paced = true;
  800808:	00800044 	movi	r2,1
  80080c:	d0a72845 	stb	r2,-25439(gp)
				printf("Ventricle Sensed! -- Paced\n");
  800810:	01002074 	movhi	r4,129
  800814:	2120c504 	addi	r4,r4,-31980
  800818:	0800fbc0 	call	800fbc <puts>
  80081c:	00000606 	br	800838 <main+0x2fc>
			} else {
				led_sense_ventricular_event = true;
  800820:	00800044 	movi	r2,1
  800824:	d0a72945 	stb	r2,-25435(gp)
				ventricular_sense_paced = false;
  800828:	d0272845 	stb	zero,-25439(gp)
				printf("Ventricle Sensed! -- Not Paced\n");
  80082c:	01002074 	movhi	r4,129
  800830:	2120cc04 	addi	r4,r4,-31952
  800834:	0800fbc0 	call	800fbc <puts>
			}

			v_is_paced = false;
  800838:	d0272745 	stb	zero,-25443(gp)
			atrial_sense = false;
  80083c:	d0272785 	stb	zero,-25442(gp)
		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING

		// IMPLEMENTATION
		// IMPLEMENTATION

		if (implementation_mode == C_MODE) {
  800840:	d0a72643 	ldbu	r2,-25447(gp)
  800844:	1080005c 	xori	r2,r2,1
  800848:	10803fcc 	andi	r2,r2,255
  80084c:	10000626 	beq	r2,zero,800868 <main+0x32c>
			if (v_timer_count >= LRI_VALUE) {
				ventricular_sense = false;
			}
			*/

			C_Mode_Pacemaker(a_timer_count, v_timer_count);
  800850:	e0bff817 	ldw	r2,-32(fp)
  800854:	e0ffff17 	ldw	r3,-4(fp)
  800858:	180b883a 	mov	r5,r3
  80085c:	1009883a 	mov	r4,r2
  800860:	0800e140 	call	800e14 <C_Mode_Pacemaker>
  800864:	00000406 	br	800878 <main+0x33c>
			//atrial_sense_paced = false;
			//ventricular_sense_paced = false;

		} else if (implementation_mode == SCCHARTS_MODE) {
  800868:	d0a72643 	ldbu	r2,-25447(gp)
  80086c:	10803fcc 	andi	r2,r2,255
  800870:	10000126 	beq	r2,zero,800878 <main+0x33c>
			SCCHARTS_Mode_Pacemaker();
  800874:	0800ebc0 	call	800ebc <SCCHARTS_Mode_Pacemaker>
		// IMPLEMENTATION


		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		if (led_pace_atrial_event) {
  800878:	d0a72883 	ldbu	r2,-25438(gp)
  80087c:	10803fcc 	andi	r2,r2,255
  800880:	10002726 	beq	r2,zero,800920 <main+0x3e4>
			if (!a_pace_led_timer_already_started) {
  800884:	d0a72983 	ldbu	r2,-25434(gp)
  800888:	1080005c 	xori	r2,r2,1
  80088c:	10803fcc 	andi	r2,r2,255
  800890:	10000c26 	beq	r2,zero,8008c4 <main+0x388>
				alt_alarm_stop(&a_pace_led_timer);
  800894:	e0bfda04 	addi	r2,fp,-152
  800898:	1009883a 	mov	r4,r2
  80089c:	0804a400 	call	804a40 <alt_alarm_stop>
				alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  8008a0:	e0bfda04 	addi	r2,fp,-152
  8008a4:	000f883a 	mov	r7,zero
  8008a8:	01802034 	movhi	r6,128
  8008ac:	3180dc04 	addi	r6,r6,880
  8008b0:	01400644 	movi	r5,25
  8008b4:	1009883a 	mov	r4,r2
  8008b8:	0803f840 	call	803f84 <alt_alarm_start>
				a_pace_led_timer_already_started = true;
  8008bc:	00800044 	movi	r2,1
  8008c0:	d0a72985 	stb	r2,-25434(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  8008c4:	00804074 	movhi	r2,257
  8008c8:	10841c04 	addi	r2,r2,4208
  8008cc:	10800037 	ldwio	r2,0(r2)
  8008d0:	e0bfcd15 	stw	r2,-204(fp)


			// SET ALL BITS UP FROM LEDG4 TO LEDG7
			for (int i = LEDG4; i < LEDG7 + 1; i++) {
  8008d4:	00800104 	movi	r2,4
  8008d8:	e0bfce15 	stw	r2,-200(fp)
  8008dc:	00000906 	br	800904 <main+0x3c8>
				led_value = led_value |= (1<<i);
  8008e0:	00c00044 	movi	r3,1
  8008e4:	e0bfce17 	ldw	r2,-200(fp)
  8008e8:	1884983a 	sll	r2,r3,r2
  8008ec:	e0ffcd17 	ldw	r3,-204(fp)
  8008f0:	1884b03a 	or	r2,r3,r2
  8008f4:	e0bfcd15 	stw	r2,-204(fp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);


			// SET ALL BITS UP FROM LEDG4 TO LEDG7
			for (int i = LEDG4; i < LEDG7 + 1; i++) {
  8008f8:	e0bfce17 	ldw	r2,-200(fp)
  8008fc:	10800044 	addi	r2,r2,1
  800900:	e0bfce15 	stw	r2,-200(fp)
  800904:	e0bfce17 	ldw	r2,-200(fp)
  800908:	10800210 	cmplti	r2,r2,8
  80090c:	103ff41e 	bne	r2,zero,8008e0 <__alt_mem_onchip_mem+0xff7f88e0>
				led_value = led_value |= (1<<i);
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800910:	00804074 	movhi	r2,257
  800914:	10841c04 	addi	r2,r2,4208
  800918:	e0ffcd17 	ldw	r3,-204(fp)
  80091c:	10c00035 	stwio	r3,0(r2)

		}

		if (led_pace_ventricular_event) {
  800920:	d0a728c3 	ldbu	r2,-25437(gp)
  800924:	10803fcc 	andi	r2,r2,255
  800928:	10002626 	beq	r2,zero,8009c4 <main+0x488>
			if (!v_pace_led_timer_already_started) {
  80092c:	d0a729c3 	ldbu	r2,-25433(gp)
  800930:	1080005c 	xori	r2,r2,1
  800934:	10803fcc 	andi	r2,r2,255
  800938:	10000c26 	beq	r2,zero,80096c <main+0x430>
				alt_alarm_stop(&v_pace_led_timer);
  80093c:	e0bfe004 	addi	r2,fp,-128
  800940:	1009883a 	mov	r4,r2
  800944:	0804a400 	call	804a40 <alt_alarm_stop>
				alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  800948:	e0bfe004 	addi	r2,fp,-128
  80094c:	000f883a 	mov	r7,zero
  800950:	01802034 	movhi	r6,128
  800954:	3180e604 	addi	r6,r6,920
  800958:	01400644 	movi	r5,25
  80095c:	1009883a 	mov	r4,r2
  800960:	0803f840 	call	803f84 <alt_alarm_start>
				v_pace_led_timer_already_started = true;
  800964:	00800044 	movi	r2,1
  800968:	d0a729c5 	stb	r2,-25433(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  80096c:	00804074 	movhi	r2,257
  800970:	10841c04 	addi	r2,r2,4208
  800974:	10800037 	ldwio	r2,0(r2)
  800978:	e0bfcf15 	stw	r2,-196(fp)

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = LEDG0; i < LEDG3 + 1; i++) {
  80097c:	e03fd015 	stw	zero,-192(fp)
  800980:	00000906 	br	8009a8 <main+0x46c>
				led_value = led_value |= (1<<i);
  800984:	00c00044 	movi	r3,1
  800988:	e0bfd017 	ldw	r2,-192(fp)
  80098c:	1884983a 	sll	r2,r3,r2
  800990:	e0ffcf17 	ldw	r3,-196(fp)
  800994:	1884b03a 	or	r2,r3,r2
  800998:	e0bfcf15 	stw	r2,-196(fp)
				v_pace_led_timer_already_started = true;
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = LEDG0; i < LEDG3 + 1; i++) {
  80099c:	e0bfd017 	ldw	r2,-192(fp)
  8009a0:	10800044 	addi	r2,r2,1
  8009a4:	e0bfd015 	stw	r2,-192(fp)
  8009a8:	e0bfd017 	ldw	r2,-192(fp)
  8009ac:	10800110 	cmplti	r2,r2,4
  8009b0:	103ff41e 	bne	r2,zero,800984 <__alt_mem_onchip_mem+0xff7f8984>
				led_value = led_value |= (1<<i);
			}


			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  8009b4:	00804074 	movhi	r2,257
  8009b8:	10841c04 	addi	r2,r2,4208
  8009bc:	e0ffcf17 	ldw	r3,-196(fp)
  8009c0:	10c00035 	stwio	r3,0(r2)
		}
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==

		// SENSE LEDS == SENSE LEDS == SENSE LEDS == SENSE LEDS ==
		if (led_sense_atrial_event) {
  8009c4:	d0a72903 	ldbu	r2,-25436(gp)
  8009c8:	10803fcc 	andi	r2,r2,255
  8009cc:	10002726 	beq	r2,zero,800a6c <main+0x530>
			if (!a_sense_led_timer_already_started) {
  8009d0:	d0a72a03 	ldbu	r2,-25432(gp)
  8009d4:	1080005c 	xori	r2,r2,1
  8009d8:	10803fcc 	andi	r2,r2,255
  8009dc:	10000c26 	beq	r2,zero,800a10 <main+0x4d4>
				alt_alarm_stop(&a_sense_led_timer);
  8009e0:	e0bfe604 	addi	r2,fp,-104
  8009e4:	1009883a 	mov	r4,r2
  8009e8:	0804a400 	call	804a40 <alt_alarm_stop>
				alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  8009ec:	e0bfe604 	addi	r2,fp,-104
  8009f0:	000f883a 	mov	r7,zero
  8009f4:	01802034 	movhi	r6,128
  8009f8:	3180f004 	addi	r6,r6,960
  8009fc:	01400644 	movi	r5,25
  800a00:	1009883a 	mov	r4,r2
  800a04:	0803f840 	call	803f84 <alt_alarm_start>
				a_sense_led_timer_already_started = true;
  800a08:	00800044 	movi	r2,1
  800a0c:	d0a72a05 	stb	r2,-25432(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800a10:	00804074 	movhi	r2,257
  800a14:	10842004 	addi	r2,r2,4224
  800a18:	10800037 	ldwio	r2,0(r2)
  800a1c:	e0bfd115 	stw	r2,-188(fp)


			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = 9; i < 18; i++) {
  800a20:	00800244 	movi	r2,9
  800a24:	e0bfd215 	stw	r2,-184(fp)
  800a28:	00000906 	br	800a50 <main+0x514>
				led_value = led_value |= (1<<i);
  800a2c:	00c00044 	movi	r3,1
  800a30:	e0bfd217 	ldw	r2,-184(fp)
  800a34:	1884983a 	sll	r2,r3,r2
  800a38:	e0ffd117 	ldw	r3,-188(fp)
  800a3c:	1884b03a 	or	r2,r3,r2
  800a40:	e0bfd115 	stw	r2,-188(fp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);


			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = 9; i < 18; i++) {
  800a44:	e0bfd217 	ldw	r2,-184(fp)
  800a48:	10800044 	addi	r2,r2,1
  800a4c:	e0bfd215 	stw	r2,-184(fp)
  800a50:	e0bfd217 	ldw	r2,-184(fp)
  800a54:	10800490 	cmplti	r2,r2,18
  800a58:	103ff41e 	bne	r2,zero,800a2c <__alt_mem_onchip_mem+0xff7f8a2c>
				led_value = led_value |= (1<<i);
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800a5c:	00804074 	movhi	r2,257
  800a60:	10842004 	addi	r2,r2,4224
  800a64:	e0ffd117 	ldw	r3,-188(fp)
  800a68:	10c00035 	stwio	r3,0(r2)

		}

		if (led_sense_ventricular_event) {
  800a6c:	d0a72943 	ldbu	r2,-25435(gp)
  800a70:	10803fcc 	andi	r2,r2,255
  800a74:	10002626 	beq	r2,zero,800b10 <main+0x5d4>
			if (!v_sense_led_timer_already_started) {
  800a78:	d0a72a43 	ldbu	r2,-25431(gp)
  800a7c:	1080005c 	xori	r2,r2,1
  800a80:	10803fcc 	andi	r2,r2,255
  800a84:	10000c26 	beq	r2,zero,800ab8 <main+0x57c>
				alt_alarm_stop(&v_sense_led_timer);
  800a88:	e0bfec04 	addi	r2,fp,-80
  800a8c:	1009883a 	mov	r4,r2
  800a90:	0804a400 	call	804a40 <alt_alarm_stop>
				alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  800a94:	e0bfec04 	addi	r2,fp,-80
  800a98:	000f883a 	mov	r7,zero
  800a9c:	01802034 	movhi	r6,128
  800aa0:	3180fa04 	addi	r6,r6,1000
  800aa4:	01400644 	movi	r5,25
  800aa8:	1009883a 	mov	r4,r2
  800aac:	0803f840 	call	803f84 <alt_alarm_start>
				v_sense_led_timer_already_started = true;
  800ab0:	00800044 	movi	r2,1
  800ab4:	d0a72a45 	stb	r2,-25431(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800ab8:	00804074 	movhi	r2,257
  800abc:	10842004 	addi	r2,r2,4224
  800ac0:	10800037 	ldwio	r2,0(r2)
  800ac4:	e0bfd315 	stw	r2,-180(fp)

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = 0; i < 9; i++) {
  800ac8:	e03fd415 	stw	zero,-176(fp)
  800acc:	00000906 	br	800af4 <main+0x5b8>
				led_value = led_value |= (1<<i);
  800ad0:	00c00044 	movi	r3,1
  800ad4:	e0bfd417 	ldw	r2,-176(fp)
  800ad8:	1884983a 	sll	r2,r3,r2
  800adc:	e0ffd317 	ldw	r3,-180(fp)
  800ae0:	1884b03a 	or	r2,r3,r2
  800ae4:	e0bfd315 	stw	r2,-180(fp)
				v_sense_led_timer_already_started = true;
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = 0; i < 9; i++) {
  800ae8:	e0bfd417 	ldw	r2,-176(fp)
  800aec:	10800044 	addi	r2,r2,1
  800af0:	e0bfd415 	stw	r2,-176(fp)
  800af4:	e0bfd417 	ldw	r2,-176(fp)
  800af8:	10800250 	cmplti	r2,r2,9
  800afc:	103ff41e 	bne	r2,zero,800ad0 <__alt_mem_onchip_mem+0xff7f8ad0>
				led_value = led_value |= (1<<i);
			}


			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800b00:	00804074 	movhi	r2,257
  800b04:	10842004 	addi	r2,r2,4224
  800b08:	e0ffd317 	ldw	r3,-180(fp)
  800b0c:	10c00035 	stwio	r3,0(r2)

		}

		clear_pace_led_events();
  800b10:	0800c0c0 	call	800c0c <clear_pace_led_events>
		clear_sense_led_events();
  800b14:	0800d100 	call	800d10 <clear_sense_led_events>
		//clear_heart_flags();
	}
  800b18:	003ee306 	br	8006a8 <__alt_mem_onchip_mem+0xff7f86a8>

00800b1c <send_atrial_event>:
	printf("Exiting Loop.\n");
	return 0;
}

void send_atrial_event(bool isThisEventPaced) {
  800b1c:	defffd04 	addi	sp,sp,-12
  800b20:	df000215 	stw	fp,8(sp)
  800b24:	df000204 	addi	fp,sp,8
  800b28:	2005883a 	mov	r2,r4
  800b2c:	e0bfff05 	stb	r2,-4(fp)
	if (isThisEventPaced) {
  800b30:	e0bfff03 	ldbu	r2,-4(fp)
  800b34:	10000926 	beq	r2,zero,800b5c <send_atrial_event+0x40>
		a_is_paced = true;
  800b38:	00800044 	movi	r2,1
  800b3c:	d0a726c5 	stb	r2,-25445(gp)
		char atrial_char = 'A';
  800b40:	00801044 	movi	r2,65
  800b44:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, atrial_char);
  800b48:	e0fffe07 	ldb	r3,-8(fp)
  800b4c:	00804074 	movhi	r2,257
  800b50:	10841104 	addi	r2,r2,4164
  800b54:	10c00035 	stwio	r3,0(r2)
  800b58:	00000106 	br	800b60 <send_atrial_event+0x44>
	} else {
		a_is_paced = false;
  800b5c:	d02726c5 	stb	zero,-25445(gp)
	}
	atrial_event = true;
  800b60:	00800044 	movi	r2,1
  800b64:	d0a72685 	stb	r2,-25446(gp)
	//printf("Atrial Event Flagged!\n");
}
  800b68:	0001883a 	nop
  800b6c:	e037883a 	mov	sp,fp
  800b70:	df000017 	ldw	fp,0(sp)
  800b74:	dec00104 	addi	sp,sp,4
  800b78:	f800283a 	ret

00800b7c <send_ventricular_event>:

void send_ventricular_event(bool isThisEventPaced) {
  800b7c:	defffd04 	addi	sp,sp,-12
  800b80:	df000215 	stw	fp,8(sp)
  800b84:	df000204 	addi	fp,sp,8
  800b88:	2005883a 	mov	r2,r4
  800b8c:	e0bfff05 	stb	r2,-4(fp)
	if (isThisEventPaced) {
  800b90:	e0bfff03 	ldbu	r2,-4(fp)
  800b94:	10000926 	beq	r2,zero,800bbc <send_ventricular_event+0x40>
		v_is_paced = true;
  800b98:	00800044 	movi	r2,1
  800b9c:	d0a72745 	stb	r2,-25443(gp)
		char ventricular_char = 'V';
  800ba0:	00801584 	movi	r2,86
  800ba4:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, ventricular_char);
  800ba8:	e0fffe07 	ldb	r3,-8(fp)
  800bac:	00804074 	movhi	r2,257
  800bb0:	10841104 	addi	r2,r2,4164
  800bb4:	10c00035 	stwio	r3,0(r2)
  800bb8:	00000106 	br	800bc0 <send_ventricular_event+0x44>
	} else {
		v_is_paced = false;
  800bbc:	d0272745 	stb	zero,-25443(gp)
	}
	ventricular_event = true;
  800bc0:	00800044 	movi	r2,1
  800bc4:	d0a72705 	stb	r2,-25444(gp)
	//printf("Ventricular Event Flagged!\n");
}
  800bc8:	0001883a 	nop
  800bcc:	e037883a 	mov	sp,fp
  800bd0:	df000017 	ldw	fp,0(sp)
  800bd4:	dec00104 	addi	sp,sp,4
  800bd8:	f800283a 	ret

00800bdc <clear_heart_flags>:

void clear_heart_flags() {
  800bdc:	deffff04 	addi	sp,sp,-4
  800be0:	df000015 	stw	fp,0(sp)
  800be4:	d839883a 	mov	fp,sp
	atrial_event = false;
  800be8:	d0272685 	stb	zero,-25446(gp)
	ventricular_event = false;
  800bec:	d0272705 	stb	zero,-25444(gp)
	a_is_paced = false;
  800bf0:	d02726c5 	stb	zero,-25445(gp)
	v_is_paced = false;
  800bf4:	d0272745 	stb	zero,-25443(gp)
}
  800bf8:	0001883a 	nop
  800bfc:	e037883a 	mov	sp,fp
  800c00:	df000017 	ldw	fp,0(sp)
  800c04:	dec00104 	addi	sp,sp,4
  800c08:	f800283a 	ret

00800c0c <clear_pace_led_events>:

void clear_pace_led_events() {
  800c0c:	defffb04 	addi	sp,sp,-20
  800c10:	df000415 	stw	fp,16(sp)
  800c14:	df000404 	addi	fp,sp,16
	if (!led_pace_atrial_event) {
  800c18:	d0a72883 	ldbu	r2,-25438(gp)
  800c1c:	1080005c 	xori	r2,r2,1
  800c20:	10803fcc 	andi	r2,r2,255
  800c24:	10001926 	beq	r2,zero,800c8c <clear_pace_led_events+0x80>
		a_pace_led_timer_already_started = false;
  800c28:	d0272985 	stb	zero,-25434(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800c2c:	00804074 	movhi	r2,257
  800c30:	10841c04 	addi	r2,r2,4208
  800c34:	10800037 	ldwio	r2,0(r2)
  800c38:	e0bffc15 	stw	r2,-16(fp)


		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800c3c:	00800104 	movi	r2,4
  800c40:	e0bffd15 	stw	r2,-12(fp)
  800c44:	00000a06 	br	800c70 <clear_pace_led_events+0x64>
			led_value = led_value &= ~(1<<i);
  800c48:	00c00044 	movi	r3,1
  800c4c:	e0bffd17 	ldw	r2,-12(fp)
  800c50:	1884983a 	sll	r2,r3,r2
  800c54:	0084303a 	nor	r2,zero,r2
  800c58:	e0fffc17 	ldw	r3,-16(fp)
  800c5c:	1884703a 	and	r2,r3,r2
  800c60:	e0bffc15 	stw	r2,-16(fp)
		a_pace_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);


		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800c64:	e0bffd17 	ldw	r2,-12(fp)
  800c68:	10800044 	addi	r2,r2,1
  800c6c:	e0bffd15 	stw	r2,-12(fp)
  800c70:	e0bffd17 	ldw	r2,-12(fp)
  800c74:	10800210 	cmplti	r2,r2,8
  800c78:	103ff31e 	bne	r2,zero,800c48 <__alt_mem_onchip_mem+0xff7f8c48>
			led_value = led_value &= ~(1<<i);
		}


		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800c7c:	00804074 	movhi	r2,257
  800c80:	10841c04 	addi	r2,r2,4208
  800c84:	e0fffc17 	ldw	r3,-16(fp)
  800c88:	10c00035 	stwio	r3,0(r2)
	}

	if (!led_pace_ventricular_event) {
  800c8c:	d0a728c3 	ldbu	r2,-25437(gp)
  800c90:	1080005c 	xori	r2,r2,1
  800c94:	10803fcc 	andi	r2,r2,255
  800c98:	10001826 	beq	r2,zero,800cfc <clear_pace_led_events+0xf0>
		v_pace_led_timer_already_started = false;
  800c9c:	d02729c5 	stb	zero,-25433(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800ca0:	00804074 	movhi	r2,257
  800ca4:	10841c04 	addi	r2,r2,4208
  800ca8:	10800037 	ldwio	r2,0(r2)
  800cac:	e0bffe15 	stw	r2,-8(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800cb0:	e03fff15 	stw	zero,-4(fp)
  800cb4:	00000a06 	br	800ce0 <clear_pace_led_events+0xd4>
			led_value = led_value &= ~(1<<i);
  800cb8:	00c00044 	movi	r3,1
  800cbc:	e0bfff17 	ldw	r2,-4(fp)
  800cc0:	1884983a 	sll	r2,r3,r2
  800cc4:	0084303a 	nor	r2,zero,r2
  800cc8:	e0fffe17 	ldw	r3,-8(fp)
  800ccc:	1884703a 	and	r2,r3,r2
  800cd0:	e0bffe15 	stw	r2,-8(fp)
	if (!led_pace_ventricular_event) {
		v_pace_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800cd4:	e0bfff17 	ldw	r2,-4(fp)
  800cd8:	10800044 	addi	r2,r2,1
  800cdc:	e0bfff15 	stw	r2,-4(fp)
  800ce0:	e0bfff17 	ldw	r2,-4(fp)
  800ce4:	10800110 	cmplti	r2,r2,4
  800ce8:	103ff31e 	bne	r2,zero,800cb8 <__alt_mem_onchip_mem+0xff7f8cb8>
			led_value = led_value &= ~(1<<i);
		}
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800cec:	00804074 	movhi	r2,257
  800cf0:	10841c04 	addi	r2,r2,4208
  800cf4:	e0fffe17 	ldw	r3,-8(fp)
  800cf8:	10c00035 	stwio	r3,0(r2)
	}
}
  800cfc:	0001883a 	nop
  800d00:	e037883a 	mov	sp,fp
  800d04:	df000017 	ldw	fp,0(sp)
  800d08:	dec00104 	addi	sp,sp,4
  800d0c:	f800283a 	ret

00800d10 <clear_sense_led_events>:

void clear_sense_led_events() {
  800d10:	defffb04 	addi	sp,sp,-20
  800d14:	df000415 	stw	fp,16(sp)
  800d18:	df000404 	addi	fp,sp,16
	if (!led_sense_atrial_event) {
  800d1c:	d0a72903 	ldbu	r2,-25436(gp)
  800d20:	1080005c 	xori	r2,r2,1
  800d24:	10803fcc 	andi	r2,r2,255
  800d28:	10001926 	beq	r2,zero,800d90 <clear_sense_led_events+0x80>
		a_sense_led_timer_already_started = false;
  800d2c:	d0272a05 	stb	zero,-25432(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800d30:	00804074 	movhi	r2,257
  800d34:	10842004 	addi	r2,r2,4224
  800d38:	10800037 	ldwio	r2,0(r2)
  800d3c:	e0bffc15 	stw	r2,-16(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 9; i < 18; i++) {
  800d40:	00800244 	movi	r2,9
  800d44:	e0bffd15 	stw	r2,-12(fp)
  800d48:	00000a06 	br	800d74 <clear_sense_led_events+0x64>
			led_value = led_value &= ~(1<<i);
  800d4c:	00c00044 	movi	r3,1
  800d50:	e0bffd17 	ldw	r2,-12(fp)
  800d54:	1884983a 	sll	r2,r3,r2
  800d58:	0084303a 	nor	r2,zero,r2
  800d5c:	e0fffc17 	ldw	r3,-16(fp)
  800d60:	1884703a 	and	r2,r3,r2
  800d64:	e0bffc15 	stw	r2,-16(fp)
	if (!led_sense_atrial_event) {
		a_sense_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 9; i < 18; i++) {
  800d68:	e0bffd17 	ldw	r2,-12(fp)
  800d6c:	10800044 	addi	r2,r2,1
  800d70:	e0bffd15 	stw	r2,-12(fp)
  800d74:	e0bffd17 	ldw	r2,-12(fp)
  800d78:	10800490 	cmplti	r2,r2,18
  800d7c:	103ff31e 	bne	r2,zero,800d4c <__alt_mem_onchip_mem+0xff7f8d4c>
			led_value = led_value &= ~(1<<i);
		}

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800d80:	00804074 	movhi	r2,257
  800d84:	10842004 	addi	r2,r2,4224
  800d88:	e0fffc17 	ldw	r3,-16(fp)
  800d8c:	10c00035 	stwio	r3,0(r2)
	}

	if (!led_sense_ventricular_event) {
  800d90:	d0a72943 	ldbu	r2,-25435(gp)
  800d94:	1080005c 	xori	r2,r2,1
  800d98:	10803fcc 	andi	r2,r2,255
  800d9c:	10001826 	beq	r2,zero,800e00 <clear_sense_led_events+0xf0>
		v_sense_led_timer_already_started = false;
  800da0:	d0272a45 	stb	zero,-25431(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800da4:	00804074 	movhi	r2,257
  800da8:	10842004 	addi	r2,r2,4224
  800dac:	10800037 	ldwio	r2,0(r2)
  800db0:	e0bffe15 	stw	r2,-8(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 0; i < 9; i++) {
  800db4:	e03fff15 	stw	zero,-4(fp)
  800db8:	00000a06 	br	800de4 <clear_sense_led_events+0xd4>
			led_value = led_value &= ~(1<<i);
  800dbc:	00c00044 	movi	r3,1
  800dc0:	e0bfff17 	ldw	r2,-4(fp)
  800dc4:	1884983a 	sll	r2,r3,r2
  800dc8:	0084303a 	nor	r2,zero,r2
  800dcc:	e0fffe17 	ldw	r3,-8(fp)
  800dd0:	1884703a 	and	r2,r3,r2
  800dd4:	e0bffe15 	stw	r2,-8(fp)
	if (!led_sense_ventricular_event) {
		v_sense_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 0; i < 9; i++) {
  800dd8:	e0bfff17 	ldw	r2,-4(fp)
  800ddc:	10800044 	addi	r2,r2,1
  800de0:	e0bfff15 	stw	r2,-4(fp)
  800de4:	e0bfff17 	ldw	r2,-4(fp)
  800de8:	10800250 	cmplti	r2,r2,9
  800dec:	103ff31e 	bne	r2,zero,800dbc <__alt_mem_onchip_mem+0xff7f8dbc>
			led_value = led_value &= ~(1<<i);
		}

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800df0:	00804074 	movhi	r2,257
  800df4:	10842004 	addi	r2,r2,4224
  800df8:	e0fffe17 	ldw	r3,-8(fp)
  800dfc:	10c00035 	stwio	r3,0(r2)
	}
}
  800e00:	0001883a 	nop
  800e04:	e037883a 	mov	sp,fp
  800e08:	df000017 	ldw	fp,0(sp)
  800e0c:	dec00104 	addi	sp,sp,4
  800e10:	f800283a 	ret

00800e14 <C_Mode_Pacemaker>:

void C_Mode_Pacemaker(int a_timer_count, int v_timer_count) {
  800e14:	defffc04 	addi	sp,sp,-16
  800e18:	dfc00315 	stw	ra,12(sp)
  800e1c:	df000215 	stw	fp,8(sp)
  800e20:	df000204 	addi	fp,sp,8
  800e24:	e13ffe15 	stw	r4,-8(fp)
  800e28:	e17fff15 	stw	r5,-4(fp)
	// AEvents Logic
	//int a_count = (int)a_timer_count;

	// pace ventricular event if
	if (v_timer_count >= AEI_VALUE && !atrial_sense) {
  800e2c:	e0bfff17 	ldw	r2,-4(fp)
  800e30:	1080c810 	cmplti	r2,r2,800
  800e34:	1000061e 	bne	r2,zero,800e50 <C_Mode_Pacemaker+0x3c>
  800e38:	d0a72783 	ldbu	r2,-25442(gp)
  800e3c:	1080005c 	xori	r2,r2,1
  800e40:	10803fcc 	andi	r2,r2,255
  800e44:	10000226 	beq	r2,zero,800e50 <C_Mode_Pacemaker+0x3c>
		// send atrial event
		send_atrial_event(true);
  800e48:	01000044 	movi	r4,1
  800e4c:	0800b1c0 	call	800b1c <send_atrial_event>
	}

	// Do not pace ventricle until URI
	if (v_timer_count >= URI_VALUE) {
  800e50:	e0bfff17 	ldw	r2,-4(fp)
  800e54:	1080e110 	cmplti	r2,r2,900
  800e58:	1000121e 	bne	r2,zero,800ea4 <C_Mode_Pacemaker+0x90>
		// Ignore any ventricular events until VRP
		// Pace ventricular if above AVI
		if (a_timer_count >= AVI_VALUE && !ventricular_sense) {
  800e5c:	e0bffe17 	ldw	r2,-8(fp)
  800e60:	10804b10 	cmplti	r2,r2,300
  800e64:	1000061e 	bne	r2,zero,800e80 <C_Mode_Pacemaker+0x6c>
  800e68:	d0a727c3 	ldbu	r2,-25441(gp)
  800e6c:	1080005c 	xori	r2,r2,1
  800e70:	10803fcc 	andi	r2,r2,255
  800e74:	10000226 	beq	r2,zero,800e80 <C_Mode_Pacemaker+0x6c>
			send_ventricular_event(true);
  800e78:	01000044 	movi	r4,1
  800e7c:	0800b7c0 	call	800b7c <send_ventricular_event>
		}

		// Pace ventricular if LRI has been hit
		if (v_timer_count >= LRI_VALUE && !ventricular_sense) {
  800e80:	e0bfff17 	ldw	r2,-4(fp)
  800e84:	1080ed90 	cmplti	r2,r2,950
  800e88:	1000061e 	bne	r2,zero,800ea4 <C_Mode_Pacemaker+0x90>
  800e8c:	d0a727c3 	ldbu	r2,-25441(gp)
  800e90:	1080005c 	xori	r2,r2,1
  800e94:	10803fcc 	andi	r2,r2,255
  800e98:	10000226 	beq	r2,zero,800ea4 <C_Mode_Pacemaker+0x90>
			// Send Ventricular event
			send_ventricular_event(true);
  800e9c:	01000044 	movi	r4,1
  800ea0:	0800b7c0 	call	800b7c <send_ventricular_event>
		}


	}
}
  800ea4:	0001883a 	nop
  800ea8:	e037883a 	mov	sp,fp
  800eac:	dfc00117 	ldw	ra,4(sp)
  800eb0:	df000017 	ldw	fp,0(sp)
  800eb4:	dec00204 	addi	sp,sp,8
  800eb8:	f800283a 	ret

00800ebc <SCCHARTS_Mode_Pacemaker>:

void SCCHARTS_Mode_Pacemaker() {
  800ebc:	deffff04 	addi	sp,sp,-4
  800ec0:	df000015 	stw	fp,0(sp)
  800ec4:	d839883a 	mov	fp,sp

}
  800ec8:	0001883a 	nop
  800ecc:	e037883a 	mov	sp,fp
  800ed0:	df000017 	ldw	fp,0(sp)
  800ed4:	dec00104 	addi	sp,sp,4
  800ed8:	f800283a 	ret

00800edc <_putchar_r>:
  800edc:	21800217 	ldw	r6,8(r4)
  800ee0:	08027081 	jmpi	802708 <_putc_r>

00800ee4 <putchar>:
  800ee4:	00802074 	movhi	r2,129
  800ee8:	10a88e04 	addi	r2,r2,-24008
  800eec:	200b883a 	mov	r5,r4
  800ef0:	11000017 	ldw	r4,0(r2)
  800ef4:	21800217 	ldw	r6,8(r4)
  800ef8:	08027081 	jmpi	802708 <_putc_r>

00800efc <_puts_r>:
  800efc:	defff604 	addi	sp,sp,-40
  800f00:	dc000715 	stw	r16,28(sp)
  800f04:	2021883a 	mov	r16,r4
  800f08:	2809883a 	mov	r4,r5
  800f0c:	dc400815 	stw	r17,32(sp)
  800f10:	dfc00915 	stw	ra,36(sp)
  800f14:	2823883a 	mov	r17,r5
  800f18:	0800fd00 	call	800fd0 <strlen>
  800f1c:	10c00044 	addi	r3,r2,1
  800f20:	d8800115 	stw	r2,4(sp)
  800f24:	00802074 	movhi	r2,129
  800f28:	10a0d404 	addi	r2,r2,-31920
  800f2c:	d8800215 	stw	r2,8(sp)
  800f30:	00800044 	movi	r2,1
  800f34:	d8800315 	stw	r2,12(sp)
  800f38:	00800084 	movi	r2,2
  800f3c:	dc400015 	stw	r17,0(sp)
  800f40:	d8c00615 	stw	r3,24(sp)
  800f44:	dec00415 	stw	sp,16(sp)
  800f48:	d8800515 	stw	r2,20(sp)
  800f4c:	80000226 	beq	r16,zero,800f58 <_puts_r+0x5c>
  800f50:	80800e17 	ldw	r2,56(r16)
  800f54:	10001426 	beq	r2,zero,800fa8 <_puts_r+0xac>
  800f58:	81400217 	ldw	r5,8(r16)
  800f5c:	2880030b 	ldhu	r2,12(r5)
  800f60:	10c8000c 	andi	r3,r2,8192
  800f64:	1800061e 	bne	r3,zero,800f80 <_puts_r+0x84>
  800f68:	29001917 	ldw	r4,100(r5)
  800f6c:	00f7ffc4 	movi	r3,-8193
  800f70:	10880014 	ori	r2,r2,8192
  800f74:	20c6703a 	and	r3,r4,r3
  800f78:	2880030d 	sth	r2,12(r5)
  800f7c:	28c01915 	stw	r3,100(r5)
  800f80:	d9800404 	addi	r6,sp,16
  800f84:	8009883a 	mov	r4,r16
  800f88:	08014080 	call	801408 <__sfvwrite_r>
  800f8c:	1000091e 	bne	r2,zero,800fb4 <_puts_r+0xb8>
  800f90:	00800284 	movi	r2,10
  800f94:	dfc00917 	ldw	ra,36(sp)
  800f98:	dc400817 	ldw	r17,32(sp)
  800f9c:	dc000717 	ldw	r16,28(sp)
  800fa0:	dec00a04 	addi	sp,sp,40
  800fa4:	f800283a 	ret
  800fa8:	8009883a 	mov	r4,r16
  800fac:	08013b80 	call	8013b8 <__sinit>
  800fb0:	003fe906 	br	800f58 <__alt_mem_onchip_mem+0xff7f8f58>
  800fb4:	00bfffc4 	movi	r2,-1
  800fb8:	003ff606 	br	800f94 <__alt_mem_onchip_mem+0xff7f8f94>

00800fbc <puts>:
  800fbc:	00802074 	movhi	r2,129
  800fc0:	10a88e04 	addi	r2,r2,-24008
  800fc4:	200b883a 	mov	r5,r4
  800fc8:	11000017 	ldw	r4,0(r2)
  800fcc:	0800efc1 	jmpi	800efc <_puts_r>

00800fd0 <strlen>:
  800fd0:	208000cc 	andi	r2,r4,3
  800fd4:	10002026 	beq	r2,zero,801058 <strlen+0x88>
  800fd8:	20800007 	ldb	r2,0(r4)
  800fdc:	10002026 	beq	r2,zero,801060 <strlen+0x90>
  800fe0:	2005883a 	mov	r2,r4
  800fe4:	00000206 	br	800ff0 <strlen+0x20>
  800fe8:	10c00007 	ldb	r3,0(r2)
  800fec:	18001826 	beq	r3,zero,801050 <strlen+0x80>
  800ff0:	10800044 	addi	r2,r2,1
  800ff4:	10c000cc 	andi	r3,r2,3
  800ff8:	183ffb1e 	bne	r3,zero,800fe8 <__alt_mem_onchip_mem+0xff7f8fe8>
  800ffc:	10c00017 	ldw	r3,0(r2)
  801000:	01ffbff4 	movhi	r7,65279
  801004:	39ffbfc4 	addi	r7,r7,-257
  801008:	00ca303a 	nor	r5,zero,r3
  80100c:	01a02074 	movhi	r6,32897
  801010:	19c7883a 	add	r3,r3,r7
  801014:	31a02004 	addi	r6,r6,-32640
  801018:	1946703a 	and	r3,r3,r5
  80101c:	1986703a 	and	r3,r3,r6
  801020:	1800091e 	bne	r3,zero,801048 <strlen+0x78>
  801024:	10800104 	addi	r2,r2,4
  801028:	10c00017 	ldw	r3,0(r2)
  80102c:	19cb883a 	add	r5,r3,r7
  801030:	00c6303a 	nor	r3,zero,r3
  801034:	28c6703a 	and	r3,r5,r3
  801038:	1986703a 	and	r3,r3,r6
  80103c:	183ff926 	beq	r3,zero,801024 <__alt_mem_onchip_mem+0xff7f9024>
  801040:	00000106 	br	801048 <strlen+0x78>
  801044:	10800044 	addi	r2,r2,1
  801048:	10c00007 	ldb	r3,0(r2)
  80104c:	183ffd1e 	bne	r3,zero,801044 <__alt_mem_onchip_mem+0xff7f9044>
  801050:	1105c83a 	sub	r2,r2,r4
  801054:	f800283a 	ret
  801058:	2005883a 	mov	r2,r4
  80105c:	003fe706 	br	800ffc <__alt_mem_onchip_mem+0xff7f8ffc>
  801060:	0005883a 	mov	r2,zero
  801064:	f800283a 	ret

00801068 <__fp_unlock>:
  801068:	0005883a 	mov	r2,zero
  80106c:	f800283a 	ret

00801070 <_cleanup_r>:
  801070:	01402034 	movhi	r5,128
  801074:	294cb104 	addi	r5,r5,12996
  801078:	08019881 	jmpi	801988 <_fwalk_reent>

0080107c <__sinit.part.1>:
  80107c:	defff704 	addi	sp,sp,-36
  801080:	00c02034 	movhi	r3,128
  801084:	dfc00815 	stw	ra,32(sp)
  801088:	ddc00715 	stw	r23,28(sp)
  80108c:	dd800615 	stw	r22,24(sp)
  801090:	dd400515 	stw	r21,20(sp)
  801094:	dd000415 	stw	r20,16(sp)
  801098:	dcc00315 	stw	r19,12(sp)
  80109c:	dc800215 	stw	r18,8(sp)
  8010a0:	dc400115 	stw	r17,4(sp)
  8010a4:	dc000015 	stw	r16,0(sp)
  8010a8:	18c41c04 	addi	r3,r3,4208
  8010ac:	24000117 	ldw	r16,4(r4)
  8010b0:	20c00f15 	stw	r3,60(r4)
  8010b4:	2080bb04 	addi	r2,r4,748
  8010b8:	00c000c4 	movi	r3,3
  8010bc:	20c0b915 	stw	r3,740(r4)
  8010c0:	2080ba15 	stw	r2,744(r4)
  8010c4:	2000b815 	stw	zero,736(r4)
  8010c8:	05c00204 	movi	r23,8
  8010cc:	00800104 	movi	r2,4
  8010d0:	2025883a 	mov	r18,r4
  8010d4:	b80d883a 	mov	r6,r23
  8010d8:	81001704 	addi	r4,r16,92
  8010dc:	000b883a 	mov	r5,zero
  8010e0:	80000015 	stw	zero,0(r16)
  8010e4:	80000115 	stw	zero,4(r16)
  8010e8:	80000215 	stw	zero,8(r16)
  8010ec:	8080030d 	sth	r2,12(r16)
  8010f0:	80001915 	stw	zero,100(r16)
  8010f4:	8000038d 	sth	zero,14(r16)
  8010f8:	80000415 	stw	zero,16(r16)
  8010fc:	80000515 	stw	zero,20(r16)
  801100:	80000615 	stw	zero,24(r16)
  801104:	08025e00 	call	8025e0 <memset>
  801108:	05802034 	movhi	r22,128
  80110c:	94400217 	ldw	r17,8(r18)
  801110:	05402034 	movhi	r21,128
  801114:	05002034 	movhi	r20,128
  801118:	04c02034 	movhi	r19,128
  80111c:	b58b8a04 	addi	r22,r22,11816
  801120:	ad4ba104 	addi	r21,r21,11908
  801124:	a50bc004 	addi	r20,r20,12032
  801128:	9ccbd704 	addi	r19,r19,12124
  80112c:	85800815 	stw	r22,32(r16)
  801130:	85400915 	stw	r21,36(r16)
  801134:	85000a15 	stw	r20,40(r16)
  801138:	84c00b15 	stw	r19,44(r16)
  80113c:	84000715 	stw	r16,28(r16)
  801140:	00800284 	movi	r2,10
  801144:	8880030d 	sth	r2,12(r17)
  801148:	00800044 	movi	r2,1
  80114c:	b80d883a 	mov	r6,r23
  801150:	89001704 	addi	r4,r17,92
  801154:	000b883a 	mov	r5,zero
  801158:	88000015 	stw	zero,0(r17)
  80115c:	88000115 	stw	zero,4(r17)
  801160:	88000215 	stw	zero,8(r17)
  801164:	88001915 	stw	zero,100(r17)
  801168:	8880038d 	sth	r2,14(r17)
  80116c:	88000415 	stw	zero,16(r17)
  801170:	88000515 	stw	zero,20(r17)
  801174:	88000615 	stw	zero,24(r17)
  801178:	08025e00 	call	8025e0 <memset>
  80117c:	94000317 	ldw	r16,12(r18)
  801180:	00800484 	movi	r2,18
  801184:	8c400715 	stw	r17,28(r17)
  801188:	8d800815 	stw	r22,32(r17)
  80118c:	8d400915 	stw	r21,36(r17)
  801190:	8d000a15 	stw	r20,40(r17)
  801194:	8cc00b15 	stw	r19,44(r17)
  801198:	8080030d 	sth	r2,12(r16)
  80119c:	00800084 	movi	r2,2
  8011a0:	80000015 	stw	zero,0(r16)
  8011a4:	80000115 	stw	zero,4(r16)
  8011a8:	80000215 	stw	zero,8(r16)
  8011ac:	80001915 	stw	zero,100(r16)
  8011b0:	8080038d 	sth	r2,14(r16)
  8011b4:	80000415 	stw	zero,16(r16)
  8011b8:	80000515 	stw	zero,20(r16)
  8011bc:	80000615 	stw	zero,24(r16)
  8011c0:	b80d883a 	mov	r6,r23
  8011c4:	000b883a 	mov	r5,zero
  8011c8:	81001704 	addi	r4,r16,92
  8011cc:	08025e00 	call	8025e0 <memset>
  8011d0:	00800044 	movi	r2,1
  8011d4:	84000715 	stw	r16,28(r16)
  8011d8:	85800815 	stw	r22,32(r16)
  8011dc:	85400915 	stw	r21,36(r16)
  8011e0:	85000a15 	stw	r20,40(r16)
  8011e4:	84c00b15 	stw	r19,44(r16)
  8011e8:	90800e15 	stw	r2,56(r18)
  8011ec:	dfc00817 	ldw	ra,32(sp)
  8011f0:	ddc00717 	ldw	r23,28(sp)
  8011f4:	dd800617 	ldw	r22,24(sp)
  8011f8:	dd400517 	ldw	r21,20(sp)
  8011fc:	dd000417 	ldw	r20,16(sp)
  801200:	dcc00317 	ldw	r19,12(sp)
  801204:	dc800217 	ldw	r18,8(sp)
  801208:	dc400117 	ldw	r17,4(sp)
  80120c:	dc000017 	ldw	r16,0(sp)
  801210:	dec00904 	addi	sp,sp,36
  801214:	f800283a 	ret

00801218 <__fp_lock>:
  801218:	0005883a 	mov	r2,zero
  80121c:	f800283a 	ret

00801220 <__sfmoreglue>:
  801220:	defffc04 	addi	sp,sp,-16
  801224:	dc400115 	stw	r17,4(sp)
  801228:	2c7fffc4 	addi	r17,r5,-1
  80122c:	8c401a24 	muli	r17,r17,104
  801230:	dc800215 	stw	r18,8(sp)
  801234:	2825883a 	mov	r18,r5
  801238:	89401d04 	addi	r5,r17,116
  80123c:	dc000015 	stw	r16,0(sp)
  801240:	dfc00315 	stw	ra,12(sp)
  801244:	0801a4c0 	call	801a4c <_malloc_r>
  801248:	1021883a 	mov	r16,r2
  80124c:	10000726 	beq	r2,zero,80126c <__sfmoreglue+0x4c>
  801250:	11000304 	addi	r4,r2,12
  801254:	10000015 	stw	zero,0(r2)
  801258:	14800115 	stw	r18,4(r2)
  80125c:	11000215 	stw	r4,8(r2)
  801260:	89801a04 	addi	r6,r17,104
  801264:	000b883a 	mov	r5,zero
  801268:	08025e00 	call	8025e0 <memset>
  80126c:	8005883a 	mov	r2,r16
  801270:	dfc00317 	ldw	ra,12(sp)
  801274:	dc800217 	ldw	r18,8(sp)
  801278:	dc400117 	ldw	r17,4(sp)
  80127c:	dc000017 	ldw	r16,0(sp)
  801280:	dec00404 	addi	sp,sp,16
  801284:	f800283a 	ret

00801288 <__sfp>:
  801288:	defffb04 	addi	sp,sp,-20
  80128c:	dc000015 	stw	r16,0(sp)
  801290:	04002074 	movhi	r16,129
  801294:	84288d04 	addi	r16,r16,-24012
  801298:	dcc00315 	stw	r19,12(sp)
  80129c:	2027883a 	mov	r19,r4
  8012a0:	81000017 	ldw	r4,0(r16)
  8012a4:	dfc00415 	stw	ra,16(sp)
  8012a8:	dc800215 	stw	r18,8(sp)
  8012ac:	20800e17 	ldw	r2,56(r4)
  8012b0:	dc400115 	stw	r17,4(sp)
  8012b4:	1000021e 	bne	r2,zero,8012c0 <__sfp+0x38>
  8012b8:	080107c0 	call	80107c <__sinit.part.1>
  8012bc:	81000017 	ldw	r4,0(r16)
  8012c0:	2480b804 	addi	r18,r4,736
  8012c4:	047fffc4 	movi	r17,-1
  8012c8:	91000117 	ldw	r4,4(r18)
  8012cc:	94000217 	ldw	r16,8(r18)
  8012d0:	213fffc4 	addi	r4,r4,-1
  8012d4:	20000a16 	blt	r4,zero,801300 <__sfp+0x78>
  8012d8:	8080030f 	ldh	r2,12(r16)
  8012dc:	10000c26 	beq	r2,zero,801310 <__sfp+0x88>
  8012e0:	80c01d04 	addi	r3,r16,116
  8012e4:	00000206 	br	8012f0 <__sfp+0x68>
  8012e8:	18bfe60f 	ldh	r2,-104(r3)
  8012ec:	10000826 	beq	r2,zero,801310 <__sfp+0x88>
  8012f0:	213fffc4 	addi	r4,r4,-1
  8012f4:	1c3ffd04 	addi	r16,r3,-12
  8012f8:	18c01a04 	addi	r3,r3,104
  8012fc:	247ffa1e 	bne	r4,r17,8012e8 <__alt_mem_onchip_mem+0xff7f92e8>
  801300:	90800017 	ldw	r2,0(r18)
  801304:	10001d26 	beq	r2,zero,80137c <__sfp+0xf4>
  801308:	1025883a 	mov	r18,r2
  80130c:	003fee06 	br	8012c8 <__alt_mem_onchip_mem+0xff7f92c8>
  801310:	00bfffc4 	movi	r2,-1
  801314:	8080038d 	sth	r2,14(r16)
  801318:	00800044 	movi	r2,1
  80131c:	8080030d 	sth	r2,12(r16)
  801320:	80001915 	stw	zero,100(r16)
  801324:	80000015 	stw	zero,0(r16)
  801328:	80000215 	stw	zero,8(r16)
  80132c:	80000115 	stw	zero,4(r16)
  801330:	80000415 	stw	zero,16(r16)
  801334:	80000515 	stw	zero,20(r16)
  801338:	80000615 	stw	zero,24(r16)
  80133c:	01800204 	movi	r6,8
  801340:	000b883a 	mov	r5,zero
  801344:	81001704 	addi	r4,r16,92
  801348:	08025e00 	call	8025e0 <memset>
  80134c:	8005883a 	mov	r2,r16
  801350:	80000c15 	stw	zero,48(r16)
  801354:	80000d15 	stw	zero,52(r16)
  801358:	80001115 	stw	zero,68(r16)
  80135c:	80001215 	stw	zero,72(r16)
  801360:	dfc00417 	ldw	ra,16(sp)
  801364:	dcc00317 	ldw	r19,12(sp)
  801368:	dc800217 	ldw	r18,8(sp)
  80136c:	dc400117 	ldw	r17,4(sp)
  801370:	dc000017 	ldw	r16,0(sp)
  801374:	dec00504 	addi	sp,sp,20
  801378:	f800283a 	ret
  80137c:	01400104 	movi	r5,4
  801380:	9809883a 	mov	r4,r19
  801384:	08012200 	call	801220 <__sfmoreglue>
  801388:	90800015 	stw	r2,0(r18)
  80138c:	103fde1e 	bne	r2,zero,801308 <__alt_mem_onchip_mem+0xff7f9308>
  801390:	00800304 	movi	r2,12
  801394:	98800015 	stw	r2,0(r19)
  801398:	0005883a 	mov	r2,zero
  80139c:	003ff006 	br	801360 <__alt_mem_onchip_mem+0xff7f9360>

008013a0 <_cleanup>:
  8013a0:	00802074 	movhi	r2,129
  8013a4:	10a88d04 	addi	r2,r2,-24012
  8013a8:	11000017 	ldw	r4,0(r2)
  8013ac:	01402034 	movhi	r5,128
  8013b0:	294cb104 	addi	r5,r5,12996
  8013b4:	08019881 	jmpi	801988 <_fwalk_reent>

008013b8 <__sinit>:
  8013b8:	20800e17 	ldw	r2,56(r4)
  8013bc:	10000126 	beq	r2,zero,8013c4 <__sinit+0xc>
  8013c0:	f800283a 	ret
  8013c4:	080107c1 	jmpi	80107c <__sinit.part.1>

008013c8 <__sfp_lock_acquire>:
  8013c8:	f800283a 	ret

008013cc <__sfp_lock_release>:
  8013cc:	f800283a 	ret

008013d0 <__sinit_lock_acquire>:
  8013d0:	f800283a 	ret

008013d4 <__sinit_lock_release>:
  8013d4:	f800283a 	ret

008013d8 <__fp_lock_all>:
  8013d8:	00802074 	movhi	r2,129
  8013dc:	10a88e04 	addi	r2,r2,-24008
  8013e0:	11000017 	ldw	r4,0(r2)
  8013e4:	01402034 	movhi	r5,128
  8013e8:	29448604 	addi	r5,r5,4632
  8013ec:	08018c41 	jmpi	8018c4 <_fwalk>

008013f0 <__fp_unlock_all>:
  8013f0:	00802074 	movhi	r2,129
  8013f4:	10a88e04 	addi	r2,r2,-24008
  8013f8:	11000017 	ldw	r4,0(r2)
  8013fc:	01402034 	movhi	r5,128
  801400:	29441a04 	addi	r5,r5,4200
  801404:	08018c41 	jmpi	8018c4 <_fwalk>

00801408 <__sfvwrite_r>:
  801408:	30800217 	ldw	r2,8(r6)
  80140c:	10006726 	beq	r2,zero,8015ac <__sfvwrite_r+0x1a4>
  801410:	28c0030b 	ldhu	r3,12(r5)
  801414:	defff404 	addi	sp,sp,-48
  801418:	dd400715 	stw	r21,28(sp)
  80141c:	dd000615 	stw	r20,24(sp)
  801420:	dc000215 	stw	r16,8(sp)
  801424:	dfc00b15 	stw	ra,44(sp)
  801428:	df000a15 	stw	fp,40(sp)
  80142c:	ddc00915 	stw	r23,36(sp)
  801430:	dd800815 	stw	r22,32(sp)
  801434:	dcc00515 	stw	r19,20(sp)
  801438:	dc800415 	stw	r18,16(sp)
  80143c:	dc400315 	stw	r17,12(sp)
  801440:	1880020c 	andi	r2,r3,8
  801444:	2821883a 	mov	r16,r5
  801448:	202b883a 	mov	r21,r4
  80144c:	3029883a 	mov	r20,r6
  801450:	10002726 	beq	r2,zero,8014f0 <__sfvwrite_r+0xe8>
  801454:	28800417 	ldw	r2,16(r5)
  801458:	10002526 	beq	r2,zero,8014f0 <__sfvwrite_r+0xe8>
  80145c:	1880008c 	andi	r2,r3,2
  801460:	a4400017 	ldw	r17,0(r20)
  801464:	10002a26 	beq	r2,zero,801510 <__sfvwrite_r+0x108>
  801468:	05a00034 	movhi	r22,32768
  80146c:	0027883a 	mov	r19,zero
  801470:	0025883a 	mov	r18,zero
  801474:	b5bf0004 	addi	r22,r22,-1024
  801478:	980d883a 	mov	r6,r19
  80147c:	a809883a 	mov	r4,r21
  801480:	90004626 	beq	r18,zero,80159c <__sfvwrite_r+0x194>
  801484:	900f883a 	mov	r7,r18
  801488:	b480022e 	bgeu	r22,r18,801494 <__sfvwrite_r+0x8c>
  80148c:	01e00034 	movhi	r7,32768
  801490:	39ff0004 	addi	r7,r7,-1024
  801494:	80800917 	ldw	r2,36(r16)
  801498:	81400717 	ldw	r5,28(r16)
  80149c:	103ee83a 	callr	r2
  8014a0:	0080570e 	bge	zero,r2,801600 <__sfvwrite_r+0x1f8>
  8014a4:	a0c00217 	ldw	r3,8(r20)
  8014a8:	98a7883a 	add	r19,r19,r2
  8014ac:	90a5c83a 	sub	r18,r18,r2
  8014b0:	1885c83a 	sub	r2,r3,r2
  8014b4:	a0800215 	stw	r2,8(r20)
  8014b8:	103fef1e 	bne	r2,zero,801478 <__alt_mem_onchip_mem+0xff7f9478>
  8014bc:	0005883a 	mov	r2,zero
  8014c0:	dfc00b17 	ldw	ra,44(sp)
  8014c4:	df000a17 	ldw	fp,40(sp)
  8014c8:	ddc00917 	ldw	r23,36(sp)
  8014cc:	dd800817 	ldw	r22,32(sp)
  8014d0:	dd400717 	ldw	r21,28(sp)
  8014d4:	dd000617 	ldw	r20,24(sp)
  8014d8:	dcc00517 	ldw	r19,20(sp)
  8014dc:	dc800417 	ldw	r18,16(sp)
  8014e0:	dc400317 	ldw	r17,12(sp)
  8014e4:	dc000217 	ldw	r16,8(sp)
  8014e8:	dec00c04 	addi	sp,sp,48
  8014ec:	f800283a 	ret
  8014f0:	800b883a 	mov	r5,r16
  8014f4:	a809883a 	mov	r4,r21
  8014f8:	080311c0 	call	80311c <__swsetup_r>
  8014fc:	1000eb1e 	bne	r2,zero,8018ac <__sfvwrite_r+0x4a4>
  801500:	80c0030b 	ldhu	r3,12(r16)
  801504:	a4400017 	ldw	r17,0(r20)
  801508:	1880008c 	andi	r2,r3,2
  80150c:	103fd61e 	bne	r2,zero,801468 <__alt_mem_onchip_mem+0xff7f9468>
  801510:	1880004c 	andi	r2,r3,1
  801514:	10003f1e 	bne	r2,zero,801614 <__sfvwrite_r+0x20c>
  801518:	0039883a 	mov	fp,zero
  80151c:	0025883a 	mov	r18,zero
  801520:	90001a26 	beq	r18,zero,80158c <__sfvwrite_r+0x184>
  801524:	1880800c 	andi	r2,r3,512
  801528:	84c00217 	ldw	r19,8(r16)
  80152c:	10002126 	beq	r2,zero,8015b4 <__sfvwrite_r+0x1ac>
  801530:	982f883a 	mov	r23,r19
  801534:	94c09336 	bltu	r18,r19,801784 <__sfvwrite_r+0x37c>
  801538:	1881200c 	andi	r2,r3,1152
  80153c:	10009e1e 	bne	r2,zero,8017b8 <__sfvwrite_r+0x3b0>
  801540:	81000017 	ldw	r4,0(r16)
  801544:	b80d883a 	mov	r6,r23
  801548:	e00b883a 	mov	r5,fp
  80154c:	08024840 	call	802484 <memmove>
  801550:	80c00217 	ldw	r3,8(r16)
  801554:	81000017 	ldw	r4,0(r16)
  801558:	9005883a 	mov	r2,r18
  80155c:	1ce7c83a 	sub	r19,r3,r19
  801560:	25cf883a 	add	r7,r4,r23
  801564:	84c00215 	stw	r19,8(r16)
  801568:	81c00015 	stw	r7,0(r16)
  80156c:	a0c00217 	ldw	r3,8(r20)
  801570:	e0b9883a 	add	fp,fp,r2
  801574:	90a5c83a 	sub	r18,r18,r2
  801578:	18a7c83a 	sub	r19,r3,r2
  80157c:	a4c00215 	stw	r19,8(r20)
  801580:	983fce26 	beq	r19,zero,8014bc <__alt_mem_onchip_mem+0xff7f94bc>
  801584:	80c0030b 	ldhu	r3,12(r16)
  801588:	903fe61e 	bne	r18,zero,801524 <__alt_mem_onchip_mem+0xff7f9524>
  80158c:	8f000017 	ldw	fp,0(r17)
  801590:	8c800117 	ldw	r18,4(r17)
  801594:	8c400204 	addi	r17,r17,8
  801598:	003fe106 	br	801520 <__alt_mem_onchip_mem+0xff7f9520>
  80159c:	8cc00017 	ldw	r19,0(r17)
  8015a0:	8c800117 	ldw	r18,4(r17)
  8015a4:	8c400204 	addi	r17,r17,8
  8015a8:	003fb306 	br	801478 <__alt_mem_onchip_mem+0xff7f9478>
  8015ac:	0005883a 	mov	r2,zero
  8015b0:	f800283a 	ret
  8015b4:	81000017 	ldw	r4,0(r16)
  8015b8:	80800417 	ldw	r2,16(r16)
  8015bc:	11005736 	bltu	r2,r4,80171c <__sfvwrite_r+0x314>
  8015c0:	85c00517 	ldw	r23,20(r16)
  8015c4:	95c05536 	bltu	r18,r23,80171c <__sfvwrite_r+0x314>
  8015c8:	00a00034 	movhi	r2,32768
  8015cc:	10bfffc4 	addi	r2,r2,-1
  8015d0:	9009883a 	mov	r4,r18
  8015d4:	1480012e 	bgeu	r2,r18,8015dc <__sfvwrite_r+0x1d4>
  8015d8:	1009883a 	mov	r4,r2
  8015dc:	b80b883a 	mov	r5,r23
  8015e0:	0803dd00 	call	803dd0 <__divsi3>
  8015e4:	15cf383a 	mul	r7,r2,r23
  8015e8:	81400717 	ldw	r5,28(r16)
  8015ec:	80800917 	ldw	r2,36(r16)
  8015f0:	e00d883a 	mov	r6,fp
  8015f4:	a809883a 	mov	r4,r21
  8015f8:	103ee83a 	callr	r2
  8015fc:	00bfdb16 	blt	zero,r2,80156c <__alt_mem_onchip_mem+0xff7f956c>
  801600:	8080030b 	ldhu	r2,12(r16)
  801604:	10801014 	ori	r2,r2,64
  801608:	8080030d 	sth	r2,12(r16)
  80160c:	00bfffc4 	movi	r2,-1
  801610:	003fab06 	br	8014c0 <__alt_mem_onchip_mem+0xff7f94c0>
  801614:	0027883a 	mov	r19,zero
  801618:	0011883a 	mov	r8,zero
  80161c:	0039883a 	mov	fp,zero
  801620:	0025883a 	mov	r18,zero
  801624:	90001f26 	beq	r18,zero,8016a4 <__sfvwrite_r+0x29c>
  801628:	40005a26 	beq	r8,zero,801794 <__sfvwrite_r+0x38c>
  80162c:	982d883a 	mov	r22,r19
  801630:	94c0012e 	bgeu	r18,r19,801638 <__sfvwrite_r+0x230>
  801634:	902d883a 	mov	r22,r18
  801638:	81000017 	ldw	r4,0(r16)
  80163c:	80800417 	ldw	r2,16(r16)
  801640:	b02f883a 	mov	r23,r22
  801644:	81c00517 	ldw	r7,20(r16)
  801648:	1100032e 	bgeu	r2,r4,801658 <__sfvwrite_r+0x250>
  80164c:	80c00217 	ldw	r3,8(r16)
  801650:	38c7883a 	add	r3,r7,r3
  801654:	1d801816 	blt	r3,r22,8016b8 <__sfvwrite_r+0x2b0>
  801658:	b1c03e16 	blt	r22,r7,801754 <__sfvwrite_r+0x34c>
  80165c:	80800917 	ldw	r2,36(r16)
  801660:	81400717 	ldw	r5,28(r16)
  801664:	e00d883a 	mov	r6,fp
  801668:	da000115 	stw	r8,4(sp)
  80166c:	a809883a 	mov	r4,r21
  801670:	103ee83a 	callr	r2
  801674:	102f883a 	mov	r23,r2
  801678:	da000117 	ldw	r8,4(sp)
  80167c:	00bfe00e 	bge	zero,r2,801600 <__alt_mem_onchip_mem+0xff7f9600>
  801680:	9de7c83a 	sub	r19,r19,r23
  801684:	98001f26 	beq	r19,zero,801704 <__sfvwrite_r+0x2fc>
  801688:	a0800217 	ldw	r2,8(r20)
  80168c:	e5f9883a 	add	fp,fp,r23
  801690:	95e5c83a 	sub	r18,r18,r23
  801694:	15efc83a 	sub	r23,r2,r23
  801698:	a5c00215 	stw	r23,8(r20)
  80169c:	b83f8726 	beq	r23,zero,8014bc <__alt_mem_onchip_mem+0xff7f94bc>
  8016a0:	903fe11e 	bne	r18,zero,801628 <__alt_mem_onchip_mem+0xff7f9628>
  8016a4:	8f000017 	ldw	fp,0(r17)
  8016a8:	8c800117 	ldw	r18,4(r17)
  8016ac:	0011883a 	mov	r8,zero
  8016b0:	8c400204 	addi	r17,r17,8
  8016b4:	003fdb06 	br	801624 <__alt_mem_onchip_mem+0xff7f9624>
  8016b8:	180d883a 	mov	r6,r3
  8016bc:	e00b883a 	mov	r5,fp
  8016c0:	da000115 	stw	r8,4(sp)
  8016c4:	d8c00015 	stw	r3,0(sp)
  8016c8:	08024840 	call	802484 <memmove>
  8016cc:	d8c00017 	ldw	r3,0(sp)
  8016d0:	80800017 	ldw	r2,0(r16)
  8016d4:	800b883a 	mov	r5,r16
  8016d8:	a809883a 	mov	r4,r21
  8016dc:	10c5883a 	add	r2,r2,r3
  8016e0:	80800015 	stw	r2,0(r16)
  8016e4:	d8c00015 	stw	r3,0(sp)
  8016e8:	08035e40 	call	8035e4 <_fflush_r>
  8016ec:	d8c00017 	ldw	r3,0(sp)
  8016f0:	da000117 	ldw	r8,4(sp)
  8016f4:	103fc21e 	bne	r2,zero,801600 <__alt_mem_onchip_mem+0xff7f9600>
  8016f8:	182f883a 	mov	r23,r3
  8016fc:	9de7c83a 	sub	r19,r19,r23
  801700:	983fe11e 	bne	r19,zero,801688 <__alt_mem_onchip_mem+0xff7f9688>
  801704:	800b883a 	mov	r5,r16
  801708:	a809883a 	mov	r4,r21
  80170c:	08035e40 	call	8035e4 <_fflush_r>
  801710:	103fbb1e 	bne	r2,zero,801600 <__alt_mem_onchip_mem+0xff7f9600>
  801714:	0011883a 	mov	r8,zero
  801718:	003fdb06 	br	801688 <__alt_mem_onchip_mem+0xff7f9688>
  80171c:	94c0012e 	bgeu	r18,r19,801724 <__sfvwrite_r+0x31c>
  801720:	9027883a 	mov	r19,r18
  801724:	980d883a 	mov	r6,r19
  801728:	e00b883a 	mov	r5,fp
  80172c:	08024840 	call	802484 <memmove>
  801730:	80800217 	ldw	r2,8(r16)
  801734:	80c00017 	ldw	r3,0(r16)
  801738:	14c5c83a 	sub	r2,r2,r19
  80173c:	1cc7883a 	add	r3,r3,r19
  801740:	80800215 	stw	r2,8(r16)
  801744:	80c00015 	stw	r3,0(r16)
  801748:	10004326 	beq	r2,zero,801858 <__sfvwrite_r+0x450>
  80174c:	9805883a 	mov	r2,r19
  801750:	003f8606 	br	80156c <__alt_mem_onchip_mem+0xff7f956c>
  801754:	b00d883a 	mov	r6,r22
  801758:	e00b883a 	mov	r5,fp
  80175c:	da000115 	stw	r8,4(sp)
  801760:	08024840 	call	802484 <memmove>
  801764:	80800217 	ldw	r2,8(r16)
  801768:	80c00017 	ldw	r3,0(r16)
  80176c:	da000117 	ldw	r8,4(sp)
  801770:	1585c83a 	sub	r2,r2,r22
  801774:	1dad883a 	add	r22,r3,r22
  801778:	80800215 	stw	r2,8(r16)
  80177c:	85800015 	stw	r22,0(r16)
  801780:	003fbf06 	br	801680 <__alt_mem_onchip_mem+0xff7f9680>
  801784:	81000017 	ldw	r4,0(r16)
  801788:	9027883a 	mov	r19,r18
  80178c:	902f883a 	mov	r23,r18
  801790:	003f6c06 	br	801544 <__alt_mem_onchip_mem+0xff7f9544>
  801794:	900d883a 	mov	r6,r18
  801798:	01400284 	movi	r5,10
  80179c:	e009883a 	mov	r4,fp
  8017a0:	08022580 	call	802258 <memchr>
  8017a4:	10003e26 	beq	r2,zero,8018a0 <__sfvwrite_r+0x498>
  8017a8:	10800044 	addi	r2,r2,1
  8017ac:	1727c83a 	sub	r19,r2,fp
  8017b0:	02000044 	movi	r8,1
  8017b4:	003f9d06 	br	80162c <__alt_mem_onchip_mem+0xff7f962c>
  8017b8:	80800517 	ldw	r2,20(r16)
  8017bc:	81400417 	ldw	r5,16(r16)
  8017c0:	81c00017 	ldw	r7,0(r16)
  8017c4:	10a7883a 	add	r19,r2,r2
  8017c8:	9885883a 	add	r2,r19,r2
  8017cc:	1026d7fa 	srli	r19,r2,31
  8017d0:	396dc83a 	sub	r22,r7,r5
  8017d4:	b1000044 	addi	r4,r22,1
  8017d8:	9885883a 	add	r2,r19,r2
  8017dc:	1027d07a 	srai	r19,r2,1
  8017e0:	2485883a 	add	r2,r4,r18
  8017e4:	980d883a 	mov	r6,r19
  8017e8:	9880022e 	bgeu	r19,r2,8017f4 <__sfvwrite_r+0x3ec>
  8017ec:	1027883a 	mov	r19,r2
  8017f0:	100d883a 	mov	r6,r2
  8017f4:	18c1000c 	andi	r3,r3,1024
  8017f8:	18001c26 	beq	r3,zero,80186c <__sfvwrite_r+0x464>
  8017fc:	300b883a 	mov	r5,r6
  801800:	a809883a 	mov	r4,r21
  801804:	0801a4c0 	call	801a4c <_malloc_r>
  801808:	102f883a 	mov	r23,r2
  80180c:	10002926 	beq	r2,zero,8018b4 <__sfvwrite_r+0x4ac>
  801810:	81400417 	ldw	r5,16(r16)
  801814:	b00d883a 	mov	r6,r22
  801818:	1009883a 	mov	r4,r2
  80181c:	080233c0 	call	80233c <memcpy>
  801820:	8080030b 	ldhu	r2,12(r16)
  801824:	00fedfc4 	movi	r3,-1153
  801828:	10c4703a 	and	r2,r2,r3
  80182c:	10802014 	ori	r2,r2,128
  801830:	8080030d 	sth	r2,12(r16)
  801834:	bd89883a 	add	r4,r23,r22
  801838:	9d8fc83a 	sub	r7,r19,r22
  80183c:	85c00415 	stw	r23,16(r16)
  801840:	84c00515 	stw	r19,20(r16)
  801844:	81000015 	stw	r4,0(r16)
  801848:	9027883a 	mov	r19,r18
  80184c:	81c00215 	stw	r7,8(r16)
  801850:	902f883a 	mov	r23,r18
  801854:	003f3b06 	br	801544 <__alt_mem_onchip_mem+0xff7f9544>
  801858:	800b883a 	mov	r5,r16
  80185c:	a809883a 	mov	r4,r21
  801860:	08035e40 	call	8035e4 <_fflush_r>
  801864:	103fb926 	beq	r2,zero,80174c <__alt_mem_onchip_mem+0xff7f974c>
  801868:	003f6506 	br	801600 <__alt_mem_onchip_mem+0xff7f9600>
  80186c:	a809883a 	mov	r4,r21
  801870:	08028700 	call	802870 <_realloc_r>
  801874:	102f883a 	mov	r23,r2
  801878:	103fee1e 	bne	r2,zero,801834 <__alt_mem_onchip_mem+0xff7f9834>
  80187c:	81400417 	ldw	r5,16(r16)
  801880:	a809883a 	mov	r4,r21
  801884:	08037940 	call	803794 <_free_r>
  801888:	8080030b 	ldhu	r2,12(r16)
  80188c:	00ffdfc4 	movi	r3,-129
  801890:	1884703a 	and	r2,r3,r2
  801894:	00c00304 	movi	r3,12
  801898:	a8c00015 	stw	r3,0(r21)
  80189c:	003f5906 	br	801604 <__alt_mem_onchip_mem+0xff7f9604>
  8018a0:	94c00044 	addi	r19,r18,1
  8018a4:	02000044 	movi	r8,1
  8018a8:	003f6006 	br	80162c <__alt_mem_onchip_mem+0xff7f962c>
  8018ac:	00bfffc4 	movi	r2,-1
  8018b0:	003f0306 	br	8014c0 <__alt_mem_onchip_mem+0xff7f94c0>
  8018b4:	00800304 	movi	r2,12
  8018b8:	a8800015 	stw	r2,0(r21)
  8018bc:	8080030b 	ldhu	r2,12(r16)
  8018c0:	003f5006 	br	801604 <__alt_mem_onchip_mem+0xff7f9604>

008018c4 <_fwalk>:
  8018c4:	defff704 	addi	sp,sp,-36
  8018c8:	dd000415 	stw	r20,16(sp)
  8018cc:	dfc00815 	stw	ra,32(sp)
  8018d0:	ddc00715 	stw	r23,28(sp)
  8018d4:	dd800615 	stw	r22,24(sp)
  8018d8:	dd400515 	stw	r21,20(sp)
  8018dc:	dcc00315 	stw	r19,12(sp)
  8018e0:	dc800215 	stw	r18,8(sp)
  8018e4:	dc400115 	stw	r17,4(sp)
  8018e8:	dc000015 	stw	r16,0(sp)
  8018ec:	2500b804 	addi	r20,r4,736
  8018f0:	a0002326 	beq	r20,zero,801980 <_fwalk+0xbc>
  8018f4:	282b883a 	mov	r21,r5
  8018f8:	002f883a 	mov	r23,zero
  8018fc:	05800044 	movi	r22,1
  801900:	04ffffc4 	movi	r19,-1
  801904:	a4400117 	ldw	r17,4(r20)
  801908:	a4800217 	ldw	r18,8(r20)
  80190c:	8c7fffc4 	addi	r17,r17,-1
  801910:	88000d16 	blt	r17,zero,801948 <_fwalk+0x84>
  801914:	94000304 	addi	r16,r18,12
  801918:	94800384 	addi	r18,r18,14
  80191c:	8080000b 	ldhu	r2,0(r16)
  801920:	8c7fffc4 	addi	r17,r17,-1
  801924:	813ffd04 	addi	r4,r16,-12
  801928:	b080042e 	bgeu	r22,r2,80193c <_fwalk+0x78>
  80192c:	9080000f 	ldh	r2,0(r18)
  801930:	14c00226 	beq	r2,r19,80193c <_fwalk+0x78>
  801934:	a83ee83a 	callr	r21
  801938:	b8aeb03a 	or	r23,r23,r2
  80193c:	84001a04 	addi	r16,r16,104
  801940:	94801a04 	addi	r18,r18,104
  801944:	8cfff51e 	bne	r17,r19,80191c <__alt_mem_onchip_mem+0xff7f991c>
  801948:	a5000017 	ldw	r20,0(r20)
  80194c:	a03fed1e 	bne	r20,zero,801904 <__alt_mem_onchip_mem+0xff7f9904>
  801950:	b805883a 	mov	r2,r23
  801954:	dfc00817 	ldw	ra,32(sp)
  801958:	ddc00717 	ldw	r23,28(sp)
  80195c:	dd800617 	ldw	r22,24(sp)
  801960:	dd400517 	ldw	r21,20(sp)
  801964:	dd000417 	ldw	r20,16(sp)
  801968:	dcc00317 	ldw	r19,12(sp)
  80196c:	dc800217 	ldw	r18,8(sp)
  801970:	dc400117 	ldw	r17,4(sp)
  801974:	dc000017 	ldw	r16,0(sp)
  801978:	dec00904 	addi	sp,sp,36
  80197c:	f800283a 	ret
  801980:	002f883a 	mov	r23,zero
  801984:	003ff206 	br	801950 <__alt_mem_onchip_mem+0xff7f9950>

00801988 <_fwalk_reent>:
  801988:	defff704 	addi	sp,sp,-36
  80198c:	dd000415 	stw	r20,16(sp)
  801990:	dfc00815 	stw	ra,32(sp)
  801994:	ddc00715 	stw	r23,28(sp)
  801998:	dd800615 	stw	r22,24(sp)
  80199c:	dd400515 	stw	r21,20(sp)
  8019a0:	dcc00315 	stw	r19,12(sp)
  8019a4:	dc800215 	stw	r18,8(sp)
  8019a8:	dc400115 	stw	r17,4(sp)
  8019ac:	dc000015 	stw	r16,0(sp)
  8019b0:	2500b804 	addi	r20,r4,736
  8019b4:	a0002326 	beq	r20,zero,801a44 <_fwalk_reent+0xbc>
  8019b8:	282b883a 	mov	r21,r5
  8019bc:	2027883a 	mov	r19,r4
  8019c0:	002f883a 	mov	r23,zero
  8019c4:	05800044 	movi	r22,1
  8019c8:	04bfffc4 	movi	r18,-1
  8019cc:	a4400117 	ldw	r17,4(r20)
  8019d0:	a4000217 	ldw	r16,8(r20)
  8019d4:	8c7fffc4 	addi	r17,r17,-1
  8019d8:	88000c16 	blt	r17,zero,801a0c <_fwalk_reent+0x84>
  8019dc:	84000304 	addi	r16,r16,12
  8019e0:	8080000b 	ldhu	r2,0(r16)
  8019e4:	8c7fffc4 	addi	r17,r17,-1
  8019e8:	817ffd04 	addi	r5,r16,-12
  8019ec:	b080052e 	bgeu	r22,r2,801a04 <_fwalk_reent+0x7c>
  8019f0:	8080008f 	ldh	r2,2(r16)
  8019f4:	9809883a 	mov	r4,r19
  8019f8:	14800226 	beq	r2,r18,801a04 <_fwalk_reent+0x7c>
  8019fc:	a83ee83a 	callr	r21
  801a00:	b8aeb03a 	or	r23,r23,r2
  801a04:	84001a04 	addi	r16,r16,104
  801a08:	8cbff51e 	bne	r17,r18,8019e0 <__alt_mem_onchip_mem+0xff7f99e0>
  801a0c:	a5000017 	ldw	r20,0(r20)
  801a10:	a03fee1e 	bne	r20,zero,8019cc <__alt_mem_onchip_mem+0xff7f99cc>
  801a14:	b805883a 	mov	r2,r23
  801a18:	dfc00817 	ldw	ra,32(sp)
  801a1c:	ddc00717 	ldw	r23,28(sp)
  801a20:	dd800617 	ldw	r22,24(sp)
  801a24:	dd400517 	ldw	r21,20(sp)
  801a28:	dd000417 	ldw	r20,16(sp)
  801a2c:	dcc00317 	ldw	r19,12(sp)
  801a30:	dc800217 	ldw	r18,8(sp)
  801a34:	dc400117 	ldw	r17,4(sp)
  801a38:	dc000017 	ldw	r16,0(sp)
  801a3c:	dec00904 	addi	sp,sp,36
  801a40:	f800283a 	ret
  801a44:	002f883a 	mov	r23,zero
  801a48:	003ff206 	br	801a14 <__alt_mem_onchip_mem+0xff7f9a14>

00801a4c <_malloc_r>:
  801a4c:	defff504 	addi	sp,sp,-44
  801a50:	dc800315 	stw	r18,12(sp)
  801a54:	dfc00a15 	stw	ra,40(sp)
  801a58:	df000915 	stw	fp,36(sp)
  801a5c:	ddc00815 	stw	r23,32(sp)
  801a60:	dd800715 	stw	r22,28(sp)
  801a64:	dd400615 	stw	r21,24(sp)
  801a68:	dd000515 	stw	r20,20(sp)
  801a6c:	dcc00415 	stw	r19,16(sp)
  801a70:	dc400215 	stw	r17,8(sp)
  801a74:	dc000115 	stw	r16,4(sp)
  801a78:	288002c4 	addi	r2,r5,11
  801a7c:	00c00584 	movi	r3,22
  801a80:	2025883a 	mov	r18,r4
  801a84:	18807f2e 	bgeu	r3,r2,801c84 <_malloc_r+0x238>
  801a88:	047ffe04 	movi	r17,-8
  801a8c:	1462703a 	and	r17,r2,r17
  801a90:	8800a316 	blt	r17,zero,801d20 <_malloc_r+0x2d4>
  801a94:	8940a236 	bltu	r17,r5,801d20 <_malloc_r+0x2d4>
  801a98:	08047ac0 	call	8047ac <__malloc_lock>
  801a9c:	00807dc4 	movi	r2,503
  801aa0:	1441e92e 	bgeu	r2,r17,802248 <_malloc_r+0x7fc>
  801aa4:	8804d27a 	srli	r2,r17,9
  801aa8:	1000a126 	beq	r2,zero,801d30 <_malloc_r+0x2e4>
  801aac:	00c00104 	movi	r3,4
  801ab0:	18811e36 	bltu	r3,r2,801f2c <_malloc_r+0x4e0>
  801ab4:	8804d1ba 	srli	r2,r17,6
  801ab8:	12000e44 	addi	r8,r2,57
  801abc:	11c00e04 	addi	r7,r2,56
  801ac0:	4209883a 	add	r4,r8,r8
  801ac4:	04c02074 	movhi	r19,129
  801ac8:	2109883a 	add	r4,r4,r4
  801acc:	9ce29004 	addi	r19,r19,-30144
  801ad0:	2109883a 	add	r4,r4,r4
  801ad4:	9909883a 	add	r4,r19,r4
  801ad8:	24000117 	ldw	r16,4(r4)
  801adc:	213ffe04 	addi	r4,r4,-8
  801ae0:	24009726 	beq	r4,r16,801d40 <_malloc_r+0x2f4>
  801ae4:	80800117 	ldw	r2,4(r16)
  801ae8:	01bfff04 	movi	r6,-4
  801aec:	014003c4 	movi	r5,15
  801af0:	1184703a 	and	r2,r2,r6
  801af4:	1447c83a 	sub	r3,r2,r17
  801af8:	28c00716 	blt	r5,r3,801b18 <_malloc_r+0xcc>
  801afc:	1800920e 	bge	r3,zero,801d48 <_malloc_r+0x2fc>
  801b00:	84000317 	ldw	r16,12(r16)
  801b04:	24008e26 	beq	r4,r16,801d40 <_malloc_r+0x2f4>
  801b08:	80800117 	ldw	r2,4(r16)
  801b0c:	1184703a 	and	r2,r2,r6
  801b10:	1447c83a 	sub	r3,r2,r17
  801b14:	28fff90e 	bge	r5,r3,801afc <__alt_mem_onchip_mem+0xff7f9afc>
  801b18:	3809883a 	mov	r4,r7
  801b1c:	01802074 	movhi	r6,129
  801b20:	9c000417 	ldw	r16,16(r19)
  801b24:	31a29004 	addi	r6,r6,-30144
  801b28:	32000204 	addi	r8,r6,8
  801b2c:	82013426 	beq	r16,r8,802000 <_malloc_r+0x5b4>
  801b30:	80c00117 	ldw	r3,4(r16)
  801b34:	00bfff04 	movi	r2,-4
  801b38:	188e703a 	and	r7,r3,r2
  801b3c:	3c45c83a 	sub	r2,r7,r17
  801b40:	00c003c4 	movi	r3,15
  801b44:	18811f16 	blt	r3,r2,801fc4 <_malloc_r+0x578>
  801b48:	32000515 	stw	r8,20(r6)
  801b4c:	32000415 	stw	r8,16(r6)
  801b50:	10007f0e 	bge	r2,zero,801d50 <_malloc_r+0x304>
  801b54:	00807fc4 	movi	r2,511
  801b58:	11c0fd36 	bltu	r2,r7,801f50 <_malloc_r+0x504>
  801b5c:	3806d0fa 	srli	r3,r7,3
  801b60:	01c00044 	movi	r7,1
  801b64:	30800117 	ldw	r2,4(r6)
  801b68:	19400044 	addi	r5,r3,1
  801b6c:	294b883a 	add	r5,r5,r5
  801b70:	1807d0ba 	srai	r3,r3,2
  801b74:	294b883a 	add	r5,r5,r5
  801b78:	294b883a 	add	r5,r5,r5
  801b7c:	298b883a 	add	r5,r5,r6
  801b80:	38c6983a 	sll	r3,r7,r3
  801b84:	29c00017 	ldw	r7,0(r5)
  801b88:	2a7ffe04 	addi	r9,r5,-8
  801b8c:	1886b03a 	or	r3,r3,r2
  801b90:	82400315 	stw	r9,12(r16)
  801b94:	81c00215 	stw	r7,8(r16)
  801b98:	30c00115 	stw	r3,4(r6)
  801b9c:	2c000015 	stw	r16,0(r5)
  801ba0:	3c000315 	stw	r16,12(r7)
  801ba4:	2005d0ba 	srai	r2,r4,2
  801ba8:	01400044 	movi	r5,1
  801bac:	288a983a 	sll	r5,r5,r2
  801bb0:	19406f36 	bltu	r3,r5,801d70 <_malloc_r+0x324>
  801bb4:	28c4703a 	and	r2,r5,r3
  801bb8:	10000a1e 	bne	r2,zero,801be4 <_malloc_r+0x198>
  801bbc:	00bfff04 	movi	r2,-4
  801bc0:	294b883a 	add	r5,r5,r5
  801bc4:	2088703a 	and	r4,r4,r2
  801bc8:	28c4703a 	and	r2,r5,r3
  801bcc:	21000104 	addi	r4,r4,4
  801bd0:	1000041e 	bne	r2,zero,801be4 <_malloc_r+0x198>
  801bd4:	294b883a 	add	r5,r5,r5
  801bd8:	28c4703a 	and	r2,r5,r3
  801bdc:	21000104 	addi	r4,r4,4
  801be0:	103ffc26 	beq	r2,zero,801bd4 <__alt_mem_onchip_mem+0xff7f9bd4>
  801be4:	02bfff04 	movi	r10,-4
  801be8:	024003c4 	movi	r9,15
  801bec:	21800044 	addi	r6,r4,1
  801bf0:	318d883a 	add	r6,r6,r6
  801bf4:	318d883a 	add	r6,r6,r6
  801bf8:	318d883a 	add	r6,r6,r6
  801bfc:	998d883a 	add	r6,r19,r6
  801c00:	333ffe04 	addi	r12,r6,-8
  801c04:	2017883a 	mov	r11,r4
  801c08:	31800104 	addi	r6,r6,4
  801c0c:	34000017 	ldw	r16,0(r6)
  801c10:	31fffd04 	addi	r7,r6,-12
  801c14:	81c0041e 	bne	r16,r7,801c28 <_malloc_r+0x1dc>
  801c18:	0000fb06 	br	802008 <_malloc_r+0x5bc>
  801c1c:	1801030e 	bge	r3,zero,80202c <_malloc_r+0x5e0>
  801c20:	84000317 	ldw	r16,12(r16)
  801c24:	81c0f826 	beq	r16,r7,802008 <_malloc_r+0x5bc>
  801c28:	80800117 	ldw	r2,4(r16)
  801c2c:	1284703a 	and	r2,r2,r10
  801c30:	1447c83a 	sub	r3,r2,r17
  801c34:	48fff90e 	bge	r9,r3,801c1c <__alt_mem_onchip_mem+0xff7f9c1c>
  801c38:	80800317 	ldw	r2,12(r16)
  801c3c:	81000217 	ldw	r4,8(r16)
  801c40:	89400054 	ori	r5,r17,1
  801c44:	81400115 	stw	r5,4(r16)
  801c48:	20800315 	stw	r2,12(r4)
  801c4c:	11000215 	stw	r4,8(r2)
  801c50:	8463883a 	add	r17,r16,r17
  801c54:	9c400515 	stw	r17,20(r19)
  801c58:	9c400415 	stw	r17,16(r19)
  801c5c:	18800054 	ori	r2,r3,1
  801c60:	88800115 	stw	r2,4(r17)
  801c64:	8a000315 	stw	r8,12(r17)
  801c68:	8a000215 	stw	r8,8(r17)
  801c6c:	88e3883a 	add	r17,r17,r3
  801c70:	88c00015 	stw	r3,0(r17)
  801c74:	9009883a 	mov	r4,r18
  801c78:	08047d00 	call	8047d0 <__malloc_unlock>
  801c7c:	80800204 	addi	r2,r16,8
  801c80:	00001b06 	br	801cf0 <_malloc_r+0x2a4>
  801c84:	04400404 	movi	r17,16
  801c88:	89402536 	bltu	r17,r5,801d20 <_malloc_r+0x2d4>
  801c8c:	08047ac0 	call	8047ac <__malloc_lock>
  801c90:	00800184 	movi	r2,6
  801c94:	01000084 	movi	r4,2
  801c98:	04c02074 	movhi	r19,129
  801c9c:	1085883a 	add	r2,r2,r2
  801ca0:	9ce29004 	addi	r19,r19,-30144
  801ca4:	1085883a 	add	r2,r2,r2
  801ca8:	9885883a 	add	r2,r19,r2
  801cac:	14000117 	ldw	r16,4(r2)
  801cb0:	10fffe04 	addi	r3,r2,-8
  801cb4:	80c0d926 	beq	r16,r3,80201c <_malloc_r+0x5d0>
  801cb8:	80c00117 	ldw	r3,4(r16)
  801cbc:	81000317 	ldw	r4,12(r16)
  801cc0:	00bfff04 	movi	r2,-4
  801cc4:	1884703a 	and	r2,r3,r2
  801cc8:	81400217 	ldw	r5,8(r16)
  801ccc:	8085883a 	add	r2,r16,r2
  801cd0:	10c00117 	ldw	r3,4(r2)
  801cd4:	29000315 	stw	r4,12(r5)
  801cd8:	21400215 	stw	r5,8(r4)
  801cdc:	18c00054 	ori	r3,r3,1
  801ce0:	10c00115 	stw	r3,4(r2)
  801ce4:	9009883a 	mov	r4,r18
  801ce8:	08047d00 	call	8047d0 <__malloc_unlock>
  801cec:	80800204 	addi	r2,r16,8
  801cf0:	dfc00a17 	ldw	ra,40(sp)
  801cf4:	df000917 	ldw	fp,36(sp)
  801cf8:	ddc00817 	ldw	r23,32(sp)
  801cfc:	dd800717 	ldw	r22,28(sp)
  801d00:	dd400617 	ldw	r21,24(sp)
  801d04:	dd000517 	ldw	r20,20(sp)
  801d08:	dcc00417 	ldw	r19,16(sp)
  801d0c:	dc800317 	ldw	r18,12(sp)
  801d10:	dc400217 	ldw	r17,8(sp)
  801d14:	dc000117 	ldw	r16,4(sp)
  801d18:	dec00b04 	addi	sp,sp,44
  801d1c:	f800283a 	ret
  801d20:	00800304 	movi	r2,12
  801d24:	90800015 	stw	r2,0(r18)
  801d28:	0005883a 	mov	r2,zero
  801d2c:	003ff006 	br	801cf0 <__alt_mem_onchip_mem+0xff7f9cf0>
  801d30:	01002004 	movi	r4,128
  801d34:	02001004 	movi	r8,64
  801d38:	01c00fc4 	movi	r7,63
  801d3c:	003f6106 	br	801ac4 <__alt_mem_onchip_mem+0xff7f9ac4>
  801d40:	4009883a 	mov	r4,r8
  801d44:	003f7506 	br	801b1c <__alt_mem_onchip_mem+0xff7f9b1c>
  801d48:	81000317 	ldw	r4,12(r16)
  801d4c:	003fde06 	br	801cc8 <__alt_mem_onchip_mem+0xff7f9cc8>
  801d50:	81c5883a 	add	r2,r16,r7
  801d54:	11400117 	ldw	r5,4(r2)
  801d58:	9009883a 	mov	r4,r18
  801d5c:	29400054 	ori	r5,r5,1
  801d60:	11400115 	stw	r5,4(r2)
  801d64:	08047d00 	call	8047d0 <__malloc_unlock>
  801d68:	80800204 	addi	r2,r16,8
  801d6c:	003fe006 	br	801cf0 <__alt_mem_onchip_mem+0xff7f9cf0>
  801d70:	9c000217 	ldw	r16,8(r19)
  801d74:	00bfff04 	movi	r2,-4
  801d78:	85800117 	ldw	r22,4(r16)
  801d7c:	b0ac703a 	and	r22,r22,r2
  801d80:	b4400336 	bltu	r22,r17,801d90 <_malloc_r+0x344>
  801d84:	b445c83a 	sub	r2,r22,r17
  801d88:	00c003c4 	movi	r3,15
  801d8c:	18805d16 	blt	r3,r2,801f04 <_malloc_r+0x4b8>
  801d90:	05c02074 	movhi	r23,129
  801d94:	00802074 	movhi	r2,129
  801d98:	10afba04 	addi	r2,r2,-16664
  801d9c:	bde88f04 	addi	r23,r23,-24004
  801da0:	15400017 	ldw	r21,0(r2)
  801da4:	b8c00017 	ldw	r3,0(r23)
  801da8:	00bfffc4 	movi	r2,-1
  801dac:	858d883a 	add	r6,r16,r22
  801db0:	8d6b883a 	add	r21,r17,r21
  801db4:	1880ea26 	beq	r3,r2,802160 <_malloc_r+0x714>
  801db8:	ad4403c4 	addi	r21,r21,4111
  801dbc:	00bc0004 	movi	r2,-4096
  801dc0:	a8aa703a 	and	r21,r21,r2
  801dc4:	a80b883a 	mov	r5,r21
  801dc8:	9009883a 	mov	r4,r18
  801dcc:	d9800015 	stw	r6,0(sp)
  801dd0:	0802dd40 	call	802dd4 <_sbrk_r>
  801dd4:	1029883a 	mov	r20,r2
  801dd8:	00bfffc4 	movi	r2,-1
  801ddc:	d9800017 	ldw	r6,0(sp)
  801de0:	a080e826 	beq	r20,r2,802184 <_malloc_r+0x738>
  801de4:	a180a636 	bltu	r20,r6,802080 <_malloc_r+0x634>
  801de8:	07002074 	movhi	fp,129
  801dec:	e72fc304 	addi	fp,fp,-16628
  801df0:	e0800017 	ldw	r2,0(fp)
  801df4:	a887883a 	add	r3,r21,r2
  801df8:	e0c00015 	stw	r3,0(fp)
  801dfc:	3500e626 	beq	r6,r20,802198 <_malloc_r+0x74c>
  801e00:	b9000017 	ldw	r4,0(r23)
  801e04:	00bfffc4 	movi	r2,-1
  801e08:	2080ee26 	beq	r4,r2,8021c4 <_malloc_r+0x778>
  801e0c:	a185c83a 	sub	r2,r20,r6
  801e10:	10c5883a 	add	r2,r2,r3
  801e14:	e0800015 	stw	r2,0(fp)
  801e18:	a0c001cc 	andi	r3,r20,7
  801e1c:	1800bc26 	beq	r3,zero,802110 <_malloc_r+0x6c4>
  801e20:	a0e9c83a 	sub	r20,r20,r3
  801e24:	00840204 	movi	r2,4104
  801e28:	a5000204 	addi	r20,r20,8
  801e2c:	10c7c83a 	sub	r3,r2,r3
  801e30:	a545883a 	add	r2,r20,r21
  801e34:	1083ffcc 	andi	r2,r2,4095
  801e38:	18abc83a 	sub	r21,r3,r2
  801e3c:	a80b883a 	mov	r5,r21
  801e40:	9009883a 	mov	r4,r18
  801e44:	0802dd40 	call	802dd4 <_sbrk_r>
  801e48:	00ffffc4 	movi	r3,-1
  801e4c:	10c0e126 	beq	r2,r3,8021d4 <_malloc_r+0x788>
  801e50:	1505c83a 	sub	r2,r2,r20
  801e54:	1545883a 	add	r2,r2,r21
  801e58:	10800054 	ori	r2,r2,1
  801e5c:	e0c00017 	ldw	r3,0(fp)
  801e60:	9d000215 	stw	r20,8(r19)
  801e64:	a0800115 	stw	r2,4(r20)
  801e68:	a8c7883a 	add	r3,r21,r3
  801e6c:	e0c00015 	stw	r3,0(fp)
  801e70:	84c00e26 	beq	r16,r19,801eac <_malloc_r+0x460>
  801e74:	018003c4 	movi	r6,15
  801e78:	3580a72e 	bgeu	r6,r22,802118 <_malloc_r+0x6cc>
  801e7c:	81400117 	ldw	r5,4(r16)
  801e80:	013ffe04 	movi	r4,-8
  801e84:	b0bffd04 	addi	r2,r22,-12
  801e88:	1104703a 	and	r2,r2,r4
  801e8c:	2900004c 	andi	r4,r5,1
  801e90:	2088b03a 	or	r4,r4,r2
  801e94:	81000115 	stw	r4,4(r16)
  801e98:	01400144 	movi	r5,5
  801e9c:	8089883a 	add	r4,r16,r2
  801ea0:	21400115 	stw	r5,4(r4)
  801ea4:	21400215 	stw	r5,8(r4)
  801ea8:	3080cd36 	bltu	r6,r2,8021e0 <_malloc_r+0x794>
  801eac:	00802074 	movhi	r2,129
  801eb0:	10afb904 	addi	r2,r2,-16668
  801eb4:	11000017 	ldw	r4,0(r2)
  801eb8:	20c0012e 	bgeu	r4,r3,801ec0 <_malloc_r+0x474>
  801ebc:	10c00015 	stw	r3,0(r2)
  801ec0:	00802074 	movhi	r2,129
  801ec4:	10afb804 	addi	r2,r2,-16672
  801ec8:	11000017 	ldw	r4,0(r2)
  801ecc:	9c000217 	ldw	r16,8(r19)
  801ed0:	20c0012e 	bgeu	r4,r3,801ed8 <_malloc_r+0x48c>
  801ed4:	10c00015 	stw	r3,0(r2)
  801ed8:	80c00117 	ldw	r3,4(r16)
  801edc:	00bfff04 	movi	r2,-4
  801ee0:	1886703a 	and	r3,r3,r2
  801ee4:	1c45c83a 	sub	r2,r3,r17
  801ee8:	1c400236 	bltu	r3,r17,801ef4 <_malloc_r+0x4a8>
  801eec:	00c003c4 	movi	r3,15
  801ef0:	18800416 	blt	r3,r2,801f04 <_malloc_r+0x4b8>
  801ef4:	9009883a 	mov	r4,r18
  801ef8:	08047d00 	call	8047d0 <__malloc_unlock>
  801efc:	0005883a 	mov	r2,zero
  801f00:	003f7b06 	br	801cf0 <__alt_mem_onchip_mem+0xff7f9cf0>
  801f04:	88c00054 	ori	r3,r17,1
  801f08:	80c00115 	stw	r3,4(r16)
  801f0c:	8463883a 	add	r17,r16,r17
  801f10:	10800054 	ori	r2,r2,1
  801f14:	9c400215 	stw	r17,8(r19)
  801f18:	88800115 	stw	r2,4(r17)
  801f1c:	9009883a 	mov	r4,r18
  801f20:	08047d00 	call	8047d0 <__malloc_unlock>
  801f24:	80800204 	addi	r2,r16,8
  801f28:	003f7106 	br	801cf0 <__alt_mem_onchip_mem+0xff7f9cf0>
  801f2c:	00c00504 	movi	r3,20
  801f30:	18804a2e 	bgeu	r3,r2,80205c <_malloc_r+0x610>
  801f34:	00c01504 	movi	r3,84
  801f38:	18806e36 	bltu	r3,r2,8020f4 <_malloc_r+0x6a8>
  801f3c:	8804d33a 	srli	r2,r17,12
  801f40:	12001bc4 	addi	r8,r2,111
  801f44:	11c01b84 	addi	r7,r2,110
  801f48:	4209883a 	add	r4,r8,r8
  801f4c:	003edd06 	br	801ac4 <__alt_mem_onchip_mem+0xff7f9ac4>
  801f50:	3804d27a 	srli	r2,r7,9
  801f54:	00c00104 	movi	r3,4
  801f58:	1880442e 	bgeu	r3,r2,80206c <_malloc_r+0x620>
  801f5c:	00c00504 	movi	r3,20
  801f60:	18808136 	bltu	r3,r2,802168 <_malloc_r+0x71c>
  801f64:	11401704 	addi	r5,r2,92
  801f68:	10c016c4 	addi	r3,r2,91
  801f6c:	294b883a 	add	r5,r5,r5
  801f70:	294b883a 	add	r5,r5,r5
  801f74:	294b883a 	add	r5,r5,r5
  801f78:	994b883a 	add	r5,r19,r5
  801f7c:	28800017 	ldw	r2,0(r5)
  801f80:	01802074 	movhi	r6,129
  801f84:	297ffe04 	addi	r5,r5,-8
  801f88:	31a29004 	addi	r6,r6,-30144
  801f8c:	28806526 	beq	r5,r2,802124 <_malloc_r+0x6d8>
  801f90:	01bfff04 	movi	r6,-4
  801f94:	10c00117 	ldw	r3,4(r2)
  801f98:	1986703a 	and	r3,r3,r6
  801f9c:	38c0022e 	bgeu	r7,r3,801fa8 <_malloc_r+0x55c>
  801fa0:	10800217 	ldw	r2,8(r2)
  801fa4:	28bffb1e 	bne	r5,r2,801f94 <__alt_mem_onchip_mem+0xff7f9f94>
  801fa8:	11400317 	ldw	r5,12(r2)
  801fac:	98c00117 	ldw	r3,4(r19)
  801fb0:	81400315 	stw	r5,12(r16)
  801fb4:	80800215 	stw	r2,8(r16)
  801fb8:	2c000215 	stw	r16,8(r5)
  801fbc:	14000315 	stw	r16,12(r2)
  801fc0:	003ef806 	br	801ba4 <__alt_mem_onchip_mem+0xff7f9ba4>
  801fc4:	88c00054 	ori	r3,r17,1
  801fc8:	80c00115 	stw	r3,4(r16)
  801fcc:	8463883a 	add	r17,r16,r17
  801fd0:	34400515 	stw	r17,20(r6)
  801fd4:	34400415 	stw	r17,16(r6)
  801fd8:	10c00054 	ori	r3,r2,1
  801fdc:	8a000315 	stw	r8,12(r17)
  801fe0:	8a000215 	stw	r8,8(r17)
  801fe4:	88c00115 	stw	r3,4(r17)
  801fe8:	88a3883a 	add	r17,r17,r2
  801fec:	88800015 	stw	r2,0(r17)
  801ff0:	9009883a 	mov	r4,r18
  801ff4:	08047d00 	call	8047d0 <__malloc_unlock>
  801ff8:	80800204 	addi	r2,r16,8
  801ffc:	003f3c06 	br	801cf0 <__alt_mem_onchip_mem+0xff7f9cf0>
  802000:	30c00117 	ldw	r3,4(r6)
  802004:	003ee706 	br	801ba4 <__alt_mem_onchip_mem+0xff7f9ba4>
  802008:	5ac00044 	addi	r11,r11,1
  80200c:	588000cc 	andi	r2,r11,3
  802010:	31800204 	addi	r6,r6,8
  802014:	103efd1e 	bne	r2,zero,801c0c <__alt_mem_onchip_mem+0xff7f9c0c>
  802018:	00002406 	br	8020ac <_malloc_r+0x660>
  80201c:	14000317 	ldw	r16,12(r2)
  802020:	143f251e 	bne	r2,r16,801cb8 <__alt_mem_onchip_mem+0xff7f9cb8>
  802024:	21000084 	addi	r4,r4,2
  802028:	003ebc06 	br	801b1c <__alt_mem_onchip_mem+0xff7f9b1c>
  80202c:	8085883a 	add	r2,r16,r2
  802030:	10c00117 	ldw	r3,4(r2)
  802034:	81000317 	ldw	r4,12(r16)
  802038:	81400217 	ldw	r5,8(r16)
  80203c:	18c00054 	ori	r3,r3,1
  802040:	10c00115 	stw	r3,4(r2)
  802044:	29000315 	stw	r4,12(r5)
  802048:	21400215 	stw	r5,8(r4)
  80204c:	9009883a 	mov	r4,r18
  802050:	08047d00 	call	8047d0 <__malloc_unlock>
  802054:	80800204 	addi	r2,r16,8
  802058:	003f2506 	br	801cf0 <__alt_mem_onchip_mem+0xff7f9cf0>
  80205c:	12001704 	addi	r8,r2,92
  802060:	11c016c4 	addi	r7,r2,91
  802064:	4209883a 	add	r4,r8,r8
  802068:	003e9606 	br	801ac4 <__alt_mem_onchip_mem+0xff7f9ac4>
  80206c:	3804d1ba 	srli	r2,r7,6
  802070:	11400e44 	addi	r5,r2,57
  802074:	10c00e04 	addi	r3,r2,56
  802078:	294b883a 	add	r5,r5,r5
  80207c:	003fbc06 	br	801f70 <__alt_mem_onchip_mem+0xff7f9f70>
  802080:	84ff5926 	beq	r16,r19,801de8 <__alt_mem_onchip_mem+0xff7f9de8>
  802084:	00802074 	movhi	r2,129
  802088:	10a29004 	addi	r2,r2,-30144
  80208c:	14000217 	ldw	r16,8(r2)
  802090:	00bfff04 	movi	r2,-4
  802094:	80c00117 	ldw	r3,4(r16)
  802098:	1886703a 	and	r3,r3,r2
  80209c:	003f9106 	br	801ee4 <__alt_mem_onchip_mem+0xff7f9ee4>
  8020a0:	60800217 	ldw	r2,8(r12)
  8020a4:	213fffc4 	addi	r4,r4,-1
  8020a8:	1300651e 	bne	r2,r12,802240 <_malloc_r+0x7f4>
  8020ac:	208000cc 	andi	r2,r4,3
  8020b0:	633ffe04 	addi	r12,r12,-8
  8020b4:	103ffa1e 	bne	r2,zero,8020a0 <__alt_mem_onchip_mem+0xff7fa0a0>
  8020b8:	98800117 	ldw	r2,4(r19)
  8020bc:	0146303a 	nor	r3,zero,r5
  8020c0:	1884703a 	and	r2,r3,r2
  8020c4:	98800115 	stw	r2,4(r19)
  8020c8:	294b883a 	add	r5,r5,r5
  8020cc:	117f2836 	bltu	r2,r5,801d70 <__alt_mem_onchip_mem+0xff7f9d70>
  8020d0:	283f2726 	beq	r5,zero,801d70 <__alt_mem_onchip_mem+0xff7f9d70>
  8020d4:	2886703a 	and	r3,r5,r2
  8020d8:	5809883a 	mov	r4,r11
  8020dc:	183ec31e 	bne	r3,zero,801bec <__alt_mem_onchip_mem+0xff7f9bec>
  8020e0:	294b883a 	add	r5,r5,r5
  8020e4:	2886703a 	and	r3,r5,r2
  8020e8:	21000104 	addi	r4,r4,4
  8020ec:	183ffc26 	beq	r3,zero,8020e0 <__alt_mem_onchip_mem+0xff7fa0e0>
  8020f0:	003ebe06 	br	801bec <__alt_mem_onchip_mem+0xff7f9bec>
  8020f4:	00c05504 	movi	r3,340
  8020f8:	18801236 	bltu	r3,r2,802144 <_malloc_r+0x6f8>
  8020fc:	8804d3fa 	srli	r2,r17,15
  802100:	12001e04 	addi	r8,r2,120
  802104:	11c01dc4 	addi	r7,r2,119
  802108:	4209883a 	add	r4,r8,r8
  80210c:	003e6d06 	br	801ac4 <__alt_mem_onchip_mem+0xff7f9ac4>
  802110:	00c40004 	movi	r3,4096
  802114:	003f4606 	br	801e30 <__alt_mem_onchip_mem+0xff7f9e30>
  802118:	00800044 	movi	r2,1
  80211c:	a0800115 	stw	r2,4(r20)
  802120:	003f7406 	br	801ef4 <__alt_mem_onchip_mem+0xff7f9ef4>
  802124:	1805d0ba 	srai	r2,r3,2
  802128:	01c00044 	movi	r7,1
  80212c:	30c00117 	ldw	r3,4(r6)
  802130:	388e983a 	sll	r7,r7,r2
  802134:	2805883a 	mov	r2,r5
  802138:	38c6b03a 	or	r3,r7,r3
  80213c:	30c00115 	stw	r3,4(r6)
  802140:	003f9b06 	br	801fb0 <__alt_mem_onchip_mem+0xff7f9fb0>
  802144:	00c15504 	movi	r3,1364
  802148:	18801a36 	bltu	r3,r2,8021b4 <_malloc_r+0x768>
  80214c:	8804d4ba 	srli	r2,r17,18
  802150:	12001f44 	addi	r8,r2,125
  802154:	11c01f04 	addi	r7,r2,124
  802158:	4209883a 	add	r4,r8,r8
  80215c:	003e5906 	br	801ac4 <__alt_mem_onchip_mem+0xff7f9ac4>
  802160:	ad400404 	addi	r21,r21,16
  802164:	003f1706 	br	801dc4 <__alt_mem_onchip_mem+0xff7f9dc4>
  802168:	00c01504 	movi	r3,84
  80216c:	18802336 	bltu	r3,r2,8021fc <_malloc_r+0x7b0>
  802170:	3804d33a 	srli	r2,r7,12
  802174:	11401bc4 	addi	r5,r2,111
  802178:	10c01b84 	addi	r3,r2,110
  80217c:	294b883a 	add	r5,r5,r5
  802180:	003f7b06 	br	801f70 <__alt_mem_onchip_mem+0xff7f9f70>
  802184:	9c000217 	ldw	r16,8(r19)
  802188:	00bfff04 	movi	r2,-4
  80218c:	80c00117 	ldw	r3,4(r16)
  802190:	1886703a 	and	r3,r3,r2
  802194:	003f5306 	br	801ee4 <__alt_mem_onchip_mem+0xff7f9ee4>
  802198:	3083ffcc 	andi	r2,r6,4095
  80219c:	103f181e 	bne	r2,zero,801e00 <__alt_mem_onchip_mem+0xff7f9e00>
  8021a0:	99000217 	ldw	r4,8(r19)
  8021a4:	b545883a 	add	r2,r22,r21
  8021a8:	10800054 	ori	r2,r2,1
  8021ac:	20800115 	stw	r2,4(r4)
  8021b0:	003f3e06 	br	801eac <__alt_mem_onchip_mem+0xff7f9eac>
  8021b4:	01003f84 	movi	r4,254
  8021b8:	02001fc4 	movi	r8,127
  8021bc:	01c01f84 	movi	r7,126
  8021c0:	003e4006 	br	801ac4 <__alt_mem_onchip_mem+0xff7f9ac4>
  8021c4:	00802074 	movhi	r2,129
  8021c8:	10a88f04 	addi	r2,r2,-24004
  8021cc:	15000015 	stw	r20,0(r2)
  8021d0:	003f1106 	br	801e18 <__alt_mem_onchip_mem+0xff7f9e18>
  8021d4:	00800044 	movi	r2,1
  8021d8:	002b883a 	mov	r21,zero
  8021dc:	003f1f06 	br	801e5c <__alt_mem_onchip_mem+0xff7f9e5c>
  8021e0:	81400204 	addi	r5,r16,8
  8021e4:	9009883a 	mov	r4,r18
  8021e8:	08037940 	call	803794 <_free_r>
  8021ec:	00802074 	movhi	r2,129
  8021f0:	10afc304 	addi	r2,r2,-16628
  8021f4:	10c00017 	ldw	r3,0(r2)
  8021f8:	003f2c06 	br	801eac <__alt_mem_onchip_mem+0xff7f9eac>
  8021fc:	00c05504 	movi	r3,340
  802200:	18800536 	bltu	r3,r2,802218 <_malloc_r+0x7cc>
  802204:	3804d3fa 	srli	r2,r7,15
  802208:	11401e04 	addi	r5,r2,120
  80220c:	10c01dc4 	addi	r3,r2,119
  802210:	294b883a 	add	r5,r5,r5
  802214:	003f5606 	br	801f70 <__alt_mem_onchip_mem+0xff7f9f70>
  802218:	00c15504 	movi	r3,1364
  80221c:	18800536 	bltu	r3,r2,802234 <_malloc_r+0x7e8>
  802220:	3804d4ba 	srli	r2,r7,18
  802224:	11401f44 	addi	r5,r2,125
  802228:	10c01f04 	addi	r3,r2,124
  80222c:	294b883a 	add	r5,r5,r5
  802230:	003f4f06 	br	801f70 <__alt_mem_onchip_mem+0xff7f9f70>
  802234:	01403f84 	movi	r5,254
  802238:	00c01f84 	movi	r3,126
  80223c:	003f4c06 	br	801f70 <__alt_mem_onchip_mem+0xff7f9f70>
  802240:	98800117 	ldw	r2,4(r19)
  802244:	003fa006 	br	8020c8 <__alt_mem_onchip_mem+0xff7fa0c8>
  802248:	8808d0fa 	srli	r4,r17,3
  80224c:	20800044 	addi	r2,r4,1
  802250:	1085883a 	add	r2,r2,r2
  802254:	003e9006 	br	801c98 <__alt_mem_onchip_mem+0xff7f9c98>

00802258 <memchr>:
  802258:	208000cc 	andi	r2,r4,3
  80225c:	280f883a 	mov	r7,r5
  802260:	10003426 	beq	r2,zero,802334 <memchr+0xdc>
  802264:	30bfffc4 	addi	r2,r6,-1
  802268:	30001a26 	beq	r6,zero,8022d4 <memchr+0x7c>
  80226c:	20c00003 	ldbu	r3,0(r4)
  802270:	29803fcc 	andi	r6,r5,255
  802274:	30c0051e 	bne	r6,r3,80228c <memchr+0x34>
  802278:	00001806 	br	8022dc <memchr+0x84>
  80227c:	10001526 	beq	r2,zero,8022d4 <memchr+0x7c>
  802280:	20c00003 	ldbu	r3,0(r4)
  802284:	10bfffc4 	addi	r2,r2,-1
  802288:	30c01426 	beq	r6,r3,8022dc <memchr+0x84>
  80228c:	21000044 	addi	r4,r4,1
  802290:	20c000cc 	andi	r3,r4,3
  802294:	183ff91e 	bne	r3,zero,80227c <__alt_mem_onchip_mem+0xff7fa27c>
  802298:	020000c4 	movi	r8,3
  80229c:	40801136 	bltu	r8,r2,8022e4 <memchr+0x8c>
  8022a0:	10000c26 	beq	r2,zero,8022d4 <memchr+0x7c>
  8022a4:	20c00003 	ldbu	r3,0(r4)
  8022a8:	29403fcc 	andi	r5,r5,255
  8022ac:	28c00b26 	beq	r5,r3,8022dc <memchr+0x84>
  8022b0:	20c00044 	addi	r3,r4,1
  8022b4:	39803fcc 	andi	r6,r7,255
  8022b8:	2089883a 	add	r4,r4,r2
  8022bc:	00000306 	br	8022cc <memchr+0x74>
  8022c0:	18c00044 	addi	r3,r3,1
  8022c4:	197fffc3 	ldbu	r5,-1(r3)
  8022c8:	31400526 	beq	r6,r5,8022e0 <memchr+0x88>
  8022cc:	1805883a 	mov	r2,r3
  8022d0:	20fffb1e 	bne	r4,r3,8022c0 <__alt_mem_onchip_mem+0xff7fa2c0>
  8022d4:	0005883a 	mov	r2,zero
  8022d8:	f800283a 	ret
  8022dc:	2005883a 	mov	r2,r4
  8022e0:	f800283a 	ret
  8022e4:	28c03fcc 	andi	r3,r5,255
  8022e8:	1812923a 	slli	r9,r3,8
  8022ec:	02ffbff4 	movhi	r11,65279
  8022f0:	02a02074 	movhi	r10,32897
  8022f4:	48d2b03a 	or	r9,r9,r3
  8022f8:	4806943a 	slli	r3,r9,16
  8022fc:	5affbfc4 	addi	r11,r11,-257
  802300:	52a02004 	addi	r10,r10,-32640
  802304:	48d2b03a 	or	r9,r9,r3
  802308:	20c00017 	ldw	r3,0(r4)
  80230c:	48c6f03a 	xor	r3,r9,r3
  802310:	1acd883a 	add	r6,r3,r11
  802314:	00c6303a 	nor	r3,zero,r3
  802318:	30c6703a 	and	r3,r6,r3
  80231c:	1a86703a 	and	r3,r3,r10
  802320:	183fe01e 	bne	r3,zero,8022a4 <__alt_mem_onchip_mem+0xff7fa2a4>
  802324:	10bfff04 	addi	r2,r2,-4
  802328:	21000104 	addi	r4,r4,4
  80232c:	40bff636 	bltu	r8,r2,802308 <__alt_mem_onchip_mem+0xff7fa308>
  802330:	003fdb06 	br	8022a0 <__alt_mem_onchip_mem+0xff7fa2a0>
  802334:	3005883a 	mov	r2,r6
  802338:	003fd706 	br	802298 <__alt_mem_onchip_mem+0xff7fa298>

0080233c <memcpy>:
  80233c:	defffd04 	addi	sp,sp,-12
  802340:	dfc00215 	stw	ra,8(sp)
  802344:	dc400115 	stw	r17,4(sp)
  802348:	dc000015 	stw	r16,0(sp)
  80234c:	00c003c4 	movi	r3,15
  802350:	2005883a 	mov	r2,r4
  802354:	1980452e 	bgeu	r3,r6,80246c <memcpy+0x130>
  802358:	2906b03a 	or	r3,r5,r4
  80235c:	18c000cc 	andi	r3,r3,3
  802360:	1800441e 	bne	r3,zero,802474 <memcpy+0x138>
  802364:	347ffc04 	addi	r17,r6,-16
  802368:	8822d13a 	srli	r17,r17,4
  80236c:	28c00104 	addi	r3,r5,4
  802370:	23400104 	addi	r13,r4,4
  802374:	8820913a 	slli	r16,r17,4
  802378:	2b000204 	addi	r12,r5,8
  80237c:	22c00204 	addi	r11,r4,8
  802380:	84000504 	addi	r16,r16,20
  802384:	2a800304 	addi	r10,r5,12
  802388:	22400304 	addi	r9,r4,12
  80238c:	2c21883a 	add	r16,r5,r16
  802390:	2811883a 	mov	r8,r5
  802394:	200f883a 	mov	r7,r4
  802398:	41000017 	ldw	r4,0(r8)
  80239c:	1fc00017 	ldw	ra,0(r3)
  8023a0:	63c00017 	ldw	r15,0(r12)
  8023a4:	39000015 	stw	r4,0(r7)
  8023a8:	53800017 	ldw	r14,0(r10)
  8023ac:	6fc00015 	stw	ra,0(r13)
  8023b0:	5bc00015 	stw	r15,0(r11)
  8023b4:	4b800015 	stw	r14,0(r9)
  8023b8:	18c00404 	addi	r3,r3,16
  8023bc:	39c00404 	addi	r7,r7,16
  8023c0:	42000404 	addi	r8,r8,16
  8023c4:	6b400404 	addi	r13,r13,16
  8023c8:	63000404 	addi	r12,r12,16
  8023cc:	5ac00404 	addi	r11,r11,16
  8023d0:	52800404 	addi	r10,r10,16
  8023d4:	4a400404 	addi	r9,r9,16
  8023d8:	1c3fef1e 	bne	r3,r16,802398 <__alt_mem_onchip_mem+0xff7fa398>
  8023dc:	89c00044 	addi	r7,r17,1
  8023e0:	380e913a 	slli	r7,r7,4
  8023e4:	310003cc 	andi	r4,r6,15
  8023e8:	02c000c4 	movi	r11,3
  8023ec:	11c7883a 	add	r3,r2,r7
  8023f0:	29cb883a 	add	r5,r5,r7
  8023f4:	5900212e 	bgeu	r11,r4,80247c <memcpy+0x140>
  8023f8:	1813883a 	mov	r9,r3
  8023fc:	2811883a 	mov	r8,r5
  802400:	200f883a 	mov	r7,r4
  802404:	42800017 	ldw	r10,0(r8)
  802408:	4a400104 	addi	r9,r9,4
  80240c:	39ffff04 	addi	r7,r7,-4
  802410:	4abfff15 	stw	r10,-4(r9)
  802414:	42000104 	addi	r8,r8,4
  802418:	59fffa36 	bltu	r11,r7,802404 <__alt_mem_onchip_mem+0xff7fa404>
  80241c:	213fff04 	addi	r4,r4,-4
  802420:	2008d0ba 	srli	r4,r4,2
  802424:	318000cc 	andi	r6,r6,3
  802428:	21000044 	addi	r4,r4,1
  80242c:	2109883a 	add	r4,r4,r4
  802430:	2109883a 	add	r4,r4,r4
  802434:	1907883a 	add	r3,r3,r4
  802438:	290b883a 	add	r5,r5,r4
  80243c:	30000626 	beq	r6,zero,802458 <memcpy+0x11c>
  802440:	198d883a 	add	r6,r3,r6
  802444:	29c00003 	ldbu	r7,0(r5)
  802448:	18c00044 	addi	r3,r3,1
  80244c:	29400044 	addi	r5,r5,1
  802450:	19ffffc5 	stb	r7,-1(r3)
  802454:	19bffb1e 	bne	r3,r6,802444 <__alt_mem_onchip_mem+0xff7fa444>
  802458:	dfc00217 	ldw	ra,8(sp)
  80245c:	dc400117 	ldw	r17,4(sp)
  802460:	dc000017 	ldw	r16,0(sp)
  802464:	dec00304 	addi	sp,sp,12
  802468:	f800283a 	ret
  80246c:	2007883a 	mov	r3,r4
  802470:	003ff206 	br	80243c <__alt_mem_onchip_mem+0xff7fa43c>
  802474:	2007883a 	mov	r3,r4
  802478:	003ff106 	br	802440 <__alt_mem_onchip_mem+0xff7fa440>
  80247c:	200d883a 	mov	r6,r4
  802480:	003fee06 	br	80243c <__alt_mem_onchip_mem+0xff7fa43c>

00802484 <memmove>:
  802484:	2005883a 	mov	r2,r4
  802488:	29000b2e 	bgeu	r5,r4,8024b8 <memmove+0x34>
  80248c:	298f883a 	add	r7,r5,r6
  802490:	21c0092e 	bgeu	r4,r7,8024b8 <memmove+0x34>
  802494:	2187883a 	add	r3,r4,r6
  802498:	198bc83a 	sub	r5,r3,r6
  80249c:	30004826 	beq	r6,zero,8025c0 <memmove+0x13c>
  8024a0:	39ffffc4 	addi	r7,r7,-1
  8024a4:	39000003 	ldbu	r4,0(r7)
  8024a8:	18ffffc4 	addi	r3,r3,-1
  8024ac:	19000005 	stb	r4,0(r3)
  8024b0:	28fffb1e 	bne	r5,r3,8024a0 <__alt_mem_onchip_mem+0xff7fa4a0>
  8024b4:	f800283a 	ret
  8024b8:	00c003c4 	movi	r3,15
  8024bc:	1980412e 	bgeu	r3,r6,8025c4 <memmove+0x140>
  8024c0:	2886b03a 	or	r3,r5,r2
  8024c4:	18c000cc 	andi	r3,r3,3
  8024c8:	1800401e 	bne	r3,zero,8025cc <memmove+0x148>
  8024cc:	33fffc04 	addi	r15,r6,-16
  8024d0:	781ed13a 	srli	r15,r15,4
  8024d4:	28c00104 	addi	r3,r5,4
  8024d8:	13400104 	addi	r13,r2,4
  8024dc:	781c913a 	slli	r14,r15,4
  8024e0:	2b000204 	addi	r12,r5,8
  8024e4:	12c00204 	addi	r11,r2,8
  8024e8:	73800504 	addi	r14,r14,20
  8024ec:	2a800304 	addi	r10,r5,12
  8024f0:	12400304 	addi	r9,r2,12
  8024f4:	2b9d883a 	add	r14,r5,r14
  8024f8:	2811883a 	mov	r8,r5
  8024fc:	100f883a 	mov	r7,r2
  802500:	41000017 	ldw	r4,0(r8)
  802504:	39c00404 	addi	r7,r7,16
  802508:	18c00404 	addi	r3,r3,16
  80250c:	393ffc15 	stw	r4,-16(r7)
  802510:	193ffc17 	ldw	r4,-16(r3)
  802514:	6b400404 	addi	r13,r13,16
  802518:	5ac00404 	addi	r11,r11,16
  80251c:	693ffc15 	stw	r4,-16(r13)
  802520:	61000017 	ldw	r4,0(r12)
  802524:	4a400404 	addi	r9,r9,16
  802528:	42000404 	addi	r8,r8,16
  80252c:	593ffc15 	stw	r4,-16(r11)
  802530:	51000017 	ldw	r4,0(r10)
  802534:	63000404 	addi	r12,r12,16
  802538:	52800404 	addi	r10,r10,16
  80253c:	493ffc15 	stw	r4,-16(r9)
  802540:	1bbfef1e 	bne	r3,r14,802500 <__alt_mem_onchip_mem+0xff7fa500>
  802544:	79000044 	addi	r4,r15,1
  802548:	2008913a 	slli	r4,r4,4
  80254c:	328003cc 	andi	r10,r6,15
  802550:	02c000c4 	movi	r11,3
  802554:	1107883a 	add	r3,r2,r4
  802558:	290b883a 	add	r5,r5,r4
  80255c:	5a801e2e 	bgeu	r11,r10,8025d8 <memmove+0x154>
  802560:	1813883a 	mov	r9,r3
  802564:	2811883a 	mov	r8,r5
  802568:	500f883a 	mov	r7,r10
  80256c:	41000017 	ldw	r4,0(r8)
  802570:	4a400104 	addi	r9,r9,4
  802574:	39ffff04 	addi	r7,r7,-4
  802578:	493fff15 	stw	r4,-4(r9)
  80257c:	42000104 	addi	r8,r8,4
  802580:	59fffa36 	bltu	r11,r7,80256c <__alt_mem_onchip_mem+0xff7fa56c>
  802584:	513fff04 	addi	r4,r10,-4
  802588:	2008d0ba 	srli	r4,r4,2
  80258c:	318000cc 	andi	r6,r6,3
  802590:	21000044 	addi	r4,r4,1
  802594:	2109883a 	add	r4,r4,r4
  802598:	2109883a 	add	r4,r4,r4
  80259c:	1907883a 	add	r3,r3,r4
  8025a0:	290b883a 	add	r5,r5,r4
  8025a4:	30000b26 	beq	r6,zero,8025d4 <memmove+0x150>
  8025a8:	198d883a 	add	r6,r3,r6
  8025ac:	29c00003 	ldbu	r7,0(r5)
  8025b0:	18c00044 	addi	r3,r3,1
  8025b4:	29400044 	addi	r5,r5,1
  8025b8:	19ffffc5 	stb	r7,-1(r3)
  8025bc:	19bffb1e 	bne	r3,r6,8025ac <__alt_mem_onchip_mem+0xff7fa5ac>
  8025c0:	f800283a 	ret
  8025c4:	1007883a 	mov	r3,r2
  8025c8:	003ff606 	br	8025a4 <__alt_mem_onchip_mem+0xff7fa5a4>
  8025cc:	1007883a 	mov	r3,r2
  8025d0:	003ff506 	br	8025a8 <__alt_mem_onchip_mem+0xff7fa5a8>
  8025d4:	f800283a 	ret
  8025d8:	500d883a 	mov	r6,r10
  8025dc:	003ff106 	br	8025a4 <__alt_mem_onchip_mem+0xff7fa5a4>

008025e0 <memset>:
  8025e0:	20c000cc 	andi	r3,r4,3
  8025e4:	2005883a 	mov	r2,r4
  8025e8:	18004426 	beq	r3,zero,8026fc <memset+0x11c>
  8025ec:	31ffffc4 	addi	r7,r6,-1
  8025f0:	30004026 	beq	r6,zero,8026f4 <memset+0x114>
  8025f4:	2813883a 	mov	r9,r5
  8025f8:	200d883a 	mov	r6,r4
  8025fc:	2007883a 	mov	r3,r4
  802600:	00000406 	br	802614 <memset+0x34>
  802604:	3a3fffc4 	addi	r8,r7,-1
  802608:	31800044 	addi	r6,r6,1
  80260c:	38003926 	beq	r7,zero,8026f4 <memset+0x114>
  802610:	400f883a 	mov	r7,r8
  802614:	18c00044 	addi	r3,r3,1
  802618:	32400005 	stb	r9,0(r6)
  80261c:	1a0000cc 	andi	r8,r3,3
  802620:	403ff81e 	bne	r8,zero,802604 <__alt_mem_onchip_mem+0xff7fa604>
  802624:	010000c4 	movi	r4,3
  802628:	21c02d2e 	bgeu	r4,r7,8026e0 <memset+0x100>
  80262c:	29003fcc 	andi	r4,r5,255
  802630:	200c923a 	slli	r6,r4,8
  802634:	3108b03a 	or	r4,r6,r4
  802638:	200c943a 	slli	r6,r4,16
  80263c:	218cb03a 	or	r6,r4,r6
  802640:	010003c4 	movi	r4,15
  802644:	21c0182e 	bgeu	r4,r7,8026a8 <memset+0xc8>
  802648:	3b3ffc04 	addi	r12,r7,-16
  80264c:	6018d13a 	srli	r12,r12,4
  802650:	1a000104 	addi	r8,r3,4
  802654:	1ac00204 	addi	r11,r3,8
  802658:	6008913a 	slli	r4,r12,4
  80265c:	1a800304 	addi	r10,r3,12
  802660:	1813883a 	mov	r9,r3
  802664:	21000504 	addi	r4,r4,20
  802668:	1909883a 	add	r4,r3,r4
  80266c:	49800015 	stw	r6,0(r9)
  802670:	41800015 	stw	r6,0(r8)
  802674:	59800015 	stw	r6,0(r11)
  802678:	51800015 	stw	r6,0(r10)
  80267c:	42000404 	addi	r8,r8,16
  802680:	4a400404 	addi	r9,r9,16
  802684:	5ac00404 	addi	r11,r11,16
  802688:	52800404 	addi	r10,r10,16
  80268c:	413ff71e 	bne	r8,r4,80266c <__alt_mem_onchip_mem+0xff7fa66c>
  802690:	63000044 	addi	r12,r12,1
  802694:	6018913a 	slli	r12,r12,4
  802698:	39c003cc 	andi	r7,r7,15
  80269c:	010000c4 	movi	r4,3
  8026a0:	1b07883a 	add	r3,r3,r12
  8026a4:	21c00e2e 	bgeu	r4,r7,8026e0 <memset+0x100>
  8026a8:	1813883a 	mov	r9,r3
  8026ac:	3811883a 	mov	r8,r7
  8026b0:	010000c4 	movi	r4,3
  8026b4:	49800015 	stw	r6,0(r9)
  8026b8:	423fff04 	addi	r8,r8,-4
  8026bc:	4a400104 	addi	r9,r9,4
  8026c0:	223ffc36 	bltu	r4,r8,8026b4 <__alt_mem_onchip_mem+0xff7fa6b4>
  8026c4:	393fff04 	addi	r4,r7,-4
  8026c8:	2008d0ba 	srli	r4,r4,2
  8026cc:	39c000cc 	andi	r7,r7,3
  8026d0:	21000044 	addi	r4,r4,1
  8026d4:	2109883a 	add	r4,r4,r4
  8026d8:	2109883a 	add	r4,r4,r4
  8026dc:	1907883a 	add	r3,r3,r4
  8026e0:	38000526 	beq	r7,zero,8026f8 <memset+0x118>
  8026e4:	19cf883a 	add	r7,r3,r7
  8026e8:	19400005 	stb	r5,0(r3)
  8026ec:	18c00044 	addi	r3,r3,1
  8026f0:	38fffd1e 	bne	r7,r3,8026e8 <__alt_mem_onchip_mem+0xff7fa6e8>
  8026f4:	f800283a 	ret
  8026f8:	f800283a 	ret
  8026fc:	2007883a 	mov	r3,r4
  802700:	300f883a 	mov	r7,r6
  802704:	003fc706 	br	802624 <__alt_mem_onchip_mem+0xff7fa624>

00802708 <_putc_r>:
  802708:	defffc04 	addi	sp,sp,-16
  80270c:	dc000215 	stw	r16,8(sp)
  802710:	dfc00315 	stw	ra,12(sp)
  802714:	2021883a 	mov	r16,r4
  802718:	20000226 	beq	r4,zero,802724 <_putc_r+0x1c>
  80271c:	20800e17 	ldw	r2,56(r4)
  802720:	10001b26 	beq	r2,zero,802790 <_putc_r+0x88>
  802724:	30800217 	ldw	r2,8(r6)
  802728:	10bfffc4 	addi	r2,r2,-1
  80272c:	30800215 	stw	r2,8(r6)
  802730:	10000a16 	blt	r2,zero,80275c <_putc_r+0x54>
  802734:	30800017 	ldw	r2,0(r6)
  802738:	11400005 	stb	r5,0(r2)
  80273c:	30800017 	ldw	r2,0(r6)
  802740:	10c00044 	addi	r3,r2,1
  802744:	30c00015 	stw	r3,0(r6)
  802748:	10800003 	ldbu	r2,0(r2)
  80274c:	dfc00317 	ldw	ra,12(sp)
  802750:	dc000217 	ldw	r16,8(sp)
  802754:	dec00404 	addi	sp,sp,16
  802758:	f800283a 	ret
  80275c:	30c00617 	ldw	r3,24(r6)
  802760:	10c00616 	blt	r2,r3,80277c <_putc_r+0x74>
  802764:	30800017 	ldw	r2,0(r6)
  802768:	00c00284 	movi	r3,10
  80276c:	11400005 	stb	r5,0(r2)
  802770:	30800017 	ldw	r2,0(r6)
  802774:	11400003 	ldbu	r5,0(r2)
  802778:	28fff11e 	bne	r5,r3,802740 <__alt_mem_onchip_mem+0xff7fa740>
  80277c:	8009883a 	mov	r4,r16
  802780:	dfc00317 	ldw	ra,12(sp)
  802784:	dc000217 	ldw	r16,8(sp)
  802788:	dec00404 	addi	sp,sp,16
  80278c:	0802f641 	jmpi	802f64 <__swbuf_r>
  802790:	d9400015 	stw	r5,0(sp)
  802794:	d9800115 	stw	r6,4(sp)
  802798:	08013b80 	call	8013b8 <__sinit>
  80279c:	d9800117 	ldw	r6,4(sp)
  8027a0:	d9400017 	ldw	r5,0(sp)
  8027a4:	003fdf06 	br	802724 <__alt_mem_onchip_mem+0xff7fa724>

008027a8 <putc>:
  8027a8:	00802074 	movhi	r2,129
  8027ac:	defffc04 	addi	sp,sp,-16
  8027b0:	10a88e04 	addi	r2,r2,-24008
  8027b4:	dc000115 	stw	r16,4(sp)
  8027b8:	14000017 	ldw	r16,0(r2)
  8027bc:	dc400215 	stw	r17,8(sp)
  8027c0:	dfc00315 	stw	ra,12(sp)
  8027c4:	2023883a 	mov	r17,r4
  8027c8:	80000226 	beq	r16,zero,8027d4 <putc+0x2c>
  8027cc:	80800e17 	ldw	r2,56(r16)
  8027d0:	10001a26 	beq	r2,zero,80283c <putc+0x94>
  8027d4:	28800217 	ldw	r2,8(r5)
  8027d8:	10bfffc4 	addi	r2,r2,-1
  8027dc:	28800215 	stw	r2,8(r5)
  8027e0:	10000b16 	blt	r2,zero,802810 <putc+0x68>
  8027e4:	28800017 	ldw	r2,0(r5)
  8027e8:	14400005 	stb	r17,0(r2)
  8027ec:	28800017 	ldw	r2,0(r5)
  8027f0:	10c00044 	addi	r3,r2,1
  8027f4:	28c00015 	stw	r3,0(r5)
  8027f8:	10800003 	ldbu	r2,0(r2)
  8027fc:	dfc00317 	ldw	ra,12(sp)
  802800:	dc400217 	ldw	r17,8(sp)
  802804:	dc000117 	ldw	r16,4(sp)
  802808:	dec00404 	addi	sp,sp,16
  80280c:	f800283a 	ret
  802810:	28c00617 	ldw	r3,24(r5)
  802814:	10c00e16 	blt	r2,r3,802850 <putc+0xa8>
  802818:	28800017 	ldw	r2,0(r5)
  80281c:	01000284 	movi	r4,10
  802820:	14400005 	stb	r17,0(r2)
  802824:	28800017 	ldw	r2,0(r5)
  802828:	10c00003 	ldbu	r3,0(r2)
  80282c:	193ff01e 	bne	r3,r4,8027f0 <__alt_mem_onchip_mem+0xff7fa7f0>
  802830:	280d883a 	mov	r6,r5
  802834:	180b883a 	mov	r5,r3
  802838:	00000706 	br	802858 <putc+0xb0>
  80283c:	8009883a 	mov	r4,r16
  802840:	d9400015 	stw	r5,0(sp)
  802844:	08013b80 	call	8013b8 <__sinit>
  802848:	d9400017 	ldw	r5,0(sp)
  80284c:	003fe106 	br	8027d4 <__alt_mem_onchip_mem+0xff7fa7d4>
  802850:	280d883a 	mov	r6,r5
  802854:	880b883a 	mov	r5,r17
  802858:	8009883a 	mov	r4,r16
  80285c:	dfc00317 	ldw	ra,12(sp)
  802860:	dc400217 	ldw	r17,8(sp)
  802864:	dc000117 	ldw	r16,4(sp)
  802868:	dec00404 	addi	sp,sp,16
  80286c:	0802f641 	jmpi	802f64 <__swbuf_r>

00802870 <_realloc_r>:
  802870:	defff604 	addi	sp,sp,-40
  802874:	dc800215 	stw	r18,8(sp)
  802878:	dfc00915 	stw	ra,36(sp)
  80287c:	df000815 	stw	fp,32(sp)
  802880:	ddc00715 	stw	r23,28(sp)
  802884:	dd800615 	stw	r22,24(sp)
  802888:	dd400515 	stw	r21,20(sp)
  80288c:	dd000415 	stw	r20,16(sp)
  802890:	dcc00315 	stw	r19,12(sp)
  802894:	dc400115 	stw	r17,4(sp)
  802898:	dc000015 	stw	r16,0(sp)
  80289c:	3025883a 	mov	r18,r6
  8028a0:	2800b726 	beq	r5,zero,802b80 <_realloc_r+0x310>
  8028a4:	282b883a 	mov	r21,r5
  8028a8:	2029883a 	mov	r20,r4
  8028ac:	08047ac0 	call	8047ac <__malloc_lock>
  8028b0:	a8bfff17 	ldw	r2,-4(r21)
  8028b4:	043fff04 	movi	r16,-4
  8028b8:	90c002c4 	addi	r3,r18,11
  8028bc:	01000584 	movi	r4,22
  8028c0:	acfffe04 	addi	r19,r21,-8
  8028c4:	1420703a 	and	r16,r2,r16
  8028c8:	20c0332e 	bgeu	r4,r3,802998 <_realloc_r+0x128>
  8028cc:	047ffe04 	movi	r17,-8
  8028d0:	1c62703a 	and	r17,r3,r17
  8028d4:	8807883a 	mov	r3,r17
  8028d8:	88005816 	blt	r17,zero,802a3c <_realloc_r+0x1cc>
  8028dc:	8c805736 	bltu	r17,r18,802a3c <_realloc_r+0x1cc>
  8028e0:	80c0300e 	bge	r16,r3,8029a4 <_realloc_r+0x134>
  8028e4:	07002074 	movhi	fp,129
  8028e8:	e7229004 	addi	fp,fp,-30144
  8028ec:	e1c00217 	ldw	r7,8(fp)
  8028f0:	9c09883a 	add	r4,r19,r16
  8028f4:	22000117 	ldw	r8,4(r4)
  8028f8:	21c06326 	beq	r4,r7,802a88 <_realloc_r+0x218>
  8028fc:	017fff84 	movi	r5,-2
  802900:	414a703a 	and	r5,r8,r5
  802904:	214b883a 	add	r5,r4,r5
  802908:	29800117 	ldw	r6,4(r5)
  80290c:	3180004c 	andi	r6,r6,1
  802910:	30003f26 	beq	r6,zero,802a10 <_realloc_r+0x1a0>
  802914:	1080004c 	andi	r2,r2,1
  802918:	10008326 	beq	r2,zero,802b28 <_realloc_r+0x2b8>
  80291c:	900b883a 	mov	r5,r18
  802920:	a009883a 	mov	r4,r20
  802924:	0801a4c0 	call	801a4c <_malloc_r>
  802928:	1025883a 	mov	r18,r2
  80292c:	10011e26 	beq	r2,zero,802da8 <_realloc_r+0x538>
  802930:	a93fff17 	ldw	r4,-4(r21)
  802934:	10fffe04 	addi	r3,r2,-8
  802938:	00bfff84 	movi	r2,-2
  80293c:	2084703a 	and	r2,r4,r2
  802940:	9885883a 	add	r2,r19,r2
  802944:	1880ee26 	beq	r3,r2,802d00 <_realloc_r+0x490>
  802948:	81bfff04 	addi	r6,r16,-4
  80294c:	00800904 	movi	r2,36
  802950:	1180b836 	bltu	r2,r6,802c34 <_realloc_r+0x3c4>
  802954:	00c004c4 	movi	r3,19
  802958:	19809636 	bltu	r3,r6,802bb4 <_realloc_r+0x344>
  80295c:	9005883a 	mov	r2,r18
  802960:	a807883a 	mov	r3,r21
  802964:	19000017 	ldw	r4,0(r3)
  802968:	11000015 	stw	r4,0(r2)
  80296c:	19000117 	ldw	r4,4(r3)
  802970:	11000115 	stw	r4,4(r2)
  802974:	18c00217 	ldw	r3,8(r3)
  802978:	10c00215 	stw	r3,8(r2)
  80297c:	a80b883a 	mov	r5,r21
  802980:	a009883a 	mov	r4,r20
  802984:	08037940 	call	803794 <_free_r>
  802988:	a009883a 	mov	r4,r20
  80298c:	08047d00 	call	8047d0 <__malloc_unlock>
  802990:	9005883a 	mov	r2,r18
  802994:	00001206 	br	8029e0 <_realloc_r+0x170>
  802998:	00c00404 	movi	r3,16
  80299c:	1823883a 	mov	r17,r3
  8029a0:	003fce06 	br	8028dc <__alt_mem_onchip_mem+0xff7fa8dc>
  8029a4:	a825883a 	mov	r18,r21
  8029a8:	8445c83a 	sub	r2,r16,r17
  8029ac:	00c003c4 	movi	r3,15
  8029b0:	18802636 	bltu	r3,r2,802a4c <_realloc_r+0x1dc>
  8029b4:	99800117 	ldw	r6,4(r19)
  8029b8:	9c07883a 	add	r3,r19,r16
  8029bc:	3180004c 	andi	r6,r6,1
  8029c0:	3420b03a 	or	r16,r6,r16
  8029c4:	9c000115 	stw	r16,4(r19)
  8029c8:	18800117 	ldw	r2,4(r3)
  8029cc:	10800054 	ori	r2,r2,1
  8029d0:	18800115 	stw	r2,4(r3)
  8029d4:	a009883a 	mov	r4,r20
  8029d8:	08047d00 	call	8047d0 <__malloc_unlock>
  8029dc:	9005883a 	mov	r2,r18
  8029e0:	dfc00917 	ldw	ra,36(sp)
  8029e4:	df000817 	ldw	fp,32(sp)
  8029e8:	ddc00717 	ldw	r23,28(sp)
  8029ec:	dd800617 	ldw	r22,24(sp)
  8029f0:	dd400517 	ldw	r21,20(sp)
  8029f4:	dd000417 	ldw	r20,16(sp)
  8029f8:	dcc00317 	ldw	r19,12(sp)
  8029fc:	dc800217 	ldw	r18,8(sp)
  802a00:	dc400117 	ldw	r17,4(sp)
  802a04:	dc000017 	ldw	r16,0(sp)
  802a08:	dec00a04 	addi	sp,sp,40
  802a0c:	f800283a 	ret
  802a10:	017fff04 	movi	r5,-4
  802a14:	414a703a 	and	r5,r8,r5
  802a18:	814d883a 	add	r6,r16,r5
  802a1c:	30c01f16 	blt	r6,r3,802a9c <_realloc_r+0x22c>
  802a20:	20800317 	ldw	r2,12(r4)
  802a24:	20c00217 	ldw	r3,8(r4)
  802a28:	a825883a 	mov	r18,r21
  802a2c:	3021883a 	mov	r16,r6
  802a30:	18800315 	stw	r2,12(r3)
  802a34:	10c00215 	stw	r3,8(r2)
  802a38:	003fdb06 	br	8029a8 <__alt_mem_onchip_mem+0xff7fa9a8>
  802a3c:	00800304 	movi	r2,12
  802a40:	a0800015 	stw	r2,0(r20)
  802a44:	0005883a 	mov	r2,zero
  802a48:	003fe506 	br	8029e0 <__alt_mem_onchip_mem+0xff7fa9e0>
  802a4c:	98c00117 	ldw	r3,4(r19)
  802a50:	9c4b883a 	add	r5,r19,r17
  802a54:	11000054 	ori	r4,r2,1
  802a58:	18c0004c 	andi	r3,r3,1
  802a5c:	1c62b03a 	or	r17,r3,r17
  802a60:	9c400115 	stw	r17,4(r19)
  802a64:	29000115 	stw	r4,4(r5)
  802a68:	2885883a 	add	r2,r5,r2
  802a6c:	10c00117 	ldw	r3,4(r2)
  802a70:	29400204 	addi	r5,r5,8
  802a74:	a009883a 	mov	r4,r20
  802a78:	18c00054 	ori	r3,r3,1
  802a7c:	10c00115 	stw	r3,4(r2)
  802a80:	08037940 	call	803794 <_free_r>
  802a84:	003fd306 	br	8029d4 <__alt_mem_onchip_mem+0xff7fa9d4>
  802a88:	017fff04 	movi	r5,-4
  802a8c:	414a703a 	and	r5,r8,r5
  802a90:	89800404 	addi	r6,r17,16
  802a94:	8151883a 	add	r8,r16,r5
  802a98:	4180590e 	bge	r8,r6,802c00 <_realloc_r+0x390>
  802a9c:	1080004c 	andi	r2,r2,1
  802aa0:	103f9e1e 	bne	r2,zero,80291c <__alt_mem_onchip_mem+0xff7fa91c>
  802aa4:	adbffe17 	ldw	r22,-8(r21)
  802aa8:	00bfff04 	movi	r2,-4
  802aac:	9dadc83a 	sub	r22,r19,r22
  802ab0:	b1800117 	ldw	r6,4(r22)
  802ab4:	3084703a 	and	r2,r6,r2
  802ab8:	20002026 	beq	r4,zero,802b3c <_realloc_r+0x2cc>
  802abc:	80af883a 	add	r23,r16,r2
  802ac0:	b96f883a 	add	r23,r23,r5
  802ac4:	21c05f26 	beq	r4,r7,802c44 <_realloc_r+0x3d4>
  802ac8:	b8c01c16 	blt	r23,r3,802b3c <_realloc_r+0x2cc>
  802acc:	20800317 	ldw	r2,12(r4)
  802ad0:	20c00217 	ldw	r3,8(r4)
  802ad4:	81bfff04 	addi	r6,r16,-4
  802ad8:	01000904 	movi	r4,36
  802adc:	18800315 	stw	r2,12(r3)
  802ae0:	10c00215 	stw	r3,8(r2)
  802ae4:	b0c00217 	ldw	r3,8(r22)
  802ae8:	b0800317 	ldw	r2,12(r22)
  802aec:	b4800204 	addi	r18,r22,8
  802af0:	18800315 	stw	r2,12(r3)
  802af4:	10c00215 	stw	r3,8(r2)
  802af8:	21801b36 	bltu	r4,r6,802b68 <_realloc_r+0x2f8>
  802afc:	008004c4 	movi	r2,19
  802b00:	1180352e 	bgeu	r2,r6,802bd8 <_realloc_r+0x368>
  802b04:	a8800017 	ldw	r2,0(r21)
  802b08:	b0800215 	stw	r2,8(r22)
  802b0c:	a8800117 	ldw	r2,4(r21)
  802b10:	b0800315 	stw	r2,12(r22)
  802b14:	008006c4 	movi	r2,27
  802b18:	11807f36 	bltu	r2,r6,802d18 <_realloc_r+0x4a8>
  802b1c:	b0800404 	addi	r2,r22,16
  802b20:	ad400204 	addi	r21,r21,8
  802b24:	00002d06 	br	802bdc <_realloc_r+0x36c>
  802b28:	adbffe17 	ldw	r22,-8(r21)
  802b2c:	00bfff04 	movi	r2,-4
  802b30:	9dadc83a 	sub	r22,r19,r22
  802b34:	b1000117 	ldw	r4,4(r22)
  802b38:	2084703a 	and	r2,r4,r2
  802b3c:	b03f7726 	beq	r22,zero,80291c <__alt_mem_onchip_mem+0xff7fa91c>
  802b40:	80af883a 	add	r23,r16,r2
  802b44:	b8ff7516 	blt	r23,r3,80291c <__alt_mem_onchip_mem+0xff7fa91c>
  802b48:	b0800317 	ldw	r2,12(r22)
  802b4c:	b0c00217 	ldw	r3,8(r22)
  802b50:	81bfff04 	addi	r6,r16,-4
  802b54:	01000904 	movi	r4,36
  802b58:	18800315 	stw	r2,12(r3)
  802b5c:	10c00215 	stw	r3,8(r2)
  802b60:	b4800204 	addi	r18,r22,8
  802b64:	21bfe52e 	bgeu	r4,r6,802afc <__alt_mem_onchip_mem+0xff7faafc>
  802b68:	a80b883a 	mov	r5,r21
  802b6c:	9009883a 	mov	r4,r18
  802b70:	08024840 	call	802484 <memmove>
  802b74:	b821883a 	mov	r16,r23
  802b78:	b027883a 	mov	r19,r22
  802b7c:	003f8a06 	br	8029a8 <__alt_mem_onchip_mem+0xff7fa9a8>
  802b80:	300b883a 	mov	r5,r6
  802b84:	dfc00917 	ldw	ra,36(sp)
  802b88:	df000817 	ldw	fp,32(sp)
  802b8c:	ddc00717 	ldw	r23,28(sp)
  802b90:	dd800617 	ldw	r22,24(sp)
  802b94:	dd400517 	ldw	r21,20(sp)
  802b98:	dd000417 	ldw	r20,16(sp)
  802b9c:	dcc00317 	ldw	r19,12(sp)
  802ba0:	dc800217 	ldw	r18,8(sp)
  802ba4:	dc400117 	ldw	r17,4(sp)
  802ba8:	dc000017 	ldw	r16,0(sp)
  802bac:	dec00a04 	addi	sp,sp,40
  802bb0:	0801a4c1 	jmpi	801a4c <_malloc_r>
  802bb4:	a8c00017 	ldw	r3,0(r21)
  802bb8:	90c00015 	stw	r3,0(r18)
  802bbc:	a8c00117 	ldw	r3,4(r21)
  802bc0:	90c00115 	stw	r3,4(r18)
  802bc4:	00c006c4 	movi	r3,27
  802bc8:	19804536 	bltu	r3,r6,802ce0 <_realloc_r+0x470>
  802bcc:	90800204 	addi	r2,r18,8
  802bd0:	a8c00204 	addi	r3,r21,8
  802bd4:	003f6306 	br	802964 <__alt_mem_onchip_mem+0xff7fa964>
  802bd8:	9005883a 	mov	r2,r18
  802bdc:	a8c00017 	ldw	r3,0(r21)
  802be0:	b821883a 	mov	r16,r23
  802be4:	b027883a 	mov	r19,r22
  802be8:	10c00015 	stw	r3,0(r2)
  802bec:	a8c00117 	ldw	r3,4(r21)
  802bf0:	10c00115 	stw	r3,4(r2)
  802bf4:	a8c00217 	ldw	r3,8(r21)
  802bf8:	10c00215 	stw	r3,8(r2)
  802bfc:	003f6a06 	br	8029a8 <__alt_mem_onchip_mem+0xff7fa9a8>
  802c00:	9c67883a 	add	r19,r19,r17
  802c04:	4445c83a 	sub	r2,r8,r17
  802c08:	e4c00215 	stw	r19,8(fp)
  802c0c:	10800054 	ori	r2,r2,1
  802c10:	98800115 	stw	r2,4(r19)
  802c14:	a8bfff17 	ldw	r2,-4(r21)
  802c18:	a009883a 	mov	r4,r20
  802c1c:	1080004c 	andi	r2,r2,1
  802c20:	1462b03a 	or	r17,r2,r17
  802c24:	ac7fff15 	stw	r17,-4(r21)
  802c28:	08047d00 	call	8047d0 <__malloc_unlock>
  802c2c:	a805883a 	mov	r2,r21
  802c30:	003f6b06 	br	8029e0 <__alt_mem_onchip_mem+0xff7fa9e0>
  802c34:	a80b883a 	mov	r5,r21
  802c38:	9009883a 	mov	r4,r18
  802c3c:	08024840 	call	802484 <memmove>
  802c40:	003f4e06 	br	80297c <__alt_mem_onchip_mem+0xff7fa97c>
  802c44:	89000404 	addi	r4,r17,16
  802c48:	b93fbc16 	blt	r23,r4,802b3c <__alt_mem_onchip_mem+0xff7fab3c>
  802c4c:	b0800317 	ldw	r2,12(r22)
  802c50:	b0c00217 	ldw	r3,8(r22)
  802c54:	81bfff04 	addi	r6,r16,-4
  802c58:	01000904 	movi	r4,36
  802c5c:	18800315 	stw	r2,12(r3)
  802c60:	10c00215 	stw	r3,8(r2)
  802c64:	b4800204 	addi	r18,r22,8
  802c68:	21804336 	bltu	r4,r6,802d78 <_realloc_r+0x508>
  802c6c:	008004c4 	movi	r2,19
  802c70:	11803f2e 	bgeu	r2,r6,802d70 <_realloc_r+0x500>
  802c74:	a8800017 	ldw	r2,0(r21)
  802c78:	b0800215 	stw	r2,8(r22)
  802c7c:	a8800117 	ldw	r2,4(r21)
  802c80:	b0800315 	stw	r2,12(r22)
  802c84:	008006c4 	movi	r2,27
  802c88:	11803f36 	bltu	r2,r6,802d88 <_realloc_r+0x518>
  802c8c:	b0800404 	addi	r2,r22,16
  802c90:	ad400204 	addi	r21,r21,8
  802c94:	a8c00017 	ldw	r3,0(r21)
  802c98:	10c00015 	stw	r3,0(r2)
  802c9c:	a8c00117 	ldw	r3,4(r21)
  802ca0:	10c00115 	stw	r3,4(r2)
  802ca4:	a8c00217 	ldw	r3,8(r21)
  802ca8:	10c00215 	stw	r3,8(r2)
  802cac:	b447883a 	add	r3,r22,r17
  802cb0:	bc45c83a 	sub	r2,r23,r17
  802cb4:	e0c00215 	stw	r3,8(fp)
  802cb8:	10800054 	ori	r2,r2,1
  802cbc:	18800115 	stw	r2,4(r3)
  802cc0:	b0800117 	ldw	r2,4(r22)
  802cc4:	a009883a 	mov	r4,r20
  802cc8:	1080004c 	andi	r2,r2,1
  802ccc:	1462b03a 	or	r17,r2,r17
  802cd0:	b4400115 	stw	r17,4(r22)
  802cd4:	08047d00 	call	8047d0 <__malloc_unlock>
  802cd8:	9005883a 	mov	r2,r18
  802cdc:	003f4006 	br	8029e0 <__alt_mem_onchip_mem+0xff7fa9e0>
  802ce0:	a8c00217 	ldw	r3,8(r21)
  802ce4:	90c00215 	stw	r3,8(r18)
  802ce8:	a8c00317 	ldw	r3,12(r21)
  802cec:	90c00315 	stw	r3,12(r18)
  802cf0:	30801126 	beq	r6,r2,802d38 <_realloc_r+0x4c8>
  802cf4:	90800404 	addi	r2,r18,16
  802cf8:	a8c00404 	addi	r3,r21,16
  802cfc:	003f1906 	br	802964 <__alt_mem_onchip_mem+0xff7fa964>
  802d00:	90ffff17 	ldw	r3,-4(r18)
  802d04:	00bfff04 	movi	r2,-4
  802d08:	a825883a 	mov	r18,r21
  802d0c:	1884703a 	and	r2,r3,r2
  802d10:	80a1883a 	add	r16,r16,r2
  802d14:	003f2406 	br	8029a8 <__alt_mem_onchip_mem+0xff7fa9a8>
  802d18:	a8800217 	ldw	r2,8(r21)
  802d1c:	b0800415 	stw	r2,16(r22)
  802d20:	a8800317 	ldw	r2,12(r21)
  802d24:	b0800515 	stw	r2,20(r22)
  802d28:	31000a26 	beq	r6,r4,802d54 <_realloc_r+0x4e4>
  802d2c:	b0800604 	addi	r2,r22,24
  802d30:	ad400404 	addi	r21,r21,16
  802d34:	003fa906 	br	802bdc <__alt_mem_onchip_mem+0xff7fabdc>
  802d38:	a9000417 	ldw	r4,16(r21)
  802d3c:	90800604 	addi	r2,r18,24
  802d40:	a8c00604 	addi	r3,r21,24
  802d44:	91000415 	stw	r4,16(r18)
  802d48:	a9000517 	ldw	r4,20(r21)
  802d4c:	91000515 	stw	r4,20(r18)
  802d50:	003f0406 	br	802964 <__alt_mem_onchip_mem+0xff7fa964>
  802d54:	a8c00417 	ldw	r3,16(r21)
  802d58:	ad400604 	addi	r21,r21,24
  802d5c:	b0800804 	addi	r2,r22,32
  802d60:	b0c00615 	stw	r3,24(r22)
  802d64:	a8ffff17 	ldw	r3,-4(r21)
  802d68:	b0c00715 	stw	r3,28(r22)
  802d6c:	003f9b06 	br	802bdc <__alt_mem_onchip_mem+0xff7fabdc>
  802d70:	9005883a 	mov	r2,r18
  802d74:	003fc706 	br	802c94 <__alt_mem_onchip_mem+0xff7fac94>
  802d78:	a80b883a 	mov	r5,r21
  802d7c:	9009883a 	mov	r4,r18
  802d80:	08024840 	call	802484 <memmove>
  802d84:	003fc906 	br	802cac <__alt_mem_onchip_mem+0xff7facac>
  802d88:	a8800217 	ldw	r2,8(r21)
  802d8c:	b0800415 	stw	r2,16(r22)
  802d90:	a8800317 	ldw	r2,12(r21)
  802d94:	b0800515 	stw	r2,20(r22)
  802d98:	31000726 	beq	r6,r4,802db8 <_realloc_r+0x548>
  802d9c:	b0800604 	addi	r2,r22,24
  802da0:	ad400404 	addi	r21,r21,16
  802da4:	003fbb06 	br	802c94 <__alt_mem_onchip_mem+0xff7fac94>
  802da8:	a009883a 	mov	r4,r20
  802dac:	08047d00 	call	8047d0 <__malloc_unlock>
  802db0:	0005883a 	mov	r2,zero
  802db4:	003f0a06 	br	8029e0 <__alt_mem_onchip_mem+0xff7fa9e0>
  802db8:	a8c00417 	ldw	r3,16(r21)
  802dbc:	ad400604 	addi	r21,r21,24
  802dc0:	b0800804 	addi	r2,r22,32
  802dc4:	b0c00615 	stw	r3,24(r22)
  802dc8:	a8ffff17 	ldw	r3,-4(r21)
  802dcc:	b0c00715 	stw	r3,28(r22)
  802dd0:	003fb006 	br	802c94 <__alt_mem_onchip_mem+0xff7fac94>

00802dd4 <_sbrk_r>:
  802dd4:	defffd04 	addi	sp,sp,-12
  802dd8:	dc000015 	stw	r16,0(sp)
  802ddc:	04002074 	movhi	r16,129
  802de0:	dc400115 	stw	r17,4(sp)
  802de4:	842fbb04 	addi	r16,r16,-16660
  802de8:	2023883a 	mov	r17,r4
  802dec:	2809883a 	mov	r4,r5
  802df0:	dfc00215 	stw	ra,8(sp)
  802df4:	80000015 	stw	zero,0(r16)
  802df8:	08049900 	call	804990 <sbrk>
  802dfc:	00ffffc4 	movi	r3,-1
  802e00:	10c00526 	beq	r2,r3,802e18 <_sbrk_r+0x44>
  802e04:	dfc00217 	ldw	ra,8(sp)
  802e08:	dc400117 	ldw	r17,4(sp)
  802e0c:	dc000017 	ldw	r16,0(sp)
  802e10:	dec00304 	addi	sp,sp,12
  802e14:	f800283a 	ret
  802e18:	80c00017 	ldw	r3,0(r16)
  802e1c:	183ff926 	beq	r3,zero,802e04 <__alt_mem_onchip_mem+0xff7fae04>
  802e20:	88c00015 	stw	r3,0(r17)
  802e24:	003ff706 	br	802e04 <__alt_mem_onchip_mem+0xff7fae04>

00802e28 <__sread>:
  802e28:	defffe04 	addi	sp,sp,-8
  802e2c:	dc000015 	stw	r16,0(sp)
  802e30:	2821883a 	mov	r16,r5
  802e34:	2940038f 	ldh	r5,14(r5)
  802e38:	dfc00115 	stw	ra,4(sp)
  802e3c:	0803cc00 	call	803cc0 <_read_r>
  802e40:	10000716 	blt	r2,zero,802e60 <__sread+0x38>
  802e44:	80c01417 	ldw	r3,80(r16)
  802e48:	1887883a 	add	r3,r3,r2
  802e4c:	80c01415 	stw	r3,80(r16)
  802e50:	dfc00117 	ldw	ra,4(sp)
  802e54:	dc000017 	ldw	r16,0(sp)
  802e58:	dec00204 	addi	sp,sp,8
  802e5c:	f800283a 	ret
  802e60:	80c0030b 	ldhu	r3,12(r16)
  802e64:	18fbffcc 	andi	r3,r3,61439
  802e68:	80c0030d 	sth	r3,12(r16)
  802e6c:	dfc00117 	ldw	ra,4(sp)
  802e70:	dc000017 	ldw	r16,0(sp)
  802e74:	dec00204 	addi	sp,sp,8
  802e78:	f800283a 	ret

00802e7c <__seofread>:
  802e7c:	0005883a 	mov	r2,zero
  802e80:	f800283a 	ret

00802e84 <__swrite>:
  802e84:	2880030b 	ldhu	r2,12(r5)
  802e88:	defffb04 	addi	sp,sp,-20
  802e8c:	dcc00315 	stw	r19,12(sp)
  802e90:	dc800215 	stw	r18,8(sp)
  802e94:	dc400115 	stw	r17,4(sp)
  802e98:	dc000015 	stw	r16,0(sp)
  802e9c:	dfc00415 	stw	ra,16(sp)
  802ea0:	10c0400c 	andi	r3,r2,256
  802ea4:	2821883a 	mov	r16,r5
  802ea8:	2023883a 	mov	r17,r4
  802eac:	3025883a 	mov	r18,r6
  802eb0:	3827883a 	mov	r19,r7
  802eb4:	18000526 	beq	r3,zero,802ecc <__swrite+0x48>
  802eb8:	2940038f 	ldh	r5,14(r5)
  802ebc:	01c00084 	movi	r7,2
  802ec0:	000d883a 	mov	r6,zero
  802ec4:	0803aa40 	call	803aa4 <_lseek_r>
  802ec8:	8080030b 	ldhu	r2,12(r16)
  802ecc:	8140038f 	ldh	r5,14(r16)
  802ed0:	10bbffcc 	andi	r2,r2,61439
  802ed4:	980f883a 	mov	r7,r19
  802ed8:	900d883a 	mov	r6,r18
  802edc:	8809883a 	mov	r4,r17
  802ee0:	8080030d 	sth	r2,12(r16)
  802ee4:	dfc00417 	ldw	ra,16(sp)
  802ee8:	dcc00317 	ldw	r19,12(sp)
  802eec:	dc800217 	ldw	r18,8(sp)
  802ef0:	dc400117 	ldw	r17,4(sp)
  802ef4:	dc000017 	ldw	r16,0(sp)
  802ef8:	dec00504 	addi	sp,sp,20
  802efc:	08030bc1 	jmpi	8030bc <_write_r>

00802f00 <__sseek>:
  802f00:	defffe04 	addi	sp,sp,-8
  802f04:	dc000015 	stw	r16,0(sp)
  802f08:	2821883a 	mov	r16,r5
  802f0c:	2940038f 	ldh	r5,14(r5)
  802f10:	dfc00115 	stw	ra,4(sp)
  802f14:	0803aa40 	call	803aa4 <_lseek_r>
  802f18:	00ffffc4 	movi	r3,-1
  802f1c:	10c00826 	beq	r2,r3,802f40 <__sseek+0x40>
  802f20:	80c0030b 	ldhu	r3,12(r16)
  802f24:	80801415 	stw	r2,80(r16)
  802f28:	18c40014 	ori	r3,r3,4096
  802f2c:	80c0030d 	sth	r3,12(r16)
  802f30:	dfc00117 	ldw	ra,4(sp)
  802f34:	dc000017 	ldw	r16,0(sp)
  802f38:	dec00204 	addi	sp,sp,8
  802f3c:	f800283a 	ret
  802f40:	80c0030b 	ldhu	r3,12(r16)
  802f44:	18fbffcc 	andi	r3,r3,61439
  802f48:	80c0030d 	sth	r3,12(r16)
  802f4c:	dfc00117 	ldw	ra,4(sp)
  802f50:	dc000017 	ldw	r16,0(sp)
  802f54:	dec00204 	addi	sp,sp,8
  802f58:	f800283a 	ret

00802f5c <__sclose>:
  802f5c:	2940038f 	ldh	r5,14(r5)
  802f60:	08032701 	jmpi	803270 <_close_r>

00802f64 <__swbuf_r>:
  802f64:	defffb04 	addi	sp,sp,-20
  802f68:	dcc00315 	stw	r19,12(sp)
  802f6c:	dc800215 	stw	r18,8(sp)
  802f70:	dc000015 	stw	r16,0(sp)
  802f74:	dfc00415 	stw	ra,16(sp)
  802f78:	dc400115 	stw	r17,4(sp)
  802f7c:	2025883a 	mov	r18,r4
  802f80:	2827883a 	mov	r19,r5
  802f84:	3021883a 	mov	r16,r6
  802f88:	20000226 	beq	r4,zero,802f94 <__swbuf_r+0x30>
  802f8c:	20800e17 	ldw	r2,56(r4)
  802f90:	10004226 	beq	r2,zero,80309c <__swbuf_r+0x138>
  802f94:	80800617 	ldw	r2,24(r16)
  802f98:	8100030b 	ldhu	r4,12(r16)
  802f9c:	80800215 	stw	r2,8(r16)
  802fa0:	2080020c 	andi	r2,r4,8
  802fa4:	10003626 	beq	r2,zero,803080 <__swbuf_r+0x11c>
  802fa8:	80c00417 	ldw	r3,16(r16)
  802fac:	18003426 	beq	r3,zero,803080 <__swbuf_r+0x11c>
  802fb0:	2088000c 	andi	r2,r4,8192
  802fb4:	9c403fcc 	andi	r17,r19,255
  802fb8:	10001a26 	beq	r2,zero,803024 <__swbuf_r+0xc0>
  802fbc:	80800017 	ldw	r2,0(r16)
  802fc0:	81000517 	ldw	r4,20(r16)
  802fc4:	10c7c83a 	sub	r3,r2,r3
  802fc8:	1900200e 	bge	r3,r4,80304c <__swbuf_r+0xe8>
  802fcc:	18c00044 	addi	r3,r3,1
  802fd0:	81000217 	ldw	r4,8(r16)
  802fd4:	11400044 	addi	r5,r2,1
  802fd8:	81400015 	stw	r5,0(r16)
  802fdc:	213fffc4 	addi	r4,r4,-1
  802fe0:	81000215 	stw	r4,8(r16)
  802fe4:	14c00005 	stb	r19,0(r2)
  802fe8:	80800517 	ldw	r2,20(r16)
  802fec:	10c01e26 	beq	r2,r3,803068 <__swbuf_r+0x104>
  802ff0:	8080030b 	ldhu	r2,12(r16)
  802ff4:	1080004c 	andi	r2,r2,1
  802ff8:	10000226 	beq	r2,zero,803004 <__swbuf_r+0xa0>
  802ffc:	00800284 	movi	r2,10
  803000:	88801926 	beq	r17,r2,803068 <__swbuf_r+0x104>
  803004:	8805883a 	mov	r2,r17
  803008:	dfc00417 	ldw	ra,16(sp)
  80300c:	dcc00317 	ldw	r19,12(sp)
  803010:	dc800217 	ldw	r18,8(sp)
  803014:	dc400117 	ldw	r17,4(sp)
  803018:	dc000017 	ldw	r16,0(sp)
  80301c:	dec00504 	addi	sp,sp,20
  803020:	f800283a 	ret
  803024:	81401917 	ldw	r5,100(r16)
  803028:	00b7ffc4 	movi	r2,-8193
  80302c:	21080014 	ori	r4,r4,8192
  803030:	2884703a 	and	r2,r5,r2
  803034:	80801915 	stw	r2,100(r16)
  803038:	80800017 	ldw	r2,0(r16)
  80303c:	8100030d 	sth	r4,12(r16)
  803040:	81000517 	ldw	r4,20(r16)
  803044:	10c7c83a 	sub	r3,r2,r3
  803048:	193fe016 	blt	r3,r4,802fcc <__alt_mem_onchip_mem+0xff7fafcc>
  80304c:	800b883a 	mov	r5,r16
  803050:	9009883a 	mov	r4,r18
  803054:	08035e40 	call	8035e4 <_fflush_r>
  803058:	1000071e 	bne	r2,zero,803078 <__swbuf_r+0x114>
  80305c:	80800017 	ldw	r2,0(r16)
  803060:	00c00044 	movi	r3,1
  803064:	003fda06 	br	802fd0 <__alt_mem_onchip_mem+0xff7fafd0>
  803068:	800b883a 	mov	r5,r16
  80306c:	9009883a 	mov	r4,r18
  803070:	08035e40 	call	8035e4 <_fflush_r>
  803074:	103fe326 	beq	r2,zero,803004 <__alt_mem_onchip_mem+0xff7fb004>
  803078:	00bfffc4 	movi	r2,-1
  80307c:	003fe206 	br	803008 <__alt_mem_onchip_mem+0xff7fb008>
  803080:	800b883a 	mov	r5,r16
  803084:	9009883a 	mov	r4,r18
  803088:	080311c0 	call	80311c <__swsetup_r>
  80308c:	103ffa1e 	bne	r2,zero,803078 <__alt_mem_onchip_mem+0xff7fb078>
  803090:	8100030b 	ldhu	r4,12(r16)
  803094:	80c00417 	ldw	r3,16(r16)
  803098:	003fc506 	br	802fb0 <__alt_mem_onchip_mem+0xff7fafb0>
  80309c:	08013b80 	call	8013b8 <__sinit>
  8030a0:	003fbc06 	br	802f94 <__alt_mem_onchip_mem+0xff7faf94>

008030a4 <__swbuf>:
  8030a4:	00802074 	movhi	r2,129
  8030a8:	10a88e04 	addi	r2,r2,-24008
  8030ac:	280d883a 	mov	r6,r5
  8030b0:	200b883a 	mov	r5,r4
  8030b4:	11000017 	ldw	r4,0(r2)
  8030b8:	0802f641 	jmpi	802f64 <__swbuf_r>

008030bc <_write_r>:
  8030bc:	defffd04 	addi	sp,sp,-12
  8030c0:	2805883a 	mov	r2,r5
  8030c4:	dc000015 	stw	r16,0(sp)
  8030c8:	04002074 	movhi	r16,129
  8030cc:	dc400115 	stw	r17,4(sp)
  8030d0:	300b883a 	mov	r5,r6
  8030d4:	842fbb04 	addi	r16,r16,-16660
  8030d8:	2023883a 	mov	r17,r4
  8030dc:	380d883a 	mov	r6,r7
  8030e0:	1009883a 	mov	r4,r2
  8030e4:	dfc00215 	stw	ra,8(sp)
  8030e8:	80000015 	stw	zero,0(r16)
  8030ec:	0804c200 	call	804c20 <write>
  8030f0:	00ffffc4 	movi	r3,-1
  8030f4:	10c00526 	beq	r2,r3,80310c <_write_r+0x50>
  8030f8:	dfc00217 	ldw	ra,8(sp)
  8030fc:	dc400117 	ldw	r17,4(sp)
  803100:	dc000017 	ldw	r16,0(sp)
  803104:	dec00304 	addi	sp,sp,12
  803108:	f800283a 	ret
  80310c:	80c00017 	ldw	r3,0(r16)
  803110:	183ff926 	beq	r3,zero,8030f8 <__alt_mem_onchip_mem+0xff7fb0f8>
  803114:	88c00015 	stw	r3,0(r17)
  803118:	003ff706 	br	8030f8 <__alt_mem_onchip_mem+0xff7fb0f8>

0080311c <__swsetup_r>:
  80311c:	00802074 	movhi	r2,129
  803120:	defffd04 	addi	sp,sp,-12
  803124:	10a88e04 	addi	r2,r2,-24008
  803128:	dc400115 	stw	r17,4(sp)
  80312c:	2023883a 	mov	r17,r4
  803130:	11000017 	ldw	r4,0(r2)
  803134:	dc000015 	stw	r16,0(sp)
  803138:	dfc00215 	stw	ra,8(sp)
  80313c:	2821883a 	mov	r16,r5
  803140:	20000226 	beq	r4,zero,80314c <__swsetup_r+0x30>
  803144:	20800e17 	ldw	r2,56(r4)
  803148:	10003126 	beq	r2,zero,803210 <__swsetup_r+0xf4>
  80314c:	8080030b 	ldhu	r2,12(r16)
  803150:	10c0020c 	andi	r3,r2,8
  803154:	1009883a 	mov	r4,r2
  803158:	18000f26 	beq	r3,zero,803198 <__swsetup_r+0x7c>
  80315c:	80c00417 	ldw	r3,16(r16)
  803160:	18001526 	beq	r3,zero,8031b8 <__swsetup_r+0x9c>
  803164:	1100004c 	andi	r4,r2,1
  803168:	20001c1e 	bne	r4,zero,8031dc <__swsetup_r+0xc0>
  80316c:	1080008c 	andi	r2,r2,2
  803170:	1000291e 	bne	r2,zero,803218 <__swsetup_r+0xfc>
  803174:	80800517 	ldw	r2,20(r16)
  803178:	80800215 	stw	r2,8(r16)
  80317c:	18001c26 	beq	r3,zero,8031f0 <__swsetup_r+0xd4>
  803180:	0005883a 	mov	r2,zero
  803184:	dfc00217 	ldw	ra,8(sp)
  803188:	dc400117 	ldw	r17,4(sp)
  80318c:	dc000017 	ldw	r16,0(sp)
  803190:	dec00304 	addi	sp,sp,12
  803194:	f800283a 	ret
  803198:	2080040c 	andi	r2,r4,16
  80319c:	10002e26 	beq	r2,zero,803258 <__swsetup_r+0x13c>
  8031a0:	2080010c 	andi	r2,r4,4
  8031a4:	10001e1e 	bne	r2,zero,803220 <__swsetup_r+0x104>
  8031a8:	80c00417 	ldw	r3,16(r16)
  8031ac:	20800214 	ori	r2,r4,8
  8031b0:	8080030d 	sth	r2,12(r16)
  8031b4:	183feb1e 	bne	r3,zero,803164 <__alt_mem_onchip_mem+0xff7fb164>
  8031b8:	1100a00c 	andi	r4,r2,640
  8031bc:	01408004 	movi	r5,512
  8031c0:	217fe826 	beq	r4,r5,803164 <__alt_mem_onchip_mem+0xff7fb164>
  8031c4:	800b883a 	mov	r5,r16
  8031c8:	8809883a 	mov	r4,r17
  8031cc:	0803b040 	call	803b04 <__smakebuf_r>
  8031d0:	8080030b 	ldhu	r2,12(r16)
  8031d4:	80c00417 	ldw	r3,16(r16)
  8031d8:	003fe206 	br	803164 <__alt_mem_onchip_mem+0xff7fb164>
  8031dc:	80800517 	ldw	r2,20(r16)
  8031e0:	80000215 	stw	zero,8(r16)
  8031e4:	0085c83a 	sub	r2,zero,r2
  8031e8:	80800615 	stw	r2,24(r16)
  8031ec:	183fe41e 	bne	r3,zero,803180 <__alt_mem_onchip_mem+0xff7fb180>
  8031f0:	80c0030b 	ldhu	r3,12(r16)
  8031f4:	0005883a 	mov	r2,zero
  8031f8:	1900200c 	andi	r4,r3,128
  8031fc:	203fe126 	beq	r4,zero,803184 <__alt_mem_onchip_mem+0xff7fb184>
  803200:	18c01014 	ori	r3,r3,64
  803204:	80c0030d 	sth	r3,12(r16)
  803208:	00bfffc4 	movi	r2,-1
  80320c:	003fdd06 	br	803184 <__alt_mem_onchip_mem+0xff7fb184>
  803210:	08013b80 	call	8013b8 <__sinit>
  803214:	003fcd06 	br	80314c <__alt_mem_onchip_mem+0xff7fb14c>
  803218:	0005883a 	mov	r2,zero
  80321c:	003fd606 	br	803178 <__alt_mem_onchip_mem+0xff7fb178>
  803220:	81400c17 	ldw	r5,48(r16)
  803224:	28000626 	beq	r5,zero,803240 <__swsetup_r+0x124>
  803228:	80801004 	addi	r2,r16,64
  80322c:	28800326 	beq	r5,r2,80323c <__swsetup_r+0x120>
  803230:	8809883a 	mov	r4,r17
  803234:	08037940 	call	803794 <_free_r>
  803238:	8100030b 	ldhu	r4,12(r16)
  80323c:	80000c15 	stw	zero,48(r16)
  803240:	80c00417 	ldw	r3,16(r16)
  803244:	00bff6c4 	movi	r2,-37
  803248:	1108703a 	and	r4,r2,r4
  80324c:	80000115 	stw	zero,4(r16)
  803250:	80c00015 	stw	r3,0(r16)
  803254:	003fd506 	br	8031ac <__alt_mem_onchip_mem+0xff7fb1ac>
  803258:	00800244 	movi	r2,9
  80325c:	88800015 	stw	r2,0(r17)
  803260:	20801014 	ori	r2,r4,64
  803264:	8080030d 	sth	r2,12(r16)
  803268:	00bfffc4 	movi	r2,-1
  80326c:	003fc506 	br	803184 <__alt_mem_onchip_mem+0xff7fb184>

00803270 <_close_r>:
  803270:	defffd04 	addi	sp,sp,-12
  803274:	dc000015 	stw	r16,0(sp)
  803278:	04002074 	movhi	r16,129
  80327c:	dc400115 	stw	r17,4(sp)
  803280:	842fbb04 	addi	r16,r16,-16660
  803284:	2023883a 	mov	r17,r4
  803288:	2809883a 	mov	r4,r5
  80328c:	dfc00215 	stw	ra,8(sp)
  803290:	80000015 	stw	zero,0(r16)
  803294:	08040ec0 	call	8040ec <close>
  803298:	00ffffc4 	movi	r3,-1
  80329c:	10c00526 	beq	r2,r3,8032b4 <_close_r+0x44>
  8032a0:	dfc00217 	ldw	ra,8(sp)
  8032a4:	dc400117 	ldw	r17,4(sp)
  8032a8:	dc000017 	ldw	r16,0(sp)
  8032ac:	dec00304 	addi	sp,sp,12
  8032b0:	f800283a 	ret
  8032b4:	80c00017 	ldw	r3,0(r16)
  8032b8:	183ff926 	beq	r3,zero,8032a0 <__alt_mem_onchip_mem+0xff7fb2a0>
  8032bc:	88c00015 	stw	r3,0(r17)
  8032c0:	003ff706 	br	8032a0 <__alt_mem_onchip_mem+0xff7fb2a0>

008032c4 <_fclose_r>:
  8032c4:	28003926 	beq	r5,zero,8033ac <_fclose_r+0xe8>
  8032c8:	defffc04 	addi	sp,sp,-16
  8032cc:	dc400115 	stw	r17,4(sp)
  8032d0:	dc000015 	stw	r16,0(sp)
  8032d4:	dfc00315 	stw	ra,12(sp)
  8032d8:	dc800215 	stw	r18,8(sp)
  8032dc:	2023883a 	mov	r17,r4
  8032e0:	2821883a 	mov	r16,r5
  8032e4:	20000226 	beq	r4,zero,8032f0 <_fclose_r+0x2c>
  8032e8:	20800e17 	ldw	r2,56(r4)
  8032ec:	10002726 	beq	r2,zero,80338c <_fclose_r+0xc8>
  8032f0:	8080030f 	ldh	r2,12(r16)
  8032f4:	1000071e 	bne	r2,zero,803314 <_fclose_r+0x50>
  8032f8:	0005883a 	mov	r2,zero
  8032fc:	dfc00317 	ldw	ra,12(sp)
  803300:	dc800217 	ldw	r18,8(sp)
  803304:	dc400117 	ldw	r17,4(sp)
  803308:	dc000017 	ldw	r16,0(sp)
  80330c:	dec00404 	addi	sp,sp,16
  803310:	f800283a 	ret
  803314:	800b883a 	mov	r5,r16
  803318:	8809883a 	mov	r4,r17
  80331c:	08033c80 	call	8033c8 <__sflush_r>
  803320:	1025883a 	mov	r18,r2
  803324:	80800b17 	ldw	r2,44(r16)
  803328:	10000426 	beq	r2,zero,80333c <_fclose_r+0x78>
  80332c:	81400717 	ldw	r5,28(r16)
  803330:	8809883a 	mov	r4,r17
  803334:	103ee83a 	callr	r2
  803338:	10001616 	blt	r2,zero,803394 <_fclose_r+0xd0>
  80333c:	8080030b 	ldhu	r2,12(r16)
  803340:	1080200c 	andi	r2,r2,128
  803344:	1000151e 	bne	r2,zero,80339c <_fclose_r+0xd8>
  803348:	81400c17 	ldw	r5,48(r16)
  80334c:	28000526 	beq	r5,zero,803364 <_fclose_r+0xa0>
  803350:	80801004 	addi	r2,r16,64
  803354:	28800226 	beq	r5,r2,803360 <_fclose_r+0x9c>
  803358:	8809883a 	mov	r4,r17
  80335c:	08037940 	call	803794 <_free_r>
  803360:	80000c15 	stw	zero,48(r16)
  803364:	81401117 	ldw	r5,68(r16)
  803368:	28000326 	beq	r5,zero,803378 <_fclose_r+0xb4>
  80336c:	8809883a 	mov	r4,r17
  803370:	08037940 	call	803794 <_free_r>
  803374:	80001115 	stw	zero,68(r16)
  803378:	08013c80 	call	8013c8 <__sfp_lock_acquire>
  80337c:	8000030d 	sth	zero,12(r16)
  803380:	08013cc0 	call	8013cc <__sfp_lock_release>
  803384:	9005883a 	mov	r2,r18
  803388:	003fdc06 	br	8032fc <__alt_mem_onchip_mem+0xff7fb2fc>
  80338c:	08013b80 	call	8013b8 <__sinit>
  803390:	003fd706 	br	8032f0 <__alt_mem_onchip_mem+0xff7fb2f0>
  803394:	04bfffc4 	movi	r18,-1
  803398:	003fe806 	br	80333c <__alt_mem_onchip_mem+0xff7fb33c>
  80339c:	81400417 	ldw	r5,16(r16)
  8033a0:	8809883a 	mov	r4,r17
  8033a4:	08037940 	call	803794 <_free_r>
  8033a8:	003fe706 	br	803348 <__alt_mem_onchip_mem+0xff7fb348>
  8033ac:	0005883a 	mov	r2,zero
  8033b0:	f800283a 	ret

008033b4 <fclose>:
  8033b4:	00802074 	movhi	r2,129
  8033b8:	10a88e04 	addi	r2,r2,-24008
  8033bc:	200b883a 	mov	r5,r4
  8033c0:	11000017 	ldw	r4,0(r2)
  8033c4:	08032c41 	jmpi	8032c4 <_fclose_r>

008033c8 <__sflush_r>:
  8033c8:	2880030b 	ldhu	r2,12(r5)
  8033cc:	defffb04 	addi	sp,sp,-20
  8033d0:	dcc00315 	stw	r19,12(sp)
  8033d4:	dc400115 	stw	r17,4(sp)
  8033d8:	dfc00415 	stw	ra,16(sp)
  8033dc:	dc800215 	stw	r18,8(sp)
  8033e0:	dc000015 	stw	r16,0(sp)
  8033e4:	10c0020c 	andi	r3,r2,8
  8033e8:	2823883a 	mov	r17,r5
  8033ec:	2027883a 	mov	r19,r4
  8033f0:	1800311e 	bne	r3,zero,8034b8 <__sflush_r+0xf0>
  8033f4:	28c00117 	ldw	r3,4(r5)
  8033f8:	10820014 	ori	r2,r2,2048
  8033fc:	2880030d 	sth	r2,12(r5)
  803400:	00c04b0e 	bge	zero,r3,803530 <__sflush_r+0x168>
  803404:	8a000a17 	ldw	r8,40(r17)
  803408:	40002326 	beq	r8,zero,803498 <__sflush_r+0xd0>
  80340c:	9c000017 	ldw	r16,0(r19)
  803410:	10c4000c 	andi	r3,r2,4096
  803414:	98000015 	stw	zero,0(r19)
  803418:	18004826 	beq	r3,zero,80353c <__sflush_r+0x174>
  80341c:	89801417 	ldw	r6,80(r17)
  803420:	10c0010c 	andi	r3,r2,4
  803424:	18000626 	beq	r3,zero,803440 <__sflush_r+0x78>
  803428:	88c00117 	ldw	r3,4(r17)
  80342c:	88800c17 	ldw	r2,48(r17)
  803430:	30cdc83a 	sub	r6,r6,r3
  803434:	10000226 	beq	r2,zero,803440 <__sflush_r+0x78>
  803438:	88800f17 	ldw	r2,60(r17)
  80343c:	308dc83a 	sub	r6,r6,r2
  803440:	89400717 	ldw	r5,28(r17)
  803444:	000f883a 	mov	r7,zero
  803448:	9809883a 	mov	r4,r19
  80344c:	403ee83a 	callr	r8
  803450:	00ffffc4 	movi	r3,-1
  803454:	10c04426 	beq	r2,r3,803568 <__sflush_r+0x1a0>
  803458:	88c0030b 	ldhu	r3,12(r17)
  80345c:	89000417 	ldw	r4,16(r17)
  803460:	88000115 	stw	zero,4(r17)
  803464:	197dffcc 	andi	r5,r3,63487
  803468:	8940030d 	sth	r5,12(r17)
  80346c:	89000015 	stw	r4,0(r17)
  803470:	18c4000c 	andi	r3,r3,4096
  803474:	18002c1e 	bne	r3,zero,803528 <__sflush_r+0x160>
  803478:	89400c17 	ldw	r5,48(r17)
  80347c:	9c000015 	stw	r16,0(r19)
  803480:	28000526 	beq	r5,zero,803498 <__sflush_r+0xd0>
  803484:	88801004 	addi	r2,r17,64
  803488:	28800226 	beq	r5,r2,803494 <__sflush_r+0xcc>
  80348c:	9809883a 	mov	r4,r19
  803490:	08037940 	call	803794 <_free_r>
  803494:	88000c15 	stw	zero,48(r17)
  803498:	0005883a 	mov	r2,zero
  80349c:	dfc00417 	ldw	ra,16(sp)
  8034a0:	dcc00317 	ldw	r19,12(sp)
  8034a4:	dc800217 	ldw	r18,8(sp)
  8034a8:	dc400117 	ldw	r17,4(sp)
  8034ac:	dc000017 	ldw	r16,0(sp)
  8034b0:	dec00504 	addi	sp,sp,20
  8034b4:	f800283a 	ret
  8034b8:	2c800417 	ldw	r18,16(r5)
  8034bc:	903ff626 	beq	r18,zero,803498 <__alt_mem_onchip_mem+0xff7fb498>
  8034c0:	2c000017 	ldw	r16,0(r5)
  8034c4:	108000cc 	andi	r2,r2,3
  8034c8:	2c800015 	stw	r18,0(r5)
  8034cc:	84a1c83a 	sub	r16,r16,r18
  8034d0:	1000131e 	bne	r2,zero,803520 <__sflush_r+0x158>
  8034d4:	28800517 	ldw	r2,20(r5)
  8034d8:	88800215 	stw	r2,8(r17)
  8034dc:	04000316 	blt	zero,r16,8034ec <__sflush_r+0x124>
  8034e0:	003fed06 	br	803498 <__alt_mem_onchip_mem+0xff7fb498>
  8034e4:	90a5883a 	add	r18,r18,r2
  8034e8:	043feb0e 	bge	zero,r16,803498 <__alt_mem_onchip_mem+0xff7fb498>
  8034ec:	88800917 	ldw	r2,36(r17)
  8034f0:	89400717 	ldw	r5,28(r17)
  8034f4:	800f883a 	mov	r7,r16
  8034f8:	900d883a 	mov	r6,r18
  8034fc:	9809883a 	mov	r4,r19
  803500:	103ee83a 	callr	r2
  803504:	80a1c83a 	sub	r16,r16,r2
  803508:	00bff616 	blt	zero,r2,8034e4 <__alt_mem_onchip_mem+0xff7fb4e4>
  80350c:	88c0030b 	ldhu	r3,12(r17)
  803510:	00bfffc4 	movi	r2,-1
  803514:	18c01014 	ori	r3,r3,64
  803518:	88c0030d 	sth	r3,12(r17)
  80351c:	003fdf06 	br	80349c <__alt_mem_onchip_mem+0xff7fb49c>
  803520:	0005883a 	mov	r2,zero
  803524:	003fec06 	br	8034d8 <__alt_mem_onchip_mem+0xff7fb4d8>
  803528:	88801415 	stw	r2,80(r17)
  80352c:	003fd206 	br	803478 <__alt_mem_onchip_mem+0xff7fb478>
  803530:	28c00f17 	ldw	r3,60(r5)
  803534:	00ffb316 	blt	zero,r3,803404 <__alt_mem_onchip_mem+0xff7fb404>
  803538:	003fd706 	br	803498 <__alt_mem_onchip_mem+0xff7fb498>
  80353c:	89400717 	ldw	r5,28(r17)
  803540:	000d883a 	mov	r6,zero
  803544:	01c00044 	movi	r7,1
  803548:	9809883a 	mov	r4,r19
  80354c:	403ee83a 	callr	r8
  803550:	100d883a 	mov	r6,r2
  803554:	00bfffc4 	movi	r2,-1
  803558:	30801426 	beq	r6,r2,8035ac <__sflush_r+0x1e4>
  80355c:	8880030b 	ldhu	r2,12(r17)
  803560:	8a000a17 	ldw	r8,40(r17)
  803564:	003fae06 	br	803420 <__alt_mem_onchip_mem+0xff7fb420>
  803568:	98c00017 	ldw	r3,0(r19)
  80356c:	183fba26 	beq	r3,zero,803458 <__alt_mem_onchip_mem+0xff7fb458>
  803570:	01000744 	movi	r4,29
  803574:	19000626 	beq	r3,r4,803590 <__sflush_r+0x1c8>
  803578:	01000584 	movi	r4,22
  80357c:	19000426 	beq	r3,r4,803590 <__sflush_r+0x1c8>
  803580:	88c0030b 	ldhu	r3,12(r17)
  803584:	18c01014 	ori	r3,r3,64
  803588:	88c0030d 	sth	r3,12(r17)
  80358c:	003fc306 	br	80349c <__alt_mem_onchip_mem+0xff7fb49c>
  803590:	8880030b 	ldhu	r2,12(r17)
  803594:	88c00417 	ldw	r3,16(r17)
  803598:	88000115 	stw	zero,4(r17)
  80359c:	10bdffcc 	andi	r2,r2,63487
  8035a0:	8880030d 	sth	r2,12(r17)
  8035a4:	88c00015 	stw	r3,0(r17)
  8035a8:	003fb306 	br	803478 <__alt_mem_onchip_mem+0xff7fb478>
  8035ac:	98800017 	ldw	r2,0(r19)
  8035b0:	103fea26 	beq	r2,zero,80355c <__alt_mem_onchip_mem+0xff7fb55c>
  8035b4:	00c00744 	movi	r3,29
  8035b8:	10c00226 	beq	r2,r3,8035c4 <__sflush_r+0x1fc>
  8035bc:	00c00584 	movi	r3,22
  8035c0:	10c0031e 	bne	r2,r3,8035d0 <__sflush_r+0x208>
  8035c4:	9c000015 	stw	r16,0(r19)
  8035c8:	0005883a 	mov	r2,zero
  8035cc:	003fb306 	br	80349c <__alt_mem_onchip_mem+0xff7fb49c>
  8035d0:	88c0030b 	ldhu	r3,12(r17)
  8035d4:	3005883a 	mov	r2,r6
  8035d8:	18c01014 	ori	r3,r3,64
  8035dc:	88c0030d 	sth	r3,12(r17)
  8035e0:	003fae06 	br	80349c <__alt_mem_onchip_mem+0xff7fb49c>

008035e4 <_fflush_r>:
  8035e4:	defffd04 	addi	sp,sp,-12
  8035e8:	dc000115 	stw	r16,4(sp)
  8035ec:	dfc00215 	stw	ra,8(sp)
  8035f0:	2021883a 	mov	r16,r4
  8035f4:	20000226 	beq	r4,zero,803600 <_fflush_r+0x1c>
  8035f8:	20800e17 	ldw	r2,56(r4)
  8035fc:	10000c26 	beq	r2,zero,803630 <_fflush_r+0x4c>
  803600:	2880030f 	ldh	r2,12(r5)
  803604:	1000051e 	bne	r2,zero,80361c <_fflush_r+0x38>
  803608:	0005883a 	mov	r2,zero
  80360c:	dfc00217 	ldw	ra,8(sp)
  803610:	dc000117 	ldw	r16,4(sp)
  803614:	dec00304 	addi	sp,sp,12
  803618:	f800283a 	ret
  80361c:	8009883a 	mov	r4,r16
  803620:	dfc00217 	ldw	ra,8(sp)
  803624:	dc000117 	ldw	r16,4(sp)
  803628:	dec00304 	addi	sp,sp,12
  80362c:	08033c81 	jmpi	8033c8 <__sflush_r>
  803630:	d9400015 	stw	r5,0(sp)
  803634:	08013b80 	call	8013b8 <__sinit>
  803638:	d9400017 	ldw	r5,0(sp)
  80363c:	003ff006 	br	803600 <__alt_mem_onchip_mem+0xff7fb600>

00803640 <fflush>:
  803640:	20000526 	beq	r4,zero,803658 <fflush+0x18>
  803644:	00802074 	movhi	r2,129
  803648:	10a88e04 	addi	r2,r2,-24008
  80364c:	200b883a 	mov	r5,r4
  803650:	11000017 	ldw	r4,0(r2)
  803654:	08035e41 	jmpi	8035e4 <_fflush_r>
  803658:	00802074 	movhi	r2,129
  80365c:	10a88d04 	addi	r2,r2,-24012
  803660:	11000017 	ldw	r4,0(r2)
  803664:	01402034 	movhi	r5,128
  803668:	294d7904 	addi	r5,r5,13796
  80366c:	08019881 	jmpi	801988 <_fwalk_reent>

00803670 <_malloc_trim_r>:
  803670:	defffb04 	addi	sp,sp,-20
  803674:	dcc00315 	stw	r19,12(sp)
  803678:	04c02074 	movhi	r19,129
  80367c:	dc800215 	stw	r18,8(sp)
  803680:	dc400115 	stw	r17,4(sp)
  803684:	dc000015 	stw	r16,0(sp)
  803688:	dfc00415 	stw	ra,16(sp)
  80368c:	2821883a 	mov	r16,r5
  803690:	9ce29004 	addi	r19,r19,-30144
  803694:	2025883a 	mov	r18,r4
  803698:	08047ac0 	call	8047ac <__malloc_lock>
  80369c:	98800217 	ldw	r2,8(r19)
  8036a0:	14400117 	ldw	r17,4(r2)
  8036a4:	00bfff04 	movi	r2,-4
  8036a8:	88a2703a 	and	r17,r17,r2
  8036ac:	8c21c83a 	sub	r16,r17,r16
  8036b0:	8403fbc4 	addi	r16,r16,4079
  8036b4:	8020d33a 	srli	r16,r16,12
  8036b8:	0083ffc4 	movi	r2,4095
  8036bc:	843fffc4 	addi	r16,r16,-1
  8036c0:	8020933a 	slli	r16,r16,12
  8036c4:	1400060e 	bge	r2,r16,8036e0 <_malloc_trim_r+0x70>
  8036c8:	000b883a 	mov	r5,zero
  8036cc:	9009883a 	mov	r4,r18
  8036d0:	0802dd40 	call	802dd4 <_sbrk_r>
  8036d4:	98c00217 	ldw	r3,8(r19)
  8036d8:	1c47883a 	add	r3,r3,r17
  8036dc:	10c00a26 	beq	r2,r3,803708 <_malloc_trim_r+0x98>
  8036e0:	9009883a 	mov	r4,r18
  8036e4:	08047d00 	call	8047d0 <__malloc_unlock>
  8036e8:	0005883a 	mov	r2,zero
  8036ec:	dfc00417 	ldw	ra,16(sp)
  8036f0:	dcc00317 	ldw	r19,12(sp)
  8036f4:	dc800217 	ldw	r18,8(sp)
  8036f8:	dc400117 	ldw	r17,4(sp)
  8036fc:	dc000017 	ldw	r16,0(sp)
  803700:	dec00504 	addi	sp,sp,20
  803704:	f800283a 	ret
  803708:	040bc83a 	sub	r5,zero,r16
  80370c:	9009883a 	mov	r4,r18
  803710:	0802dd40 	call	802dd4 <_sbrk_r>
  803714:	00ffffc4 	movi	r3,-1
  803718:	10c00d26 	beq	r2,r3,803750 <_malloc_trim_r+0xe0>
  80371c:	00c02074 	movhi	r3,129
  803720:	18efc304 	addi	r3,r3,-16628
  803724:	18800017 	ldw	r2,0(r3)
  803728:	99000217 	ldw	r4,8(r19)
  80372c:	8c23c83a 	sub	r17,r17,r16
  803730:	8c400054 	ori	r17,r17,1
  803734:	1421c83a 	sub	r16,r2,r16
  803738:	24400115 	stw	r17,4(r4)
  80373c:	9009883a 	mov	r4,r18
  803740:	1c000015 	stw	r16,0(r3)
  803744:	08047d00 	call	8047d0 <__malloc_unlock>
  803748:	00800044 	movi	r2,1
  80374c:	003fe706 	br	8036ec <__alt_mem_onchip_mem+0xff7fb6ec>
  803750:	000b883a 	mov	r5,zero
  803754:	9009883a 	mov	r4,r18
  803758:	0802dd40 	call	802dd4 <_sbrk_r>
  80375c:	99000217 	ldw	r4,8(r19)
  803760:	014003c4 	movi	r5,15
  803764:	1107c83a 	sub	r3,r2,r4
  803768:	28ffdd0e 	bge	r5,r3,8036e0 <__alt_mem_onchip_mem+0xff7fb6e0>
  80376c:	01402074 	movhi	r5,129
  803770:	29688f04 	addi	r5,r5,-24004
  803774:	29400017 	ldw	r5,0(r5)
  803778:	18c00054 	ori	r3,r3,1
  80377c:	20c00115 	stw	r3,4(r4)
  803780:	00c02074 	movhi	r3,129
  803784:	1145c83a 	sub	r2,r2,r5
  803788:	18efc304 	addi	r3,r3,-16628
  80378c:	18800015 	stw	r2,0(r3)
  803790:	003fd306 	br	8036e0 <__alt_mem_onchip_mem+0xff7fb6e0>

00803794 <_free_r>:
  803794:	28004126 	beq	r5,zero,80389c <_free_r+0x108>
  803798:	defffd04 	addi	sp,sp,-12
  80379c:	dc400115 	stw	r17,4(sp)
  8037a0:	dc000015 	stw	r16,0(sp)
  8037a4:	2023883a 	mov	r17,r4
  8037a8:	2821883a 	mov	r16,r5
  8037ac:	dfc00215 	stw	ra,8(sp)
  8037b0:	08047ac0 	call	8047ac <__malloc_lock>
  8037b4:	81ffff17 	ldw	r7,-4(r16)
  8037b8:	00bfff84 	movi	r2,-2
  8037bc:	01002074 	movhi	r4,129
  8037c0:	81bffe04 	addi	r6,r16,-8
  8037c4:	3884703a 	and	r2,r7,r2
  8037c8:	21229004 	addi	r4,r4,-30144
  8037cc:	308b883a 	add	r5,r6,r2
  8037d0:	2a400117 	ldw	r9,4(r5)
  8037d4:	22000217 	ldw	r8,8(r4)
  8037d8:	00ffff04 	movi	r3,-4
  8037dc:	48c6703a 	and	r3,r9,r3
  8037e0:	2a005726 	beq	r5,r8,803940 <_free_r+0x1ac>
  8037e4:	28c00115 	stw	r3,4(r5)
  8037e8:	39c0004c 	andi	r7,r7,1
  8037ec:	3800091e 	bne	r7,zero,803814 <_free_r+0x80>
  8037f0:	823ffe17 	ldw	r8,-8(r16)
  8037f4:	22400204 	addi	r9,r4,8
  8037f8:	320dc83a 	sub	r6,r6,r8
  8037fc:	31c00217 	ldw	r7,8(r6)
  803800:	1205883a 	add	r2,r2,r8
  803804:	3a406526 	beq	r7,r9,80399c <_free_r+0x208>
  803808:	32000317 	ldw	r8,12(r6)
  80380c:	3a000315 	stw	r8,12(r7)
  803810:	41c00215 	stw	r7,8(r8)
  803814:	28cf883a 	add	r7,r5,r3
  803818:	39c00117 	ldw	r7,4(r7)
  80381c:	39c0004c 	andi	r7,r7,1
  803820:	38003a26 	beq	r7,zero,80390c <_free_r+0x178>
  803824:	10c00054 	ori	r3,r2,1
  803828:	30c00115 	stw	r3,4(r6)
  80382c:	3087883a 	add	r3,r6,r2
  803830:	18800015 	stw	r2,0(r3)
  803834:	00c07fc4 	movi	r3,511
  803838:	18801936 	bltu	r3,r2,8038a0 <_free_r+0x10c>
  80383c:	1004d0fa 	srli	r2,r2,3
  803840:	01c00044 	movi	r7,1
  803844:	21400117 	ldw	r5,4(r4)
  803848:	10c00044 	addi	r3,r2,1
  80384c:	18c7883a 	add	r3,r3,r3
  803850:	1005d0ba 	srai	r2,r2,2
  803854:	18c7883a 	add	r3,r3,r3
  803858:	18c7883a 	add	r3,r3,r3
  80385c:	1907883a 	add	r3,r3,r4
  803860:	3884983a 	sll	r2,r7,r2
  803864:	19c00017 	ldw	r7,0(r3)
  803868:	1a3ffe04 	addi	r8,r3,-8
  80386c:	1144b03a 	or	r2,r2,r5
  803870:	32000315 	stw	r8,12(r6)
  803874:	31c00215 	stw	r7,8(r6)
  803878:	20800115 	stw	r2,4(r4)
  80387c:	19800015 	stw	r6,0(r3)
  803880:	39800315 	stw	r6,12(r7)
  803884:	8809883a 	mov	r4,r17
  803888:	dfc00217 	ldw	ra,8(sp)
  80388c:	dc400117 	ldw	r17,4(sp)
  803890:	dc000017 	ldw	r16,0(sp)
  803894:	dec00304 	addi	sp,sp,12
  803898:	08047d01 	jmpi	8047d0 <__malloc_unlock>
  80389c:	f800283a 	ret
  8038a0:	100ad27a 	srli	r5,r2,9
  8038a4:	00c00104 	movi	r3,4
  8038a8:	19404a36 	bltu	r3,r5,8039d4 <_free_r+0x240>
  8038ac:	100ad1ba 	srli	r5,r2,6
  8038b0:	28c00e44 	addi	r3,r5,57
  8038b4:	18c7883a 	add	r3,r3,r3
  8038b8:	29400e04 	addi	r5,r5,56
  8038bc:	18c7883a 	add	r3,r3,r3
  8038c0:	18c7883a 	add	r3,r3,r3
  8038c4:	1909883a 	add	r4,r3,r4
  8038c8:	20c00017 	ldw	r3,0(r4)
  8038cc:	01c02074 	movhi	r7,129
  8038d0:	213ffe04 	addi	r4,r4,-8
  8038d4:	39e29004 	addi	r7,r7,-30144
  8038d8:	20c04426 	beq	r4,r3,8039ec <_free_r+0x258>
  8038dc:	01ffff04 	movi	r7,-4
  8038e0:	19400117 	ldw	r5,4(r3)
  8038e4:	29ca703a 	and	r5,r5,r7
  8038e8:	1140022e 	bgeu	r2,r5,8038f4 <_free_r+0x160>
  8038ec:	18c00217 	ldw	r3,8(r3)
  8038f0:	20fffb1e 	bne	r4,r3,8038e0 <__alt_mem_onchip_mem+0xff7fb8e0>
  8038f4:	19000317 	ldw	r4,12(r3)
  8038f8:	31000315 	stw	r4,12(r6)
  8038fc:	30c00215 	stw	r3,8(r6)
  803900:	21800215 	stw	r6,8(r4)
  803904:	19800315 	stw	r6,12(r3)
  803908:	003fde06 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  80390c:	29c00217 	ldw	r7,8(r5)
  803910:	10c5883a 	add	r2,r2,r3
  803914:	00c02074 	movhi	r3,129
  803918:	18e29204 	addi	r3,r3,-30136
  80391c:	38c03b26 	beq	r7,r3,803a0c <_free_r+0x278>
  803920:	2a000317 	ldw	r8,12(r5)
  803924:	11400054 	ori	r5,r2,1
  803928:	3087883a 	add	r3,r6,r2
  80392c:	3a000315 	stw	r8,12(r7)
  803930:	41c00215 	stw	r7,8(r8)
  803934:	31400115 	stw	r5,4(r6)
  803938:	18800015 	stw	r2,0(r3)
  80393c:	003fbd06 	br	803834 <__alt_mem_onchip_mem+0xff7fb834>
  803940:	39c0004c 	andi	r7,r7,1
  803944:	10c5883a 	add	r2,r2,r3
  803948:	3800071e 	bne	r7,zero,803968 <_free_r+0x1d4>
  80394c:	81fffe17 	ldw	r7,-8(r16)
  803950:	31cdc83a 	sub	r6,r6,r7
  803954:	30c00317 	ldw	r3,12(r6)
  803958:	31400217 	ldw	r5,8(r6)
  80395c:	11c5883a 	add	r2,r2,r7
  803960:	28c00315 	stw	r3,12(r5)
  803964:	19400215 	stw	r5,8(r3)
  803968:	10c00054 	ori	r3,r2,1
  80396c:	30c00115 	stw	r3,4(r6)
  803970:	00c02074 	movhi	r3,129
  803974:	18e89004 	addi	r3,r3,-24000
  803978:	18c00017 	ldw	r3,0(r3)
  80397c:	21800215 	stw	r6,8(r4)
  803980:	10ffc036 	bltu	r2,r3,803884 <__alt_mem_onchip_mem+0xff7fb884>
  803984:	00802074 	movhi	r2,129
  803988:	10afba04 	addi	r2,r2,-16664
  80398c:	11400017 	ldw	r5,0(r2)
  803990:	8809883a 	mov	r4,r17
  803994:	08036700 	call	803670 <_malloc_trim_r>
  803998:	003fba06 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  80399c:	28c9883a 	add	r4,r5,r3
  8039a0:	21000117 	ldw	r4,4(r4)
  8039a4:	2100004c 	andi	r4,r4,1
  8039a8:	2000391e 	bne	r4,zero,803a90 <_free_r+0x2fc>
  8039ac:	29c00217 	ldw	r7,8(r5)
  8039b0:	29000317 	ldw	r4,12(r5)
  8039b4:	1885883a 	add	r2,r3,r2
  8039b8:	10c00054 	ori	r3,r2,1
  8039bc:	39000315 	stw	r4,12(r7)
  8039c0:	21c00215 	stw	r7,8(r4)
  8039c4:	30c00115 	stw	r3,4(r6)
  8039c8:	308d883a 	add	r6,r6,r2
  8039cc:	30800015 	stw	r2,0(r6)
  8039d0:	003fac06 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  8039d4:	00c00504 	movi	r3,20
  8039d8:	19401536 	bltu	r3,r5,803a30 <_free_r+0x29c>
  8039dc:	28c01704 	addi	r3,r5,92
  8039e0:	18c7883a 	add	r3,r3,r3
  8039e4:	294016c4 	addi	r5,r5,91
  8039e8:	003fb406 	br	8038bc <__alt_mem_onchip_mem+0xff7fb8bc>
  8039ec:	280bd0ba 	srai	r5,r5,2
  8039f0:	00c00044 	movi	r3,1
  8039f4:	38800117 	ldw	r2,4(r7)
  8039f8:	194a983a 	sll	r5,r3,r5
  8039fc:	2007883a 	mov	r3,r4
  803a00:	2884b03a 	or	r2,r5,r2
  803a04:	38800115 	stw	r2,4(r7)
  803a08:	003fbb06 	br	8038f8 <__alt_mem_onchip_mem+0xff7fb8f8>
  803a0c:	21800515 	stw	r6,20(r4)
  803a10:	21800415 	stw	r6,16(r4)
  803a14:	10c00054 	ori	r3,r2,1
  803a18:	31c00315 	stw	r7,12(r6)
  803a1c:	31c00215 	stw	r7,8(r6)
  803a20:	30c00115 	stw	r3,4(r6)
  803a24:	308d883a 	add	r6,r6,r2
  803a28:	30800015 	stw	r2,0(r6)
  803a2c:	003f9506 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>
  803a30:	00c01504 	movi	r3,84
  803a34:	19400536 	bltu	r3,r5,803a4c <_free_r+0x2b8>
  803a38:	100ad33a 	srli	r5,r2,12
  803a3c:	28c01bc4 	addi	r3,r5,111
  803a40:	18c7883a 	add	r3,r3,r3
  803a44:	29401b84 	addi	r5,r5,110
  803a48:	003f9c06 	br	8038bc <__alt_mem_onchip_mem+0xff7fb8bc>
  803a4c:	00c05504 	movi	r3,340
  803a50:	19400536 	bltu	r3,r5,803a68 <_free_r+0x2d4>
  803a54:	100ad3fa 	srli	r5,r2,15
  803a58:	28c01e04 	addi	r3,r5,120
  803a5c:	18c7883a 	add	r3,r3,r3
  803a60:	29401dc4 	addi	r5,r5,119
  803a64:	003f9506 	br	8038bc <__alt_mem_onchip_mem+0xff7fb8bc>
  803a68:	00c15504 	movi	r3,1364
  803a6c:	19400536 	bltu	r3,r5,803a84 <_free_r+0x2f0>
  803a70:	100ad4ba 	srli	r5,r2,18
  803a74:	28c01f44 	addi	r3,r5,125
  803a78:	18c7883a 	add	r3,r3,r3
  803a7c:	29401f04 	addi	r5,r5,124
  803a80:	003f8e06 	br	8038bc <__alt_mem_onchip_mem+0xff7fb8bc>
  803a84:	00c03f84 	movi	r3,254
  803a88:	01401f84 	movi	r5,126
  803a8c:	003f8b06 	br	8038bc <__alt_mem_onchip_mem+0xff7fb8bc>
  803a90:	10c00054 	ori	r3,r2,1
  803a94:	30c00115 	stw	r3,4(r6)
  803a98:	308d883a 	add	r6,r6,r2
  803a9c:	30800015 	stw	r2,0(r6)
  803aa0:	003f7806 	br	803884 <__alt_mem_onchip_mem+0xff7fb884>

00803aa4 <_lseek_r>:
  803aa4:	defffd04 	addi	sp,sp,-12
  803aa8:	2805883a 	mov	r2,r5
  803aac:	dc000015 	stw	r16,0(sp)
  803ab0:	04002074 	movhi	r16,129
  803ab4:	dc400115 	stw	r17,4(sp)
  803ab8:	300b883a 	mov	r5,r6
  803abc:	842fbb04 	addi	r16,r16,-16660
  803ac0:	2023883a 	mov	r17,r4
  803ac4:	380d883a 	mov	r6,r7
  803ac8:	1009883a 	mov	r4,r2
  803acc:	dfc00215 	stw	ra,8(sp)
  803ad0:	80000015 	stw	zero,0(r16)
  803ad4:	080465c0 	call	80465c <lseek>
  803ad8:	00ffffc4 	movi	r3,-1
  803adc:	10c00526 	beq	r2,r3,803af4 <_lseek_r+0x50>
  803ae0:	dfc00217 	ldw	ra,8(sp)
  803ae4:	dc400117 	ldw	r17,4(sp)
  803ae8:	dc000017 	ldw	r16,0(sp)
  803aec:	dec00304 	addi	sp,sp,12
  803af0:	f800283a 	ret
  803af4:	80c00017 	ldw	r3,0(r16)
  803af8:	183ff926 	beq	r3,zero,803ae0 <__alt_mem_onchip_mem+0xff7fbae0>
  803afc:	88c00015 	stw	r3,0(r17)
  803b00:	003ff706 	br	803ae0 <__alt_mem_onchip_mem+0xff7fbae0>

00803b04 <__smakebuf_r>:
  803b04:	2880030b 	ldhu	r2,12(r5)
  803b08:	10c0008c 	andi	r3,r2,2
  803b0c:	1800411e 	bne	r3,zero,803c14 <__smakebuf_r+0x110>
  803b10:	deffec04 	addi	sp,sp,-80
  803b14:	dc000f15 	stw	r16,60(sp)
  803b18:	2821883a 	mov	r16,r5
  803b1c:	2940038f 	ldh	r5,14(r5)
  803b20:	dc401015 	stw	r17,64(sp)
  803b24:	dfc01315 	stw	ra,76(sp)
  803b28:	dcc01215 	stw	r19,72(sp)
  803b2c:	dc801115 	stw	r18,68(sp)
  803b30:	2023883a 	mov	r17,r4
  803b34:	28001c16 	blt	r5,zero,803ba8 <__smakebuf_r+0xa4>
  803b38:	d80d883a 	mov	r6,sp
  803b3c:	0803d200 	call	803d20 <_fstat_r>
  803b40:	10001816 	blt	r2,zero,803ba4 <__smakebuf_r+0xa0>
  803b44:	d8800117 	ldw	r2,4(sp)
  803b48:	00e00014 	movui	r3,32768
  803b4c:	10bc000c 	andi	r2,r2,61440
  803b50:	14c80020 	cmpeqi	r19,r2,8192
  803b54:	10c03726 	beq	r2,r3,803c34 <__smakebuf_r+0x130>
  803b58:	80c0030b 	ldhu	r3,12(r16)
  803b5c:	18c20014 	ori	r3,r3,2048
  803b60:	80c0030d 	sth	r3,12(r16)
  803b64:	00c80004 	movi	r3,8192
  803b68:	10c0521e 	bne	r2,r3,803cb4 <__smakebuf_r+0x1b0>
  803b6c:	8140038f 	ldh	r5,14(r16)
  803b70:	8809883a 	mov	r4,r17
  803b74:	0803d7c0 	call	803d7c <_isatty_r>
  803b78:	10004c26 	beq	r2,zero,803cac <__smakebuf_r+0x1a8>
  803b7c:	8080030b 	ldhu	r2,12(r16)
  803b80:	80c010c4 	addi	r3,r16,67
  803b84:	80c00015 	stw	r3,0(r16)
  803b88:	10800054 	ori	r2,r2,1
  803b8c:	8080030d 	sth	r2,12(r16)
  803b90:	00800044 	movi	r2,1
  803b94:	80c00415 	stw	r3,16(r16)
  803b98:	80800515 	stw	r2,20(r16)
  803b9c:	04810004 	movi	r18,1024
  803ba0:	00000706 	br	803bc0 <__smakebuf_r+0xbc>
  803ba4:	8080030b 	ldhu	r2,12(r16)
  803ba8:	10c0200c 	andi	r3,r2,128
  803bac:	18001f1e 	bne	r3,zero,803c2c <__smakebuf_r+0x128>
  803bb0:	04810004 	movi	r18,1024
  803bb4:	10820014 	ori	r2,r2,2048
  803bb8:	8080030d 	sth	r2,12(r16)
  803bbc:	0027883a 	mov	r19,zero
  803bc0:	900b883a 	mov	r5,r18
  803bc4:	8809883a 	mov	r4,r17
  803bc8:	0801a4c0 	call	801a4c <_malloc_r>
  803bcc:	10002c26 	beq	r2,zero,803c80 <__smakebuf_r+0x17c>
  803bd0:	80c0030b 	ldhu	r3,12(r16)
  803bd4:	01002034 	movhi	r4,128
  803bd8:	21041c04 	addi	r4,r4,4208
  803bdc:	89000f15 	stw	r4,60(r17)
  803be0:	18c02014 	ori	r3,r3,128
  803be4:	80c0030d 	sth	r3,12(r16)
  803be8:	80800015 	stw	r2,0(r16)
  803bec:	80800415 	stw	r2,16(r16)
  803bf0:	84800515 	stw	r18,20(r16)
  803bf4:	98001a1e 	bne	r19,zero,803c60 <__smakebuf_r+0x15c>
  803bf8:	dfc01317 	ldw	ra,76(sp)
  803bfc:	dcc01217 	ldw	r19,72(sp)
  803c00:	dc801117 	ldw	r18,68(sp)
  803c04:	dc401017 	ldw	r17,64(sp)
  803c08:	dc000f17 	ldw	r16,60(sp)
  803c0c:	dec01404 	addi	sp,sp,80
  803c10:	f800283a 	ret
  803c14:	288010c4 	addi	r2,r5,67
  803c18:	28800015 	stw	r2,0(r5)
  803c1c:	28800415 	stw	r2,16(r5)
  803c20:	00800044 	movi	r2,1
  803c24:	28800515 	stw	r2,20(r5)
  803c28:	f800283a 	ret
  803c2c:	04801004 	movi	r18,64
  803c30:	003fe006 	br	803bb4 <__alt_mem_onchip_mem+0xff7fbbb4>
  803c34:	81000a17 	ldw	r4,40(r16)
  803c38:	00c02034 	movhi	r3,128
  803c3c:	18cbc004 	addi	r3,r3,12032
  803c40:	20ffc51e 	bne	r4,r3,803b58 <__alt_mem_onchip_mem+0xff7fbb58>
  803c44:	8080030b 	ldhu	r2,12(r16)
  803c48:	04810004 	movi	r18,1024
  803c4c:	84801315 	stw	r18,76(r16)
  803c50:	1484b03a 	or	r2,r2,r18
  803c54:	8080030d 	sth	r2,12(r16)
  803c58:	0027883a 	mov	r19,zero
  803c5c:	003fd806 	br	803bc0 <__alt_mem_onchip_mem+0xff7fbbc0>
  803c60:	8140038f 	ldh	r5,14(r16)
  803c64:	8809883a 	mov	r4,r17
  803c68:	0803d7c0 	call	803d7c <_isatty_r>
  803c6c:	103fe226 	beq	r2,zero,803bf8 <__alt_mem_onchip_mem+0xff7fbbf8>
  803c70:	8080030b 	ldhu	r2,12(r16)
  803c74:	10800054 	ori	r2,r2,1
  803c78:	8080030d 	sth	r2,12(r16)
  803c7c:	003fde06 	br	803bf8 <__alt_mem_onchip_mem+0xff7fbbf8>
  803c80:	8080030b 	ldhu	r2,12(r16)
  803c84:	10c0800c 	andi	r3,r2,512
  803c88:	183fdb1e 	bne	r3,zero,803bf8 <__alt_mem_onchip_mem+0xff7fbbf8>
  803c8c:	10800094 	ori	r2,r2,2
  803c90:	80c010c4 	addi	r3,r16,67
  803c94:	8080030d 	sth	r2,12(r16)
  803c98:	00800044 	movi	r2,1
  803c9c:	80c00015 	stw	r3,0(r16)
  803ca0:	80c00415 	stw	r3,16(r16)
  803ca4:	80800515 	stw	r2,20(r16)
  803ca8:	003fd306 	br	803bf8 <__alt_mem_onchip_mem+0xff7fbbf8>
  803cac:	04810004 	movi	r18,1024
  803cb0:	003fc306 	br	803bc0 <__alt_mem_onchip_mem+0xff7fbbc0>
  803cb4:	0027883a 	mov	r19,zero
  803cb8:	04810004 	movi	r18,1024
  803cbc:	003fc006 	br	803bc0 <__alt_mem_onchip_mem+0xff7fbbc0>

00803cc0 <_read_r>:
  803cc0:	defffd04 	addi	sp,sp,-12
  803cc4:	2805883a 	mov	r2,r5
  803cc8:	dc000015 	stw	r16,0(sp)
  803ccc:	04002074 	movhi	r16,129
  803cd0:	dc400115 	stw	r17,4(sp)
  803cd4:	300b883a 	mov	r5,r6
  803cd8:	842fbb04 	addi	r16,r16,-16660
  803cdc:	2023883a 	mov	r17,r4
  803ce0:	380d883a 	mov	r6,r7
  803ce4:	1009883a 	mov	r4,r2
  803ce8:	dfc00215 	stw	ra,8(sp)
  803cec:	80000015 	stw	zero,0(r16)
  803cf0:	08048300 	call	804830 <read>
  803cf4:	00ffffc4 	movi	r3,-1
  803cf8:	10c00526 	beq	r2,r3,803d10 <_read_r+0x50>
  803cfc:	dfc00217 	ldw	ra,8(sp)
  803d00:	dc400117 	ldw	r17,4(sp)
  803d04:	dc000017 	ldw	r16,0(sp)
  803d08:	dec00304 	addi	sp,sp,12
  803d0c:	f800283a 	ret
  803d10:	80c00017 	ldw	r3,0(r16)
  803d14:	183ff926 	beq	r3,zero,803cfc <__alt_mem_onchip_mem+0xff7fbcfc>
  803d18:	88c00015 	stw	r3,0(r17)
  803d1c:	003ff706 	br	803cfc <__alt_mem_onchip_mem+0xff7fbcfc>

00803d20 <_fstat_r>:
  803d20:	defffd04 	addi	sp,sp,-12
  803d24:	2805883a 	mov	r2,r5
  803d28:	dc000015 	stw	r16,0(sp)
  803d2c:	04002074 	movhi	r16,129
  803d30:	dc400115 	stw	r17,4(sp)
  803d34:	842fbb04 	addi	r16,r16,-16660
  803d38:	2023883a 	mov	r17,r4
  803d3c:	300b883a 	mov	r5,r6
  803d40:	1009883a 	mov	r4,r2
  803d44:	dfc00215 	stw	ra,8(sp)
  803d48:	80000015 	stw	zero,0(r16)
  803d4c:	08042240 	call	804224 <fstat>
  803d50:	00ffffc4 	movi	r3,-1
  803d54:	10c00526 	beq	r2,r3,803d6c <_fstat_r+0x4c>
  803d58:	dfc00217 	ldw	ra,8(sp)
  803d5c:	dc400117 	ldw	r17,4(sp)
  803d60:	dc000017 	ldw	r16,0(sp)
  803d64:	dec00304 	addi	sp,sp,12
  803d68:	f800283a 	ret
  803d6c:	80c00017 	ldw	r3,0(r16)
  803d70:	183ff926 	beq	r3,zero,803d58 <__alt_mem_onchip_mem+0xff7fbd58>
  803d74:	88c00015 	stw	r3,0(r17)
  803d78:	003ff706 	br	803d58 <__alt_mem_onchip_mem+0xff7fbd58>

00803d7c <_isatty_r>:
  803d7c:	defffd04 	addi	sp,sp,-12
  803d80:	dc000015 	stw	r16,0(sp)
  803d84:	04002074 	movhi	r16,129
  803d88:	dc400115 	stw	r17,4(sp)
  803d8c:	842fbb04 	addi	r16,r16,-16660
  803d90:	2023883a 	mov	r17,r4
  803d94:	2809883a 	mov	r4,r5
  803d98:	dfc00215 	stw	ra,8(sp)
  803d9c:	80000015 	stw	zero,0(r16)
  803da0:	08044900 	call	804490 <isatty>
  803da4:	00ffffc4 	movi	r3,-1
  803da8:	10c00526 	beq	r2,r3,803dc0 <_isatty_r+0x44>
  803dac:	dfc00217 	ldw	ra,8(sp)
  803db0:	dc400117 	ldw	r17,4(sp)
  803db4:	dc000017 	ldw	r16,0(sp)
  803db8:	dec00304 	addi	sp,sp,12
  803dbc:	f800283a 	ret
  803dc0:	80c00017 	ldw	r3,0(r16)
  803dc4:	183ff926 	beq	r3,zero,803dac <__alt_mem_onchip_mem+0xff7fbdac>
  803dc8:	88c00015 	stw	r3,0(r17)
  803dcc:	003ff706 	br	803dac <__alt_mem_onchip_mem+0xff7fbdac>

00803dd0 <__divsi3>:
  803dd0:	20001b16 	blt	r4,zero,803e40 <__divsi3+0x70>
  803dd4:	000f883a 	mov	r7,zero
  803dd8:	28001616 	blt	r5,zero,803e34 <__divsi3+0x64>
  803ddc:	200d883a 	mov	r6,r4
  803de0:	29001a2e 	bgeu	r5,r4,803e4c <__divsi3+0x7c>
  803de4:	00800804 	movi	r2,32
  803de8:	00c00044 	movi	r3,1
  803dec:	00000106 	br	803df4 <__divsi3+0x24>
  803df0:	10000d26 	beq	r2,zero,803e28 <__divsi3+0x58>
  803df4:	294b883a 	add	r5,r5,r5
  803df8:	10bfffc4 	addi	r2,r2,-1
  803dfc:	18c7883a 	add	r3,r3,r3
  803e00:	293ffb36 	bltu	r5,r4,803df0 <__alt_mem_onchip_mem+0xff7fbdf0>
  803e04:	0005883a 	mov	r2,zero
  803e08:	18000726 	beq	r3,zero,803e28 <__divsi3+0x58>
  803e0c:	0005883a 	mov	r2,zero
  803e10:	31400236 	bltu	r6,r5,803e1c <__divsi3+0x4c>
  803e14:	314dc83a 	sub	r6,r6,r5
  803e18:	10c4b03a 	or	r2,r2,r3
  803e1c:	1806d07a 	srli	r3,r3,1
  803e20:	280ad07a 	srli	r5,r5,1
  803e24:	183ffa1e 	bne	r3,zero,803e10 <__alt_mem_onchip_mem+0xff7fbe10>
  803e28:	38000126 	beq	r7,zero,803e30 <__divsi3+0x60>
  803e2c:	0085c83a 	sub	r2,zero,r2
  803e30:	f800283a 	ret
  803e34:	014bc83a 	sub	r5,zero,r5
  803e38:	39c0005c 	xori	r7,r7,1
  803e3c:	003fe706 	br	803ddc <__alt_mem_onchip_mem+0xff7fbddc>
  803e40:	0109c83a 	sub	r4,zero,r4
  803e44:	01c00044 	movi	r7,1
  803e48:	003fe306 	br	803dd8 <__alt_mem_onchip_mem+0xff7fbdd8>
  803e4c:	00c00044 	movi	r3,1
  803e50:	003fee06 	br	803e0c <__alt_mem_onchip_mem+0xff7fbe0c>

00803e54 <__modsi3>:
  803e54:	20001716 	blt	r4,zero,803eb4 <__modsi3+0x60>
  803e58:	000f883a 	mov	r7,zero
  803e5c:	2005883a 	mov	r2,r4
  803e60:	28001216 	blt	r5,zero,803eac <__modsi3+0x58>
  803e64:	2900162e 	bgeu	r5,r4,803ec0 <__modsi3+0x6c>
  803e68:	01800804 	movi	r6,32
  803e6c:	00c00044 	movi	r3,1
  803e70:	00000106 	br	803e78 <__modsi3+0x24>
  803e74:	30000a26 	beq	r6,zero,803ea0 <__modsi3+0x4c>
  803e78:	294b883a 	add	r5,r5,r5
  803e7c:	31bfffc4 	addi	r6,r6,-1
  803e80:	18c7883a 	add	r3,r3,r3
  803e84:	293ffb36 	bltu	r5,r4,803e74 <__alt_mem_onchip_mem+0xff7fbe74>
  803e88:	18000526 	beq	r3,zero,803ea0 <__modsi3+0x4c>
  803e8c:	1806d07a 	srli	r3,r3,1
  803e90:	11400136 	bltu	r2,r5,803e98 <__modsi3+0x44>
  803e94:	1145c83a 	sub	r2,r2,r5
  803e98:	280ad07a 	srli	r5,r5,1
  803e9c:	183ffb1e 	bne	r3,zero,803e8c <__alt_mem_onchip_mem+0xff7fbe8c>
  803ea0:	38000126 	beq	r7,zero,803ea8 <__modsi3+0x54>
  803ea4:	0085c83a 	sub	r2,zero,r2
  803ea8:	f800283a 	ret
  803eac:	014bc83a 	sub	r5,zero,r5
  803eb0:	003fec06 	br	803e64 <__alt_mem_onchip_mem+0xff7fbe64>
  803eb4:	0109c83a 	sub	r4,zero,r4
  803eb8:	01c00044 	movi	r7,1
  803ebc:	003fe706 	br	803e5c <__alt_mem_onchip_mem+0xff7fbe5c>
  803ec0:	00c00044 	movi	r3,1
  803ec4:	003ff106 	br	803e8c <__alt_mem_onchip_mem+0xff7fbe8c>

00803ec8 <__udivsi3>:
  803ec8:	200d883a 	mov	r6,r4
  803ecc:	2900152e 	bgeu	r5,r4,803f24 <__udivsi3+0x5c>
  803ed0:	28001416 	blt	r5,zero,803f24 <__udivsi3+0x5c>
  803ed4:	00800804 	movi	r2,32
  803ed8:	00c00044 	movi	r3,1
  803edc:	00000206 	br	803ee8 <__udivsi3+0x20>
  803ee0:	10000e26 	beq	r2,zero,803f1c <__udivsi3+0x54>
  803ee4:	28000516 	blt	r5,zero,803efc <__udivsi3+0x34>
  803ee8:	294b883a 	add	r5,r5,r5
  803eec:	10bfffc4 	addi	r2,r2,-1
  803ef0:	18c7883a 	add	r3,r3,r3
  803ef4:	293ffa36 	bltu	r5,r4,803ee0 <__alt_mem_onchip_mem+0xff7fbee0>
  803ef8:	18000826 	beq	r3,zero,803f1c <__udivsi3+0x54>
  803efc:	0005883a 	mov	r2,zero
  803f00:	31400236 	bltu	r6,r5,803f0c <__udivsi3+0x44>
  803f04:	314dc83a 	sub	r6,r6,r5
  803f08:	10c4b03a 	or	r2,r2,r3
  803f0c:	1806d07a 	srli	r3,r3,1
  803f10:	280ad07a 	srli	r5,r5,1
  803f14:	183ffa1e 	bne	r3,zero,803f00 <__alt_mem_onchip_mem+0xff7fbf00>
  803f18:	f800283a 	ret
  803f1c:	0005883a 	mov	r2,zero
  803f20:	f800283a 	ret
  803f24:	00c00044 	movi	r3,1
  803f28:	003ff406 	br	803efc <__alt_mem_onchip_mem+0xff7fbefc>

00803f2c <__umodsi3>:
  803f2c:	2005883a 	mov	r2,r4
  803f30:	2900122e 	bgeu	r5,r4,803f7c <__umodsi3+0x50>
  803f34:	28001116 	blt	r5,zero,803f7c <__umodsi3+0x50>
  803f38:	01800804 	movi	r6,32
  803f3c:	00c00044 	movi	r3,1
  803f40:	00000206 	br	803f4c <__umodsi3+0x20>
  803f44:	30000c26 	beq	r6,zero,803f78 <__umodsi3+0x4c>
  803f48:	28000516 	blt	r5,zero,803f60 <__umodsi3+0x34>
  803f4c:	294b883a 	add	r5,r5,r5
  803f50:	31bfffc4 	addi	r6,r6,-1
  803f54:	18c7883a 	add	r3,r3,r3
  803f58:	293ffa36 	bltu	r5,r4,803f44 <__alt_mem_onchip_mem+0xff7fbf44>
  803f5c:	18000626 	beq	r3,zero,803f78 <__umodsi3+0x4c>
  803f60:	1806d07a 	srli	r3,r3,1
  803f64:	11400136 	bltu	r2,r5,803f6c <__umodsi3+0x40>
  803f68:	1145c83a 	sub	r2,r2,r5
  803f6c:	280ad07a 	srli	r5,r5,1
  803f70:	183ffb1e 	bne	r3,zero,803f60 <__alt_mem_onchip_mem+0xff7fbf60>
  803f74:	f800283a 	ret
  803f78:	f800283a 	ret
  803f7c:	00c00044 	movi	r3,1
  803f80:	003ff706 	br	803f60 <__alt_mem_onchip_mem+0xff7fbf60>

00803f84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  803f84:	defff504 	addi	sp,sp,-44
  803f88:	df000a15 	stw	fp,40(sp)
  803f8c:	df000a04 	addi	fp,sp,40
  803f90:	e13ffc15 	stw	r4,-16(fp)
  803f94:	e17ffd15 	stw	r5,-12(fp)
  803f98:	e1bffe15 	stw	r6,-8(fp)
  803f9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  803fa0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803fa4:	d0a73317 	ldw	r2,-25396(gp)
  
  if (alt_ticks_per_second ())
  803fa8:	10003c26 	beq	r2,zero,80409c <alt_alarm_start+0x118>
  {
    if (alarm)
  803fac:	e0bffc17 	ldw	r2,-16(fp)
  803fb0:	10003826 	beq	r2,zero,804094 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  803fb4:	e0bffc17 	ldw	r2,-16(fp)
  803fb8:	e0fffe17 	ldw	r3,-8(fp)
  803fbc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  803fc0:	e0bffc17 	ldw	r2,-16(fp)
  803fc4:	e0ffff17 	ldw	r3,-4(fp)
  803fc8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803fcc:	0005303a 	rdctl	r2,status
  803fd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803fd4:	e0fff917 	ldw	r3,-28(fp)
  803fd8:	00bfff84 	movi	r2,-2
  803fdc:	1884703a 	and	r2,r3,r2
  803fe0:	1001703a 	wrctl	status,r2
  
  return context;
  803fe4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  803fe8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  803fec:	d0a73417 	ldw	r2,-25392(gp)
      
      current_nticks = alt_nticks();
  803ff0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  803ff4:	e0fffd17 	ldw	r3,-12(fp)
  803ff8:	e0bff617 	ldw	r2,-40(fp)
  803ffc:	1885883a 	add	r2,r3,r2
  804000:	10c00044 	addi	r3,r2,1
  804004:	e0bffc17 	ldw	r2,-16(fp)
  804008:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80400c:	e0bffc17 	ldw	r2,-16(fp)
  804010:	10c00217 	ldw	r3,8(r2)
  804014:	e0bff617 	ldw	r2,-40(fp)
  804018:	1880042e 	bgeu	r3,r2,80402c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80401c:	e0bffc17 	ldw	r2,-16(fp)
  804020:	00c00044 	movi	r3,1
  804024:	10c00405 	stb	r3,16(r2)
  804028:	00000206 	br	804034 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80402c:	e0bffc17 	ldw	r2,-16(fp)
  804030:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  804034:	e0bffc17 	ldw	r2,-16(fp)
  804038:	d0e00c04 	addi	r3,gp,-32720
  80403c:	e0fffa15 	stw	r3,-24(fp)
  804040:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804044:	e0bffb17 	ldw	r2,-20(fp)
  804048:	e0fffa17 	ldw	r3,-24(fp)
  80404c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  804050:	e0bffa17 	ldw	r2,-24(fp)
  804054:	10c00017 	ldw	r3,0(r2)
  804058:	e0bffb17 	ldw	r2,-20(fp)
  80405c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  804060:	e0bffa17 	ldw	r2,-24(fp)
  804064:	10800017 	ldw	r2,0(r2)
  804068:	e0fffb17 	ldw	r3,-20(fp)
  80406c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  804070:	e0bffa17 	ldw	r2,-24(fp)
  804074:	e0fffb17 	ldw	r3,-20(fp)
  804078:	10c00015 	stw	r3,0(r2)
  80407c:	e0bff817 	ldw	r2,-32(fp)
  804080:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804084:	e0bff717 	ldw	r2,-36(fp)
  804088:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80408c:	0005883a 	mov	r2,zero
  804090:	00000306 	br	8040a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  804094:	00bffa84 	movi	r2,-22
  804098:	00000106 	br	8040a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80409c:	00bfde84 	movi	r2,-134
  }
}
  8040a0:	e037883a 	mov	sp,fp
  8040a4:	df000017 	ldw	fp,0(sp)
  8040a8:	dec00104 	addi	sp,sp,4
  8040ac:	f800283a 	ret

008040b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8040b0:	defffe04 	addi	sp,sp,-8
  8040b4:	dfc00115 	stw	ra,4(sp)
  8040b8:	df000015 	stw	fp,0(sp)
  8040bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8040c0:	d0a00917 	ldw	r2,-32732(gp)
  8040c4:	10000326 	beq	r2,zero,8040d4 <alt_get_errno+0x24>
  8040c8:	d0a00917 	ldw	r2,-32732(gp)
  8040cc:	103ee83a 	callr	r2
  8040d0:	00000106 	br	8040d8 <alt_get_errno+0x28>
  8040d4:	d0a72e04 	addi	r2,gp,-25416
}
  8040d8:	e037883a 	mov	sp,fp
  8040dc:	dfc00117 	ldw	ra,4(sp)
  8040e0:	df000017 	ldw	fp,0(sp)
  8040e4:	dec00204 	addi	sp,sp,8
  8040e8:	f800283a 	ret

008040ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8040ec:	defffb04 	addi	sp,sp,-20
  8040f0:	dfc00415 	stw	ra,16(sp)
  8040f4:	df000315 	stw	fp,12(sp)
  8040f8:	df000304 	addi	fp,sp,12
  8040fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  804100:	e0bfff17 	ldw	r2,-4(fp)
  804104:	10000616 	blt	r2,zero,804120 <close+0x34>
  804108:	e0bfff17 	ldw	r2,-4(fp)
  80410c:	10c00324 	muli	r3,r2,12
  804110:	00802074 	movhi	r2,129
  804114:	10a39c04 	addi	r2,r2,-29072
  804118:	1885883a 	add	r2,r3,r2
  80411c:	00000106 	br	804124 <close+0x38>
  804120:	0005883a 	mov	r2,zero
  804124:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  804128:	e0bffd17 	ldw	r2,-12(fp)
  80412c:	10001926 	beq	r2,zero,804194 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  804130:	e0bffd17 	ldw	r2,-12(fp)
  804134:	10800017 	ldw	r2,0(r2)
  804138:	10800417 	ldw	r2,16(r2)
  80413c:	10000626 	beq	r2,zero,804158 <close+0x6c>
  804140:	e0bffd17 	ldw	r2,-12(fp)
  804144:	10800017 	ldw	r2,0(r2)
  804148:	10800417 	ldw	r2,16(r2)
  80414c:	e13ffd17 	ldw	r4,-12(fp)
  804150:	103ee83a 	callr	r2
  804154:	00000106 	br	80415c <close+0x70>
  804158:	0005883a 	mov	r2,zero
  80415c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  804160:	e13fff17 	ldw	r4,-4(fp)
  804164:	080492c0 	call	80492c <alt_release_fd>
    if (rval < 0)
  804168:	e0bffe17 	ldw	r2,-8(fp)
  80416c:	1000070e 	bge	r2,zero,80418c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  804170:	08040b00 	call	8040b0 <alt_get_errno>
  804174:	1007883a 	mov	r3,r2
  804178:	e0bffe17 	ldw	r2,-8(fp)
  80417c:	0085c83a 	sub	r2,zero,r2
  804180:	18800015 	stw	r2,0(r3)
      return -1;
  804184:	00bfffc4 	movi	r2,-1
  804188:	00000706 	br	8041a8 <close+0xbc>
    }
    return 0;
  80418c:	0005883a 	mov	r2,zero
  804190:	00000506 	br	8041a8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  804194:	08040b00 	call	8040b0 <alt_get_errno>
  804198:	1007883a 	mov	r3,r2
  80419c:	00801444 	movi	r2,81
  8041a0:	18800015 	stw	r2,0(r3)
    return -1;
  8041a4:	00bfffc4 	movi	r2,-1
  }
}
  8041a8:	e037883a 	mov	sp,fp
  8041ac:	dfc00117 	ldw	ra,4(sp)
  8041b0:	df000017 	ldw	fp,0(sp)
  8041b4:	dec00204 	addi	sp,sp,8
  8041b8:	f800283a 	ret

008041bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8041bc:	defffc04 	addi	sp,sp,-16
  8041c0:	df000315 	stw	fp,12(sp)
  8041c4:	df000304 	addi	fp,sp,12
  8041c8:	e13ffd15 	stw	r4,-12(fp)
  8041cc:	e17ffe15 	stw	r5,-8(fp)
  8041d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8041d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8041d8:	e037883a 	mov	sp,fp
  8041dc:	df000017 	ldw	fp,0(sp)
  8041e0:	dec00104 	addi	sp,sp,4
  8041e4:	f800283a 	ret

008041e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8041e8:	defffe04 	addi	sp,sp,-8
  8041ec:	dfc00115 	stw	ra,4(sp)
  8041f0:	df000015 	stw	fp,0(sp)
  8041f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8041f8:	d0a00917 	ldw	r2,-32732(gp)
  8041fc:	10000326 	beq	r2,zero,80420c <alt_get_errno+0x24>
  804200:	d0a00917 	ldw	r2,-32732(gp)
  804204:	103ee83a 	callr	r2
  804208:	00000106 	br	804210 <alt_get_errno+0x28>
  80420c:	d0a72e04 	addi	r2,gp,-25416
}
  804210:	e037883a 	mov	sp,fp
  804214:	dfc00117 	ldw	ra,4(sp)
  804218:	df000017 	ldw	fp,0(sp)
  80421c:	dec00204 	addi	sp,sp,8
  804220:	f800283a 	ret

00804224 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  804224:	defffb04 	addi	sp,sp,-20
  804228:	dfc00415 	stw	ra,16(sp)
  80422c:	df000315 	stw	fp,12(sp)
  804230:	df000304 	addi	fp,sp,12
  804234:	e13ffe15 	stw	r4,-8(fp)
  804238:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80423c:	e0bffe17 	ldw	r2,-8(fp)
  804240:	10000616 	blt	r2,zero,80425c <fstat+0x38>
  804244:	e0bffe17 	ldw	r2,-8(fp)
  804248:	10c00324 	muli	r3,r2,12
  80424c:	00802074 	movhi	r2,129
  804250:	10a39c04 	addi	r2,r2,-29072
  804254:	1885883a 	add	r2,r3,r2
  804258:	00000106 	br	804260 <fstat+0x3c>
  80425c:	0005883a 	mov	r2,zero
  804260:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  804264:	e0bffd17 	ldw	r2,-12(fp)
  804268:	10001026 	beq	r2,zero,8042ac <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80426c:	e0bffd17 	ldw	r2,-12(fp)
  804270:	10800017 	ldw	r2,0(r2)
  804274:	10800817 	ldw	r2,32(r2)
  804278:	10000726 	beq	r2,zero,804298 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80427c:	e0bffd17 	ldw	r2,-12(fp)
  804280:	10800017 	ldw	r2,0(r2)
  804284:	10800817 	ldw	r2,32(r2)
  804288:	e17fff17 	ldw	r5,-4(fp)
  80428c:	e13ffd17 	ldw	r4,-12(fp)
  804290:	103ee83a 	callr	r2
  804294:	00000a06 	br	8042c0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  804298:	e0bfff17 	ldw	r2,-4(fp)
  80429c:	00c80004 	movi	r3,8192
  8042a0:	10c00115 	stw	r3,4(r2)
      return 0;
  8042a4:	0005883a 	mov	r2,zero
  8042a8:	00000506 	br	8042c0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8042ac:	08041e80 	call	8041e8 <alt_get_errno>
  8042b0:	1007883a 	mov	r3,r2
  8042b4:	00801444 	movi	r2,81
  8042b8:	18800015 	stw	r2,0(r3)
    return -1;
  8042bc:	00bfffc4 	movi	r2,-1
  }
}
  8042c0:	e037883a 	mov	sp,fp
  8042c4:	dfc00117 	ldw	ra,4(sp)
  8042c8:	df000017 	ldw	fp,0(sp)
  8042cc:	dec00204 	addi	sp,sp,8
  8042d0:	f800283a 	ret

008042d4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8042d4:	defff004 	addi	sp,sp,-64
  8042d8:	df000f15 	stw	fp,60(sp)
  8042dc:	df000f04 	addi	fp,sp,60
  8042e0:	e13ffd15 	stw	r4,-12(fp)
  8042e4:	e17ffe15 	stw	r5,-8(fp)
  8042e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  8042ec:	00bffa84 	movi	r2,-22
  8042f0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8042f4:	e0bffd17 	ldw	r2,-12(fp)
  8042f8:	10800828 	cmpgeui	r2,r2,32
  8042fc:	1000501e 	bne	r2,zero,804440 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804300:	0005303a 	rdctl	r2,status
  804304:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804308:	e0fff617 	ldw	r3,-40(fp)
  80430c:	00bfff84 	movi	r2,-2
  804310:	1884703a 	and	r2,r3,r2
  804314:	1001703a 	wrctl	status,r2
  
  return context;
  804318:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80431c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  804320:	00802074 	movhi	r2,129
  804324:	10afcd04 	addi	r2,r2,-16588
  804328:	e0fffd17 	ldw	r3,-12(fp)
  80432c:	180690fa 	slli	r3,r3,3
  804330:	10c5883a 	add	r2,r2,r3
  804334:	e0ffff17 	ldw	r3,-4(fp)
  804338:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80433c:	00802074 	movhi	r2,129
  804340:	10afcd04 	addi	r2,r2,-16588
  804344:	e0fffd17 	ldw	r3,-12(fp)
  804348:	180690fa 	slli	r3,r3,3
  80434c:	10c5883a 	add	r2,r2,r3
  804350:	10800104 	addi	r2,r2,4
  804354:	e0fffe17 	ldw	r3,-8(fp)
  804358:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80435c:	e0bfff17 	ldw	r2,-4(fp)
  804360:	10001926 	beq	r2,zero,8043c8 <alt_irq_register+0xf4>
  804364:	e0bffd17 	ldw	r2,-12(fp)
  804368:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80436c:	0005303a 	rdctl	r2,status
  804370:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804374:	e0fff717 	ldw	r3,-36(fp)
  804378:	00bfff84 	movi	r2,-2
  80437c:	1884703a 	and	r2,r3,r2
  804380:	1001703a 	wrctl	status,r2
  
  return context;
  804384:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  804388:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80438c:	00c00044 	movi	r3,1
  804390:	e0bff217 	ldw	r2,-56(fp)
  804394:	1884983a 	sll	r2,r3,r2
  804398:	1007883a 	mov	r3,r2
  80439c:	d0a72f17 	ldw	r2,-25412(gp)
  8043a0:	1884b03a 	or	r2,r3,r2
  8043a4:	d0a72f15 	stw	r2,-25412(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8043a8:	d0a72f17 	ldw	r2,-25412(gp)
  8043ac:	100170fa 	wrctl	ienable,r2
  8043b0:	e0bff817 	ldw	r2,-32(fp)
  8043b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8043b8:	e0bff917 	ldw	r2,-28(fp)
  8043bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8043c0:	0005883a 	mov	r2,zero
  8043c4:	00001906 	br	80442c <alt_irq_register+0x158>
  8043c8:	e0bffd17 	ldw	r2,-12(fp)
  8043cc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8043d0:	0005303a 	rdctl	r2,status
  8043d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8043d8:	e0fffa17 	ldw	r3,-24(fp)
  8043dc:	00bfff84 	movi	r2,-2
  8043e0:	1884703a 	and	r2,r3,r2
  8043e4:	1001703a 	wrctl	status,r2
  
  return context;
  8043e8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8043ec:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  8043f0:	00c00044 	movi	r3,1
  8043f4:	e0bff417 	ldw	r2,-48(fp)
  8043f8:	1884983a 	sll	r2,r3,r2
  8043fc:	0084303a 	nor	r2,zero,r2
  804400:	1007883a 	mov	r3,r2
  804404:	d0a72f17 	ldw	r2,-25412(gp)
  804408:	1884703a 	and	r2,r3,r2
  80440c:	d0a72f15 	stw	r2,-25412(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804410:	d0a72f17 	ldw	r2,-25412(gp)
  804414:	100170fa 	wrctl	ienable,r2
  804418:	e0bffb17 	ldw	r2,-20(fp)
  80441c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804420:	e0bffc17 	ldw	r2,-16(fp)
  804424:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  804428:	0005883a 	mov	r2,zero
  80442c:	e0bff115 	stw	r2,-60(fp)
  804430:	e0bff317 	ldw	r2,-52(fp)
  804434:	e0bff515 	stw	r2,-44(fp)
  804438:	e0bff517 	ldw	r2,-44(fp)
  80443c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  804440:	e0bff117 	ldw	r2,-60(fp)
}
  804444:	e037883a 	mov	sp,fp
  804448:	df000017 	ldw	fp,0(sp)
  80444c:	dec00104 	addi	sp,sp,4
  804450:	f800283a 	ret

00804454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804454:	defffe04 	addi	sp,sp,-8
  804458:	dfc00115 	stw	ra,4(sp)
  80445c:	df000015 	stw	fp,0(sp)
  804460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804464:	d0a00917 	ldw	r2,-32732(gp)
  804468:	10000326 	beq	r2,zero,804478 <alt_get_errno+0x24>
  80446c:	d0a00917 	ldw	r2,-32732(gp)
  804470:	103ee83a 	callr	r2
  804474:	00000106 	br	80447c <alt_get_errno+0x28>
  804478:	d0a72e04 	addi	r2,gp,-25416
}
  80447c:	e037883a 	mov	sp,fp
  804480:	dfc00117 	ldw	ra,4(sp)
  804484:	df000017 	ldw	fp,0(sp)
  804488:	dec00204 	addi	sp,sp,8
  80448c:	f800283a 	ret

00804490 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  804490:	deffed04 	addi	sp,sp,-76
  804494:	dfc01215 	stw	ra,72(sp)
  804498:	df001115 	stw	fp,68(sp)
  80449c:	df001104 	addi	fp,sp,68
  8044a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8044a4:	e0bfff17 	ldw	r2,-4(fp)
  8044a8:	10000616 	blt	r2,zero,8044c4 <isatty+0x34>
  8044ac:	e0bfff17 	ldw	r2,-4(fp)
  8044b0:	10c00324 	muli	r3,r2,12
  8044b4:	00802074 	movhi	r2,129
  8044b8:	10a39c04 	addi	r2,r2,-29072
  8044bc:	1885883a 	add	r2,r3,r2
  8044c0:	00000106 	br	8044c8 <isatty+0x38>
  8044c4:	0005883a 	mov	r2,zero
  8044c8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8044cc:	e0bfef17 	ldw	r2,-68(fp)
  8044d0:	10000e26 	beq	r2,zero,80450c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8044d4:	e0bfef17 	ldw	r2,-68(fp)
  8044d8:	10800017 	ldw	r2,0(r2)
  8044dc:	10800817 	ldw	r2,32(r2)
  8044e0:	1000021e 	bne	r2,zero,8044ec <isatty+0x5c>
    {
      return 1;
  8044e4:	00800044 	movi	r2,1
  8044e8:	00000d06 	br	804520 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8044ec:	e0bff004 	addi	r2,fp,-64
  8044f0:	100b883a 	mov	r5,r2
  8044f4:	e13fff17 	ldw	r4,-4(fp)
  8044f8:	08042240 	call	804224 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8044fc:	e0bff117 	ldw	r2,-60(fp)
  804500:	10880020 	cmpeqi	r2,r2,8192
  804504:	10803fcc 	andi	r2,r2,255
  804508:	00000506 	br	804520 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80450c:	08044540 	call	804454 <alt_get_errno>
  804510:	1007883a 	mov	r3,r2
  804514:	00801444 	movi	r2,81
  804518:	18800015 	stw	r2,0(r3)
    return 0;
  80451c:	0005883a 	mov	r2,zero
  }
}
  804520:	e037883a 	mov	sp,fp
  804524:	dfc00117 	ldw	ra,4(sp)
  804528:	df000017 	ldw	fp,0(sp)
  80452c:	dec00204 	addi	sp,sp,8
  804530:	f800283a 	ret

00804534 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  804534:	defffc04 	addi	sp,sp,-16
  804538:	df000315 	stw	fp,12(sp)
  80453c:	df000304 	addi	fp,sp,12
  804540:	e13ffd15 	stw	r4,-12(fp)
  804544:	e17ffe15 	stw	r5,-8(fp)
  804548:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80454c:	e0fffe17 	ldw	r3,-8(fp)
  804550:	e0bffd17 	ldw	r2,-12(fp)
  804554:	18800c26 	beq	r3,r2,804588 <alt_load_section+0x54>
  {
    while( to != end )
  804558:	00000806 	br	80457c <alt_load_section+0x48>
    {
      *to++ = *from++;
  80455c:	e0bffe17 	ldw	r2,-8(fp)
  804560:	10c00104 	addi	r3,r2,4
  804564:	e0fffe15 	stw	r3,-8(fp)
  804568:	e0fffd17 	ldw	r3,-12(fp)
  80456c:	19000104 	addi	r4,r3,4
  804570:	e13ffd15 	stw	r4,-12(fp)
  804574:	18c00017 	ldw	r3,0(r3)
  804578:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80457c:	e0fffe17 	ldw	r3,-8(fp)
  804580:	e0bfff17 	ldw	r2,-4(fp)
  804584:	18bff51e 	bne	r3,r2,80455c <__alt_mem_onchip_mem+0xff7fc55c>
    {
      *to++ = *from++;
    }
  }
}
  804588:	0001883a 	nop
  80458c:	e037883a 	mov	sp,fp
  804590:	df000017 	ldw	fp,0(sp)
  804594:	dec00104 	addi	sp,sp,4
  804598:	f800283a 	ret

0080459c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80459c:	defffe04 	addi	sp,sp,-8
  8045a0:	dfc00115 	stw	ra,4(sp)
  8045a4:	df000015 	stw	fp,0(sp)
  8045a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8045ac:	01802074 	movhi	r6,129
  8045b0:	31a89d04 	addi	r6,r6,-23948
  8045b4:	01402074 	movhi	r5,129
  8045b8:	29618704 	addi	r5,r5,-31204
  8045bc:	01002074 	movhi	r4,129
  8045c0:	21289d04 	addi	r4,r4,-23948
  8045c4:	08045340 	call	804534 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8045c8:	01802034 	movhi	r6,128
  8045cc:	31809104 	addi	r6,r6,580
  8045d0:	01402034 	movhi	r5,128
  8045d4:	29400804 	addi	r5,r5,32
  8045d8:	01002034 	movhi	r4,128
  8045dc:	21000804 	addi	r4,r4,32
  8045e0:	08045340 	call	804534 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8045e4:	01802074 	movhi	r6,129
  8045e8:	31a18704 	addi	r6,r6,-31204
  8045ec:	01402074 	movhi	r5,129
  8045f0:	29608904 	addi	r5,r5,-32220
  8045f4:	01002074 	movhi	r4,129
  8045f8:	21208904 	addi	r4,r4,-32220
  8045fc:	08045340 	call	804534 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  804600:	080712c0 	call	80712c <alt_dcache_flush_all>
  alt_icache_flush_all();
  804604:	08073140 	call	807314 <alt_icache_flush_all>
}
  804608:	0001883a 	nop
  80460c:	e037883a 	mov	sp,fp
  804610:	dfc00117 	ldw	ra,4(sp)
  804614:	df000017 	ldw	fp,0(sp)
  804618:	dec00204 	addi	sp,sp,8
  80461c:	f800283a 	ret

00804620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804620:	defffe04 	addi	sp,sp,-8
  804624:	dfc00115 	stw	ra,4(sp)
  804628:	df000015 	stw	fp,0(sp)
  80462c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804630:	d0a00917 	ldw	r2,-32732(gp)
  804634:	10000326 	beq	r2,zero,804644 <alt_get_errno+0x24>
  804638:	d0a00917 	ldw	r2,-32732(gp)
  80463c:	103ee83a 	callr	r2
  804640:	00000106 	br	804648 <alt_get_errno+0x28>
  804644:	d0a72e04 	addi	r2,gp,-25416
}
  804648:	e037883a 	mov	sp,fp
  80464c:	dfc00117 	ldw	ra,4(sp)
  804650:	df000017 	ldw	fp,0(sp)
  804654:	dec00204 	addi	sp,sp,8
  804658:	f800283a 	ret

0080465c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80465c:	defff904 	addi	sp,sp,-28
  804660:	dfc00615 	stw	ra,24(sp)
  804664:	df000515 	stw	fp,20(sp)
  804668:	df000504 	addi	fp,sp,20
  80466c:	e13ffd15 	stw	r4,-12(fp)
  804670:	e17ffe15 	stw	r5,-8(fp)
  804674:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  804678:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80467c:	e0bffd17 	ldw	r2,-12(fp)
  804680:	10000616 	blt	r2,zero,80469c <lseek+0x40>
  804684:	e0bffd17 	ldw	r2,-12(fp)
  804688:	10c00324 	muli	r3,r2,12
  80468c:	00802074 	movhi	r2,129
  804690:	10a39c04 	addi	r2,r2,-29072
  804694:	1885883a 	add	r2,r3,r2
  804698:	00000106 	br	8046a0 <lseek+0x44>
  80469c:	0005883a 	mov	r2,zero
  8046a0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8046a4:	e0bffc17 	ldw	r2,-16(fp)
  8046a8:	10001026 	beq	r2,zero,8046ec <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8046ac:	e0bffc17 	ldw	r2,-16(fp)
  8046b0:	10800017 	ldw	r2,0(r2)
  8046b4:	10800717 	ldw	r2,28(r2)
  8046b8:	10000926 	beq	r2,zero,8046e0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8046bc:	e0bffc17 	ldw	r2,-16(fp)
  8046c0:	10800017 	ldw	r2,0(r2)
  8046c4:	10800717 	ldw	r2,28(r2)
  8046c8:	e1bfff17 	ldw	r6,-4(fp)
  8046cc:	e17ffe17 	ldw	r5,-8(fp)
  8046d0:	e13ffc17 	ldw	r4,-16(fp)
  8046d4:	103ee83a 	callr	r2
  8046d8:	e0bffb15 	stw	r2,-20(fp)
  8046dc:	00000506 	br	8046f4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8046e0:	00bfde84 	movi	r2,-134
  8046e4:	e0bffb15 	stw	r2,-20(fp)
  8046e8:	00000206 	br	8046f4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  8046ec:	00bfebc4 	movi	r2,-81
  8046f0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  8046f4:	e0bffb17 	ldw	r2,-20(fp)
  8046f8:	1000070e 	bge	r2,zero,804718 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  8046fc:	08046200 	call	804620 <alt_get_errno>
  804700:	1007883a 	mov	r3,r2
  804704:	e0bffb17 	ldw	r2,-20(fp)
  804708:	0085c83a 	sub	r2,zero,r2
  80470c:	18800015 	stw	r2,0(r3)
    rc = -1;
  804710:	00bfffc4 	movi	r2,-1
  804714:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  804718:	e0bffb17 	ldw	r2,-20(fp)
}
  80471c:	e037883a 	mov	sp,fp
  804720:	dfc00117 	ldw	ra,4(sp)
  804724:	df000017 	ldw	fp,0(sp)
  804728:	dec00204 	addi	sp,sp,8
  80472c:	f800283a 	ret

00804730 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804730:	defffd04 	addi	sp,sp,-12
  804734:	dfc00215 	stw	ra,8(sp)
  804738:	df000115 	stw	fp,4(sp)
  80473c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804740:	0009883a 	mov	r4,zero
  804744:	0804d4c0 	call	804d4c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  804748:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80474c:	0804d840 	call	804d84 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  804750:	01802074 	movhi	r6,129
  804754:	31a0d904 	addi	r6,r6,-31900
  804758:	01402074 	movhi	r5,129
  80475c:	2960d904 	addi	r5,r5,-31900
  804760:	01002074 	movhi	r4,129
  804764:	2120d904 	addi	r4,r4,-31900
  804768:	08076ac0 	call	8076ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80476c:	08072540 	call	807254 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  804770:	01002034 	movhi	r4,128
  804774:	211cad04 	addi	r4,r4,29364
  804778:	0807e900 	call	807e90 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80477c:	d0a73017 	ldw	r2,-25408(gp)
  804780:	d0e73117 	ldw	r3,-25404(gp)
  804784:	d1273217 	ldw	r4,-25400(gp)
  804788:	200d883a 	mov	r6,r4
  80478c:	180b883a 	mov	r5,r3
  804790:	1009883a 	mov	r4,r2
  804794:	080053c0 	call	80053c <main>
  804798:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80479c:	01000044 	movi	r4,1
  8047a0:	08040ec0 	call	8040ec <close>
  exit (result);
  8047a4:	e13fff17 	ldw	r4,-4(fp)
  8047a8:	0807ea40 	call	807ea4 <exit>

008047ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8047ac:	defffe04 	addi	sp,sp,-8
  8047b0:	df000115 	stw	fp,4(sp)
  8047b4:	df000104 	addi	fp,sp,4
  8047b8:	e13fff15 	stw	r4,-4(fp)
}
  8047bc:	0001883a 	nop
  8047c0:	e037883a 	mov	sp,fp
  8047c4:	df000017 	ldw	fp,0(sp)
  8047c8:	dec00104 	addi	sp,sp,4
  8047cc:	f800283a 	ret

008047d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8047d0:	defffe04 	addi	sp,sp,-8
  8047d4:	df000115 	stw	fp,4(sp)
  8047d8:	df000104 	addi	fp,sp,4
  8047dc:	e13fff15 	stw	r4,-4(fp)
}
  8047e0:	0001883a 	nop
  8047e4:	e037883a 	mov	sp,fp
  8047e8:	df000017 	ldw	fp,0(sp)
  8047ec:	dec00104 	addi	sp,sp,4
  8047f0:	f800283a 	ret

008047f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8047f4:	defffe04 	addi	sp,sp,-8
  8047f8:	dfc00115 	stw	ra,4(sp)
  8047fc:	df000015 	stw	fp,0(sp)
  804800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804804:	d0a00917 	ldw	r2,-32732(gp)
  804808:	10000326 	beq	r2,zero,804818 <alt_get_errno+0x24>
  80480c:	d0a00917 	ldw	r2,-32732(gp)
  804810:	103ee83a 	callr	r2
  804814:	00000106 	br	80481c <alt_get_errno+0x28>
  804818:	d0a72e04 	addi	r2,gp,-25416
}
  80481c:	e037883a 	mov	sp,fp
  804820:	dfc00117 	ldw	ra,4(sp)
  804824:	df000017 	ldw	fp,0(sp)
  804828:	dec00204 	addi	sp,sp,8
  80482c:	f800283a 	ret

00804830 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  804830:	defff904 	addi	sp,sp,-28
  804834:	dfc00615 	stw	ra,24(sp)
  804838:	df000515 	stw	fp,20(sp)
  80483c:	df000504 	addi	fp,sp,20
  804840:	e13ffd15 	stw	r4,-12(fp)
  804844:	e17ffe15 	stw	r5,-8(fp)
  804848:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80484c:	e0bffd17 	ldw	r2,-12(fp)
  804850:	10000616 	blt	r2,zero,80486c <read+0x3c>
  804854:	e0bffd17 	ldw	r2,-12(fp)
  804858:	10c00324 	muli	r3,r2,12
  80485c:	00802074 	movhi	r2,129
  804860:	10a39c04 	addi	r2,r2,-29072
  804864:	1885883a 	add	r2,r3,r2
  804868:	00000106 	br	804870 <read+0x40>
  80486c:	0005883a 	mov	r2,zero
  804870:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  804874:	e0bffb17 	ldw	r2,-20(fp)
  804878:	10002226 	beq	r2,zero,804904 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80487c:	e0bffb17 	ldw	r2,-20(fp)
  804880:	10800217 	ldw	r2,8(r2)
  804884:	108000cc 	andi	r2,r2,3
  804888:	10800060 	cmpeqi	r2,r2,1
  80488c:	1000181e 	bne	r2,zero,8048f0 <read+0xc0>
        (fd->dev->read))
  804890:	e0bffb17 	ldw	r2,-20(fp)
  804894:	10800017 	ldw	r2,0(r2)
  804898:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80489c:	10001426 	beq	r2,zero,8048f0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8048a0:	e0bffb17 	ldw	r2,-20(fp)
  8048a4:	10800017 	ldw	r2,0(r2)
  8048a8:	10800517 	ldw	r2,20(r2)
  8048ac:	e0ffff17 	ldw	r3,-4(fp)
  8048b0:	180d883a 	mov	r6,r3
  8048b4:	e17ffe17 	ldw	r5,-8(fp)
  8048b8:	e13ffb17 	ldw	r4,-20(fp)
  8048bc:	103ee83a 	callr	r2
  8048c0:	e0bffc15 	stw	r2,-16(fp)
  8048c4:	e0bffc17 	ldw	r2,-16(fp)
  8048c8:	1000070e 	bge	r2,zero,8048e8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  8048cc:	08047f40 	call	8047f4 <alt_get_errno>
  8048d0:	1007883a 	mov	r3,r2
  8048d4:	e0bffc17 	ldw	r2,-16(fp)
  8048d8:	0085c83a 	sub	r2,zero,r2
  8048dc:	18800015 	stw	r2,0(r3)
          return -1;
  8048e0:	00bfffc4 	movi	r2,-1
  8048e4:	00000c06 	br	804918 <read+0xe8>
        }
        return rval;
  8048e8:	e0bffc17 	ldw	r2,-16(fp)
  8048ec:	00000a06 	br	804918 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8048f0:	08047f40 	call	8047f4 <alt_get_errno>
  8048f4:	1007883a 	mov	r3,r2
  8048f8:	00800344 	movi	r2,13
  8048fc:	18800015 	stw	r2,0(r3)
  804900:	00000406 	br	804914 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  804904:	08047f40 	call	8047f4 <alt_get_errno>
  804908:	1007883a 	mov	r3,r2
  80490c:	00801444 	movi	r2,81
  804910:	18800015 	stw	r2,0(r3)
  }
  return -1;
  804914:	00bfffc4 	movi	r2,-1
}
  804918:	e037883a 	mov	sp,fp
  80491c:	dfc00117 	ldw	ra,4(sp)
  804920:	df000017 	ldw	fp,0(sp)
  804924:	dec00204 	addi	sp,sp,8
  804928:	f800283a 	ret

0080492c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80492c:	defffe04 	addi	sp,sp,-8
  804930:	df000115 	stw	fp,4(sp)
  804934:	df000104 	addi	fp,sp,4
  804938:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80493c:	e0bfff17 	ldw	r2,-4(fp)
  804940:	108000d0 	cmplti	r2,r2,3
  804944:	10000d1e 	bne	r2,zero,80497c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  804948:	00802074 	movhi	r2,129
  80494c:	10a39c04 	addi	r2,r2,-29072
  804950:	e0ffff17 	ldw	r3,-4(fp)
  804954:	18c00324 	muli	r3,r3,12
  804958:	10c5883a 	add	r2,r2,r3
  80495c:	10800204 	addi	r2,r2,8
  804960:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  804964:	00802074 	movhi	r2,129
  804968:	10a39c04 	addi	r2,r2,-29072
  80496c:	e0ffff17 	ldw	r3,-4(fp)
  804970:	18c00324 	muli	r3,r3,12
  804974:	10c5883a 	add	r2,r2,r3
  804978:	10000015 	stw	zero,0(r2)
  }
}
  80497c:	0001883a 	nop
  804980:	e037883a 	mov	sp,fp
  804984:	df000017 	ldw	fp,0(sp)
  804988:	dec00104 	addi	sp,sp,4
  80498c:	f800283a 	ret

00804990 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  804990:	defff904 	addi	sp,sp,-28
  804994:	df000615 	stw	fp,24(sp)
  804998:	df000604 	addi	fp,sp,24
  80499c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8049a0:	0005303a 	rdctl	r2,status
  8049a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8049a8:	e0fffe17 	ldw	r3,-8(fp)
  8049ac:	00bfff84 	movi	r2,-2
  8049b0:	1884703a 	and	r2,r3,r2
  8049b4:	1001703a 	wrctl	status,r2
  
  return context;
  8049b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8049bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8049c0:	d0a00b17 	ldw	r2,-32724(gp)
  8049c4:	10c000c4 	addi	r3,r2,3
  8049c8:	00bfff04 	movi	r2,-4
  8049cc:	1884703a 	and	r2,r3,r2
  8049d0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8049d4:	d0e00b17 	ldw	r3,-32724(gp)
  8049d8:	e0bfff17 	ldw	r2,-4(fp)
  8049dc:	1887883a 	add	r3,r3,r2
  8049e0:	00804034 	movhi	r2,256
  8049e4:	10800004 	addi	r2,r2,0
  8049e8:	10c0062e 	bgeu	r2,r3,804a04 <sbrk+0x74>
  8049ec:	e0bffb17 	ldw	r2,-20(fp)
  8049f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8049f4:	e0bffa17 	ldw	r2,-24(fp)
  8049f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8049fc:	00bfffc4 	movi	r2,-1
  804a00:	00000b06 	br	804a30 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  804a04:	d0a00b17 	ldw	r2,-32724(gp)
  804a08:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  804a0c:	d0e00b17 	ldw	r3,-32724(gp)
  804a10:	e0bfff17 	ldw	r2,-4(fp)
  804a14:	1885883a 	add	r2,r3,r2
  804a18:	d0a00b15 	stw	r2,-32724(gp)
  804a1c:	e0bffb17 	ldw	r2,-20(fp)
  804a20:	e0bffc15 	stw	r2,-16(fp)
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  804a2c:	e0bffd17 	ldw	r2,-12(fp)
} 
  804a30:	e037883a 	mov	sp,fp
  804a34:	df000017 	ldw	fp,0(sp)
  804a38:	dec00104 	addi	sp,sp,4
  804a3c:	f800283a 	ret

00804a40 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  804a40:	defffa04 	addi	sp,sp,-24
  804a44:	df000515 	stw	fp,20(sp)
  804a48:	df000504 	addi	fp,sp,20
  804a4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a50:	0005303a 	rdctl	r2,status
  804a54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a58:	e0fffc17 	ldw	r3,-16(fp)
  804a5c:	00bfff84 	movi	r2,-2
  804a60:	1884703a 	and	r2,r3,r2
  804a64:	1001703a 	wrctl	status,r2
  
  return context;
  804a68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  804a6c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  804a70:	e0bfff17 	ldw	r2,-4(fp)
  804a74:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  804a78:	e0bffd17 	ldw	r2,-12(fp)
  804a7c:	10800017 	ldw	r2,0(r2)
  804a80:	e0fffd17 	ldw	r3,-12(fp)
  804a84:	18c00117 	ldw	r3,4(r3)
  804a88:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  804a8c:	e0bffd17 	ldw	r2,-12(fp)
  804a90:	10800117 	ldw	r2,4(r2)
  804a94:	e0fffd17 	ldw	r3,-12(fp)
  804a98:	18c00017 	ldw	r3,0(r3)
  804a9c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  804aa0:	e0bffd17 	ldw	r2,-12(fp)
  804aa4:	e0fffd17 	ldw	r3,-12(fp)
  804aa8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  804aac:	e0bffd17 	ldw	r2,-12(fp)
  804ab0:	e0fffd17 	ldw	r3,-12(fp)
  804ab4:	10c00015 	stw	r3,0(r2)
  804ab8:	e0bffb17 	ldw	r2,-20(fp)
  804abc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ac0:	e0bffe17 	ldw	r2,-8(fp)
  804ac4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  804ac8:	0001883a 	nop
  804acc:	e037883a 	mov	sp,fp
  804ad0:	df000017 	ldw	fp,0(sp)
  804ad4:	dec00104 	addi	sp,sp,4
  804ad8:	f800283a 	ret

00804adc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  804adc:	defffb04 	addi	sp,sp,-20
  804ae0:	dfc00415 	stw	ra,16(sp)
  804ae4:	df000315 	stw	fp,12(sp)
  804ae8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  804aec:	d0a00c17 	ldw	r2,-32720(gp)
  804af0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  804af4:	d0a73417 	ldw	r2,-25392(gp)
  804af8:	10800044 	addi	r2,r2,1
  804afc:	d0a73415 	stw	r2,-25392(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  804b00:	00002e06 	br	804bbc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  804b04:	e0bffd17 	ldw	r2,-12(fp)
  804b08:	10800017 	ldw	r2,0(r2)
  804b0c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  804b10:	e0bffd17 	ldw	r2,-12(fp)
  804b14:	10800403 	ldbu	r2,16(r2)
  804b18:	10803fcc 	andi	r2,r2,255
  804b1c:	10000426 	beq	r2,zero,804b30 <alt_tick+0x54>
  804b20:	d0a73417 	ldw	r2,-25392(gp)
  804b24:	1000021e 	bne	r2,zero,804b30 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  804b28:	e0bffd17 	ldw	r2,-12(fp)
  804b2c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  804b30:	e0bffd17 	ldw	r2,-12(fp)
  804b34:	10800217 	ldw	r2,8(r2)
  804b38:	d0e73417 	ldw	r3,-25392(gp)
  804b3c:	18801d36 	bltu	r3,r2,804bb4 <alt_tick+0xd8>
  804b40:	e0bffd17 	ldw	r2,-12(fp)
  804b44:	10800403 	ldbu	r2,16(r2)
  804b48:	10803fcc 	andi	r2,r2,255
  804b4c:	1000191e 	bne	r2,zero,804bb4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  804b50:	e0bffd17 	ldw	r2,-12(fp)
  804b54:	10800317 	ldw	r2,12(r2)
  804b58:	e0fffd17 	ldw	r3,-12(fp)
  804b5c:	18c00517 	ldw	r3,20(r3)
  804b60:	1809883a 	mov	r4,r3
  804b64:	103ee83a 	callr	r2
  804b68:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  804b6c:	e0bfff17 	ldw	r2,-4(fp)
  804b70:	1000031e 	bne	r2,zero,804b80 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  804b74:	e13ffd17 	ldw	r4,-12(fp)
  804b78:	0804a400 	call	804a40 <alt_alarm_stop>
  804b7c:	00000d06 	br	804bb4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  804b80:	e0bffd17 	ldw	r2,-12(fp)
  804b84:	10c00217 	ldw	r3,8(r2)
  804b88:	e0bfff17 	ldw	r2,-4(fp)
  804b8c:	1887883a 	add	r3,r3,r2
  804b90:	e0bffd17 	ldw	r2,-12(fp)
  804b94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  804b98:	e0bffd17 	ldw	r2,-12(fp)
  804b9c:	10c00217 	ldw	r3,8(r2)
  804ba0:	d0a73417 	ldw	r2,-25392(gp)
  804ba4:	1880032e 	bgeu	r3,r2,804bb4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  804ba8:	e0bffd17 	ldw	r2,-12(fp)
  804bac:	00c00044 	movi	r3,1
  804bb0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  804bb4:	e0bffe17 	ldw	r2,-8(fp)
  804bb8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  804bbc:	e0fffd17 	ldw	r3,-12(fp)
  804bc0:	d0a00c04 	addi	r2,gp,-32720
  804bc4:	18bfcf1e 	bne	r3,r2,804b04 <__alt_mem_onchip_mem+0xff7fcb04>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  804bc8:	0001883a 	nop
}
  804bcc:	0001883a 	nop
  804bd0:	e037883a 	mov	sp,fp
  804bd4:	dfc00117 	ldw	ra,4(sp)
  804bd8:	df000017 	ldw	fp,0(sp)
  804bdc:	dec00204 	addi	sp,sp,8
  804be0:	f800283a 	ret

00804be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804be4:	defffe04 	addi	sp,sp,-8
  804be8:	dfc00115 	stw	ra,4(sp)
  804bec:	df000015 	stw	fp,0(sp)
  804bf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804bf4:	d0a00917 	ldw	r2,-32732(gp)
  804bf8:	10000326 	beq	r2,zero,804c08 <alt_get_errno+0x24>
  804bfc:	d0a00917 	ldw	r2,-32732(gp)
  804c00:	103ee83a 	callr	r2
  804c04:	00000106 	br	804c0c <alt_get_errno+0x28>
  804c08:	d0a72e04 	addi	r2,gp,-25416
}
  804c0c:	e037883a 	mov	sp,fp
  804c10:	dfc00117 	ldw	ra,4(sp)
  804c14:	df000017 	ldw	fp,0(sp)
  804c18:	dec00204 	addi	sp,sp,8
  804c1c:	f800283a 	ret

00804c20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  804c20:	defff904 	addi	sp,sp,-28
  804c24:	dfc00615 	stw	ra,24(sp)
  804c28:	df000515 	stw	fp,20(sp)
  804c2c:	df000504 	addi	fp,sp,20
  804c30:	e13ffd15 	stw	r4,-12(fp)
  804c34:	e17ffe15 	stw	r5,-8(fp)
  804c38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804c3c:	e0bffd17 	ldw	r2,-12(fp)
  804c40:	10000616 	blt	r2,zero,804c5c <write+0x3c>
  804c44:	e0bffd17 	ldw	r2,-12(fp)
  804c48:	10c00324 	muli	r3,r2,12
  804c4c:	00802074 	movhi	r2,129
  804c50:	10a39c04 	addi	r2,r2,-29072
  804c54:	1885883a 	add	r2,r3,r2
  804c58:	00000106 	br	804c60 <write+0x40>
  804c5c:	0005883a 	mov	r2,zero
  804c60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  804c64:	e0bffb17 	ldw	r2,-20(fp)
  804c68:	10002126 	beq	r2,zero,804cf0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  804c6c:	e0bffb17 	ldw	r2,-20(fp)
  804c70:	10800217 	ldw	r2,8(r2)
  804c74:	108000cc 	andi	r2,r2,3
  804c78:	10001826 	beq	r2,zero,804cdc <write+0xbc>
  804c7c:	e0bffb17 	ldw	r2,-20(fp)
  804c80:	10800017 	ldw	r2,0(r2)
  804c84:	10800617 	ldw	r2,24(r2)
  804c88:	10001426 	beq	r2,zero,804cdc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  804c8c:	e0bffb17 	ldw	r2,-20(fp)
  804c90:	10800017 	ldw	r2,0(r2)
  804c94:	10800617 	ldw	r2,24(r2)
  804c98:	e0ffff17 	ldw	r3,-4(fp)
  804c9c:	180d883a 	mov	r6,r3
  804ca0:	e17ffe17 	ldw	r5,-8(fp)
  804ca4:	e13ffb17 	ldw	r4,-20(fp)
  804ca8:	103ee83a 	callr	r2
  804cac:	e0bffc15 	stw	r2,-16(fp)
  804cb0:	e0bffc17 	ldw	r2,-16(fp)
  804cb4:	1000070e 	bge	r2,zero,804cd4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  804cb8:	0804be40 	call	804be4 <alt_get_errno>
  804cbc:	1007883a 	mov	r3,r2
  804cc0:	e0bffc17 	ldw	r2,-16(fp)
  804cc4:	0085c83a 	sub	r2,zero,r2
  804cc8:	18800015 	stw	r2,0(r3)
        return -1;
  804ccc:	00bfffc4 	movi	r2,-1
  804cd0:	00000c06 	br	804d04 <write+0xe4>
      }
      return rval;
  804cd4:	e0bffc17 	ldw	r2,-16(fp)
  804cd8:	00000a06 	br	804d04 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  804cdc:	0804be40 	call	804be4 <alt_get_errno>
  804ce0:	1007883a 	mov	r3,r2
  804ce4:	00800344 	movi	r2,13
  804ce8:	18800015 	stw	r2,0(r3)
  804cec:	00000406 	br	804d00 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  804cf0:	0804be40 	call	804be4 <alt_get_errno>
  804cf4:	1007883a 	mov	r3,r2
  804cf8:	00801444 	movi	r2,81
  804cfc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  804d00:	00bfffc4 	movi	r2,-1
}
  804d04:	e037883a 	mov	sp,fp
  804d08:	dfc00117 	ldw	ra,4(sp)
  804d0c:	df000017 	ldw	fp,0(sp)
  804d10:	dec00204 	addi	sp,sp,8
  804d14:	f800283a 	ret

00804d18 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  804d18:	defffd04 	addi	sp,sp,-12
  804d1c:	dfc00215 	stw	ra,8(sp)
  804d20:	df000115 	stw	fp,4(sp)
  804d24:	df000104 	addi	fp,sp,4
  804d28:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  804d2c:	d1600604 	addi	r5,gp,-32744
  804d30:	e13fff17 	ldw	r4,-4(fp)
  804d34:	08071b00 	call	8071b0 <alt_dev_llist_insert>
}
  804d38:	e037883a 	mov	sp,fp
  804d3c:	dfc00117 	ldw	ra,4(sp)
  804d40:	df000017 	ldw	fp,0(sp)
  804d44:	dec00204 	addi	sp,sp,8
  804d48:	f800283a 	ret

00804d4c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  804d4c:	defffd04 	addi	sp,sp,-12
  804d50:	dfc00215 	stw	ra,8(sp)
  804d54:	df000115 	stw	fp,4(sp)
  804d58:	df000104 	addi	fp,sp,4
  804d5c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  804d60:	08079ac0 	call	8079ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  804d64:	00800044 	movi	r2,1
  804d68:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  804d6c:	0001883a 	nop
  804d70:	e037883a 	mov	sp,fp
  804d74:	dfc00117 	ldw	ra,4(sp)
  804d78:	df000017 	ldw	fp,0(sp)
  804d7c:	dec00204 	addi	sp,sp,8
  804d80:	f800283a 	ret

00804d84 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  804d84:	defffe04 	addi	sp,sp,-8
  804d88:	dfc00115 	stw	ra,4(sp)
  804d8c:	df000015 	stw	fp,0(sp)
  804d90:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  804d94:	01c0fa04 	movi	r7,1000
  804d98:	01800084 	movi	r6,2
  804d9c:	000b883a 	mov	r5,zero
  804da0:	01004074 	movhi	r4,257
  804da4:	21040804 	addi	r4,r4,4128
  804da8:	08067d80 	call	8067d8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  804dac:	01800044 	movi	r6,1
  804db0:	000b883a 	mov	r5,zero
  804db4:	01002074 	movhi	r4,129
  804db8:	21240604 	addi	r4,r4,-28648
  804dbc:	0804f800 	call	804f80 <altera_avalon_jtag_uart_init>
  804dc0:	01002074 	movhi	r4,129
  804dc4:	2123fc04 	addi	r4,r4,-28688
  804dc8:	0804d180 	call	804d18 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  804dcc:	01002074 	movhi	r4,129
  804dd0:	21281e04 	addi	r4,r4,-24456
  804dd4:	08065cc0 	call	8065cc <altera_avalon_lcd_16207_init>
  804dd8:	01002074 	movhi	r4,129
  804ddc:	21281404 	addi	r4,r4,-24496
  804de0:	0804d180 	call	804d18 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  804de4:	000d883a 	mov	r6,zero
  804de8:	000b883a 	mov	r5,zero
  804dec:	01002074 	movhi	r4,129
  804df0:	21286604 	addi	r4,r4,-24168
  804df4:	08069640 	call	806964 <altera_avalon_uart_init>
  804df8:	01002074 	movhi	r4,129
  804dfc:	21285c04 	addi	r4,r4,-24208
  804e00:	0804d180 	call	804d18 <alt_dev_reg>
}
  804e04:	0001883a 	nop
  804e08:	e037883a 	mov	sp,fp
  804e0c:	dfc00117 	ldw	ra,4(sp)
  804e10:	df000017 	ldw	fp,0(sp)
  804e14:	dec00204 	addi	sp,sp,8
  804e18:	f800283a 	ret

00804e1c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  804e1c:	defffa04 	addi	sp,sp,-24
  804e20:	dfc00515 	stw	ra,20(sp)
  804e24:	df000415 	stw	fp,16(sp)
  804e28:	df000404 	addi	fp,sp,16
  804e2c:	e13ffd15 	stw	r4,-12(fp)
  804e30:	e17ffe15 	stw	r5,-8(fp)
  804e34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804e38:	e0bffd17 	ldw	r2,-12(fp)
  804e3c:	10800017 	ldw	r2,0(r2)
  804e40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  804e44:	e0bffc17 	ldw	r2,-16(fp)
  804e48:	10c00a04 	addi	r3,r2,40
  804e4c:	e0bffd17 	ldw	r2,-12(fp)
  804e50:	10800217 	ldw	r2,8(r2)
  804e54:	100f883a 	mov	r7,r2
  804e58:	e1bfff17 	ldw	r6,-4(fp)
  804e5c:	e17ffe17 	ldw	r5,-8(fp)
  804e60:	1809883a 	mov	r4,r3
  804e64:	08054440 	call	805444 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  804e68:	e037883a 	mov	sp,fp
  804e6c:	dfc00117 	ldw	ra,4(sp)
  804e70:	df000017 	ldw	fp,0(sp)
  804e74:	dec00204 	addi	sp,sp,8
  804e78:	f800283a 	ret

00804e7c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  804e7c:	defffa04 	addi	sp,sp,-24
  804e80:	dfc00515 	stw	ra,20(sp)
  804e84:	df000415 	stw	fp,16(sp)
  804e88:	df000404 	addi	fp,sp,16
  804e8c:	e13ffd15 	stw	r4,-12(fp)
  804e90:	e17ffe15 	stw	r5,-8(fp)
  804e94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804e98:	e0bffd17 	ldw	r2,-12(fp)
  804e9c:	10800017 	ldw	r2,0(r2)
  804ea0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  804ea4:	e0bffc17 	ldw	r2,-16(fp)
  804ea8:	10c00a04 	addi	r3,r2,40
  804eac:	e0bffd17 	ldw	r2,-12(fp)
  804eb0:	10800217 	ldw	r2,8(r2)
  804eb4:	100f883a 	mov	r7,r2
  804eb8:	e1bfff17 	ldw	r6,-4(fp)
  804ebc:	e17ffe17 	ldw	r5,-8(fp)
  804ec0:	1809883a 	mov	r4,r3
  804ec4:	08056600 	call	805660 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  804ec8:	e037883a 	mov	sp,fp
  804ecc:	dfc00117 	ldw	ra,4(sp)
  804ed0:	df000017 	ldw	fp,0(sp)
  804ed4:	dec00204 	addi	sp,sp,8
  804ed8:	f800283a 	ret

00804edc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  804edc:	defffc04 	addi	sp,sp,-16
  804ee0:	dfc00315 	stw	ra,12(sp)
  804ee4:	df000215 	stw	fp,8(sp)
  804ee8:	df000204 	addi	fp,sp,8
  804eec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804ef0:	e0bfff17 	ldw	r2,-4(fp)
  804ef4:	10800017 	ldw	r2,0(r2)
  804ef8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  804efc:	e0bffe17 	ldw	r2,-8(fp)
  804f00:	10c00a04 	addi	r3,r2,40
  804f04:	e0bfff17 	ldw	r2,-4(fp)
  804f08:	10800217 	ldw	r2,8(r2)
  804f0c:	100b883a 	mov	r5,r2
  804f10:	1809883a 	mov	r4,r3
  804f14:	08052ec0 	call	8052ec <altera_avalon_jtag_uart_close>
}
  804f18:	e037883a 	mov	sp,fp
  804f1c:	dfc00117 	ldw	ra,4(sp)
  804f20:	df000017 	ldw	fp,0(sp)
  804f24:	dec00204 	addi	sp,sp,8
  804f28:	f800283a 	ret

00804f2c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  804f2c:	defffa04 	addi	sp,sp,-24
  804f30:	dfc00515 	stw	ra,20(sp)
  804f34:	df000415 	stw	fp,16(sp)
  804f38:	df000404 	addi	fp,sp,16
  804f3c:	e13ffd15 	stw	r4,-12(fp)
  804f40:	e17ffe15 	stw	r5,-8(fp)
  804f44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  804f48:	e0bffd17 	ldw	r2,-12(fp)
  804f4c:	10800017 	ldw	r2,0(r2)
  804f50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  804f54:	e0bffc17 	ldw	r2,-16(fp)
  804f58:	10800a04 	addi	r2,r2,40
  804f5c:	e1bfff17 	ldw	r6,-4(fp)
  804f60:	e17ffe17 	ldw	r5,-8(fp)
  804f64:	1009883a 	mov	r4,r2
  804f68:	08053540 	call	805354 <altera_avalon_jtag_uart_ioctl>
}
  804f6c:	e037883a 	mov	sp,fp
  804f70:	dfc00117 	ldw	ra,4(sp)
  804f74:	df000017 	ldw	fp,0(sp)
  804f78:	dec00204 	addi	sp,sp,8
  804f7c:	f800283a 	ret

00804f80 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  804f80:	defffa04 	addi	sp,sp,-24
  804f84:	dfc00515 	stw	ra,20(sp)
  804f88:	df000415 	stw	fp,16(sp)
  804f8c:	df000404 	addi	fp,sp,16
  804f90:	e13ffd15 	stw	r4,-12(fp)
  804f94:	e17ffe15 	stw	r5,-8(fp)
  804f98:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804f9c:	e0bffd17 	ldw	r2,-12(fp)
  804fa0:	00c00044 	movi	r3,1
  804fa4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  804fa8:	e0bffd17 	ldw	r2,-12(fp)
  804fac:	10800017 	ldw	r2,0(r2)
  804fb0:	10800104 	addi	r2,r2,4
  804fb4:	1007883a 	mov	r3,r2
  804fb8:	e0bffd17 	ldw	r2,-12(fp)
  804fbc:	10800817 	ldw	r2,32(r2)
  804fc0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  804fc4:	e0bffe17 	ldw	r2,-8(fp)
  804fc8:	e0ffff17 	ldw	r3,-4(fp)
  804fcc:	d8000015 	stw	zero,0(sp)
  804fd0:	e1fffd17 	ldw	r7,-12(fp)
  804fd4:	01802034 	movhi	r6,128
  804fd8:	31941004 	addi	r6,r6,20544
  804fdc:	180b883a 	mov	r5,r3
  804fe0:	1009883a 	mov	r4,r2
  804fe4:	08073480 	call	807348 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  804fe8:	e0bffd17 	ldw	r2,-12(fp)
  804fec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  804ff0:	e0bffd17 	ldw	r2,-12(fp)
  804ff4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804ff8:	d0e73317 	ldw	r3,-25396(gp)
  804ffc:	e1fffd17 	ldw	r7,-12(fp)
  805000:	01802034 	movhi	r6,128
  805004:	31949304 	addi	r6,r6,21068
  805008:	180b883a 	mov	r5,r3
  80500c:	1009883a 	mov	r4,r2
  805010:	0803f840 	call	803f84 <alt_alarm_start>
  805014:	1000040e 	bge	r2,zero,805028 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  805018:	e0fffd17 	ldw	r3,-12(fp)
  80501c:	00a00034 	movhi	r2,32768
  805020:	10bfffc4 	addi	r2,r2,-1
  805024:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  805028:	0001883a 	nop
  80502c:	e037883a 	mov	sp,fp
  805030:	dfc00117 	ldw	ra,4(sp)
  805034:	df000017 	ldw	fp,0(sp)
  805038:	dec00204 	addi	sp,sp,8
  80503c:	f800283a 	ret

00805040 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  805040:	defff804 	addi	sp,sp,-32
  805044:	df000715 	stw	fp,28(sp)
  805048:	df000704 	addi	fp,sp,28
  80504c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  805050:	e0bfff17 	ldw	r2,-4(fp)
  805054:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  805058:	e0bffb17 	ldw	r2,-20(fp)
  80505c:	10800017 	ldw	r2,0(r2)
  805060:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805064:	e0bffc17 	ldw	r2,-16(fp)
  805068:	10800104 	addi	r2,r2,4
  80506c:	10800037 	ldwio	r2,0(r2)
  805070:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  805074:	e0bffd17 	ldw	r2,-12(fp)
  805078:	1080c00c 	andi	r2,r2,768
  80507c:	10006d26 	beq	r2,zero,805234 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  805080:	e0bffd17 	ldw	r2,-12(fp)
  805084:	1080400c 	andi	r2,r2,256
  805088:	10003526 	beq	r2,zero,805160 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80508c:	00800074 	movhi	r2,1
  805090:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805094:	e0bffb17 	ldw	r2,-20(fp)
  805098:	10800a17 	ldw	r2,40(r2)
  80509c:	10800044 	addi	r2,r2,1
  8050a0:	1081ffcc 	andi	r2,r2,2047
  8050a4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  8050a8:	e0bffb17 	ldw	r2,-20(fp)
  8050ac:	10c00b17 	ldw	r3,44(r2)
  8050b0:	e0bffe17 	ldw	r2,-8(fp)
  8050b4:	18801526 	beq	r3,r2,80510c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8050b8:	e0bffc17 	ldw	r2,-16(fp)
  8050bc:	10800037 	ldwio	r2,0(r2)
  8050c0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8050c4:	e0bff917 	ldw	r2,-28(fp)
  8050c8:	10a0000c 	andi	r2,r2,32768
  8050cc:	10001126 	beq	r2,zero,805114 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8050d0:	e0bffb17 	ldw	r2,-20(fp)
  8050d4:	10800a17 	ldw	r2,40(r2)
  8050d8:	e0fff917 	ldw	r3,-28(fp)
  8050dc:	1809883a 	mov	r4,r3
  8050e0:	e0fffb17 	ldw	r3,-20(fp)
  8050e4:	1885883a 	add	r2,r3,r2
  8050e8:	10800e04 	addi	r2,r2,56
  8050ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8050f0:	e0bffb17 	ldw	r2,-20(fp)
  8050f4:	10800a17 	ldw	r2,40(r2)
  8050f8:	10800044 	addi	r2,r2,1
  8050fc:	10c1ffcc 	andi	r3,r2,2047
  805100:	e0bffb17 	ldw	r2,-20(fp)
  805104:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  805108:	003fe206 	br	805094 <__alt_mem_onchip_mem+0xff7fd094>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80510c:	0001883a 	nop
  805110:	00000106 	br	805118 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  805114:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  805118:	e0bff917 	ldw	r2,-28(fp)
  80511c:	10bfffec 	andhi	r2,r2,65535
  805120:	10000f26 	beq	r2,zero,805160 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  805124:	e0bffb17 	ldw	r2,-20(fp)
  805128:	10c00817 	ldw	r3,32(r2)
  80512c:	00bfff84 	movi	r2,-2
  805130:	1886703a 	and	r3,r3,r2
  805134:	e0bffb17 	ldw	r2,-20(fp)
  805138:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80513c:	e0bffc17 	ldw	r2,-16(fp)
  805140:	10800104 	addi	r2,r2,4
  805144:	1007883a 	mov	r3,r2
  805148:	e0bffb17 	ldw	r2,-20(fp)
  80514c:	10800817 	ldw	r2,32(r2)
  805150:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805154:	e0bffc17 	ldw	r2,-16(fp)
  805158:	10800104 	addi	r2,r2,4
  80515c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  805160:	e0bffd17 	ldw	r2,-12(fp)
  805164:	1080800c 	andi	r2,r2,512
  805168:	103fbe26 	beq	r2,zero,805064 <__alt_mem_onchip_mem+0xff7fd064>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80516c:	e0bffd17 	ldw	r2,-12(fp)
  805170:	1004d43a 	srli	r2,r2,16
  805174:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  805178:	00001406 	br	8051cc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80517c:	e0bffc17 	ldw	r2,-16(fp)
  805180:	e0fffb17 	ldw	r3,-20(fp)
  805184:	18c00d17 	ldw	r3,52(r3)
  805188:	e13ffb17 	ldw	r4,-20(fp)
  80518c:	20c7883a 	add	r3,r4,r3
  805190:	18c20e04 	addi	r3,r3,2104
  805194:	18c00003 	ldbu	r3,0(r3)
  805198:	18c03fcc 	andi	r3,r3,255
  80519c:	18c0201c 	xori	r3,r3,128
  8051a0:	18ffe004 	addi	r3,r3,-128
  8051a4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8051a8:	e0bffb17 	ldw	r2,-20(fp)
  8051ac:	10800d17 	ldw	r2,52(r2)
  8051b0:	10800044 	addi	r2,r2,1
  8051b4:	10c1ffcc 	andi	r3,r2,2047
  8051b8:	e0bffb17 	ldw	r2,-20(fp)
  8051bc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8051c0:	e0bffa17 	ldw	r2,-24(fp)
  8051c4:	10bfffc4 	addi	r2,r2,-1
  8051c8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8051cc:	e0bffa17 	ldw	r2,-24(fp)
  8051d0:	10000526 	beq	r2,zero,8051e8 <altera_avalon_jtag_uart_irq+0x1a8>
  8051d4:	e0bffb17 	ldw	r2,-20(fp)
  8051d8:	10c00d17 	ldw	r3,52(r2)
  8051dc:	e0bffb17 	ldw	r2,-20(fp)
  8051e0:	10800c17 	ldw	r2,48(r2)
  8051e4:	18bfe51e 	bne	r3,r2,80517c <__alt_mem_onchip_mem+0xff7fd17c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8051e8:	e0bffa17 	ldw	r2,-24(fp)
  8051ec:	103f9d26 	beq	r2,zero,805064 <__alt_mem_onchip_mem+0xff7fd064>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8051f0:	e0bffb17 	ldw	r2,-20(fp)
  8051f4:	10c00817 	ldw	r3,32(r2)
  8051f8:	00bfff44 	movi	r2,-3
  8051fc:	1886703a 	and	r3,r3,r2
  805200:	e0bffb17 	ldw	r2,-20(fp)
  805204:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805208:	e0bffb17 	ldw	r2,-20(fp)
  80520c:	10800017 	ldw	r2,0(r2)
  805210:	10800104 	addi	r2,r2,4
  805214:	1007883a 	mov	r3,r2
  805218:	e0bffb17 	ldw	r2,-20(fp)
  80521c:	10800817 	ldw	r2,32(r2)
  805220:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805224:	e0bffc17 	ldw	r2,-16(fp)
  805228:	10800104 	addi	r2,r2,4
  80522c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  805230:	003f8c06 	br	805064 <__alt_mem_onchip_mem+0xff7fd064>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  805234:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  805238:	0001883a 	nop
  80523c:	e037883a 	mov	sp,fp
  805240:	df000017 	ldw	fp,0(sp)
  805244:	dec00104 	addi	sp,sp,4
  805248:	f800283a 	ret

0080524c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80524c:	defff804 	addi	sp,sp,-32
  805250:	df000715 	stw	fp,28(sp)
  805254:	df000704 	addi	fp,sp,28
  805258:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80525c:	e0bffb17 	ldw	r2,-20(fp)
  805260:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  805264:	e0bff917 	ldw	r2,-28(fp)
  805268:	10800017 	ldw	r2,0(r2)
  80526c:	10800104 	addi	r2,r2,4
  805270:	10800037 	ldwio	r2,0(r2)
  805274:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  805278:	e0bffa17 	ldw	r2,-24(fp)
  80527c:	1081000c 	andi	r2,r2,1024
  805280:	10000b26 	beq	r2,zero,8052b0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  805284:	e0bff917 	ldw	r2,-28(fp)
  805288:	10800017 	ldw	r2,0(r2)
  80528c:	10800104 	addi	r2,r2,4
  805290:	1007883a 	mov	r3,r2
  805294:	e0bff917 	ldw	r2,-28(fp)
  805298:	10800817 	ldw	r2,32(r2)
  80529c:	10810014 	ori	r2,r2,1024
  8052a0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8052a4:	e0bff917 	ldw	r2,-28(fp)
  8052a8:	10000915 	stw	zero,36(r2)
  8052ac:	00000a06 	br	8052d8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8052b0:	e0bff917 	ldw	r2,-28(fp)
  8052b4:	10c00917 	ldw	r3,36(r2)
  8052b8:	00a00034 	movhi	r2,32768
  8052bc:	10bfff04 	addi	r2,r2,-4
  8052c0:	10c00536 	bltu	r2,r3,8052d8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  8052c4:	e0bff917 	ldw	r2,-28(fp)
  8052c8:	10800917 	ldw	r2,36(r2)
  8052cc:	10c00044 	addi	r3,r2,1
  8052d0:	e0bff917 	ldw	r2,-28(fp)
  8052d4:	10c00915 	stw	r3,36(r2)
  8052d8:	d0a73317 	ldw	r2,-25396(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8052dc:	e037883a 	mov	sp,fp
  8052e0:	df000017 	ldw	fp,0(sp)
  8052e4:	dec00104 	addi	sp,sp,4
  8052e8:	f800283a 	ret

008052ec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8052ec:	defffd04 	addi	sp,sp,-12
  8052f0:	df000215 	stw	fp,8(sp)
  8052f4:	df000204 	addi	fp,sp,8
  8052f8:	e13ffe15 	stw	r4,-8(fp)
  8052fc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  805300:	00000506 	br	805318 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  805304:	e0bfff17 	ldw	r2,-4(fp)
  805308:	1090000c 	andi	r2,r2,16384
  80530c:	10000226 	beq	r2,zero,805318 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  805310:	00bffd44 	movi	r2,-11
  805314:	00000b06 	br	805344 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  805318:	e0bffe17 	ldw	r2,-8(fp)
  80531c:	10c00d17 	ldw	r3,52(r2)
  805320:	e0bffe17 	ldw	r2,-8(fp)
  805324:	10800c17 	ldw	r2,48(r2)
  805328:	18800526 	beq	r3,r2,805340 <altera_avalon_jtag_uart_close+0x54>
  80532c:	e0bffe17 	ldw	r2,-8(fp)
  805330:	10c00917 	ldw	r3,36(r2)
  805334:	e0bffe17 	ldw	r2,-8(fp)
  805338:	10800117 	ldw	r2,4(r2)
  80533c:	18bff136 	bltu	r3,r2,805304 <__alt_mem_onchip_mem+0xff7fd304>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  805340:	0005883a 	mov	r2,zero
}
  805344:	e037883a 	mov	sp,fp
  805348:	df000017 	ldw	fp,0(sp)
  80534c:	dec00104 	addi	sp,sp,4
  805350:	f800283a 	ret

00805354 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  805354:	defffa04 	addi	sp,sp,-24
  805358:	df000515 	stw	fp,20(sp)
  80535c:	df000504 	addi	fp,sp,20
  805360:	e13ffd15 	stw	r4,-12(fp)
  805364:	e17ffe15 	stw	r5,-8(fp)
  805368:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80536c:	00bff9c4 	movi	r2,-25
  805370:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  805374:	e0bffe17 	ldw	r2,-8(fp)
  805378:	10da8060 	cmpeqi	r3,r2,27137
  80537c:	1800031e 	bne	r3,zero,80538c <altera_avalon_jtag_uart_ioctl+0x38>
  805380:	109a80a0 	cmpeqi	r2,r2,27138
  805384:	1000181e 	bne	r2,zero,8053e8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  805388:	00002906 	br	805430 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80538c:	e0bffd17 	ldw	r2,-12(fp)
  805390:	10c00117 	ldw	r3,4(r2)
  805394:	00a00034 	movhi	r2,32768
  805398:	10bfffc4 	addi	r2,r2,-1
  80539c:	18802126 	beq	r3,r2,805424 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  8053a0:	e0bfff17 	ldw	r2,-4(fp)
  8053a4:	10800017 	ldw	r2,0(r2)
  8053a8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8053ac:	e0bffc17 	ldw	r2,-16(fp)
  8053b0:	10800090 	cmplti	r2,r2,2
  8053b4:	1000061e 	bne	r2,zero,8053d0 <altera_avalon_jtag_uart_ioctl+0x7c>
  8053b8:	e0fffc17 	ldw	r3,-16(fp)
  8053bc:	00a00034 	movhi	r2,32768
  8053c0:	10bfffc4 	addi	r2,r2,-1
  8053c4:	18800226 	beq	r3,r2,8053d0 <altera_avalon_jtag_uart_ioctl+0x7c>
  8053c8:	e0bffc17 	ldw	r2,-16(fp)
  8053cc:	00000206 	br	8053d8 <altera_avalon_jtag_uart_ioctl+0x84>
  8053d0:	00a00034 	movhi	r2,32768
  8053d4:	10bfff84 	addi	r2,r2,-2
  8053d8:	e0fffd17 	ldw	r3,-12(fp)
  8053dc:	18800115 	stw	r2,4(r3)
      rc = 0;
  8053e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8053e4:	00000f06 	br	805424 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8053e8:	e0bffd17 	ldw	r2,-12(fp)
  8053ec:	10c00117 	ldw	r3,4(r2)
  8053f0:	00a00034 	movhi	r2,32768
  8053f4:	10bfffc4 	addi	r2,r2,-1
  8053f8:	18800c26 	beq	r3,r2,80542c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8053fc:	e0bffd17 	ldw	r2,-12(fp)
  805400:	10c00917 	ldw	r3,36(r2)
  805404:	e0bffd17 	ldw	r2,-12(fp)
  805408:	10800117 	ldw	r2,4(r2)
  80540c:	1885803a 	cmpltu	r2,r3,r2
  805410:	10c03fcc 	andi	r3,r2,255
  805414:	e0bfff17 	ldw	r2,-4(fp)
  805418:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80541c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  805420:	00000206 	br	80542c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  805424:	0001883a 	nop
  805428:	00000106 	br	805430 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80542c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  805430:	e0bffb17 	ldw	r2,-20(fp)
}
  805434:	e037883a 	mov	sp,fp
  805438:	df000017 	ldw	fp,0(sp)
  80543c:	dec00104 	addi	sp,sp,4
  805440:	f800283a 	ret

00805444 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  805444:	defff304 	addi	sp,sp,-52
  805448:	dfc00c15 	stw	ra,48(sp)
  80544c:	df000b15 	stw	fp,44(sp)
  805450:	df000b04 	addi	fp,sp,44
  805454:	e13ffc15 	stw	r4,-16(fp)
  805458:	e17ffd15 	stw	r5,-12(fp)
  80545c:	e1bffe15 	stw	r6,-8(fp)
  805460:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  805464:	e0bffd17 	ldw	r2,-12(fp)
  805468:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80546c:	00004706 	br	80558c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  805470:	e0bffc17 	ldw	r2,-16(fp)
  805474:	10800a17 	ldw	r2,40(r2)
  805478:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80547c:	e0bffc17 	ldw	r2,-16(fp)
  805480:	10800b17 	ldw	r2,44(r2)
  805484:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  805488:	e0fff717 	ldw	r3,-36(fp)
  80548c:	e0bff817 	ldw	r2,-32(fp)
  805490:	18800536 	bltu	r3,r2,8054a8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  805494:	e0fff717 	ldw	r3,-36(fp)
  805498:	e0bff817 	ldw	r2,-32(fp)
  80549c:	1885c83a 	sub	r2,r3,r2
  8054a0:	e0bff615 	stw	r2,-40(fp)
  8054a4:	00000406 	br	8054b8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8054a8:	00c20004 	movi	r3,2048
  8054ac:	e0bff817 	ldw	r2,-32(fp)
  8054b0:	1885c83a 	sub	r2,r3,r2
  8054b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8054b8:	e0bff617 	ldw	r2,-40(fp)
  8054bc:	10001e26 	beq	r2,zero,805538 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8054c0:	e0fffe17 	ldw	r3,-8(fp)
  8054c4:	e0bff617 	ldw	r2,-40(fp)
  8054c8:	1880022e 	bgeu	r3,r2,8054d4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8054cc:	e0bffe17 	ldw	r2,-8(fp)
  8054d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8054d4:	e0bffc17 	ldw	r2,-16(fp)
  8054d8:	10c00e04 	addi	r3,r2,56
  8054dc:	e0bff817 	ldw	r2,-32(fp)
  8054e0:	1885883a 	add	r2,r3,r2
  8054e4:	e1bff617 	ldw	r6,-40(fp)
  8054e8:	100b883a 	mov	r5,r2
  8054ec:	e13ff517 	ldw	r4,-44(fp)
  8054f0:	080233c0 	call	80233c <memcpy>
      ptr   += n;
  8054f4:	e0fff517 	ldw	r3,-44(fp)
  8054f8:	e0bff617 	ldw	r2,-40(fp)
  8054fc:	1885883a 	add	r2,r3,r2
  805500:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  805504:	e0fffe17 	ldw	r3,-8(fp)
  805508:	e0bff617 	ldw	r2,-40(fp)
  80550c:	1885c83a 	sub	r2,r3,r2
  805510:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805514:	e0fff817 	ldw	r3,-32(fp)
  805518:	e0bff617 	ldw	r2,-40(fp)
  80551c:	1885883a 	add	r2,r3,r2
  805520:	10c1ffcc 	andi	r3,r2,2047
  805524:	e0bffc17 	ldw	r2,-16(fp)
  805528:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80552c:	e0bffe17 	ldw	r2,-8(fp)
  805530:	00bfcf16 	blt	zero,r2,805470 <__alt_mem_onchip_mem+0xff7fd470>
  805534:	00000106 	br	80553c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  805538:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80553c:	e0fff517 	ldw	r3,-44(fp)
  805540:	e0bffd17 	ldw	r2,-12(fp)
  805544:	1880141e 	bne	r3,r2,805598 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  805548:	e0bfff17 	ldw	r2,-4(fp)
  80554c:	1090000c 	andi	r2,r2,16384
  805550:	1000131e 	bne	r2,zero,8055a0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  805554:	0001883a 	nop
  805558:	e0bffc17 	ldw	r2,-16(fp)
  80555c:	10c00a17 	ldw	r3,40(r2)
  805560:	e0bff717 	ldw	r2,-36(fp)
  805564:	1880051e 	bne	r3,r2,80557c <altera_avalon_jtag_uart_read+0x138>
  805568:	e0bffc17 	ldw	r2,-16(fp)
  80556c:	10c00917 	ldw	r3,36(r2)
  805570:	e0bffc17 	ldw	r2,-16(fp)
  805574:	10800117 	ldw	r2,4(r2)
  805578:	18bff736 	bltu	r3,r2,805558 <__alt_mem_onchip_mem+0xff7fd558>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80557c:	e0bffc17 	ldw	r2,-16(fp)
  805580:	10c00a17 	ldw	r3,40(r2)
  805584:	e0bff717 	ldw	r2,-36(fp)
  805588:	18800726 	beq	r3,r2,8055a8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80558c:	e0bffe17 	ldw	r2,-8(fp)
  805590:	00bfb716 	blt	zero,r2,805470 <__alt_mem_onchip_mem+0xff7fd470>
  805594:	00000506 	br	8055ac <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  805598:	0001883a 	nop
  80559c:	00000306 	br	8055ac <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8055a0:	0001883a 	nop
  8055a4:	00000106 	br	8055ac <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8055a8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8055ac:	e0fff517 	ldw	r3,-44(fp)
  8055b0:	e0bffd17 	ldw	r2,-12(fp)
  8055b4:	18801826 	beq	r3,r2,805618 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8055b8:	0005303a 	rdctl	r2,status
  8055bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8055c0:	e0fffb17 	ldw	r3,-20(fp)
  8055c4:	00bfff84 	movi	r2,-2
  8055c8:	1884703a 	and	r2,r3,r2
  8055cc:	1001703a 	wrctl	status,r2
  
  return context;
  8055d0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8055d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8055d8:	e0bffc17 	ldw	r2,-16(fp)
  8055dc:	10800817 	ldw	r2,32(r2)
  8055e0:	10c00054 	ori	r3,r2,1
  8055e4:	e0bffc17 	ldw	r2,-16(fp)
  8055e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8055ec:	e0bffc17 	ldw	r2,-16(fp)
  8055f0:	10800017 	ldw	r2,0(r2)
  8055f4:	10800104 	addi	r2,r2,4
  8055f8:	1007883a 	mov	r3,r2
  8055fc:	e0bffc17 	ldw	r2,-16(fp)
  805600:	10800817 	ldw	r2,32(r2)
  805604:	18800035 	stwio	r2,0(r3)
  805608:	e0bffa17 	ldw	r2,-24(fp)
  80560c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805610:	e0bff917 	ldw	r2,-28(fp)
  805614:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  805618:	e0fff517 	ldw	r3,-44(fp)
  80561c:	e0bffd17 	ldw	r2,-12(fp)
  805620:	18800426 	beq	r3,r2,805634 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  805624:	e0fff517 	ldw	r3,-44(fp)
  805628:	e0bffd17 	ldw	r2,-12(fp)
  80562c:	1885c83a 	sub	r2,r3,r2
  805630:	00000606 	br	80564c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  805634:	e0bfff17 	ldw	r2,-4(fp)
  805638:	1090000c 	andi	r2,r2,16384
  80563c:	10000226 	beq	r2,zero,805648 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  805640:	00bffd44 	movi	r2,-11
  805644:	00000106 	br	80564c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  805648:	00bffec4 	movi	r2,-5
}
  80564c:	e037883a 	mov	sp,fp
  805650:	dfc00117 	ldw	ra,4(sp)
  805654:	df000017 	ldw	fp,0(sp)
  805658:	dec00204 	addi	sp,sp,8
  80565c:	f800283a 	ret

00805660 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  805660:	defff304 	addi	sp,sp,-52
  805664:	dfc00c15 	stw	ra,48(sp)
  805668:	df000b15 	stw	fp,44(sp)
  80566c:	df000b04 	addi	fp,sp,44
  805670:	e13ffc15 	stw	r4,-16(fp)
  805674:	e17ffd15 	stw	r5,-12(fp)
  805678:	e1bffe15 	stw	r6,-8(fp)
  80567c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  805680:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  805684:	e0bffd17 	ldw	r2,-12(fp)
  805688:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80568c:	00003706 	br	80576c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  805690:	e0bffc17 	ldw	r2,-16(fp)
  805694:	10800c17 	ldw	r2,48(r2)
  805698:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80569c:	e0bffc17 	ldw	r2,-16(fp)
  8056a0:	10800d17 	ldw	r2,52(r2)
  8056a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8056a8:	e0fff917 	ldw	r3,-28(fp)
  8056ac:	e0bff517 	ldw	r2,-44(fp)
  8056b0:	1880062e 	bgeu	r3,r2,8056cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8056b4:	e0fff517 	ldw	r3,-44(fp)
  8056b8:	e0bff917 	ldw	r2,-28(fp)
  8056bc:	1885c83a 	sub	r2,r3,r2
  8056c0:	10bfffc4 	addi	r2,r2,-1
  8056c4:	e0bff615 	stw	r2,-40(fp)
  8056c8:	00000b06 	br	8056f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8056cc:	e0bff517 	ldw	r2,-44(fp)
  8056d0:	10000526 	beq	r2,zero,8056e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8056d4:	00c20004 	movi	r3,2048
  8056d8:	e0bff917 	ldw	r2,-28(fp)
  8056dc:	1885c83a 	sub	r2,r3,r2
  8056e0:	e0bff615 	stw	r2,-40(fp)
  8056e4:	00000406 	br	8056f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8056e8:	00c1ffc4 	movi	r3,2047
  8056ec:	e0bff917 	ldw	r2,-28(fp)
  8056f0:	1885c83a 	sub	r2,r3,r2
  8056f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8056f8:	e0bff617 	ldw	r2,-40(fp)
  8056fc:	10001e26 	beq	r2,zero,805778 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  805700:	e0fffe17 	ldw	r3,-8(fp)
  805704:	e0bff617 	ldw	r2,-40(fp)
  805708:	1880022e 	bgeu	r3,r2,805714 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80570c:	e0bffe17 	ldw	r2,-8(fp)
  805710:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  805714:	e0bffc17 	ldw	r2,-16(fp)
  805718:	10c20e04 	addi	r3,r2,2104
  80571c:	e0bff917 	ldw	r2,-28(fp)
  805720:	1885883a 	add	r2,r3,r2
  805724:	e1bff617 	ldw	r6,-40(fp)
  805728:	e17ffd17 	ldw	r5,-12(fp)
  80572c:	1009883a 	mov	r4,r2
  805730:	080233c0 	call	80233c <memcpy>
      ptr   += n;
  805734:	e0fffd17 	ldw	r3,-12(fp)
  805738:	e0bff617 	ldw	r2,-40(fp)
  80573c:	1885883a 	add	r2,r3,r2
  805740:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  805744:	e0fffe17 	ldw	r3,-8(fp)
  805748:	e0bff617 	ldw	r2,-40(fp)
  80574c:	1885c83a 	sub	r2,r3,r2
  805750:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805754:	e0fff917 	ldw	r3,-28(fp)
  805758:	e0bff617 	ldw	r2,-40(fp)
  80575c:	1885883a 	add	r2,r3,r2
  805760:	10c1ffcc 	andi	r3,r2,2047
  805764:	e0bffc17 	ldw	r2,-16(fp)
  805768:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80576c:	e0bffe17 	ldw	r2,-8(fp)
  805770:	00bfc716 	blt	zero,r2,805690 <__alt_mem_onchip_mem+0xff7fd690>
  805774:	00000106 	br	80577c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  805778:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80577c:	0005303a 	rdctl	r2,status
  805780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805784:	e0fffb17 	ldw	r3,-20(fp)
  805788:	00bfff84 	movi	r2,-2
  80578c:	1884703a 	and	r2,r3,r2
  805790:	1001703a 	wrctl	status,r2
  
  return context;
  805794:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  805798:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80579c:	e0bffc17 	ldw	r2,-16(fp)
  8057a0:	10800817 	ldw	r2,32(r2)
  8057a4:	10c00094 	ori	r3,r2,2
  8057a8:	e0bffc17 	ldw	r2,-16(fp)
  8057ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8057b0:	e0bffc17 	ldw	r2,-16(fp)
  8057b4:	10800017 	ldw	r2,0(r2)
  8057b8:	10800104 	addi	r2,r2,4
  8057bc:	1007883a 	mov	r3,r2
  8057c0:	e0bffc17 	ldw	r2,-16(fp)
  8057c4:	10800817 	ldw	r2,32(r2)
  8057c8:	18800035 	stwio	r2,0(r3)
  8057cc:	e0bffa17 	ldw	r2,-24(fp)
  8057d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8057d4:	e0bff817 	ldw	r2,-32(fp)
  8057d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8057dc:	e0bffe17 	ldw	r2,-8(fp)
  8057e0:	0080100e 	bge	zero,r2,805824 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8057e4:	e0bfff17 	ldw	r2,-4(fp)
  8057e8:	1090000c 	andi	r2,r2,16384
  8057ec:	1000101e 	bne	r2,zero,805830 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8057f0:	0001883a 	nop
  8057f4:	e0bffc17 	ldw	r2,-16(fp)
  8057f8:	10c00d17 	ldw	r3,52(r2)
  8057fc:	e0bff517 	ldw	r2,-44(fp)
  805800:	1880051e 	bne	r3,r2,805818 <altera_avalon_jtag_uart_write+0x1b8>
  805804:	e0bffc17 	ldw	r2,-16(fp)
  805808:	10c00917 	ldw	r3,36(r2)
  80580c:	e0bffc17 	ldw	r2,-16(fp)
  805810:	10800117 	ldw	r2,4(r2)
  805814:	18bff736 	bltu	r3,r2,8057f4 <__alt_mem_onchip_mem+0xff7fd7f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  805818:	e0bffc17 	ldw	r2,-16(fp)
  80581c:	10800917 	ldw	r2,36(r2)
  805820:	1000051e 	bne	r2,zero,805838 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  805824:	e0bffe17 	ldw	r2,-8(fp)
  805828:	00bfd016 	blt	zero,r2,80576c <__alt_mem_onchip_mem+0xff7fd76c>
  80582c:	00000306 	br	80583c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  805830:	0001883a 	nop
  805834:	00000106 	br	80583c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  805838:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80583c:	e0fffd17 	ldw	r3,-12(fp)
  805840:	e0bff717 	ldw	r2,-36(fp)
  805844:	18800426 	beq	r3,r2,805858 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  805848:	e0fffd17 	ldw	r3,-12(fp)
  80584c:	e0bff717 	ldw	r2,-36(fp)
  805850:	1885c83a 	sub	r2,r3,r2
  805854:	00000606 	br	805870 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  805858:	e0bfff17 	ldw	r2,-4(fp)
  80585c:	1090000c 	andi	r2,r2,16384
  805860:	10000226 	beq	r2,zero,80586c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  805864:	00bffd44 	movi	r2,-11
  805868:	00000106 	br	805870 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80586c:	00bffec4 	movi	r2,-5
}
  805870:	e037883a 	mov	sp,fp
  805874:	dfc00117 	ldw	ra,4(sp)
  805878:	df000017 	ldw	fp,0(sp)
  80587c:	dec00204 	addi	sp,sp,8
  805880:	f800283a 	ret

00805884 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  805884:	defffa04 	addi	sp,sp,-24
  805888:	dfc00515 	stw	ra,20(sp)
  80588c:	df000415 	stw	fp,16(sp)
  805890:	df000404 	addi	fp,sp,16
  805894:	e13ffe15 	stw	r4,-8(fp)
  805898:	2805883a 	mov	r2,r5
  80589c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8058a0:	e0bffe17 	ldw	r2,-8(fp)
  8058a4:	10800017 	ldw	r2,0(r2)
  8058a8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8058ac:	008003f4 	movhi	r2,15
  8058b0:	10909004 	addi	r2,r2,16960
  8058b4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8058b8:	e0bffe17 	ldw	r2,-8(fp)
  8058bc:	10800803 	ldbu	r2,32(r2)
  8058c0:	10803fcc 	andi	r2,r2,255
  8058c4:	1080201c 	xori	r2,r2,128
  8058c8:	10bfe004 	addi	r2,r2,-128
  8058cc:	1000151e 	bne	r2,zero,805924 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8058d0:	00000906 	br	8058f8 <lcd_write_command+0x74>
    if (--i == 0)
  8058d4:	e0bffc17 	ldw	r2,-16(fp)
  8058d8:	10bfffc4 	addi	r2,r2,-1
  8058dc:	e0bffc15 	stw	r2,-16(fp)
  8058e0:	e0bffc17 	ldw	r2,-16(fp)
  8058e4:	1000041e 	bne	r2,zero,8058f8 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8058e8:	e0bffe17 	ldw	r2,-8(fp)
  8058ec:	00c00044 	movi	r3,1
  8058f0:	10c00805 	stb	r3,32(r2)
      return;
  8058f4:	00000c06 	br	805928 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8058f8:	e0bffd17 	ldw	r2,-12(fp)
  8058fc:	10800104 	addi	r2,r2,4
  805900:	10800037 	ldwio	r2,0(r2)
  805904:	1080200c 	andi	r2,r2,128
  805908:	103ff21e 	bne	r2,zero,8058d4 <__alt_mem_onchip_mem+0xff7fd8d4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80590c:	01001904 	movi	r4,100
  805910:	080797c0 	call	80797c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  805914:	e0bffd17 	ldw	r2,-12(fp)
  805918:	e0ffff03 	ldbu	r3,-4(fp)
  80591c:	10c00035 	stwio	r3,0(r2)
  805920:	00000106 	br	805928 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  805924:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  805928:	e037883a 	mov	sp,fp
  80592c:	dfc00117 	ldw	ra,4(sp)
  805930:	df000017 	ldw	fp,0(sp)
  805934:	dec00204 	addi	sp,sp,8
  805938:	f800283a 	ret

0080593c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80593c:	defffa04 	addi	sp,sp,-24
  805940:	dfc00515 	stw	ra,20(sp)
  805944:	df000415 	stw	fp,16(sp)
  805948:	df000404 	addi	fp,sp,16
  80594c:	e13ffe15 	stw	r4,-8(fp)
  805950:	2805883a 	mov	r2,r5
  805954:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  805958:	e0bffe17 	ldw	r2,-8(fp)
  80595c:	10800017 	ldw	r2,0(r2)
  805960:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  805964:	008003f4 	movhi	r2,15
  805968:	10909004 	addi	r2,r2,16960
  80596c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  805970:	e0bffe17 	ldw	r2,-8(fp)
  805974:	10800803 	ldbu	r2,32(r2)
  805978:	10803fcc 	andi	r2,r2,255
  80597c:	1080201c 	xori	r2,r2,128
  805980:	10bfe004 	addi	r2,r2,-128
  805984:	10001d1e 	bne	r2,zero,8059fc <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  805988:	00000906 	br	8059b0 <lcd_write_data+0x74>
    if (--i == 0)
  80598c:	e0bffc17 	ldw	r2,-16(fp)
  805990:	10bfffc4 	addi	r2,r2,-1
  805994:	e0bffc15 	stw	r2,-16(fp)
  805998:	e0bffc17 	ldw	r2,-16(fp)
  80599c:	1000041e 	bne	r2,zero,8059b0 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8059a0:	e0bffe17 	ldw	r2,-8(fp)
  8059a4:	00c00044 	movi	r3,1
  8059a8:	10c00805 	stb	r3,32(r2)
      return;
  8059ac:	00001406 	br	805a00 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8059b0:	e0bffd17 	ldw	r2,-12(fp)
  8059b4:	10800104 	addi	r2,r2,4
  8059b8:	10800037 	ldwio	r2,0(r2)
  8059bc:	1080200c 	andi	r2,r2,128
  8059c0:	103ff21e 	bne	r2,zero,80598c <__alt_mem_onchip_mem+0xff7fd98c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8059c4:	01001904 	movi	r4,100
  8059c8:	080797c0 	call	80797c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8059cc:	e0bffd17 	ldw	r2,-12(fp)
  8059d0:	10800204 	addi	r2,r2,8
  8059d4:	1007883a 	mov	r3,r2
  8059d8:	e0bfff03 	ldbu	r2,-4(fp)
  8059dc:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8059e0:	e0bffe17 	ldw	r2,-8(fp)
  8059e4:	108008c3 	ldbu	r2,35(r2)
  8059e8:	10800044 	addi	r2,r2,1
  8059ec:	1007883a 	mov	r3,r2
  8059f0:	e0bffe17 	ldw	r2,-8(fp)
  8059f4:	10c008c5 	stb	r3,35(r2)
  8059f8:	00000106 	br	805a00 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8059fc:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  805a00:	e037883a 	mov	sp,fp
  805a04:	dfc00117 	ldw	ra,4(sp)
  805a08:	df000017 	ldw	fp,0(sp)
  805a0c:	dec00204 	addi	sp,sp,8
  805a10:	f800283a 	ret

00805a14 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  805a14:	defffc04 	addi	sp,sp,-16
  805a18:	dfc00315 	stw	ra,12(sp)
  805a1c:	df000215 	stw	fp,8(sp)
  805a20:	df000204 	addi	fp,sp,8
  805a24:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  805a28:	01400044 	movi	r5,1
  805a2c:	e13fff17 	ldw	r4,-4(fp)
  805a30:	08058840 	call	805884 <lcd_write_command>

  sp->x = 0;
  805a34:	e0bfff17 	ldw	r2,-4(fp)
  805a38:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  805a3c:	e0bfff17 	ldw	r2,-4(fp)
  805a40:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  805a44:	e0bfff17 	ldw	r2,-4(fp)
  805a48:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805a4c:	e03ffe15 	stw	zero,-8(fp)
  805a50:	00001b06 	br	805ac0 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  805a54:	e0bffe17 	ldw	r2,-8(fp)
  805a58:	108018e4 	muli	r2,r2,99
  805a5c:	10801004 	addi	r2,r2,64
  805a60:	e0ffff17 	ldw	r3,-4(fp)
  805a64:	1885883a 	add	r2,r3,r2
  805a68:	01801444 	movi	r6,81
  805a6c:	01400804 	movi	r5,32
  805a70:	1009883a 	mov	r4,r2
  805a74:	08025e00 	call	8025e0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  805a78:	e0bffe17 	ldw	r2,-8(fp)
  805a7c:	108018e4 	muli	r2,r2,99
  805a80:	10800c04 	addi	r2,r2,48
  805a84:	e0ffff17 	ldw	r3,-4(fp)
  805a88:	1885883a 	add	r2,r3,r2
  805a8c:	01800404 	movi	r6,16
  805a90:	01400804 	movi	r5,32
  805a94:	1009883a 	mov	r4,r2
  805a98:	08025e00 	call	8025e0 <memset>
    sp->line[y].width = 0;
  805a9c:	e0ffff17 	ldw	r3,-4(fp)
  805aa0:	e0bffe17 	ldw	r2,-8(fp)
  805aa4:	108018e4 	muli	r2,r2,99
  805aa8:	1885883a 	add	r2,r3,r2
  805aac:	10802444 	addi	r2,r2,145
  805ab0:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805ab4:	e0bffe17 	ldw	r2,-8(fp)
  805ab8:	10800044 	addi	r2,r2,1
  805abc:	e0bffe15 	stw	r2,-8(fp)
  805ac0:	e0bffe17 	ldw	r2,-8(fp)
  805ac4:	10800090 	cmplti	r2,r2,2
  805ac8:	103fe21e 	bne	r2,zero,805a54 <__alt_mem_onchip_mem+0xff7fda54>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  805acc:	0001883a 	nop
  805ad0:	e037883a 	mov	sp,fp
  805ad4:	dfc00117 	ldw	ra,4(sp)
  805ad8:	df000017 	ldw	fp,0(sp)
  805adc:	dec00204 	addi	sp,sp,8
  805ae0:	f800283a 	ret

00805ae4 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  805ae4:	defff704 	addi	sp,sp,-36
  805ae8:	dfc00815 	stw	ra,32(sp)
  805aec:	df000715 	stw	fp,28(sp)
  805af0:	df000704 	addi	fp,sp,28
  805af4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  805af8:	e0bfff17 	ldw	r2,-4(fp)
  805afc:	10800943 	ldbu	r2,37(r2)
  805b00:	10803fcc 	andi	r2,r2,255
  805b04:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805b08:	e03ff915 	stw	zero,-28(fp)
  805b0c:	00006706 	br	805cac <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  805b10:	e0ffff17 	ldw	r3,-4(fp)
  805b14:	e0bff917 	ldw	r2,-28(fp)
  805b18:	108018e4 	muli	r2,r2,99
  805b1c:	1885883a 	add	r2,r3,r2
  805b20:	10802444 	addi	r2,r2,145
  805b24:	10800003 	ldbu	r2,0(r2)
  805b28:	10803fcc 	andi	r2,r2,255
  805b2c:	1080201c 	xori	r2,r2,128
  805b30:	10bfe004 	addi	r2,r2,-128
  805b34:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  805b38:	e0ffff17 	ldw	r3,-4(fp)
  805b3c:	e0bff917 	ldw	r2,-28(fp)
  805b40:	108018e4 	muli	r2,r2,99
  805b44:	1885883a 	add	r2,r3,r2
  805b48:	10802484 	addi	r2,r2,146
  805b4c:	10800003 	ldbu	r2,0(r2)
  805b50:	10c03fcc 	andi	r3,r2,255
  805b54:	e0bffc17 	ldw	r2,-16(fp)
  805b58:	1885383a 	mul	r2,r3,r2
  805b5c:	1005d23a 	srai	r2,r2,8
  805b60:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  805b64:	e0fffb17 	ldw	r3,-20(fp)
  805b68:	e0bffd17 	ldw	r2,-12(fp)
  805b6c:	18800116 	blt	r3,r2,805b74 <lcd_repaint_screen+0x90>
      offset = 0;
  805b70:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  805b74:	e03ffa15 	stw	zero,-24(fp)
  805b78:	00004606 	br	805c94 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  805b7c:	e0fffa17 	ldw	r3,-24(fp)
  805b80:	e0bffb17 	ldw	r2,-20(fp)
  805b84:	1885883a 	add	r2,r3,r2
  805b88:	e17ffd17 	ldw	r5,-12(fp)
  805b8c:	1009883a 	mov	r4,r2
  805b90:	0803e540 	call	803e54 <__modsi3>
  805b94:	1009883a 	mov	r4,r2
  805b98:	e0ffff17 	ldw	r3,-4(fp)
  805b9c:	e0bff917 	ldw	r2,-28(fp)
  805ba0:	108018e4 	muli	r2,r2,99
  805ba4:	1885883a 	add	r2,r3,r2
  805ba8:	1105883a 	add	r2,r2,r4
  805bac:	10801004 	addi	r2,r2,64
  805bb0:	10800003 	ldbu	r2,0(r2)
  805bb4:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  805bb8:	e0ffff17 	ldw	r3,-4(fp)
  805bbc:	e0bff917 	ldw	r2,-28(fp)
  805bc0:	108018e4 	muli	r2,r2,99
  805bc4:	1887883a 	add	r3,r3,r2
  805bc8:	e0bffa17 	ldw	r2,-24(fp)
  805bcc:	1885883a 	add	r2,r3,r2
  805bd0:	10800c04 	addi	r2,r2,48
  805bd4:	10800003 	ldbu	r2,0(r2)
  805bd8:	10c03fcc 	andi	r3,r2,255
  805bdc:	18c0201c 	xori	r3,r3,128
  805be0:	18ffe004 	addi	r3,r3,-128
  805be4:	e0bffe07 	ldb	r2,-8(fp)
  805be8:	18802726 	beq	r3,r2,805c88 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  805bec:	e0fff917 	ldw	r3,-28(fp)
  805bf0:	d0a00e04 	addi	r2,gp,-32712
  805bf4:	1885883a 	add	r2,r3,r2
  805bf8:	10800003 	ldbu	r2,0(r2)
  805bfc:	1007883a 	mov	r3,r2
  805c00:	e0bffa17 	ldw	r2,-24(fp)
  805c04:	1885883a 	add	r2,r3,r2
  805c08:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  805c0c:	e0fffe43 	ldbu	r3,-7(fp)
  805c10:	e0bfff17 	ldw	r2,-4(fp)
  805c14:	108008c3 	ldbu	r2,35(r2)
  805c18:	10803fcc 	andi	r2,r2,255
  805c1c:	1080201c 	xori	r2,r2,128
  805c20:	10bfe004 	addi	r2,r2,-128
  805c24:	18800a26 	beq	r3,r2,805c50 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  805c28:	e0fffe43 	ldbu	r3,-7(fp)
  805c2c:	00bfe004 	movi	r2,-128
  805c30:	1884b03a 	or	r2,r3,r2
  805c34:	10803fcc 	andi	r2,r2,255
  805c38:	100b883a 	mov	r5,r2
  805c3c:	e13fff17 	ldw	r4,-4(fp)
  805c40:	08058840 	call	805884 <lcd_write_command>
          sp->address = address;
  805c44:	e0fffe43 	ldbu	r3,-7(fp)
  805c48:	e0bfff17 	ldw	r2,-4(fp)
  805c4c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  805c50:	e0bffe03 	ldbu	r2,-8(fp)
  805c54:	10803fcc 	andi	r2,r2,255
  805c58:	100b883a 	mov	r5,r2
  805c5c:	e13fff17 	ldw	r4,-4(fp)
  805c60:	080593c0 	call	80593c <lcd_write_data>
        sp->line[y].visible[x] = c;
  805c64:	e0ffff17 	ldw	r3,-4(fp)
  805c68:	e0bff917 	ldw	r2,-28(fp)
  805c6c:	108018e4 	muli	r2,r2,99
  805c70:	1887883a 	add	r3,r3,r2
  805c74:	e0bffa17 	ldw	r2,-24(fp)
  805c78:	1885883a 	add	r2,r3,r2
  805c7c:	10800c04 	addi	r2,r2,48
  805c80:	e0fffe03 	ldbu	r3,-8(fp)
  805c84:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  805c88:	e0bffa17 	ldw	r2,-24(fp)
  805c8c:	10800044 	addi	r2,r2,1
  805c90:	e0bffa15 	stw	r2,-24(fp)
  805c94:	e0bffa17 	ldw	r2,-24(fp)
  805c98:	10800410 	cmplti	r2,r2,16
  805c9c:	103fb71e 	bne	r2,zero,805b7c <__alt_mem_onchip_mem+0xff7fdb7c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805ca0:	e0bff917 	ldw	r2,-28(fp)
  805ca4:	10800044 	addi	r2,r2,1
  805ca8:	e0bff915 	stw	r2,-28(fp)
  805cac:	e0bff917 	ldw	r2,-28(fp)
  805cb0:	10800090 	cmplti	r2,r2,2
  805cb4:	103f961e 	bne	r2,zero,805b10 <__alt_mem_onchip_mem+0xff7fdb10>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  805cb8:	0001883a 	nop
  805cbc:	e037883a 	mov	sp,fp
  805cc0:	dfc00117 	ldw	ra,4(sp)
  805cc4:	df000017 	ldw	fp,0(sp)
  805cc8:	dec00204 	addi	sp,sp,8
  805ccc:	f800283a 	ret

00805cd0 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  805cd0:	defffc04 	addi	sp,sp,-16
  805cd4:	dfc00315 	stw	ra,12(sp)
  805cd8:	df000215 	stw	fp,8(sp)
  805cdc:	df000204 	addi	fp,sp,8
  805ce0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805ce4:	e03ffe15 	stw	zero,-8(fp)
  805ce8:	00001d06 	br	805d60 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  805cec:	e0bffe17 	ldw	r2,-8(fp)
  805cf0:	00800f16 	blt	zero,r2,805d30 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  805cf4:	e0bffe17 	ldw	r2,-8(fp)
  805cf8:	108018e4 	muli	r2,r2,99
  805cfc:	10801004 	addi	r2,r2,64
  805d00:	e0ffff17 	ldw	r3,-4(fp)
  805d04:	1889883a 	add	r4,r3,r2
  805d08:	e0bffe17 	ldw	r2,-8(fp)
  805d0c:	10800044 	addi	r2,r2,1
  805d10:	108018e4 	muli	r2,r2,99
  805d14:	10801004 	addi	r2,r2,64
  805d18:	e0ffff17 	ldw	r3,-4(fp)
  805d1c:	1885883a 	add	r2,r3,r2
  805d20:	01801404 	movi	r6,80
  805d24:	100b883a 	mov	r5,r2
  805d28:	080233c0 	call	80233c <memcpy>
  805d2c:	00000906 	br	805d54 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  805d30:	e0bffe17 	ldw	r2,-8(fp)
  805d34:	108018e4 	muli	r2,r2,99
  805d38:	10801004 	addi	r2,r2,64
  805d3c:	e0ffff17 	ldw	r3,-4(fp)
  805d40:	1885883a 	add	r2,r3,r2
  805d44:	01801404 	movi	r6,80
  805d48:	01400804 	movi	r5,32
  805d4c:	1009883a 	mov	r4,r2
  805d50:	08025e00 	call	8025e0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805d54:	e0bffe17 	ldw	r2,-8(fp)
  805d58:	10800044 	addi	r2,r2,1
  805d5c:	e0bffe15 	stw	r2,-8(fp)
  805d60:	e0bffe17 	ldw	r2,-8(fp)
  805d64:	10800090 	cmplti	r2,r2,2
  805d68:	103fe01e 	bne	r2,zero,805cec <__alt_mem_onchip_mem+0xff7fdcec>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  805d6c:	e0bfff17 	ldw	r2,-4(fp)
  805d70:	10800883 	ldbu	r2,34(r2)
  805d74:	10bfffc4 	addi	r2,r2,-1
  805d78:	1007883a 	mov	r3,r2
  805d7c:	e0bfff17 	ldw	r2,-4(fp)
  805d80:	10c00885 	stb	r3,34(r2)
}
  805d84:	0001883a 	nop
  805d88:	e037883a 	mov	sp,fp
  805d8c:	dfc00117 	ldw	ra,4(sp)
  805d90:	df000017 	ldw	fp,0(sp)
  805d94:	dec00204 	addi	sp,sp,8
  805d98:	f800283a 	ret

00805d9c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  805d9c:	defff904 	addi	sp,sp,-28
  805da0:	dfc00615 	stw	ra,24(sp)
  805da4:	df000515 	stw	fp,20(sp)
  805da8:	df000504 	addi	fp,sp,20
  805dac:	e13ffe15 	stw	r4,-8(fp)
  805db0:	2805883a 	mov	r2,r5
  805db4:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  805db8:	e03ffb15 	stw	zero,-20(fp)
  805dbc:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  805dc0:	e0bffe17 	ldw	r2,-8(fp)
  805dc4:	10800a03 	ldbu	r2,40(r2)
  805dc8:	10803fcc 	andi	r2,r2,255
  805dcc:	1080201c 	xori	r2,r2,128
  805dd0:	10bfe004 	addi	r2,r2,-128
  805dd4:	108016d8 	cmpnei	r2,r2,91
  805dd8:	1000411e 	bne	r2,zero,805ee0 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  805ddc:	e0bffe17 	ldw	r2,-8(fp)
  805de0:	10800a04 	addi	r2,r2,40
  805de4:	10800044 	addi	r2,r2,1
  805de8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  805dec:	00000c06 	br	805e20 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  805df0:	e0bffb17 	ldw	r2,-20(fp)
  805df4:	10c002a4 	muli	r3,r2,10
  805df8:	e0bffd17 	ldw	r2,-12(fp)
  805dfc:	11000044 	addi	r4,r2,1
  805e00:	e13ffd15 	stw	r4,-12(fp)
  805e04:	10800003 	ldbu	r2,0(r2)
  805e08:	10803fcc 	andi	r2,r2,255
  805e0c:	1080201c 	xori	r2,r2,128
  805e10:	10bfe004 	addi	r2,r2,-128
  805e14:	10bff404 	addi	r2,r2,-48
  805e18:	1885883a 	add	r2,r3,r2
  805e1c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  805e20:	d0e00f17 	ldw	r3,-32708(gp)
  805e24:	e0bffd17 	ldw	r2,-12(fp)
  805e28:	10800003 	ldbu	r2,0(r2)
  805e2c:	10803fcc 	andi	r2,r2,255
  805e30:	1080201c 	xori	r2,r2,128
  805e34:	10bfe004 	addi	r2,r2,-128
  805e38:	10800044 	addi	r2,r2,1
  805e3c:	1885883a 	add	r2,r3,r2
  805e40:	10800003 	ldbu	r2,0(r2)
  805e44:	10803fcc 	andi	r2,r2,255
  805e48:	1080010c 	andi	r2,r2,4
  805e4c:	103fe81e 	bne	r2,zero,805df0 <__alt_mem_onchip_mem+0xff7fddf0>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  805e50:	e0bffd17 	ldw	r2,-12(fp)
  805e54:	10800003 	ldbu	r2,0(r2)
  805e58:	10803fcc 	andi	r2,r2,255
  805e5c:	1080201c 	xori	r2,r2,128
  805e60:	10bfe004 	addi	r2,r2,-128
  805e64:	10800ed8 	cmpnei	r2,r2,59
  805e68:	10001f1e 	bne	r2,zero,805ee8 <lcd_handle_escape+0x14c>
    {
      ptr++;
  805e6c:	e0bffd17 	ldw	r2,-12(fp)
  805e70:	10800044 	addi	r2,r2,1
  805e74:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  805e78:	00000c06 	br	805eac <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  805e7c:	e0bffc17 	ldw	r2,-16(fp)
  805e80:	10c002a4 	muli	r3,r2,10
  805e84:	e0bffd17 	ldw	r2,-12(fp)
  805e88:	11000044 	addi	r4,r2,1
  805e8c:	e13ffd15 	stw	r4,-12(fp)
  805e90:	10800003 	ldbu	r2,0(r2)
  805e94:	10803fcc 	andi	r2,r2,255
  805e98:	1080201c 	xori	r2,r2,128
  805e9c:	10bfe004 	addi	r2,r2,-128
  805ea0:	10bff404 	addi	r2,r2,-48
  805ea4:	1885883a 	add	r2,r3,r2
  805ea8:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  805eac:	d0e00f17 	ldw	r3,-32708(gp)
  805eb0:	e0bffd17 	ldw	r2,-12(fp)
  805eb4:	10800003 	ldbu	r2,0(r2)
  805eb8:	10803fcc 	andi	r2,r2,255
  805ebc:	1080201c 	xori	r2,r2,128
  805ec0:	10bfe004 	addi	r2,r2,-128
  805ec4:	10800044 	addi	r2,r2,1
  805ec8:	1885883a 	add	r2,r3,r2
  805ecc:	10800003 	ldbu	r2,0(r2)
  805ed0:	10803fcc 	andi	r2,r2,255
  805ed4:	1080010c 	andi	r2,r2,4
  805ed8:	103fe81e 	bne	r2,zero,805e7c <__alt_mem_onchip_mem+0xff7fde7c>
  805edc:	00000206 	br	805ee8 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  805ee0:	00bfffc4 	movi	r2,-1
  805ee4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  805ee8:	e0bfff07 	ldb	r2,-4(fp)
  805eec:	10c012a0 	cmpeqi	r3,r2,74
  805ef0:	1800291e 	bne	r3,zero,805f98 <lcd_handle_escape+0x1fc>
  805ef4:	10c012c8 	cmpgei	r3,r2,75
  805ef8:	1800031e 	bne	r3,zero,805f08 <lcd_handle_escape+0x16c>
  805efc:	10801220 	cmpeqi	r2,r2,72
  805f00:	1000061e 	bne	r2,zero,805f1c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  805f04:	00004a06 	br	806030 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  805f08:	10c012e0 	cmpeqi	r3,r2,75
  805f0c:	1800281e 	bne	r3,zero,805fb0 <lcd_handle_escape+0x214>
  805f10:	108019a0 	cmpeqi	r2,r2,102
  805f14:	1000011e 	bne	r2,zero,805f1c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  805f18:	00004506 	br	806030 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  805f1c:	e0bffc17 	ldw	r2,-16(fp)
  805f20:	0080050e 	bge	zero,r2,805f38 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  805f24:	e0bffc17 	ldw	r2,-16(fp)
  805f28:	10bfffc4 	addi	r2,r2,-1
  805f2c:	1007883a 	mov	r3,r2
  805f30:	e0bffe17 	ldw	r2,-8(fp)
  805f34:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  805f38:	e0bffb17 	ldw	r2,-20(fp)
  805f3c:	0080370e 	bge	zero,r2,80601c <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  805f40:	e0bffb17 	ldw	r2,-20(fp)
  805f44:	10bfffc4 	addi	r2,r2,-1
  805f48:	1007883a 	mov	r3,r2
  805f4c:	e0bffe17 	ldw	r2,-8(fp)
  805f50:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  805f54:	e0bffe17 	ldw	r2,-8(fp)
  805f58:	10800883 	ldbu	r2,34(r2)
  805f5c:	10803fcc 	andi	r2,r2,255
  805f60:	10800170 	cmpltui	r2,r2,5
  805f64:	1000061e 	bne	r2,zero,805f80 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  805f68:	e0bffe17 	ldw	r2,-8(fp)
  805f6c:	00c00104 	movi	r3,4
  805f70:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  805f74:	00000206 	br	805f80 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  805f78:	e13ffe17 	ldw	r4,-8(fp)
  805f7c:	0805cd00 	call	805cd0 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  805f80:	e0bffe17 	ldw	r2,-8(fp)
  805f84:	10800883 	ldbu	r2,34(r2)
  805f88:	10803fcc 	andi	r2,r2,255
  805f8c:	108000e8 	cmpgeui	r2,r2,3
  805f90:	103ff91e 	bne	r2,zero,805f78 <__alt_mem_onchip_mem+0xff7fdf78>
        lcd_scroll_up(sp);
    }
    break;
  805f94:	00002106 	br	80601c <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  805f98:	e0bffb17 	ldw	r2,-20(fp)
  805f9c:	10800098 	cmpnei	r2,r2,2
  805fa0:	1000201e 	bne	r2,zero,806024 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  805fa4:	e13ffe17 	ldw	r4,-8(fp)
  805fa8:	0805a140 	call	805a14 <lcd_clear_screen>
    break;
  805fac:	00001d06 	br	806024 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  805fb0:	e0bffb17 	ldw	r2,-20(fp)
  805fb4:	00801d16 	blt	zero,r2,80602c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  805fb8:	e0bffe17 	ldw	r2,-8(fp)
  805fbc:	10800843 	ldbu	r2,33(r2)
  805fc0:	10803fcc 	andi	r2,r2,255
  805fc4:	10801428 	cmpgeui	r2,r2,80
  805fc8:	1000181e 	bne	r2,zero,80602c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  805fcc:	e0bffe17 	ldw	r2,-8(fp)
  805fd0:	10800883 	ldbu	r2,34(r2)
  805fd4:	10803fcc 	andi	r2,r2,255
  805fd8:	108018e4 	muli	r2,r2,99
  805fdc:	10801004 	addi	r2,r2,64
  805fe0:	e0fffe17 	ldw	r3,-8(fp)
  805fe4:	1887883a 	add	r3,r3,r2
  805fe8:	e0bffe17 	ldw	r2,-8(fp)
  805fec:	10800843 	ldbu	r2,33(r2)
  805ff0:	10803fcc 	andi	r2,r2,255
  805ff4:	1889883a 	add	r4,r3,r2
  805ff8:	e0bffe17 	ldw	r2,-8(fp)
  805ffc:	10800843 	ldbu	r2,33(r2)
  806000:	10803fcc 	andi	r2,r2,255
  806004:	00c01404 	movi	r3,80
  806008:	1885c83a 	sub	r2,r3,r2
  80600c:	100d883a 	mov	r6,r2
  806010:	01400804 	movi	r5,32
  806014:	08025e00 	call	8025e0 <memset>
    }
    break;
  806018:	00000406 	br	80602c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80601c:	0001883a 	nop
  806020:	00000306 	br	806030 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  806024:	0001883a 	nop
  806028:	00000106 	br	806030 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80602c:	0001883a 	nop
  }
}
  806030:	0001883a 	nop
  806034:	e037883a 	mov	sp,fp
  806038:	dfc00117 	ldw	ra,4(sp)
  80603c:	df000017 	ldw	fp,0(sp)
  806040:	dec00204 	addi	sp,sp,8
  806044:	f800283a 	ret

00806048 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  806048:	defff304 	addi	sp,sp,-52
  80604c:	dfc00c15 	stw	ra,48(sp)
  806050:	df000b15 	stw	fp,44(sp)
  806054:	df000b04 	addi	fp,sp,44
  806058:	e13ffc15 	stw	r4,-16(fp)
  80605c:	e17ffd15 	stw	r5,-12(fp)
  806060:	e1bffe15 	stw	r6,-8(fp)
  806064:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  806068:	e0bffe17 	ldw	r2,-8(fp)
  80606c:	e0fffd17 	ldw	r3,-12(fp)
  806070:	1885883a 	add	r2,r3,r2
  806074:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  806078:	e0bffc17 	ldw	r2,-16(fp)
  80607c:	00c00044 	movi	r3,1
  806080:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  806084:	00009906 	br	8062ec <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  806088:	e0bffd17 	ldw	r2,-12(fp)
  80608c:	10800003 	ldbu	r2,0(r2)
  806090:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  806094:	e0bffc17 	ldw	r2,-16(fp)
  806098:	10800903 	ldbu	r2,36(r2)
  80609c:	10803fcc 	andi	r2,r2,255
  8060a0:	1080201c 	xori	r2,r2,128
  8060a4:	10bfe004 	addi	r2,r2,-128
  8060a8:	10003716 	blt	r2,zero,806188 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  8060ac:	e0bffc17 	ldw	r2,-16(fp)
  8060b0:	10800903 	ldbu	r2,36(r2)
  8060b4:	10803fcc 	andi	r2,r2,255
  8060b8:	1080201c 	xori	r2,r2,128
  8060bc:	10bfe004 	addi	r2,r2,-128
  8060c0:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8060c4:	e0bffa17 	ldw	r2,-24(fp)
  8060c8:	1000031e 	bne	r2,zero,8060d8 <altera_avalon_lcd_16207_write+0x90>
  8060cc:	e0bff907 	ldb	r2,-28(fp)
  8060d0:	108016d8 	cmpnei	r2,r2,91
  8060d4:	10000d1e 	bne	r2,zero,80610c <altera_avalon_lcd_16207_write+0xc4>
  8060d8:	e0bffa17 	ldw	r2,-24(fp)
  8060dc:	10001826 	beq	r2,zero,806140 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8060e0:	d0e00f17 	ldw	r3,-32708(gp)
  8060e4:	e0bff907 	ldb	r2,-28(fp)
  8060e8:	10800044 	addi	r2,r2,1
  8060ec:	1885883a 	add	r2,r3,r2
  8060f0:	10800003 	ldbu	r2,0(r2)
  8060f4:	10803fcc 	andi	r2,r2,255
  8060f8:	1080010c 	andi	r2,r2,4
  8060fc:	1000101e 	bne	r2,zero,806140 <altera_avalon_lcd_16207_write+0xf8>
  806100:	e0bff907 	ldb	r2,-28(fp)
  806104:	10800ee0 	cmpeqi	r2,r2,59
  806108:	10000d1e 	bne	r2,zero,806140 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80610c:	e0fffc17 	ldw	r3,-16(fp)
  806110:	e0bffa17 	ldw	r2,-24(fp)
  806114:	1885883a 	add	r2,r3,r2
  806118:	10800a04 	addi	r2,r2,40
  80611c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  806120:	e0bff907 	ldb	r2,-28(fp)
  806124:	100b883a 	mov	r5,r2
  806128:	e13ffc17 	ldw	r4,-16(fp)
  80612c:	0805d9c0 	call	805d9c <lcd_handle_escape>

        sp->esccount = -1;
  806130:	e0bffc17 	ldw	r2,-16(fp)
  806134:	00ffffc4 	movi	r3,-1
  806138:	10c00905 	stb	r3,36(r2)
  80613c:	00006806 	br	8062e0 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  806140:	e0bffc17 	ldw	r2,-16(fp)
  806144:	10800903 	ldbu	r2,36(r2)
  806148:	10803fcc 	andi	r2,r2,255
  80614c:	108001e8 	cmpgeui	r2,r2,7
  806150:	1000631e 	bne	r2,zero,8062e0 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  806154:	e0fffc17 	ldw	r3,-16(fp)
  806158:	e0bffa17 	ldw	r2,-24(fp)
  80615c:	1885883a 	add	r2,r3,r2
  806160:	10800a04 	addi	r2,r2,40
  806164:	e0fff903 	ldbu	r3,-28(fp)
  806168:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80616c:	e0bffc17 	ldw	r2,-16(fp)
  806170:	10800903 	ldbu	r2,36(r2)
  806174:	10800044 	addi	r2,r2,1
  806178:	1007883a 	mov	r3,r2
  80617c:	e0bffc17 	ldw	r2,-16(fp)
  806180:	10c00905 	stb	r3,36(r2)
  806184:	00005606 	br	8062e0 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  806188:	e0bff907 	ldb	r2,-28(fp)
  80618c:	108006d8 	cmpnei	r2,r2,27
  806190:	1000031e 	bne	r2,zero,8061a0 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  806194:	e0bffc17 	ldw	r2,-16(fp)
  806198:	10000905 	stb	zero,36(r2)
  80619c:	00005006 	br	8062e0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  8061a0:	e0bff907 	ldb	r2,-28(fp)
  8061a4:	10800358 	cmpnei	r2,r2,13
  8061a8:	1000031e 	bne	r2,zero,8061b8 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8061ac:	e0bffc17 	ldw	r2,-16(fp)
  8061b0:	10000845 	stb	zero,33(r2)
  8061b4:	00004a06 	br	8062e0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8061b8:	e0bff907 	ldb	r2,-28(fp)
  8061bc:	10800298 	cmpnei	r2,r2,10
  8061c0:	1000101e 	bne	r2,zero,806204 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8061c4:	e0bffc17 	ldw	r2,-16(fp)
  8061c8:	10000845 	stb	zero,33(r2)
      sp->y++;
  8061cc:	e0bffc17 	ldw	r2,-16(fp)
  8061d0:	10800883 	ldbu	r2,34(r2)
  8061d4:	10800044 	addi	r2,r2,1
  8061d8:	1007883a 	mov	r3,r2
  8061dc:	e0bffc17 	ldw	r2,-16(fp)
  8061e0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8061e4:	e0bffc17 	ldw	r2,-16(fp)
  8061e8:	10800883 	ldbu	r2,34(r2)
  8061ec:	10803fcc 	andi	r2,r2,255
  8061f0:	108000f0 	cmpltui	r2,r2,3
  8061f4:	10003a1e 	bne	r2,zero,8062e0 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  8061f8:	e13ffc17 	ldw	r4,-16(fp)
  8061fc:	0805cd00 	call	805cd0 <lcd_scroll_up>
  806200:	00003706 	br	8062e0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  806204:	e0bff907 	ldb	r2,-28(fp)
  806208:	10800218 	cmpnei	r2,r2,8
  80620c:	10000b1e 	bne	r2,zero,80623c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  806210:	e0bffc17 	ldw	r2,-16(fp)
  806214:	10800843 	ldbu	r2,33(r2)
  806218:	10803fcc 	andi	r2,r2,255
  80621c:	10003026 	beq	r2,zero,8062e0 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  806220:	e0bffc17 	ldw	r2,-16(fp)
  806224:	10800843 	ldbu	r2,33(r2)
  806228:	10bfffc4 	addi	r2,r2,-1
  80622c:	1007883a 	mov	r3,r2
  806230:	e0bffc17 	ldw	r2,-16(fp)
  806234:	10c00845 	stb	r3,33(r2)
  806238:	00002906 	br	8062e0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80623c:	d0e00f17 	ldw	r3,-32708(gp)
  806240:	e0bff907 	ldb	r2,-28(fp)
  806244:	10800044 	addi	r2,r2,1
  806248:	1885883a 	add	r2,r3,r2
  80624c:	10800003 	ldbu	r2,0(r2)
  806250:	10803fcc 	andi	r2,r2,255
  806254:	1080201c 	xori	r2,r2,128
  806258:	10bfe004 	addi	r2,r2,-128
  80625c:	108025cc 	andi	r2,r2,151
  806260:	10001f26 	beq	r2,zero,8062e0 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  806264:	e0bffc17 	ldw	r2,-16(fp)
  806268:	10800883 	ldbu	r2,34(r2)
  80626c:	10803fcc 	andi	r2,r2,255
  806270:	108000b0 	cmpltui	r2,r2,2
  806274:	1000021e 	bne	r2,zero,806280 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  806278:	e13ffc17 	ldw	r4,-16(fp)
  80627c:	0805cd00 	call	805cd0 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  806280:	e0bffc17 	ldw	r2,-16(fp)
  806284:	10800843 	ldbu	r2,33(r2)
  806288:	10803fcc 	andi	r2,r2,255
  80628c:	10801428 	cmpgeui	r2,r2,80
  806290:	10000d1e 	bne	r2,zero,8062c8 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  806294:	e0bffc17 	ldw	r2,-16(fp)
  806298:	10800883 	ldbu	r2,34(r2)
  80629c:	10c03fcc 	andi	r3,r2,255
  8062a0:	e0bffc17 	ldw	r2,-16(fp)
  8062a4:	10800843 	ldbu	r2,33(r2)
  8062a8:	10803fcc 	andi	r2,r2,255
  8062ac:	e13ffc17 	ldw	r4,-16(fp)
  8062b0:	18c018e4 	muli	r3,r3,99
  8062b4:	20c7883a 	add	r3,r4,r3
  8062b8:	1885883a 	add	r2,r3,r2
  8062bc:	10801004 	addi	r2,r2,64
  8062c0:	e0fff903 	ldbu	r3,-28(fp)
  8062c4:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8062c8:	e0bffc17 	ldw	r2,-16(fp)
  8062cc:	10800843 	ldbu	r2,33(r2)
  8062d0:	10800044 	addi	r2,r2,1
  8062d4:	1007883a 	mov	r3,r2
  8062d8:	e0bffc17 	ldw	r2,-16(fp)
  8062dc:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8062e0:	e0bffd17 	ldw	r2,-12(fp)
  8062e4:	10800044 	addi	r2,r2,1
  8062e8:	e0bffd15 	stw	r2,-12(fp)
  8062ec:	e0fffd17 	ldw	r3,-12(fp)
  8062f0:	e0bff817 	ldw	r2,-32(fp)
  8062f4:	18bf6436 	bltu	r3,r2,806088 <__alt_mem_onchip_mem+0xff7fe088>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8062f8:	00800404 	movi	r2,16
  8062fc:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806300:	e03ff515 	stw	zero,-44(fp)
  806304:	00003706 	br	8063e4 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  806308:	00801404 	movi	r2,80
  80630c:	e0bff715 	stw	r2,-36(fp)
  806310:	00001106 	br	806358 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  806314:	e0bff717 	ldw	r2,-36(fp)
  806318:	10bfffc4 	addi	r2,r2,-1
  80631c:	e13ffc17 	ldw	r4,-16(fp)
  806320:	e0fff517 	ldw	r3,-44(fp)
  806324:	18c018e4 	muli	r3,r3,99
  806328:	20c7883a 	add	r3,r4,r3
  80632c:	1885883a 	add	r2,r3,r2
  806330:	10801004 	addi	r2,r2,64
  806334:	10800003 	ldbu	r2,0(r2)
  806338:	10803fcc 	andi	r2,r2,255
  80633c:	1080201c 	xori	r2,r2,128
  806340:	10bfe004 	addi	r2,r2,-128
  806344:	10800820 	cmpeqi	r2,r2,32
  806348:	10000626 	beq	r2,zero,806364 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80634c:	e0bff717 	ldw	r2,-36(fp)
  806350:	10bfffc4 	addi	r2,r2,-1
  806354:	e0bff715 	stw	r2,-36(fp)
  806358:	e0bff717 	ldw	r2,-36(fp)
  80635c:	00bfed16 	blt	zero,r2,806314 <__alt_mem_onchip_mem+0xff7fe314>
  806360:	00000106 	br	806368 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  806364:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  806368:	e0bff717 	ldw	r2,-36(fp)
  80636c:	10800448 	cmpgei	r2,r2,17
  806370:	1000031e 	bne	r2,zero,806380 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  806374:	00800404 	movi	r2,16
  806378:	e0bff715 	stw	r2,-36(fp)
  80637c:	00000306 	br	80638c <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  806380:	e0bff717 	ldw	r2,-36(fp)
  806384:	10800044 	addi	r2,r2,1
  806388:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80638c:	e0bff717 	ldw	r2,-36(fp)
  806390:	1009883a 	mov	r4,r2
  806394:	e0fffc17 	ldw	r3,-16(fp)
  806398:	e0bff517 	ldw	r2,-44(fp)
  80639c:	108018e4 	muli	r2,r2,99
  8063a0:	1885883a 	add	r2,r3,r2
  8063a4:	10802444 	addi	r2,r2,145
  8063a8:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8063ac:	e0fff617 	ldw	r3,-40(fp)
  8063b0:	e0bff717 	ldw	r2,-36(fp)
  8063b4:	1880020e 	bge	r3,r2,8063c0 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8063b8:	e0bff717 	ldw	r2,-36(fp)
  8063bc:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8063c0:	e0fffc17 	ldw	r3,-16(fp)
  8063c4:	e0bff517 	ldw	r2,-44(fp)
  8063c8:	108018e4 	muli	r2,r2,99
  8063cc:	1885883a 	add	r2,r3,r2
  8063d0:	10802484 	addi	r2,r2,146
  8063d4:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8063d8:	e0bff517 	ldw	r2,-44(fp)
  8063dc:	10800044 	addi	r2,r2,1
  8063e0:	e0bff515 	stw	r2,-44(fp)
  8063e4:	e0bff517 	ldw	r2,-44(fp)
  8063e8:	10800090 	cmplti	r2,r2,2
  8063ec:	103fc61e 	bne	r2,zero,806308 <__alt_mem_onchip_mem+0xff7fe308>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8063f0:	e0bff617 	ldw	r2,-40(fp)
  8063f4:	10800448 	cmpgei	r2,r2,17
  8063f8:	1000031e 	bne	r2,zero,806408 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8063fc:	e0bffc17 	ldw	r2,-16(fp)
  806400:	10000985 	stb	zero,38(r2)
  806404:	00002e06 	br	8064c0 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  806408:	e0bff617 	ldw	r2,-40(fp)
  80640c:	1085883a 	add	r2,r2,r2
  806410:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  806414:	e0bff617 	ldw	r2,-40(fp)
  806418:	1007883a 	mov	r3,r2
  80641c:	e0bffc17 	ldw	r2,-16(fp)
  806420:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806424:	e03ff515 	stw	zero,-44(fp)
  806428:	00002206 	br	8064b4 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80642c:	e0fffc17 	ldw	r3,-16(fp)
  806430:	e0bff517 	ldw	r2,-44(fp)
  806434:	108018e4 	muli	r2,r2,99
  806438:	1885883a 	add	r2,r3,r2
  80643c:	10802444 	addi	r2,r2,145
  806440:	10800003 	ldbu	r2,0(r2)
  806444:	10803fcc 	andi	r2,r2,255
  806448:	1080201c 	xori	r2,r2,128
  80644c:	10bfe004 	addi	r2,r2,-128
  806450:	10800450 	cmplti	r2,r2,17
  806454:	1000141e 	bne	r2,zero,8064a8 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  806458:	e0fffc17 	ldw	r3,-16(fp)
  80645c:	e0bff517 	ldw	r2,-44(fp)
  806460:	108018e4 	muli	r2,r2,99
  806464:	1885883a 	add	r2,r3,r2
  806468:	10802444 	addi	r2,r2,145
  80646c:	10800003 	ldbu	r2,0(r2)
  806470:	10803fcc 	andi	r2,r2,255
  806474:	1080201c 	xori	r2,r2,128
  806478:	10bfe004 	addi	r2,r2,-128
  80647c:	1004923a 	slli	r2,r2,8
  806480:	e17ff617 	ldw	r5,-40(fp)
  806484:	1009883a 	mov	r4,r2
  806488:	0803dd00 	call	803dd0 <__divsi3>
  80648c:	1009883a 	mov	r4,r2
  806490:	e0fffc17 	ldw	r3,-16(fp)
  806494:	e0bff517 	ldw	r2,-44(fp)
  806498:	108018e4 	muli	r2,r2,99
  80649c:	1885883a 	add	r2,r3,r2
  8064a0:	10802484 	addi	r2,r2,146
  8064a4:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8064a8:	e0bff517 	ldw	r2,-44(fp)
  8064ac:	10800044 	addi	r2,r2,1
  8064b0:	e0bff515 	stw	r2,-44(fp)
  8064b4:	e0bff517 	ldw	r2,-44(fp)
  8064b8:	10800090 	cmplti	r2,r2,2
  8064bc:	103fdb1e 	bne	r2,zero,80642c <__alt_mem_onchip_mem+0xff7fe42c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8064c0:	e0bffc17 	ldw	r2,-16(fp)
  8064c4:	10800943 	ldbu	r2,37(r2)
  8064c8:	10803fcc 	andi	r2,r2,255
  8064cc:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8064d0:	e13ffc17 	ldw	r4,-16(fp)
  8064d4:	0805ae40 	call	805ae4 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8064d8:	e0bffc17 	ldw	r2,-16(fp)
  8064dc:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8064e0:	e0bffc17 	ldw	r2,-16(fp)
  8064e4:	10800943 	ldbu	r2,37(r2)
  8064e8:	10c03fcc 	andi	r3,r2,255
  8064ec:	e0bffb17 	ldw	r2,-20(fp)
  8064f0:	18800426 	beq	r3,r2,806504 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8064f4:	e0bffc17 	ldw	r2,-16(fp)
  8064f8:	00c00044 	movi	r3,1
  8064fc:	10c009c5 	stb	r3,39(r2)
  }
  806500:	003fef06 	br	8064c0 <__alt_mem_onchip_mem+0xff7fe4c0>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  806504:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  806508:	e0bffe17 	ldw	r2,-8(fp)
}
  80650c:	e037883a 	mov	sp,fp
  806510:	dfc00117 	ldw	ra,4(sp)
  806514:	df000017 	ldw	fp,0(sp)
  806518:	dec00204 	addi	sp,sp,8
  80651c:	f800283a 	ret

00806520 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  806520:	defffc04 	addi	sp,sp,-16
  806524:	dfc00315 	stw	ra,12(sp)
  806528:	df000215 	stw	fp,8(sp)
  80652c:	df000204 	addi	fp,sp,8
  806530:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  806534:	e0bfff17 	ldw	r2,-4(fp)
  806538:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80653c:	e0bffe17 	ldw	r2,-8(fp)
  806540:	10800943 	ldbu	r2,37(r2)
  806544:	10803fcc 	andi	r2,r2,255
  806548:	10c00044 	addi	r3,r2,1
  80654c:	e0bffe17 	ldw	r2,-8(fp)
  806550:	10800983 	ldbu	r2,38(r2)
  806554:	10803fcc 	andi	r2,r2,255
  806558:	18800316 	blt	r3,r2,806568 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80655c:	e0bffe17 	ldw	r2,-8(fp)
  806560:	10000945 	stb	zero,37(r2)
  806564:	00000606 	br	806580 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  806568:	e0bffe17 	ldw	r2,-8(fp)
  80656c:	10800943 	ldbu	r2,37(r2)
  806570:	10800044 	addi	r2,r2,1
  806574:	1007883a 	mov	r3,r2
  806578:	e0bffe17 	ldw	r2,-8(fp)
  80657c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  806580:	e0bffe17 	ldw	r2,-8(fp)
  806584:	10800983 	ldbu	r2,38(r2)
  806588:	10803fcc 	andi	r2,r2,255
  80658c:	10000826 	beq	r2,zero,8065b0 <alt_lcd_16207_timeout+0x90>
  806590:	e0bffe17 	ldw	r2,-8(fp)
  806594:	108009c3 	ldbu	r2,39(r2)
  806598:	10803fcc 	andi	r2,r2,255
  80659c:	1080201c 	xori	r2,r2,128
  8065a0:	10bfe004 	addi	r2,r2,-128
  8065a4:	1000021e 	bne	r2,zero,8065b0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8065a8:	e13ffe17 	ldw	r4,-8(fp)
  8065ac:	0805ae40 	call	805ae4 <lcd_repaint_screen>

  return sp->period;
  8065b0:	e0bffe17 	ldw	r2,-8(fp)
  8065b4:	10800717 	ldw	r2,28(r2)
}
  8065b8:	e037883a 	mov	sp,fp
  8065bc:	dfc00117 	ldw	ra,4(sp)
  8065c0:	df000017 	ldw	fp,0(sp)
  8065c4:	dec00204 	addi	sp,sp,8
  8065c8:	f800283a 	ret

008065cc <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8065cc:	defffc04 	addi	sp,sp,-16
  8065d0:	dfc00315 	stw	ra,12(sp)
  8065d4:	df000215 	stw	fp,8(sp)
  8065d8:	df000204 	addi	fp,sp,8
  8065dc:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8065e0:	e0bfff17 	ldw	r2,-4(fp)
  8065e4:	10800017 	ldw	r2,0(r2)
  8065e8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8065ec:	e0bfff17 	ldw	r2,-4(fp)
  8065f0:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8065f4:	010ea604 	movi	r4,15000
  8065f8:	080797c0 	call	80797c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8065fc:	e0bffe17 	ldw	r2,-8(fp)
  806600:	00c00c04 	movi	r3,48
  806604:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  806608:	01040104 	movi	r4,4100
  80660c:	080797c0 	call	80797c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806610:	e0bffe17 	ldw	r2,-8(fp)
  806614:	00c00c04 	movi	r3,48
  806618:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80661c:	0100fa04 	movi	r4,1000
  806620:	080797c0 	call	80797c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806624:	e0bffe17 	ldw	r2,-8(fp)
  806628:	00c00c04 	movi	r3,48
  80662c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  806630:	01400e04 	movi	r5,56
  806634:	e13fff17 	ldw	r4,-4(fp)
  806638:	08058840 	call	805884 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80663c:	01400204 	movi	r5,8
  806640:	e13fff17 	ldw	r4,-4(fp)
  806644:	08058840 	call	805884 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  806648:	e13fff17 	ldw	r4,-4(fp)
  80664c:	0805a140 	call	805a14 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  806650:	01400184 	movi	r5,6
  806654:	e13fff17 	ldw	r4,-4(fp)
  806658:	08058840 	call	805884 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80665c:	01400304 	movi	r5,12
  806660:	e13fff17 	ldw	r4,-4(fp)
  806664:	08058840 	call	805884 <lcd_write_command>

  sp->esccount = -1;
  806668:	e0bfff17 	ldw	r2,-4(fp)
  80666c:	00ffffc4 	movi	r3,-1
  806670:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  806674:	e0bfff17 	ldw	r2,-4(fp)
  806678:	10800a04 	addi	r2,r2,40
  80667c:	01800204 	movi	r6,8
  806680:	000b883a 	mov	r5,zero
  806684:	1009883a 	mov	r4,r2
  806688:	08025e00 	call	8025e0 <memset>

  sp->scrollpos = 0;
  80668c:	e0bfff17 	ldw	r2,-4(fp)
  806690:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  806694:	e0bfff17 	ldw	r2,-4(fp)
  806698:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80669c:	e0bfff17 	ldw	r2,-4(fp)
  8066a0:	100009c5 	stb	zero,39(r2)
  8066a4:	d0a73317 	ldw	r2,-25396(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8066a8:	01400284 	movi	r5,10
  8066ac:	1009883a 	mov	r4,r2
  8066b0:	0803ec80 	call	803ec8 <__udivsi3>
  8066b4:	1007883a 	mov	r3,r2
  8066b8:	e0bfff17 	ldw	r2,-4(fp)
  8066bc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8066c0:	e0bfff17 	ldw	r2,-4(fp)
  8066c4:	10c00104 	addi	r3,r2,4
  8066c8:	e0bfff17 	ldw	r2,-4(fp)
  8066cc:	10800717 	ldw	r2,28(r2)
  8066d0:	e1ffff17 	ldw	r7,-4(fp)
  8066d4:	01802034 	movhi	r6,128
  8066d8:	31994804 	addi	r6,r6,25888
  8066dc:	100b883a 	mov	r5,r2
  8066e0:	1809883a 	mov	r4,r3
  8066e4:	0803f840 	call	803f84 <alt_alarm_start>
}
  8066e8:	0001883a 	nop
  8066ec:	e037883a 	mov	sp,fp
  8066f0:	dfc00117 	ldw	ra,4(sp)
  8066f4:	df000017 	ldw	fp,0(sp)
  8066f8:	dec00204 	addi	sp,sp,8
  8066fc:	f800283a 	ret

00806700 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  806700:	defffa04 	addi	sp,sp,-24
  806704:	dfc00515 	stw	ra,20(sp)
  806708:	df000415 	stw	fp,16(sp)
  80670c:	df000404 	addi	fp,sp,16
  806710:	e13ffd15 	stw	r4,-12(fp)
  806714:	e17ffe15 	stw	r5,-8(fp)
  806718:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80671c:	e0bffd17 	ldw	r2,-12(fp)
  806720:	10800017 	ldw	r2,0(r2)
  806724:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  806728:	e0bffc17 	ldw	r2,-16(fp)
  80672c:	10c00a04 	addi	r3,r2,40
  806730:	e0bffd17 	ldw	r2,-12(fp)
  806734:	10800217 	ldw	r2,8(r2)
  806738:	100f883a 	mov	r7,r2
  80673c:	e1bfff17 	ldw	r6,-4(fp)
  806740:	e17ffe17 	ldw	r5,-8(fp)
  806744:	1809883a 	mov	r4,r3
  806748:	08060480 	call	806048 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80674c:	e037883a 	mov	sp,fp
  806750:	dfc00117 	ldw	ra,4(sp)
  806754:	df000017 	ldw	fp,0(sp)
  806758:	dec00204 	addi	sp,sp,8
  80675c:	f800283a 	ret

00806760 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  806760:	defffa04 	addi	sp,sp,-24
  806764:	dfc00515 	stw	ra,20(sp)
  806768:	df000415 	stw	fp,16(sp)
  80676c:	df000404 	addi	fp,sp,16
  806770:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  806774:	0007883a 	mov	r3,zero
  806778:	e0bfff17 	ldw	r2,-4(fp)
  80677c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  806780:	e0bfff17 	ldw	r2,-4(fp)
  806784:	10800104 	addi	r2,r2,4
  806788:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80678c:	0005303a 	rdctl	r2,status
  806790:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806794:	e0fffd17 	ldw	r3,-12(fp)
  806798:	00bfff84 	movi	r2,-2
  80679c:	1884703a 	and	r2,r3,r2
  8067a0:	1001703a 	wrctl	status,r2
  
  return context;
  8067a4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8067a8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8067ac:	0804adc0 	call	804adc <alt_tick>
  8067b0:	e0bffc17 	ldw	r2,-16(fp)
  8067b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8067b8:	e0bffe17 	ldw	r2,-8(fp)
  8067bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8067c0:	0001883a 	nop
  8067c4:	e037883a 	mov	sp,fp
  8067c8:	dfc00117 	ldw	ra,4(sp)
  8067cc:	df000017 	ldw	fp,0(sp)
  8067d0:	dec00204 	addi	sp,sp,8
  8067d4:	f800283a 	ret

008067d8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8067d8:	defff804 	addi	sp,sp,-32
  8067dc:	dfc00715 	stw	ra,28(sp)
  8067e0:	df000615 	stw	fp,24(sp)
  8067e4:	df000604 	addi	fp,sp,24
  8067e8:	e13ffc15 	stw	r4,-16(fp)
  8067ec:	e17ffd15 	stw	r5,-12(fp)
  8067f0:	e1bffe15 	stw	r6,-8(fp)
  8067f4:	e1ffff15 	stw	r7,-4(fp)
  8067f8:	e0bfff17 	ldw	r2,-4(fp)
  8067fc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  806800:	d0a73317 	ldw	r2,-25396(gp)
  806804:	1000021e 	bne	r2,zero,806810 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  806808:	e0bffb17 	ldw	r2,-20(fp)
  80680c:	d0a73315 	stw	r2,-25396(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  806810:	e0bffc17 	ldw	r2,-16(fp)
  806814:	10800104 	addi	r2,r2,4
  806818:	00c001c4 	movi	r3,7
  80681c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  806820:	d8000015 	stw	zero,0(sp)
  806824:	e1fffc17 	ldw	r7,-16(fp)
  806828:	01802034 	movhi	r6,128
  80682c:	3199d804 	addi	r6,r6,26464
  806830:	e17ffe17 	ldw	r5,-8(fp)
  806834:	e13ffd17 	ldw	r4,-12(fp)
  806838:	08073480 	call	807348 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80683c:	0001883a 	nop
  806840:	e037883a 	mov	sp,fp
  806844:	dfc00117 	ldw	ra,4(sp)
  806848:	df000017 	ldw	fp,0(sp)
  80684c:	dec00204 	addi	sp,sp,8
  806850:	f800283a 	ret

00806854 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  806854:	defffa04 	addi	sp,sp,-24
  806858:	dfc00515 	stw	ra,20(sp)
  80685c:	df000415 	stw	fp,16(sp)
  806860:	df000404 	addi	fp,sp,16
  806864:	e13ffd15 	stw	r4,-12(fp)
  806868:	e17ffe15 	stw	r5,-8(fp)
  80686c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  806870:	e0bffd17 	ldw	r2,-12(fp)
  806874:	10800017 	ldw	r2,0(r2)
  806878:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80687c:	e0bffc17 	ldw	r2,-16(fp)
  806880:	10c00a04 	addi	r3,r2,40
  806884:	e0bffd17 	ldw	r2,-12(fp)
  806888:	10800217 	ldw	r2,8(r2)
  80688c:	100f883a 	mov	r7,r2
  806890:	e1bfff17 	ldw	r6,-4(fp)
  806894:	e17ffe17 	ldw	r5,-8(fp)
  806898:	1809883a 	mov	r4,r3
  80689c:	0806d680 	call	806d68 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8068a0:	e037883a 	mov	sp,fp
  8068a4:	dfc00117 	ldw	ra,4(sp)
  8068a8:	df000017 	ldw	fp,0(sp)
  8068ac:	dec00204 	addi	sp,sp,8
  8068b0:	f800283a 	ret

008068b4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8068b4:	defffa04 	addi	sp,sp,-24
  8068b8:	dfc00515 	stw	ra,20(sp)
  8068bc:	df000415 	stw	fp,16(sp)
  8068c0:	df000404 	addi	fp,sp,16
  8068c4:	e13ffd15 	stw	r4,-12(fp)
  8068c8:	e17ffe15 	stw	r5,-8(fp)
  8068cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8068d0:	e0bffd17 	ldw	r2,-12(fp)
  8068d4:	10800017 	ldw	r2,0(r2)
  8068d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8068dc:	e0bffc17 	ldw	r2,-16(fp)
  8068e0:	10c00a04 	addi	r3,r2,40
  8068e4:	e0bffd17 	ldw	r2,-12(fp)
  8068e8:	10800217 	ldw	r2,8(r2)
  8068ec:	100f883a 	mov	r7,r2
  8068f0:	e1bfff17 	ldw	r6,-4(fp)
  8068f4:	e17ffe17 	ldw	r5,-8(fp)
  8068f8:	1809883a 	mov	r4,r3
  8068fc:	0806f800 	call	806f80 <altera_avalon_uart_write>
      fd->fd_flags);
}
  806900:	e037883a 	mov	sp,fp
  806904:	dfc00117 	ldw	ra,4(sp)
  806908:	df000017 	ldw	fp,0(sp)
  80690c:	dec00204 	addi	sp,sp,8
  806910:	f800283a 	ret

00806914 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  806914:	defffc04 	addi	sp,sp,-16
  806918:	dfc00315 	stw	ra,12(sp)
  80691c:	df000215 	stw	fp,8(sp)
  806920:	df000204 	addi	fp,sp,8
  806924:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  806928:	e0bfff17 	ldw	r2,-4(fp)
  80692c:	10800017 	ldw	r2,0(r2)
  806930:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  806934:	e0bffe17 	ldw	r2,-8(fp)
  806938:	10c00a04 	addi	r3,r2,40
  80693c:	e0bfff17 	ldw	r2,-4(fp)
  806940:	10800217 	ldw	r2,8(r2)
  806944:	100b883a 	mov	r5,r2
  806948:	1809883a 	mov	r4,r3
  80694c:	0806cd80 	call	806cd8 <altera_avalon_uart_close>
}
  806950:	e037883a 	mov	sp,fp
  806954:	dfc00117 	ldw	ra,4(sp)
  806958:	df000017 	ldw	fp,0(sp)
  80695c:	dec00204 	addi	sp,sp,8
  806960:	f800283a 	ret

00806964 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  806964:	defff804 	addi	sp,sp,-32
  806968:	dfc00715 	stw	ra,28(sp)
  80696c:	df000615 	stw	fp,24(sp)
  806970:	df000604 	addi	fp,sp,24
  806974:	e13ffd15 	stw	r4,-12(fp)
  806978:	e17ffe15 	stw	r5,-8(fp)
  80697c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  806980:	e0bffd17 	ldw	r2,-12(fp)
  806984:	10800017 	ldw	r2,0(r2)
  806988:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80698c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  806990:	1000041e 	bne	r2,zero,8069a4 <altera_avalon_uart_init+0x40>
  806994:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  806998:	1000021e 	bne	r2,zero,8069a4 <altera_avalon_uart_init+0x40>
  80699c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8069a0:	10000226 	beq	r2,zero,8069ac <altera_avalon_uart_init+0x48>
  8069a4:	00800044 	movi	r2,1
  8069a8:	00000106 	br	8069b0 <altera_avalon_uart_init+0x4c>
  8069ac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8069b0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8069b4:	e0bffc17 	ldw	r2,-16(fp)
  8069b8:	10000f1e 	bne	r2,zero,8069f8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8069bc:	e0bffd17 	ldw	r2,-12(fp)
  8069c0:	00c32004 	movi	r3,3200
  8069c4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8069c8:	e0bffb17 	ldw	r2,-20(fp)
  8069cc:	10800304 	addi	r2,r2,12
  8069d0:	e0fffd17 	ldw	r3,-12(fp)
  8069d4:	18c00117 	ldw	r3,4(r3)
  8069d8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8069dc:	d8000015 	stw	zero,0(sp)
  8069e0:	e1fffd17 	ldw	r7,-12(fp)
  8069e4:	01802034 	movhi	r6,128
  8069e8:	319a8404 	addi	r6,r6,27152
  8069ec:	e17fff17 	ldw	r5,-4(fp)
  8069f0:	e13ffe17 	ldw	r4,-8(fp)
  8069f4:	08073480 	call	807348 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8069f8:	0001883a 	nop
  8069fc:	e037883a 	mov	sp,fp
  806a00:	dfc00117 	ldw	ra,4(sp)
  806a04:	df000017 	ldw	fp,0(sp)
  806a08:	dec00204 	addi	sp,sp,8
  806a0c:	f800283a 	ret

00806a10 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  806a10:	defffa04 	addi	sp,sp,-24
  806a14:	dfc00515 	stw	ra,20(sp)
  806a18:	df000415 	stw	fp,16(sp)
  806a1c:	df000404 	addi	fp,sp,16
  806a20:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  806a24:	e0bfff17 	ldw	r2,-4(fp)
  806a28:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  806a2c:	e0bffc17 	ldw	r2,-16(fp)
  806a30:	10800017 	ldw	r2,0(r2)
  806a34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  806a38:	e0bffd17 	ldw	r2,-12(fp)
  806a3c:	10800204 	addi	r2,r2,8
  806a40:	10800037 	ldwio	r2,0(r2)
  806a44:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  806a48:	e0bffd17 	ldw	r2,-12(fp)
  806a4c:	10800204 	addi	r2,r2,8
  806a50:	0007883a 	mov	r3,zero
  806a54:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  806a58:	e0bffd17 	ldw	r2,-12(fp)
  806a5c:	10800204 	addi	r2,r2,8
  806a60:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  806a64:	e0bffe17 	ldw	r2,-8(fp)
  806a68:	1080200c 	andi	r2,r2,128
  806a6c:	10000326 	beq	r2,zero,806a7c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  806a70:	e17ffe17 	ldw	r5,-8(fp)
  806a74:	e13ffc17 	ldw	r4,-16(fp)
  806a78:	0806aac0 	call	806aac <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  806a7c:	e0bffe17 	ldw	r2,-8(fp)
  806a80:	1081100c 	andi	r2,r2,1088
  806a84:	10000326 	beq	r2,zero,806a94 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  806a88:	e17ffe17 	ldw	r5,-8(fp)
  806a8c:	e13ffc17 	ldw	r4,-16(fp)
  806a90:	0806b900 	call	806b90 <altera_avalon_uart_txirq>
  }
  

}
  806a94:	0001883a 	nop
  806a98:	e037883a 	mov	sp,fp
  806a9c:	dfc00117 	ldw	ra,4(sp)
  806aa0:	df000017 	ldw	fp,0(sp)
  806aa4:	dec00204 	addi	sp,sp,8
  806aa8:	f800283a 	ret

00806aac <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  806aac:	defffc04 	addi	sp,sp,-16
  806ab0:	df000315 	stw	fp,12(sp)
  806ab4:	df000304 	addi	fp,sp,12
  806ab8:	e13ffe15 	stw	r4,-8(fp)
  806abc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  806ac0:	e0bfff17 	ldw	r2,-4(fp)
  806ac4:	108000cc 	andi	r2,r2,3
  806ac8:	10002c1e 	bne	r2,zero,806b7c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  806acc:	e0bffe17 	ldw	r2,-8(fp)
  806ad0:	10800317 	ldw	r2,12(r2)
  806ad4:	e0bffe17 	ldw	r2,-8(fp)
  806ad8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  806adc:	e0bffe17 	ldw	r2,-8(fp)
  806ae0:	10800317 	ldw	r2,12(r2)
  806ae4:	10800044 	addi	r2,r2,1
  806ae8:	10800fcc 	andi	r2,r2,63
  806aec:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  806af0:	e0bffe17 	ldw	r2,-8(fp)
  806af4:	10800317 	ldw	r2,12(r2)
  806af8:	e0fffe17 	ldw	r3,-8(fp)
  806afc:	18c00017 	ldw	r3,0(r3)
  806b00:	18c00037 	ldwio	r3,0(r3)
  806b04:	1809883a 	mov	r4,r3
  806b08:	e0fffe17 	ldw	r3,-8(fp)
  806b0c:	1885883a 	add	r2,r3,r2
  806b10:	10800704 	addi	r2,r2,28
  806b14:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  806b18:	e0bffe17 	ldw	r2,-8(fp)
  806b1c:	e0fffd17 	ldw	r3,-12(fp)
  806b20:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  806b24:	e0bffe17 	ldw	r2,-8(fp)
  806b28:	10800317 	ldw	r2,12(r2)
  806b2c:	10800044 	addi	r2,r2,1
  806b30:	10800fcc 	andi	r2,r2,63
  806b34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  806b38:	e0bffe17 	ldw	r2,-8(fp)
  806b3c:	10c00217 	ldw	r3,8(r2)
  806b40:	e0bffd17 	ldw	r2,-12(fp)
  806b44:	18800e1e 	bne	r3,r2,806b80 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  806b48:	e0bffe17 	ldw	r2,-8(fp)
  806b4c:	10c00117 	ldw	r3,4(r2)
  806b50:	00bfdfc4 	movi	r2,-129
  806b54:	1886703a 	and	r3,r3,r2
  806b58:	e0bffe17 	ldw	r2,-8(fp)
  806b5c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  806b60:	e0bffe17 	ldw	r2,-8(fp)
  806b64:	10800017 	ldw	r2,0(r2)
  806b68:	10800304 	addi	r2,r2,12
  806b6c:	e0fffe17 	ldw	r3,-8(fp)
  806b70:	18c00117 	ldw	r3,4(r3)
  806b74:	10c00035 	stwio	r3,0(r2)
  806b78:	00000106 	br	806b80 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  806b7c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  806b80:	e037883a 	mov	sp,fp
  806b84:	df000017 	ldw	fp,0(sp)
  806b88:	dec00104 	addi	sp,sp,4
  806b8c:	f800283a 	ret

00806b90 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  806b90:	defffb04 	addi	sp,sp,-20
  806b94:	df000415 	stw	fp,16(sp)
  806b98:	df000404 	addi	fp,sp,16
  806b9c:	e13ffc15 	stw	r4,-16(fp)
  806ba0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  806ba4:	e0bffc17 	ldw	r2,-16(fp)
  806ba8:	10c00417 	ldw	r3,16(r2)
  806bac:	e0bffc17 	ldw	r2,-16(fp)
  806bb0:	10800517 	ldw	r2,20(r2)
  806bb4:	18803226 	beq	r3,r2,806c80 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  806bb8:	e0bffc17 	ldw	r2,-16(fp)
  806bbc:	10800617 	ldw	r2,24(r2)
  806bc0:	1080008c 	andi	r2,r2,2
  806bc4:	10000326 	beq	r2,zero,806bd4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  806bc8:	e0bffd17 	ldw	r2,-12(fp)
  806bcc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  806bd0:	10001d26 	beq	r2,zero,806c48 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  806bd4:	e0bffc17 	ldw	r2,-16(fp)
  806bd8:	10800417 	ldw	r2,16(r2)
  806bdc:	e0bffc17 	ldw	r2,-16(fp)
  806be0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  806be4:	e0bffc17 	ldw	r2,-16(fp)
  806be8:	10800017 	ldw	r2,0(r2)
  806bec:	10800104 	addi	r2,r2,4
  806bf0:	e0fffc17 	ldw	r3,-16(fp)
  806bf4:	18c00417 	ldw	r3,16(r3)
  806bf8:	e13ffc17 	ldw	r4,-16(fp)
  806bfc:	20c7883a 	add	r3,r4,r3
  806c00:	18c01704 	addi	r3,r3,92
  806c04:	18c00003 	ldbu	r3,0(r3)
  806c08:	18c03fcc 	andi	r3,r3,255
  806c0c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  806c10:	e0bffc17 	ldw	r2,-16(fp)
  806c14:	10800417 	ldw	r2,16(r2)
  806c18:	10800044 	addi	r2,r2,1
  806c1c:	e0fffc17 	ldw	r3,-16(fp)
  806c20:	18800415 	stw	r2,16(r3)
  806c24:	10c00fcc 	andi	r3,r2,63
  806c28:	e0bffc17 	ldw	r2,-16(fp)
  806c2c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  806c30:	e0bffc17 	ldw	r2,-16(fp)
  806c34:	10800117 	ldw	r2,4(r2)
  806c38:	10c01014 	ori	r3,r2,64
  806c3c:	e0bffc17 	ldw	r2,-16(fp)
  806c40:	10c00115 	stw	r3,4(r2)
  806c44:	00000e06 	br	806c80 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  806c48:	e0bffc17 	ldw	r2,-16(fp)
  806c4c:	10800017 	ldw	r2,0(r2)
  806c50:	10800204 	addi	r2,r2,8
  806c54:	10800037 	ldwio	r2,0(r2)
  806c58:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  806c5c:	e0bffd17 	ldw	r2,-12(fp)
  806c60:	1082000c 	andi	r2,r2,2048
  806c64:	1000061e 	bne	r2,zero,806c80 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  806c68:	e0bffc17 	ldw	r2,-16(fp)
  806c6c:	10c00117 	ldw	r3,4(r2)
  806c70:	00bfefc4 	movi	r2,-65
  806c74:	1886703a 	and	r3,r3,r2
  806c78:	e0bffc17 	ldw	r2,-16(fp)
  806c7c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  806c80:	e0bffc17 	ldw	r2,-16(fp)
  806c84:	10c00417 	ldw	r3,16(r2)
  806c88:	e0bffc17 	ldw	r2,-16(fp)
  806c8c:	10800517 	ldw	r2,20(r2)
  806c90:	1880061e 	bne	r3,r2,806cac <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  806c94:	e0bffc17 	ldw	r2,-16(fp)
  806c98:	10c00117 	ldw	r3,4(r2)
  806c9c:	00beefc4 	movi	r2,-1089
  806ca0:	1886703a 	and	r3,r3,r2
  806ca4:	e0bffc17 	ldw	r2,-16(fp)
  806ca8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  806cac:	e0bffc17 	ldw	r2,-16(fp)
  806cb0:	10800017 	ldw	r2,0(r2)
  806cb4:	10800304 	addi	r2,r2,12
  806cb8:	e0fffc17 	ldw	r3,-16(fp)
  806cbc:	18c00117 	ldw	r3,4(r3)
  806cc0:	10c00035 	stwio	r3,0(r2)
}
  806cc4:	0001883a 	nop
  806cc8:	e037883a 	mov	sp,fp
  806ccc:	df000017 	ldw	fp,0(sp)
  806cd0:	dec00104 	addi	sp,sp,4
  806cd4:	f800283a 	ret

00806cd8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  806cd8:	defffd04 	addi	sp,sp,-12
  806cdc:	df000215 	stw	fp,8(sp)
  806ce0:	df000204 	addi	fp,sp,8
  806ce4:	e13ffe15 	stw	r4,-8(fp)
  806ce8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  806cec:	00000506 	br	806d04 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  806cf0:	e0bfff17 	ldw	r2,-4(fp)
  806cf4:	1090000c 	andi	r2,r2,16384
  806cf8:	10000226 	beq	r2,zero,806d04 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  806cfc:	00bffd44 	movi	r2,-11
  806d00:	00000606 	br	806d1c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  806d04:	e0bffe17 	ldw	r2,-8(fp)
  806d08:	10c00417 	ldw	r3,16(r2)
  806d0c:	e0bffe17 	ldw	r2,-8(fp)
  806d10:	10800517 	ldw	r2,20(r2)
  806d14:	18bff61e 	bne	r3,r2,806cf0 <__alt_mem_onchip_mem+0xff7fecf0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  806d18:	0005883a 	mov	r2,zero
}
  806d1c:	e037883a 	mov	sp,fp
  806d20:	df000017 	ldw	fp,0(sp)
  806d24:	dec00104 	addi	sp,sp,4
  806d28:	f800283a 	ret

00806d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806d2c:	defffe04 	addi	sp,sp,-8
  806d30:	dfc00115 	stw	ra,4(sp)
  806d34:	df000015 	stw	fp,0(sp)
  806d38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806d3c:	d0a00917 	ldw	r2,-32732(gp)
  806d40:	10000326 	beq	r2,zero,806d50 <alt_get_errno+0x24>
  806d44:	d0a00917 	ldw	r2,-32732(gp)
  806d48:	103ee83a 	callr	r2
  806d4c:	00000106 	br	806d54 <alt_get_errno+0x28>
  806d50:	d0a72e04 	addi	r2,gp,-25416
}
  806d54:	e037883a 	mov	sp,fp
  806d58:	dfc00117 	ldw	ra,4(sp)
  806d5c:	df000017 	ldw	fp,0(sp)
  806d60:	dec00204 	addi	sp,sp,8
  806d64:	f800283a 	ret

00806d68 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  806d68:	defff204 	addi	sp,sp,-56
  806d6c:	dfc00d15 	stw	ra,52(sp)
  806d70:	df000c15 	stw	fp,48(sp)
  806d74:	df000c04 	addi	fp,sp,48
  806d78:	e13ffc15 	stw	r4,-16(fp)
  806d7c:	e17ffd15 	stw	r5,-12(fp)
  806d80:	e1bffe15 	stw	r6,-8(fp)
  806d84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  806d88:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  806d8c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  806d90:	e0bfff17 	ldw	r2,-4(fp)
  806d94:	1090000c 	andi	r2,r2,16384
  806d98:	1005003a 	cmpeq	r2,r2,zero
  806d9c:	10803fcc 	andi	r2,r2,255
  806da0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  806da4:	00001306 	br	806df4 <altera_avalon_uart_read+0x8c>
    {
      count++;
  806da8:	e0bff517 	ldw	r2,-44(fp)
  806dac:	10800044 	addi	r2,r2,1
  806db0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  806db4:	e0bffd17 	ldw	r2,-12(fp)
  806db8:	10c00044 	addi	r3,r2,1
  806dbc:	e0fffd15 	stw	r3,-12(fp)
  806dc0:	e0fffc17 	ldw	r3,-16(fp)
  806dc4:	18c00217 	ldw	r3,8(r3)
  806dc8:	e13ffc17 	ldw	r4,-16(fp)
  806dcc:	20c7883a 	add	r3,r4,r3
  806dd0:	18c00704 	addi	r3,r3,28
  806dd4:	18c00003 	ldbu	r3,0(r3)
  806dd8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  806ddc:	e0bffc17 	ldw	r2,-16(fp)
  806de0:	10800217 	ldw	r2,8(r2)
  806de4:	10800044 	addi	r2,r2,1
  806de8:	10c00fcc 	andi	r3,r2,63
  806dec:	e0bffc17 	ldw	r2,-16(fp)
  806df0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  806df4:	e0fff517 	ldw	r3,-44(fp)
  806df8:	e0bffe17 	ldw	r2,-8(fp)
  806dfc:	1880050e 	bge	r3,r2,806e14 <altera_avalon_uart_read+0xac>
  806e00:	e0bffc17 	ldw	r2,-16(fp)
  806e04:	10c00217 	ldw	r3,8(r2)
  806e08:	e0bffc17 	ldw	r2,-16(fp)
  806e0c:	10800317 	ldw	r2,12(r2)
  806e10:	18bfe51e 	bne	r3,r2,806da8 <__alt_mem_onchip_mem+0xff7feda8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  806e14:	e0bff517 	ldw	r2,-44(fp)
  806e18:	1000251e 	bne	r2,zero,806eb0 <altera_avalon_uart_read+0x148>
  806e1c:	e0bffc17 	ldw	r2,-16(fp)
  806e20:	10c00217 	ldw	r3,8(r2)
  806e24:	e0bffc17 	ldw	r2,-16(fp)
  806e28:	10800317 	ldw	r2,12(r2)
  806e2c:	1880201e 	bne	r3,r2,806eb0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  806e30:	e0bff617 	ldw	r2,-40(fp)
  806e34:	1000071e 	bne	r2,zero,806e54 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  806e38:	0806d2c0 	call	806d2c <alt_get_errno>
  806e3c:	1007883a 	mov	r3,r2
  806e40:	008002c4 	movi	r2,11
  806e44:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  806e48:	00800044 	movi	r2,1
  806e4c:	e0bff405 	stb	r2,-48(fp)
        break;
  806e50:	00001b06 	br	806ec0 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806e54:	0005303a 	rdctl	r2,status
  806e58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806e5c:	e0fff917 	ldw	r3,-28(fp)
  806e60:	00bfff84 	movi	r2,-2
  806e64:	1884703a 	and	r2,r3,r2
  806e68:	1001703a 	wrctl	status,r2
  
  return context;
  806e6c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  806e70:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  806e74:	e0bffc17 	ldw	r2,-16(fp)
  806e78:	10800117 	ldw	r2,4(r2)
  806e7c:	10c02014 	ori	r3,r2,128
  806e80:	e0bffc17 	ldw	r2,-16(fp)
  806e84:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  806e88:	e0bffc17 	ldw	r2,-16(fp)
  806e8c:	10800017 	ldw	r2,0(r2)
  806e90:	10800304 	addi	r2,r2,12
  806e94:	e0fffc17 	ldw	r3,-16(fp)
  806e98:	18c00117 	ldw	r3,4(r3)
  806e9c:	10c00035 	stwio	r3,0(r2)
  806ea0:	e0bff817 	ldw	r2,-32(fp)
  806ea4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806ea8:	e0bffa17 	ldw	r2,-24(fp)
  806eac:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  806eb0:	e0bff517 	ldw	r2,-44(fp)
  806eb4:	1000021e 	bne	r2,zero,806ec0 <altera_avalon_uart_read+0x158>
  806eb8:	e0bffe17 	ldw	r2,-8(fp)
  806ebc:	103fcd1e 	bne	r2,zero,806df4 <__alt_mem_onchip_mem+0xff7fedf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806ec0:	0005303a 	rdctl	r2,status
  806ec4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806ec8:	e0fffb17 	ldw	r3,-20(fp)
  806ecc:	00bfff84 	movi	r2,-2
  806ed0:	1884703a 	and	r2,r3,r2
  806ed4:	1001703a 	wrctl	status,r2
  
  return context;
  806ed8:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  806edc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  806ee0:	e0bffc17 	ldw	r2,-16(fp)
  806ee4:	10800117 	ldw	r2,4(r2)
  806ee8:	10c02014 	ori	r3,r2,128
  806eec:	e0bffc17 	ldw	r2,-16(fp)
  806ef0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  806ef4:	e0bffc17 	ldw	r2,-16(fp)
  806ef8:	10800017 	ldw	r2,0(r2)
  806efc:	10800304 	addi	r2,r2,12
  806f00:	e0fffc17 	ldw	r3,-16(fp)
  806f04:	18c00117 	ldw	r3,4(r3)
  806f08:	10c00035 	stwio	r3,0(r2)
  806f0c:	e0bff817 	ldw	r2,-32(fp)
  806f10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806f14:	e0bff717 	ldw	r2,-36(fp)
  806f18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  806f1c:	e0bff403 	ldbu	r2,-48(fp)
  806f20:	10000226 	beq	r2,zero,806f2c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  806f24:	00bffd44 	movi	r2,-11
  806f28:	00000106 	br	806f30 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  806f2c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  806f30:	e037883a 	mov	sp,fp
  806f34:	dfc00117 	ldw	ra,4(sp)
  806f38:	df000017 	ldw	fp,0(sp)
  806f3c:	dec00204 	addi	sp,sp,8
  806f40:	f800283a 	ret

00806f44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806f44:	defffe04 	addi	sp,sp,-8
  806f48:	dfc00115 	stw	ra,4(sp)
  806f4c:	df000015 	stw	fp,0(sp)
  806f50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806f54:	d0a00917 	ldw	r2,-32732(gp)
  806f58:	10000326 	beq	r2,zero,806f68 <alt_get_errno+0x24>
  806f5c:	d0a00917 	ldw	r2,-32732(gp)
  806f60:	103ee83a 	callr	r2
  806f64:	00000106 	br	806f6c <alt_get_errno+0x28>
  806f68:	d0a72e04 	addi	r2,gp,-25416
}
  806f6c:	e037883a 	mov	sp,fp
  806f70:	dfc00117 	ldw	ra,4(sp)
  806f74:	df000017 	ldw	fp,0(sp)
  806f78:	dec00204 	addi	sp,sp,8
  806f7c:	f800283a 	ret

00806f80 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  806f80:	defff204 	addi	sp,sp,-56
  806f84:	dfc00d15 	stw	ra,52(sp)
  806f88:	df000c15 	stw	fp,48(sp)
  806f8c:	df000c04 	addi	fp,sp,48
  806f90:	e13ffc15 	stw	r4,-16(fp)
  806f94:	e17ffd15 	stw	r5,-12(fp)
  806f98:	e1bffe15 	stw	r6,-8(fp)
  806f9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  806fa0:	e0bffe17 	ldw	r2,-8(fp)
  806fa4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  806fa8:	e0bfff17 	ldw	r2,-4(fp)
  806fac:	1090000c 	andi	r2,r2,16384
  806fb0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  806fb4:	00003c06 	br	8070a8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  806fb8:	e0bffc17 	ldw	r2,-16(fp)
  806fbc:	10800517 	ldw	r2,20(r2)
  806fc0:	10800044 	addi	r2,r2,1
  806fc4:	10800fcc 	andi	r2,r2,63
  806fc8:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  806fcc:	e0bffc17 	ldw	r2,-16(fp)
  806fd0:	10c00417 	ldw	r3,16(r2)
  806fd4:	e0bff717 	ldw	r2,-36(fp)
  806fd8:	1880221e 	bne	r3,r2,807064 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  806fdc:	e0bff517 	ldw	r2,-44(fp)
  806fe0:	10000526 	beq	r2,zero,806ff8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  806fe4:	0806f440 	call	806f44 <alt_get_errno>
  806fe8:	1007883a 	mov	r3,r2
  806fec:	008002c4 	movi	r2,11
  806ff0:	18800015 	stw	r2,0(r3)
        break;
  806ff4:	00002e06 	br	8070b0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806ff8:	0005303a 	rdctl	r2,status
  806ffc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807000:	e0fff917 	ldw	r3,-28(fp)
  807004:	00bfff84 	movi	r2,-2
  807008:	1884703a 	and	r2,r3,r2
  80700c:	1001703a 	wrctl	status,r2
  
  return context;
  807010:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  807014:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  807018:	e0bffc17 	ldw	r2,-16(fp)
  80701c:	10800117 	ldw	r2,4(r2)
  807020:	10c11014 	ori	r3,r2,1088
  807024:	e0bffc17 	ldw	r2,-16(fp)
  807028:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80702c:	e0bffc17 	ldw	r2,-16(fp)
  807030:	10800017 	ldw	r2,0(r2)
  807034:	10800304 	addi	r2,r2,12
  807038:	e0fffc17 	ldw	r3,-16(fp)
  80703c:	18c00117 	ldw	r3,4(r3)
  807040:	10c00035 	stwio	r3,0(r2)
  807044:	e0bff817 	ldw	r2,-32(fp)
  807048:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80704c:	e0bff617 	ldw	r2,-40(fp)
  807050:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  807054:	e0bffc17 	ldw	r2,-16(fp)
  807058:	10c00417 	ldw	r3,16(r2)
  80705c:	e0bff717 	ldw	r2,-36(fp)
  807060:	18bffc26 	beq	r3,r2,807054 <__alt_mem_onchip_mem+0xff7ff054>
      }
    }

    count--;
  807064:	e0bff417 	ldw	r2,-48(fp)
  807068:	10bfffc4 	addi	r2,r2,-1
  80706c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  807070:	e0bffc17 	ldw	r2,-16(fp)
  807074:	10c00517 	ldw	r3,20(r2)
  807078:	e0bffd17 	ldw	r2,-12(fp)
  80707c:	11000044 	addi	r4,r2,1
  807080:	e13ffd15 	stw	r4,-12(fp)
  807084:	10800003 	ldbu	r2,0(r2)
  807088:	1009883a 	mov	r4,r2
  80708c:	e0bffc17 	ldw	r2,-16(fp)
  807090:	10c5883a 	add	r2,r2,r3
  807094:	10801704 	addi	r2,r2,92
  807098:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80709c:	e0bffc17 	ldw	r2,-16(fp)
  8070a0:	e0fff717 	ldw	r3,-36(fp)
  8070a4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8070a8:	e0bff417 	ldw	r2,-48(fp)
  8070ac:	103fc21e 	bne	r2,zero,806fb8 <__alt_mem_onchip_mem+0xff7fefb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8070b0:	0005303a 	rdctl	r2,status
  8070b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8070b8:	e0fffb17 	ldw	r3,-20(fp)
  8070bc:	00bfff84 	movi	r2,-2
  8070c0:	1884703a 	and	r2,r3,r2
  8070c4:	1001703a 	wrctl	status,r2
  
  return context;
  8070c8:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8070cc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8070d0:	e0bffc17 	ldw	r2,-16(fp)
  8070d4:	10800117 	ldw	r2,4(r2)
  8070d8:	10c11014 	ori	r3,r2,1088
  8070dc:	e0bffc17 	ldw	r2,-16(fp)
  8070e0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8070e4:	e0bffc17 	ldw	r2,-16(fp)
  8070e8:	10800017 	ldw	r2,0(r2)
  8070ec:	10800304 	addi	r2,r2,12
  8070f0:	e0fffc17 	ldw	r3,-16(fp)
  8070f4:	18c00117 	ldw	r3,4(r3)
  8070f8:	10c00035 	stwio	r3,0(r2)
  8070fc:	e0bff817 	ldw	r2,-32(fp)
  807100:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807104:	e0bffa17 	ldw	r2,-24(fp)
  807108:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80710c:	e0fffe17 	ldw	r3,-8(fp)
  807110:	e0bff417 	ldw	r2,-48(fp)
  807114:	1885c83a 	sub	r2,r3,r2
}
  807118:	e037883a 	mov	sp,fp
  80711c:	dfc00117 	ldw	ra,4(sp)
  807120:	df000017 	ldw	fp,0(sp)
  807124:	dec00204 	addi	sp,sp,8
  807128:	f800283a 	ret

0080712c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80712c:	defffe04 	addi	sp,sp,-8
  807130:	df000115 	stw	fp,4(sp)
  807134:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  807138:	e03fff15 	stw	zero,-4(fp)
  80713c:	00000506 	br	807154 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  807140:	e0bfff17 	ldw	r2,-4(fp)
  807144:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  807148:	e0bfff17 	ldw	r2,-4(fp)
  80714c:	10800804 	addi	r2,r2,32
  807150:	e0bfff15 	stw	r2,-4(fp)
  807154:	e0bfff17 	ldw	r2,-4(fp)
  807158:	10820030 	cmpltui	r2,r2,2048
  80715c:	103ff81e 	bne	r2,zero,807140 <__alt_mem_onchip_mem+0xff7ff140>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  807160:	0001883a 	nop
  807164:	e037883a 	mov	sp,fp
  807168:	df000017 	ldw	fp,0(sp)
  80716c:	dec00104 	addi	sp,sp,4
  807170:	f800283a 	ret

00807174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807174:	defffe04 	addi	sp,sp,-8
  807178:	dfc00115 	stw	ra,4(sp)
  80717c:	df000015 	stw	fp,0(sp)
  807180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  807184:	d0a00917 	ldw	r2,-32732(gp)
  807188:	10000326 	beq	r2,zero,807198 <alt_get_errno+0x24>
  80718c:	d0a00917 	ldw	r2,-32732(gp)
  807190:	103ee83a 	callr	r2
  807194:	00000106 	br	80719c <alt_get_errno+0x28>
  807198:	d0a72e04 	addi	r2,gp,-25416
}
  80719c:	e037883a 	mov	sp,fp
  8071a0:	dfc00117 	ldw	ra,4(sp)
  8071a4:	df000017 	ldw	fp,0(sp)
  8071a8:	dec00204 	addi	sp,sp,8
  8071ac:	f800283a 	ret

008071b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8071b0:	defffa04 	addi	sp,sp,-24
  8071b4:	dfc00515 	stw	ra,20(sp)
  8071b8:	df000415 	stw	fp,16(sp)
  8071bc:	df000404 	addi	fp,sp,16
  8071c0:	e13ffe15 	stw	r4,-8(fp)
  8071c4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8071c8:	e0bffe17 	ldw	r2,-8(fp)
  8071cc:	10000326 	beq	r2,zero,8071dc <alt_dev_llist_insert+0x2c>
  8071d0:	e0bffe17 	ldw	r2,-8(fp)
  8071d4:	10800217 	ldw	r2,8(r2)
  8071d8:	1000061e 	bne	r2,zero,8071f4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8071dc:	08071740 	call	807174 <alt_get_errno>
  8071e0:	1007883a 	mov	r3,r2
  8071e4:	00800584 	movi	r2,22
  8071e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8071ec:	00bffa84 	movi	r2,-22
  8071f0:	00001306 	br	807240 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8071f4:	e0bffe17 	ldw	r2,-8(fp)
  8071f8:	e0ffff17 	ldw	r3,-4(fp)
  8071fc:	e0fffc15 	stw	r3,-16(fp)
  807200:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807204:	e0bffd17 	ldw	r2,-12(fp)
  807208:	e0fffc17 	ldw	r3,-16(fp)
  80720c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  807210:	e0bffc17 	ldw	r2,-16(fp)
  807214:	10c00017 	ldw	r3,0(r2)
  807218:	e0bffd17 	ldw	r2,-12(fp)
  80721c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  807220:	e0bffc17 	ldw	r2,-16(fp)
  807224:	10800017 	ldw	r2,0(r2)
  807228:	e0fffd17 	ldw	r3,-12(fp)
  80722c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  807230:	e0bffc17 	ldw	r2,-16(fp)
  807234:	e0fffd17 	ldw	r3,-12(fp)
  807238:	10c00015 	stw	r3,0(r2)

  return 0;  
  80723c:	0005883a 	mov	r2,zero
}
  807240:	e037883a 	mov	sp,fp
  807244:	dfc00117 	ldw	ra,4(sp)
  807248:	df000017 	ldw	fp,0(sp)
  80724c:	dec00204 	addi	sp,sp,8
  807250:	f800283a 	ret

00807254 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  807254:	defffd04 	addi	sp,sp,-12
  807258:	dfc00215 	stw	ra,8(sp)
  80725c:	df000115 	stw	fp,4(sp)
  807260:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  807264:	00802074 	movhi	r2,129
  807268:	10a08804 	addi	r2,r2,-32224
  80726c:	e0bfff15 	stw	r2,-4(fp)
  807270:	00000606 	br	80728c <_do_ctors+0x38>
        (*ctor) (); 
  807274:	e0bfff17 	ldw	r2,-4(fp)
  807278:	10800017 	ldw	r2,0(r2)
  80727c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  807280:	e0bfff17 	ldw	r2,-4(fp)
  807284:	10bfff04 	addi	r2,r2,-4
  807288:	e0bfff15 	stw	r2,-4(fp)
  80728c:	e0ffff17 	ldw	r3,-4(fp)
  807290:	00802074 	movhi	r2,129
  807294:	10a08904 	addi	r2,r2,-32220
  807298:	18bff62e 	bgeu	r3,r2,807274 <__alt_mem_onchip_mem+0xff7ff274>
        (*ctor) (); 
}
  80729c:	0001883a 	nop
  8072a0:	e037883a 	mov	sp,fp
  8072a4:	dfc00117 	ldw	ra,4(sp)
  8072a8:	df000017 	ldw	fp,0(sp)
  8072ac:	dec00204 	addi	sp,sp,8
  8072b0:	f800283a 	ret

008072b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8072b4:	defffd04 	addi	sp,sp,-12
  8072b8:	dfc00215 	stw	ra,8(sp)
  8072bc:	df000115 	stw	fp,4(sp)
  8072c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8072c4:	00802074 	movhi	r2,129
  8072c8:	10a08804 	addi	r2,r2,-32224
  8072cc:	e0bfff15 	stw	r2,-4(fp)
  8072d0:	00000606 	br	8072ec <_do_dtors+0x38>
        (*dtor) (); 
  8072d4:	e0bfff17 	ldw	r2,-4(fp)
  8072d8:	10800017 	ldw	r2,0(r2)
  8072dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8072e0:	e0bfff17 	ldw	r2,-4(fp)
  8072e4:	10bfff04 	addi	r2,r2,-4
  8072e8:	e0bfff15 	stw	r2,-4(fp)
  8072ec:	e0ffff17 	ldw	r3,-4(fp)
  8072f0:	00802074 	movhi	r2,129
  8072f4:	10a08904 	addi	r2,r2,-32220
  8072f8:	18bff62e 	bgeu	r3,r2,8072d4 <__alt_mem_onchip_mem+0xff7ff2d4>
        (*dtor) (); 
}
  8072fc:	0001883a 	nop
  807300:	e037883a 	mov	sp,fp
  807304:	dfc00117 	ldw	ra,4(sp)
  807308:	df000017 	ldw	fp,0(sp)
  80730c:	dec00204 	addi	sp,sp,8
  807310:	f800283a 	ret

00807314 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  807314:	defffe04 	addi	sp,sp,-8
  807318:	dfc00115 	stw	ra,4(sp)
  80731c:	df000015 	stw	fp,0(sp)
  807320:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  807324:	01440004 	movi	r5,4096
  807328:	0009883a 	mov	r4,zero
  80732c:	0807d640 	call	807d64 <alt_icache_flush>
#endif
}
  807330:	0001883a 	nop
  807334:	e037883a 	mov	sp,fp
  807338:	dfc00117 	ldw	ra,4(sp)
  80733c:	df000017 	ldw	fp,0(sp)
  807340:	dec00204 	addi	sp,sp,8
  807344:	f800283a 	ret

00807348 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807348:	defff904 	addi	sp,sp,-28
  80734c:	dfc00615 	stw	ra,24(sp)
  807350:	df000515 	stw	fp,20(sp)
  807354:	df000504 	addi	fp,sp,20
  807358:	e13ffc15 	stw	r4,-16(fp)
  80735c:	e17ffd15 	stw	r5,-12(fp)
  807360:	e1bffe15 	stw	r6,-8(fp)
  807364:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  807368:	e0800217 	ldw	r2,8(fp)
  80736c:	d8800015 	stw	r2,0(sp)
  807370:	e1ffff17 	ldw	r7,-4(fp)
  807374:	e1bffe17 	ldw	r6,-8(fp)
  807378:	e17ffd17 	ldw	r5,-12(fp)
  80737c:	e13ffc17 	ldw	r4,-16(fp)
  807380:	08074f80 	call	8074f8 <alt_iic_isr_register>
}  
  807384:	e037883a 	mov	sp,fp
  807388:	dfc00117 	ldw	ra,4(sp)
  80738c:	df000017 	ldw	fp,0(sp)
  807390:	dec00204 	addi	sp,sp,8
  807394:	f800283a 	ret

00807398 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  807398:	defff904 	addi	sp,sp,-28
  80739c:	df000615 	stw	fp,24(sp)
  8073a0:	df000604 	addi	fp,sp,24
  8073a4:	e13ffe15 	stw	r4,-8(fp)
  8073a8:	e17fff15 	stw	r5,-4(fp)
  8073ac:	e0bfff17 	ldw	r2,-4(fp)
  8073b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8073b4:	0005303a 	rdctl	r2,status
  8073b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8073bc:	e0fffb17 	ldw	r3,-20(fp)
  8073c0:	00bfff84 	movi	r2,-2
  8073c4:	1884703a 	and	r2,r3,r2
  8073c8:	1001703a 	wrctl	status,r2
  
  return context;
  8073cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8073d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8073d4:	00c00044 	movi	r3,1
  8073d8:	e0bffa17 	ldw	r2,-24(fp)
  8073dc:	1884983a 	sll	r2,r3,r2
  8073e0:	1007883a 	mov	r3,r2
  8073e4:	d0a72f17 	ldw	r2,-25412(gp)
  8073e8:	1884b03a 	or	r2,r3,r2
  8073ec:	d0a72f15 	stw	r2,-25412(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8073f0:	d0a72f17 	ldw	r2,-25412(gp)
  8073f4:	100170fa 	wrctl	ienable,r2
  8073f8:	e0bffc17 	ldw	r2,-16(fp)
  8073fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807400:	e0bffd17 	ldw	r2,-12(fp)
  807404:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807408:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80740c:	0001883a 	nop
}
  807410:	e037883a 	mov	sp,fp
  807414:	df000017 	ldw	fp,0(sp)
  807418:	dec00104 	addi	sp,sp,4
  80741c:	f800283a 	ret

00807420 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  807420:	defff904 	addi	sp,sp,-28
  807424:	df000615 	stw	fp,24(sp)
  807428:	df000604 	addi	fp,sp,24
  80742c:	e13ffe15 	stw	r4,-8(fp)
  807430:	e17fff15 	stw	r5,-4(fp)
  807434:	e0bfff17 	ldw	r2,-4(fp)
  807438:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80743c:	0005303a 	rdctl	r2,status
  807440:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807444:	e0fffb17 	ldw	r3,-20(fp)
  807448:	00bfff84 	movi	r2,-2
  80744c:	1884703a 	and	r2,r3,r2
  807450:	1001703a 	wrctl	status,r2
  
  return context;
  807454:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807458:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80745c:	00c00044 	movi	r3,1
  807460:	e0bffa17 	ldw	r2,-24(fp)
  807464:	1884983a 	sll	r2,r3,r2
  807468:	0084303a 	nor	r2,zero,r2
  80746c:	1007883a 	mov	r3,r2
  807470:	d0a72f17 	ldw	r2,-25412(gp)
  807474:	1884703a 	and	r2,r3,r2
  807478:	d0a72f15 	stw	r2,-25412(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80747c:	d0a72f17 	ldw	r2,-25412(gp)
  807480:	100170fa 	wrctl	ienable,r2
  807484:	e0bffc17 	ldw	r2,-16(fp)
  807488:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80748c:	e0bffd17 	ldw	r2,-12(fp)
  807490:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807494:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  807498:	0001883a 	nop
}
  80749c:	e037883a 	mov	sp,fp
  8074a0:	df000017 	ldw	fp,0(sp)
  8074a4:	dec00104 	addi	sp,sp,4
  8074a8:	f800283a 	ret

008074ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8074ac:	defffc04 	addi	sp,sp,-16
  8074b0:	df000315 	stw	fp,12(sp)
  8074b4:	df000304 	addi	fp,sp,12
  8074b8:	e13ffe15 	stw	r4,-8(fp)
  8074bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8074c0:	000530fa 	rdctl	r2,ienable
  8074c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8074c8:	00c00044 	movi	r3,1
  8074cc:	e0bfff17 	ldw	r2,-4(fp)
  8074d0:	1884983a 	sll	r2,r3,r2
  8074d4:	1007883a 	mov	r3,r2
  8074d8:	e0bffd17 	ldw	r2,-12(fp)
  8074dc:	1884703a 	and	r2,r3,r2
  8074e0:	1004c03a 	cmpne	r2,r2,zero
  8074e4:	10803fcc 	andi	r2,r2,255
}
  8074e8:	e037883a 	mov	sp,fp
  8074ec:	df000017 	ldw	fp,0(sp)
  8074f0:	dec00104 	addi	sp,sp,4
  8074f4:	f800283a 	ret

008074f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8074f8:	defff504 	addi	sp,sp,-44
  8074fc:	dfc00a15 	stw	ra,40(sp)
  807500:	df000915 	stw	fp,36(sp)
  807504:	df000904 	addi	fp,sp,36
  807508:	e13ffc15 	stw	r4,-16(fp)
  80750c:	e17ffd15 	stw	r5,-12(fp)
  807510:	e1bffe15 	stw	r6,-8(fp)
  807514:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  807518:	00bffa84 	movi	r2,-22
  80751c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  807520:	e0bffd17 	ldw	r2,-12(fp)
  807524:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807528:	e0bff817 	ldw	r2,-32(fp)
  80752c:	10800808 	cmpgei	r2,r2,32
  807530:	1000271e 	bne	r2,zero,8075d0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807534:	0005303a 	rdctl	r2,status
  807538:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80753c:	e0fffb17 	ldw	r3,-20(fp)
  807540:	00bfff84 	movi	r2,-2
  807544:	1884703a 	and	r2,r3,r2
  807548:	1001703a 	wrctl	status,r2
  
  return context;
  80754c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  807550:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  807554:	00802074 	movhi	r2,129
  807558:	10afcd04 	addi	r2,r2,-16588
  80755c:	e0fff817 	ldw	r3,-32(fp)
  807560:	180690fa 	slli	r3,r3,3
  807564:	10c5883a 	add	r2,r2,r3
  807568:	e0fffe17 	ldw	r3,-8(fp)
  80756c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  807570:	00802074 	movhi	r2,129
  807574:	10afcd04 	addi	r2,r2,-16588
  807578:	e0fff817 	ldw	r3,-32(fp)
  80757c:	180690fa 	slli	r3,r3,3
  807580:	10c5883a 	add	r2,r2,r3
  807584:	10800104 	addi	r2,r2,4
  807588:	e0ffff17 	ldw	r3,-4(fp)
  80758c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  807590:	e0bffe17 	ldw	r2,-8(fp)
  807594:	10000526 	beq	r2,zero,8075ac <alt_iic_isr_register+0xb4>
  807598:	e0bff817 	ldw	r2,-32(fp)
  80759c:	100b883a 	mov	r5,r2
  8075a0:	e13ffc17 	ldw	r4,-16(fp)
  8075a4:	08073980 	call	807398 <alt_ic_irq_enable>
  8075a8:	00000406 	br	8075bc <alt_iic_isr_register+0xc4>
  8075ac:	e0bff817 	ldw	r2,-32(fp)
  8075b0:	100b883a 	mov	r5,r2
  8075b4:	e13ffc17 	ldw	r4,-16(fp)
  8075b8:	08074200 	call	807420 <alt_ic_irq_disable>
  8075bc:	e0bff715 	stw	r2,-36(fp)
  8075c0:	e0bffa17 	ldw	r2,-24(fp)
  8075c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8075c8:	e0bff917 	ldw	r2,-28(fp)
  8075cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8075d0:	e0bff717 	ldw	r2,-36(fp)
}
  8075d4:	e037883a 	mov	sp,fp
  8075d8:	dfc00117 	ldw	ra,4(sp)
  8075dc:	df000017 	ldw	fp,0(sp)
  8075e0:	dec00204 	addi	sp,sp,8
  8075e4:	f800283a 	ret

008075e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8075e8:	defff904 	addi	sp,sp,-28
  8075ec:	dfc00615 	stw	ra,24(sp)
  8075f0:	df000515 	stw	fp,20(sp)
  8075f4:	df000504 	addi	fp,sp,20
  8075f8:	e13ffc15 	stw	r4,-16(fp)
  8075fc:	e17ffd15 	stw	r5,-12(fp)
  807600:	e1bffe15 	stw	r6,-8(fp)
  807604:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  807608:	e1bfff17 	ldw	r6,-4(fp)
  80760c:	e17ffe17 	ldw	r5,-8(fp)
  807610:	e13ffd17 	ldw	r4,-12(fp)
  807614:	08078280 	call	807828 <open>
  807618:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80761c:	e0bffb17 	ldw	r2,-20(fp)
  807620:	10001c16 	blt	r2,zero,807694 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  807624:	00802074 	movhi	r2,129
  807628:	10a39c04 	addi	r2,r2,-29072
  80762c:	e0fffb17 	ldw	r3,-20(fp)
  807630:	18c00324 	muli	r3,r3,12
  807634:	10c5883a 	add	r2,r2,r3
  807638:	10c00017 	ldw	r3,0(r2)
  80763c:	e0bffc17 	ldw	r2,-16(fp)
  807640:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  807644:	00802074 	movhi	r2,129
  807648:	10a39c04 	addi	r2,r2,-29072
  80764c:	e0fffb17 	ldw	r3,-20(fp)
  807650:	18c00324 	muli	r3,r3,12
  807654:	10c5883a 	add	r2,r2,r3
  807658:	10800104 	addi	r2,r2,4
  80765c:	10c00017 	ldw	r3,0(r2)
  807660:	e0bffc17 	ldw	r2,-16(fp)
  807664:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807668:	00802074 	movhi	r2,129
  80766c:	10a39c04 	addi	r2,r2,-29072
  807670:	e0fffb17 	ldw	r3,-20(fp)
  807674:	18c00324 	muli	r3,r3,12
  807678:	10c5883a 	add	r2,r2,r3
  80767c:	10800204 	addi	r2,r2,8
  807680:	10c00017 	ldw	r3,0(r2)
  807684:	e0bffc17 	ldw	r2,-16(fp)
  807688:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80768c:	e13ffb17 	ldw	r4,-20(fp)
  807690:	080492c0 	call	80492c <alt_release_fd>
  }
} 
  807694:	0001883a 	nop
  807698:	e037883a 	mov	sp,fp
  80769c:	dfc00117 	ldw	ra,4(sp)
  8076a0:	df000017 	ldw	fp,0(sp)
  8076a4:	dec00204 	addi	sp,sp,8
  8076a8:	f800283a 	ret

008076ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8076ac:	defffb04 	addi	sp,sp,-20
  8076b0:	dfc00415 	stw	ra,16(sp)
  8076b4:	df000315 	stw	fp,12(sp)
  8076b8:	df000304 	addi	fp,sp,12
  8076bc:	e13ffd15 	stw	r4,-12(fp)
  8076c0:	e17ffe15 	stw	r5,-8(fp)
  8076c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8076c8:	01c07fc4 	movi	r7,511
  8076cc:	01800044 	movi	r6,1
  8076d0:	e17ffd17 	ldw	r5,-12(fp)
  8076d4:	01002074 	movhi	r4,129
  8076d8:	21239f04 	addi	r4,r4,-29060
  8076dc:	08075e80 	call	8075e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8076e0:	01c07fc4 	movi	r7,511
  8076e4:	000d883a 	mov	r6,zero
  8076e8:	e17ffe17 	ldw	r5,-8(fp)
  8076ec:	01002074 	movhi	r4,129
  8076f0:	21239c04 	addi	r4,r4,-29072
  8076f4:	08075e80 	call	8075e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8076f8:	01c07fc4 	movi	r7,511
  8076fc:	01800044 	movi	r6,1
  807700:	e17fff17 	ldw	r5,-4(fp)
  807704:	01002074 	movhi	r4,129
  807708:	2123a204 	addi	r4,r4,-29048
  80770c:	08075e80 	call	8075e8 <alt_open_fd>
}  
  807710:	0001883a 	nop
  807714:	e037883a 	mov	sp,fp
  807718:	dfc00117 	ldw	ra,4(sp)
  80771c:	df000017 	ldw	fp,0(sp)
  807720:	dec00204 	addi	sp,sp,8
  807724:	f800283a 	ret

00807728 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807728:	defffe04 	addi	sp,sp,-8
  80772c:	dfc00115 	stw	ra,4(sp)
  807730:	df000015 	stw	fp,0(sp)
  807734:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  807738:	d0a00917 	ldw	r2,-32732(gp)
  80773c:	10000326 	beq	r2,zero,80774c <alt_get_errno+0x24>
  807740:	d0a00917 	ldw	r2,-32732(gp)
  807744:	103ee83a 	callr	r2
  807748:	00000106 	br	807750 <alt_get_errno+0x28>
  80774c:	d0a72e04 	addi	r2,gp,-25416
}
  807750:	e037883a 	mov	sp,fp
  807754:	dfc00117 	ldw	ra,4(sp)
  807758:	df000017 	ldw	fp,0(sp)
  80775c:	dec00204 	addi	sp,sp,8
  807760:	f800283a 	ret

00807764 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  807764:	defffd04 	addi	sp,sp,-12
  807768:	df000215 	stw	fp,8(sp)
  80776c:	df000204 	addi	fp,sp,8
  807770:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  807774:	e0bfff17 	ldw	r2,-4(fp)
  807778:	10800217 	ldw	r2,8(r2)
  80777c:	10d00034 	orhi	r3,r2,16384
  807780:	e0bfff17 	ldw	r2,-4(fp)
  807784:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  807788:	e03ffe15 	stw	zero,-8(fp)
  80778c:	00001d06 	br	807804 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  807790:	00802074 	movhi	r2,129
  807794:	10a39c04 	addi	r2,r2,-29072
  807798:	e0fffe17 	ldw	r3,-8(fp)
  80779c:	18c00324 	muli	r3,r3,12
  8077a0:	10c5883a 	add	r2,r2,r3
  8077a4:	10c00017 	ldw	r3,0(r2)
  8077a8:	e0bfff17 	ldw	r2,-4(fp)
  8077ac:	10800017 	ldw	r2,0(r2)
  8077b0:	1880111e 	bne	r3,r2,8077f8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8077b4:	00802074 	movhi	r2,129
  8077b8:	10a39c04 	addi	r2,r2,-29072
  8077bc:	e0fffe17 	ldw	r3,-8(fp)
  8077c0:	18c00324 	muli	r3,r3,12
  8077c4:	10c5883a 	add	r2,r2,r3
  8077c8:	10800204 	addi	r2,r2,8
  8077cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8077d0:	1000090e 	bge	r2,zero,8077f8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8077d4:	e0bffe17 	ldw	r2,-8(fp)
  8077d8:	10c00324 	muli	r3,r2,12
  8077dc:	00802074 	movhi	r2,129
  8077e0:	10a39c04 	addi	r2,r2,-29072
  8077e4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8077e8:	e0bfff17 	ldw	r2,-4(fp)
  8077ec:	18800226 	beq	r3,r2,8077f8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8077f0:	00bffcc4 	movi	r2,-13
  8077f4:	00000806 	br	807818 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8077f8:	e0bffe17 	ldw	r2,-8(fp)
  8077fc:	10800044 	addi	r2,r2,1
  807800:	e0bffe15 	stw	r2,-8(fp)
  807804:	d0a00817 	ldw	r2,-32736(gp)
  807808:	1007883a 	mov	r3,r2
  80780c:	e0bffe17 	ldw	r2,-8(fp)
  807810:	18bfdf2e 	bgeu	r3,r2,807790 <__alt_mem_onchip_mem+0xff7ff790>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  807814:	0005883a 	mov	r2,zero
}
  807818:	e037883a 	mov	sp,fp
  80781c:	df000017 	ldw	fp,0(sp)
  807820:	dec00104 	addi	sp,sp,4
  807824:	f800283a 	ret

00807828 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  807828:	defff604 	addi	sp,sp,-40
  80782c:	dfc00915 	stw	ra,36(sp)
  807830:	df000815 	stw	fp,32(sp)
  807834:	df000804 	addi	fp,sp,32
  807838:	e13ffd15 	stw	r4,-12(fp)
  80783c:	e17ffe15 	stw	r5,-8(fp)
  807840:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  807844:	00bfffc4 	movi	r2,-1
  807848:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80784c:	00bffb44 	movi	r2,-19
  807850:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  807854:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  807858:	d1600604 	addi	r5,gp,-32744
  80785c:	e13ffd17 	ldw	r4,-12(fp)
  807860:	0807b280 	call	807b28 <alt_find_dev>
  807864:	e0bff815 	stw	r2,-32(fp)
  807868:	e0bff817 	ldw	r2,-32(fp)
  80786c:	1000051e 	bne	r2,zero,807884 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  807870:	e13ffd17 	ldw	r4,-12(fp)
  807874:	0807bb80 	call	807bb8 <alt_find_file>
  807878:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80787c:	00800044 	movi	r2,1
  807880:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  807884:	e0bff817 	ldw	r2,-32(fp)
  807888:	10002926 	beq	r2,zero,807930 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80788c:	e13ff817 	ldw	r4,-32(fp)
  807890:	0807cc00 	call	807cc0 <alt_get_fd>
  807894:	e0bff915 	stw	r2,-28(fp)
  807898:	e0bff917 	ldw	r2,-28(fp)
  80789c:	1000030e 	bge	r2,zero,8078ac <open+0x84>
    {
      status = index;
  8078a0:	e0bff917 	ldw	r2,-28(fp)
  8078a4:	e0bffa15 	stw	r2,-24(fp)
  8078a8:	00002306 	br	807938 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  8078ac:	e0bff917 	ldw	r2,-28(fp)
  8078b0:	10c00324 	muli	r3,r2,12
  8078b4:	00802074 	movhi	r2,129
  8078b8:	10a39c04 	addi	r2,r2,-29072
  8078bc:	1885883a 	add	r2,r3,r2
  8078c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8078c4:	e0fffe17 	ldw	r3,-8(fp)
  8078c8:	00900034 	movhi	r2,16384
  8078cc:	10bfffc4 	addi	r2,r2,-1
  8078d0:	1886703a 	and	r3,r3,r2
  8078d4:	e0bffc17 	ldw	r2,-16(fp)
  8078d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8078dc:	e0bffb17 	ldw	r2,-20(fp)
  8078e0:	1000051e 	bne	r2,zero,8078f8 <open+0xd0>
  8078e4:	e13ffc17 	ldw	r4,-16(fp)
  8078e8:	08077640 	call	807764 <alt_file_locked>
  8078ec:	e0bffa15 	stw	r2,-24(fp)
  8078f0:	e0bffa17 	ldw	r2,-24(fp)
  8078f4:	10001016 	blt	r2,zero,807938 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8078f8:	e0bff817 	ldw	r2,-32(fp)
  8078fc:	10800317 	ldw	r2,12(r2)
  807900:	10000826 	beq	r2,zero,807924 <open+0xfc>
  807904:	e0bff817 	ldw	r2,-32(fp)
  807908:	10800317 	ldw	r2,12(r2)
  80790c:	e1ffff17 	ldw	r7,-4(fp)
  807910:	e1bffe17 	ldw	r6,-8(fp)
  807914:	e17ffd17 	ldw	r5,-12(fp)
  807918:	e13ffc17 	ldw	r4,-16(fp)
  80791c:	103ee83a 	callr	r2
  807920:	00000106 	br	807928 <open+0x100>
  807924:	0005883a 	mov	r2,zero
  807928:	e0bffa15 	stw	r2,-24(fp)
  80792c:	00000206 	br	807938 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  807930:	00bffb44 	movi	r2,-19
  807934:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  807938:	e0bffa17 	ldw	r2,-24(fp)
  80793c:	1000090e 	bge	r2,zero,807964 <open+0x13c>
  {
    alt_release_fd (index);  
  807940:	e13ff917 	ldw	r4,-28(fp)
  807944:	080492c0 	call	80492c <alt_release_fd>
    ALT_ERRNO = -status;
  807948:	08077280 	call	807728 <alt_get_errno>
  80794c:	1007883a 	mov	r3,r2
  807950:	e0bffa17 	ldw	r2,-24(fp)
  807954:	0085c83a 	sub	r2,zero,r2
  807958:	18800015 	stw	r2,0(r3)
    return -1;
  80795c:	00bfffc4 	movi	r2,-1
  807960:	00000106 	br	807968 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  807964:	e0bff917 	ldw	r2,-28(fp)
}
  807968:	e037883a 	mov	sp,fp
  80796c:	dfc00117 	ldw	ra,4(sp)
  807970:	df000017 	ldw	fp,0(sp)
  807974:	dec00204 	addi	sp,sp,8
  807978:	f800283a 	ret

0080797c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80797c:	defffd04 	addi	sp,sp,-12
  807980:	dfc00215 	stw	ra,8(sp)
  807984:	df000115 	stw	fp,4(sp)
  807988:	df000104 	addi	fp,sp,4
  80798c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  807990:	e13fff17 	ldw	r4,-4(fp)
  807994:	08079d00 	call	8079d0 <alt_busy_sleep>
}
  807998:	e037883a 	mov	sp,fp
  80799c:	dfc00117 	ldw	ra,4(sp)
  8079a0:	df000017 	ldw	fp,0(sp)
  8079a4:	dec00204 	addi	sp,sp,8
  8079a8:	f800283a 	ret

008079ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8079ac:	deffff04 	addi	sp,sp,-4
  8079b0:	df000015 	stw	fp,0(sp)
  8079b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8079b8:	000170fa 	wrctl	ienable,zero
}
  8079bc:	0001883a 	nop
  8079c0:	e037883a 	mov	sp,fp
  8079c4:	df000017 	ldw	fp,0(sp)
  8079c8:	dec00104 	addi	sp,sp,4
  8079cc:	f800283a 	ret

008079d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8079d0:	defffa04 	addi	sp,sp,-24
  8079d4:	dfc00515 	stw	ra,20(sp)
  8079d8:	df000415 	stw	fp,16(sp)
  8079dc:	df000404 	addi	fp,sp,16
  8079e0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8079e4:	008000c4 	movi	r2,3
  8079e8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8079ec:	e0fffd17 	ldw	r3,-12(fp)
  8079f0:	008003f4 	movhi	r2,15
  8079f4:	10909004 	addi	r2,r2,16960
  8079f8:	1885383a 	mul	r2,r3,r2
  8079fc:	100b883a 	mov	r5,r2
  807a00:	0100bef4 	movhi	r4,763
  807a04:	213c2004 	addi	r4,r4,-3968
  807a08:	0803ec80 	call	803ec8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  807a0c:	100b883a 	mov	r5,r2
  807a10:	01200034 	movhi	r4,32768
  807a14:	213fffc4 	addi	r4,r4,-1
  807a18:	0803ec80 	call	803ec8 <__udivsi3>
  807a1c:	100b883a 	mov	r5,r2
  807a20:	e13fff17 	ldw	r4,-4(fp)
  807a24:	0803ec80 	call	803ec8 <__udivsi3>
  807a28:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  807a2c:	e0bffe17 	ldw	r2,-8(fp)
  807a30:	10002a26 	beq	r2,zero,807adc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  807a34:	e03ffc15 	stw	zero,-16(fp)
  807a38:	00001706 	br	807a98 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  807a3c:	00a00034 	movhi	r2,32768
  807a40:	10bfffc4 	addi	r2,r2,-1
  807a44:	10bfffc4 	addi	r2,r2,-1
  807a48:	103ffe1e 	bne	r2,zero,807a44 <__alt_mem_onchip_mem+0xff7ffa44>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  807a4c:	e0fffd17 	ldw	r3,-12(fp)
  807a50:	008003f4 	movhi	r2,15
  807a54:	10909004 	addi	r2,r2,16960
  807a58:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  807a5c:	100b883a 	mov	r5,r2
  807a60:	0100bef4 	movhi	r4,763
  807a64:	213c2004 	addi	r4,r4,-3968
  807a68:	0803ec80 	call	803ec8 <__udivsi3>
  807a6c:	100b883a 	mov	r5,r2
  807a70:	01200034 	movhi	r4,32768
  807a74:	213fffc4 	addi	r4,r4,-1
  807a78:	0803ec80 	call	803ec8 <__udivsi3>
  807a7c:	1007883a 	mov	r3,r2
  807a80:	e0bfff17 	ldw	r2,-4(fp)
  807a84:	10c5c83a 	sub	r2,r2,r3
  807a88:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  807a8c:	e0bffc17 	ldw	r2,-16(fp)
  807a90:	10800044 	addi	r2,r2,1
  807a94:	e0bffc15 	stw	r2,-16(fp)
  807a98:	e0fffc17 	ldw	r3,-16(fp)
  807a9c:	e0bffe17 	ldw	r2,-8(fp)
  807aa0:	18bfe616 	blt	r3,r2,807a3c <__alt_mem_onchip_mem+0xff7ffa3c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  807aa4:	e0fffd17 	ldw	r3,-12(fp)
  807aa8:	008003f4 	movhi	r2,15
  807aac:	10909004 	addi	r2,r2,16960
  807ab0:	1885383a 	mul	r2,r3,r2
  807ab4:	100b883a 	mov	r5,r2
  807ab8:	0100bef4 	movhi	r4,763
  807abc:	213c2004 	addi	r4,r4,-3968
  807ac0:	0803ec80 	call	803ec8 <__udivsi3>
  807ac4:	1007883a 	mov	r3,r2
  807ac8:	e0bfff17 	ldw	r2,-4(fp)
  807acc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  807ad0:	10bfffc4 	addi	r2,r2,-1
  807ad4:	103ffe1e 	bne	r2,zero,807ad0 <__alt_mem_onchip_mem+0xff7ffad0>
  807ad8:	00000d06 	br	807b10 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  807adc:	e0fffd17 	ldw	r3,-12(fp)
  807ae0:	008003f4 	movhi	r2,15
  807ae4:	10909004 	addi	r2,r2,16960
  807ae8:	1885383a 	mul	r2,r3,r2
  807aec:	100b883a 	mov	r5,r2
  807af0:	0100bef4 	movhi	r4,763
  807af4:	213c2004 	addi	r4,r4,-3968
  807af8:	0803ec80 	call	803ec8 <__udivsi3>
  807afc:	1007883a 	mov	r3,r2
  807b00:	e0bfff17 	ldw	r2,-4(fp)
  807b04:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  807b08:	10bfffc4 	addi	r2,r2,-1
  807b0c:	00bffe16 	blt	zero,r2,807b08 <__alt_mem_onchip_mem+0xff7ffb08>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  807b10:	0005883a 	mov	r2,zero
}
  807b14:	e037883a 	mov	sp,fp
  807b18:	dfc00117 	ldw	ra,4(sp)
  807b1c:	df000017 	ldw	fp,0(sp)
  807b20:	dec00204 	addi	sp,sp,8
  807b24:	f800283a 	ret

00807b28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  807b28:	defffa04 	addi	sp,sp,-24
  807b2c:	dfc00515 	stw	ra,20(sp)
  807b30:	df000415 	stw	fp,16(sp)
  807b34:	df000404 	addi	fp,sp,16
  807b38:	e13ffe15 	stw	r4,-8(fp)
  807b3c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  807b40:	e0bfff17 	ldw	r2,-4(fp)
  807b44:	10800017 	ldw	r2,0(r2)
  807b48:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  807b4c:	e13ffe17 	ldw	r4,-8(fp)
  807b50:	0800fd00 	call	800fd0 <strlen>
  807b54:	10800044 	addi	r2,r2,1
  807b58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807b5c:	00000d06 	br	807b94 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  807b60:	e0bffc17 	ldw	r2,-16(fp)
  807b64:	10800217 	ldw	r2,8(r2)
  807b68:	e0fffd17 	ldw	r3,-12(fp)
  807b6c:	180d883a 	mov	r6,r3
  807b70:	e17ffe17 	ldw	r5,-8(fp)
  807b74:	1009883a 	mov	r4,r2
  807b78:	0807edc0 	call	807edc <memcmp>
  807b7c:	1000021e 	bne	r2,zero,807b88 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  807b80:	e0bffc17 	ldw	r2,-16(fp)
  807b84:	00000706 	br	807ba4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  807b88:	e0bffc17 	ldw	r2,-16(fp)
  807b8c:	10800017 	ldw	r2,0(r2)
  807b90:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807b94:	e0fffc17 	ldw	r3,-16(fp)
  807b98:	e0bfff17 	ldw	r2,-4(fp)
  807b9c:	18bff01e 	bne	r3,r2,807b60 <__alt_mem_onchip_mem+0xff7ffb60>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  807ba0:	0005883a 	mov	r2,zero
}
  807ba4:	e037883a 	mov	sp,fp
  807ba8:	dfc00117 	ldw	ra,4(sp)
  807bac:	df000017 	ldw	fp,0(sp)
  807bb0:	dec00204 	addi	sp,sp,8
  807bb4:	f800283a 	ret

00807bb8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  807bb8:	defffb04 	addi	sp,sp,-20
  807bbc:	dfc00415 	stw	ra,16(sp)
  807bc0:	df000315 	stw	fp,12(sp)
  807bc4:	df000304 	addi	fp,sp,12
  807bc8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  807bcc:	d0a00417 	ldw	r2,-32752(gp)
  807bd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807bd4:	00003106 	br	807c9c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  807bd8:	e0bffd17 	ldw	r2,-12(fp)
  807bdc:	10800217 	ldw	r2,8(r2)
  807be0:	1009883a 	mov	r4,r2
  807be4:	0800fd00 	call	800fd0 <strlen>
  807be8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  807bec:	e0bffd17 	ldw	r2,-12(fp)
  807bf0:	10c00217 	ldw	r3,8(r2)
  807bf4:	e0bffe17 	ldw	r2,-8(fp)
  807bf8:	10bfffc4 	addi	r2,r2,-1
  807bfc:	1885883a 	add	r2,r3,r2
  807c00:	10800003 	ldbu	r2,0(r2)
  807c04:	10803fcc 	andi	r2,r2,255
  807c08:	1080201c 	xori	r2,r2,128
  807c0c:	10bfe004 	addi	r2,r2,-128
  807c10:	10800bd8 	cmpnei	r2,r2,47
  807c14:	1000031e 	bne	r2,zero,807c24 <alt_find_file+0x6c>
    {
      len -= 1;
  807c18:	e0bffe17 	ldw	r2,-8(fp)
  807c1c:	10bfffc4 	addi	r2,r2,-1
  807c20:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807c24:	e0bffe17 	ldw	r2,-8(fp)
  807c28:	e0ffff17 	ldw	r3,-4(fp)
  807c2c:	1885883a 	add	r2,r3,r2
  807c30:	10800003 	ldbu	r2,0(r2)
  807c34:	10803fcc 	andi	r2,r2,255
  807c38:	1080201c 	xori	r2,r2,128
  807c3c:	10bfe004 	addi	r2,r2,-128
  807c40:	10800be0 	cmpeqi	r2,r2,47
  807c44:	1000081e 	bne	r2,zero,807c68 <alt_find_file+0xb0>
  807c48:	e0bffe17 	ldw	r2,-8(fp)
  807c4c:	e0ffff17 	ldw	r3,-4(fp)
  807c50:	1885883a 	add	r2,r3,r2
  807c54:	10800003 	ldbu	r2,0(r2)
  807c58:	10803fcc 	andi	r2,r2,255
  807c5c:	1080201c 	xori	r2,r2,128
  807c60:	10bfe004 	addi	r2,r2,-128
  807c64:	10000a1e 	bne	r2,zero,807c90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  807c68:	e0bffd17 	ldw	r2,-12(fp)
  807c6c:	10800217 	ldw	r2,8(r2)
  807c70:	e0fffe17 	ldw	r3,-8(fp)
  807c74:	180d883a 	mov	r6,r3
  807c78:	e17fff17 	ldw	r5,-4(fp)
  807c7c:	1009883a 	mov	r4,r2
  807c80:	0807edc0 	call	807edc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807c84:	1000021e 	bne	r2,zero,807c90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  807c88:	e0bffd17 	ldw	r2,-12(fp)
  807c8c:	00000706 	br	807cac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  807c90:	e0bffd17 	ldw	r2,-12(fp)
  807c94:	10800017 	ldw	r2,0(r2)
  807c98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807c9c:	e0fffd17 	ldw	r3,-12(fp)
  807ca0:	d0a00404 	addi	r2,gp,-32752
  807ca4:	18bfcc1e 	bne	r3,r2,807bd8 <__alt_mem_onchip_mem+0xff7ffbd8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  807ca8:	0005883a 	mov	r2,zero
}
  807cac:	e037883a 	mov	sp,fp
  807cb0:	dfc00117 	ldw	ra,4(sp)
  807cb4:	df000017 	ldw	fp,0(sp)
  807cb8:	dec00204 	addi	sp,sp,8
  807cbc:	f800283a 	ret

00807cc0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  807cc0:	defffc04 	addi	sp,sp,-16
  807cc4:	df000315 	stw	fp,12(sp)
  807cc8:	df000304 	addi	fp,sp,12
  807ccc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  807cd0:	00bffa04 	movi	r2,-24
  807cd4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807cd8:	e03ffd15 	stw	zero,-12(fp)
  807cdc:	00001906 	br	807d44 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  807ce0:	00802074 	movhi	r2,129
  807ce4:	10a39c04 	addi	r2,r2,-29072
  807ce8:	e0fffd17 	ldw	r3,-12(fp)
  807cec:	18c00324 	muli	r3,r3,12
  807cf0:	10c5883a 	add	r2,r2,r3
  807cf4:	10800017 	ldw	r2,0(r2)
  807cf8:	10000f1e 	bne	r2,zero,807d38 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  807cfc:	00802074 	movhi	r2,129
  807d00:	10a39c04 	addi	r2,r2,-29072
  807d04:	e0fffd17 	ldw	r3,-12(fp)
  807d08:	18c00324 	muli	r3,r3,12
  807d0c:	10c5883a 	add	r2,r2,r3
  807d10:	e0ffff17 	ldw	r3,-4(fp)
  807d14:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  807d18:	d0e00817 	ldw	r3,-32736(gp)
  807d1c:	e0bffd17 	ldw	r2,-12(fp)
  807d20:	1880020e 	bge	r3,r2,807d2c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  807d24:	e0bffd17 	ldw	r2,-12(fp)
  807d28:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  807d2c:	e0bffd17 	ldw	r2,-12(fp)
  807d30:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  807d34:	00000606 	br	807d50 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807d38:	e0bffd17 	ldw	r2,-12(fp)
  807d3c:	10800044 	addi	r2,r2,1
  807d40:	e0bffd15 	stw	r2,-12(fp)
  807d44:	e0bffd17 	ldw	r2,-12(fp)
  807d48:	10800810 	cmplti	r2,r2,32
  807d4c:	103fe41e 	bne	r2,zero,807ce0 <__alt_mem_onchip_mem+0xff7ffce0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  807d50:	e0bffe17 	ldw	r2,-8(fp)
}
  807d54:	e037883a 	mov	sp,fp
  807d58:	df000017 	ldw	fp,0(sp)
  807d5c:	dec00104 	addi	sp,sp,4
  807d60:	f800283a 	ret

00807d64 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  807d64:	defffb04 	addi	sp,sp,-20
  807d68:	df000415 	stw	fp,16(sp)
  807d6c:	df000404 	addi	fp,sp,16
  807d70:	e13ffe15 	stw	r4,-8(fp)
  807d74:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  807d78:	e0bfff17 	ldw	r2,-4(fp)
  807d7c:	10840070 	cmpltui	r2,r2,4097
  807d80:	1000021e 	bne	r2,zero,807d8c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  807d84:	00840004 	movi	r2,4096
  807d88:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  807d8c:	e0fffe17 	ldw	r3,-8(fp)
  807d90:	e0bfff17 	ldw	r2,-4(fp)
  807d94:	1885883a 	add	r2,r3,r2
  807d98:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  807d9c:	e0bffe17 	ldw	r2,-8(fp)
  807da0:	e0bffc15 	stw	r2,-16(fp)
  807da4:	00000506 	br	807dbc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  807da8:	e0bffc17 	ldw	r2,-16(fp)
  807dac:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  807db0:	e0bffc17 	ldw	r2,-16(fp)
  807db4:	10800804 	addi	r2,r2,32
  807db8:	e0bffc15 	stw	r2,-16(fp)
  807dbc:	e0fffc17 	ldw	r3,-16(fp)
  807dc0:	e0bffd17 	ldw	r2,-12(fp)
  807dc4:	18bff836 	bltu	r3,r2,807da8 <__alt_mem_onchip_mem+0xff7ffda8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  807dc8:	e0bffe17 	ldw	r2,-8(fp)
  807dcc:	108007cc 	andi	r2,r2,31
  807dd0:	10000226 	beq	r2,zero,807ddc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  807dd4:	e0bffc17 	ldw	r2,-16(fp)
  807dd8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  807ddc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  807de0:	0001883a 	nop
  807de4:	e037883a 	mov	sp,fp
  807de8:	df000017 	ldw	fp,0(sp)
  807dec:	dec00104 	addi	sp,sp,4
  807df0:	f800283a 	ret

00807df4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  807df4:	defffe04 	addi	sp,sp,-8
  807df8:	df000115 	stw	fp,4(sp)
  807dfc:	df000104 	addi	fp,sp,4
  807e00:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  807e04:	e0bfff17 	ldw	r2,-4(fp)
  807e08:	10bffe84 	addi	r2,r2,-6
  807e0c:	10c00428 	cmpgeui	r3,r2,16
  807e10:	18001a1e 	bne	r3,zero,807e7c <alt_exception_cause_generated_bad_addr+0x88>
  807e14:	100690ba 	slli	r3,r2,2
  807e18:	00802034 	movhi	r2,128
  807e1c:	109f8b04 	addi	r2,r2,32300
  807e20:	1885883a 	add	r2,r3,r2
  807e24:	10800017 	ldw	r2,0(r2)
  807e28:	1000683a 	jmp	r2
  807e2c:	00807e6c 	andhi	r2,zero,505
  807e30:	00807e6c 	andhi	r2,zero,505
  807e34:	00807e7c 	xorhi	r2,zero,505
  807e38:	00807e7c 	xorhi	r2,zero,505
  807e3c:	00807e7c 	xorhi	r2,zero,505
  807e40:	00807e6c 	andhi	r2,zero,505
  807e44:	00807e74 	movhi	r2,505
  807e48:	00807e7c 	xorhi	r2,zero,505
  807e4c:	00807e6c 	andhi	r2,zero,505
  807e50:	00807e6c 	andhi	r2,zero,505
  807e54:	00807e7c 	xorhi	r2,zero,505
  807e58:	00807e6c 	andhi	r2,zero,505
  807e5c:	00807e74 	movhi	r2,505
  807e60:	00807e7c 	xorhi	r2,zero,505
  807e64:	00807e7c 	xorhi	r2,zero,505
  807e68:	00807e6c 	andhi	r2,zero,505
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  807e6c:	00800044 	movi	r2,1
  807e70:	00000306 	br	807e80 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  807e74:	0005883a 	mov	r2,zero
  807e78:	00000106 	br	807e80 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  807e7c:	0005883a 	mov	r2,zero
  }
}
  807e80:	e037883a 	mov	sp,fp
  807e84:	df000017 	ldw	fp,0(sp)
  807e88:	dec00104 	addi	sp,sp,4
  807e8c:	f800283a 	ret

00807e90 <atexit>:
  807e90:	200b883a 	mov	r5,r4
  807e94:	000f883a 	mov	r7,zero
  807e98:	000d883a 	mov	r6,zero
  807e9c:	0009883a 	mov	r4,zero
  807ea0:	0807f581 	jmpi	807f58 <__register_exitproc>

00807ea4 <exit>:
  807ea4:	defffe04 	addi	sp,sp,-8
  807ea8:	000b883a 	mov	r5,zero
  807eac:	dc000015 	stw	r16,0(sp)
  807eb0:	dfc00115 	stw	ra,4(sp)
  807eb4:	2021883a 	mov	r16,r4
  807eb8:	08080700 	call	808070 <__call_exitprocs>
  807ebc:	00802074 	movhi	r2,129
  807ec0:	10a88d04 	addi	r2,r2,-24012
  807ec4:	11000017 	ldw	r4,0(r2)
  807ec8:	20800f17 	ldw	r2,60(r4)
  807ecc:	10000126 	beq	r2,zero,807ed4 <exit+0x30>
  807ed0:	103ee83a 	callr	r2
  807ed4:	8009883a 	mov	r4,r16
  807ed8:	08081f00 	call	8081f0 <_exit>

00807edc <memcmp>:
  807edc:	01c000c4 	movi	r7,3
  807ee0:	3980192e 	bgeu	r7,r6,807f48 <memcmp+0x6c>
  807ee4:	2144b03a 	or	r2,r4,r5
  807ee8:	11c4703a 	and	r2,r2,r7
  807eec:	10000f26 	beq	r2,zero,807f2c <memcmp+0x50>
  807ef0:	20800003 	ldbu	r2,0(r4)
  807ef4:	28c00003 	ldbu	r3,0(r5)
  807ef8:	10c0151e 	bne	r2,r3,807f50 <memcmp+0x74>
  807efc:	31bfff84 	addi	r6,r6,-2
  807f00:	01ffffc4 	movi	r7,-1
  807f04:	00000406 	br	807f18 <memcmp+0x3c>
  807f08:	20800003 	ldbu	r2,0(r4)
  807f0c:	28c00003 	ldbu	r3,0(r5)
  807f10:	31bfffc4 	addi	r6,r6,-1
  807f14:	10c00e1e 	bne	r2,r3,807f50 <memcmp+0x74>
  807f18:	21000044 	addi	r4,r4,1
  807f1c:	29400044 	addi	r5,r5,1
  807f20:	31fff91e 	bne	r6,r7,807f08 <__alt_mem_onchip_mem+0xff7fff08>
  807f24:	0005883a 	mov	r2,zero
  807f28:	f800283a 	ret
  807f2c:	20c00017 	ldw	r3,0(r4)
  807f30:	28800017 	ldw	r2,0(r5)
  807f34:	18bfee1e 	bne	r3,r2,807ef0 <__alt_mem_onchip_mem+0xff7ffef0>
  807f38:	31bfff04 	addi	r6,r6,-4
  807f3c:	21000104 	addi	r4,r4,4
  807f40:	29400104 	addi	r5,r5,4
  807f44:	39bff936 	bltu	r7,r6,807f2c <__alt_mem_onchip_mem+0xff7fff2c>
  807f48:	303fe91e 	bne	r6,zero,807ef0 <__alt_mem_onchip_mem+0xff7ffef0>
  807f4c:	003ff506 	br	807f24 <__alt_mem_onchip_mem+0xff7fff24>
  807f50:	10c5c83a 	sub	r2,r2,r3
  807f54:	f800283a 	ret

00807f58 <__register_exitproc>:
  807f58:	defffa04 	addi	sp,sp,-24
  807f5c:	dc000315 	stw	r16,12(sp)
  807f60:	04002074 	movhi	r16,129
  807f64:	84288d04 	addi	r16,r16,-24012
  807f68:	80c00017 	ldw	r3,0(r16)
  807f6c:	dc400415 	stw	r17,16(sp)
  807f70:	dfc00515 	stw	ra,20(sp)
  807f74:	18805217 	ldw	r2,328(r3)
  807f78:	2023883a 	mov	r17,r4
  807f7c:	10003726 	beq	r2,zero,80805c <__register_exitproc+0x104>
  807f80:	10c00117 	ldw	r3,4(r2)
  807f84:	010007c4 	movi	r4,31
  807f88:	20c00e16 	blt	r4,r3,807fc4 <__register_exitproc+0x6c>
  807f8c:	1a000044 	addi	r8,r3,1
  807f90:	8800221e 	bne	r17,zero,80801c <__register_exitproc+0xc4>
  807f94:	18c00084 	addi	r3,r3,2
  807f98:	18c7883a 	add	r3,r3,r3
  807f9c:	18c7883a 	add	r3,r3,r3
  807fa0:	12000115 	stw	r8,4(r2)
  807fa4:	10c7883a 	add	r3,r2,r3
  807fa8:	19400015 	stw	r5,0(r3)
  807fac:	0005883a 	mov	r2,zero
  807fb0:	dfc00517 	ldw	ra,20(sp)
  807fb4:	dc400417 	ldw	r17,16(sp)
  807fb8:	dc000317 	ldw	r16,12(sp)
  807fbc:	dec00604 	addi	sp,sp,24
  807fc0:	f800283a 	ret
  807fc4:	00800034 	movhi	r2,0
  807fc8:	10800004 	addi	r2,r2,0
  807fcc:	10002626 	beq	r2,zero,808068 <__register_exitproc+0x110>
  807fd0:	01006404 	movi	r4,400
  807fd4:	d9400015 	stw	r5,0(sp)
  807fd8:	d9800115 	stw	r6,4(sp)
  807fdc:	d9c00215 	stw	r7,8(sp)
  807fe0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  807fe4:	d9400017 	ldw	r5,0(sp)
  807fe8:	d9800117 	ldw	r6,4(sp)
  807fec:	d9c00217 	ldw	r7,8(sp)
  807ff0:	10001d26 	beq	r2,zero,808068 <__register_exitproc+0x110>
  807ff4:	81000017 	ldw	r4,0(r16)
  807ff8:	10000115 	stw	zero,4(r2)
  807ffc:	02000044 	movi	r8,1
  808000:	22405217 	ldw	r9,328(r4)
  808004:	0007883a 	mov	r3,zero
  808008:	12400015 	stw	r9,0(r2)
  80800c:	20805215 	stw	r2,328(r4)
  808010:	10006215 	stw	zero,392(r2)
  808014:	10006315 	stw	zero,396(r2)
  808018:	883fde26 	beq	r17,zero,807f94 <__alt_mem_onchip_mem+0xff7fff94>
  80801c:	18c9883a 	add	r4,r3,r3
  808020:	2109883a 	add	r4,r4,r4
  808024:	1109883a 	add	r4,r2,r4
  808028:	21802215 	stw	r6,136(r4)
  80802c:	01800044 	movi	r6,1
  808030:	12406217 	ldw	r9,392(r2)
  808034:	30cc983a 	sll	r6,r6,r3
  808038:	4992b03a 	or	r9,r9,r6
  80803c:	12406215 	stw	r9,392(r2)
  808040:	21c04215 	stw	r7,264(r4)
  808044:	01000084 	movi	r4,2
  808048:	893fd21e 	bne	r17,r4,807f94 <__alt_mem_onchip_mem+0xff7fff94>
  80804c:	11006317 	ldw	r4,396(r2)
  808050:	218cb03a 	or	r6,r4,r6
  808054:	11806315 	stw	r6,396(r2)
  808058:	003fce06 	br	807f94 <__alt_mem_onchip_mem+0xff7fff94>
  80805c:	18805304 	addi	r2,r3,332
  808060:	18805215 	stw	r2,328(r3)
  808064:	003fc606 	br	807f80 <__alt_mem_onchip_mem+0xff7fff80>
  808068:	00bfffc4 	movi	r2,-1
  80806c:	003fd006 	br	807fb0 <__alt_mem_onchip_mem+0xff7fffb0>

00808070 <__call_exitprocs>:
  808070:	defff504 	addi	sp,sp,-44
  808074:	df000915 	stw	fp,36(sp)
  808078:	dd400615 	stw	r21,24(sp)
  80807c:	dc800315 	stw	r18,12(sp)
  808080:	dfc00a15 	stw	ra,40(sp)
  808084:	ddc00815 	stw	r23,32(sp)
  808088:	dd800715 	stw	r22,28(sp)
  80808c:	dd000515 	stw	r20,20(sp)
  808090:	dcc00415 	stw	r19,16(sp)
  808094:	dc400215 	stw	r17,8(sp)
  808098:	dc000115 	stw	r16,4(sp)
  80809c:	d9000015 	stw	r4,0(sp)
  8080a0:	2839883a 	mov	fp,r5
  8080a4:	04800044 	movi	r18,1
  8080a8:	057fffc4 	movi	r21,-1
  8080ac:	00802074 	movhi	r2,129
  8080b0:	10a88d04 	addi	r2,r2,-24012
  8080b4:	12000017 	ldw	r8,0(r2)
  8080b8:	45005217 	ldw	r20,328(r8)
  8080bc:	44c05204 	addi	r19,r8,328
  8080c0:	a0001c26 	beq	r20,zero,808134 <__call_exitprocs+0xc4>
  8080c4:	a0800117 	ldw	r2,4(r20)
  8080c8:	15ffffc4 	addi	r23,r2,-1
  8080cc:	b8000d16 	blt	r23,zero,808104 <__call_exitprocs+0x94>
  8080d0:	14000044 	addi	r16,r2,1
  8080d4:	8421883a 	add	r16,r16,r16
  8080d8:	8421883a 	add	r16,r16,r16
  8080dc:	84402004 	addi	r17,r16,128
  8080e0:	a463883a 	add	r17,r20,r17
  8080e4:	a421883a 	add	r16,r20,r16
  8080e8:	e0001e26 	beq	fp,zero,808164 <__call_exitprocs+0xf4>
  8080ec:	80804017 	ldw	r2,256(r16)
  8080f0:	e0801c26 	beq	fp,r2,808164 <__call_exitprocs+0xf4>
  8080f4:	bdffffc4 	addi	r23,r23,-1
  8080f8:	843fff04 	addi	r16,r16,-4
  8080fc:	8c7fff04 	addi	r17,r17,-4
  808100:	bd7ff91e 	bne	r23,r21,8080e8 <__alt_mem_onchip_mem+0xff8000e8>
  808104:	00800034 	movhi	r2,0
  808108:	10800004 	addi	r2,r2,0
  80810c:	10000926 	beq	r2,zero,808134 <__call_exitprocs+0xc4>
  808110:	a0800117 	ldw	r2,4(r20)
  808114:	1000301e 	bne	r2,zero,8081d8 <__call_exitprocs+0x168>
  808118:	a0800017 	ldw	r2,0(r20)
  80811c:	10003226 	beq	r2,zero,8081e8 <__call_exitprocs+0x178>
  808120:	a009883a 	mov	r4,r20
  808124:	98800015 	stw	r2,0(r19)
  808128:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80812c:	9d000017 	ldw	r20,0(r19)
  808130:	a03fe41e 	bne	r20,zero,8080c4 <__alt_mem_onchip_mem+0xff8000c4>
  808134:	dfc00a17 	ldw	ra,40(sp)
  808138:	df000917 	ldw	fp,36(sp)
  80813c:	ddc00817 	ldw	r23,32(sp)
  808140:	dd800717 	ldw	r22,28(sp)
  808144:	dd400617 	ldw	r21,24(sp)
  808148:	dd000517 	ldw	r20,20(sp)
  80814c:	dcc00417 	ldw	r19,16(sp)
  808150:	dc800317 	ldw	r18,12(sp)
  808154:	dc400217 	ldw	r17,8(sp)
  808158:	dc000117 	ldw	r16,4(sp)
  80815c:	dec00b04 	addi	sp,sp,44
  808160:	f800283a 	ret
  808164:	a0800117 	ldw	r2,4(r20)
  808168:	80c00017 	ldw	r3,0(r16)
  80816c:	10bfffc4 	addi	r2,r2,-1
  808170:	15c01426 	beq	r2,r23,8081c4 <__call_exitprocs+0x154>
  808174:	80000015 	stw	zero,0(r16)
  808178:	183fde26 	beq	r3,zero,8080f4 <__alt_mem_onchip_mem+0xff8000f4>
  80817c:	95c8983a 	sll	r4,r18,r23
  808180:	a0806217 	ldw	r2,392(r20)
  808184:	a5800117 	ldw	r22,4(r20)
  808188:	2084703a 	and	r2,r4,r2
  80818c:	10000b26 	beq	r2,zero,8081bc <__call_exitprocs+0x14c>
  808190:	a0806317 	ldw	r2,396(r20)
  808194:	2088703a 	and	r4,r4,r2
  808198:	20000c1e 	bne	r4,zero,8081cc <__call_exitprocs+0x15c>
  80819c:	89400017 	ldw	r5,0(r17)
  8081a0:	d9000017 	ldw	r4,0(sp)
  8081a4:	183ee83a 	callr	r3
  8081a8:	a0800117 	ldw	r2,4(r20)
  8081ac:	15bfbf1e 	bne	r2,r22,8080ac <__alt_mem_onchip_mem+0xff8000ac>
  8081b0:	98800017 	ldw	r2,0(r19)
  8081b4:	153fcf26 	beq	r2,r20,8080f4 <__alt_mem_onchip_mem+0xff8000f4>
  8081b8:	003fbc06 	br	8080ac <__alt_mem_onchip_mem+0xff8000ac>
  8081bc:	183ee83a 	callr	r3
  8081c0:	003ff906 	br	8081a8 <__alt_mem_onchip_mem+0xff8001a8>
  8081c4:	a5c00115 	stw	r23,4(r20)
  8081c8:	003feb06 	br	808178 <__alt_mem_onchip_mem+0xff800178>
  8081cc:	89000017 	ldw	r4,0(r17)
  8081d0:	183ee83a 	callr	r3
  8081d4:	003ff406 	br	8081a8 <__alt_mem_onchip_mem+0xff8001a8>
  8081d8:	a0800017 	ldw	r2,0(r20)
  8081dc:	a027883a 	mov	r19,r20
  8081e0:	1029883a 	mov	r20,r2
  8081e4:	003fb606 	br	8080c0 <__alt_mem_onchip_mem+0xff8000c0>
  8081e8:	0005883a 	mov	r2,zero
  8081ec:	003ffb06 	br	8081dc <__alt_mem_onchip_mem+0xff8001dc>

008081f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8081f0:	defffd04 	addi	sp,sp,-12
  8081f4:	df000215 	stw	fp,8(sp)
  8081f8:	df000204 	addi	fp,sp,8
  8081fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  808200:	0001883a 	nop
  808204:	e0bfff17 	ldw	r2,-4(fp)
  808208:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80820c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  808210:	10000226 	beq	r2,zero,80821c <_exit+0x2c>
    ALT_SIM_FAIL();
  808214:	002af070 	cmpltui	zero,zero,43969
  808218:	00000106 	br	808220 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80821c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  808220:	003fff06 	br	808220 <__alt_mem_onchip_mem+0xff800220>
