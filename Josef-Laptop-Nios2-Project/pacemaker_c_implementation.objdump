
pacemaker_c_implementation.elf:     file format elf32-littlenios2
pacemaker_c_implementation.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000e2f8 memsz 0x0000e2f8 flags r-x
    LOAD off    0x0000f318 vaddr 0x0080e318 paddr 0x0080ff70 align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x00011bc8 vaddr 0x00811bc8 paddr 0x00811bc8 align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dbc8  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000050c  0080de0c  0080de0c  0000ee0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  0080e318  0080ff70  0000f318  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  00811bc8  00811bc8  00011bc8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00811d38  00811d38  00010f70  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00010f70  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00010f70  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cf8  00000000  00000000  00010f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001cfbd  00000000  00000000  00011c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007db1  00000000  00000000  0002ec4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009de8  00000000  00000000  000369fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001f1c  00000000  00000000  000407e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a46  00000000  00000000  00042704  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000819d  00000000  00000000  0004614a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0004e2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000d50  00000000  00000000  0004e348  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000523fd  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00052400  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00052403  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00052404  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00052405  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0005240e  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00052417  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00052420  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000030  00000000  00000000  0005242c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  0005245c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080de0c l    d  .rodata	00000000 .rodata
0080e318 l    d  .rwdata	00000000 .rwdata
00811bc8 l    d  .bss	00000000 .bss
00811d38 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Projects/University/303-Assignment/pacemaker_c_implementation_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 buttons_test.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 switches.c
00000000 l    df *ABS*	00000000 uart_test.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00806c50 l     F .text	00000008 __fp_unlock
00806c64 l     F .text	0000019c __sinit.part.1
00806e00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080e318 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00809c98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00809da4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00809dd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a03c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a11c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080a208 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080a3dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080ff5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080a7cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080a900 l     F .text	00000034 alt_dev_reg
0080ecec l     O .rwdata	00001060 jtag_uart
0080fd4c l     O .rwdata	00000120 lcd
0080fe6c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080ac28 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080ae34 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080ff68 l     O .rwdata	00000004 colstart
0080b46c l     F .text	000000b8 lcd_write_command
0080b524 l     F .text	000000d8 lcd_write_data
0080b5fc l     F .text	000000d0 lcd_clear_screen
0080b6cc l     F .text	000001ec lcd_repaint_screen
0080b8b8 l     F .text	000000cc lcd_scroll_up
0080b984 l     F .text	000002ac lcd_handle_escape
0080c108 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080c348 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080c5f8 l     F .text	0000009c altera_avalon_uart_irq
0080c694 l     F .text	000000e4 altera_avalon_uart_rxirq
0080c778 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080c914 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080cb2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080cd5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080d1d0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0080d310 l     F .text	0000003c alt_get_errno
0080d34c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080e197 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00811c0c g     O .bss	00000004 alt_instruction_exception_handler
00811bd6 g     O .bss	00000001 a_pace_led_timer_already_started
00806acc g     F .text	00000018 putchar
00809964 g     F .text	00000054 _isatty_r
0080a318 g     F .text	0000007c alt_main
00806ae4 g     F .text	000000c0 _puts_r
00811c38 g     O .bss	00000100 alt_irq
0080968c g     F .text	00000060 _lseek_r
0080ff70 g       *ABS*	00000000 __flash_rwdata_start
00811d38 g       *ABS*	00000000 __alt_heap_start
00808ae8 g     F .text	0000005c __sseek
00806fa0 g     F .text	00000010 __sinit
00808b4c g     F .text	00000140 __swbuf_r
00806e08 g     F .text	00000068 __sfmoreglue
0080a3b8 g     F .text	00000024 __malloc_unlock
00811bdc g     O .bss	00000004 a_timer_count
00801004 g     F .text	00000104 clear_sense_led_events
0080806c g     F .text	0000015c memmove
00806f88 g     F .text	00000018 _cleanup
00800290 g     F .text	000000fc buttons_interrupts_function
00805e10 g     F .text	000000dc .hidden __gtdf2
0080d594 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00811bd1 g     O .bss	00000001 ventricular_sense_paced
00800020 g       *ABS*	00000000 __flash_exceptions_start
00809908 g     F .text	0000005c _fstat_r
00811bf0 g     O .bss	00000004 errno
00808a64 g     F .text	00000008 __seofread
00811bfc g     O .bss	00000004 alt_argv
00817f30 g       *ABS*	00000000 _gp
0080d564 g     F .text	00000030 usleep
00805218 g     F .text	000001c0 reset
0080eb6c g     O .rwdata	00000180 alt_fd_list
00806ac4 g     F .text	00000008 _putchar_r
008003b4 g     F .text	00000028 v_pace_led_timer_isr_function
0080d710 g     F .text	00000090 alt_find_dev
00807f24 g     F .text	00000148 memcpy
00806c58 g     F .text	0000000c _cleanup_r
008068dc g     F .text	000000dc .hidden __floatsidf
0080d294 g     F .text	0000007c alt_io_redirect
00805eec g     F .text	000000f4 .hidden __ltdf2
0080de0c g       *ABS*	00000000 __DTOR_END__
00806ba4 g     F .text	00000014 puts
0080d9dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080b02c g     F .text	0000021c altera_avalon_jtag_uart_read
00809ab0 g     F .text	00000064 .hidden __udivsi3
0080a078 g     F .text	000000a4 isatty
0080d94c g     F .text	00000090 alt_icache_flush
00800518 g     F .text	00000040 v_events_timer_isr_function
00811bec g     O .bss	00000004 __malloc_top_pad
00811bcf g     O .bss	00000001 ventricular_sense
00806ff0 g     F .text	000004bc __sfvwrite_r
008089bc g     F .text	00000054 _sbrk_r
0080038c g     F .text	00000028 a_pace_led_timer_isr_function
008098a8 g     F .text	00000060 _read_r
0080ff50 g     O .rwdata	00000004 alt_max_fd
00808eac g     F .text	000000f0 _fclose_r
00809228 g     F .text	00000030 fflush
00811be8 g     O .bss	00000004 __malloc_max_sbrked_mem
00809ebc g     F .text	00000180 alt_irq_register
00805564 g     F .text	000008ac .hidden __adddf3
0080a244 g     F .text	000000d4 lseek
00800404 g     F .text	00000028 v_sense_led_timer_isr_function
0080ff30 g     O .rwdata	00000004 _global_impure_ptr
00808458 g     F .text	00000564 _realloc_r
00811d38 g       *ABS*	00000000 __bss_end
0080d0e0 g     F .text	000000f0 alt_iic_isr_register
0080a6c4 g     F .text	00000108 alt_tick
008069b8 g     F .text	000000a8 .hidden __floatunsidf
0080c54c g     F .text	000000ac altera_avalon_uart_init
00806fc0 g     F .text	00000018 __fp_lock_all
0080d094 g     F .text	0000004c alt_ic_irq_enabled
0080a628 g     F .text	0000009c alt_alarm_stop
00811bd0 g     O .bss	00000001 atrial_sense_paced
00811bf4 g     O .bss	00000004 alt_irq_active
00811bc9 g     O .bss	00000001 implementation_mode
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080eb44 g     O .rwdata	00000028 alt_dev_null
0080cd14 g     F .text	00000048 alt_dcache_flush_all
00811bce g     O .bss	00000001 atrial_sense
0080ff70 g       *ABS*	00000000 __ram_rwdata_end
0080ff48 g     O .rwdata	00000008 alt_dev_list
0080a808 g     F .text	000000f8 write
008082f0 g     F .text	000000a0 _putc_r
0080e318 g       *ABS*	00000000 __ram_rodata_end
00809e0c g     F .text	000000b0 fstat
00805eec g     F .text	000000f4 .hidden __ledf2
008003dc g     F .text	00000028 a_sense_led_timer_isr_function
00809b14 g     F .text	00000058 .hidden __umodsi3
00801108 g     F .text	000000a8 C_Mode_Pacemaker
00811d38 g       *ABS*	00000000 end
0080bc30 g     F .text	000004d8 altera_avalon_lcd_16207_write
00800e70 g     F .text	00000060 send_ventricular_event
0080cb68 g     F .text	000001ac altera_avalon_uart_write
0080ab68 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080de0c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00811bc8 g     O .bss	00000001 pulse_mode
0080c3c0 g     F .text	0000007c alt_avalon_timer_sc_init
0080c49c g     F .text	00000060 altera_avalon_uart_write_fd
00806a60 g     F .text	00000064 .hidden __clzsi2
0080c4fc g     F .text	00000050 altera_avalon_uart_close_fd
0080b248 g     F .text	00000224 altera_avalon_jtag_uart_write
00806fb0 g     F .text	00000004 __sfp_lock_acquire
00807e40 g     F .text	000000e4 memchr
0080937c g     F .text	00000310 _free_r
00811be0 g     O .bss	00000004 v_timer_count
0080dc58 g     F .text	00000180 __call_exitprocs
0080ff38 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
008004d8 g     F .text	00000040 a_events_timer_isr_function
00811c04 g     O .bss	00000004 _alt_tick_rate
00811c08 g     O .bss	00000004 _alt_nticks
0080a418 g     F .text	000000fc read
0080a96c g     F .text	00000098 alt_sys_init
00800f00 g     F .text	00000104 clear_pace_led_events
0080db40 g     F .text	00000118 __register_exitproc
00811bcd g     O .bss	00000001 v_is_paced
0080aed4 g     F .text	00000068 altera_avalon_jtag_uart_close
0080e318 g       *ABS*	00000000 __ram_rwdata_start
0080de0c g       *ABS*	00000000 __ram_rodata_start
00811c10 g     O .bss	00000028 __malloc_current_mallinfo
0080aa04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080d8a8 g     F .text	000000a4 alt_get_fd
0080d5b8 g     F .text	00000158 alt_busy_sleep
00808e58 g     F .text	00000054 _close_r
0080dac4 g     F .text	0000007c memcmp
0080aac4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00811d38 g       *ABS*	00000000 __alt_stack_base
0080ab14 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00808d04 g     F .text	00000154 __swsetup_r
008053d8 g     F .text	0000018c tick
00806e70 g     F .text	00000118 __sfp
0080e73c g     O .rwdata	00000408 __malloc_av_
00806fbc g     F .text	00000004 __sinit_lock_release
00808a10 g     F .text	00000054 __sread
0080d7a0 g     F .text	00000108 alt_find_file
0080cd98 g     F .text	000000a4 alt_dev_llist_insert
0080a394 g     F .text	00000024 __malloc_lock
0080a578 g     F .text	000000b0 sbrk
008091cc g     F .text	0000005c _fflush_r
00811bca g     O .bss	00000001 atrial_event
00811bc8 g       *ABS*	00000000 __bss_start
008081c8 g     F .text	00000128 memset
00800598 g     F .text	00000878 main
00811c00 g     O .bss	00000004 alt_envp
00811be4 g     O .bss	00000004 __malloc_max_total_mem
0080aa64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00808c8c g     F .text	00000018 __swbuf
0080c1b4 g     F .text	00000134 altera_avalon_lcd_16207_init
00808b44 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00808f9c g     F .text	00000014 fclose
00807634 g     F .text	0000080c _malloc_r
0080ff54 g     O .rwdata	00000004 alt_errno
008074ac g     F .text	000000c4 _fwalk
0080042c g     F .text	000000ac uart_read_isr_function
00808390 g     F .text	000000c8 putc
008099b8 g     F .text	00000084 .hidden __divsi3
00809258 g     F .text	00000124 _malloc_trim_r
0080de0c g       *ABS*	00000000 __CTOR_END__
00811bd5 g     O .bss	00000001 led_sense_ventricular_event
0080de0c g       *ABS*	00000000 __flash_rodata_start
0080de0c g       *ABS*	00000000 __DTOR_LIST__
0080a934 g     F .text	00000038 alt_irq_init
0080a514 g     F .text	00000064 alt_release_fd
0080df4b g     O .rodata	00000100 .hidden __clz_tab
0080da78 g     F .text	00000014 atexit
00808ca4 g     F .text	00000060 _write_r
00800ed0 g     F .text	00000030 clear_heart_flags
0080ff34 g     O .rwdata	00000004 _impure_ptr
00811bf8 g     O .bss	00000004 alt_argc
008011b0 g     F .text	00000020 SCCHARTS_Mode_Pacemaker
00808fb0 g     F .text	0000021c __sflush_r
0080ce9c g     F .text	00000060 _do_dtors
00800558 g     F .text	00000040 system_timer_isr_function
00800020 g       .exceptions	00000000 alt_irq_entry
00806fd8 g     F .text	00000018 __fp_unlock_all
0080c2e8 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0080ff40 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080cf30 g     F .text	00000050 alt_ic_isr_register
0080ff70 g       *ABS*	00000000 _edata
0080c43c g     F .text	00000060 altera_avalon_uart_read_fd
00811bcc g     O .bss	00000001 ventricular_event
00811d38 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080af3c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080d008 g     F .text	0000008c alt_ic_irq_disable
00808a6c g     F .text	0000007c __swrite
0080ff3c g     O .rwdata	00000004 __malloc_trim_threshold
0080da8c g     F .text	00000038 exit
00811bd2 g     O .bss	00000001 led_pace_atrial_event
00807570 g     F .text	000000c4 _fwalk_reent
00809a3c g     F .text	00000074 .hidden __modsi3
008011d0 g     F .text	00004048 logic
0080ff6c g     O .rwdata	00000004 __ctype_ptr__
00811bd4 g     O .bss	00000001 led_sense_atrial_event
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806fb4 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080e096 g     O .rodata	00000101 _ctype_
00811bcb g     O .bss	00000001 a_is_paced
0080c8c0 g     F .text	00000054 altera_avalon_uart_close
0080ddd8 g     F .text	00000034 _exit
00809b6c g     F .text	0000012c alt_alarm_start
008096ec g     F .text	000001bc __smakebuf_r
00806bb8 g     F .text	00000098 strlen
0080d410 g     F .text	00000154 open
00805e10 g     F .text	000000dc .hidden __gedf2
00811bd8 g     O .bss	00000001 a_sense_led_timer_already_started
0080cefc g     F .text	00000034 alt_icache_flush_all
0080ff58 g     O .rwdata	00000004 alt_priority_mask
0080cf80 g     F .text	00000088 alt_ic_irq_enable
00811bd9 g     O .bss	00000001 v_sense_led_timer_already_started
0080c950 g     F .text	000001dc altera_avalon_uart_read
00811bd3 g     O .bss	00000001 led_pace_ventricular_event
00805fe0 g     F .text	000008fc .hidden __subdf3
00811bd7 g     O .bss	00000001 v_pace_led_timer_already_started
00800e10 g     F .text	00000060 send_atrial_event
0080ff60 g     O .rwdata	00000008 alt_alarm_list
0080ce3c g     F .text	00000060 _do_ctors
00809cd4 g     F .text	000000d0 close
0080a184 g     F .text	00000084 alt_load
00806fb8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10870e04 	addi	r2,r2,7224
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10870e04 	addi	r2,r2,7224
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73717 	ldw	r2,-25380(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73717 	ldw	r2,-25380(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d69fcc14 	ori	gp,gp,32560
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	1086f214 	ori	r2,r2,7112

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18c74e14 	ori	r3,r3,7480

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080a1840 	call	80a184 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080a3180 	call	80a318 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <buttons_interrupts_function>:

int a_timer_count = 0;
int v_timer_count = 0;

void buttons_interrupts_function(void* context, alt_u32 id)
{
  800290:	defffb04 	addi	sp,sp,-20
  800294:	dfc00415 	stw	ra,16(sp)
  800298:	df000315 	stw	fp,12(sp)
  80029c:	df000304 	addi	fp,sp,12
  8002a0:	e13ffe15 	stw	r4,-8(fp)
  8002a4:	e17fff15 	stw	r5,-4(fp)

	int* temp_button_value = (int*) context; // Cast the context before using it
  8002a8:	e0bffe17 	ldw	r2,-8(fp)
  8002ac:	e0bffd15 	stw	r2,-12(fp)
	(*temp_button_value) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8002b0:	00804074 	movhi	r2,257
  8002b4:	10842b04 	addi	r2,r2,4268
  8002b8:	10c00037 	ldwio	r3,0(r2)
  8002bc:	e0bffd17 	ldw	r2,-12(fp)
  8002c0:	10c00015 	stw	r3,0(r2)

	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8002c4:	0007883a 	mov	r3,zero
  8002c8:	00804074 	movhi	r2,257
  8002cc:	10842b04 	addi	r2,r2,4268
  8002d0:	10c00035 	stwio	r3,0(r2)

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
  8002d4:	d0a72603 	ldbu	r2,-25448(gp)
  8002d8:	1080005c 	xori	r2,r2,1
  8002dc:	10803fcc 	andi	r2,r2,255
  8002e0:	1000241e 	bne	r2,zero,800374 <buttons_interrupts_function+0xe4>
		return;
	}


	if ((*temp_button_value & (1 << KEY1))) {
  8002e4:	e0bffd17 	ldw	r2,-12(fp)
  8002e8:	10800017 	ldw	r2,0(r2)
  8002ec:	1080008c 	andi	r2,r2,2
  8002f0:	10000526 	beq	r2,zero,800308 <buttons_interrupts_function+0x78>
		//printf("KEY0 : ATRIAL EVENT!\n");
		send_atrial_event(true);
  8002f4:	01000044 	movi	r4,1
  8002f8:	0800e100 	call	800e10 <send_atrial_event>
		printf("Atrium Manually Paced!\n");
  8002fc:	01002074 	movhi	r4,129
  800300:	21378304 	addi	r4,r4,-8692
  800304:	0806ba40 	call	806ba4 <puts>
	}

	if ((*temp_button_value & (1 << KEY0))) {
  800308:	e0bffd17 	ldw	r2,-12(fp)
  80030c:	10800017 	ldw	r2,0(r2)
  800310:	1080004c 	andi	r2,r2,1
  800314:	10000c26 	beq	r2,zero,800348 <buttons_interrupts_function+0xb8>
		//printf("KEY1 : VENTRICULAR EVENT!\n");
		if (v_timer_count >= URI_VALUE) {
  800318:	d0a72c17 	ldw	r2,-25424(gp)
  80031c:	1080e110 	cmplti	r2,r2,900
  800320:	1000061e 	bne	r2,zero,80033c <buttons_interrupts_function+0xac>
			send_ventricular_event(true);
  800324:	01000044 	movi	r4,1
  800328:	0800e700 	call	800e70 <send_ventricular_event>
			printf("Ventricular Manually Paced!\n");
  80032c:	01002074 	movhi	r4,129
  800330:	21378904 	addi	r4,r4,-8668
  800334:	0806ba40 	call	806ba4 <puts>
  800338:	00000306 	br	800348 <buttons_interrupts_function+0xb8>
		} else {
			printf("URI_VALUE not over!\n");
  80033c:	01002074 	movhi	r4,129
  800340:	21379004 	addi	r4,r4,-8640
  800344:	0806ba40 	call	806ba4 <puts>
		}

	}

	if ((*temp_button_value & (1 << 2))) {
  800348:	e0bffd17 	ldw	r2,-12(fp)
  80034c:	10800017 	ldw	r2,0(r2)
  800350:	1080010c 	andi	r2,r2,4
  800354:	10000826 	beq	r2,zero,800378 <buttons_interrupts_function+0xe8>
		// reset leds -- DEBUGGING / CLEAR EVENTS
		atrial_event = false;
  800358:	d0272685 	stb	zero,-25446(gp)
		ventricular_event = false;
  80035c:	d0272705 	stb	zero,-25444(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  800360:	0007883a 	mov	r3,zero
  800364:	00804074 	movhi	r2,257
  800368:	10841c04 	addi	r2,r2,4208
  80036c:	10c00035 	stwio	r3,0(r2)
  800370:	00000106 	br	800378 <buttons_interrupts_function+0xe8>
	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
		return;
  800374:	0001883a 	nop
		ventricular_event = false;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	}

	//printf("button pressed: %i\n", *temp_button_value); DEBUGGING PURPOSES
}
  800378:	e037883a 	mov	sp,fp
  80037c:	dfc00117 	ldw	ra,4(sp)
  800380:	df000017 	ldw	fp,0(sp)
  800384:	dec00204 	addi	sp,sp,8
  800388:	f800283a 	ret

0080038c <a_pace_led_timer_isr_function>:

alt_u32 a_pace_led_timer_isr_function(void* context) {
  80038c:	defffe04 	addi	sp,sp,-8
  800390:	df000115 	stw	fp,4(sp)
  800394:	df000104 	addi	fp,sp,4
  800398:	e13fff15 	stw	r4,-4(fp)

	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	//int *led_time_count = (int*) context;
	led_pace_atrial_event = false;
  80039c:	d0272885 	stb	zero,-25438(gp)
	return LED_ON_MILLISECONDS;
  8003a0:	00800644 	movi	r2,25
}
  8003a4:	e037883a 	mov	sp,fp
  8003a8:	df000017 	ldw	fp,0(sp)
  8003ac:	dec00104 	addi	sp,sp,4
  8003b0:	f800283a 	ret

008003b4 <v_pace_led_timer_isr_function>:

alt_u32 v_pace_led_timer_isr_function(void* context) {
  8003b4:	defffe04 	addi	sp,sp,-8
  8003b8:	df000115 	stw	fp,4(sp)
  8003bc:	df000104 	addi	fp,sp,4
  8003c0:	e13fff15 	stw	r4,-4(fp)

	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	//int *(led_time_count) = (int*) context;
	led_pace_ventricular_event = false;
  8003c4:	d02728c5 	stb	zero,-25437(gp)
	return LED_ON_MILLISECONDS;
  8003c8:	00800644 	movi	r2,25
}
  8003cc:	e037883a 	mov	sp,fp
  8003d0:	df000017 	ldw	fp,0(sp)
  8003d4:	dec00104 	addi	sp,sp,4
  8003d8:	f800283a 	ret

008003dc <a_sense_led_timer_isr_function>:

alt_u32 a_sense_led_timer_isr_function(void* contxet) {
  8003dc:	defffe04 	addi	sp,sp,-8
  8003e0:	df000115 	stw	fp,4(sp)
  8003e4:	df000104 	addi	fp,sp,4
  8003e8:	e13fff15 	stw	r4,-4(fp)
	led_sense_atrial_event = false;
  8003ec:	d0272905 	stb	zero,-25436(gp)
	return LED_ON_MILLISECONDS;
  8003f0:	00800644 	movi	r2,25
}
  8003f4:	e037883a 	mov	sp,fp
  8003f8:	df000017 	ldw	fp,0(sp)
  8003fc:	dec00104 	addi	sp,sp,4
  800400:	f800283a 	ret

00800404 <v_sense_led_timer_isr_function>:

alt_u32 v_sense_led_timer_isr_function(void* contxet) {
  800404:	defffe04 	addi	sp,sp,-8
  800408:	df000115 	stw	fp,4(sp)
  80040c:	df000104 	addi	fp,sp,4
  800410:	e13fff15 	stw	r4,-4(fp)
	led_sense_ventricular_event = false;
  800414:	d0272945 	stb	zero,-25435(gp)
	return LED_ON_MILLISECONDS;
  800418:	00800644 	movi	r2,25
}
  80041c:	e037883a 	mov	sp,fp
  800420:	df000017 	ldw	fp,0(sp)
  800424:	dec00104 	addi	sp,sp,4
  800428:	f800283a 	ret

0080042c <uart_read_isr_function>:

void uart_read_isr_function(void* context, alt_u32 id)
{
  80042c:	defffb04 	addi	sp,sp,-20
  800430:	dfc00415 	stw	ra,16(sp)
  800434:	df000315 	stw	fp,12(sp)
  800438:	df000304 	addi	fp,sp,12
  80043c:	e13ffe15 	stw	r4,-8(fp)
  800440:	e17fff15 	stw	r5,-4(fp)
	// if we are NOT in UART MODE then exit early;

	char temp;
	temp = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
  800444:	00804074 	movhi	r2,257
  800448:	10841004 	addi	r2,r2,4160
  80044c:	10800037 	ldwio	r2,0(r2)
  800450:	e0bffd05 	stb	r2,-12(fp)

	if (pulse_mode == BUTTON_MODE) {
  800454:	d0a72603 	ldbu	r2,-25448(gp)
  800458:	10803fcc 	andi	r2,r2,255
  80045c:	10000d26 	beq	r2,zero,800494 <uart_read_isr_function+0x68>

		if (atrial_event) {
  800460:	d0a72683 	ldbu	r2,-25446(gp)
  800464:	10803fcc 	andi	r2,r2,255
  800468:	10000326 	beq	r2,zero,800478 <uart_read_isr_function+0x4c>
			printf("Atrial Transmitted to UART!\n");
  80046c:	01002074 	movhi	r4,129
  800470:	21379504 	addi	r4,r4,-8620
  800474:	0806ba40 	call	806ba4 <puts>
		}

		if (ventricular_event) {
  800478:	d0a72703 	ldbu	r2,-25444(gp)
  80047c:	10803fcc 	andi	r2,r2,255
  800480:	10000f26 	beq	r2,zero,8004c0 <uart_read_isr_function+0x94>
			printf("Ventricular Transmitted to UART!\n");
  800484:	01002074 	movhi	r4,129
  800488:	21379c04 	addi	r4,r4,-8592
  80048c:	0806ba40 	call	806ba4 <puts>
		}
		return;
  800490:	00000b06 	br	8004c0 <uart_read_isr_function+0x94>
	}

	if (temp == 'A') {
  800494:	e0bffd07 	ldb	r2,-12(fp)
  800498:	10801058 	cmpnei	r2,r2,65
  80049c:	1000021e 	bne	r2,zero,8004a8 <uart_read_isr_function+0x7c>
		send_atrial_event(false);
  8004a0:	0009883a 	mov	r4,zero
  8004a4:	0800e100 	call	800e10 <send_atrial_event>
	}
	if (temp == 'V') {
  8004a8:	e0bffd07 	ldb	r2,-12(fp)
  8004ac:	10801598 	cmpnei	r2,r2,86
  8004b0:	1000041e 	bne	r2,zero,8004c4 <uart_read_isr_function+0x98>
		send_ventricular_event(false);
  8004b4:	0009883a 	mov	r4,zero
  8004b8:	0800e700 	call	800e70 <send_ventricular_event>
  8004bc:	00000106 	br	8004c4 <uart_read_isr_function+0x98>
		}

		if (ventricular_event) {
			printf("Ventricular Transmitted to UART!\n");
		}
		return;
  8004c0:	0001883a 	nop
	}
	if (temp == 'V') {
		send_ventricular_event(false);
	}
	//printf("UART read: %c\n", temp);
}
  8004c4:	e037883a 	mov	sp,fp
  8004c8:	dfc00117 	ldw	ra,4(sp)
  8004cc:	df000017 	ldw	fp,0(sp)
  8004d0:	dec00204 	addi	sp,sp,8
  8004d4:	f800283a 	ret

008004d8 <a_events_timer_isr_function>:

alt_u32 a_events_timer_isr_function(void* context) {
  8004d8:	defffd04 	addi	sp,sp,-12
  8004dc:	df000215 	stw	fp,8(sp)
  8004e0:	df000204 	addi	fp,sp,8
  8004e4:	e13fff15 	stw	r4,-4(fp)
	int *a_timer_count =(int*) context;
  8004e8:	e0bfff17 	ldw	r2,-4(fp)
  8004ec:	e0bffe15 	stw	r2,-8(fp)
	(*a_timer_count)++;
  8004f0:	e0bffe17 	ldw	r2,-8(fp)
  8004f4:	10800017 	ldw	r2,0(r2)
  8004f8:	10c00044 	addi	r3,r2,1
  8004fc:	e0bffe17 	ldw	r2,-8(fp)
  800500:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  800504:	00800044 	movi	r2,1
}
  800508:	e037883a 	mov	sp,fp
  80050c:	df000017 	ldw	fp,0(sp)
  800510:	dec00104 	addi	sp,sp,4
  800514:	f800283a 	ret

00800518 <v_events_timer_isr_function>:

alt_u32 v_events_timer_isr_function(void* context) {
  800518:	defffd04 	addi	sp,sp,-12
  80051c:	df000215 	stw	fp,8(sp)
  800520:	df000204 	addi	fp,sp,8
  800524:	e13fff15 	stw	r4,-4(fp)
	int *v_timer_count =(int*) context;
  800528:	e0bfff17 	ldw	r2,-4(fp)
  80052c:	e0bffe15 	stw	r2,-8(fp)
	(*v_timer_count)++;
  800530:	e0bffe17 	ldw	r2,-8(fp)
  800534:	10800017 	ldw	r2,0(r2)
  800538:	10c00044 	addi	r3,r2,1
  80053c:	e0bffe17 	ldw	r2,-8(fp)
  800540:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  800544:	00800044 	movi	r2,1
}
  800548:	e037883a 	mov	sp,fp
  80054c:	df000017 	ldw	fp,0(sp)
  800550:	dec00104 	addi	sp,sp,4
  800554:	f800283a 	ret

00800558 <system_timer_isr_function>:

alt_u32 system_timer_isr_function(void* context) {
  800558:	defffd04 	addi	sp,sp,-12
  80055c:	df000215 	stw	fp,8(sp)
  800560:	df000204 	addi	fp,sp,8
  800564:	e13fff15 	stw	r4,-4(fp)
	int *system_timer_count = (int* ) context;
  800568:	e0bfff17 	ldw	r2,-4(fp)
  80056c:	e0bffe15 	stw	r2,-8(fp)
	(*system_timer_count)++;
  800570:	e0bffe17 	ldw	r2,-8(fp)
  800574:	10800017 	ldw	r2,0(r2)
  800578:	10c00044 	addi	r3,r2,1
  80057c:	e0bffe17 	ldw	r2,-8(fp)
  800580:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  800584:	00800044 	movi	r2,1
}
  800588:	e037883a 	mov	sp,fp
  80058c:	df000017 	ldw	fp,0(sp)
  800590:	dec00104 	addi	sp,sp,4
  800594:	f800283a 	ret

00800598 <main>:

int main(void)
{
  800598:	deff7804 	addi	sp,sp,-544
  80059c:	dfc08715 	stw	ra,540(sp)
  8005a0:	df008615 	stw	fp,536(sp)
  8005a4:	df008604 	addi	fp,sp,536
	printf("Starting.\n");
  8005a8:	01002074 	movhi	r4,129
  8005ac:	2137a504 	addi	r4,r4,-8556
  8005b0:	0806ba40 	call	806ba4 <puts>

	unsigned int switch_value = 0;
  8005b4:	e03f8715 	stw	zero,-484(fp)
	int button_value = 1;
  8005b8:	00800044 	movi	r2,1
  8005bc:	e0bf8f15 	stw	r2,-452(fp)
	void* button_context = (void*) &button_value; // Cast before passing context to isr
  8005c0:	e0bf8f04 	addi	r2,fp,-452
  8005c4:	e0bf8815 	stw	r2,-480(fp)

	unsigned int system_time = 0;
  8005c8:	e03f7a15 	stw	zero,-536(fp)
	unsigned int previous_system_time = 0;
  8005cc:	e03f8915 	stw	zero,-476(fp)
	TickData data;
	reset(&data);
  8005d0:	e0bf9004 	addi	r2,fp,-448
  8005d4:	1009883a 	mov	r4,r2
  8005d8:	08052180 	call	805218 <reset>

	//========= 	  INTERRUPTS  	   =========

	// Clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8005dc:	0007883a 	mov	r3,zero
  8005e0:	00804074 	movhi	r2,257
  8005e4:	10842b04 	addi	r2,r2,4268
  8005e8:	10c00035 	stwio	r3,0(r2)

	// Enable interrupts
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  8005ec:	00c001c4 	movi	r3,7
  8005f0:	00804074 	movhi	r2,257
  8005f4:	10842a04 	addi	r2,r2,4264
  8005f8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(UART_BASE, 0x0080);
  8005fc:	00c02004 	movi	r3,128
  800600:	00804074 	movhi	r2,257
  800604:	10841204 	addi	r2,r2,4168
  800608:	10c00035 	stwio	r3,0(r2)

	// Register the isr
	alt_irq_register(KEYS_IRQ, button_context, buttons_interrupts_function);
  80060c:	01802034 	movhi	r6,128
  800610:	3180a404 	addi	r6,r6,656
  800614:	e17f8817 	ldw	r5,-480(fp)
  800618:	01000104 	movi	r4,4
  80061c:	0809ebc0 	call	809ebc <alt_irq_register>
	alt_irq_register(UART_IRQ, NULL, uart_read_isr_function);
  800620:	01802034 	movhi	r6,128
  800624:	31810b04 	addi	r6,r6,1068
  800628:	000b883a 	mov	r5,zero
  80062c:	0009883a 	mov	r4,zero
  800630:	0809ebc0 	call	809ebc <alt_irq_register>

	printf("Interrupts Initialised.\n");
  800634:	01002074 	movhi	r4,129
  800638:	2137a804 	addi	r4,r4,-8544
  80063c:	0806ba40 	call	806ba4 <puts>
	//========= 	  INTERRUPTS  	   =========
	//========= 	    TIMERS  	   =========
	// Lets LEDs stay on for 500 seconds.
	alt_alarm a_pace_led_timer;
	alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  800640:	e0bfd504 	addi	r2,fp,-172
  800644:	000f883a 	mov	r7,zero
  800648:	01802034 	movhi	r6,128
  80064c:	3180e304 	addi	r6,r6,908
  800650:	01400644 	movi	r5,25
  800654:	1009883a 	mov	r4,r2
  800658:	0809b6c0 	call	809b6c <alt_alarm_start>

	alt_alarm v_pace_led_timer;
	alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  80065c:	e0bfdb04 	addi	r2,fp,-148
  800660:	000f883a 	mov	r7,zero
  800664:	01802034 	movhi	r6,128
  800668:	3180ed04 	addi	r6,r6,948
  80066c:	01400644 	movi	r5,25
  800670:	1009883a 	mov	r4,r2
  800674:	0809b6c0 	call	809b6c <alt_alarm_start>

	alt_alarm a_sense_led_timer;
	alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  800678:	e0bfe104 	addi	r2,fp,-124
  80067c:	000f883a 	mov	r7,zero
  800680:	01802034 	movhi	r6,128
  800684:	3180f704 	addi	r6,r6,988
  800688:	01400644 	movi	r5,25
  80068c:	1009883a 	mov	r4,r2
  800690:	0809b6c0 	call	809b6c <alt_alarm_start>

	alt_alarm v_sense_led_timer;
	alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  800694:	e0bfe704 	addi	r2,fp,-100
  800698:	000f883a 	mov	r7,zero
  80069c:	01802034 	movhi	r6,128
  8006a0:	31810104 	addi	r6,r6,1028
  8006a4:	01400644 	movi	r5,25
  8006a8:	1009883a 	mov	r4,r2
  8006ac:	0809b6c0 	call	809b6c <alt_alarm_start>

	alt_alarm system_timer;
	int system_timer_count = 0;
  8006b0:	e03ff315 	stw	zero,-52(fp)
	void *system_timer_context = (void*) &system_timer_count;
  8006b4:	e0bff304 	addi	r2,fp,-52
  8006b8:	e0bf8a15 	stw	r2,-472(fp)
	alt_alarm_start(&system_timer, 1, system_timer_isr_function, system_timer_context);
  8006bc:	e0bfed04 	addi	r2,fp,-76
  8006c0:	e1ff8a17 	ldw	r7,-472(fp)
  8006c4:	01802034 	movhi	r6,128
  8006c8:	31815604 	addi	r6,r6,1368
  8006cc:	01400044 	movi	r5,1
  8006d0:	1009883a 	mov	r4,r2
  8006d4:	0809b6c0 	call	809b6c <alt_alarm_start>

	alt_alarm a_events_timer;
	//int a_timer_count = 0;
	void *a_events_timer_context = (void*) &a_timer_count;
  8006d8:	d0a72b04 	addi	r2,gp,-25428
  8006dc:	e0bf8b15 	stw	r2,-468(fp)
	alt_alarm_start(&a_events_timer, 1, a_events_timer_isr_function, a_events_timer_context);
  8006e0:	e0bff404 	addi	r2,fp,-48
  8006e4:	e1ff8b17 	ldw	r7,-468(fp)
  8006e8:	01802034 	movhi	r6,128
  8006ec:	31813604 	addi	r6,r6,1240
  8006f0:	01400044 	movi	r5,1
  8006f4:	1009883a 	mov	r4,r2
  8006f8:	0809b6c0 	call	809b6c <alt_alarm_start>

	alt_alarm v_events_timer;
	//int v_timer_count = 0;
	void *v_events_timer_context = (void*) &v_timer_count;
  8006fc:	d0a72c04 	addi	r2,gp,-25424
  800700:	e0bf8c15 	stw	r2,-464(fp)
	alt_alarm_start(&v_events_timer, 1, v_events_timer_isr_function, v_events_timer_context);
  800704:	e0bffa04 	addi	r2,fp,-24
  800708:	e1ff8c17 	ldw	r7,-464(fp)
  80070c:	01802034 	movhi	r6,128
  800710:	31814604 	addi	r6,r6,1304
  800714:	01400044 	movi	r5,1
  800718:	1009883a 	mov	r4,r2
  80071c:	0809b6c0 	call	809b6c <alt_alarm_start>


	//========= 	    TIMERS  	   =========
	printf("Timers Initialised.\n");
  800720:	01002074 	movhi	r4,129
  800724:	2137ae04 	addi	r4,r4,-8520
  800728:	0806ba40 	call	806ba4 <puts>

	printf("Entering Loop.\n");
  80072c:	01002074 	movhi	r4,129
  800730:	2137b304 	addi	r4,r4,-8500
  800734:	0806ba40 	call	806ba4 <puts>
	while(1) {
		previous_system_time = system_time;
  800738:	e0bf7a17 	ldw	r2,-536(fp)
  80073c:	e0bf8915 	stw	r2,-476(fp)
		system_time = system_timer_count;
  800740:	e0bff317 	ldw	r2,-52(fp)
  800744:	e0bf7a15 	stw	r2,-536(fp)
		data.AS = 0;
  800748:	e03fad05 	stb	zero,-332(fp)
		data.VS = 0;
  80074c:	e03fad45 	stb	zero,-331(fp)
		data.deltaT = system_time - previous_system_time;
  800750:	e0ff7a17 	ldw	r3,-536(fp)
  800754:	e0bf8917 	ldw	r2,-476(fp)
  800758:	1885c83a 	sub	r2,r3,r2
  80075c:	1009883a 	mov	r4,r2
  800760:	08069b80 	call	8069b8 <__floatunsidf>
  800764:	1009883a 	mov	r4,r2
  800768:	180b883a 	mov	r5,r3
  80076c:	e13fa915 	stw	r4,-348(fp)
  800770:	e17faa15 	stw	r5,-344(fp)
		//tick(&data);

		// Get switch state from switch peripheral (returns a binary)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800774:	00804074 	movhi	r2,257
  800778:	10842404 	addi	r2,r2,4240
  80077c:	10800037 	ldwio	r2,0(r2)
  800780:	e0bf8715 	stw	r2,-484(fp)


		// ========= 	  PULSE MODES 	  =========
		if (switch_value & (1 << PULSE_MODE_SWITCH)) {
  800784:	e0bf8717 	ldw	r2,-484(fp)
  800788:	1080004c 	andi	r2,r2,1
  80078c:	10000326 	beq	r2,zero,80079c <main+0x204>
			// SW0 is ON
			pulse_mode = BUTTON_MODE;
  800790:	00800044 	movi	r2,1
  800794:	d0a72605 	stb	r2,-25448(gp)
  800798:	00000406 	br	8007ac <main+0x214>
		} else if (!(switch_value & (1 << PULSE_MODE_SWITCH))) {
  80079c:	e0bf8717 	ldw	r2,-484(fp)
  8007a0:	1080004c 	andi	r2,r2,1
  8007a4:	1000011e 	bne	r2,zero,8007ac <main+0x214>
			// SW0 is OFF
			pulse_mode = UART_MODE;
  8007a8:	d0272605 	stb	zero,-25448(gp)
		}
		// ========= 	  PULSE MODES 	  =========

		// ========= IMPLEMENTATION MODES =========
		if (switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH)) {
  8007ac:	e0bf8717 	ldw	r2,-484(fp)
  8007b0:	1080008c 	andi	r2,r2,2
  8007b4:	10000326 	beq	r2,zero,8007c4 <main+0x22c>
			// SW1 is ON
			implementation_mode = SCCHARTS_MODE;
  8007b8:	00800044 	movi	r2,1
  8007bc:	d0a72645 	stb	r2,-25447(gp)
  8007c0:	00000406 	br	8007d4 <main+0x23c>
		} else if (!(switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH))) {
  8007c4:	e0bf8717 	ldw	r2,-484(fp)
  8007c8:	1080008c 	andi	r2,r2,2
  8007cc:	1000011e 	bne	r2,zero,8007d4 <main+0x23c>
			// SW1 is OFF
			implementation_mode = C_MODE;
  8007d0:	d0272645 	stb	zero,-25447(gp)
		}
		// ========= IMPLEMENTATION MODES =========

		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING
		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING
		if (atrial_event) {
  8007d4:	d0a72683 	ldbu	r2,-25446(gp)
  8007d8:	10803fcc 	andi	r2,r2,255
  8007dc:	10002d26 	beq	r2,zero,800894 <main+0x2fc>
			printf("\n");
  8007e0:	01000284 	movi	r4,10
  8007e4:	0806acc0 	call	806acc <putchar>
			atrial_event = false; // COULD BE A PROBLEM?
  8007e8:	d0272685 	stb	zero,-25446(gp)
			// If we are in C_Mode, restart timer
			if (implementation_mode == C_MODE) {
  8007ec:	d0a72643 	ldbu	r2,-25447(gp)
  8007f0:	1080005c 	xori	r2,r2,1
  8007f4:	10803fcc 	andi	r2,r2,255
  8007f8:	10000826 	beq	r2,zero,80081c <main+0x284>
				if (v_timer_count >= PVARP_VALUE) {
  8007fc:	d0a72c17 	ldw	r2,-25424(gp)
  800800:	10800c90 	cmplti	r2,r2,50
  800804:	1000111e 	bne	r2,zero,80084c <main+0x2b4>
					atrial_sense = true;
  800808:	00800044 	movi	r2,1
  80080c:	d0a72785 	stb	r2,-25442(gp)
					ventricular_sense = false;
  800810:	d02727c5 	stb	zero,-25441(gp)
					a_timer_count = 0;
  800814:	d0272b15 	stw	zero,-25428(gp)
  800818:	00000c06 	br	80084c <main+0x2b4>
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  80081c:	d0a72643 	ldbu	r2,-25447(gp)
  800820:	10803fcc 	andi	r2,r2,255
  800824:	10000926 	beq	r2,zero,80084c <main+0x2b4>
				SCCHARTS_Mode_Pacemaker();
  800828:	08011b00 	call	8011b0 <SCCHARTS_Mode_Pacemaker>
				if (!a_is_paced) {
  80082c:	d0a726c3 	ldbu	r2,-25445(gp)
  800830:	1080005c 	xori	r2,r2,1
  800834:	10803fcc 	andi	r2,r2,255
  800838:	10000326 	beq	r2,zero,800848 <main+0x2b0>
					data.AS = 1;
  80083c:	00800044 	movi	r2,1
  800840:	e0bfad05 	stb	r2,-332(fp)
  800844:	00000106 	br	80084c <main+0x2b4>
				} else {
					data.AS = 0;
  800848:	e03fad05 	stb	zero,-332(fp)
				}
			}

			if (a_is_paced) {
  80084c:	d0a726c3 	ldbu	r2,-25445(gp)
  800850:	10803fcc 	andi	r2,r2,255
  800854:	10000826 	beq	r2,zero,800878 <main+0x2e0>
				led_pace_atrial_event = true;
  800858:	00800044 	movi	r2,1
  80085c:	d0a72885 	stb	r2,-25438(gp)
				atrial_sense_paced = true;
  800860:	00800044 	movi	r2,1
  800864:	d0a72805 	stb	r2,-25440(gp)
				printf("Atrial Sensed! - Paced!\n");
  800868:	01002074 	movhi	r4,129
  80086c:	2137b704 	addi	r4,r4,-8484
  800870:	0806ba40 	call	806ba4 <puts>
  800874:	00000606 	br	800890 <main+0x2f8>
			} else {
				led_sense_atrial_event = true;
  800878:	00800044 	movi	r2,1
  80087c:	d0a72905 	stb	r2,-25436(gp)
				atrial_sense_paced = false;
  800880:	d0272805 	stb	zero,-25440(gp)
				printf("Atrial Sensed! - Not Paced\n");
  800884:	01002074 	movhi	r4,129
  800888:	2137bd04 	addi	r4,r4,-8460
  80088c:	0806ba40 	call	806ba4 <puts>
			}

			//atrial_sense = true;

			a_is_paced = false;
  800890:	d02726c5 	stb	zero,-25445(gp)
		}

		if (ventricular_event) {
  800894:	d0a72703 	ldbu	r2,-25444(gp)
  800898:	10803fcc 	andi	r2,r2,255
  80089c:	10003626 	beq	r2,zero,800978 <main+0x3e0>
			ventricular_event = false;
  8008a0:	d0272705 	stb	zero,-25444(gp)

			// do stuff
			// If we are in C_Mode, restart timer
			if (implementation_mode == C_MODE) {
  8008a4:	d0a72643 	ldbu	r2,-25447(gp)
  8008a8:	1080005c 	xori	r2,r2,1
  8008ac:	10803fcc 	andi	r2,r2,255
  8008b0:	10000d26 	beq	r2,zero,8008e8 <main+0x350>
				// Reset timer if v is sensed after VRP
				if (v_timer_count >= VRP_VALUE) {
  8008b4:	d0a72c17 	ldw	r2,-25424(gp)
  8008b8:	10802590 	cmplti	r2,r2,150
  8008bc:	1000041e 	bne	r2,zero,8008d0 <main+0x338>
					ventricular_sense = true;
  8008c0:	00800044 	movi	r2,1
  8008c4:	d0a727c5 	stb	r2,-25441(gp)
					atrial_sense = false;
  8008c8:	d0272785 	stb	zero,-25442(gp)
					v_timer_count = 0;
  8008cc:	d0272c15 	stw	zero,-25424(gp)
				}
				if (v_timer_count >= URI_VALUE) {
  8008d0:	d0a72c17 	ldw	r2,-25424(gp)
  8008d4:	1080e110 	cmplti	r2,r2,900
  8008d8:	10000f1e 	bne	r2,zero,800918 <main+0x380>
					ventricular_sense = true;
  8008dc:	00800044 	movi	r2,1
  8008e0:	d0a727c5 	stb	r2,-25441(gp)
  8008e4:	00000c06 	br	800918 <main+0x380>
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  8008e8:	d0a72643 	ldbu	r2,-25447(gp)
  8008ec:	10803fcc 	andi	r2,r2,255
  8008f0:	10000926 	beq	r2,zero,800918 <main+0x380>
				if (!v_is_paced) {
  8008f4:	d0a72743 	ldbu	r2,-25443(gp)
  8008f8:	1080005c 	xori	r2,r2,1
  8008fc:	10803fcc 	andi	r2,r2,255
  800900:	10000326 	beq	r2,zero,800910 <main+0x378>
					data.VS = 1;
  800904:	00800044 	movi	r2,1
  800908:	e0bfad45 	stb	r2,-331(fp)
  80090c:	00000106 	br	800914 <main+0x37c>
				}
				else {
					data.VS = 0;
  800910:	e03fad45 	stb	zero,-331(fp)
				}
				SCCHARTS_Mode_Pacemaker();
  800914:	08011b00 	call	8011b0 <SCCHARTS_Mode_Pacemaker>
			}

			if (v_is_paced) {
  800918:	d0a72743 	ldbu	r2,-25443(gp)
  80091c:	10803fcc 	andi	r2,r2,255
  800920:	10000826 	beq	r2,zero,800944 <main+0x3ac>
				led_pace_ventricular_event = true;
  800924:	00800044 	movi	r2,1
  800928:	d0a728c5 	stb	r2,-25437(gp)
				ventricular_sense_paced = true;
  80092c:	00800044 	movi	r2,1
  800930:	d0a72845 	stb	r2,-25439(gp)
				printf("Ventricle Sensed! -- Paced\n");
  800934:	01002074 	movhi	r4,129
  800938:	2137c404 	addi	r4,r4,-8432
  80093c:	0806ba40 	call	806ba4 <puts>
  800940:	00000606 	br	80095c <main+0x3c4>
			} else {
				led_sense_ventricular_event = true;
  800944:	00800044 	movi	r2,1
  800948:	d0a72945 	stb	r2,-25435(gp)
				ventricular_sense_paced = false;
  80094c:	d0272845 	stb	zero,-25439(gp)
				printf("Ventricle Sensed! -- Not Paced\n");
  800950:	01002074 	movhi	r4,129
  800954:	2137cb04 	addi	r4,r4,-8404
  800958:	0806ba40 	call	806ba4 <puts>
			}


			if (!ventricular_sense) {
  80095c:	d0a727c3 	ldbu	r2,-25441(gp)
  800960:	1080005c 	xori	r2,r2,1
  800964:	10803fcc 	andi	r2,r2,255
  800968:	10000226 	beq	r2,zero,800974 <main+0x3dc>
				led_pace_ventricular_event = false;
  80096c:	d02728c5 	stb	zero,-25437(gp)
				led_sense_ventricular_event = false;
  800970:	d0272945 	stb	zero,-25435(gp)
			}


			v_is_paced = false;
  800974:	d0272745 	stb	zero,-25443(gp)

		// IMPLEMENTATION
		// IMPLEMENTATION


		if (implementation_mode == C_MODE) {
  800978:	d0a72643 	ldbu	r2,-25447(gp)
  80097c:	1080005c 	xori	r2,r2,1
  800980:	10803fcc 	andi	r2,r2,255
  800984:	10000626 	beq	r2,zero,8009a0 <main+0x408>
			if (v_timer_count >= LRI_VALUE) {
				ventricular_sense = false;
			}
			*/

			C_Mode_Pacemaker(a_timer_count, v_timer_count);
  800988:	d0a72b17 	ldw	r2,-25428(gp)
  80098c:	d0e72c17 	ldw	r3,-25424(gp)
  800990:	180b883a 	mov	r5,r3
  800994:	1009883a 	mov	r4,r2
  800998:	08011080 	call	801108 <C_Mode_Pacemaker>
  80099c:	00001906 	br	800a04 <main+0x46c>
			//atrial_sense_paced = false;
			//ventricular_sense_paced = false;

		} else if (implementation_mode == SCCHARTS_MODE) {
  8009a0:	d0a72643 	ldbu	r2,-25447(gp)
  8009a4:	10803fcc 	andi	r2,r2,255
  8009a8:	10001626 	beq	r2,zero,800a04 <main+0x46c>
			tick(&data);
  8009ac:	e0bf9004 	addi	r2,fp,-448
  8009b0:	1009883a 	mov	r4,r2
  8009b4:	08053d80 	call	8053d8 <tick>

			int a_test = data.AP;
  8009b8:	e0bfad83 	ldbu	r2,-330(fp)
  8009bc:	10803fcc 	andi	r2,r2,255
  8009c0:	1080201c 	xori	r2,r2,128
  8009c4:	10bfe004 	addi	r2,r2,-128
  8009c8:	e0bf8d15 	stw	r2,-460(fp)
			int v_test = data.VP;
  8009cc:	e0bfadc3 	ldbu	r2,-329(fp)
  8009d0:	10803fcc 	andi	r2,r2,255
  8009d4:	1080201c 	xori	r2,r2,128
  8009d8:	10bfe004 	addi	r2,r2,-128
  8009dc:	e0bf8e15 	stw	r2,-456(fp)

			if (a_test) {
  8009e0:	e0bf8d17 	ldw	r2,-460(fp)
  8009e4:	10000226 	beq	r2,zero,8009f0 <main+0x458>
				send_atrial_event(true);
  8009e8:	01000044 	movi	r4,1
  8009ec:	0800e100 	call	800e10 <send_atrial_event>
			}
			if (v_test) {
  8009f0:	e0bf8e17 	ldw	r2,-456(fp)
  8009f4:	10000226 	beq	r2,zero,800a00 <main+0x468>
				send_ventricular_event(true);
  8009f8:	01000044 	movi	r4,1
  8009fc:	0800e700 	call	800e70 <send_ventricular_event>
			}
			SCCHARTS_Mode_Pacemaker();
  800a00:	08011b00 	call	8011b0 <SCCHARTS_Mode_Pacemaker>
		// IMPLEMENTATION


		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		if (led_pace_atrial_event) {
  800a04:	d0a72883 	ldbu	r2,-25438(gp)
  800a08:	10803fcc 	andi	r2,r2,255
  800a0c:	10003e26 	beq	r2,zero,800b08 <main+0x570>
			if (!a_pace_led_timer_already_started) {
  800a10:	d0a72983 	ldbu	r2,-25434(gp)
  800a14:	1080005c 	xori	r2,r2,1
  800a18:	10803fcc 	andi	r2,r2,255
  800a1c:	10000c26 	beq	r2,zero,800a50 <main+0x4b8>
				alt_alarm_stop(&a_pace_led_timer);
  800a20:	e0bfd504 	addi	r2,fp,-172
  800a24:	1009883a 	mov	r4,r2
  800a28:	080a6280 	call	80a628 <alt_alarm_stop>
				alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  800a2c:	e0bfd504 	addi	r2,fp,-172
  800a30:	000f883a 	mov	r7,zero
  800a34:	01802034 	movhi	r6,128
  800a38:	3180e304 	addi	r6,r6,908
  800a3c:	01400644 	movi	r5,25
  800a40:	1009883a 	mov	r4,r2
  800a44:	0809b6c0 	call	809b6c <alt_alarm_start>
				a_pace_led_timer_already_started = true;
  800a48:	00800044 	movi	r2,1
  800a4c:	d0a72985 	stb	r2,-25434(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800a50:	00804074 	movhi	r2,257
  800a54:	10841c04 	addi	r2,r2,4208
  800a58:	10800037 	ldwio	r2,0(r2)
  800a5c:	e0bf7b15 	stw	r2,-532(fp)

			if (implementation_mode == C_MODE) {
  800a60:	d0a72643 	ldbu	r2,-25447(gp)
  800a64:	1080005c 	xori	r2,r2,1
  800a68:	10803fcc 	andi	r2,r2,255
  800a6c:	10001026 	beq	r2,zero,800ab0 <main+0x518>
				// SET ALL BITS UP FROM LEDG4 TO LEDG7
				for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800a70:	00800104 	movi	r2,4
  800a74:	e0bf7c15 	stw	r2,-528(fp)
  800a78:	00000906 	br	800aa0 <main+0x508>
					led_value = led_value |= (1<<i);
  800a7c:	00c00044 	movi	r3,1
  800a80:	e0bf7c17 	ldw	r2,-528(fp)
  800a84:	1884983a 	sll	r2,r3,r2
  800a88:	e0ff7b17 	ldw	r3,-532(fp)
  800a8c:	1884b03a 	or	r2,r3,r2
  800a90:	e0bf7b15 	stw	r2,-532(fp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

			if (implementation_mode == C_MODE) {
				// SET ALL BITS UP FROM LEDG4 TO LEDG7
				for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800a94:	e0bf7c17 	ldw	r2,-528(fp)
  800a98:	10800044 	addi	r2,r2,1
  800a9c:	e0bf7c15 	stw	r2,-528(fp)
  800aa0:	e0bf7c17 	ldw	r2,-528(fp)
  800aa4:	10800210 	cmplti	r2,r2,8
  800aa8:	103ff41e 	bne	r2,zero,800a7c <__alt_mem_onchip_mem+0xff7f8a7c>
  800aac:	00001206 	br	800af8 <main+0x560>
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  800ab0:	d0a72643 	ldbu	r2,-25447(gp)
  800ab4:	10803fcc 	andi	r2,r2,255
  800ab8:	10000f26 	beq	r2,zero,800af8 <main+0x560>
				for (int i = LEDG4; i < LEDG7 + 1; i += 2) {
  800abc:	00800104 	movi	r2,4
  800ac0:	e0bf7d15 	stw	r2,-524(fp)
  800ac4:	00000906 	br	800aec <main+0x554>
					led_value = led_value |= (1<<i);
  800ac8:	00c00044 	movi	r3,1
  800acc:	e0bf7d17 	ldw	r2,-524(fp)
  800ad0:	1884983a 	sll	r2,r3,r2
  800ad4:	e0ff7b17 	ldw	r3,-532(fp)
  800ad8:	1884b03a 	or	r2,r3,r2
  800adc:	e0bf7b15 	stw	r2,-532(fp)
				// SET ALL BITS UP FROM LEDG4 TO LEDG7
				for (int i = LEDG4; i < LEDG7 + 1; i++) {
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
				for (int i = LEDG4; i < LEDG7 + 1; i += 2) {
  800ae0:	e0bf7d17 	ldw	r2,-524(fp)
  800ae4:	10800084 	addi	r2,r2,2
  800ae8:	e0bf7d15 	stw	r2,-524(fp)
  800aec:	e0bf7d17 	ldw	r2,-524(fp)
  800af0:	10800210 	cmplti	r2,r2,8
  800af4:	103ff41e 	bne	r2,zero,800ac8 <__alt_mem_onchip_mem+0xff7f8ac8>
					led_value = led_value |= (1<<i);
				}
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800af8:	00804074 	movhi	r2,257
  800afc:	10841c04 	addi	r2,r2,4208
  800b00:	e0ff7b17 	ldw	r3,-532(fp)
  800b04:	10c00035 	stwio	r3,0(r2)

		}

		if (led_pace_ventricular_event) {
  800b08:	d0a728c3 	ldbu	r2,-25437(gp)
  800b0c:	10803fcc 	andi	r2,r2,255
  800b10:	10003c26 	beq	r2,zero,800c04 <main+0x66c>
			if (!v_pace_led_timer_already_started) {
  800b14:	d0a729c3 	ldbu	r2,-25433(gp)
  800b18:	1080005c 	xori	r2,r2,1
  800b1c:	10803fcc 	andi	r2,r2,255
  800b20:	10000c26 	beq	r2,zero,800b54 <main+0x5bc>
				alt_alarm_stop(&v_pace_led_timer);
  800b24:	e0bfdb04 	addi	r2,fp,-148
  800b28:	1009883a 	mov	r4,r2
  800b2c:	080a6280 	call	80a628 <alt_alarm_stop>
				alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  800b30:	e0bfdb04 	addi	r2,fp,-148
  800b34:	000f883a 	mov	r7,zero
  800b38:	01802034 	movhi	r6,128
  800b3c:	3180ed04 	addi	r6,r6,948
  800b40:	01400644 	movi	r5,25
  800b44:	1009883a 	mov	r4,r2
  800b48:	0809b6c0 	call	809b6c <alt_alarm_start>
				v_pace_led_timer_already_started = true;
  800b4c:	00800044 	movi	r2,1
  800b50:	d0a729c5 	stb	r2,-25433(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800b54:	00804074 	movhi	r2,257
  800b58:	10841c04 	addi	r2,r2,4208
  800b5c:	10800037 	ldwio	r2,0(r2)
  800b60:	e0bf7e15 	stw	r2,-520(fp)

			if (implementation_mode == C_MODE) {
  800b64:	d0a72643 	ldbu	r2,-25447(gp)
  800b68:	1080005c 	xori	r2,r2,1
  800b6c:	10803fcc 	andi	r2,r2,255
  800b70:	10000f26 	beq	r2,zero,800bb0 <main+0x618>
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800b74:	e03f7f15 	stw	zero,-516(fp)
  800b78:	00000906 	br	800ba0 <main+0x608>
					led_value = led_value |= (1<<i);
  800b7c:	00c00044 	movi	r3,1
  800b80:	e0bf7f17 	ldw	r2,-516(fp)
  800b84:	1884983a 	sll	r2,r3,r2
  800b88:	e0ff7e17 	ldw	r3,-520(fp)
  800b8c:	1884b03a 	or	r2,r3,r2
  800b90:	e0bf7e15 	stw	r2,-520(fp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

			if (implementation_mode == C_MODE) {
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800b94:	e0bf7f17 	ldw	r2,-516(fp)
  800b98:	10800044 	addi	r2,r2,1
  800b9c:	e0bf7f15 	stw	r2,-516(fp)
  800ba0:	e0bf7f17 	ldw	r2,-516(fp)
  800ba4:	10800110 	cmplti	r2,r2,4
  800ba8:	103ff41e 	bne	r2,zero,800b7c <__alt_mem_onchip_mem+0xff7f8b7c>
  800bac:	00001106 	br	800bf4 <main+0x65c>
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  800bb0:	d0a72643 	ldbu	r2,-25447(gp)
  800bb4:	10803fcc 	andi	r2,r2,255
  800bb8:	10000e26 	beq	r2,zero,800bf4 <main+0x65c>
				for (int i = LEDG0; i < LEDG3 + 1; i += 2) {
  800bbc:	e03f8015 	stw	zero,-512(fp)
  800bc0:	00000906 	br	800be8 <main+0x650>
					led_value = led_value |= (1<<i);
  800bc4:	00c00044 	movi	r3,1
  800bc8:	e0bf8017 	ldw	r2,-512(fp)
  800bcc:	1884983a 	sll	r2,r3,r2
  800bd0:	e0ff7e17 	ldw	r3,-520(fp)
  800bd4:	1884b03a 	or	r2,r3,r2
  800bd8:	e0bf7e15 	stw	r2,-520(fp)
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = LEDG0; i < LEDG3 + 1; i++) {
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
				for (int i = LEDG0; i < LEDG3 + 1; i += 2) {
  800bdc:	e0bf8017 	ldw	r2,-512(fp)
  800be0:	10800084 	addi	r2,r2,2
  800be4:	e0bf8015 	stw	r2,-512(fp)
  800be8:	e0bf8017 	ldw	r2,-512(fp)
  800bec:	10800110 	cmplti	r2,r2,4
  800bf0:	103ff41e 	bne	r2,zero,800bc4 <__alt_mem_onchip_mem+0xff7f8bc4>
					led_value = led_value |= (1<<i);
				}
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800bf4:	00804074 	movhi	r2,257
  800bf8:	10841c04 	addi	r2,r2,4208
  800bfc:	e0ff7e17 	ldw	r3,-520(fp)
  800c00:	10c00035 	stwio	r3,0(r2)
		}
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==

		// SENSE LEDS == SENSE LEDS == SENSE LEDS == SENSE LEDS ==
		if (led_sense_atrial_event) {
  800c04:	d0a72903 	ldbu	r2,-25436(gp)
  800c08:	10803fcc 	andi	r2,r2,255
  800c0c:	10003e26 	beq	r2,zero,800d08 <main+0x770>
			if (!a_sense_led_timer_already_started) {
  800c10:	d0a72a03 	ldbu	r2,-25432(gp)
  800c14:	1080005c 	xori	r2,r2,1
  800c18:	10803fcc 	andi	r2,r2,255
  800c1c:	10000c26 	beq	r2,zero,800c50 <main+0x6b8>
				alt_alarm_stop(&a_sense_led_timer);
  800c20:	e0bfe104 	addi	r2,fp,-124
  800c24:	1009883a 	mov	r4,r2
  800c28:	080a6280 	call	80a628 <alt_alarm_stop>
				alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  800c2c:	e0bfe104 	addi	r2,fp,-124
  800c30:	000f883a 	mov	r7,zero
  800c34:	01802034 	movhi	r6,128
  800c38:	3180f704 	addi	r6,r6,988
  800c3c:	01400644 	movi	r5,25
  800c40:	1009883a 	mov	r4,r2
  800c44:	0809b6c0 	call	809b6c <alt_alarm_start>
				a_sense_led_timer_already_started = true;
  800c48:	00800044 	movi	r2,1
  800c4c:	d0a72a05 	stb	r2,-25432(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800c50:	00804074 	movhi	r2,257
  800c54:	10842004 	addi	r2,r2,4224
  800c58:	10800037 	ldwio	r2,0(r2)
  800c5c:	e0bf8115 	stw	r2,-508(fp)

			if (implementation_mode == C_MODE) {
  800c60:	d0a72643 	ldbu	r2,-25447(gp)
  800c64:	1080005c 	xori	r2,r2,1
  800c68:	10803fcc 	andi	r2,r2,255
  800c6c:	10001026 	beq	r2,zero,800cb0 <main+0x718>
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 9; i < 18; i++) {
  800c70:	00800244 	movi	r2,9
  800c74:	e0bf8215 	stw	r2,-504(fp)
  800c78:	00000906 	br	800ca0 <main+0x708>
					led_value = led_value |= (1<<i);
  800c7c:	00c00044 	movi	r3,1
  800c80:	e0bf8217 	ldw	r2,-504(fp)
  800c84:	1884983a 	sll	r2,r3,r2
  800c88:	e0ff8117 	ldw	r3,-508(fp)
  800c8c:	1884b03a 	or	r2,r3,r2
  800c90:	e0bf8115 	stw	r2,-508(fp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

			if (implementation_mode == C_MODE) {
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 9; i < 18; i++) {
  800c94:	e0bf8217 	ldw	r2,-504(fp)
  800c98:	10800044 	addi	r2,r2,1
  800c9c:	e0bf8215 	stw	r2,-504(fp)
  800ca0:	e0bf8217 	ldw	r2,-504(fp)
  800ca4:	10800490 	cmplti	r2,r2,18
  800ca8:	103ff41e 	bne	r2,zero,800c7c <__alt_mem_onchip_mem+0xff7f8c7c>
  800cac:	00001206 	br	800cf8 <main+0x760>
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  800cb0:	d0a72643 	ldbu	r2,-25447(gp)
  800cb4:	10803fcc 	andi	r2,r2,255
  800cb8:	10000f26 	beq	r2,zero,800cf8 <main+0x760>
				for (int i = 9; i < 18; i += 2) {
  800cbc:	00800244 	movi	r2,9
  800cc0:	e0bf8315 	stw	r2,-500(fp)
  800cc4:	00000906 	br	800cec <main+0x754>
					led_value = led_value |= (1<<i);
  800cc8:	00c00044 	movi	r3,1
  800ccc:	e0bf8317 	ldw	r2,-500(fp)
  800cd0:	1884983a 	sll	r2,r3,r2
  800cd4:	e0ff8117 	ldw	r3,-508(fp)
  800cd8:	1884b03a 	or	r2,r3,r2
  800cdc:	e0bf8115 	stw	r2,-508(fp)
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 9; i < 18; i++) {
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
				for (int i = 9; i < 18; i += 2) {
  800ce0:	e0bf8317 	ldw	r2,-500(fp)
  800ce4:	10800084 	addi	r2,r2,2
  800ce8:	e0bf8315 	stw	r2,-500(fp)
  800cec:	e0bf8317 	ldw	r2,-500(fp)
  800cf0:	10800490 	cmplti	r2,r2,18
  800cf4:	103ff41e 	bne	r2,zero,800cc8 <__alt_mem_onchip_mem+0xff7f8cc8>
					led_value = led_value |= (1<<i);
				}
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800cf8:	00804074 	movhi	r2,257
  800cfc:	10842004 	addi	r2,r2,4224
  800d00:	e0ff8117 	ldw	r3,-508(fp)
  800d04:	10c00035 	stwio	r3,0(r2)

		}

		if (led_sense_ventricular_event) {
  800d08:	d0a72943 	ldbu	r2,-25435(gp)
  800d0c:	10803fcc 	andi	r2,r2,255
  800d10:	10003c26 	beq	r2,zero,800e04 <main+0x86c>
			if (!v_sense_led_timer_already_started) {
  800d14:	d0a72a43 	ldbu	r2,-25431(gp)
  800d18:	1080005c 	xori	r2,r2,1
  800d1c:	10803fcc 	andi	r2,r2,255
  800d20:	10000c26 	beq	r2,zero,800d54 <main+0x7bc>
				alt_alarm_stop(&v_sense_led_timer);
  800d24:	e0bfe704 	addi	r2,fp,-100
  800d28:	1009883a 	mov	r4,r2
  800d2c:	080a6280 	call	80a628 <alt_alarm_stop>
				alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  800d30:	e0bfe704 	addi	r2,fp,-100
  800d34:	000f883a 	mov	r7,zero
  800d38:	01802034 	movhi	r6,128
  800d3c:	31810104 	addi	r6,r6,1028
  800d40:	01400644 	movi	r5,25
  800d44:	1009883a 	mov	r4,r2
  800d48:	0809b6c0 	call	809b6c <alt_alarm_start>
				v_sense_led_timer_already_started = true;
  800d4c:	00800044 	movi	r2,1
  800d50:	d0a72a45 	stb	r2,-25431(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800d54:	00804074 	movhi	r2,257
  800d58:	10842004 	addi	r2,r2,4224
  800d5c:	10800037 	ldwio	r2,0(r2)
  800d60:	e0bf8415 	stw	r2,-496(fp)

			if (implementation_mode == C_MODE) {
  800d64:	d0a72643 	ldbu	r2,-25447(gp)
  800d68:	1080005c 	xori	r2,r2,1
  800d6c:	10803fcc 	andi	r2,r2,255
  800d70:	10000f26 	beq	r2,zero,800db0 <main+0x818>
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 0; i < 9; i++) {
  800d74:	e03f8515 	stw	zero,-492(fp)
  800d78:	00000906 	br	800da0 <main+0x808>
					led_value = led_value |= (1<<i);
  800d7c:	00c00044 	movi	r3,1
  800d80:	e0bf8517 	ldw	r2,-492(fp)
  800d84:	1884983a 	sll	r2,r3,r2
  800d88:	e0ff8417 	ldw	r3,-496(fp)
  800d8c:	1884b03a 	or	r2,r3,r2
  800d90:	e0bf8415 	stw	r2,-496(fp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

			if (implementation_mode == C_MODE) {
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 0; i < 9; i++) {
  800d94:	e0bf8517 	ldw	r2,-492(fp)
  800d98:	10800044 	addi	r2,r2,1
  800d9c:	e0bf8515 	stw	r2,-492(fp)
  800da0:	e0bf8517 	ldw	r2,-492(fp)
  800da4:	10800250 	cmplti	r2,r2,9
  800da8:	103ff41e 	bne	r2,zero,800d7c <__alt_mem_onchip_mem+0xff7f8d7c>
  800dac:	00001106 	br	800df4 <main+0x85c>
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  800db0:	d0a72643 	ldbu	r2,-25447(gp)
  800db4:	10803fcc 	andi	r2,r2,255
  800db8:	10000e26 	beq	r2,zero,800df4 <main+0x85c>
				for (int i = 0; i < 9; i += 2) {
  800dbc:	e03f8615 	stw	zero,-488(fp)
  800dc0:	00000906 	br	800de8 <main+0x850>
					led_value = led_value |= (1<<i);
  800dc4:	00c00044 	movi	r3,1
  800dc8:	e0bf8617 	ldw	r2,-488(fp)
  800dcc:	1884983a 	sll	r2,r3,r2
  800dd0:	e0ff8417 	ldw	r3,-496(fp)
  800dd4:	1884b03a 	or	r2,r3,r2
  800dd8:	e0bf8415 	stw	r2,-496(fp)
				// SET ALL BITS UP FROM LEDG0 TO LEDG3
				for (int i = 0; i < 9; i++) {
					led_value = led_value |= (1<<i);
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
				for (int i = 0; i < 9; i += 2) {
  800ddc:	e0bf8617 	ldw	r2,-488(fp)
  800de0:	10800084 	addi	r2,r2,2
  800de4:	e0bf8615 	stw	r2,-488(fp)
  800de8:	e0bf8617 	ldw	r2,-488(fp)
  800dec:	10800250 	cmplti	r2,r2,9
  800df0:	103ff41e 	bne	r2,zero,800dc4 <__alt_mem_onchip_mem+0xff7f8dc4>
					led_value = led_value |= (1<<i);
				}
			}


			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800df4:	00804074 	movhi	r2,257
  800df8:	10842004 	addi	r2,r2,4224
  800dfc:	e0ff8417 	ldw	r3,-496(fp)
  800e00:	10c00035 	stwio	r3,0(r2)

		}

		clear_pace_led_events();
  800e04:	0800f000 	call	800f00 <clear_pace_led_events>
		clear_sense_led_events();
  800e08:	08010040 	call	801004 <clear_sense_led_events>
		//clear_heart_flags();
	}
  800e0c:	003e4a06 	br	800738 <__alt_mem_onchip_mem+0xff7f8738>

00800e10 <send_atrial_event>:
	printf("Exiting Loop.\n");
	return 0;
}

void send_atrial_event(bool isThisEventPaced) {
  800e10:	defffd04 	addi	sp,sp,-12
  800e14:	df000215 	stw	fp,8(sp)
  800e18:	df000204 	addi	fp,sp,8
  800e1c:	2005883a 	mov	r2,r4
  800e20:	e0bfff05 	stb	r2,-4(fp)
	if (isThisEventPaced) {
  800e24:	e0bfff03 	ldbu	r2,-4(fp)
  800e28:	10000926 	beq	r2,zero,800e50 <send_atrial_event+0x40>
		a_is_paced = true;
  800e2c:	00800044 	movi	r2,1
  800e30:	d0a726c5 	stb	r2,-25445(gp)
		char atrial_char = 'A';
  800e34:	00801044 	movi	r2,65
  800e38:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, atrial_char);
  800e3c:	e0fffe07 	ldb	r3,-8(fp)
  800e40:	00804074 	movhi	r2,257
  800e44:	10841104 	addi	r2,r2,4164
  800e48:	10c00035 	stwio	r3,0(r2)
  800e4c:	00000106 	br	800e54 <send_atrial_event+0x44>
	} else {
		a_is_paced = false;
  800e50:	d02726c5 	stb	zero,-25445(gp)
	}
	atrial_event = true;
  800e54:	00800044 	movi	r2,1
  800e58:	d0a72685 	stb	r2,-25446(gp)
	//printf("Atrial Event Flagged!\n");
}
  800e5c:	0001883a 	nop
  800e60:	e037883a 	mov	sp,fp
  800e64:	df000017 	ldw	fp,0(sp)
  800e68:	dec00104 	addi	sp,sp,4
  800e6c:	f800283a 	ret

00800e70 <send_ventricular_event>:

void send_ventricular_event(bool isThisEventPaced) {
  800e70:	defffd04 	addi	sp,sp,-12
  800e74:	df000215 	stw	fp,8(sp)
  800e78:	df000204 	addi	fp,sp,8
  800e7c:	2005883a 	mov	r2,r4
  800e80:	e0bfff05 	stb	r2,-4(fp)
	if (isThisEventPaced) {
  800e84:	e0bfff03 	ldbu	r2,-4(fp)
  800e88:	10000926 	beq	r2,zero,800eb0 <send_ventricular_event+0x40>
		v_is_paced = true;
  800e8c:	00800044 	movi	r2,1
  800e90:	d0a72745 	stb	r2,-25443(gp)
		char ventricular_char = 'V';
  800e94:	00801584 	movi	r2,86
  800e98:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, ventricular_char);
  800e9c:	e0fffe07 	ldb	r3,-8(fp)
  800ea0:	00804074 	movhi	r2,257
  800ea4:	10841104 	addi	r2,r2,4164
  800ea8:	10c00035 	stwio	r3,0(r2)
  800eac:	00000106 	br	800eb4 <send_ventricular_event+0x44>
	} else {
		v_is_paced = false;
  800eb0:	d0272745 	stb	zero,-25443(gp)
	}
	ventricular_event = true;
  800eb4:	00800044 	movi	r2,1
  800eb8:	d0a72705 	stb	r2,-25444(gp)
	//printf("Ventricular Event Flagged!\n");
}
  800ebc:	0001883a 	nop
  800ec0:	e037883a 	mov	sp,fp
  800ec4:	df000017 	ldw	fp,0(sp)
  800ec8:	dec00104 	addi	sp,sp,4
  800ecc:	f800283a 	ret

00800ed0 <clear_heart_flags>:

void clear_heart_flags() {
  800ed0:	deffff04 	addi	sp,sp,-4
  800ed4:	df000015 	stw	fp,0(sp)
  800ed8:	d839883a 	mov	fp,sp
	atrial_event = false;
  800edc:	d0272685 	stb	zero,-25446(gp)
	ventricular_event = false;
  800ee0:	d0272705 	stb	zero,-25444(gp)
	a_is_paced = false;
  800ee4:	d02726c5 	stb	zero,-25445(gp)
	v_is_paced = false;
  800ee8:	d0272745 	stb	zero,-25443(gp)
}
  800eec:	0001883a 	nop
  800ef0:	e037883a 	mov	sp,fp
  800ef4:	df000017 	ldw	fp,0(sp)
  800ef8:	dec00104 	addi	sp,sp,4
  800efc:	f800283a 	ret

00800f00 <clear_pace_led_events>:

void clear_pace_led_events() {
  800f00:	defffb04 	addi	sp,sp,-20
  800f04:	df000415 	stw	fp,16(sp)
  800f08:	df000404 	addi	fp,sp,16
	if (!led_pace_atrial_event) {
  800f0c:	d0a72883 	ldbu	r2,-25438(gp)
  800f10:	1080005c 	xori	r2,r2,1
  800f14:	10803fcc 	andi	r2,r2,255
  800f18:	10001926 	beq	r2,zero,800f80 <clear_pace_led_events+0x80>
		a_pace_led_timer_already_started = false;
  800f1c:	d0272985 	stb	zero,-25434(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800f20:	00804074 	movhi	r2,257
  800f24:	10841c04 	addi	r2,r2,4208
  800f28:	10800037 	ldwio	r2,0(r2)
  800f2c:	e0bffc15 	stw	r2,-16(fp)


		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800f30:	00800104 	movi	r2,4
  800f34:	e0bffd15 	stw	r2,-12(fp)
  800f38:	00000a06 	br	800f64 <clear_pace_led_events+0x64>
			led_value = led_value &= ~(1<<i);
  800f3c:	00c00044 	movi	r3,1
  800f40:	e0bffd17 	ldw	r2,-12(fp)
  800f44:	1884983a 	sll	r2,r3,r2
  800f48:	0084303a 	nor	r2,zero,r2
  800f4c:	e0fffc17 	ldw	r3,-16(fp)
  800f50:	1884703a 	and	r2,r3,r2
  800f54:	e0bffc15 	stw	r2,-16(fp)
		a_pace_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);


		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800f58:	e0bffd17 	ldw	r2,-12(fp)
  800f5c:	10800044 	addi	r2,r2,1
  800f60:	e0bffd15 	stw	r2,-12(fp)
  800f64:	e0bffd17 	ldw	r2,-12(fp)
  800f68:	10800210 	cmplti	r2,r2,8
  800f6c:	103ff31e 	bne	r2,zero,800f3c <__alt_mem_onchip_mem+0xff7f8f3c>
			led_value = led_value &= ~(1<<i);
		}


		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800f70:	00804074 	movhi	r2,257
  800f74:	10841c04 	addi	r2,r2,4208
  800f78:	e0fffc17 	ldw	r3,-16(fp)
  800f7c:	10c00035 	stwio	r3,0(r2)
	}

	if (!led_pace_ventricular_event) {
  800f80:	d0a728c3 	ldbu	r2,-25437(gp)
  800f84:	1080005c 	xori	r2,r2,1
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	10001826 	beq	r2,zero,800ff0 <clear_pace_led_events+0xf0>
		v_pace_led_timer_already_started = false;
  800f90:	d02729c5 	stb	zero,-25433(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800f94:	00804074 	movhi	r2,257
  800f98:	10841c04 	addi	r2,r2,4208
  800f9c:	10800037 	ldwio	r2,0(r2)
  800fa0:	e0bffe15 	stw	r2,-8(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800fa4:	e03fff15 	stw	zero,-4(fp)
  800fa8:	00000a06 	br	800fd4 <clear_pace_led_events+0xd4>
			led_value = led_value &= ~(1<<i);
  800fac:	00c00044 	movi	r3,1
  800fb0:	e0bfff17 	ldw	r2,-4(fp)
  800fb4:	1884983a 	sll	r2,r3,r2
  800fb8:	0084303a 	nor	r2,zero,r2
  800fbc:	e0fffe17 	ldw	r3,-8(fp)
  800fc0:	1884703a 	and	r2,r3,r2
  800fc4:	e0bffe15 	stw	r2,-8(fp)
	if (!led_pace_ventricular_event) {
		v_pace_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800fc8:	e0bfff17 	ldw	r2,-4(fp)
  800fcc:	10800044 	addi	r2,r2,1
  800fd0:	e0bfff15 	stw	r2,-4(fp)
  800fd4:	e0bfff17 	ldw	r2,-4(fp)
  800fd8:	10800110 	cmplti	r2,r2,4
  800fdc:	103ff31e 	bne	r2,zero,800fac <__alt_mem_onchip_mem+0xff7f8fac>
			led_value = led_value &= ~(1<<i);
		}
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800fe0:	00804074 	movhi	r2,257
  800fe4:	10841c04 	addi	r2,r2,4208
  800fe8:	e0fffe17 	ldw	r3,-8(fp)
  800fec:	10c00035 	stwio	r3,0(r2)
	}
}
  800ff0:	0001883a 	nop
  800ff4:	e037883a 	mov	sp,fp
  800ff8:	df000017 	ldw	fp,0(sp)
  800ffc:	dec00104 	addi	sp,sp,4
  801000:	f800283a 	ret

00801004 <clear_sense_led_events>:

void clear_sense_led_events() {
  801004:	defffb04 	addi	sp,sp,-20
  801008:	df000415 	stw	fp,16(sp)
  80100c:	df000404 	addi	fp,sp,16
	if (!led_sense_atrial_event) {
  801010:	d0a72903 	ldbu	r2,-25436(gp)
  801014:	1080005c 	xori	r2,r2,1
  801018:	10803fcc 	andi	r2,r2,255
  80101c:	10001926 	beq	r2,zero,801084 <clear_sense_led_events+0x80>
		a_sense_led_timer_already_started = false;
  801020:	d0272a05 	stb	zero,-25432(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  801024:	00804074 	movhi	r2,257
  801028:	10842004 	addi	r2,r2,4224
  80102c:	10800037 	ldwio	r2,0(r2)
  801030:	e0bffc15 	stw	r2,-16(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 9; i < 18; i++) {
  801034:	00800244 	movi	r2,9
  801038:	e0bffd15 	stw	r2,-12(fp)
  80103c:	00000a06 	br	801068 <clear_sense_led_events+0x64>
			led_value = led_value &= ~(1<<i);
  801040:	00c00044 	movi	r3,1
  801044:	e0bffd17 	ldw	r2,-12(fp)
  801048:	1884983a 	sll	r2,r3,r2
  80104c:	0084303a 	nor	r2,zero,r2
  801050:	e0fffc17 	ldw	r3,-16(fp)
  801054:	1884703a 	and	r2,r3,r2
  801058:	e0bffc15 	stw	r2,-16(fp)
	if (!led_sense_atrial_event) {
		a_sense_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 9; i < 18; i++) {
  80105c:	e0bffd17 	ldw	r2,-12(fp)
  801060:	10800044 	addi	r2,r2,1
  801064:	e0bffd15 	stw	r2,-12(fp)
  801068:	e0bffd17 	ldw	r2,-12(fp)
  80106c:	10800490 	cmplti	r2,r2,18
  801070:	103ff31e 	bne	r2,zero,801040 <__alt_mem_onchip_mem+0xff7f9040>
			led_value = led_value &= ~(1<<i);
		}

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  801074:	00804074 	movhi	r2,257
  801078:	10842004 	addi	r2,r2,4224
  80107c:	e0fffc17 	ldw	r3,-16(fp)
  801080:	10c00035 	stwio	r3,0(r2)
	}

	if (!led_sense_ventricular_event) {
  801084:	d0a72943 	ldbu	r2,-25435(gp)
  801088:	1080005c 	xori	r2,r2,1
  80108c:	10803fcc 	andi	r2,r2,255
  801090:	10001826 	beq	r2,zero,8010f4 <clear_sense_led_events+0xf0>
		v_sense_led_timer_already_started = false;
  801094:	d0272a45 	stb	zero,-25431(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  801098:	00804074 	movhi	r2,257
  80109c:	10842004 	addi	r2,r2,4224
  8010a0:	10800037 	ldwio	r2,0(r2)
  8010a4:	e0bffe15 	stw	r2,-8(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 0; i < 9; i++) {
  8010a8:	e03fff15 	stw	zero,-4(fp)
  8010ac:	00000a06 	br	8010d8 <clear_sense_led_events+0xd4>
			led_value = led_value &= ~(1<<i);
  8010b0:	00c00044 	movi	r3,1
  8010b4:	e0bfff17 	ldw	r2,-4(fp)
  8010b8:	1884983a 	sll	r2,r3,r2
  8010bc:	0084303a 	nor	r2,zero,r2
  8010c0:	e0fffe17 	ldw	r3,-8(fp)
  8010c4:	1884703a 	and	r2,r3,r2
  8010c8:	e0bffe15 	stw	r2,-8(fp)
	if (!led_sense_ventricular_event) {
		v_sense_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 0; i < 9; i++) {
  8010cc:	e0bfff17 	ldw	r2,-4(fp)
  8010d0:	10800044 	addi	r2,r2,1
  8010d4:	e0bfff15 	stw	r2,-4(fp)
  8010d8:	e0bfff17 	ldw	r2,-4(fp)
  8010dc:	10800250 	cmplti	r2,r2,9
  8010e0:	103ff31e 	bne	r2,zero,8010b0 <__alt_mem_onchip_mem+0xff7f90b0>
			led_value = led_value &= ~(1<<i);
		}

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  8010e4:	00804074 	movhi	r2,257
  8010e8:	10842004 	addi	r2,r2,4224
  8010ec:	e0fffe17 	ldw	r3,-8(fp)
  8010f0:	10c00035 	stwio	r3,0(r2)
	}
}
  8010f4:	0001883a 	nop
  8010f8:	e037883a 	mov	sp,fp
  8010fc:	df000017 	ldw	fp,0(sp)
  801100:	dec00104 	addi	sp,sp,4
  801104:	f800283a 	ret

00801108 <C_Mode_Pacemaker>:

void C_Mode_Pacemaker(int a_timer_count, int v_timer_count) {
  801108:	defffc04 	addi	sp,sp,-16
  80110c:	dfc00315 	stw	ra,12(sp)
  801110:	df000215 	stw	fp,8(sp)
  801114:	df000204 	addi	fp,sp,8
  801118:	e13ffe15 	stw	r4,-8(fp)
  80111c:	e17fff15 	stw	r5,-4(fp)
	// AEvents Logic
	//int a_count = (int)a_timer_count;

	// pace ventricular event if
	if (v_timer_count >= AEI_VALUE && !atrial_sense) {
  801120:	e0bfff17 	ldw	r2,-4(fp)
  801124:	1080c810 	cmplti	r2,r2,800
  801128:	1000061e 	bne	r2,zero,801144 <C_Mode_Pacemaker+0x3c>
  80112c:	d0a72783 	ldbu	r2,-25442(gp)
  801130:	1080005c 	xori	r2,r2,1
  801134:	10803fcc 	andi	r2,r2,255
  801138:	10000226 	beq	r2,zero,801144 <C_Mode_Pacemaker+0x3c>
		// send atrial event
		send_atrial_event(true);
  80113c:	01000044 	movi	r4,1
  801140:	0800e100 	call	800e10 <send_atrial_event>
	}

	// Do not pace ventricle until URI
	if (v_timer_count >= URI_VALUE) {
  801144:	e0bfff17 	ldw	r2,-4(fp)
  801148:	1080e110 	cmplti	r2,r2,900
  80114c:	1000121e 	bne	r2,zero,801198 <C_Mode_Pacemaker+0x90>
		// Ignore any ventricular events until VRP
		// Pace ventricular if above AVI
		if (a_timer_count >= AVI_VALUE && !ventricular_sense) {
  801150:	e0bffe17 	ldw	r2,-8(fp)
  801154:	10804b10 	cmplti	r2,r2,300
  801158:	1000061e 	bne	r2,zero,801174 <C_Mode_Pacemaker+0x6c>
  80115c:	d0a727c3 	ldbu	r2,-25441(gp)
  801160:	1080005c 	xori	r2,r2,1
  801164:	10803fcc 	andi	r2,r2,255
  801168:	10000226 	beq	r2,zero,801174 <C_Mode_Pacemaker+0x6c>
			send_ventricular_event(true);
  80116c:	01000044 	movi	r4,1
  801170:	0800e700 	call	800e70 <send_ventricular_event>
		}

		// Pace ventricular if LRI has been hit
		if (v_timer_count >= LRI_VALUE && !ventricular_sense) {
  801174:	e0bfff17 	ldw	r2,-4(fp)
  801178:	1080ed90 	cmplti	r2,r2,950
  80117c:	1000061e 	bne	r2,zero,801198 <C_Mode_Pacemaker+0x90>
  801180:	d0a727c3 	ldbu	r2,-25441(gp)
  801184:	1080005c 	xori	r2,r2,1
  801188:	10803fcc 	andi	r2,r2,255
  80118c:	10000226 	beq	r2,zero,801198 <C_Mode_Pacemaker+0x90>
			// Send Ventricular event
			send_ventricular_event(true);
  801190:	01000044 	movi	r4,1
  801194:	0800e700 	call	800e70 <send_ventricular_event>
		}


	}
}
  801198:	0001883a 	nop
  80119c:	e037883a 	mov	sp,fp
  8011a0:	dfc00117 	ldw	ra,4(sp)
  8011a4:	df000017 	ldw	fp,0(sp)
  8011a8:	dec00204 	addi	sp,sp,8
  8011ac:	f800283a 	ret

008011b0 <SCCHARTS_Mode_Pacemaker>:

void SCCHARTS_Mode_Pacemaker() {
  8011b0:	deffff04 	addi	sp,sp,-4
  8011b4:	df000015 	stw	fp,0(sp)
  8011b8:	d839883a 	mov	fp,sp

}
  8011bc:	0001883a 	nop
  8011c0:	e037883a 	mov	sp,fp
  8011c4:	df000017 	ldw	fp,0(sp)
  8011c8:	dec00104 	addi	sp,sp,4
  8011cc:	f800283a 	ret

008011d0 <logic>:

#include "timing.h"

#include "sccharts.h"

void logic(TickData* d) {
  8011d0:	defffa04 	addi	sp,sp,-24
  8011d4:	dfc00515 	stw	ra,20(sp)
  8011d8:	df000415 	stw	fp,16(sp)
  8011dc:	dc800315 	stw	r18,12(sp)
  8011e0:	dc400215 	stw	r17,8(sp)
  8011e4:	dc000115 	stw	r16,4(sp)
  8011e8:	df000404 	addi	fp,sp,16
  8011ec:	e13ffc15 	stw	r4,-16(fp)
  d->_g127 = d->_pg66;
  8011f0:	e0bffc17 	ldw	r2,-16(fp)
  8011f4:	10c03f83 	ldbu	r3,254(r2)
  8011f8:	e0bffc17 	ldw	r2,-16(fp)
  8011fc:	10c03105 	stb	r3,196(r2)
  if (d->_g127) {
  801200:	e0bffc17 	ldw	r2,-16(fp)
  801204:	10803103 	ldbu	r2,196(r2)
  801208:	10803fcc 	andi	r2,r2,255
  80120c:	1080201c 	xori	r2,r2,128
  801210:	10bfe004 	addi	r2,r2,-128
  801214:	10001226 	beq	r2,zero,801260 <logic+0x90>
    d->AVI_Clock += d->deltaT;
  801218:	e13ffc17 	ldw	r4,-16(fp)
  80121c:	20801017 	ldw	r2,64(r4)
  801220:	20c01117 	ldw	r3,68(r4)
  801224:	e1bffc17 	ldw	r6,-16(fp)
  801228:	31001917 	ldw	r4,100(r6)
  80122c:	31401a17 	ldw	r5,104(r6)
  801230:	200d883a 	mov	r6,r4
  801234:	280f883a 	mov	r7,r5
  801238:	1009883a 	mov	r4,r2
  80123c:	180b883a 	mov	r5,r3
  801240:	08055640 	call	805564 <__adddf3>
  801244:	1009883a 	mov	r4,r2
  801248:	180b883a 	mov	r5,r3
  80124c:	2005883a 	mov	r2,r4
  801250:	2807883a 	mov	r3,r5
  801254:	e13ffc17 	ldw	r4,-16(fp)
  801258:	20801015 	stw	r2,64(r4)
  80125c:	20c01115 	stw	r3,68(r4)
  }
  d->_g70 = d->_pg44;
  801260:	e0bffc17 	ldw	r2,-16(fp)
  801264:	10c03fc3 	ldbu	r3,255(r2)
  801268:	e0bffc17 	ldw	r2,-16(fp)
  80126c:	10c02b45 	stb	r3,173(r2)
  d->_g64 = d->_pg38;
  801270:	e0bffc17 	ldw	r2,-16(fp)
  801274:	10c04003 	ldbu	r3,256(r2)
  801278:	e0bffc17 	ldw	r2,-16(fp)
  80127c:	10c02a45 	stb	r3,169(r2)
  d->_g67_e1 = !(d->_g70 || d->_g64);
  801280:	e0bffc17 	ldw	r2,-16(fp)
  801284:	10802b43 	ldbu	r2,173(r2)
  801288:	10803fcc 	andi	r2,r2,255
  80128c:	1080201c 	xori	r2,r2,128
  801290:	10bfe004 	addi	r2,r2,-128
  801294:	1000081e 	bne	r2,zero,8012b8 <logic+0xe8>
  801298:	e0bffc17 	ldw	r2,-16(fp)
  80129c:	10802a43 	ldbu	r2,169(r2)
  8012a0:	10803fcc 	andi	r2,r2,255
  8012a4:	1080201c 	xori	r2,r2,128
  8012a8:	10bfe004 	addi	r2,r2,-128
  8012ac:	1000021e 	bne	r2,zero,8012b8 <logic+0xe8>
  8012b0:	00800044 	movi	r2,1
  8012b4:	00000106 	br	8012bc <logic+0xec>
  8012b8:	0005883a 	mov	r2,zero
  8012bc:	1007883a 	mov	r3,r2
  8012c0:	e0bffc17 	ldw	r2,-16(fp)
  8012c4:	10c03e85 	stb	r3,250(r2)
  d->_g123 = d->_pg96;
  8012c8:	e0bffc17 	ldw	r2,-16(fp)
  8012cc:	10c04043 	ldbu	r3,257(r2)
  8012d0:	e0bffc17 	ldw	r2,-16(fp)
  8012d4:	10c030c5 	stb	r3,195(r2)
  if (d->_g123) {
  8012d8:	e0bffc17 	ldw	r2,-16(fp)
  8012dc:	108030c3 	ldbu	r2,195(r2)
  8012e0:	10803fcc 	andi	r2,r2,255
  8012e4:	1080201c 	xori	r2,r2,128
  8012e8:	10bfe004 	addi	r2,r2,-128
  8012ec:	10001226 	beq	r2,zero,801338 <logic+0x168>
    d->PVARP_Clock += d->deltaT;
  8012f0:	e13ffc17 	ldw	r4,-16(fp)
  8012f4:	20800e17 	ldw	r2,56(r4)
  8012f8:	20c00f17 	ldw	r3,60(r4)
  8012fc:	e1bffc17 	ldw	r6,-16(fp)
  801300:	31001917 	ldw	r4,100(r6)
  801304:	31401a17 	ldw	r5,104(r6)
  801308:	200d883a 	mov	r6,r4
  80130c:	280f883a 	mov	r7,r5
  801310:	1009883a 	mov	r4,r2
  801314:	180b883a 	mov	r5,r3
  801318:	08055640 	call	805564 <__adddf3>
  80131c:	1009883a 	mov	r4,r2
  801320:	180b883a 	mov	r5,r3
  801324:	2005883a 	mov	r2,r4
  801328:	2807883a 	mov	r3,r5
  80132c:	e13ffc17 	ldw	r4,-16(fp)
  801330:	20800e15 	stw	r2,56(r4)
  801334:	20c00f15 	stw	r3,60(r4)
  }
  d->_g85 = d->_pg97;
  801338:	e0bffc17 	ldw	r2,-16(fp)
  80133c:	10c04083 	ldbu	r3,258(r2)
  801340:	e0bffc17 	ldw	r2,-16(fp)
  801344:	10c02c85 	stb	r3,178(r2)
  d->_cg85 = d->AS == 1 && d->PVARP_Clock >= d->PVARP;
  801348:	e0bffc17 	ldw	r2,-16(fp)
  80134c:	10801d03 	ldbu	r2,116(r2)
  801350:	10803fcc 	andi	r2,r2,255
  801354:	1080201c 	xori	r2,r2,128
  801358:	10bfe004 	addi	r2,r2,-128
  80135c:	10800058 	cmpnei	r2,r2,1
  801360:	1000111e 	bne	r2,zero,8013a8 <logic+0x1d8>
  801364:	e0bffc17 	ldw	r2,-16(fp)
  801368:	14000e17 	ldw	r16,56(r2)
  80136c:	14400f17 	ldw	r17,60(r2)
  801370:	e0bffc17 	ldw	r2,-16(fp)
  801374:	10800217 	ldw	r2,8(r2)
  801378:	1009883a 	mov	r4,r2
  80137c:	08068dc0 	call	8068dc <__floatsidf>
  801380:	1009883a 	mov	r4,r2
  801384:	180b883a 	mov	r5,r3
  801388:	200d883a 	mov	r6,r4
  80138c:	280f883a 	mov	r7,r5
  801390:	8009883a 	mov	r4,r16
  801394:	880b883a 	mov	r5,r17
  801398:	0805e100 	call	805e10 <__gedf2>
  80139c:	10000216 	blt	r2,zero,8013a8 <logic+0x1d8>
  8013a0:	00800044 	movi	r2,1
  8013a4:	00000106 	br	8013ac <logic+0x1dc>
  8013a8:	0005883a 	mov	r2,zero
  8013ac:	1007883a 	mov	r3,r2
  8013b0:	e0bffc17 	ldw	r2,-16(fp)
  8013b4:	10c03c05 	stb	r3,240(r2)
  d->_g86 = d->_g85 && d->_cg85;
  8013b8:	e0bffc17 	ldw	r2,-16(fp)
  8013bc:	10802c83 	ldbu	r2,178(r2)
  8013c0:	10803fcc 	andi	r2,r2,255
  8013c4:	1080201c 	xori	r2,r2,128
  8013c8:	10bfe004 	addi	r2,r2,-128
  8013cc:	10000826 	beq	r2,zero,8013f0 <logic+0x220>
  8013d0:	e0bffc17 	ldw	r2,-16(fp)
  8013d4:	10803c03 	ldbu	r2,240(r2)
  8013d8:	10803fcc 	andi	r2,r2,255
  8013dc:	1080201c 	xori	r2,r2,128
  8013e0:	10bfe004 	addi	r2,r2,-128
  8013e4:	10000226 	beq	r2,zero,8013f0 <logic+0x220>
  8013e8:	00800044 	movi	r2,1
  8013ec:	00000106 	br	8013f4 <logic+0x224>
  8013f0:	0005883a 	mov	r2,zero
  8013f4:	1007883a 	mov	r3,r2
  8013f8:	e0bffc17 	ldw	r2,-16(fp)
  8013fc:	10c02cc5 	stb	r3,179(r2)
  if (d->_g86) {
  801400:	e0bffc17 	ldw	r2,-16(fp)
  801404:	10802cc3 	ldbu	r2,179(r2)
  801408:	10803fcc 	andi	r2,r2,255
  80140c:	1080201c 	xori	r2,r2,128
  801410:	10bfe004 	addi	r2,r2,-128
  801414:	10000326 	beq	r2,zero,801424 <logic+0x254>
    d->_Pacemaker_local__Atrig = 1;
  801418:	e0bffc17 	ldw	r2,-16(fp)
  80141c:	00c00044 	movi	r3,1
  801420:	10c01e05 	stb	r3,120(r2)
  }
  d->_g111 = d->_pg58;
  801424:	e0bffc17 	ldw	r2,-16(fp)
  801428:	10c040c3 	ldbu	r3,259(r2)
  80142c:	e0bffc17 	ldw	r2,-16(fp)
  801430:	10c03045 	stb	r3,193(r2)
  if (d->_g111) {
  801434:	e0bffc17 	ldw	r2,-16(fp)
  801438:	10803043 	ldbu	r2,193(r2)
  80143c:	10803fcc 	andi	r2,r2,255
  801440:	1080201c 	xori	r2,r2,128
  801444:	10bfe004 	addi	r2,r2,-128
  801448:	10001226 	beq	r2,zero,801494 <logic+0x2c4>
    d->AEI_Clock += d->deltaT;
  80144c:	e13ffc17 	ldw	r4,-16(fp)
  801450:	20800817 	ldw	r2,32(r4)
  801454:	20c00917 	ldw	r3,36(r4)
  801458:	e1bffc17 	ldw	r6,-16(fp)
  80145c:	31001917 	ldw	r4,100(r6)
  801460:	31401a17 	ldw	r5,104(r6)
  801464:	200d883a 	mov	r6,r4
  801468:	280f883a 	mov	r7,r5
  80146c:	1009883a 	mov	r4,r2
  801470:	180b883a 	mov	r5,r3
  801474:	08055640 	call	805564 <__adddf3>
  801478:	1009883a 	mov	r4,r2
  80147c:	180b883a 	mov	r5,r3
  801480:	2005883a 	mov	r2,r4
  801484:	2807883a 	mov	r3,r5
  801488:	e13ffc17 	ldw	r4,-16(fp)
  80148c:	20800815 	stw	r2,32(r4)
  801490:	20c00915 	stw	r3,36(r4)
  }
  d->_g88 = d->_g85 && !d->_cg85;
  801494:	e0bffc17 	ldw	r2,-16(fp)
  801498:	10802c83 	ldbu	r2,178(r2)
  80149c:	10803fcc 	andi	r2,r2,255
  8014a0:	1080201c 	xori	r2,r2,128
  8014a4:	10bfe004 	addi	r2,r2,-128
  8014a8:	10000826 	beq	r2,zero,8014cc <logic+0x2fc>
  8014ac:	e0bffc17 	ldw	r2,-16(fp)
  8014b0:	10803c03 	ldbu	r2,240(r2)
  8014b4:	10803fcc 	andi	r2,r2,255
  8014b8:	1080201c 	xori	r2,r2,128
  8014bc:	10bfe004 	addi	r2,r2,-128
  8014c0:	1000021e 	bne	r2,zero,8014cc <logic+0x2fc>
  8014c4:	00800044 	movi	r2,1
  8014c8:	00000106 	br	8014d0 <logic+0x300>
  8014cc:	0005883a 	mov	r2,zero
  8014d0:	1007883a 	mov	r3,r2
  8014d4:	e0bffc17 	ldw	r2,-16(fp)
  8014d8:	10c02d45 	stb	r3,181(r2)
  d->_cg88 = d->AS == 0 && d->AEI_Clock >= d->AEI;
  8014dc:	e0bffc17 	ldw	r2,-16(fp)
  8014e0:	10801d03 	ldbu	r2,116(r2)
  8014e4:	10803fcc 	andi	r2,r2,255
  8014e8:	1080201c 	xori	r2,r2,128
  8014ec:	10bfe004 	addi	r2,r2,-128
  8014f0:	1000111e 	bne	r2,zero,801538 <logic+0x368>
  8014f4:	e0bffc17 	ldw	r2,-16(fp)
  8014f8:	14000817 	ldw	r16,32(r2)
  8014fc:	14400917 	ldw	r17,36(r2)
  801500:	e0bffc17 	ldw	r2,-16(fp)
  801504:	10800117 	ldw	r2,4(r2)
  801508:	1009883a 	mov	r4,r2
  80150c:	08068dc0 	call	8068dc <__floatsidf>
  801510:	1009883a 	mov	r4,r2
  801514:	180b883a 	mov	r5,r3
  801518:	200d883a 	mov	r6,r4
  80151c:	280f883a 	mov	r7,r5
  801520:	8009883a 	mov	r4,r16
  801524:	880b883a 	mov	r5,r17
  801528:	0805e100 	call	805e10 <__gedf2>
  80152c:	10000216 	blt	r2,zero,801538 <logic+0x368>
  801530:	00800044 	movi	r2,1
  801534:	00000106 	br	80153c <logic+0x36c>
  801538:	0005883a 	mov	r2,zero
  80153c:	1007883a 	mov	r3,r2
  801540:	e0bffc17 	ldw	r2,-16(fp)
  801544:	10c03c45 	stb	r3,241(r2)
  d->_g89 = d->_g88 && d->_cg88;
  801548:	e0bffc17 	ldw	r2,-16(fp)
  80154c:	10802d43 	ldbu	r2,181(r2)
  801550:	10803fcc 	andi	r2,r2,255
  801554:	1080201c 	xori	r2,r2,128
  801558:	10bfe004 	addi	r2,r2,-128
  80155c:	10000826 	beq	r2,zero,801580 <logic+0x3b0>
  801560:	e0bffc17 	ldw	r2,-16(fp)
  801564:	10803c43 	ldbu	r2,241(r2)
  801568:	10803fcc 	andi	r2,r2,255
  80156c:	1080201c 	xori	r2,r2,128
  801570:	10bfe004 	addi	r2,r2,-128
  801574:	10000226 	beq	r2,zero,801580 <logic+0x3b0>
  801578:	00800044 	movi	r2,1
  80157c:	00000106 	br	801584 <logic+0x3b4>
  801580:	0005883a 	mov	r2,zero
  801584:	1007883a 	mov	r3,r2
  801588:	e0bffc17 	ldw	r2,-16(fp)
  80158c:	10c02d85 	stb	r3,182(r2)
  if (d->_g89) {
  801590:	e0bffc17 	ldw	r2,-16(fp)
  801594:	10802d83 	ldbu	r2,182(r2)
  801598:	10803fcc 	andi	r2,r2,255
  80159c:	1080201c 	xori	r2,r2,128
  8015a0:	10bfe004 	addi	r2,r2,-128
  8015a4:	10000326 	beq	r2,zero,8015b4 <logic+0x3e4>
    d->_Pacemaker_local__Atrig1 = 1;
  8015a8:	e0bffc17 	ldw	r2,-16(fp)
  8015ac:	00c00044 	movi	r3,1
  8015b0:	10c01e45 	stb	r3,121(r2)
  }
  d->_g88 = d->_g88 && !d->_cg88;
  8015b4:	e0bffc17 	ldw	r2,-16(fp)
  8015b8:	10802d43 	ldbu	r2,181(r2)
  8015bc:	10803fcc 	andi	r2,r2,255
  8015c0:	1080201c 	xori	r2,r2,128
  8015c4:	10bfe004 	addi	r2,r2,-128
  8015c8:	10000826 	beq	r2,zero,8015ec <logic+0x41c>
  8015cc:	e0bffc17 	ldw	r2,-16(fp)
  8015d0:	10803c43 	ldbu	r2,241(r2)
  8015d4:	10803fcc 	andi	r2,r2,255
  8015d8:	1080201c 	xori	r2,r2,128
  8015dc:	10bfe004 	addi	r2,r2,-128
  8015e0:	1000021e 	bne	r2,zero,8015ec <logic+0x41c>
  8015e4:	00800044 	movi	r2,1
  8015e8:	00000106 	br	8015f0 <logic+0x420>
  8015ec:	0005883a 	mov	r2,zero
  8015f0:	1007883a 	mov	r3,r2
  8015f4:	e0bffc17 	ldw	r2,-16(fp)
  8015f8:	10c02d45 	stb	r3,181(r2)
  d->_cg90 = d->AS == 1;
  8015fc:	e0bffc17 	ldw	r2,-16(fp)
  801600:	10801d03 	ldbu	r2,116(r2)
  801604:	10803fcc 	andi	r2,r2,255
  801608:	1080201c 	xori	r2,r2,128
  80160c:	10bfe004 	addi	r2,r2,-128
  801610:	10800060 	cmpeqi	r2,r2,1
  801614:	1007883a 	mov	r3,r2
  801618:	e0bffc17 	ldw	r2,-16(fp)
  80161c:	10c03bc5 	stb	r3,239(r2)
  d->_g91 = d->_g88 && d->_cg90;
  801620:	e0bffc17 	ldw	r2,-16(fp)
  801624:	10802d43 	ldbu	r2,181(r2)
  801628:	10803fcc 	andi	r2,r2,255
  80162c:	1080201c 	xori	r2,r2,128
  801630:	10bfe004 	addi	r2,r2,-128
  801634:	10000826 	beq	r2,zero,801658 <logic+0x488>
  801638:	e0bffc17 	ldw	r2,-16(fp)
  80163c:	10803bc3 	ldbu	r2,239(r2)
  801640:	10803fcc 	andi	r2,r2,255
  801644:	1080201c 	xori	r2,r2,128
  801648:	10bfe004 	addi	r2,r2,-128
  80164c:	10000226 	beq	r2,zero,801658 <logic+0x488>
  801650:	00800044 	movi	r2,1
  801654:	00000106 	br	80165c <logic+0x48c>
  801658:	0005883a 	mov	r2,zero
  80165c:	1007883a 	mov	r3,r2
  801660:	e0bffc17 	ldw	r2,-16(fp)
  801664:	10c02dc5 	stb	r3,183(r2)
  if (d->_g91) {
  801668:	e0bffc17 	ldw	r2,-16(fp)
  80166c:	10802dc3 	ldbu	r2,183(r2)
  801670:	10803fcc 	andi	r2,r2,255
  801674:	1080201c 	xori	r2,r2,128
  801678:	10bfe004 	addi	r2,r2,-128
  80167c:	10000326 	beq	r2,zero,80168c <logic+0x4bc>
    d->_Pacemaker_local__Atrig2 = 1;
  801680:	e0bffc17 	ldw	r2,-16(fp)
  801684:	00c00044 	movi	r3,1
  801688:	10c01e85 	stb	r3,122(r2)
  }
  d->sleepT = 1000.0;
  80168c:	e0fffc17 	ldw	r3,-16(fp)
  801690:	18001b15 	stw	zero,108(r3)
  801694:	009023f4 	movhi	r2,16527
  801698:	10900004 	addi	r2,r2,16384
  80169c:	18801c15 	stw	r2,112(r3)
  d->_g70 = d->_g64 || d->_g70;
  8016a0:	e0bffc17 	ldw	r2,-16(fp)
  8016a4:	10802a43 	ldbu	r2,169(r2)
  8016a8:	10803fcc 	andi	r2,r2,255
  8016ac:	1080201c 	xori	r2,r2,128
  8016b0:	10bfe004 	addi	r2,r2,-128
  8016b4:	1000061e 	bne	r2,zero,8016d0 <logic+0x500>
  8016b8:	e0bffc17 	ldw	r2,-16(fp)
  8016bc:	10802b43 	ldbu	r2,173(r2)
  8016c0:	10803fcc 	andi	r2,r2,255
  8016c4:	1080201c 	xori	r2,r2,128
  8016c8:	10bfe004 	addi	r2,r2,-128
  8016cc:	10000226 	beq	r2,zero,8016d8 <logic+0x508>
  8016d0:	00800044 	movi	r2,1
  8016d4:	00000106 	br	8016dc <logic+0x50c>
  8016d8:	0005883a 	mov	r2,zero
  8016dc:	1007883a 	mov	r3,r2
  8016e0:	e0bffc17 	ldw	r2,-16(fp)
  8016e4:	10c02b45 	stb	r3,173(r2)
  d->_cg65 = d->AEI_Clock < d->AEI;
  8016e8:	e0bffc17 	ldw	r2,-16(fp)
  8016ec:	14000817 	ldw	r16,32(r2)
  8016f0:	14400917 	ldw	r17,36(r2)
  8016f4:	e0bffc17 	ldw	r2,-16(fp)
  8016f8:	10800117 	ldw	r2,4(r2)
  8016fc:	1009883a 	mov	r4,r2
  801700:	08068dc0 	call	8068dc <__floatsidf>
  801704:	1009883a 	mov	r4,r2
  801708:	180b883a 	mov	r5,r3
  80170c:	04800044 	movi	r18,1
  801710:	200d883a 	mov	r6,r4
  801714:	280f883a 	mov	r7,r5
  801718:	8009883a 	mov	r4,r16
  80171c:	880b883a 	mov	r5,r17
  801720:	0805eec0 	call	805eec <__ledf2>
  801724:	10000116 	blt	r2,zero,80172c <logic+0x55c>
  801728:	0025883a 	mov	r18,zero
  80172c:	9007883a 	mov	r3,r18
  801730:	e0bffc17 	ldw	r2,-16(fp)
  801734:	10c03985 	stb	r3,230(r2)
  d->_g64 = d->_g70 && d->_cg65;
  801738:	e0bffc17 	ldw	r2,-16(fp)
  80173c:	10802b43 	ldbu	r2,173(r2)
  801740:	10803fcc 	andi	r2,r2,255
  801744:	1080201c 	xori	r2,r2,128
  801748:	10bfe004 	addi	r2,r2,-128
  80174c:	10000826 	beq	r2,zero,801770 <logic+0x5a0>
  801750:	e0bffc17 	ldw	r2,-16(fp)
  801754:	10803983 	ldbu	r2,230(r2)
  801758:	10803fcc 	andi	r2,r2,255
  80175c:	1080201c 	xori	r2,r2,128
  801760:	10bfe004 	addi	r2,r2,-128
  801764:	10000226 	beq	r2,zero,801770 <logic+0x5a0>
  801768:	00800044 	movi	r2,1
  80176c:	00000106 	br	801774 <logic+0x5a4>
  801770:	0005883a 	mov	r2,zero
  801774:	1007883a 	mov	r3,r2
  801778:	e0bffc17 	ldw	r2,-16(fp)
  80177c:	10c02a45 	stb	r3,169(r2)
  if (d->_g64) {
  801780:	e0bffc17 	ldw	r2,-16(fp)
  801784:	10802a43 	ldbu	r2,169(r2)
  801788:	10803fcc 	andi	r2,r2,255
  80178c:	1080201c 	xori	r2,r2,128
  801790:	10bfe004 	addi	r2,r2,-128
  801794:	10003426 	beq	r2,zero,801868 <logic+0x698>
    d->sleepT = (d->sleepT < (d->AEI - d->AEI_Clock)) ? d->sleepT : (d->AEI - d->AEI_Clock);
  801798:	e0bffc17 	ldw	r2,-16(fp)
  80179c:	14001b17 	ldw	r16,108(r2)
  8017a0:	14401c17 	ldw	r17,112(r2)
  8017a4:	e0bffc17 	ldw	r2,-16(fp)
  8017a8:	10800117 	ldw	r2,4(r2)
  8017ac:	1009883a 	mov	r4,r2
  8017b0:	08068dc0 	call	8068dc <__floatsidf>
  8017b4:	1011883a 	mov	r8,r2
  8017b8:	1813883a 	mov	r9,r3
  8017bc:	e13ffc17 	ldw	r4,-16(fp)
  8017c0:	20800817 	ldw	r2,32(r4)
  8017c4:	20c00917 	ldw	r3,36(r4)
  8017c8:	100d883a 	mov	r6,r2
  8017cc:	180f883a 	mov	r7,r3
  8017d0:	4009883a 	mov	r4,r8
  8017d4:	480b883a 	mov	r5,r9
  8017d8:	0805fe00 	call	805fe0 <__subdf3>
  8017dc:	1009883a 	mov	r4,r2
  8017e0:	180b883a 	mov	r5,r3
  8017e4:	2005883a 	mov	r2,r4
  8017e8:	2807883a 	mov	r3,r5
  8017ec:	100d883a 	mov	r6,r2
  8017f0:	180f883a 	mov	r7,r3
  8017f4:	8009883a 	mov	r4,r16
  8017f8:	880b883a 	mov	r5,r17
  8017fc:	0805eec0 	call	805eec <__ledf2>
  801800:	1000040e 	bge	r2,zero,801814 <logic+0x644>
  801804:	e13ffc17 	ldw	r4,-16(fp)
  801808:	20801b17 	ldw	r2,108(r4)
  80180c:	20c01c17 	ldw	r3,112(r4)
  801810:	00001206 	br	80185c <logic+0x68c>
  801814:	e0bffc17 	ldw	r2,-16(fp)
  801818:	10800117 	ldw	r2,4(r2)
  80181c:	1009883a 	mov	r4,r2
  801820:	08068dc0 	call	8068dc <__floatsidf>
  801824:	1011883a 	mov	r8,r2
  801828:	1813883a 	mov	r9,r3
  80182c:	e13ffc17 	ldw	r4,-16(fp)
  801830:	20800817 	ldw	r2,32(r4)
  801834:	20c00917 	ldw	r3,36(r4)
  801838:	100d883a 	mov	r6,r2
  80183c:	180f883a 	mov	r7,r3
  801840:	4009883a 	mov	r4,r8
  801844:	480b883a 	mov	r5,r9
  801848:	0805fe00 	call	805fe0 <__subdf3>
  80184c:	1009883a 	mov	r4,r2
  801850:	180b883a 	mov	r5,r3
  801854:	2005883a 	mov	r2,r4
  801858:	2807883a 	mov	r3,r5
  80185c:	e13ffc17 	ldw	r4,-16(fp)
  801860:	20801b15 	stw	r2,108(r4)
  801864:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg66 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801868:	e0bffc17 	ldw	r2,-16(fp)
  80186c:	10801e03 	ldbu	r2,120(r2)
  801870:	10803fcc 	andi	r2,r2,255
  801874:	1080201c 	xori	r2,r2,128
  801878:	10bfe004 	addi	r2,r2,-128
  80187c:	10000c1e 	bne	r2,zero,8018b0 <logic+0x6e0>
  801880:	e0bffc17 	ldw	r2,-16(fp)
  801884:	10801e43 	ldbu	r2,121(r2)
  801888:	10803fcc 	andi	r2,r2,255
  80188c:	1080201c 	xori	r2,r2,128
  801890:	10bfe004 	addi	r2,r2,-128
  801894:	1000061e 	bne	r2,zero,8018b0 <logic+0x6e0>
  801898:	e0bffc17 	ldw	r2,-16(fp)
  80189c:	10801e83 	ldbu	r2,122(r2)
  8018a0:	10803fcc 	andi	r2,r2,255
  8018a4:	1080201c 	xori	r2,r2,128
  8018a8:	10bfe004 	addi	r2,r2,-128
  8018ac:	10000226 	beq	r2,zero,8018b8 <logic+0x6e8>
  8018b0:	00800044 	movi	r2,1
  8018b4:	00000106 	br	8018bc <logic+0x6ec>
  8018b8:	0005883a 	mov	r2,zero
  8018bc:	1007883a 	mov	r3,r2
  8018c0:	e0bffc17 	ldw	r2,-16(fp)
  8018c4:	10c03945 	stb	r3,229(r2)
  d->_g65 = d->_g70 && !d->_cg65;
  8018c8:	e0bffc17 	ldw	r2,-16(fp)
  8018cc:	10802b43 	ldbu	r2,173(r2)
  8018d0:	10803fcc 	andi	r2,r2,255
  8018d4:	1080201c 	xori	r2,r2,128
  8018d8:	10bfe004 	addi	r2,r2,-128
  8018dc:	10000826 	beq	r2,zero,801900 <logic+0x730>
  8018e0:	e0bffc17 	ldw	r2,-16(fp)
  8018e4:	10803983 	ldbu	r2,230(r2)
  8018e8:	10803fcc 	andi	r2,r2,255
  8018ec:	1080201c 	xori	r2,r2,128
  8018f0:	10bfe004 	addi	r2,r2,-128
  8018f4:	1000021e 	bne	r2,zero,801900 <logic+0x730>
  8018f8:	00800044 	movi	r2,1
  8018fc:	00000106 	br	801904 <logic+0x734>
  801900:	0005883a 	mov	r2,zero
  801904:	1007883a 	mov	r3,r2
  801908:	e0bffc17 	ldw	r2,-16(fp)
  80190c:	10c02a85 	stb	r3,170(r2)
  d->_cg68 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801910:	e0bffc17 	ldw	r2,-16(fp)
  801914:	10801e03 	ldbu	r2,120(r2)
  801918:	10803fcc 	andi	r2,r2,255
  80191c:	1080201c 	xori	r2,r2,128
  801920:	10bfe004 	addi	r2,r2,-128
  801924:	10000c1e 	bne	r2,zero,801958 <logic+0x788>
  801928:	e0bffc17 	ldw	r2,-16(fp)
  80192c:	10801e43 	ldbu	r2,121(r2)
  801930:	10803fcc 	andi	r2,r2,255
  801934:	1080201c 	xori	r2,r2,128
  801938:	10bfe004 	addi	r2,r2,-128
  80193c:	1000061e 	bne	r2,zero,801958 <logic+0x788>
  801940:	e0bffc17 	ldw	r2,-16(fp)
  801944:	10801e83 	ldbu	r2,122(r2)
  801948:	10803fcc 	andi	r2,r2,255
  80194c:	1080201c 	xori	r2,r2,128
  801950:	10bfe004 	addi	r2,r2,-128
  801954:	10000226 	beq	r2,zero,801960 <logic+0x790>
  801958:	00800044 	movi	r2,1
  80195c:	00000106 	br	801964 <logic+0x794>
  801960:	0005883a 	mov	r2,zero
  801964:	1007883a 	mov	r3,r2
  801968:	e0bffc17 	ldw	r2,-16(fp)
  80196c:	10c039c5 	stb	r3,231(r2)
  d->_g67 = d->_g64 && d->_cg66 || d->_g65 && d->_cg68;
  801970:	e0bffc17 	ldw	r2,-16(fp)
  801974:	10802a43 	ldbu	r2,169(r2)
  801978:	10803fcc 	andi	r2,r2,255
  80197c:	1080201c 	xori	r2,r2,128
  801980:	10bfe004 	addi	r2,r2,-128
  801984:	10000626 	beq	r2,zero,8019a0 <logic+0x7d0>
  801988:	e0bffc17 	ldw	r2,-16(fp)
  80198c:	10803943 	ldbu	r2,229(r2)
  801990:	10803fcc 	andi	r2,r2,255
  801994:	1080201c 	xori	r2,r2,128
  801998:	10bfe004 	addi	r2,r2,-128
  80199c:	10000c1e 	bne	r2,zero,8019d0 <logic+0x800>
  8019a0:	e0bffc17 	ldw	r2,-16(fp)
  8019a4:	10802a83 	ldbu	r2,170(r2)
  8019a8:	10803fcc 	andi	r2,r2,255
  8019ac:	1080201c 	xori	r2,r2,128
  8019b0:	10bfe004 	addi	r2,r2,-128
  8019b4:	10000826 	beq	r2,zero,8019d8 <logic+0x808>
  8019b8:	e0bffc17 	ldw	r2,-16(fp)
  8019bc:	108039c3 	ldbu	r2,231(r2)
  8019c0:	10803fcc 	andi	r2,r2,255
  8019c4:	1080201c 	xori	r2,r2,128
  8019c8:	10bfe004 	addi	r2,r2,-128
  8019cc:	10000226 	beq	r2,zero,8019d8 <logic+0x808>
  8019d0:	00800044 	movi	r2,1
  8019d4:	00000106 	br	8019dc <logic+0x80c>
  8019d8:	0005883a 	mov	r2,zero
  8019dc:	1007883a 	mov	r3,r2
  8019e0:	e0bffc17 	ldw	r2,-16(fp)
  8019e4:	10c02b05 	stb	r3,172(r2)
  d->_g81 = d->_pg57;
  8019e8:	e0bffc17 	ldw	r2,-16(fp)
  8019ec:	10c04103 	ldbu	r3,260(r2)
  8019f0:	e0bffc17 	ldw	r2,-16(fp)
  8019f4:	10c02c45 	stb	r3,177(r2)
  d->_g75 = d->_pg55;
  8019f8:	e0bffc17 	ldw	r2,-16(fp)
  8019fc:	10c04143 	ldbu	r3,261(r2)
  801a00:	e0bffc17 	ldw	r2,-16(fp)
  801a04:	10c02b85 	stb	r3,174(r2)
  d->_g78_e2 = !(d->_g81 || d->_g75);
  801a08:	e0bffc17 	ldw	r2,-16(fp)
  801a0c:	10802c43 	ldbu	r2,177(r2)
  801a10:	10803fcc 	andi	r2,r2,255
  801a14:	1080201c 	xori	r2,r2,128
  801a18:	10bfe004 	addi	r2,r2,-128
  801a1c:	1000081e 	bne	r2,zero,801a40 <logic+0x870>
  801a20:	e0bffc17 	ldw	r2,-16(fp)
  801a24:	10802b83 	ldbu	r2,174(r2)
  801a28:	10803fcc 	andi	r2,r2,255
  801a2c:	1080201c 	xori	r2,r2,128
  801a30:	10bfe004 	addi	r2,r2,-128
  801a34:	1000021e 	bne	r2,zero,801a40 <logic+0x870>
  801a38:	00800044 	movi	r2,1
  801a3c:	00000106 	br	801a44 <logic+0x874>
  801a40:	0005883a 	mov	r2,zero
  801a44:	1007883a 	mov	r3,r2
  801a48:	e0bffc17 	ldw	r2,-16(fp)
  801a4c:	10c03ec5 	stb	r3,251(r2)
  d->_g81 = d->_g75 || d->_g81;
  801a50:	e0bffc17 	ldw	r2,-16(fp)
  801a54:	10802b83 	ldbu	r2,174(r2)
  801a58:	10803fcc 	andi	r2,r2,255
  801a5c:	1080201c 	xori	r2,r2,128
  801a60:	10bfe004 	addi	r2,r2,-128
  801a64:	1000061e 	bne	r2,zero,801a80 <logic+0x8b0>
  801a68:	e0bffc17 	ldw	r2,-16(fp)
  801a6c:	10802c43 	ldbu	r2,177(r2)
  801a70:	10803fcc 	andi	r2,r2,255
  801a74:	1080201c 	xori	r2,r2,128
  801a78:	10bfe004 	addi	r2,r2,-128
  801a7c:	10000226 	beq	r2,zero,801a88 <logic+0x8b8>
  801a80:	00800044 	movi	r2,1
  801a84:	00000106 	br	801a8c <logic+0x8bc>
  801a88:	0005883a 	mov	r2,zero
  801a8c:	1007883a 	mov	r3,r2
  801a90:	e0bffc17 	ldw	r2,-16(fp)
  801a94:	10c02c45 	stb	r3,177(r2)
  d->_cg76 = d->PVARP_Clock < d->PVARP;
  801a98:	e0bffc17 	ldw	r2,-16(fp)
  801a9c:	14000e17 	ldw	r16,56(r2)
  801aa0:	14400f17 	ldw	r17,60(r2)
  801aa4:	e0bffc17 	ldw	r2,-16(fp)
  801aa8:	10800217 	ldw	r2,8(r2)
  801aac:	1009883a 	mov	r4,r2
  801ab0:	08068dc0 	call	8068dc <__floatsidf>
  801ab4:	1009883a 	mov	r4,r2
  801ab8:	180b883a 	mov	r5,r3
  801abc:	04800044 	movi	r18,1
  801ac0:	200d883a 	mov	r6,r4
  801ac4:	280f883a 	mov	r7,r5
  801ac8:	8009883a 	mov	r4,r16
  801acc:	880b883a 	mov	r5,r17
  801ad0:	0805eec0 	call	805eec <__ledf2>
  801ad4:	10000116 	blt	r2,zero,801adc <logic+0x90c>
  801ad8:	0025883a 	mov	r18,zero
  801adc:	9007883a 	mov	r3,r18
  801ae0:	e0bffc17 	ldw	r2,-16(fp)
  801ae4:	10c03b05 	stb	r3,236(r2)
  d->_g75 = d->_g81 && d->_cg76;
  801ae8:	e0bffc17 	ldw	r2,-16(fp)
  801aec:	10802c43 	ldbu	r2,177(r2)
  801af0:	10803fcc 	andi	r2,r2,255
  801af4:	1080201c 	xori	r2,r2,128
  801af8:	10bfe004 	addi	r2,r2,-128
  801afc:	10000826 	beq	r2,zero,801b20 <logic+0x950>
  801b00:	e0bffc17 	ldw	r2,-16(fp)
  801b04:	10803b03 	ldbu	r2,236(r2)
  801b08:	10803fcc 	andi	r2,r2,255
  801b0c:	1080201c 	xori	r2,r2,128
  801b10:	10bfe004 	addi	r2,r2,-128
  801b14:	10000226 	beq	r2,zero,801b20 <logic+0x950>
  801b18:	00800044 	movi	r2,1
  801b1c:	00000106 	br	801b24 <logic+0x954>
  801b20:	0005883a 	mov	r2,zero
  801b24:	1007883a 	mov	r3,r2
  801b28:	e0bffc17 	ldw	r2,-16(fp)
  801b2c:	10c02b85 	stb	r3,174(r2)
  if (d->_g75) {
  801b30:	e0bffc17 	ldw	r2,-16(fp)
  801b34:	10802b83 	ldbu	r2,174(r2)
  801b38:	10803fcc 	andi	r2,r2,255
  801b3c:	1080201c 	xori	r2,r2,128
  801b40:	10bfe004 	addi	r2,r2,-128
  801b44:	10003426 	beq	r2,zero,801c18 <logic+0xa48>
    d->sleepT = (d->sleepT < (d->PVARP - d->PVARP_Clock)) ? d->sleepT : (d->PVARP - d->PVARP_Clock);
  801b48:	e0bffc17 	ldw	r2,-16(fp)
  801b4c:	14001b17 	ldw	r16,108(r2)
  801b50:	14401c17 	ldw	r17,112(r2)
  801b54:	e0bffc17 	ldw	r2,-16(fp)
  801b58:	10800217 	ldw	r2,8(r2)
  801b5c:	1009883a 	mov	r4,r2
  801b60:	08068dc0 	call	8068dc <__floatsidf>
  801b64:	1011883a 	mov	r8,r2
  801b68:	1813883a 	mov	r9,r3
  801b6c:	e13ffc17 	ldw	r4,-16(fp)
  801b70:	20800e17 	ldw	r2,56(r4)
  801b74:	20c00f17 	ldw	r3,60(r4)
  801b78:	100d883a 	mov	r6,r2
  801b7c:	180f883a 	mov	r7,r3
  801b80:	4009883a 	mov	r4,r8
  801b84:	480b883a 	mov	r5,r9
  801b88:	0805fe00 	call	805fe0 <__subdf3>
  801b8c:	1009883a 	mov	r4,r2
  801b90:	180b883a 	mov	r5,r3
  801b94:	2005883a 	mov	r2,r4
  801b98:	2807883a 	mov	r3,r5
  801b9c:	100d883a 	mov	r6,r2
  801ba0:	180f883a 	mov	r7,r3
  801ba4:	8009883a 	mov	r4,r16
  801ba8:	880b883a 	mov	r5,r17
  801bac:	0805eec0 	call	805eec <__ledf2>
  801bb0:	1000040e 	bge	r2,zero,801bc4 <logic+0x9f4>
  801bb4:	e13ffc17 	ldw	r4,-16(fp)
  801bb8:	20801b17 	ldw	r2,108(r4)
  801bbc:	20c01c17 	ldw	r3,112(r4)
  801bc0:	00001206 	br	801c0c <logic+0xa3c>
  801bc4:	e0bffc17 	ldw	r2,-16(fp)
  801bc8:	10800217 	ldw	r2,8(r2)
  801bcc:	1009883a 	mov	r4,r2
  801bd0:	08068dc0 	call	8068dc <__floatsidf>
  801bd4:	1011883a 	mov	r8,r2
  801bd8:	1813883a 	mov	r9,r3
  801bdc:	e13ffc17 	ldw	r4,-16(fp)
  801be0:	20800e17 	ldw	r2,56(r4)
  801be4:	20c00f17 	ldw	r3,60(r4)
  801be8:	100d883a 	mov	r6,r2
  801bec:	180f883a 	mov	r7,r3
  801bf0:	4009883a 	mov	r4,r8
  801bf4:	480b883a 	mov	r5,r9
  801bf8:	0805fe00 	call	805fe0 <__subdf3>
  801bfc:	1009883a 	mov	r4,r2
  801c00:	180b883a 	mov	r5,r3
  801c04:	2005883a 	mov	r2,r4
  801c08:	2807883a 	mov	r3,r5
  801c0c:	e13ffc17 	ldw	r4,-16(fp)
  801c10:	20801b15 	stw	r2,108(r4)
  801c14:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg77 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801c18:	e0bffc17 	ldw	r2,-16(fp)
  801c1c:	10801e03 	ldbu	r2,120(r2)
  801c20:	10803fcc 	andi	r2,r2,255
  801c24:	1080201c 	xori	r2,r2,128
  801c28:	10bfe004 	addi	r2,r2,-128
  801c2c:	10000c1e 	bne	r2,zero,801c60 <logic+0xa90>
  801c30:	e0bffc17 	ldw	r2,-16(fp)
  801c34:	10801e43 	ldbu	r2,121(r2)
  801c38:	10803fcc 	andi	r2,r2,255
  801c3c:	1080201c 	xori	r2,r2,128
  801c40:	10bfe004 	addi	r2,r2,-128
  801c44:	1000061e 	bne	r2,zero,801c60 <logic+0xa90>
  801c48:	e0bffc17 	ldw	r2,-16(fp)
  801c4c:	10801e83 	ldbu	r2,122(r2)
  801c50:	10803fcc 	andi	r2,r2,255
  801c54:	1080201c 	xori	r2,r2,128
  801c58:	10bfe004 	addi	r2,r2,-128
  801c5c:	10000226 	beq	r2,zero,801c68 <logic+0xa98>
  801c60:	00800044 	movi	r2,1
  801c64:	00000106 	br	801c6c <logic+0xa9c>
  801c68:	0005883a 	mov	r2,zero
  801c6c:	1007883a 	mov	r3,r2
  801c70:	e0bffc17 	ldw	r2,-16(fp)
  801c74:	10c03ac5 	stb	r3,235(r2)
  d->_g76 = d->_g81 && !d->_cg76;
  801c78:	e0bffc17 	ldw	r2,-16(fp)
  801c7c:	10802c43 	ldbu	r2,177(r2)
  801c80:	10803fcc 	andi	r2,r2,255
  801c84:	1080201c 	xori	r2,r2,128
  801c88:	10bfe004 	addi	r2,r2,-128
  801c8c:	10000826 	beq	r2,zero,801cb0 <logic+0xae0>
  801c90:	e0bffc17 	ldw	r2,-16(fp)
  801c94:	10803b03 	ldbu	r2,236(r2)
  801c98:	10803fcc 	andi	r2,r2,255
  801c9c:	1080201c 	xori	r2,r2,128
  801ca0:	10bfe004 	addi	r2,r2,-128
  801ca4:	1000021e 	bne	r2,zero,801cb0 <logic+0xae0>
  801ca8:	00800044 	movi	r2,1
  801cac:	00000106 	br	801cb4 <logic+0xae4>
  801cb0:	0005883a 	mov	r2,zero
  801cb4:	1007883a 	mov	r3,r2
  801cb8:	e0bffc17 	ldw	r2,-16(fp)
  801cbc:	10c02bc5 	stb	r3,175(r2)
  d->_cg79 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801cc0:	e0bffc17 	ldw	r2,-16(fp)
  801cc4:	10801e03 	ldbu	r2,120(r2)
  801cc8:	10803fcc 	andi	r2,r2,255
  801ccc:	1080201c 	xori	r2,r2,128
  801cd0:	10bfe004 	addi	r2,r2,-128
  801cd4:	10000c1e 	bne	r2,zero,801d08 <logic+0xb38>
  801cd8:	e0bffc17 	ldw	r2,-16(fp)
  801cdc:	10801e43 	ldbu	r2,121(r2)
  801ce0:	10803fcc 	andi	r2,r2,255
  801ce4:	1080201c 	xori	r2,r2,128
  801ce8:	10bfe004 	addi	r2,r2,-128
  801cec:	1000061e 	bne	r2,zero,801d08 <logic+0xb38>
  801cf0:	e0bffc17 	ldw	r2,-16(fp)
  801cf4:	10801e83 	ldbu	r2,122(r2)
  801cf8:	10803fcc 	andi	r2,r2,255
  801cfc:	1080201c 	xori	r2,r2,128
  801d00:	10bfe004 	addi	r2,r2,-128
  801d04:	10000226 	beq	r2,zero,801d10 <logic+0xb40>
  801d08:	00800044 	movi	r2,1
  801d0c:	00000106 	br	801d14 <logic+0xb44>
  801d10:	0005883a 	mov	r2,zero
  801d14:	1007883a 	mov	r3,r2
  801d18:	e0bffc17 	ldw	r2,-16(fp)
  801d1c:	10c03b45 	stb	r3,237(r2)
  d->_g78 = d->_g75 && d->_cg77 || d->_g76 && d->_cg79;
  801d20:	e0bffc17 	ldw	r2,-16(fp)
  801d24:	10802b83 	ldbu	r2,174(r2)
  801d28:	10803fcc 	andi	r2,r2,255
  801d2c:	1080201c 	xori	r2,r2,128
  801d30:	10bfe004 	addi	r2,r2,-128
  801d34:	10000626 	beq	r2,zero,801d50 <logic+0xb80>
  801d38:	e0bffc17 	ldw	r2,-16(fp)
  801d3c:	10803ac3 	ldbu	r2,235(r2)
  801d40:	10803fcc 	andi	r2,r2,255
  801d44:	1080201c 	xori	r2,r2,128
  801d48:	10bfe004 	addi	r2,r2,-128
  801d4c:	10000c1e 	bne	r2,zero,801d80 <logic+0xbb0>
  801d50:	e0bffc17 	ldw	r2,-16(fp)
  801d54:	10802bc3 	ldbu	r2,175(r2)
  801d58:	10803fcc 	andi	r2,r2,255
  801d5c:	1080201c 	xori	r2,r2,128
  801d60:	10bfe004 	addi	r2,r2,-128
  801d64:	10000826 	beq	r2,zero,801d88 <logic+0xbb8>
  801d68:	e0bffc17 	ldw	r2,-16(fp)
  801d6c:	10803b43 	ldbu	r2,237(r2)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	10000226 	beq	r2,zero,801d88 <logic+0xbb8>
  801d80:	00800044 	movi	r2,1
  801d84:	00000106 	br	801d8c <logic+0xbbc>
  801d88:	0005883a 	mov	r2,zero
  801d8c:	1007883a 	mov	r3,r2
  801d90:	e0bffc17 	ldw	r2,-16(fp)
  801d94:	10c02c05 	stb	r3,176(r2)
  d->_g85 = !d->_g85;
  801d98:	e0bffc17 	ldw	r2,-16(fp)
  801d9c:	10802c83 	ldbu	r2,178(r2)
  801da0:	10803fcc 	andi	r2,r2,255
  801da4:	1080201c 	xori	r2,r2,128
  801da8:	10bfe004 	addi	r2,r2,-128
  801dac:	1005003a 	cmpeq	r2,r2,zero
  801db0:	1007883a 	mov	r3,r2
  801db4:	e0bffc17 	ldw	r2,-16(fp)
  801db8:	10c02c85 	stb	r3,178(r2)
  d->_g91 = d->_g86 || d->_g89 || d->_g91;
  801dbc:	e0bffc17 	ldw	r2,-16(fp)
  801dc0:	10802cc3 	ldbu	r2,179(r2)
  801dc4:	10803fcc 	andi	r2,r2,255
  801dc8:	1080201c 	xori	r2,r2,128
  801dcc:	10bfe004 	addi	r2,r2,-128
  801dd0:	10000c1e 	bne	r2,zero,801e04 <logic+0xc34>
  801dd4:	e0bffc17 	ldw	r2,-16(fp)
  801dd8:	10802d83 	ldbu	r2,182(r2)
  801ddc:	10803fcc 	andi	r2,r2,255
  801de0:	1080201c 	xori	r2,r2,128
  801de4:	10bfe004 	addi	r2,r2,-128
  801de8:	1000061e 	bne	r2,zero,801e04 <logic+0xc34>
  801dec:	e0bffc17 	ldw	r2,-16(fp)
  801df0:	10802dc3 	ldbu	r2,183(r2)
  801df4:	10803fcc 	andi	r2,r2,255
  801df8:	1080201c 	xori	r2,r2,128
  801dfc:	10bfe004 	addi	r2,r2,-128
  801e00:	10000226 	beq	r2,zero,801e0c <logic+0xc3c>
  801e04:	00800044 	movi	r2,1
  801e08:	00000106 	br	801e10 <logic+0xc40>
  801e0c:	0005883a 	mov	r2,zero
  801e10:	1007883a 	mov	r3,r2
  801e14:	e0bffc17 	ldw	r2,-16(fp)
  801e18:	10c02dc5 	stb	r3,183(r2)
  d->_g89 = (d->_g67_e1 || d->_g67) && (d->_g78_e2 || d->_g78) && (d->_g85 || d->_g91) && (d->_g67 || d->_g78 || d->_g91);
  801e1c:	e0bffc17 	ldw	r2,-16(fp)
  801e20:	10803e83 	ldbu	r2,250(r2)
  801e24:	10803fcc 	andi	r2,r2,255
  801e28:	1080201c 	xori	r2,r2,128
  801e2c:	10bfe004 	addi	r2,r2,-128
  801e30:	1000061e 	bne	r2,zero,801e4c <logic+0xc7c>
  801e34:	e0bffc17 	ldw	r2,-16(fp)
  801e38:	10802b03 	ldbu	r2,172(r2)
  801e3c:	10803fcc 	andi	r2,r2,255
  801e40:	1080201c 	xori	r2,r2,128
  801e44:	10bfe004 	addi	r2,r2,-128
  801e48:	10002c26 	beq	r2,zero,801efc <logic+0xd2c>
  801e4c:	e0bffc17 	ldw	r2,-16(fp)
  801e50:	10803ec3 	ldbu	r2,251(r2)
  801e54:	10803fcc 	andi	r2,r2,255
  801e58:	1080201c 	xori	r2,r2,128
  801e5c:	10bfe004 	addi	r2,r2,-128
  801e60:	1000061e 	bne	r2,zero,801e7c <logic+0xcac>
  801e64:	e0bffc17 	ldw	r2,-16(fp)
  801e68:	10802c03 	ldbu	r2,176(r2)
  801e6c:	10803fcc 	andi	r2,r2,255
  801e70:	1080201c 	xori	r2,r2,128
  801e74:	10bfe004 	addi	r2,r2,-128
  801e78:	10002026 	beq	r2,zero,801efc <logic+0xd2c>
  801e7c:	e0bffc17 	ldw	r2,-16(fp)
  801e80:	10802c83 	ldbu	r2,178(r2)
  801e84:	10803fcc 	andi	r2,r2,255
  801e88:	1080201c 	xori	r2,r2,128
  801e8c:	10bfe004 	addi	r2,r2,-128
  801e90:	1000061e 	bne	r2,zero,801eac <logic+0xcdc>
  801e94:	e0bffc17 	ldw	r2,-16(fp)
  801e98:	10802dc3 	ldbu	r2,183(r2)
  801e9c:	10803fcc 	andi	r2,r2,255
  801ea0:	1080201c 	xori	r2,r2,128
  801ea4:	10bfe004 	addi	r2,r2,-128
  801ea8:	10001426 	beq	r2,zero,801efc <logic+0xd2c>
  801eac:	e0bffc17 	ldw	r2,-16(fp)
  801eb0:	10802b03 	ldbu	r2,172(r2)
  801eb4:	10803fcc 	andi	r2,r2,255
  801eb8:	1080201c 	xori	r2,r2,128
  801ebc:	10bfe004 	addi	r2,r2,-128
  801ec0:	10000c1e 	bne	r2,zero,801ef4 <logic+0xd24>
  801ec4:	e0bffc17 	ldw	r2,-16(fp)
  801ec8:	10802c03 	ldbu	r2,176(r2)
  801ecc:	10803fcc 	andi	r2,r2,255
  801ed0:	1080201c 	xori	r2,r2,128
  801ed4:	10bfe004 	addi	r2,r2,-128
  801ed8:	1000061e 	bne	r2,zero,801ef4 <logic+0xd24>
  801edc:	e0bffc17 	ldw	r2,-16(fp)
  801ee0:	10802dc3 	ldbu	r2,183(r2)
  801ee4:	10803fcc 	andi	r2,r2,255
  801ee8:	1080201c 	xori	r2,r2,128
  801eec:	10bfe004 	addi	r2,r2,-128
  801ef0:	10000226 	beq	r2,zero,801efc <logic+0xd2c>
  801ef4:	00800044 	movi	r2,1
  801ef8:	00000106 	br	801f00 <logic+0xd30>
  801efc:	0005883a 	mov	r2,zero
  801f00:	1007883a 	mov	r3,r2
  801f04:	e0bffc17 	ldw	r2,-16(fp)
  801f08:	10c02d85 	stb	r3,182(r2)
  d->_cg92 = d->_Pacemaker_local__Atrig;
  801f0c:	e0bffc17 	ldw	r2,-16(fp)
  801f10:	10c01e03 	ldbu	r3,120(r2)
  801f14:	e0bffc17 	ldw	r2,-16(fp)
  801f18:	10c03c85 	stb	r3,242(r2)
  d->_g86 = d->_g89 && d->_cg92;
  801f1c:	e0bffc17 	ldw	r2,-16(fp)
  801f20:	10802d83 	ldbu	r2,182(r2)
  801f24:	10803fcc 	andi	r2,r2,255
  801f28:	1080201c 	xori	r2,r2,128
  801f2c:	10bfe004 	addi	r2,r2,-128
  801f30:	10000826 	beq	r2,zero,801f54 <logic+0xd84>
  801f34:	e0bffc17 	ldw	r2,-16(fp)
  801f38:	10803c83 	ldbu	r2,242(r2)
  801f3c:	10803fcc 	andi	r2,r2,255
  801f40:	1080201c 	xori	r2,r2,128
  801f44:	10bfe004 	addi	r2,r2,-128
  801f48:	10000226 	beq	r2,zero,801f54 <logic+0xd84>
  801f4c:	00800044 	movi	r2,1
  801f50:	00000106 	br	801f58 <logic+0xd88>
  801f54:	0005883a 	mov	r2,zero
  801f58:	1007883a 	mov	r3,r2
  801f5c:	e0bffc17 	ldw	r2,-16(fp)
  801f60:	10c02cc5 	stb	r3,179(r2)
  if (d->_g86) {
  801f64:	e0bffc17 	ldw	r2,-16(fp)
  801f68:	10802cc3 	ldbu	r2,179(r2)
  801f6c:	10803fcc 	andi	r2,r2,255
  801f70:	1080201c 	xori	r2,r2,128
  801f74:	10bfe004 	addi	r2,r2,-128
  801f78:	10000526 	beq	r2,zero,801f90 <logic+0xdc0>
    d->_taken_transitions[0] += 1;
  801f7c:	e0bffc17 	ldw	r2,-16(fp)
  801f80:	10801217 	ldw	r2,72(r2)
  801f84:	10c00044 	addi	r3,r2,1
  801f88:	e0bffc17 	ldw	r2,-16(fp)
  801f8c:	10c01215 	stw	r3,72(r2)
  }
  d->_g87 = d->_pg67_e1;
  801f90:	e0bffc17 	ldw	r2,-16(fp)
  801f94:	10c04183 	ldbu	r3,262(r2)
  801f98:	e0bffc17 	ldw	r2,-16(fp)
  801f9c:	10c02d05 	stb	r3,180(r2)
  d->_g67_e1 = d->_GO || d->_g87;
  801fa0:	e0bffc17 	ldw	r2,-16(fp)
  801fa4:	10803183 	ldbu	r2,198(r2)
  801fa8:	10803fcc 	andi	r2,r2,255
  801fac:	1080201c 	xori	r2,r2,128
  801fb0:	10bfe004 	addi	r2,r2,-128
  801fb4:	1000061e 	bne	r2,zero,801fd0 <logic+0xe00>
  801fb8:	e0bffc17 	ldw	r2,-16(fp)
  801fbc:	10802d03 	ldbu	r2,180(r2)
  801fc0:	10803fcc 	andi	r2,r2,255
  801fc4:	1080201c 	xori	r2,r2,128
  801fc8:	10bfe004 	addi	r2,r2,-128
  801fcc:	10000226 	beq	r2,zero,801fd8 <logic+0xe08>
  801fd0:	00800044 	movi	r2,1
  801fd4:	00000106 	br	801fdc <logic+0xe0c>
  801fd8:	0005883a 	mov	r2,zero
  801fdc:	1007883a 	mov	r3,r2
  801fe0:	e0bffc17 	ldw	r2,-16(fp)
  801fe4:	10c03e85 	stb	r3,250(r2)
  if (d->_g67_e1) {
  801fe8:	e0bffc17 	ldw	r2,-16(fp)
  801fec:	10803e83 	ldbu	r2,250(r2)
  801ff0:	10803fcc 	andi	r2,r2,255
  801ff4:	1080201c 	xori	r2,r2,128
  801ff8:	10bfe004 	addi	r2,r2,-128
  801ffc:	10000426 	beq	r2,zero,802010 <logic+0xe40>
    d->AP = 0;
  802000:	e0bffc17 	ldw	r2,-16(fp)
  802004:	10001d85 	stb	zero,118(r2)
    d->VP = 0;
  802008:	e0bffc17 	ldw	r2,-16(fp)
  80200c:	10001dc5 	stb	zero,119(r2)
  }
  d->_g87_e3 = d->_g89 && !d->_cg92;
  802010:	e0bffc17 	ldw	r2,-16(fp)
  802014:	10802d83 	ldbu	r2,182(r2)
  802018:	10803fcc 	andi	r2,r2,255
  80201c:	1080201c 	xori	r2,r2,128
  802020:	10bfe004 	addi	r2,r2,-128
  802024:	10000826 	beq	r2,zero,802048 <logic+0xe78>
  802028:	e0bffc17 	ldw	r2,-16(fp)
  80202c:	10803c83 	ldbu	r2,242(r2)
  802030:	10803fcc 	andi	r2,r2,255
  802034:	1080201c 	xori	r2,r2,128
  802038:	10bfe004 	addi	r2,r2,-128
  80203c:	1000021e 	bne	r2,zero,802048 <logic+0xe78>
  802040:	00800044 	movi	r2,1
  802044:	00000106 	br	80204c <logic+0xe7c>
  802048:	0005883a 	mov	r2,zero
  80204c:	1007883a 	mov	r3,r2
  802050:	e0bffc17 	ldw	r2,-16(fp)
  802054:	10c03f05 	stb	r3,252(r2)
  d->_cg94 = d->_Pacemaker_local__Atrig1;
  802058:	e0bffc17 	ldw	r2,-16(fp)
  80205c:	10c01e43 	ldbu	r3,121(r2)
  802060:	e0bffc17 	ldw	r2,-16(fp)
  802064:	10c03cc5 	stb	r3,243(r2)
  d->_g67 = d->_g87_e3 && d->_cg94;
  802068:	e0bffc17 	ldw	r2,-16(fp)
  80206c:	10803f03 	ldbu	r2,252(r2)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1080201c 	xori	r2,r2,128
  802078:	10bfe004 	addi	r2,r2,-128
  80207c:	10000826 	beq	r2,zero,8020a0 <logic+0xed0>
  802080:	e0bffc17 	ldw	r2,-16(fp)
  802084:	10803cc3 	ldbu	r2,243(r2)
  802088:	10803fcc 	andi	r2,r2,255
  80208c:	1080201c 	xori	r2,r2,128
  802090:	10bfe004 	addi	r2,r2,-128
  802094:	10000226 	beq	r2,zero,8020a0 <logic+0xed0>
  802098:	00800044 	movi	r2,1
  80209c:	00000106 	br	8020a4 <logic+0xed4>
  8020a0:	0005883a 	mov	r2,zero
  8020a4:	1007883a 	mov	r3,r2
  8020a8:	e0bffc17 	ldw	r2,-16(fp)
  8020ac:	10c02b05 	stb	r3,172(r2)
  if (d->_g67) {
  8020b0:	e0bffc17 	ldw	r2,-16(fp)
  8020b4:	10802b03 	ldbu	r2,172(r2)
  8020b8:	10803fcc 	andi	r2,r2,255
  8020bc:	1080201c 	xori	r2,r2,128
  8020c0:	10bfe004 	addi	r2,r2,-128
  8020c4:	10000b26 	beq	r2,zero,8020f4 <logic+0xf24>
    d->AP |= 1;
  8020c8:	e0bffc17 	ldw	r2,-16(fp)
  8020cc:	10801d83 	ldbu	r2,118(r2)
  8020d0:	10800054 	ori	r2,r2,1
  8020d4:	1007883a 	mov	r3,r2
  8020d8:	e0bffc17 	ldw	r2,-16(fp)
  8020dc:	10c01d85 	stb	r3,118(r2)
    d->_taken_transitions[1] += 1;
  8020e0:	e0bffc17 	ldw	r2,-16(fp)
  8020e4:	10801317 	ldw	r2,76(r2)
  8020e8:	10c00044 	addi	r3,r2,1
  8020ec:	e0bffc17 	ldw	r2,-16(fp)
  8020f0:	10c01315 	stw	r3,76(r2)
  }
  d->_g78 = d->_pg32;
  8020f4:	e0bffc17 	ldw	r2,-16(fp)
  8020f8:	10c041c3 	ldbu	r3,263(r2)
  8020fc:	e0bffc17 	ldw	r2,-16(fp)
  802100:	10c02c05 	stb	r3,176(r2)
  d->_g78_e2 = d->_pg10;
  802104:	e0bffc17 	ldw	r2,-16(fp)
  802108:	10c04203 	ldbu	r3,264(r2)
  80210c:	e0bffc17 	ldw	r2,-16(fp)
  802110:	10c03ec5 	stb	r3,251(r2)
  d->_g135 = !(d->_g78 || d->_g78_e2);
  802114:	e0bffc17 	ldw	r2,-16(fp)
  802118:	10802c03 	ldbu	r2,176(r2)
  80211c:	10803fcc 	andi	r2,r2,255
  802120:	1080201c 	xori	r2,r2,128
  802124:	10bfe004 	addi	r2,r2,-128
  802128:	1000081e 	bne	r2,zero,80214c <logic+0xf7c>
  80212c:	e0bffc17 	ldw	r2,-16(fp)
  802130:	10803ec3 	ldbu	r2,251(r2)
  802134:	10803fcc 	andi	r2,r2,255
  802138:	1080201c 	xori	r2,r2,128
  80213c:	10bfe004 	addi	r2,r2,-128
  802140:	1000021e 	bne	r2,zero,80214c <logic+0xf7c>
  802144:	00800044 	movi	r2,1
  802148:	00000106 	br	802150 <logic+0xf80>
  80214c:	0005883a 	mov	r2,zero
  802150:	1007883a 	mov	r3,r2
  802154:	e0bffc17 	ldw	r2,-16(fp)
  802158:	10c03145 	stb	r3,197(r2)
  d->_g92 = d->_pg59;
  80215c:	e0bffc17 	ldw	r2,-16(fp)
  802160:	10c04243 	ldbu	r3,265(r2)
  802164:	e0bffc17 	ldw	r2,-16(fp)
  802168:	10c02e05 	stb	r3,184(r2)
  if (d->_g92) {
  80216c:	e0bffc17 	ldw	r2,-16(fp)
  802170:	10802e03 	ldbu	r2,184(r2)
  802174:	10803fcc 	andi	r2,r2,255
  802178:	1080201c 	xori	r2,r2,128
  80217c:	10bfe004 	addi	r2,r2,-128
  802180:	10001226 	beq	r2,zero,8021cc <logic+0xffc>
    d->URI_Clock += d->deltaT;
  802184:	e13ffc17 	ldw	r4,-16(fp)
  802188:	20800c17 	ldw	r2,48(r4)
  80218c:	20c00d17 	ldw	r3,52(r4)
  802190:	e1bffc17 	ldw	r6,-16(fp)
  802194:	31001917 	ldw	r4,100(r6)
  802198:	31401a17 	ldw	r5,104(r6)
  80219c:	200d883a 	mov	r6,r4
  8021a0:	280f883a 	mov	r7,r5
  8021a4:	1009883a 	mov	r4,r2
  8021a8:	180b883a 	mov	r5,r3
  8021ac:	08055640 	call	805564 <__adddf3>
  8021b0:	1009883a 	mov	r4,r2
  8021b4:	180b883a 	mov	r5,r3
  8021b8:	2005883a 	mov	r2,r4
  8021bc:	2807883a 	mov	r3,r5
  8021c0:	e13ffc17 	ldw	r4,-16(fp)
  8021c4:	20800c15 	stw	r2,48(r4)
  8021c8:	20c00d15 	stw	r3,52(r4)
  }
  d->_g50 = d->_pg20;
  8021cc:	e0bffc17 	ldw	r2,-16(fp)
  8021d0:	10c04283 	ldbu	r3,266(r2)
  8021d4:	e0bffc17 	ldw	r2,-16(fp)
  8021d8:	10c027c5 	stb	r3,159(r2)
  d->_cg50 = d->VS == 0 && d->AVI_Clock >= d->AVI && d->URI_Clock >= d->URI;
  8021dc:	e0bffc17 	ldw	r2,-16(fp)
  8021e0:	10801d43 	ldbu	r2,117(r2)
  8021e4:	10803fcc 	andi	r2,r2,255
  8021e8:	1080201c 	xori	r2,r2,128
  8021ec:	10bfe004 	addi	r2,r2,-128
  8021f0:	1000201e 	bne	r2,zero,802274 <logic+0x10a4>
  8021f4:	e0bffc17 	ldw	r2,-16(fp)
  8021f8:	14001017 	ldw	r16,64(r2)
  8021fc:	14401117 	ldw	r17,68(r2)
  802200:	e0bffc17 	ldw	r2,-16(fp)
  802204:	10800017 	ldw	r2,0(r2)
  802208:	1009883a 	mov	r4,r2
  80220c:	08068dc0 	call	8068dc <__floatsidf>
  802210:	1009883a 	mov	r4,r2
  802214:	180b883a 	mov	r5,r3
  802218:	200d883a 	mov	r6,r4
  80221c:	280f883a 	mov	r7,r5
  802220:	8009883a 	mov	r4,r16
  802224:	880b883a 	mov	r5,r17
  802228:	0805e100 	call	805e10 <__gedf2>
  80222c:	10001116 	blt	r2,zero,802274 <logic+0x10a4>
  802230:	e0bffc17 	ldw	r2,-16(fp)
  802234:	14000c17 	ldw	r16,48(r2)
  802238:	14400d17 	ldw	r17,52(r2)
  80223c:	e0bffc17 	ldw	r2,-16(fp)
  802240:	10800517 	ldw	r2,20(r2)
  802244:	1009883a 	mov	r4,r2
  802248:	08068dc0 	call	8068dc <__floatsidf>
  80224c:	1009883a 	mov	r4,r2
  802250:	180b883a 	mov	r5,r3
  802254:	200d883a 	mov	r6,r4
  802258:	280f883a 	mov	r7,r5
  80225c:	8009883a 	mov	r4,r16
  802260:	880b883a 	mov	r5,r17
  802264:	0805e100 	call	805e10 <__gedf2>
  802268:	10000216 	blt	r2,zero,802274 <logic+0x10a4>
  80226c:	00800044 	movi	r2,1
  802270:	00000106 	br	802278 <logic+0x10a8>
  802274:	0005883a 	mov	r2,zero
  802278:	1007883a 	mov	r3,r2
  80227c:	e0bffc17 	ldw	r2,-16(fp)
  802280:	10c03805 	stb	r3,224(r2)
  d->_g51 = d->_g50 && d->_cg50;
  802284:	e0bffc17 	ldw	r2,-16(fp)
  802288:	108027c3 	ldbu	r2,159(r2)
  80228c:	10803fcc 	andi	r2,r2,255
  802290:	1080201c 	xori	r2,r2,128
  802294:	10bfe004 	addi	r2,r2,-128
  802298:	10000826 	beq	r2,zero,8022bc <logic+0x10ec>
  80229c:	e0bffc17 	ldw	r2,-16(fp)
  8022a0:	10803803 	ldbu	r2,224(r2)
  8022a4:	10803fcc 	andi	r2,r2,255
  8022a8:	1080201c 	xori	r2,r2,128
  8022ac:	10bfe004 	addi	r2,r2,-128
  8022b0:	10000226 	beq	r2,zero,8022bc <logic+0x10ec>
  8022b4:	00800044 	movi	r2,1
  8022b8:	00000106 	br	8022c0 <logic+0x10f0>
  8022bc:	0005883a 	mov	r2,zero
  8022c0:	1007883a 	mov	r3,r2
  8022c4:	e0bffc17 	ldw	r2,-16(fp)
  8022c8:	10c02805 	stb	r3,160(r2)
  if (d->_g51) {
  8022cc:	e0bffc17 	ldw	r2,-16(fp)
  8022d0:	10802803 	ldbu	r2,160(r2)
  8022d4:	10803fcc 	andi	r2,r2,255
  8022d8:	1080201c 	xori	r2,r2,128
  8022dc:	10bfe004 	addi	r2,r2,-128
  8022e0:	10000326 	beq	r2,zero,8022f0 <logic+0x1120>
    d->_Pacemaker_local__Atrig3 = 1;
  8022e4:	e0bffc17 	ldw	r2,-16(fp)
  8022e8:	00c00044 	movi	r3,1
  8022ec:	10c01ec5 	stb	r3,123(r2)
  }
  d->_g107 = d->_pg99;
  8022f0:	e0bffc17 	ldw	r2,-16(fp)
  8022f4:	10c042c3 	ldbu	r3,267(r2)
  8022f8:	e0bffc17 	ldw	r2,-16(fp)
  8022fc:	10c03005 	stb	r3,192(r2)
  if (d->_g107) {
  802300:	e0bffc17 	ldw	r2,-16(fp)
  802304:	10803003 	ldbu	r2,192(r2)
  802308:	10803fcc 	andi	r2,r2,255
  80230c:	1080201c 	xori	r2,r2,128
  802310:	10bfe004 	addi	r2,r2,-128
  802314:	10001226 	beq	r2,zero,802360 <logic+0x1190>
    d->VRP_Clock += d->deltaT;
  802318:	e13ffc17 	ldw	r4,-16(fp)
  80231c:	20800617 	ldw	r2,24(r4)
  802320:	20c00717 	ldw	r3,28(r4)
  802324:	e1bffc17 	ldw	r6,-16(fp)
  802328:	31001917 	ldw	r4,100(r6)
  80232c:	31401a17 	ldw	r5,104(r6)
  802330:	200d883a 	mov	r6,r4
  802334:	280f883a 	mov	r7,r5
  802338:	1009883a 	mov	r4,r2
  80233c:	180b883a 	mov	r5,r3
  802340:	08055640 	call	805564 <__adddf3>
  802344:	1009883a 	mov	r4,r2
  802348:	180b883a 	mov	r5,r3
  80234c:	2005883a 	mov	r2,r4
  802350:	2807883a 	mov	r3,r5
  802354:	e13ffc17 	ldw	r4,-16(fp)
  802358:	20800615 	stw	r2,24(r4)
  80235c:	20c00715 	stw	r3,28(r4)
  }
  d->_g53 = d->_g50 && !d->_cg50;
  802360:	e0bffc17 	ldw	r2,-16(fp)
  802364:	108027c3 	ldbu	r2,159(r2)
  802368:	10803fcc 	andi	r2,r2,255
  80236c:	1080201c 	xori	r2,r2,128
  802370:	10bfe004 	addi	r2,r2,-128
  802374:	10000826 	beq	r2,zero,802398 <logic+0x11c8>
  802378:	e0bffc17 	ldw	r2,-16(fp)
  80237c:	10803803 	ldbu	r2,224(r2)
  802380:	10803fcc 	andi	r2,r2,255
  802384:	1080201c 	xori	r2,r2,128
  802388:	10bfe004 	addi	r2,r2,-128
  80238c:	1000021e 	bne	r2,zero,802398 <logic+0x11c8>
  802390:	00800044 	movi	r2,1
  802394:	00000106 	br	80239c <logic+0x11cc>
  802398:	0005883a 	mov	r2,zero
  80239c:	1007883a 	mov	r3,r2
  8023a0:	e0bffc17 	ldw	r2,-16(fp)
  8023a4:	10c02885 	stb	r3,162(r2)
  d->_cg53 = d->VS == 1 && d->VRP_Clock >= d->VRP;
  8023a8:	e0bffc17 	ldw	r2,-16(fp)
  8023ac:	10801d43 	ldbu	r2,117(r2)
  8023b0:	10803fcc 	andi	r2,r2,255
  8023b4:	1080201c 	xori	r2,r2,128
  8023b8:	10bfe004 	addi	r2,r2,-128
  8023bc:	10800058 	cmpnei	r2,r2,1
  8023c0:	1000111e 	bne	r2,zero,802408 <logic+0x1238>
  8023c4:	e0bffc17 	ldw	r2,-16(fp)
  8023c8:	14000617 	ldw	r16,24(r2)
  8023cc:	14400717 	ldw	r17,28(r2)
  8023d0:	e0bffc17 	ldw	r2,-16(fp)
  8023d4:	10800317 	ldw	r2,12(r2)
  8023d8:	1009883a 	mov	r4,r2
  8023dc:	08068dc0 	call	8068dc <__floatsidf>
  8023e0:	1009883a 	mov	r4,r2
  8023e4:	180b883a 	mov	r5,r3
  8023e8:	200d883a 	mov	r6,r4
  8023ec:	280f883a 	mov	r7,r5
  8023f0:	8009883a 	mov	r4,r16
  8023f4:	880b883a 	mov	r5,r17
  8023f8:	0805e100 	call	805e10 <__gedf2>
  8023fc:	10000216 	blt	r2,zero,802408 <logic+0x1238>
  802400:	00800044 	movi	r2,1
  802404:	00000106 	br	80240c <logic+0x123c>
  802408:	0005883a 	mov	r2,zero
  80240c:	1007883a 	mov	r3,r2
  802410:	e0bffc17 	ldw	r2,-16(fp)
  802414:	10c03845 	stb	r3,225(r2)
  d->_g54 = d->_g53 && d->_cg53;
  802418:	e0bffc17 	ldw	r2,-16(fp)
  80241c:	10802883 	ldbu	r2,162(r2)
  802420:	10803fcc 	andi	r2,r2,255
  802424:	1080201c 	xori	r2,r2,128
  802428:	10bfe004 	addi	r2,r2,-128
  80242c:	10000826 	beq	r2,zero,802450 <logic+0x1280>
  802430:	e0bffc17 	ldw	r2,-16(fp)
  802434:	10803843 	ldbu	r2,225(r2)
  802438:	10803fcc 	andi	r2,r2,255
  80243c:	1080201c 	xori	r2,r2,128
  802440:	10bfe004 	addi	r2,r2,-128
  802444:	10000226 	beq	r2,zero,802450 <logic+0x1280>
  802448:	00800044 	movi	r2,1
  80244c:	00000106 	br	802454 <logic+0x1284>
  802450:	0005883a 	mov	r2,zero
  802454:	1007883a 	mov	r3,r2
  802458:	e0bffc17 	ldw	r2,-16(fp)
  80245c:	10c028c5 	stb	r3,163(r2)
  if (d->_g54) {
  802460:	e0bffc17 	ldw	r2,-16(fp)
  802464:	108028c3 	ldbu	r2,163(r2)
  802468:	10803fcc 	andi	r2,r2,255
  80246c:	1080201c 	xori	r2,r2,128
  802470:	10bfe004 	addi	r2,r2,-128
  802474:	10000326 	beq	r2,zero,802484 <logic+0x12b4>
    d->_Pacemaker_local__Atrig4 = 1;
  802478:	e0bffc17 	ldw	r2,-16(fp)
  80247c:	00c00044 	movi	r3,1
  802480:	10c01f05 	stb	r3,124(r2)
  }
  d->_g115 = d->_pg94;
  802484:	e0bffc17 	ldw	r2,-16(fp)
  802488:	10c04303 	ldbu	r3,268(r2)
  80248c:	e0bffc17 	ldw	r2,-16(fp)
  802490:	10c03085 	stb	r3,194(r2)
  if (d->_g115) {
  802494:	e0bffc17 	ldw	r2,-16(fp)
  802498:	10803083 	ldbu	r2,194(r2)
  80249c:	10803fcc 	andi	r2,r2,255
  8024a0:	1080201c 	xori	r2,r2,128
  8024a4:	10bfe004 	addi	r2,r2,-128
  8024a8:	10001226 	beq	r2,zero,8024f4 <logic+0x1324>
    d->LRI_Clock += d->deltaT;
  8024ac:	e13ffc17 	ldw	r4,-16(fp)
  8024b0:	20800a17 	ldw	r2,40(r4)
  8024b4:	20c00b17 	ldw	r3,44(r4)
  8024b8:	e1bffc17 	ldw	r6,-16(fp)
  8024bc:	31001917 	ldw	r4,100(r6)
  8024c0:	31401a17 	ldw	r5,104(r6)
  8024c4:	200d883a 	mov	r6,r4
  8024c8:	280f883a 	mov	r7,r5
  8024cc:	1009883a 	mov	r4,r2
  8024d0:	180b883a 	mov	r5,r3
  8024d4:	08055640 	call	805564 <__adddf3>
  8024d8:	1009883a 	mov	r4,r2
  8024dc:	180b883a 	mov	r5,r3
  8024e0:	2005883a 	mov	r2,r4
  8024e4:	2807883a 	mov	r3,r5
  8024e8:	e13ffc17 	ldw	r4,-16(fp)
  8024ec:	20800a15 	stw	r2,40(r4)
  8024f0:	20c00b15 	stw	r3,44(r4)
  }
  d->_g53 = d->_g53 && !d->_cg53;
  8024f4:	e0bffc17 	ldw	r2,-16(fp)
  8024f8:	10802883 	ldbu	r2,162(r2)
  8024fc:	10803fcc 	andi	r2,r2,255
  802500:	1080201c 	xori	r2,r2,128
  802504:	10bfe004 	addi	r2,r2,-128
  802508:	10000826 	beq	r2,zero,80252c <logic+0x135c>
  80250c:	e0bffc17 	ldw	r2,-16(fp)
  802510:	10803843 	ldbu	r2,225(r2)
  802514:	10803fcc 	andi	r2,r2,255
  802518:	1080201c 	xori	r2,r2,128
  80251c:	10bfe004 	addi	r2,r2,-128
  802520:	1000021e 	bne	r2,zero,80252c <logic+0x135c>
  802524:	00800044 	movi	r2,1
  802528:	00000106 	br	802530 <logic+0x1360>
  80252c:	0005883a 	mov	r2,zero
  802530:	1007883a 	mov	r3,r2
  802534:	e0bffc17 	ldw	r2,-16(fp)
  802538:	10c02885 	stb	r3,162(r2)
  d->_cg55 = d->VS == 0 && d->LRI_Clock >= d->LRI;
  80253c:	e0bffc17 	ldw	r2,-16(fp)
  802540:	10801d43 	ldbu	r2,117(r2)
  802544:	10803fcc 	andi	r2,r2,255
  802548:	1080201c 	xori	r2,r2,128
  80254c:	10bfe004 	addi	r2,r2,-128
  802550:	1000111e 	bne	r2,zero,802598 <logic+0x13c8>
  802554:	e0bffc17 	ldw	r2,-16(fp)
  802558:	14000a17 	ldw	r16,40(r2)
  80255c:	14400b17 	ldw	r17,44(r2)
  802560:	e0bffc17 	ldw	r2,-16(fp)
  802564:	10800417 	ldw	r2,16(r2)
  802568:	1009883a 	mov	r4,r2
  80256c:	08068dc0 	call	8068dc <__floatsidf>
  802570:	1009883a 	mov	r4,r2
  802574:	180b883a 	mov	r5,r3
  802578:	200d883a 	mov	r6,r4
  80257c:	280f883a 	mov	r7,r5
  802580:	8009883a 	mov	r4,r16
  802584:	880b883a 	mov	r5,r17
  802588:	0805e100 	call	805e10 <__gedf2>
  80258c:	10000216 	blt	r2,zero,802598 <logic+0x13c8>
  802590:	00800044 	movi	r2,1
  802594:	00000106 	br	80259c <logic+0x13cc>
  802598:	0005883a 	mov	r2,zero
  80259c:	1007883a 	mov	r3,r2
  8025a0:	e0bffc17 	ldw	r2,-16(fp)
  8025a4:	10c037c5 	stb	r3,223(r2)
  d->_g56 = d->_g53 && d->_cg55;
  8025a8:	e0bffc17 	ldw	r2,-16(fp)
  8025ac:	10802883 	ldbu	r2,162(r2)
  8025b0:	10803fcc 	andi	r2,r2,255
  8025b4:	1080201c 	xori	r2,r2,128
  8025b8:	10bfe004 	addi	r2,r2,-128
  8025bc:	10000826 	beq	r2,zero,8025e0 <logic+0x1410>
  8025c0:	e0bffc17 	ldw	r2,-16(fp)
  8025c4:	108037c3 	ldbu	r2,223(r2)
  8025c8:	10803fcc 	andi	r2,r2,255
  8025cc:	1080201c 	xori	r2,r2,128
  8025d0:	10bfe004 	addi	r2,r2,-128
  8025d4:	10000226 	beq	r2,zero,8025e0 <logic+0x1410>
  8025d8:	00800044 	movi	r2,1
  8025dc:	00000106 	br	8025e4 <logic+0x1414>
  8025e0:	0005883a 	mov	r2,zero
  8025e4:	1007883a 	mov	r3,r2
  8025e8:	e0bffc17 	ldw	r2,-16(fp)
  8025ec:	10c02945 	stb	r3,165(r2)
  if (d->_g56) {
  8025f0:	e0bffc17 	ldw	r2,-16(fp)
  8025f4:	10802943 	ldbu	r2,165(r2)
  8025f8:	10803fcc 	andi	r2,r2,255
  8025fc:	1080201c 	xori	r2,r2,128
  802600:	10bfe004 	addi	r2,r2,-128
  802604:	10000326 	beq	r2,zero,802614 <logic+0x1444>
    d->_Pacemaker_local__Atrig5 = 1;
  802608:	e0bffc17 	ldw	r2,-16(fp)
  80260c:	00c00044 	movi	r3,1
  802610:	10c01f45 	stb	r3,125(r2)
  }
  d->_g13 = d->_g78_e2 || d->_g78;
  802614:	e0bffc17 	ldw	r2,-16(fp)
  802618:	10803ec3 	ldbu	r2,251(r2)
  80261c:	10803fcc 	andi	r2,r2,255
  802620:	1080201c 	xori	r2,r2,128
  802624:	10bfe004 	addi	r2,r2,-128
  802628:	1000061e 	bne	r2,zero,802644 <logic+0x1474>
  80262c:	e0bffc17 	ldw	r2,-16(fp)
  802630:	10802c03 	ldbu	r2,176(r2)
  802634:	10803fcc 	andi	r2,r2,255
  802638:	1080201c 	xori	r2,r2,128
  80263c:	10bfe004 	addi	r2,r2,-128
  802640:	10000226 	beq	r2,zero,80264c <logic+0x147c>
  802644:	00800044 	movi	r2,1
  802648:	00000106 	br	802650 <logic+0x1480>
  80264c:	0005883a 	mov	r2,zero
  802650:	1007883a 	mov	r3,r2
  802654:	e0bffc17 	ldw	r2,-16(fp)
  802658:	10c02145 	stb	r3,133(r2)
  d->_cg8 = d->VRP_Clock < d->VRP;
  80265c:	e0bffc17 	ldw	r2,-16(fp)
  802660:	14000617 	ldw	r16,24(r2)
  802664:	14400717 	ldw	r17,28(r2)
  802668:	e0bffc17 	ldw	r2,-16(fp)
  80266c:	10800317 	ldw	r2,12(r2)
  802670:	1009883a 	mov	r4,r2
  802674:	08068dc0 	call	8068dc <__floatsidf>
  802678:	1009883a 	mov	r4,r2
  80267c:	180b883a 	mov	r5,r3
  802680:	04800044 	movi	r18,1
  802684:	200d883a 	mov	r6,r4
  802688:	280f883a 	mov	r7,r5
  80268c:	8009883a 	mov	r4,r16
  802690:	880b883a 	mov	r5,r17
  802694:	0805eec0 	call	805eec <__ledf2>
  802698:	10000116 	blt	r2,zero,8026a0 <logic+0x14d0>
  80269c:	0025883a 	mov	r18,zero
  8026a0:	9007883a 	mov	r3,r18
  8026a4:	e0bffc17 	ldw	r2,-16(fp)
  8026a8:	10c03285 	stb	r3,202(r2)
  d->_g7 = d->_g13 && d->_cg8;
  8026ac:	e0bffc17 	ldw	r2,-16(fp)
  8026b0:	10802143 	ldbu	r2,133(r2)
  8026b4:	10803fcc 	andi	r2,r2,255
  8026b8:	1080201c 	xori	r2,r2,128
  8026bc:	10bfe004 	addi	r2,r2,-128
  8026c0:	10000826 	beq	r2,zero,8026e4 <logic+0x1514>
  8026c4:	e0bffc17 	ldw	r2,-16(fp)
  8026c8:	10803283 	ldbu	r2,202(r2)
  8026cc:	10803fcc 	andi	r2,r2,255
  8026d0:	1080201c 	xori	r2,r2,128
  8026d4:	10bfe004 	addi	r2,r2,-128
  8026d8:	10000226 	beq	r2,zero,8026e4 <logic+0x1514>
  8026dc:	00800044 	movi	r2,1
  8026e0:	00000106 	br	8026e8 <logic+0x1518>
  8026e4:	0005883a 	mov	r2,zero
  8026e8:	1007883a 	mov	r3,r2
  8026ec:	e0bffc17 	ldw	r2,-16(fp)
  8026f0:	10c02005 	stb	r3,128(r2)
  if (d->_g7) {
  8026f4:	e0bffc17 	ldw	r2,-16(fp)
  8026f8:	10802003 	ldbu	r2,128(r2)
  8026fc:	10803fcc 	andi	r2,r2,255
  802700:	1080201c 	xori	r2,r2,128
  802704:	10bfe004 	addi	r2,r2,-128
  802708:	10003426 	beq	r2,zero,8027dc <logic+0x160c>
    d->sleepT = (d->sleepT < (d->VRP - d->VRP_Clock)) ? d->sleepT : (d->VRP - d->VRP_Clock);
  80270c:	e0bffc17 	ldw	r2,-16(fp)
  802710:	14001b17 	ldw	r16,108(r2)
  802714:	14401c17 	ldw	r17,112(r2)
  802718:	e0bffc17 	ldw	r2,-16(fp)
  80271c:	10800317 	ldw	r2,12(r2)
  802720:	1009883a 	mov	r4,r2
  802724:	08068dc0 	call	8068dc <__floatsidf>
  802728:	1011883a 	mov	r8,r2
  80272c:	1813883a 	mov	r9,r3
  802730:	e13ffc17 	ldw	r4,-16(fp)
  802734:	20800617 	ldw	r2,24(r4)
  802738:	20c00717 	ldw	r3,28(r4)
  80273c:	100d883a 	mov	r6,r2
  802740:	180f883a 	mov	r7,r3
  802744:	4009883a 	mov	r4,r8
  802748:	480b883a 	mov	r5,r9
  80274c:	0805fe00 	call	805fe0 <__subdf3>
  802750:	1009883a 	mov	r4,r2
  802754:	180b883a 	mov	r5,r3
  802758:	2005883a 	mov	r2,r4
  80275c:	2807883a 	mov	r3,r5
  802760:	100d883a 	mov	r6,r2
  802764:	180f883a 	mov	r7,r3
  802768:	8009883a 	mov	r4,r16
  80276c:	880b883a 	mov	r5,r17
  802770:	0805eec0 	call	805eec <__ledf2>
  802774:	1000040e 	bge	r2,zero,802788 <logic+0x15b8>
  802778:	e13ffc17 	ldw	r4,-16(fp)
  80277c:	20801b17 	ldw	r2,108(r4)
  802780:	20c01c17 	ldw	r3,112(r4)
  802784:	00001206 	br	8027d0 <logic+0x1600>
  802788:	e0bffc17 	ldw	r2,-16(fp)
  80278c:	10800317 	ldw	r2,12(r2)
  802790:	1009883a 	mov	r4,r2
  802794:	08068dc0 	call	8068dc <__floatsidf>
  802798:	1011883a 	mov	r8,r2
  80279c:	1813883a 	mov	r9,r3
  8027a0:	e13ffc17 	ldw	r4,-16(fp)
  8027a4:	20800617 	ldw	r2,24(r4)
  8027a8:	20c00717 	ldw	r3,28(r4)
  8027ac:	100d883a 	mov	r6,r2
  8027b0:	180f883a 	mov	r7,r3
  8027b4:	4009883a 	mov	r4,r8
  8027b8:	480b883a 	mov	r5,r9
  8027bc:	0805fe00 	call	805fe0 <__subdf3>
  8027c0:	1009883a 	mov	r4,r2
  8027c4:	180b883a 	mov	r5,r3
  8027c8:	2005883a 	mov	r2,r4
  8027cc:	2807883a 	mov	r3,r5
  8027d0:	e13ffc17 	ldw	r4,-16(fp)
  8027d4:	20801b15 	stw	r2,108(r4)
  8027d8:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg9 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8027dc:	e0bffc17 	ldw	r2,-16(fp)
  8027e0:	10801ec3 	ldbu	r2,123(r2)
  8027e4:	10803fcc 	andi	r2,r2,255
  8027e8:	1080201c 	xori	r2,r2,128
  8027ec:	10bfe004 	addi	r2,r2,-128
  8027f0:	10000c1e 	bne	r2,zero,802824 <logic+0x1654>
  8027f4:	e0bffc17 	ldw	r2,-16(fp)
  8027f8:	10801f03 	ldbu	r2,124(r2)
  8027fc:	10803fcc 	andi	r2,r2,255
  802800:	1080201c 	xori	r2,r2,128
  802804:	10bfe004 	addi	r2,r2,-128
  802808:	1000061e 	bne	r2,zero,802824 <logic+0x1654>
  80280c:	e0bffc17 	ldw	r2,-16(fp)
  802810:	10801f43 	ldbu	r2,125(r2)
  802814:	10803fcc 	andi	r2,r2,255
  802818:	1080201c 	xori	r2,r2,128
  80281c:	10bfe004 	addi	r2,r2,-128
  802820:	10000226 	beq	r2,zero,80282c <logic+0x165c>
  802824:	00800044 	movi	r2,1
  802828:	00000106 	br	802830 <logic+0x1660>
  80282c:	0005883a 	mov	r2,zero
  802830:	1007883a 	mov	r3,r2
  802834:	e0bffc17 	ldw	r2,-16(fp)
  802838:	10c03245 	stb	r3,201(r2)
  d->_g8 = d->_g13 && !d->_cg8;
  80283c:	e0bffc17 	ldw	r2,-16(fp)
  802840:	10802143 	ldbu	r2,133(r2)
  802844:	10803fcc 	andi	r2,r2,255
  802848:	1080201c 	xori	r2,r2,128
  80284c:	10bfe004 	addi	r2,r2,-128
  802850:	10000826 	beq	r2,zero,802874 <logic+0x16a4>
  802854:	e0bffc17 	ldw	r2,-16(fp)
  802858:	10803283 	ldbu	r2,202(r2)
  80285c:	10803fcc 	andi	r2,r2,255
  802860:	1080201c 	xori	r2,r2,128
  802864:	10bfe004 	addi	r2,r2,-128
  802868:	1000021e 	bne	r2,zero,802874 <logic+0x16a4>
  80286c:	00800044 	movi	r2,1
  802870:	00000106 	br	802878 <logic+0x16a8>
  802874:	0005883a 	mov	r2,zero
  802878:	1007883a 	mov	r3,r2
  80287c:	e0bffc17 	ldw	r2,-16(fp)
  802880:	10c02045 	stb	r3,129(r2)
  d->_cg11 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802884:	e0bffc17 	ldw	r2,-16(fp)
  802888:	10801ec3 	ldbu	r2,123(r2)
  80288c:	10803fcc 	andi	r2,r2,255
  802890:	1080201c 	xori	r2,r2,128
  802894:	10bfe004 	addi	r2,r2,-128
  802898:	10000c1e 	bne	r2,zero,8028cc <logic+0x16fc>
  80289c:	e0bffc17 	ldw	r2,-16(fp)
  8028a0:	10801f03 	ldbu	r2,124(r2)
  8028a4:	10803fcc 	andi	r2,r2,255
  8028a8:	1080201c 	xori	r2,r2,128
  8028ac:	10bfe004 	addi	r2,r2,-128
  8028b0:	1000061e 	bne	r2,zero,8028cc <logic+0x16fc>
  8028b4:	e0bffc17 	ldw	r2,-16(fp)
  8028b8:	10801f43 	ldbu	r2,125(r2)
  8028bc:	10803fcc 	andi	r2,r2,255
  8028c0:	1080201c 	xori	r2,r2,128
  8028c4:	10bfe004 	addi	r2,r2,-128
  8028c8:	10000226 	beq	r2,zero,8028d4 <logic+0x1704>
  8028cc:	00800044 	movi	r2,1
  8028d0:	00000106 	br	8028d8 <logic+0x1708>
  8028d4:	0005883a 	mov	r2,zero
  8028d8:	1007883a 	mov	r3,r2
  8028dc:	e0bffc17 	ldw	r2,-16(fp)
  8028e0:	10c032c5 	stb	r3,203(r2)
  d->_g10 = d->_g7 && d->_cg9 || d->_g8 && d->_cg11;
  8028e4:	e0bffc17 	ldw	r2,-16(fp)
  8028e8:	10802003 	ldbu	r2,128(r2)
  8028ec:	10803fcc 	andi	r2,r2,255
  8028f0:	1080201c 	xori	r2,r2,128
  8028f4:	10bfe004 	addi	r2,r2,-128
  8028f8:	10000626 	beq	r2,zero,802914 <logic+0x1744>
  8028fc:	e0bffc17 	ldw	r2,-16(fp)
  802900:	10803243 	ldbu	r2,201(r2)
  802904:	10803fcc 	andi	r2,r2,255
  802908:	1080201c 	xori	r2,r2,128
  80290c:	10bfe004 	addi	r2,r2,-128
  802910:	10000c1e 	bne	r2,zero,802944 <logic+0x1774>
  802914:	e0bffc17 	ldw	r2,-16(fp)
  802918:	10802043 	ldbu	r2,129(r2)
  80291c:	10803fcc 	andi	r2,r2,255
  802920:	1080201c 	xori	r2,r2,128
  802924:	10bfe004 	addi	r2,r2,-128
  802928:	10000826 	beq	r2,zero,80294c <logic+0x177c>
  80292c:	e0bffc17 	ldw	r2,-16(fp)
  802930:	108032c3 	ldbu	r2,203(r2)
  802934:	10803fcc 	andi	r2,r2,255
  802938:	1080201c 	xori	r2,r2,128
  80293c:	10bfe004 	addi	r2,r2,-128
  802940:	10000226 	beq	r2,zero,80294c <logic+0x177c>
  802944:	00800044 	movi	r2,1
  802948:	00000106 	br	802950 <logic+0x1780>
  80294c:	0005883a 	mov	r2,zero
  802950:	1007883a 	mov	r3,r2
  802954:	e0bffc17 	ldw	r2,-16(fp)
  802958:	10c020c5 	stb	r3,131(r2)
  d->_g24 = d->_pg32_e3;
  80295c:	e0bffc17 	ldw	r2,-16(fp)
  802960:	10c04343 	ldbu	r3,269(r2)
  802964:	e0bffc17 	ldw	r2,-16(fp)
  802968:	10c02345 	stb	r3,141(r2)
  d->_g18 = d->_pg21_e2;
  80296c:	e0bffc17 	ldw	r2,-16(fp)
  802970:	10c04383 	ldbu	r3,270(r2)
  802974:	e0bffc17 	ldw	r2,-16(fp)
  802978:	10c02205 	stb	r3,136(r2)
  d->_g21_e2 = !(d->_g24 || d->_g18);
  80297c:	e0bffc17 	ldw	r2,-16(fp)
  802980:	10802343 	ldbu	r2,141(r2)
  802984:	10803fcc 	andi	r2,r2,255
  802988:	1080201c 	xori	r2,r2,128
  80298c:	10bfe004 	addi	r2,r2,-128
  802990:	1000081e 	bne	r2,zero,8029b4 <logic+0x17e4>
  802994:	e0bffc17 	ldw	r2,-16(fp)
  802998:	10802203 	ldbu	r2,136(r2)
  80299c:	10803fcc 	andi	r2,r2,255
  8029a0:	1080201c 	xori	r2,r2,128
  8029a4:	10bfe004 	addi	r2,r2,-128
  8029a8:	1000021e 	bne	r2,zero,8029b4 <logic+0x17e4>
  8029ac:	00800044 	movi	r2,1
  8029b0:	00000106 	br	8029b8 <logic+0x17e8>
  8029b4:	0005883a 	mov	r2,zero
  8029b8:	1007883a 	mov	r3,r2
  8029bc:	e0bffc17 	ldw	r2,-16(fp)
  8029c0:	10c03d85 	stb	r3,246(r2)
  d->_g24 = d->_g18 || d->_g24;
  8029c4:	e0bffc17 	ldw	r2,-16(fp)
  8029c8:	10802203 	ldbu	r2,136(r2)
  8029cc:	10803fcc 	andi	r2,r2,255
  8029d0:	1080201c 	xori	r2,r2,128
  8029d4:	10bfe004 	addi	r2,r2,-128
  8029d8:	1000061e 	bne	r2,zero,8029f4 <logic+0x1824>
  8029dc:	e0bffc17 	ldw	r2,-16(fp)
  8029e0:	10802343 	ldbu	r2,141(r2)
  8029e4:	10803fcc 	andi	r2,r2,255
  8029e8:	1080201c 	xori	r2,r2,128
  8029ec:	10bfe004 	addi	r2,r2,-128
  8029f0:	10000226 	beq	r2,zero,8029fc <logic+0x182c>
  8029f4:	00800044 	movi	r2,1
  8029f8:	00000106 	br	802a00 <logic+0x1830>
  8029fc:	0005883a 	mov	r2,zero
  802a00:	1007883a 	mov	r3,r2
  802a04:	e0bffc17 	ldw	r2,-16(fp)
  802a08:	10c02345 	stb	r3,141(r2)
  d->_cg19 = d->LRI_Clock < d->LRI;
  802a0c:	e0bffc17 	ldw	r2,-16(fp)
  802a10:	14000a17 	ldw	r16,40(r2)
  802a14:	14400b17 	ldw	r17,44(r2)
  802a18:	e0bffc17 	ldw	r2,-16(fp)
  802a1c:	10800417 	ldw	r2,16(r2)
  802a20:	1009883a 	mov	r4,r2
  802a24:	08068dc0 	call	8068dc <__floatsidf>
  802a28:	1009883a 	mov	r4,r2
  802a2c:	180b883a 	mov	r5,r3
  802a30:	04800044 	movi	r18,1
  802a34:	200d883a 	mov	r6,r4
  802a38:	280f883a 	mov	r7,r5
  802a3c:	8009883a 	mov	r4,r16
  802a40:	880b883a 	mov	r5,r17
  802a44:	0805eec0 	call	805eec <__ledf2>
  802a48:	10000116 	blt	r2,zero,802a50 <logic+0x1880>
  802a4c:	0025883a 	mov	r18,zero
  802a50:	9007883a 	mov	r3,r18
  802a54:	e0bffc17 	ldw	r2,-16(fp)
  802a58:	10c03405 	stb	r3,208(r2)
  d->_g18 = d->_g24 && d->_cg19;
  802a5c:	e0bffc17 	ldw	r2,-16(fp)
  802a60:	10802343 	ldbu	r2,141(r2)
  802a64:	10803fcc 	andi	r2,r2,255
  802a68:	1080201c 	xori	r2,r2,128
  802a6c:	10bfe004 	addi	r2,r2,-128
  802a70:	10000826 	beq	r2,zero,802a94 <logic+0x18c4>
  802a74:	e0bffc17 	ldw	r2,-16(fp)
  802a78:	10803403 	ldbu	r2,208(r2)
  802a7c:	10803fcc 	andi	r2,r2,255
  802a80:	1080201c 	xori	r2,r2,128
  802a84:	10bfe004 	addi	r2,r2,-128
  802a88:	10000226 	beq	r2,zero,802a94 <logic+0x18c4>
  802a8c:	00800044 	movi	r2,1
  802a90:	00000106 	br	802a98 <logic+0x18c8>
  802a94:	0005883a 	mov	r2,zero
  802a98:	1007883a 	mov	r3,r2
  802a9c:	e0bffc17 	ldw	r2,-16(fp)
  802aa0:	10c02205 	stb	r3,136(r2)
  if (d->_g18) {
  802aa4:	e0bffc17 	ldw	r2,-16(fp)
  802aa8:	10802203 	ldbu	r2,136(r2)
  802aac:	10803fcc 	andi	r2,r2,255
  802ab0:	1080201c 	xori	r2,r2,128
  802ab4:	10bfe004 	addi	r2,r2,-128
  802ab8:	10003426 	beq	r2,zero,802b8c <logic+0x19bc>
    d->sleepT = (d->sleepT < (d->LRI - d->LRI_Clock)) ? d->sleepT : (d->LRI - d->LRI_Clock);
  802abc:	e0bffc17 	ldw	r2,-16(fp)
  802ac0:	14001b17 	ldw	r16,108(r2)
  802ac4:	14401c17 	ldw	r17,112(r2)
  802ac8:	e0bffc17 	ldw	r2,-16(fp)
  802acc:	10800417 	ldw	r2,16(r2)
  802ad0:	1009883a 	mov	r4,r2
  802ad4:	08068dc0 	call	8068dc <__floatsidf>
  802ad8:	1011883a 	mov	r8,r2
  802adc:	1813883a 	mov	r9,r3
  802ae0:	e13ffc17 	ldw	r4,-16(fp)
  802ae4:	20800a17 	ldw	r2,40(r4)
  802ae8:	20c00b17 	ldw	r3,44(r4)
  802aec:	100d883a 	mov	r6,r2
  802af0:	180f883a 	mov	r7,r3
  802af4:	4009883a 	mov	r4,r8
  802af8:	480b883a 	mov	r5,r9
  802afc:	0805fe00 	call	805fe0 <__subdf3>
  802b00:	1009883a 	mov	r4,r2
  802b04:	180b883a 	mov	r5,r3
  802b08:	2005883a 	mov	r2,r4
  802b0c:	2807883a 	mov	r3,r5
  802b10:	100d883a 	mov	r6,r2
  802b14:	180f883a 	mov	r7,r3
  802b18:	8009883a 	mov	r4,r16
  802b1c:	880b883a 	mov	r5,r17
  802b20:	0805eec0 	call	805eec <__ledf2>
  802b24:	1000040e 	bge	r2,zero,802b38 <logic+0x1968>
  802b28:	e13ffc17 	ldw	r4,-16(fp)
  802b2c:	20801b17 	ldw	r2,108(r4)
  802b30:	20c01c17 	ldw	r3,112(r4)
  802b34:	00001206 	br	802b80 <logic+0x19b0>
  802b38:	e0bffc17 	ldw	r2,-16(fp)
  802b3c:	10800417 	ldw	r2,16(r2)
  802b40:	1009883a 	mov	r4,r2
  802b44:	08068dc0 	call	8068dc <__floatsidf>
  802b48:	1011883a 	mov	r8,r2
  802b4c:	1813883a 	mov	r9,r3
  802b50:	e13ffc17 	ldw	r4,-16(fp)
  802b54:	20800a17 	ldw	r2,40(r4)
  802b58:	20c00b17 	ldw	r3,44(r4)
  802b5c:	100d883a 	mov	r6,r2
  802b60:	180f883a 	mov	r7,r3
  802b64:	4009883a 	mov	r4,r8
  802b68:	480b883a 	mov	r5,r9
  802b6c:	0805fe00 	call	805fe0 <__subdf3>
  802b70:	1009883a 	mov	r4,r2
  802b74:	180b883a 	mov	r5,r3
  802b78:	2005883a 	mov	r2,r4
  802b7c:	2807883a 	mov	r3,r5
  802b80:	e13ffc17 	ldw	r4,-16(fp)
  802b84:	20801b15 	stw	r2,108(r4)
  802b88:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg20 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802b8c:	e0bffc17 	ldw	r2,-16(fp)
  802b90:	10801ec3 	ldbu	r2,123(r2)
  802b94:	10803fcc 	andi	r2,r2,255
  802b98:	1080201c 	xori	r2,r2,128
  802b9c:	10bfe004 	addi	r2,r2,-128
  802ba0:	10000c1e 	bne	r2,zero,802bd4 <logic+0x1a04>
  802ba4:	e0bffc17 	ldw	r2,-16(fp)
  802ba8:	10801f03 	ldbu	r2,124(r2)
  802bac:	10803fcc 	andi	r2,r2,255
  802bb0:	1080201c 	xori	r2,r2,128
  802bb4:	10bfe004 	addi	r2,r2,-128
  802bb8:	1000061e 	bne	r2,zero,802bd4 <logic+0x1a04>
  802bbc:	e0bffc17 	ldw	r2,-16(fp)
  802bc0:	10801f43 	ldbu	r2,125(r2)
  802bc4:	10803fcc 	andi	r2,r2,255
  802bc8:	1080201c 	xori	r2,r2,128
  802bcc:	10bfe004 	addi	r2,r2,-128
  802bd0:	10000226 	beq	r2,zero,802bdc <logic+0x1a0c>
  802bd4:	00800044 	movi	r2,1
  802bd8:	00000106 	br	802be0 <logic+0x1a10>
  802bdc:	0005883a 	mov	r2,zero
  802be0:	1007883a 	mov	r3,r2
  802be4:	e0bffc17 	ldw	r2,-16(fp)
  802be8:	10c033c5 	stb	r3,207(r2)
  d->_g19 = d->_g24 && !d->_cg19;
  802bec:	e0bffc17 	ldw	r2,-16(fp)
  802bf0:	10802343 	ldbu	r2,141(r2)
  802bf4:	10803fcc 	andi	r2,r2,255
  802bf8:	1080201c 	xori	r2,r2,128
  802bfc:	10bfe004 	addi	r2,r2,-128
  802c00:	10000826 	beq	r2,zero,802c24 <logic+0x1a54>
  802c04:	e0bffc17 	ldw	r2,-16(fp)
  802c08:	10803403 	ldbu	r2,208(r2)
  802c0c:	10803fcc 	andi	r2,r2,255
  802c10:	1080201c 	xori	r2,r2,128
  802c14:	10bfe004 	addi	r2,r2,-128
  802c18:	1000021e 	bne	r2,zero,802c24 <logic+0x1a54>
  802c1c:	00800044 	movi	r2,1
  802c20:	00000106 	br	802c28 <logic+0x1a58>
  802c24:	0005883a 	mov	r2,zero
  802c28:	1007883a 	mov	r3,r2
  802c2c:	e0bffc17 	ldw	r2,-16(fp)
  802c30:	10c02245 	stb	r3,137(r2)
  d->_cg22 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802c34:	e0bffc17 	ldw	r2,-16(fp)
  802c38:	10801ec3 	ldbu	r2,123(r2)
  802c3c:	10803fcc 	andi	r2,r2,255
  802c40:	1080201c 	xori	r2,r2,128
  802c44:	10bfe004 	addi	r2,r2,-128
  802c48:	10000c1e 	bne	r2,zero,802c7c <logic+0x1aac>
  802c4c:	e0bffc17 	ldw	r2,-16(fp)
  802c50:	10801f03 	ldbu	r2,124(r2)
  802c54:	10803fcc 	andi	r2,r2,255
  802c58:	1080201c 	xori	r2,r2,128
  802c5c:	10bfe004 	addi	r2,r2,-128
  802c60:	1000061e 	bne	r2,zero,802c7c <logic+0x1aac>
  802c64:	e0bffc17 	ldw	r2,-16(fp)
  802c68:	10801f43 	ldbu	r2,125(r2)
  802c6c:	10803fcc 	andi	r2,r2,255
  802c70:	1080201c 	xori	r2,r2,128
  802c74:	10bfe004 	addi	r2,r2,-128
  802c78:	10000226 	beq	r2,zero,802c84 <logic+0x1ab4>
  802c7c:	00800044 	movi	r2,1
  802c80:	00000106 	br	802c88 <logic+0x1ab8>
  802c84:	0005883a 	mov	r2,zero
  802c88:	1007883a 	mov	r3,r2
  802c8c:	e0bffc17 	ldw	r2,-16(fp)
  802c90:	10c03445 	stb	r3,209(r2)
  d->_g21 = d->_g18 && d->_cg20 || d->_g19 && d->_cg22;
  802c94:	e0bffc17 	ldw	r2,-16(fp)
  802c98:	10802203 	ldbu	r2,136(r2)
  802c9c:	10803fcc 	andi	r2,r2,255
  802ca0:	1080201c 	xori	r2,r2,128
  802ca4:	10bfe004 	addi	r2,r2,-128
  802ca8:	10000626 	beq	r2,zero,802cc4 <logic+0x1af4>
  802cac:	e0bffc17 	ldw	r2,-16(fp)
  802cb0:	108033c3 	ldbu	r2,207(r2)
  802cb4:	10803fcc 	andi	r2,r2,255
  802cb8:	1080201c 	xori	r2,r2,128
  802cbc:	10bfe004 	addi	r2,r2,-128
  802cc0:	10000c1e 	bne	r2,zero,802cf4 <logic+0x1b24>
  802cc4:	e0bffc17 	ldw	r2,-16(fp)
  802cc8:	10802243 	ldbu	r2,137(r2)
  802ccc:	10803fcc 	andi	r2,r2,255
  802cd0:	1080201c 	xori	r2,r2,128
  802cd4:	10bfe004 	addi	r2,r2,-128
  802cd8:	10000826 	beq	r2,zero,802cfc <logic+0x1b2c>
  802cdc:	e0bffc17 	ldw	r2,-16(fp)
  802ce0:	10803443 	ldbu	r2,209(r2)
  802ce4:	10803fcc 	andi	r2,r2,255
  802ce8:	1080201c 	xori	r2,r2,128
  802cec:	10bfe004 	addi	r2,r2,-128
  802cf0:	10000226 	beq	r2,zero,802cfc <logic+0x1b2c>
  802cf4:	00800044 	movi	r2,1
  802cf8:	00000106 	br	802d00 <logic+0x1b30>
  802cfc:	0005883a 	mov	r2,zero
  802d00:	1007883a 	mov	r3,r2
  802d04:	e0bffc17 	ldw	r2,-16(fp)
  802d08:	10c022c5 	stb	r3,139(r2)
  d->_g35 = d->_pg5;
  802d0c:	e0bffc17 	ldw	r2,-16(fp)
  802d10:	10c043c3 	ldbu	r3,271(r2)
  802d14:	e0bffc17 	ldw	r2,-16(fp)
  802d18:	10c02545 	stb	r3,149(r2)
  d->_g29 = d->_pg93;
  802d1c:	e0bffc17 	ldw	r2,-16(fp)
  802d20:	10c04403 	ldbu	r3,272(r2)
  802d24:	e0bffc17 	ldw	r2,-16(fp)
  802d28:	10c02405 	stb	r3,144(r2)
  d->_g32_e3 = !(d->_g35 || d->_g29);
  802d2c:	e0bffc17 	ldw	r2,-16(fp)
  802d30:	10802543 	ldbu	r2,149(r2)
  802d34:	10803fcc 	andi	r2,r2,255
  802d38:	1080201c 	xori	r2,r2,128
  802d3c:	10bfe004 	addi	r2,r2,-128
  802d40:	1000081e 	bne	r2,zero,802d64 <logic+0x1b94>
  802d44:	e0bffc17 	ldw	r2,-16(fp)
  802d48:	10802403 	ldbu	r2,144(r2)
  802d4c:	10803fcc 	andi	r2,r2,255
  802d50:	1080201c 	xori	r2,r2,128
  802d54:	10bfe004 	addi	r2,r2,-128
  802d58:	1000021e 	bne	r2,zero,802d64 <logic+0x1b94>
  802d5c:	00800044 	movi	r2,1
  802d60:	00000106 	br	802d68 <logic+0x1b98>
  802d64:	0005883a 	mov	r2,zero
  802d68:	1007883a 	mov	r3,r2
  802d6c:	e0bffc17 	ldw	r2,-16(fp)
  802d70:	10c03dc5 	stb	r3,247(r2)
  d->_g35 = d->_g29 || d->_g35;
  802d74:	e0bffc17 	ldw	r2,-16(fp)
  802d78:	10802403 	ldbu	r2,144(r2)
  802d7c:	10803fcc 	andi	r2,r2,255
  802d80:	1080201c 	xori	r2,r2,128
  802d84:	10bfe004 	addi	r2,r2,-128
  802d88:	1000061e 	bne	r2,zero,802da4 <logic+0x1bd4>
  802d8c:	e0bffc17 	ldw	r2,-16(fp)
  802d90:	10802543 	ldbu	r2,149(r2)
  802d94:	10803fcc 	andi	r2,r2,255
  802d98:	1080201c 	xori	r2,r2,128
  802d9c:	10bfe004 	addi	r2,r2,-128
  802da0:	10000226 	beq	r2,zero,802dac <logic+0x1bdc>
  802da4:	00800044 	movi	r2,1
  802da8:	00000106 	br	802db0 <logic+0x1be0>
  802dac:	0005883a 	mov	r2,zero
  802db0:	1007883a 	mov	r3,r2
  802db4:	e0bffc17 	ldw	r2,-16(fp)
  802db8:	10c02545 	stb	r3,149(r2)
  d->_cg30 = d->URI_Clock < d->URI;
  802dbc:	e0bffc17 	ldw	r2,-16(fp)
  802dc0:	14000c17 	ldw	r16,48(r2)
  802dc4:	14400d17 	ldw	r17,52(r2)
  802dc8:	e0bffc17 	ldw	r2,-16(fp)
  802dcc:	10800517 	ldw	r2,20(r2)
  802dd0:	1009883a 	mov	r4,r2
  802dd4:	08068dc0 	call	8068dc <__floatsidf>
  802dd8:	1009883a 	mov	r4,r2
  802ddc:	180b883a 	mov	r5,r3
  802de0:	04800044 	movi	r18,1
  802de4:	200d883a 	mov	r6,r4
  802de8:	280f883a 	mov	r7,r5
  802dec:	8009883a 	mov	r4,r16
  802df0:	880b883a 	mov	r5,r17
  802df4:	0805eec0 	call	805eec <__ledf2>
  802df8:	10000116 	blt	r2,zero,802e00 <logic+0x1c30>
  802dfc:	0025883a 	mov	r18,zero
  802e00:	9007883a 	mov	r3,r18
  802e04:	e0bffc17 	ldw	r2,-16(fp)
  802e08:	10c03585 	stb	r3,214(r2)
  d->_g29 = d->_g35 && d->_cg30;
  802e0c:	e0bffc17 	ldw	r2,-16(fp)
  802e10:	10802543 	ldbu	r2,149(r2)
  802e14:	10803fcc 	andi	r2,r2,255
  802e18:	1080201c 	xori	r2,r2,128
  802e1c:	10bfe004 	addi	r2,r2,-128
  802e20:	10000826 	beq	r2,zero,802e44 <logic+0x1c74>
  802e24:	e0bffc17 	ldw	r2,-16(fp)
  802e28:	10803583 	ldbu	r2,214(r2)
  802e2c:	10803fcc 	andi	r2,r2,255
  802e30:	1080201c 	xori	r2,r2,128
  802e34:	10bfe004 	addi	r2,r2,-128
  802e38:	10000226 	beq	r2,zero,802e44 <logic+0x1c74>
  802e3c:	00800044 	movi	r2,1
  802e40:	00000106 	br	802e48 <logic+0x1c78>
  802e44:	0005883a 	mov	r2,zero
  802e48:	1007883a 	mov	r3,r2
  802e4c:	e0bffc17 	ldw	r2,-16(fp)
  802e50:	10c02405 	stb	r3,144(r2)
  if (d->_g29) {
  802e54:	e0bffc17 	ldw	r2,-16(fp)
  802e58:	10802403 	ldbu	r2,144(r2)
  802e5c:	10803fcc 	andi	r2,r2,255
  802e60:	1080201c 	xori	r2,r2,128
  802e64:	10bfe004 	addi	r2,r2,-128
  802e68:	10003426 	beq	r2,zero,802f3c <logic+0x1d6c>
    d->sleepT = (d->sleepT < (d->URI - d->URI_Clock)) ? d->sleepT : (d->URI - d->URI_Clock);
  802e6c:	e0bffc17 	ldw	r2,-16(fp)
  802e70:	14001b17 	ldw	r16,108(r2)
  802e74:	14401c17 	ldw	r17,112(r2)
  802e78:	e0bffc17 	ldw	r2,-16(fp)
  802e7c:	10800517 	ldw	r2,20(r2)
  802e80:	1009883a 	mov	r4,r2
  802e84:	08068dc0 	call	8068dc <__floatsidf>
  802e88:	1011883a 	mov	r8,r2
  802e8c:	1813883a 	mov	r9,r3
  802e90:	e13ffc17 	ldw	r4,-16(fp)
  802e94:	20800c17 	ldw	r2,48(r4)
  802e98:	20c00d17 	ldw	r3,52(r4)
  802e9c:	100d883a 	mov	r6,r2
  802ea0:	180f883a 	mov	r7,r3
  802ea4:	4009883a 	mov	r4,r8
  802ea8:	480b883a 	mov	r5,r9
  802eac:	0805fe00 	call	805fe0 <__subdf3>
  802eb0:	1009883a 	mov	r4,r2
  802eb4:	180b883a 	mov	r5,r3
  802eb8:	2005883a 	mov	r2,r4
  802ebc:	2807883a 	mov	r3,r5
  802ec0:	100d883a 	mov	r6,r2
  802ec4:	180f883a 	mov	r7,r3
  802ec8:	8009883a 	mov	r4,r16
  802ecc:	880b883a 	mov	r5,r17
  802ed0:	0805eec0 	call	805eec <__ledf2>
  802ed4:	1000040e 	bge	r2,zero,802ee8 <logic+0x1d18>
  802ed8:	e13ffc17 	ldw	r4,-16(fp)
  802edc:	20801b17 	ldw	r2,108(r4)
  802ee0:	20c01c17 	ldw	r3,112(r4)
  802ee4:	00001206 	br	802f30 <logic+0x1d60>
  802ee8:	e0bffc17 	ldw	r2,-16(fp)
  802eec:	10800517 	ldw	r2,20(r2)
  802ef0:	1009883a 	mov	r4,r2
  802ef4:	08068dc0 	call	8068dc <__floatsidf>
  802ef8:	1011883a 	mov	r8,r2
  802efc:	1813883a 	mov	r9,r3
  802f00:	e13ffc17 	ldw	r4,-16(fp)
  802f04:	20800c17 	ldw	r2,48(r4)
  802f08:	20c00d17 	ldw	r3,52(r4)
  802f0c:	100d883a 	mov	r6,r2
  802f10:	180f883a 	mov	r7,r3
  802f14:	4009883a 	mov	r4,r8
  802f18:	480b883a 	mov	r5,r9
  802f1c:	0805fe00 	call	805fe0 <__subdf3>
  802f20:	1009883a 	mov	r4,r2
  802f24:	180b883a 	mov	r5,r3
  802f28:	2005883a 	mov	r2,r4
  802f2c:	2807883a 	mov	r3,r5
  802f30:	e13ffc17 	ldw	r4,-16(fp)
  802f34:	20801b15 	stw	r2,108(r4)
  802f38:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg31 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802f3c:	e0bffc17 	ldw	r2,-16(fp)
  802f40:	10801ec3 	ldbu	r2,123(r2)
  802f44:	10803fcc 	andi	r2,r2,255
  802f48:	1080201c 	xori	r2,r2,128
  802f4c:	10bfe004 	addi	r2,r2,-128
  802f50:	10000c1e 	bne	r2,zero,802f84 <logic+0x1db4>
  802f54:	e0bffc17 	ldw	r2,-16(fp)
  802f58:	10801f03 	ldbu	r2,124(r2)
  802f5c:	10803fcc 	andi	r2,r2,255
  802f60:	1080201c 	xori	r2,r2,128
  802f64:	10bfe004 	addi	r2,r2,-128
  802f68:	1000061e 	bne	r2,zero,802f84 <logic+0x1db4>
  802f6c:	e0bffc17 	ldw	r2,-16(fp)
  802f70:	10801f43 	ldbu	r2,125(r2)
  802f74:	10803fcc 	andi	r2,r2,255
  802f78:	1080201c 	xori	r2,r2,128
  802f7c:	10bfe004 	addi	r2,r2,-128
  802f80:	10000226 	beq	r2,zero,802f8c <logic+0x1dbc>
  802f84:	00800044 	movi	r2,1
  802f88:	00000106 	br	802f90 <logic+0x1dc0>
  802f8c:	0005883a 	mov	r2,zero
  802f90:	1007883a 	mov	r3,r2
  802f94:	e0bffc17 	ldw	r2,-16(fp)
  802f98:	10c03545 	stb	r3,213(r2)
  d->_g30 = d->_g35 && !d->_cg30;
  802f9c:	e0bffc17 	ldw	r2,-16(fp)
  802fa0:	10802543 	ldbu	r2,149(r2)
  802fa4:	10803fcc 	andi	r2,r2,255
  802fa8:	1080201c 	xori	r2,r2,128
  802fac:	10bfe004 	addi	r2,r2,-128
  802fb0:	10000826 	beq	r2,zero,802fd4 <logic+0x1e04>
  802fb4:	e0bffc17 	ldw	r2,-16(fp)
  802fb8:	10803583 	ldbu	r2,214(r2)
  802fbc:	10803fcc 	andi	r2,r2,255
  802fc0:	1080201c 	xori	r2,r2,128
  802fc4:	10bfe004 	addi	r2,r2,-128
  802fc8:	1000021e 	bne	r2,zero,802fd4 <logic+0x1e04>
  802fcc:	00800044 	movi	r2,1
  802fd0:	00000106 	br	802fd8 <logic+0x1e08>
  802fd4:	0005883a 	mov	r2,zero
  802fd8:	1007883a 	mov	r3,r2
  802fdc:	e0bffc17 	ldw	r2,-16(fp)
  802fe0:	10c02445 	stb	r3,145(r2)
  d->_cg33 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802fe4:	e0bffc17 	ldw	r2,-16(fp)
  802fe8:	10801ec3 	ldbu	r2,123(r2)
  802fec:	10803fcc 	andi	r2,r2,255
  802ff0:	1080201c 	xori	r2,r2,128
  802ff4:	10bfe004 	addi	r2,r2,-128
  802ff8:	10000c1e 	bne	r2,zero,80302c <logic+0x1e5c>
  802ffc:	e0bffc17 	ldw	r2,-16(fp)
  803000:	10801f03 	ldbu	r2,124(r2)
  803004:	10803fcc 	andi	r2,r2,255
  803008:	1080201c 	xori	r2,r2,128
  80300c:	10bfe004 	addi	r2,r2,-128
  803010:	1000061e 	bne	r2,zero,80302c <logic+0x1e5c>
  803014:	e0bffc17 	ldw	r2,-16(fp)
  803018:	10801f43 	ldbu	r2,125(r2)
  80301c:	10803fcc 	andi	r2,r2,255
  803020:	1080201c 	xori	r2,r2,128
  803024:	10bfe004 	addi	r2,r2,-128
  803028:	10000226 	beq	r2,zero,803034 <logic+0x1e64>
  80302c:	00800044 	movi	r2,1
  803030:	00000106 	br	803038 <logic+0x1e68>
  803034:	0005883a 	mov	r2,zero
  803038:	1007883a 	mov	r3,r2
  80303c:	e0bffc17 	ldw	r2,-16(fp)
  803040:	10c035c5 	stb	r3,215(r2)
  d->_g32 = d->_g29 && d->_cg31 || d->_g30 && d->_cg33;
  803044:	e0bffc17 	ldw	r2,-16(fp)
  803048:	10802403 	ldbu	r2,144(r2)
  80304c:	10803fcc 	andi	r2,r2,255
  803050:	1080201c 	xori	r2,r2,128
  803054:	10bfe004 	addi	r2,r2,-128
  803058:	10000626 	beq	r2,zero,803074 <logic+0x1ea4>
  80305c:	e0bffc17 	ldw	r2,-16(fp)
  803060:	10803543 	ldbu	r2,213(r2)
  803064:	10803fcc 	andi	r2,r2,255
  803068:	1080201c 	xori	r2,r2,128
  80306c:	10bfe004 	addi	r2,r2,-128
  803070:	10000c1e 	bne	r2,zero,8030a4 <logic+0x1ed4>
  803074:	e0bffc17 	ldw	r2,-16(fp)
  803078:	10802443 	ldbu	r2,145(r2)
  80307c:	10803fcc 	andi	r2,r2,255
  803080:	1080201c 	xori	r2,r2,128
  803084:	10bfe004 	addi	r2,r2,-128
  803088:	10000826 	beq	r2,zero,8030ac <logic+0x1edc>
  80308c:	e0bffc17 	ldw	r2,-16(fp)
  803090:	108035c3 	ldbu	r2,215(r2)
  803094:	10803fcc 	andi	r2,r2,255
  803098:	1080201c 	xori	r2,r2,128
  80309c:	10bfe004 	addi	r2,r2,-128
  8030a0:	10000226 	beq	r2,zero,8030ac <logic+0x1edc>
  8030a4:	00800044 	movi	r2,1
  8030a8:	00000106 	br	8030b0 <logic+0x1ee0>
  8030ac:	0005883a 	mov	r2,zero
  8030b0:	1007883a 	mov	r3,r2
  8030b4:	e0bffc17 	ldw	r2,-16(fp)
  8030b8:	10c024c5 	stb	r3,147(r2)
  d->_g46 = d->_pg16;
  8030bc:	e0bffc17 	ldw	r2,-16(fp)
  8030c0:	10c04443 	ldbu	r3,273(r2)
  8030c4:	e0bffc17 	ldw	r2,-16(fp)
  8030c8:	10c02745 	stb	r3,157(r2)
  d->_g40 = d->_pg11;
  8030cc:	e0bffc17 	ldw	r2,-16(fp)
  8030d0:	10c04483 	ldbu	r3,274(r2)
  8030d4:	e0bffc17 	ldw	r2,-16(fp)
  8030d8:	10c02605 	stb	r3,152(r2)
  d->_g43_e4 = !(d->_g46 || d->_g40);
  8030dc:	e0bffc17 	ldw	r2,-16(fp)
  8030e0:	10802743 	ldbu	r2,157(r2)
  8030e4:	10803fcc 	andi	r2,r2,255
  8030e8:	1080201c 	xori	r2,r2,128
  8030ec:	10bfe004 	addi	r2,r2,-128
  8030f0:	1000081e 	bne	r2,zero,803114 <logic+0x1f44>
  8030f4:	e0bffc17 	ldw	r2,-16(fp)
  8030f8:	10802603 	ldbu	r2,152(r2)
  8030fc:	10803fcc 	andi	r2,r2,255
  803100:	1080201c 	xori	r2,r2,128
  803104:	10bfe004 	addi	r2,r2,-128
  803108:	1000021e 	bne	r2,zero,803114 <logic+0x1f44>
  80310c:	00800044 	movi	r2,1
  803110:	00000106 	br	803118 <logic+0x1f48>
  803114:	0005883a 	mov	r2,zero
  803118:	1007883a 	mov	r3,r2
  80311c:	e0bffc17 	ldw	r2,-16(fp)
  803120:	10c03e05 	stb	r3,248(r2)
  d->_g40 = d->_g40 || d->_g46;
  803124:	e0bffc17 	ldw	r2,-16(fp)
  803128:	10802603 	ldbu	r2,152(r2)
  80312c:	10803fcc 	andi	r2,r2,255
  803130:	1080201c 	xori	r2,r2,128
  803134:	10bfe004 	addi	r2,r2,-128
  803138:	1000061e 	bne	r2,zero,803154 <logic+0x1f84>
  80313c:	e0bffc17 	ldw	r2,-16(fp)
  803140:	10802743 	ldbu	r2,157(r2)
  803144:	10803fcc 	andi	r2,r2,255
  803148:	1080201c 	xori	r2,r2,128
  80314c:	10bfe004 	addi	r2,r2,-128
  803150:	10000226 	beq	r2,zero,80315c <logic+0x1f8c>
  803154:	00800044 	movi	r2,1
  803158:	00000106 	br	803160 <logic+0x1f90>
  80315c:	0005883a 	mov	r2,zero
  803160:	1007883a 	mov	r3,r2
  803164:	e0bffc17 	ldw	r2,-16(fp)
  803168:	10c02605 	stb	r3,152(r2)
  d->_cg41 = d->AVI_Clock < d->AVI;
  80316c:	e0bffc17 	ldw	r2,-16(fp)
  803170:	14001017 	ldw	r16,64(r2)
  803174:	14401117 	ldw	r17,68(r2)
  803178:	e0bffc17 	ldw	r2,-16(fp)
  80317c:	10800017 	ldw	r2,0(r2)
  803180:	1009883a 	mov	r4,r2
  803184:	08068dc0 	call	8068dc <__floatsidf>
  803188:	1009883a 	mov	r4,r2
  80318c:	180b883a 	mov	r5,r3
  803190:	04800044 	movi	r18,1
  803194:	200d883a 	mov	r6,r4
  803198:	280f883a 	mov	r7,r5
  80319c:	8009883a 	mov	r4,r16
  8031a0:	880b883a 	mov	r5,r17
  8031a4:	0805eec0 	call	805eec <__ledf2>
  8031a8:	10000116 	blt	r2,zero,8031b0 <logic+0x1fe0>
  8031ac:	0025883a 	mov	r18,zero
  8031b0:	9007883a 	mov	r3,r18
  8031b4:	e0bffc17 	ldw	r2,-16(fp)
  8031b8:	10c03705 	stb	r3,220(r2)
  d->_g46 = d->_g40 && d->_cg41;
  8031bc:	e0bffc17 	ldw	r2,-16(fp)
  8031c0:	10802603 	ldbu	r2,152(r2)
  8031c4:	10803fcc 	andi	r2,r2,255
  8031c8:	1080201c 	xori	r2,r2,128
  8031cc:	10bfe004 	addi	r2,r2,-128
  8031d0:	10000826 	beq	r2,zero,8031f4 <logic+0x2024>
  8031d4:	e0bffc17 	ldw	r2,-16(fp)
  8031d8:	10803703 	ldbu	r2,220(r2)
  8031dc:	10803fcc 	andi	r2,r2,255
  8031e0:	1080201c 	xori	r2,r2,128
  8031e4:	10bfe004 	addi	r2,r2,-128
  8031e8:	10000226 	beq	r2,zero,8031f4 <logic+0x2024>
  8031ec:	00800044 	movi	r2,1
  8031f0:	00000106 	br	8031f8 <logic+0x2028>
  8031f4:	0005883a 	mov	r2,zero
  8031f8:	1007883a 	mov	r3,r2
  8031fc:	e0bffc17 	ldw	r2,-16(fp)
  803200:	10c02745 	stb	r3,157(r2)
  if (d->_g46) {
  803204:	e0bffc17 	ldw	r2,-16(fp)
  803208:	10802743 	ldbu	r2,157(r2)
  80320c:	10803fcc 	andi	r2,r2,255
  803210:	1080201c 	xori	r2,r2,128
  803214:	10bfe004 	addi	r2,r2,-128
  803218:	10003426 	beq	r2,zero,8032ec <logic+0x211c>
    d->sleepT = (d->sleepT < (d->AVI - d->AVI_Clock)) ? d->sleepT : (d->AVI - d->AVI_Clock);
  80321c:	e0bffc17 	ldw	r2,-16(fp)
  803220:	14001b17 	ldw	r16,108(r2)
  803224:	14401c17 	ldw	r17,112(r2)
  803228:	e0bffc17 	ldw	r2,-16(fp)
  80322c:	10800017 	ldw	r2,0(r2)
  803230:	1009883a 	mov	r4,r2
  803234:	08068dc0 	call	8068dc <__floatsidf>
  803238:	1011883a 	mov	r8,r2
  80323c:	1813883a 	mov	r9,r3
  803240:	e13ffc17 	ldw	r4,-16(fp)
  803244:	20801017 	ldw	r2,64(r4)
  803248:	20c01117 	ldw	r3,68(r4)
  80324c:	100d883a 	mov	r6,r2
  803250:	180f883a 	mov	r7,r3
  803254:	4009883a 	mov	r4,r8
  803258:	480b883a 	mov	r5,r9
  80325c:	0805fe00 	call	805fe0 <__subdf3>
  803260:	1009883a 	mov	r4,r2
  803264:	180b883a 	mov	r5,r3
  803268:	2005883a 	mov	r2,r4
  80326c:	2807883a 	mov	r3,r5
  803270:	100d883a 	mov	r6,r2
  803274:	180f883a 	mov	r7,r3
  803278:	8009883a 	mov	r4,r16
  80327c:	880b883a 	mov	r5,r17
  803280:	0805eec0 	call	805eec <__ledf2>
  803284:	1000040e 	bge	r2,zero,803298 <logic+0x20c8>
  803288:	e13ffc17 	ldw	r4,-16(fp)
  80328c:	20801b17 	ldw	r2,108(r4)
  803290:	20c01c17 	ldw	r3,112(r4)
  803294:	00001206 	br	8032e0 <logic+0x2110>
  803298:	e0bffc17 	ldw	r2,-16(fp)
  80329c:	10800017 	ldw	r2,0(r2)
  8032a0:	1009883a 	mov	r4,r2
  8032a4:	08068dc0 	call	8068dc <__floatsidf>
  8032a8:	1011883a 	mov	r8,r2
  8032ac:	1813883a 	mov	r9,r3
  8032b0:	e13ffc17 	ldw	r4,-16(fp)
  8032b4:	20801017 	ldw	r2,64(r4)
  8032b8:	20c01117 	ldw	r3,68(r4)
  8032bc:	100d883a 	mov	r6,r2
  8032c0:	180f883a 	mov	r7,r3
  8032c4:	4009883a 	mov	r4,r8
  8032c8:	480b883a 	mov	r5,r9
  8032cc:	0805fe00 	call	805fe0 <__subdf3>
  8032d0:	1009883a 	mov	r4,r2
  8032d4:	180b883a 	mov	r5,r3
  8032d8:	2005883a 	mov	r2,r4
  8032dc:	2807883a 	mov	r3,r5
  8032e0:	e13ffc17 	ldw	r4,-16(fp)
  8032e4:	20801b15 	stw	r2,108(r4)
  8032e8:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg42 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8032ec:	e0bffc17 	ldw	r2,-16(fp)
  8032f0:	10801ec3 	ldbu	r2,123(r2)
  8032f4:	10803fcc 	andi	r2,r2,255
  8032f8:	1080201c 	xori	r2,r2,128
  8032fc:	10bfe004 	addi	r2,r2,-128
  803300:	10000c1e 	bne	r2,zero,803334 <logic+0x2164>
  803304:	e0bffc17 	ldw	r2,-16(fp)
  803308:	10801f03 	ldbu	r2,124(r2)
  80330c:	10803fcc 	andi	r2,r2,255
  803310:	1080201c 	xori	r2,r2,128
  803314:	10bfe004 	addi	r2,r2,-128
  803318:	1000061e 	bne	r2,zero,803334 <logic+0x2164>
  80331c:	e0bffc17 	ldw	r2,-16(fp)
  803320:	10801f43 	ldbu	r2,125(r2)
  803324:	10803fcc 	andi	r2,r2,255
  803328:	1080201c 	xori	r2,r2,128
  80332c:	10bfe004 	addi	r2,r2,-128
  803330:	10000226 	beq	r2,zero,80333c <logic+0x216c>
  803334:	00800044 	movi	r2,1
  803338:	00000106 	br	803340 <logic+0x2170>
  80333c:	0005883a 	mov	r2,zero
  803340:	1007883a 	mov	r3,r2
  803344:	e0bffc17 	ldw	r2,-16(fp)
  803348:	10c036c5 	stb	r3,219(r2)
  d->_g41 = d->_g40 && !d->_cg41;
  80334c:	e0bffc17 	ldw	r2,-16(fp)
  803350:	10802603 	ldbu	r2,152(r2)
  803354:	10803fcc 	andi	r2,r2,255
  803358:	1080201c 	xori	r2,r2,128
  80335c:	10bfe004 	addi	r2,r2,-128
  803360:	10000826 	beq	r2,zero,803384 <logic+0x21b4>
  803364:	e0bffc17 	ldw	r2,-16(fp)
  803368:	10803703 	ldbu	r2,220(r2)
  80336c:	10803fcc 	andi	r2,r2,255
  803370:	1080201c 	xori	r2,r2,128
  803374:	10bfe004 	addi	r2,r2,-128
  803378:	1000021e 	bne	r2,zero,803384 <logic+0x21b4>
  80337c:	00800044 	movi	r2,1
  803380:	00000106 	br	803388 <logic+0x21b8>
  803384:	0005883a 	mov	r2,zero
  803388:	1007883a 	mov	r3,r2
  80338c:	e0bffc17 	ldw	r2,-16(fp)
  803390:	10c02645 	stb	r3,153(r2)
  d->_cg44 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803394:	e0bffc17 	ldw	r2,-16(fp)
  803398:	10801ec3 	ldbu	r2,123(r2)
  80339c:	10803fcc 	andi	r2,r2,255
  8033a0:	1080201c 	xori	r2,r2,128
  8033a4:	10bfe004 	addi	r2,r2,-128
  8033a8:	10000c1e 	bne	r2,zero,8033dc <logic+0x220c>
  8033ac:	e0bffc17 	ldw	r2,-16(fp)
  8033b0:	10801f03 	ldbu	r2,124(r2)
  8033b4:	10803fcc 	andi	r2,r2,255
  8033b8:	1080201c 	xori	r2,r2,128
  8033bc:	10bfe004 	addi	r2,r2,-128
  8033c0:	1000061e 	bne	r2,zero,8033dc <logic+0x220c>
  8033c4:	e0bffc17 	ldw	r2,-16(fp)
  8033c8:	10801f43 	ldbu	r2,125(r2)
  8033cc:	10803fcc 	andi	r2,r2,255
  8033d0:	1080201c 	xori	r2,r2,128
  8033d4:	10bfe004 	addi	r2,r2,-128
  8033d8:	10000226 	beq	r2,zero,8033e4 <logic+0x2214>
  8033dc:	00800044 	movi	r2,1
  8033e0:	00000106 	br	8033e8 <logic+0x2218>
  8033e4:	0005883a 	mov	r2,zero
  8033e8:	1007883a 	mov	r3,r2
  8033ec:	e0bffc17 	ldw	r2,-16(fp)
  8033f0:	10c03745 	stb	r3,221(r2)
  d->_g43 = d->_g46 && d->_cg42 || d->_g41 && d->_cg44;
  8033f4:	e0bffc17 	ldw	r2,-16(fp)
  8033f8:	10802743 	ldbu	r2,157(r2)
  8033fc:	10803fcc 	andi	r2,r2,255
  803400:	1080201c 	xori	r2,r2,128
  803404:	10bfe004 	addi	r2,r2,-128
  803408:	10000626 	beq	r2,zero,803424 <logic+0x2254>
  80340c:	e0bffc17 	ldw	r2,-16(fp)
  803410:	108036c3 	ldbu	r2,219(r2)
  803414:	10803fcc 	andi	r2,r2,255
  803418:	1080201c 	xori	r2,r2,128
  80341c:	10bfe004 	addi	r2,r2,-128
  803420:	10000c1e 	bne	r2,zero,803454 <logic+0x2284>
  803424:	e0bffc17 	ldw	r2,-16(fp)
  803428:	10802643 	ldbu	r2,153(r2)
  80342c:	10803fcc 	andi	r2,r2,255
  803430:	1080201c 	xori	r2,r2,128
  803434:	10bfe004 	addi	r2,r2,-128
  803438:	10000826 	beq	r2,zero,80345c <logic+0x228c>
  80343c:	e0bffc17 	ldw	r2,-16(fp)
  803440:	10803743 	ldbu	r2,221(r2)
  803444:	10803fcc 	andi	r2,r2,255
  803448:	1080201c 	xori	r2,r2,128
  80344c:	10bfe004 	addi	r2,r2,-128
  803450:	10000226 	beq	r2,zero,80345c <logic+0x228c>
  803454:	00800044 	movi	r2,1
  803458:	00000106 	br	803460 <logic+0x2290>
  80345c:	0005883a 	mov	r2,zero
  803460:	1007883a 	mov	r3,r2
  803464:	e0bffc17 	ldw	r2,-16(fp)
  803468:	10c026c5 	stb	r3,155(r2)
  d->_g50 = !d->_g50;
  80346c:	e0bffc17 	ldw	r2,-16(fp)
  803470:	108027c3 	ldbu	r2,159(r2)
  803474:	10803fcc 	andi	r2,r2,255
  803478:	1080201c 	xori	r2,r2,128
  80347c:	10bfe004 	addi	r2,r2,-128
  803480:	1005003a 	cmpeq	r2,r2,zero
  803484:	1007883a 	mov	r3,r2
  803488:	e0bffc17 	ldw	r2,-16(fp)
  80348c:	10c027c5 	stb	r3,159(r2)
  d->_g51 = d->_g51 || d->_g54 || d->_g56;
  803490:	e0bffc17 	ldw	r2,-16(fp)
  803494:	10802803 	ldbu	r2,160(r2)
  803498:	10803fcc 	andi	r2,r2,255
  80349c:	1080201c 	xori	r2,r2,128
  8034a0:	10bfe004 	addi	r2,r2,-128
  8034a4:	10000c1e 	bne	r2,zero,8034d8 <logic+0x2308>
  8034a8:	e0bffc17 	ldw	r2,-16(fp)
  8034ac:	108028c3 	ldbu	r2,163(r2)
  8034b0:	10803fcc 	andi	r2,r2,255
  8034b4:	1080201c 	xori	r2,r2,128
  8034b8:	10bfe004 	addi	r2,r2,-128
  8034bc:	1000061e 	bne	r2,zero,8034d8 <logic+0x2308>
  8034c0:	e0bffc17 	ldw	r2,-16(fp)
  8034c4:	10802943 	ldbu	r2,165(r2)
  8034c8:	10803fcc 	andi	r2,r2,255
  8034cc:	1080201c 	xori	r2,r2,128
  8034d0:	10bfe004 	addi	r2,r2,-128
  8034d4:	10000226 	beq	r2,zero,8034e0 <logic+0x2310>
  8034d8:	00800044 	movi	r2,1
  8034dc:	00000106 	br	8034e4 <logic+0x2314>
  8034e0:	0005883a 	mov	r2,zero
  8034e4:	1007883a 	mov	r3,r2
  8034e8:	e0bffc17 	ldw	r2,-16(fp)
  8034ec:	10c02805 	stb	r3,160(r2)
  d->_g56 = (d->_g135 || d->_g10) && (d->_g21_e2 || d->_g21) && (d->_g32_e3 || d->_g32) && (d->_g43_e4 || d->_g43) && (d->_g50 || d->_g51) && (d->_g10 || d->_g21 || d->_g32 || d->_g43 || d->_g51);
  8034f0:	e0bffc17 	ldw	r2,-16(fp)
  8034f4:	10803143 	ldbu	r2,197(r2)
  8034f8:	10803fcc 	andi	r2,r2,255
  8034fc:	1080201c 	xori	r2,r2,128
  803500:	10bfe004 	addi	r2,r2,-128
  803504:	1000061e 	bne	r2,zero,803520 <logic+0x2350>
  803508:	e0bffc17 	ldw	r2,-16(fp)
  80350c:	108020c3 	ldbu	r2,131(r2)
  803510:	10803fcc 	andi	r2,r2,255
  803514:	1080201c 	xori	r2,r2,128
  803518:	10bfe004 	addi	r2,r2,-128
  80351c:	10005026 	beq	r2,zero,803660 <logic+0x2490>
  803520:	e0bffc17 	ldw	r2,-16(fp)
  803524:	10803d83 	ldbu	r2,246(r2)
  803528:	10803fcc 	andi	r2,r2,255
  80352c:	1080201c 	xori	r2,r2,128
  803530:	10bfe004 	addi	r2,r2,-128
  803534:	1000061e 	bne	r2,zero,803550 <logic+0x2380>
  803538:	e0bffc17 	ldw	r2,-16(fp)
  80353c:	108022c3 	ldbu	r2,139(r2)
  803540:	10803fcc 	andi	r2,r2,255
  803544:	1080201c 	xori	r2,r2,128
  803548:	10bfe004 	addi	r2,r2,-128
  80354c:	10004426 	beq	r2,zero,803660 <logic+0x2490>
  803550:	e0bffc17 	ldw	r2,-16(fp)
  803554:	10803dc3 	ldbu	r2,247(r2)
  803558:	10803fcc 	andi	r2,r2,255
  80355c:	1080201c 	xori	r2,r2,128
  803560:	10bfe004 	addi	r2,r2,-128
  803564:	1000061e 	bne	r2,zero,803580 <logic+0x23b0>
  803568:	e0bffc17 	ldw	r2,-16(fp)
  80356c:	108024c3 	ldbu	r2,147(r2)
  803570:	10803fcc 	andi	r2,r2,255
  803574:	1080201c 	xori	r2,r2,128
  803578:	10bfe004 	addi	r2,r2,-128
  80357c:	10003826 	beq	r2,zero,803660 <logic+0x2490>
  803580:	e0bffc17 	ldw	r2,-16(fp)
  803584:	10803e03 	ldbu	r2,248(r2)
  803588:	10803fcc 	andi	r2,r2,255
  80358c:	1080201c 	xori	r2,r2,128
  803590:	10bfe004 	addi	r2,r2,-128
  803594:	1000061e 	bne	r2,zero,8035b0 <logic+0x23e0>
  803598:	e0bffc17 	ldw	r2,-16(fp)
  80359c:	108026c3 	ldbu	r2,155(r2)
  8035a0:	10803fcc 	andi	r2,r2,255
  8035a4:	1080201c 	xori	r2,r2,128
  8035a8:	10bfe004 	addi	r2,r2,-128
  8035ac:	10002c26 	beq	r2,zero,803660 <logic+0x2490>
  8035b0:	e0bffc17 	ldw	r2,-16(fp)
  8035b4:	108027c3 	ldbu	r2,159(r2)
  8035b8:	10803fcc 	andi	r2,r2,255
  8035bc:	1080201c 	xori	r2,r2,128
  8035c0:	10bfe004 	addi	r2,r2,-128
  8035c4:	1000061e 	bne	r2,zero,8035e0 <logic+0x2410>
  8035c8:	e0bffc17 	ldw	r2,-16(fp)
  8035cc:	10802803 	ldbu	r2,160(r2)
  8035d0:	10803fcc 	andi	r2,r2,255
  8035d4:	1080201c 	xori	r2,r2,128
  8035d8:	10bfe004 	addi	r2,r2,-128
  8035dc:	10002026 	beq	r2,zero,803660 <logic+0x2490>
  8035e0:	e0bffc17 	ldw	r2,-16(fp)
  8035e4:	108020c3 	ldbu	r2,131(r2)
  8035e8:	10803fcc 	andi	r2,r2,255
  8035ec:	1080201c 	xori	r2,r2,128
  8035f0:	10bfe004 	addi	r2,r2,-128
  8035f4:	1000181e 	bne	r2,zero,803658 <logic+0x2488>
  8035f8:	e0bffc17 	ldw	r2,-16(fp)
  8035fc:	108022c3 	ldbu	r2,139(r2)
  803600:	10803fcc 	andi	r2,r2,255
  803604:	1080201c 	xori	r2,r2,128
  803608:	10bfe004 	addi	r2,r2,-128
  80360c:	1000121e 	bne	r2,zero,803658 <logic+0x2488>
  803610:	e0bffc17 	ldw	r2,-16(fp)
  803614:	108024c3 	ldbu	r2,147(r2)
  803618:	10803fcc 	andi	r2,r2,255
  80361c:	1080201c 	xori	r2,r2,128
  803620:	10bfe004 	addi	r2,r2,-128
  803624:	10000c1e 	bne	r2,zero,803658 <logic+0x2488>
  803628:	e0bffc17 	ldw	r2,-16(fp)
  80362c:	108026c3 	ldbu	r2,155(r2)
  803630:	10803fcc 	andi	r2,r2,255
  803634:	1080201c 	xori	r2,r2,128
  803638:	10bfe004 	addi	r2,r2,-128
  80363c:	1000061e 	bne	r2,zero,803658 <logic+0x2488>
  803640:	e0bffc17 	ldw	r2,-16(fp)
  803644:	10802803 	ldbu	r2,160(r2)
  803648:	10803fcc 	andi	r2,r2,255
  80364c:	1080201c 	xori	r2,r2,128
  803650:	10bfe004 	addi	r2,r2,-128
  803654:	10000226 	beq	r2,zero,803660 <logic+0x2490>
  803658:	00800044 	movi	r2,1
  80365c:	00000106 	br	803664 <logic+0x2494>
  803660:	0005883a 	mov	r2,zero
  803664:	1007883a 	mov	r3,r2
  803668:	e0bffc17 	ldw	r2,-16(fp)
  80366c:	10c02945 	stb	r3,165(r2)
  d->_cg57 = d->_Pacemaker_local__Atrig3;
  803670:	e0bffc17 	ldw	r2,-16(fp)
  803674:	10c01ec3 	ldbu	r3,123(r2)
  803678:	e0bffc17 	ldw	r2,-16(fp)
  80367c:	10c03885 	stb	r3,226(r2)
  d->_g54 = d->_g56 && !d->_cg57;
  803680:	e0bffc17 	ldw	r2,-16(fp)
  803684:	10802943 	ldbu	r2,165(r2)
  803688:	10803fcc 	andi	r2,r2,255
  80368c:	1080201c 	xori	r2,r2,128
  803690:	10bfe004 	addi	r2,r2,-128
  803694:	10000826 	beq	r2,zero,8036b8 <logic+0x24e8>
  803698:	e0bffc17 	ldw	r2,-16(fp)
  80369c:	10803883 	ldbu	r2,226(r2)
  8036a0:	10803fcc 	andi	r2,r2,255
  8036a4:	1080201c 	xori	r2,r2,128
  8036a8:	10bfe004 	addi	r2,r2,-128
  8036ac:	1000021e 	bne	r2,zero,8036b8 <logic+0x24e8>
  8036b0:	00800044 	movi	r2,1
  8036b4:	00000106 	br	8036bc <logic+0x24ec>
  8036b8:	0005883a 	mov	r2,zero
  8036bc:	1007883a 	mov	r3,r2
  8036c0:	e0bffc17 	ldw	r2,-16(fp)
  8036c4:	10c028c5 	stb	r3,163(r2)
  d->_cg97 = d->_Pacemaker_local__Atrig4;
  8036c8:	e0bffc17 	ldw	r2,-16(fp)
  8036cc:	10c01f03 	ldbu	r3,124(r2)
  8036d0:	e0bffc17 	ldw	r2,-16(fp)
  8036d4:	10c03d05 	stb	r3,244(r2)
  d->_g10_e1 = d->_g54 && d->_cg97;
  8036d8:	e0bffc17 	ldw	r2,-16(fp)
  8036dc:	108028c3 	ldbu	r2,163(r2)
  8036e0:	10803fcc 	andi	r2,r2,255
  8036e4:	1080201c 	xori	r2,r2,128
  8036e8:	10bfe004 	addi	r2,r2,-128
  8036ec:	10000826 	beq	r2,zero,803710 <logic+0x2540>
  8036f0:	e0bffc17 	ldw	r2,-16(fp)
  8036f4:	10803d03 	ldbu	r2,244(r2)
  8036f8:	10803fcc 	andi	r2,r2,255
  8036fc:	1080201c 	xori	r2,r2,128
  803700:	10bfe004 	addi	r2,r2,-128
  803704:	10000226 	beq	r2,zero,803710 <logic+0x2540>
  803708:	00800044 	movi	r2,1
  80370c:	00000106 	br	803714 <logic+0x2544>
  803710:	0005883a 	mov	r2,zero
  803714:	1007883a 	mov	r3,r2
  803718:	e0bffc17 	ldw	r2,-16(fp)
  80371c:	10c03d45 	stb	r3,245(r2)
  if (d->_g10_e1) {
  803720:	e0bffc17 	ldw	r2,-16(fp)
  803724:	10803d43 	ldbu	r2,245(r2)
  803728:	10803fcc 	andi	r2,r2,255
  80372c:	1080201c 	xori	r2,r2,128
  803730:	10bfe004 	addi	r2,r2,-128
  803734:	10000526 	beq	r2,zero,80374c <logic+0x257c>
    d->_taken_transitions[5] += 1;
  803738:	e0bffc17 	ldw	r2,-16(fp)
  80373c:	10801717 	ldw	r2,92(r2)
  803740:	10c00044 	addi	r3,r2,1
  803744:	e0bffc17 	ldw	r2,-16(fp)
  803748:	10c01715 	stw	r3,92(r2)
  }
  d->_g52 = d->_GO || d->_g86 || d->_g67 || d->_g10_e1;
  80374c:	e0bffc17 	ldw	r2,-16(fp)
  803750:	10803183 	ldbu	r2,198(r2)
  803754:	10803fcc 	andi	r2,r2,255
  803758:	1080201c 	xori	r2,r2,128
  80375c:	10bfe004 	addi	r2,r2,-128
  803760:	1000121e 	bne	r2,zero,8037ac <logic+0x25dc>
  803764:	e0bffc17 	ldw	r2,-16(fp)
  803768:	10802cc3 	ldbu	r2,179(r2)
  80376c:	10803fcc 	andi	r2,r2,255
  803770:	1080201c 	xori	r2,r2,128
  803774:	10bfe004 	addi	r2,r2,-128
  803778:	10000c1e 	bne	r2,zero,8037ac <logic+0x25dc>
  80377c:	e0bffc17 	ldw	r2,-16(fp)
  803780:	10802b03 	ldbu	r2,172(r2)
  803784:	10803fcc 	andi	r2,r2,255
  803788:	1080201c 	xori	r2,r2,128
  80378c:	10bfe004 	addi	r2,r2,-128
  803790:	1000061e 	bne	r2,zero,8037ac <logic+0x25dc>
  803794:	e0bffc17 	ldw	r2,-16(fp)
  803798:	10803d43 	ldbu	r2,245(r2)
  80379c:	10803fcc 	andi	r2,r2,255
  8037a0:	1080201c 	xori	r2,r2,128
  8037a4:	10bfe004 	addi	r2,r2,-128
  8037a8:	10000226 	beq	r2,zero,8037b4 <logic+0x25e4>
  8037ac:	00800044 	movi	r2,1
  8037b0:	00000106 	br	8037b8 <logic+0x25e8>
  8037b4:	0005883a 	mov	r2,zero
  8037b8:	1007883a 	mov	r3,r2
  8037bc:	e0bffc17 	ldw	r2,-16(fp)
  8037c0:	10c02845 	stb	r3,161(r2)
  if (d->_g52) {
  8037c4:	e0bffc17 	ldw	r2,-16(fp)
  8037c8:	10802843 	ldbu	r2,161(r2)
  8037cc:	10803fcc 	andi	r2,r2,255
  8037d0:	1080201c 	xori	r2,r2,128
  8037d4:	10bfe004 	addi	r2,r2,-128
  8037d8:	10000926 	beq	r2,zero,803800 <logic+0x2630>
    d->AVI_Clock = 0;
  8037dc:	e0bffc17 	ldw	r2,-16(fp)
  8037e0:	10001015 	stw	zero,64(r2)
  8037e4:	10001115 	stw	zero,68(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  8037e8:	e0bffc17 	ldw	r2,-16(fp)
  8037ec:	10001ec5 	stb	zero,123(r2)
    d->_Pacemaker_local__Atrig4 = 0;
  8037f0:	e0bffc17 	ldw	r2,-16(fp)
  8037f4:	10001f05 	stb	zero,124(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  8037f8:	e0bffc17 	ldw	r2,-16(fp)
  8037fc:	10001f45 	stb	zero,125(r2)
  }
  d->_cg4 = d->VRP_Clock < d->VRP;
  803800:	e0bffc17 	ldw	r2,-16(fp)
  803804:	14000617 	ldw	r16,24(r2)
  803808:	14400717 	ldw	r17,28(r2)
  80380c:	e0bffc17 	ldw	r2,-16(fp)
  803810:	10800317 	ldw	r2,12(r2)
  803814:	1009883a 	mov	r4,r2
  803818:	08068dc0 	call	8068dc <__floatsidf>
  80381c:	1009883a 	mov	r4,r2
  803820:	180b883a 	mov	r5,r3
  803824:	04800044 	movi	r18,1
  803828:	200d883a 	mov	r6,r4
  80382c:	280f883a 	mov	r7,r5
  803830:	8009883a 	mov	r4,r16
  803834:	880b883a 	mov	r5,r17
  803838:	0805eec0 	call	805eec <__ledf2>
  80383c:	10000116 	blt	r2,zero,803844 <logic+0x2674>
  803840:	0025883a 	mov	r18,zero
  803844:	9007883a 	mov	r3,r18
  803848:	e0bffc17 	ldw	r2,-16(fp)
  80384c:	10c031c5 	stb	r3,199(r2)
  d->_g21 = d->_g52 && d->_cg4;
  803850:	e0bffc17 	ldw	r2,-16(fp)
  803854:	10802843 	ldbu	r2,161(r2)
  803858:	10803fcc 	andi	r2,r2,255
  80385c:	1080201c 	xori	r2,r2,128
  803860:	10bfe004 	addi	r2,r2,-128
  803864:	10000826 	beq	r2,zero,803888 <logic+0x26b8>
  803868:	e0bffc17 	ldw	r2,-16(fp)
  80386c:	108031c3 	ldbu	r2,199(r2)
  803870:	10803fcc 	andi	r2,r2,255
  803874:	1080201c 	xori	r2,r2,128
  803878:	10bfe004 	addi	r2,r2,-128
  80387c:	10000226 	beq	r2,zero,803888 <logic+0x26b8>
  803880:	00800044 	movi	r2,1
  803884:	00000106 	br	80388c <logic+0x26bc>
  803888:	0005883a 	mov	r2,zero
  80388c:	1007883a 	mov	r3,r2
  803890:	e0bffc17 	ldw	r2,-16(fp)
  803894:	10c022c5 	stb	r3,139(r2)
  if (d->_g21) {
  803898:	e0bffc17 	ldw	r2,-16(fp)
  80389c:	108022c3 	ldbu	r2,139(r2)
  8038a0:	10803fcc 	andi	r2,r2,255
  8038a4:	1080201c 	xori	r2,r2,128
  8038a8:	10bfe004 	addi	r2,r2,-128
  8038ac:	10003426 	beq	r2,zero,803980 <logic+0x27b0>
    d->sleepT = (d->sleepT < (d->VRP - d->VRP_Clock)) ? d->sleepT : (d->VRP - d->VRP_Clock);
  8038b0:	e0bffc17 	ldw	r2,-16(fp)
  8038b4:	14001b17 	ldw	r16,108(r2)
  8038b8:	14401c17 	ldw	r17,112(r2)
  8038bc:	e0bffc17 	ldw	r2,-16(fp)
  8038c0:	10800317 	ldw	r2,12(r2)
  8038c4:	1009883a 	mov	r4,r2
  8038c8:	08068dc0 	call	8068dc <__floatsidf>
  8038cc:	1011883a 	mov	r8,r2
  8038d0:	1813883a 	mov	r9,r3
  8038d4:	e13ffc17 	ldw	r4,-16(fp)
  8038d8:	20800617 	ldw	r2,24(r4)
  8038dc:	20c00717 	ldw	r3,28(r4)
  8038e0:	100d883a 	mov	r6,r2
  8038e4:	180f883a 	mov	r7,r3
  8038e8:	4009883a 	mov	r4,r8
  8038ec:	480b883a 	mov	r5,r9
  8038f0:	0805fe00 	call	805fe0 <__subdf3>
  8038f4:	1009883a 	mov	r4,r2
  8038f8:	180b883a 	mov	r5,r3
  8038fc:	2005883a 	mov	r2,r4
  803900:	2807883a 	mov	r3,r5
  803904:	100d883a 	mov	r6,r2
  803908:	180f883a 	mov	r7,r3
  80390c:	8009883a 	mov	r4,r16
  803910:	880b883a 	mov	r5,r17
  803914:	0805eec0 	call	805eec <__ledf2>
  803918:	1000040e 	bge	r2,zero,80392c <logic+0x275c>
  80391c:	e13ffc17 	ldw	r4,-16(fp)
  803920:	20801b17 	ldw	r2,108(r4)
  803924:	20c01c17 	ldw	r3,112(r4)
  803928:	00001206 	br	803974 <logic+0x27a4>
  80392c:	e0bffc17 	ldw	r2,-16(fp)
  803930:	10800317 	ldw	r2,12(r2)
  803934:	1009883a 	mov	r4,r2
  803938:	08068dc0 	call	8068dc <__floatsidf>
  80393c:	1011883a 	mov	r8,r2
  803940:	1813883a 	mov	r9,r3
  803944:	e13ffc17 	ldw	r4,-16(fp)
  803948:	20800617 	ldw	r2,24(r4)
  80394c:	20c00717 	ldw	r3,28(r4)
  803950:	100d883a 	mov	r6,r2
  803954:	180f883a 	mov	r7,r3
  803958:	4009883a 	mov	r4,r8
  80395c:	480b883a 	mov	r5,r9
  803960:	0805fe00 	call	805fe0 <__subdf3>
  803964:	1009883a 	mov	r4,r2
  803968:	180b883a 	mov	r5,r3
  80396c:	2005883a 	mov	r2,r4
  803970:	2807883a 	mov	r3,r5
  803974:	e13ffc17 	ldw	r4,-16(fp)
  803978:	20801b15 	stw	r2,108(r4)
  80397c:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg5 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803980:	e0bffc17 	ldw	r2,-16(fp)
  803984:	10801ec3 	ldbu	r2,123(r2)
  803988:	10803fcc 	andi	r2,r2,255
  80398c:	1080201c 	xori	r2,r2,128
  803990:	10bfe004 	addi	r2,r2,-128
  803994:	10000c1e 	bne	r2,zero,8039c8 <logic+0x27f8>
  803998:	e0bffc17 	ldw	r2,-16(fp)
  80399c:	10801f03 	ldbu	r2,124(r2)
  8039a0:	10803fcc 	andi	r2,r2,255
  8039a4:	1080201c 	xori	r2,r2,128
  8039a8:	10bfe004 	addi	r2,r2,-128
  8039ac:	1000061e 	bne	r2,zero,8039c8 <logic+0x27f8>
  8039b0:	e0bffc17 	ldw	r2,-16(fp)
  8039b4:	10801f43 	ldbu	r2,125(r2)
  8039b8:	10803fcc 	andi	r2,r2,255
  8039bc:	1080201c 	xori	r2,r2,128
  8039c0:	10bfe004 	addi	r2,r2,-128
  8039c4:	10000226 	beq	r2,zero,8039d0 <logic+0x2800>
  8039c8:	00800044 	movi	r2,1
  8039cc:	00000106 	br	8039d4 <logic+0x2804>
  8039d0:	0005883a 	mov	r2,zero
  8039d4:	1007883a 	mov	r3,r2
  8039d8:	e0bffc17 	ldw	r2,-16(fp)
  8039dc:	10c03205 	stb	r3,200(r2)
  d->_g10 = d->_g21 && !d->_cg5 || d->_g7 && !d->_cg9;
  8039e0:	e0bffc17 	ldw	r2,-16(fp)
  8039e4:	108022c3 	ldbu	r2,139(r2)
  8039e8:	10803fcc 	andi	r2,r2,255
  8039ec:	1080201c 	xori	r2,r2,128
  8039f0:	10bfe004 	addi	r2,r2,-128
  8039f4:	10000626 	beq	r2,zero,803a10 <logic+0x2840>
  8039f8:	e0bffc17 	ldw	r2,-16(fp)
  8039fc:	10803203 	ldbu	r2,200(r2)
  803a00:	10803fcc 	andi	r2,r2,255
  803a04:	1080201c 	xori	r2,r2,128
  803a08:	10bfe004 	addi	r2,r2,-128
  803a0c:	10000c26 	beq	r2,zero,803a40 <logic+0x2870>
  803a10:	e0bffc17 	ldw	r2,-16(fp)
  803a14:	10802003 	ldbu	r2,128(r2)
  803a18:	10803fcc 	andi	r2,r2,255
  803a1c:	1080201c 	xori	r2,r2,128
  803a20:	10bfe004 	addi	r2,r2,-128
  803a24:	10000826 	beq	r2,zero,803a48 <logic+0x2878>
  803a28:	e0bffc17 	ldw	r2,-16(fp)
  803a2c:	10803243 	ldbu	r2,201(r2)
  803a30:	10803fcc 	andi	r2,r2,255
  803a34:	1080201c 	xori	r2,r2,128
  803a38:	10bfe004 	addi	r2,r2,-128
  803a3c:	1000021e 	bne	r2,zero,803a48 <logic+0x2878>
  803a40:	00800044 	movi	r2,1
  803a44:	00000106 	br	803a4c <logic+0x287c>
  803a48:	0005883a 	mov	r2,zero
  803a4c:	1007883a 	mov	r3,r2
  803a50:	e0bffc17 	ldw	r2,-16(fp)
  803a54:	10c020c5 	stb	r3,131(r2)
  d->_g43 = d->_g52 && !d->_cg4;
  803a58:	e0bffc17 	ldw	r2,-16(fp)
  803a5c:	10802843 	ldbu	r2,161(r2)
  803a60:	10803fcc 	andi	r2,r2,255
  803a64:	1080201c 	xori	r2,r2,128
  803a68:	10bfe004 	addi	r2,r2,-128
  803a6c:	10000826 	beq	r2,zero,803a90 <logic+0x28c0>
  803a70:	e0bffc17 	ldw	r2,-16(fp)
  803a74:	108031c3 	ldbu	r2,199(r2)
  803a78:	10803fcc 	andi	r2,r2,255
  803a7c:	1080201c 	xori	r2,r2,128
  803a80:	10bfe004 	addi	r2,r2,-128
  803a84:	1000021e 	bne	r2,zero,803a90 <logic+0x28c0>
  803a88:	00800044 	movi	r2,1
  803a8c:	00000106 	br	803a94 <logic+0x28c4>
  803a90:	0005883a 	mov	r2,zero
  803a94:	1007883a 	mov	r3,r2
  803a98:	e0bffc17 	ldw	r2,-16(fp)
  803a9c:	10c026c5 	stb	r3,155(r2)
  d->_cg14 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803aa0:	e0bffc17 	ldw	r2,-16(fp)
  803aa4:	10801ec3 	ldbu	r2,123(r2)
  803aa8:	10803fcc 	andi	r2,r2,255
  803aac:	1080201c 	xori	r2,r2,128
  803ab0:	10bfe004 	addi	r2,r2,-128
  803ab4:	10000c1e 	bne	r2,zero,803ae8 <logic+0x2918>
  803ab8:	e0bffc17 	ldw	r2,-16(fp)
  803abc:	10801f03 	ldbu	r2,124(r2)
  803ac0:	10803fcc 	andi	r2,r2,255
  803ac4:	1080201c 	xori	r2,r2,128
  803ac8:	10bfe004 	addi	r2,r2,-128
  803acc:	1000061e 	bne	r2,zero,803ae8 <logic+0x2918>
  803ad0:	e0bffc17 	ldw	r2,-16(fp)
  803ad4:	10801f43 	ldbu	r2,125(r2)
  803ad8:	10803fcc 	andi	r2,r2,255
  803adc:	1080201c 	xori	r2,r2,128
  803ae0:	10bfe004 	addi	r2,r2,-128
  803ae4:	10000226 	beq	r2,zero,803af0 <logic+0x2920>
  803ae8:	00800044 	movi	r2,1
  803aec:	00000106 	br	803af4 <logic+0x2924>
  803af0:	0005883a 	mov	r2,zero
  803af4:	1007883a 	mov	r3,r2
  803af8:	e0bffc17 	ldw	r2,-16(fp)
  803afc:	10c03305 	stb	r3,204(r2)
  d->_g32 = d->_g8 && !d->_cg11 || d->_g43 && !d->_cg14;
  803b00:	e0bffc17 	ldw	r2,-16(fp)
  803b04:	10802043 	ldbu	r2,129(r2)
  803b08:	10803fcc 	andi	r2,r2,255
  803b0c:	1080201c 	xori	r2,r2,128
  803b10:	10bfe004 	addi	r2,r2,-128
  803b14:	10000626 	beq	r2,zero,803b30 <logic+0x2960>
  803b18:	e0bffc17 	ldw	r2,-16(fp)
  803b1c:	108032c3 	ldbu	r2,203(r2)
  803b20:	10803fcc 	andi	r2,r2,255
  803b24:	1080201c 	xori	r2,r2,128
  803b28:	10bfe004 	addi	r2,r2,-128
  803b2c:	10000c26 	beq	r2,zero,803b60 <logic+0x2990>
  803b30:	e0bffc17 	ldw	r2,-16(fp)
  803b34:	108026c3 	ldbu	r2,155(r2)
  803b38:	10803fcc 	andi	r2,r2,255
  803b3c:	1080201c 	xori	r2,r2,128
  803b40:	10bfe004 	addi	r2,r2,-128
  803b44:	10000826 	beq	r2,zero,803b68 <logic+0x2998>
  803b48:	e0bffc17 	ldw	r2,-16(fp)
  803b4c:	10803303 	ldbu	r2,204(r2)
  803b50:	10803fcc 	andi	r2,r2,255
  803b54:	1080201c 	xori	r2,r2,128
  803b58:	10bfe004 	addi	r2,r2,-128
  803b5c:	1000021e 	bne	r2,zero,803b68 <logic+0x2998>
  803b60:	00800044 	movi	r2,1
  803b64:	00000106 	br	803b6c <logic+0x299c>
  803b68:	0005883a 	mov	r2,zero
  803b6c:	1007883a 	mov	r3,r2
  803b70:	e0bffc17 	ldw	r2,-16(fp)
  803b74:	10c024c5 	stb	r3,147(r2)
  d->_cg15 = d->LRI_Clock < d->LRI;
  803b78:	e0bffc17 	ldw	r2,-16(fp)
  803b7c:	14000a17 	ldw	r16,40(r2)
  803b80:	14400b17 	ldw	r17,44(r2)
  803b84:	e0bffc17 	ldw	r2,-16(fp)
  803b88:	10800417 	ldw	r2,16(r2)
  803b8c:	1009883a 	mov	r4,r2
  803b90:	08068dc0 	call	8068dc <__floatsidf>
  803b94:	1009883a 	mov	r4,r2
  803b98:	180b883a 	mov	r5,r3
  803b9c:	04800044 	movi	r18,1
  803ba0:	200d883a 	mov	r6,r4
  803ba4:	280f883a 	mov	r7,r5
  803ba8:	8009883a 	mov	r4,r16
  803bac:	880b883a 	mov	r5,r17
  803bb0:	0805eec0 	call	805eec <__ledf2>
  803bb4:	10000116 	blt	r2,zero,803bbc <logic+0x29ec>
  803bb8:	0025883a 	mov	r18,zero
  803bbc:	9007883a 	mov	r3,r18
  803bc0:	e0bffc17 	ldw	r2,-16(fp)
  803bc4:	10c03345 	stb	r3,205(r2)
  d->_g52_e5 = d->_g52 && d->_cg15;
  803bc8:	e0bffc17 	ldw	r2,-16(fp)
  803bcc:	10802843 	ldbu	r2,161(r2)
  803bd0:	10803fcc 	andi	r2,r2,255
  803bd4:	1080201c 	xori	r2,r2,128
  803bd8:	10bfe004 	addi	r2,r2,-128
  803bdc:	10000826 	beq	r2,zero,803c00 <logic+0x2a30>
  803be0:	e0bffc17 	ldw	r2,-16(fp)
  803be4:	10803343 	ldbu	r2,205(r2)
  803be8:	10803fcc 	andi	r2,r2,255
  803bec:	1080201c 	xori	r2,r2,128
  803bf0:	10bfe004 	addi	r2,r2,-128
  803bf4:	10000226 	beq	r2,zero,803c00 <logic+0x2a30>
  803bf8:	00800044 	movi	r2,1
  803bfc:	00000106 	br	803c04 <logic+0x2a34>
  803c00:	0005883a 	mov	r2,zero
  803c04:	1007883a 	mov	r3,r2
  803c08:	e0bffc17 	ldw	r2,-16(fp)
  803c0c:	10c03e45 	stb	r3,249(r2)
  if (d->_g52_e5) {
  803c10:	e0bffc17 	ldw	r2,-16(fp)
  803c14:	10803e43 	ldbu	r2,249(r2)
  803c18:	10803fcc 	andi	r2,r2,255
  803c1c:	1080201c 	xori	r2,r2,128
  803c20:	10bfe004 	addi	r2,r2,-128
  803c24:	10003426 	beq	r2,zero,803cf8 <logic+0x2b28>
    d->sleepT = (d->sleepT < (d->LRI - d->LRI_Clock)) ? d->sleepT : (d->LRI - d->LRI_Clock);
  803c28:	e0bffc17 	ldw	r2,-16(fp)
  803c2c:	14001b17 	ldw	r16,108(r2)
  803c30:	14401c17 	ldw	r17,112(r2)
  803c34:	e0bffc17 	ldw	r2,-16(fp)
  803c38:	10800417 	ldw	r2,16(r2)
  803c3c:	1009883a 	mov	r4,r2
  803c40:	08068dc0 	call	8068dc <__floatsidf>
  803c44:	1011883a 	mov	r8,r2
  803c48:	1813883a 	mov	r9,r3
  803c4c:	e13ffc17 	ldw	r4,-16(fp)
  803c50:	20800a17 	ldw	r2,40(r4)
  803c54:	20c00b17 	ldw	r3,44(r4)
  803c58:	100d883a 	mov	r6,r2
  803c5c:	180f883a 	mov	r7,r3
  803c60:	4009883a 	mov	r4,r8
  803c64:	480b883a 	mov	r5,r9
  803c68:	0805fe00 	call	805fe0 <__subdf3>
  803c6c:	1009883a 	mov	r4,r2
  803c70:	180b883a 	mov	r5,r3
  803c74:	2005883a 	mov	r2,r4
  803c78:	2807883a 	mov	r3,r5
  803c7c:	100d883a 	mov	r6,r2
  803c80:	180f883a 	mov	r7,r3
  803c84:	8009883a 	mov	r4,r16
  803c88:	880b883a 	mov	r5,r17
  803c8c:	0805eec0 	call	805eec <__ledf2>
  803c90:	1000040e 	bge	r2,zero,803ca4 <logic+0x2ad4>
  803c94:	e13ffc17 	ldw	r4,-16(fp)
  803c98:	20801b17 	ldw	r2,108(r4)
  803c9c:	20c01c17 	ldw	r3,112(r4)
  803ca0:	00001206 	br	803cec <logic+0x2b1c>
  803ca4:	e0bffc17 	ldw	r2,-16(fp)
  803ca8:	10800417 	ldw	r2,16(r2)
  803cac:	1009883a 	mov	r4,r2
  803cb0:	08068dc0 	call	8068dc <__floatsidf>
  803cb4:	1011883a 	mov	r8,r2
  803cb8:	1813883a 	mov	r9,r3
  803cbc:	e13ffc17 	ldw	r4,-16(fp)
  803cc0:	20800a17 	ldw	r2,40(r4)
  803cc4:	20c00b17 	ldw	r3,44(r4)
  803cc8:	100d883a 	mov	r6,r2
  803ccc:	180f883a 	mov	r7,r3
  803cd0:	4009883a 	mov	r4,r8
  803cd4:	480b883a 	mov	r5,r9
  803cd8:	0805fe00 	call	805fe0 <__subdf3>
  803cdc:	1009883a 	mov	r4,r2
  803ce0:	180b883a 	mov	r5,r3
  803ce4:	2005883a 	mov	r2,r4
  803ce8:	2807883a 	mov	r3,r5
  803cec:	e13ffc17 	ldw	r4,-16(fp)
  803cf0:	20801b15 	stw	r2,108(r4)
  803cf4:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg16 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803cf8:	e0bffc17 	ldw	r2,-16(fp)
  803cfc:	10801ec3 	ldbu	r2,123(r2)
  803d00:	10803fcc 	andi	r2,r2,255
  803d04:	1080201c 	xori	r2,r2,128
  803d08:	10bfe004 	addi	r2,r2,-128
  803d0c:	10000c1e 	bne	r2,zero,803d40 <logic+0x2b70>
  803d10:	e0bffc17 	ldw	r2,-16(fp)
  803d14:	10801f03 	ldbu	r2,124(r2)
  803d18:	10803fcc 	andi	r2,r2,255
  803d1c:	1080201c 	xori	r2,r2,128
  803d20:	10bfe004 	addi	r2,r2,-128
  803d24:	1000061e 	bne	r2,zero,803d40 <logic+0x2b70>
  803d28:	e0bffc17 	ldw	r2,-16(fp)
  803d2c:	10801f43 	ldbu	r2,125(r2)
  803d30:	10803fcc 	andi	r2,r2,255
  803d34:	1080201c 	xori	r2,r2,128
  803d38:	10bfe004 	addi	r2,r2,-128
  803d3c:	10000226 	beq	r2,zero,803d48 <logic+0x2b78>
  803d40:	00800044 	movi	r2,1
  803d44:	00000106 	br	803d4c <logic+0x2b7c>
  803d48:	0005883a 	mov	r2,zero
  803d4c:	1007883a 	mov	r3,r2
  803d50:	e0bffc17 	ldw	r2,-16(fp)
  803d54:	10c03385 	stb	r3,206(r2)
  d->_g21_e2 = d->_g52_e5 && !d->_cg16 || d->_g18 && !d->_cg20;
  803d58:	e0bffc17 	ldw	r2,-16(fp)
  803d5c:	10803e43 	ldbu	r2,249(r2)
  803d60:	10803fcc 	andi	r2,r2,255
  803d64:	1080201c 	xori	r2,r2,128
  803d68:	10bfe004 	addi	r2,r2,-128
  803d6c:	10000626 	beq	r2,zero,803d88 <logic+0x2bb8>
  803d70:	e0bffc17 	ldw	r2,-16(fp)
  803d74:	10803383 	ldbu	r2,206(r2)
  803d78:	10803fcc 	andi	r2,r2,255
  803d7c:	1080201c 	xori	r2,r2,128
  803d80:	10bfe004 	addi	r2,r2,-128
  803d84:	10000c26 	beq	r2,zero,803db8 <logic+0x2be8>
  803d88:	e0bffc17 	ldw	r2,-16(fp)
  803d8c:	10802203 	ldbu	r2,136(r2)
  803d90:	10803fcc 	andi	r2,r2,255
  803d94:	1080201c 	xori	r2,r2,128
  803d98:	10bfe004 	addi	r2,r2,-128
  803d9c:	10000826 	beq	r2,zero,803dc0 <logic+0x2bf0>
  803da0:	e0bffc17 	ldw	r2,-16(fp)
  803da4:	108033c3 	ldbu	r2,207(r2)
  803da8:	10803fcc 	andi	r2,r2,255
  803dac:	1080201c 	xori	r2,r2,128
  803db0:	10bfe004 	addi	r2,r2,-128
  803db4:	1000021e 	bne	r2,zero,803dc0 <logic+0x2bf0>
  803db8:	00800044 	movi	r2,1
  803dbc:	00000106 	br	803dc4 <logic+0x2bf4>
  803dc0:	0005883a 	mov	r2,zero
  803dc4:	1007883a 	mov	r3,r2
  803dc8:	e0bffc17 	ldw	r2,-16(fp)
  803dcc:	10c03d85 	stb	r3,246(r2)
  d->_g43_e4 = d->_g52 && !d->_cg15;
  803dd0:	e0bffc17 	ldw	r2,-16(fp)
  803dd4:	10802843 	ldbu	r2,161(r2)
  803dd8:	10803fcc 	andi	r2,r2,255
  803ddc:	1080201c 	xori	r2,r2,128
  803de0:	10bfe004 	addi	r2,r2,-128
  803de4:	10000826 	beq	r2,zero,803e08 <logic+0x2c38>
  803de8:	e0bffc17 	ldw	r2,-16(fp)
  803dec:	10803343 	ldbu	r2,205(r2)
  803df0:	10803fcc 	andi	r2,r2,255
  803df4:	1080201c 	xori	r2,r2,128
  803df8:	10bfe004 	addi	r2,r2,-128
  803dfc:	1000021e 	bne	r2,zero,803e08 <logic+0x2c38>
  803e00:	00800044 	movi	r2,1
  803e04:	00000106 	br	803e0c <logic+0x2c3c>
  803e08:	0005883a 	mov	r2,zero
  803e0c:	1007883a 	mov	r3,r2
  803e10:	e0bffc17 	ldw	r2,-16(fp)
  803e14:	10c03e05 	stb	r3,248(r2)
  d->_cg25 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803e18:	e0bffc17 	ldw	r2,-16(fp)
  803e1c:	10801ec3 	ldbu	r2,123(r2)
  803e20:	10803fcc 	andi	r2,r2,255
  803e24:	1080201c 	xori	r2,r2,128
  803e28:	10bfe004 	addi	r2,r2,-128
  803e2c:	10000c1e 	bne	r2,zero,803e60 <logic+0x2c90>
  803e30:	e0bffc17 	ldw	r2,-16(fp)
  803e34:	10801f03 	ldbu	r2,124(r2)
  803e38:	10803fcc 	andi	r2,r2,255
  803e3c:	1080201c 	xori	r2,r2,128
  803e40:	10bfe004 	addi	r2,r2,-128
  803e44:	1000061e 	bne	r2,zero,803e60 <logic+0x2c90>
  803e48:	e0bffc17 	ldw	r2,-16(fp)
  803e4c:	10801f43 	ldbu	r2,125(r2)
  803e50:	10803fcc 	andi	r2,r2,255
  803e54:	1080201c 	xori	r2,r2,128
  803e58:	10bfe004 	addi	r2,r2,-128
  803e5c:	10000226 	beq	r2,zero,803e68 <logic+0x2c98>
  803e60:	00800044 	movi	r2,1
  803e64:	00000106 	br	803e6c <logic+0x2c9c>
  803e68:	0005883a 	mov	r2,zero
  803e6c:	1007883a 	mov	r3,r2
  803e70:	e0bffc17 	ldw	r2,-16(fp)
  803e74:	10c03485 	stb	r3,210(r2)
  d->_g32_e3 = d->_g19 && !d->_cg22 || d->_g43_e4 && !d->_cg25;
  803e78:	e0bffc17 	ldw	r2,-16(fp)
  803e7c:	10802243 	ldbu	r2,137(r2)
  803e80:	10803fcc 	andi	r2,r2,255
  803e84:	1080201c 	xori	r2,r2,128
  803e88:	10bfe004 	addi	r2,r2,-128
  803e8c:	10000626 	beq	r2,zero,803ea8 <logic+0x2cd8>
  803e90:	e0bffc17 	ldw	r2,-16(fp)
  803e94:	10803443 	ldbu	r2,209(r2)
  803e98:	10803fcc 	andi	r2,r2,255
  803e9c:	1080201c 	xori	r2,r2,128
  803ea0:	10bfe004 	addi	r2,r2,-128
  803ea4:	10000c26 	beq	r2,zero,803ed8 <logic+0x2d08>
  803ea8:	e0bffc17 	ldw	r2,-16(fp)
  803eac:	10803e03 	ldbu	r2,248(r2)
  803eb0:	10803fcc 	andi	r2,r2,255
  803eb4:	1080201c 	xori	r2,r2,128
  803eb8:	10bfe004 	addi	r2,r2,-128
  803ebc:	10000826 	beq	r2,zero,803ee0 <logic+0x2d10>
  803ec0:	e0bffc17 	ldw	r2,-16(fp)
  803ec4:	10803483 	ldbu	r2,210(r2)
  803ec8:	10803fcc 	andi	r2,r2,255
  803ecc:	1080201c 	xori	r2,r2,128
  803ed0:	10bfe004 	addi	r2,r2,-128
  803ed4:	1000021e 	bne	r2,zero,803ee0 <logic+0x2d10>
  803ed8:	00800044 	movi	r2,1
  803edc:	00000106 	br	803ee4 <logic+0x2d14>
  803ee0:	0005883a 	mov	r2,zero
  803ee4:	1007883a 	mov	r3,r2
  803ee8:	e0bffc17 	ldw	r2,-16(fp)
  803eec:	10c03dc5 	stb	r3,247(r2)
  d->_cg26 = d->URI_Clock < d->URI;
  803ef0:	e0bffc17 	ldw	r2,-16(fp)
  803ef4:	14000c17 	ldw	r16,48(r2)
  803ef8:	14400d17 	ldw	r17,52(r2)
  803efc:	e0bffc17 	ldw	r2,-16(fp)
  803f00:	10800517 	ldw	r2,20(r2)
  803f04:	1009883a 	mov	r4,r2
  803f08:	08068dc0 	call	8068dc <__floatsidf>
  803f0c:	1009883a 	mov	r4,r2
  803f10:	180b883a 	mov	r5,r3
  803f14:	04800044 	movi	r18,1
  803f18:	200d883a 	mov	r6,r4
  803f1c:	280f883a 	mov	r7,r5
  803f20:	8009883a 	mov	r4,r16
  803f24:	880b883a 	mov	r5,r17
  803f28:	0805eec0 	call	805eec <__ledf2>
  803f2c:	10000116 	blt	r2,zero,803f34 <logic+0x2d64>
  803f30:	0025883a 	mov	r18,zero
  803f34:	9007883a 	mov	r3,r18
  803f38:	e0bffc17 	ldw	r2,-16(fp)
  803f3c:	10c034c5 	stb	r3,211(r2)
  d->_g95 = d->_g52 && d->_cg26;
  803f40:	e0bffc17 	ldw	r2,-16(fp)
  803f44:	10802843 	ldbu	r2,161(r2)
  803f48:	10803fcc 	andi	r2,r2,255
  803f4c:	1080201c 	xori	r2,r2,128
  803f50:	10bfe004 	addi	r2,r2,-128
  803f54:	10000826 	beq	r2,zero,803f78 <logic+0x2da8>
  803f58:	e0bffc17 	ldw	r2,-16(fp)
  803f5c:	108034c3 	ldbu	r2,211(r2)
  803f60:	10803fcc 	andi	r2,r2,255
  803f64:	1080201c 	xori	r2,r2,128
  803f68:	10bfe004 	addi	r2,r2,-128
  803f6c:	10000226 	beq	r2,zero,803f78 <logic+0x2da8>
  803f70:	00800044 	movi	r2,1
  803f74:	00000106 	br	803f7c <logic+0x2dac>
  803f78:	0005883a 	mov	r2,zero
  803f7c:	1007883a 	mov	r3,r2
  803f80:	e0bffc17 	ldw	r2,-16(fp)
  803f84:	10c02ec5 	stb	r3,187(r2)
  if (d->_g95) {
  803f88:	e0bffc17 	ldw	r2,-16(fp)
  803f8c:	10802ec3 	ldbu	r2,187(r2)
  803f90:	10803fcc 	andi	r2,r2,255
  803f94:	1080201c 	xori	r2,r2,128
  803f98:	10bfe004 	addi	r2,r2,-128
  803f9c:	10003426 	beq	r2,zero,804070 <logic+0x2ea0>
    d->sleepT = (d->sleepT < (d->URI - d->URI_Clock)) ? d->sleepT : (d->URI - d->URI_Clock);
  803fa0:	e0bffc17 	ldw	r2,-16(fp)
  803fa4:	14001b17 	ldw	r16,108(r2)
  803fa8:	14401c17 	ldw	r17,112(r2)
  803fac:	e0bffc17 	ldw	r2,-16(fp)
  803fb0:	10800517 	ldw	r2,20(r2)
  803fb4:	1009883a 	mov	r4,r2
  803fb8:	08068dc0 	call	8068dc <__floatsidf>
  803fbc:	1011883a 	mov	r8,r2
  803fc0:	1813883a 	mov	r9,r3
  803fc4:	e13ffc17 	ldw	r4,-16(fp)
  803fc8:	20800c17 	ldw	r2,48(r4)
  803fcc:	20c00d17 	ldw	r3,52(r4)
  803fd0:	100d883a 	mov	r6,r2
  803fd4:	180f883a 	mov	r7,r3
  803fd8:	4009883a 	mov	r4,r8
  803fdc:	480b883a 	mov	r5,r9
  803fe0:	0805fe00 	call	805fe0 <__subdf3>
  803fe4:	1009883a 	mov	r4,r2
  803fe8:	180b883a 	mov	r5,r3
  803fec:	2005883a 	mov	r2,r4
  803ff0:	2807883a 	mov	r3,r5
  803ff4:	100d883a 	mov	r6,r2
  803ff8:	180f883a 	mov	r7,r3
  803ffc:	8009883a 	mov	r4,r16
  804000:	880b883a 	mov	r5,r17
  804004:	0805eec0 	call	805eec <__ledf2>
  804008:	1000040e 	bge	r2,zero,80401c <logic+0x2e4c>
  80400c:	e13ffc17 	ldw	r4,-16(fp)
  804010:	20801b17 	ldw	r2,108(r4)
  804014:	20c01c17 	ldw	r3,112(r4)
  804018:	00001206 	br	804064 <logic+0x2e94>
  80401c:	e0bffc17 	ldw	r2,-16(fp)
  804020:	10800517 	ldw	r2,20(r2)
  804024:	1009883a 	mov	r4,r2
  804028:	08068dc0 	call	8068dc <__floatsidf>
  80402c:	1011883a 	mov	r8,r2
  804030:	1813883a 	mov	r9,r3
  804034:	e13ffc17 	ldw	r4,-16(fp)
  804038:	20800c17 	ldw	r2,48(r4)
  80403c:	20c00d17 	ldw	r3,52(r4)
  804040:	100d883a 	mov	r6,r2
  804044:	180f883a 	mov	r7,r3
  804048:	4009883a 	mov	r4,r8
  80404c:	480b883a 	mov	r5,r9
  804050:	0805fe00 	call	805fe0 <__subdf3>
  804054:	1009883a 	mov	r4,r2
  804058:	180b883a 	mov	r5,r3
  80405c:	2005883a 	mov	r2,r4
  804060:	2807883a 	mov	r3,r5
  804064:	e13ffc17 	ldw	r4,-16(fp)
  804068:	20801b15 	stw	r2,108(r4)
  80406c:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg27 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804070:	e0bffc17 	ldw	r2,-16(fp)
  804074:	10801ec3 	ldbu	r2,123(r2)
  804078:	10803fcc 	andi	r2,r2,255
  80407c:	1080201c 	xori	r2,r2,128
  804080:	10bfe004 	addi	r2,r2,-128
  804084:	10000c1e 	bne	r2,zero,8040b8 <logic+0x2ee8>
  804088:	e0bffc17 	ldw	r2,-16(fp)
  80408c:	10801f03 	ldbu	r2,124(r2)
  804090:	10803fcc 	andi	r2,r2,255
  804094:	1080201c 	xori	r2,r2,128
  804098:	10bfe004 	addi	r2,r2,-128
  80409c:	1000061e 	bne	r2,zero,8040b8 <logic+0x2ee8>
  8040a0:	e0bffc17 	ldw	r2,-16(fp)
  8040a4:	10801f43 	ldbu	r2,125(r2)
  8040a8:	10803fcc 	andi	r2,r2,255
  8040ac:	1080201c 	xori	r2,r2,128
  8040b0:	10bfe004 	addi	r2,r2,-128
  8040b4:	10000226 	beq	r2,zero,8040c0 <logic+0x2ef0>
  8040b8:	00800044 	movi	r2,1
  8040bc:	00000106 	br	8040c4 <logic+0x2ef4>
  8040c0:	0005883a 	mov	r2,zero
  8040c4:	1007883a 	mov	r3,r2
  8040c8:	e0bffc17 	ldw	r2,-16(fp)
  8040cc:	10c03505 	stb	r3,212(r2)
  d->_g93 = d->_g95 && !d->_cg27 || d->_g29 && !d->_cg31;
  8040d0:	e0bffc17 	ldw	r2,-16(fp)
  8040d4:	10802ec3 	ldbu	r2,187(r2)
  8040d8:	10803fcc 	andi	r2,r2,255
  8040dc:	1080201c 	xori	r2,r2,128
  8040e0:	10bfe004 	addi	r2,r2,-128
  8040e4:	10000626 	beq	r2,zero,804100 <logic+0x2f30>
  8040e8:	e0bffc17 	ldw	r2,-16(fp)
  8040ec:	10803503 	ldbu	r2,212(r2)
  8040f0:	10803fcc 	andi	r2,r2,255
  8040f4:	1080201c 	xori	r2,r2,128
  8040f8:	10bfe004 	addi	r2,r2,-128
  8040fc:	10000c26 	beq	r2,zero,804130 <logic+0x2f60>
  804100:	e0bffc17 	ldw	r2,-16(fp)
  804104:	10802403 	ldbu	r2,144(r2)
  804108:	10803fcc 	andi	r2,r2,255
  80410c:	1080201c 	xori	r2,r2,128
  804110:	10bfe004 	addi	r2,r2,-128
  804114:	10000826 	beq	r2,zero,804138 <logic+0x2f68>
  804118:	e0bffc17 	ldw	r2,-16(fp)
  80411c:	10803543 	ldbu	r2,213(r2)
  804120:	10803fcc 	andi	r2,r2,255
  804124:	1080201c 	xori	r2,r2,128
  804128:	10bfe004 	addi	r2,r2,-128
  80412c:	1000021e 	bne	r2,zero,804138 <logic+0x2f68>
  804130:	00800044 	movi	r2,1
  804134:	00000106 	br	80413c <logic+0x2f6c>
  804138:	0005883a 	mov	r2,zero
  80413c:	1007883a 	mov	r3,r2
  804140:	e0bffc17 	ldw	r2,-16(fp)
  804144:	10c02e45 	stb	r3,185(r2)
  d->_g98 = d->_g52 && !d->_cg26;
  804148:	e0bffc17 	ldw	r2,-16(fp)
  80414c:	10802843 	ldbu	r2,161(r2)
  804150:	10803fcc 	andi	r2,r2,255
  804154:	1080201c 	xori	r2,r2,128
  804158:	10bfe004 	addi	r2,r2,-128
  80415c:	10000826 	beq	r2,zero,804180 <logic+0x2fb0>
  804160:	e0bffc17 	ldw	r2,-16(fp)
  804164:	108034c3 	ldbu	r2,211(r2)
  804168:	10803fcc 	andi	r2,r2,255
  80416c:	1080201c 	xori	r2,r2,128
  804170:	10bfe004 	addi	r2,r2,-128
  804174:	1000021e 	bne	r2,zero,804180 <logic+0x2fb0>
  804178:	00800044 	movi	r2,1
  80417c:	00000106 	br	804184 <logic+0x2fb4>
  804180:	0005883a 	mov	r2,zero
  804184:	1007883a 	mov	r3,r2
  804188:	e0bffc17 	ldw	r2,-16(fp)
  80418c:	10c02f85 	stb	r3,190(r2)
  d->_cg36 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804190:	e0bffc17 	ldw	r2,-16(fp)
  804194:	10801ec3 	ldbu	r2,123(r2)
  804198:	10803fcc 	andi	r2,r2,255
  80419c:	1080201c 	xori	r2,r2,128
  8041a0:	10bfe004 	addi	r2,r2,-128
  8041a4:	10000c1e 	bne	r2,zero,8041d8 <logic+0x3008>
  8041a8:	e0bffc17 	ldw	r2,-16(fp)
  8041ac:	10801f03 	ldbu	r2,124(r2)
  8041b0:	10803fcc 	andi	r2,r2,255
  8041b4:	1080201c 	xori	r2,r2,128
  8041b8:	10bfe004 	addi	r2,r2,-128
  8041bc:	1000061e 	bne	r2,zero,8041d8 <logic+0x3008>
  8041c0:	e0bffc17 	ldw	r2,-16(fp)
  8041c4:	10801f43 	ldbu	r2,125(r2)
  8041c8:	10803fcc 	andi	r2,r2,255
  8041cc:	1080201c 	xori	r2,r2,128
  8041d0:	10bfe004 	addi	r2,r2,-128
  8041d4:	10000226 	beq	r2,zero,8041e0 <logic+0x3010>
  8041d8:	00800044 	movi	r2,1
  8041dc:	00000106 	br	8041e4 <logic+0x3014>
  8041e0:	0005883a 	mov	r2,zero
  8041e4:	1007883a 	mov	r3,r2
  8041e8:	e0bffc17 	ldw	r2,-16(fp)
  8041ec:	10c03605 	stb	r3,216(r2)
  d->_g5 = d->_g30 && !d->_cg33 || d->_g98 && !d->_cg36;
  8041f0:	e0bffc17 	ldw	r2,-16(fp)
  8041f4:	10802443 	ldbu	r2,145(r2)
  8041f8:	10803fcc 	andi	r2,r2,255
  8041fc:	1080201c 	xori	r2,r2,128
  804200:	10bfe004 	addi	r2,r2,-128
  804204:	10000626 	beq	r2,zero,804220 <logic+0x3050>
  804208:	e0bffc17 	ldw	r2,-16(fp)
  80420c:	108035c3 	ldbu	r2,215(r2)
  804210:	10803fcc 	andi	r2,r2,255
  804214:	1080201c 	xori	r2,r2,128
  804218:	10bfe004 	addi	r2,r2,-128
  80421c:	10000c26 	beq	r2,zero,804250 <logic+0x3080>
  804220:	e0bffc17 	ldw	r2,-16(fp)
  804224:	10802f83 	ldbu	r2,190(r2)
  804228:	10803fcc 	andi	r2,r2,255
  80422c:	1080201c 	xori	r2,r2,128
  804230:	10bfe004 	addi	r2,r2,-128
  804234:	10000826 	beq	r2,zero,804258 <logic+0x3088>
  804238:	e0bffc17 	ldw	r2,-16(fp)
  80423c:	10803603 	ldbu	r2,216(r2)
  804240:	10803fcc 	andi	r2,r2,255
  804244:	1080201c 	xori	r2,r2,128
  804248:	10bfe004 	addi	r2,r2,-128
  80424c:	1000021e 	bne	r2,zero,804258 <logic+0x3088>
  804250:	00800044 	movi	r2,1
  804254:	00000106 	br	80425c <logic+0x308c>
  804258:	0005883a 	mov	r2,zero
  80425c:	1007883a 	mov	r3,r2
  804260:	e0bffc17 	ldw	r2,-16(fp)
  804264:	10c01fc5 	stb	r3,127(r2)
  d->_cg37 = d->AVI_Clock < d->AVI;
  804268:	e0bffc17 	ldw	r2,-16(fp)
  80426c:	14001017 	ldw	r16,64(r2)
  804270:	14401117 	ldw	r17,68(r2)
  804274:	e0bffc17 	ldw	r2,-16(fp)
  804278:	10800017 	ldw	r2,0(r2)
  80427c:	1009883a 	mov	r4,r2
  804280:	08068dc0 	call	8068dc <__floatsidf>
  804284:	1009883a 	mov	r4,r2
  804288:	180b883a 	mov	r5,r3
  80428c:	04800044 	movi	r18,1
  804290:	200d883a 	mov	r6,r4
  804294:	280f883a 	mov	r7,r5
  804298:	8009883a 	mov	r4,r16
  80429c:	880b883a 	mov	r5,r17
  8042a0:	0805eec0 	call	805eec <__ledf2>
  8042a4:	10000116 	blt	r2,zero,8042ac <logic+0x30dc>
  8042a8:	0025883a 	mov	r18,zero
  8042ac:	9007883a 	mov	r3,r18
  8042b0:	e0bffc17 	ldw	r2,-16(fp)
  8042b4:	10c03645 	stb	r3,217(r2)
  d->_g9 = d->_g52 && d->_cg37;
  8042b8:	e0bffc17 	ldw	r2,-16(fp)
  8042bc:	10802843 	ldbu	r2,161(r2)
  8042c0:	10803fcc 	andi	r2,r2,255
  8042c4:	1080201c 	xori	r2,r2,128
  8042c8:	10bfe004 	addi	r2,r2,-128
  8042cc:	10000826 	beq	r2,zero,8042f0 <logic+0x3120>
  8042d0:	e0bffc17 	ldw	r2,-16(fp)
  8042d4:	10803643 	ldbu	r2,217(r2)
  8042d8:	10803fcc 	andi	r2,r2,255
  8042dc:	1080201c 	xori	r2,r2,128
  8042e0:	10bfe004 	addi	r2,r2,-128
  8042e4:	10000226 	beq	r2,zero,8042f0 <logic+0x3120>
  8042e8:	00800044 	movi	r2,1
  8042ec:	00000106 	br	8042f4 <logic+0x3124>
  8042f0:	0005883a 	mov	r2,zero
  8042f4:	1007883a 	mov	r3,r2
  8042f8:	e0bffc17 	ldw	r2,-16(fp)
  8042fc:	10c02085 	stb	r3,130(r2)
  if (d->_g9) {
  804300:	e0bffc17 	ldw	r2,-16(fp)
  804304:	10802083 	ldbu	r2,130(r2)
  804308:	10803fcc 	andi	r2,r2,255
  80430c:	1080201c 	xori	r2,r2,128
  804310:	10bfe004 	addi	r2,r2,-128
  804314:	10003426 	beq	r2,zero,8043e8 <logic+0x3218>
    d->sleepT = (d->sleepT < (d->AVI - d->AVI_Clock)) ? d->sleepT : (d->AVI - d->AVI_Clock);
  804318:	e0bffc17 	ldw	r2,-16(fp)
  80431c:	14001b17 	ldw	r16,108(r2)
  804320:	14401c17 	ldw	r17,112(r2)
  804324:	e0bffc17 	ldw	r2,-16(fp)
  804328:	10800017 	ldw	r2,0(r2)
  80432c:	1009883a 	mov	r4,r2
  804330:	08068dc0 	call	8068dc <__floatsidf>
  804334:	1011883a 	mov	r8,r2
  804338:	1813883a 	mov	r9,r3
  80433c:	e13ffc17 	ldw	r4,-16(fp)
  804340:	20801017 	ldw	r2,64(r4)
  804344:	20c01117 	ldw	r3,68(r4)
  804348:	100d883a 	mov	r6,r2
  80434c:	180f883a 	mov	r7,r3
  804350:	4009883a 	mov	r4,r8
  804354:	480b883a 	mov	r5,r9
  804358:	0805fe00 	call	805fe0 <__subdf3>
  80435c:	1009883a 	mov	r4,r2
  804360:	180b883a 	mov	r5,r3
  804364:	2005883a 	mov	r2,r4
  804368:	2807883a 	mov	r3,r5
  80436c:	100d883a 	mov	r6,r2
  804370:	180f883a 	mov	r7,r3
  804374:	8009883a 	mov	r4,r16
  804378:	880b883a 	mov	r5,r17
  80437c:	0805eec0 	call	805eec <__ledf2>
  804380:	1000040e 	bge	r2,zero,804394 <logic+0x31c4>
  804384:	e13ffc17 	ldw	r4,-16(fp)
  804388:	20801b17 	ldw	r2,108(r4)
  80438c:	20c01c17 	ldw	r3,112(r4)
  804390:	00001206 	br	8043dc <logic+0x320c>
  804394:	e0bffc17 	ldw	r2,-16(fp)
  804398:	10800017 	ldw	r2,0(r2)
  80439c:	1009883a 	mov	r4,r2
  8043a0:	08068dc0 	call	8068dc <__floatsidf>
  8043a4:	1011883a 	mov	r8,r2
  8043a8:	1813883a 	mov	r9,r3
  8043ac:	e13ffc17 	ldw	r4,-16(fp)
  8043b0:	20801017 	ldw	r2,64(r4)
  8043b4:	20c01117 	ldw	r3,68(r4)
  8043b8:	100d883a 	mov	r6,r2
  8043bc:	180f883a 	mov	r7,r3
  8043c0:	4009883a 	mov	r4,r8
  8043c4:	480b883a 	mov	r5,r9
  8043c8:	0805fe00 	call	805fe0 <__subdf3>
  8043cc:	1009883a 	mov	r4,r2
  8043d0:	180b883a 	mov	r5,r3
  8043d4:	2005883a 	mov	r2,r4
  8043d8:	2807883a 	mov	r3,r5
  8043dc:	e13ffc17 	ldw	r4,-16(fp)
  8043e0:	20801b15 	stw	r2,108(r4)
  8043e4:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg38 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8043e8:	e0bffc17 	ldw	r2,-16(fp)
  8043ec:	10801ec3 	ldbu	r2,123(r2)
  8043f0:	10803fcc 	andi	r2,r2,255
  8043f4:	1080201c 	xori	r2,r2,128
  8043f8:	10bfe004 	addi	r2,r2,-128
  8043fc:	10000c1e 	bne	r2,zero,804430 <logic+0x3260>
  804400:	e0bffc17 	ldw	r2,-16(fp)
  804404:	10801f03 	ldbu	r2,124(r2)
  804408:	10803fcc 	andi	r2,r2,255
  80440c:	1080201c 	xori	r2,r2,128
  804410:	10bfe004 	addi	r2,r2,-128
  804414:	1000061e 	bne	r2,zero,804430 <logic+0x3260>
  804418:	e0bffc17 	ldw	r2,-16(fp)
  80441c:	10801f43 	ldbu	r2,125(r2)
  804420:	10803fcc 	andi	r2,r2,255
  804424:	1080201c 	xori	r2,r2,128
  804428:	10bfe004 	addi	r2,r2,-128
  80442c:	10000226 	beq	r2,zero,804438 <logic+0x3268>
  804430:	00800044 	movi	r2,1
  804434:	00000106 	br	80443c <logic+0x326c>
  804438:	0005883a 	mov	r2,zero
  80443c:	1007883a 	mov	r3,r2
  804440:	e0bffc17 	ldw	r2,-16(fp)
  804444:	10c03685 	stb	r3,218(r2)
  d->_g11 = d->_g9 && !d->_cg38 || d->_g46 && !d->_cg42;
  804448:	e0bffc17 	ldw	r2,-16(fp)
  80444c:	10802083 	ldbu	r2,130(r2)
  804450:	10803fcc 	andi	r2,r2,255
  804454:	1080201c 	xori	r2,r2,128
  804458:	10bfe004 	addi	r2,r2,-128
  80445c:	10000626 	beq	r2,zero,804478 <logic+0x32a8>
  804460:	e0bffc17 	ldw	r2,-16(fp)
  804464:	10803683 	ldbu	r2,218(r2)
  804468:	10803fcc 	andi	r2,r2,255
  80446c:	1080201c 	xori	r2,r2,128
  804470:	10bfe004 	addi	r2,r2,-128
  804474:	10000c26 	beq	r2,zero,8044a8 <logic+0x32d8>
  804478:	e0bffc17 	ldw	r2,-16(fp)
  80447c:	10802743 	ldbu	r2,157(r2)
  804480:	10803fcc 	andi	r2,r2,255
  804484:	1080201c 	xori	r2,r2,128
  804488:	10bfe004 	addi	r2,r2,-128
  80448c:	10000826 	beq	r2,zero,8044b0 <logic+0x32e0>
  804490:	e0bffc17 	ldw	r2,-16(fp)
  804494:	108036c3 	ldbu	r2,219(r2)
  804498:	10803fcc 	andi	r2,r2,255
  80449c:	1080201c 	xori	r2,r2,128
  8044a0:	10bfe004 	addi	r2,r2,-128
  8044a4:	1000021e 	bne	r2,zero,8044b0 <logic+0x32e0>
  8044a8:	00800044 	movi	r2,1
  8044ac:	00000106 	br	8044b4 <logic+0x32e4>
  8044b0:	0005883a 	mov	r2,zero
  8044b4:	1007883a 	mov	r3,r2
  8044b8:	e0bffc17 	ldw	r2,-16(fp)
  8044bc:	10c02105 	stb	r3,132(r2)
  d->_g14 = d->_g52 && !d->_cg37;
  8044c0:	e0bffc17 	ldw	r2,-16(fp)
  8044c4:	10802843 	ldbu	r2,161(r2)
  8044c8:	10803fcc 	andi	r2,r2,255
  8044cc:	1080201c 	xori	r2,r2,128
  8044d0:	10bfe004 	addi	r2,r2,-128
  8044d4:	10000826 	beq	r2,zero,8044f8 <logic+0x3328>
  8044d8:	e0bffc17 	ldw	r2,-16(fp)
  8044dc:	10803643 	ldbu	r2,217(r2)
  8044e0:	10803fcc 	andi	r2,r2,255
  8044e4:	1080201c 	xori	r2,r2,128
  8044e8:	10bfe004 	addi	r2,r2,-128
  8044ec:	1000021e 	bne	r2,zero,8044f8 <logic+0x3328>
  8044f0:	00800044 	movi	r2,1
  8044f4:	00000106 	br	8044fc <logic+0x332c>
  8044f8:	0005883a 	mov	r2,zero
  8044fc:	1007883a 	mov	r3,r2
  804500:	e0bffc17 	ldw	r2,-16(fp)
  804504:	10c02185 	stb	r3,134(r2)
  d->_cg47 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804508:	e0bffc17 	ldw	r2,-16(fp)
  80450c:	10801ec3 	ldbu	r2,123(r2)
  804510:	10803fcc 	andi	r2,r2,255
  804514:	1080201c 	xori	r2,r2,128
  804518:	10bfe004 	addi	r2,r2,-128
  80451c:	10000c1e 	bne	r2,zero,804550 <logic+0x3380>
  804520:	e0bffc17 	ldw	r2,-16(fp)
  804524:	10801f03 	ldbu	r2,124(r2)
  804528:	10803fcc 	andi	r2,r2,255
  80452c:	1080201c 	xori	r2,r2,128
  804530:	10bfe004 	addi	r2,r2,-128
  804534:	1000061e 	bne	r2,zero,804550 <logic+0x3380>
  804538:	e0bffc17 	ldw	r2,-16(fp)
  80453c:	10801f43 	ldbu	r2,125(r2)
  804540:	10803fcc 	andi	r2,r2,255
  804544:	1080201c 	xori	r2,r2,128
  804548:	10bfe004 	addi	r2,r2,-128
  80454c:	10000226 	beq	r2,zero,804558 <logic+0x3388>
  804550:	00800044 	movi	r2,1
  804554:	00000106 	br	80455c <logic+0x338c>
  804558:	0005883a 	mov	r2,zero
  80455c:	1007883a 	mov	r3,r2
  804560:	e0bffc17 	ldw	r2,-16(fp)
  804564:	10c03785 	stb	r3,222(r2)
  d->_g16 = d->_g41 && !d->_cg44 || d->_g14 && !d->_cg47;
  804568:	e0bffc17 	ldw	r2,-16(fp)
  80456c:	10802643 	ldbu	r2,153(r2)
  804570:	10803fcc 	andi	r2,r2,255
  804574:	1080201c 	xori	r2,r2,128
  804578:	10bfe004 	addi	r2,r2,-128
  80457c:	10000626 	beq	r2,zero,804598 <logic+0x33c8>
  804580:	e0bffc17 	ldw	r2,-16(fp)
  804584:	10803743 	ldbu	r2,221(r2)
  804588:	10803fcc 	andi	r2,r2,255
  80458c:	1080201c 	xori	r2,r2,128
  804590:	10bfe004 	addi	r2,r2,-128
  804594:	10000c26 	beq	r2,zero,8045c8 <logic+0x33f8>
  804598:	e0bffc17 	ldw	r2,-16(fp)
  80459c:	10802183 	ldbu	r2,134(r2)
  8045a0:	10803fcc 	andi	r2,r2,255
  8045a4:	1080201c 	xori	r2,r2,128
  8045a8:	10bfe004 	addi	r2,r2,-128
  8045ac:	10000826 	beq	r2,zero,8045d0 <logic+0x3400>
  8045b0:	e0bffc17 	ldw	r2,-16(fp)
  8045b4:	10803783 	ldbu	r2,222(r2)
  8045b8:	10803fcc 	andi	r2,r2,255
  8045bc:	1080201c 	xori	r2,r2,128
  8045c0:	10bfe004 	addi	r2,r2,-128
  8045c4:	1000021e 	bne	r2,zero,8045d0 <logic+0x3400>
  8045c8:	00800044 	movi	r2,1
  8045cc:	00000106 	br	8045d4 <logic+0x3404>
  8045d0:	0005883a 	mov	r2,zero
  8045d4:	1007883a 	mov	r3,r2
  8045d8:	e0bffc17 	ldw	r2,-16(fp)
  8045dc:	10c021c5 	stb	r3,135(r2)
  d->_g20 = d->_g52 || d->_g53 && !d->_cg55;
  8045e0:	e0bffc17 	ldw	r2,-16(fp)
  8045e4:	10802843 	ldbu	r2,161(r2)
  8045e8:	10803fcc 	andi	r2,r2,255
  8045ec:	1080201c 	xori	r2,r2,128
  8045f0:	10bfe004 	addi	r2,r2,-128
  8045f4:	10000c1e 	bne	r2,zero,804628 <logic+0x3458>
  8045f8:	e0bffc17 	ldw	r2,-16(fp)
  8045fc:	10802883 	ldbu	r2,162(r2)
  804600:	10803fcc 	andi	r2,r2,255
  804604:	1080201c 	xori	r2,r2,128
  804608:	10bfe004 	addi	r2,r2,-128
  80460c:	10000826 	beq	r2,zero,804630 <logic+0x3460>
  804610:	e0bffc17 	ldw	r2,-16(fp)
  804614:	108037c3 	ldbu	r2,223(r2)
  804618:	10803fcc 	andi	r2,r2,255
  80461c:	1080201c 	xori	r2,r2,128
  804620:	10bfe004 	addi	r2,r2,-128
  804624:	1000021e 	bne	r2,zero,804630 <logic+0x3460>
  804628:	00800044 	movi	r2,1
  80462c:	00000106 	br	804634 <logic+0x3464>
  804630:	0005883a 	mov	r2,zero
  804634:	1007883a 	mov	r3,r2
  804638:	e0bffc17 	ldw	r2,-16(fp)
  80463c:	10c02285 	stb	r3,138(r2)
  d->_g22 = d->_g56 && d->_cg57;
  804640:	e0bffc17 	ldw	r2,-16(fp)
  804644:	10802943 	ldbu	r2,165(r2)
  804648:	10803fcc 	andi	r2,r2,255
  80464c:	1080201c 	xori	r2,r2,128
  804650:	10bfe004 	addi	r2,r2,-128
  804654:	10000826 	beq	r2,zero,804678 <logic+0x34a8>
  804658:	e0bffc17 	ldw	r2,-16(fp)
  80465c:	10803883 	ldbu	r2,226(r2)
  804660:	10803fcc 	andi	r2,r2,255
  804664:	1080201c 	xori	r2,r2,128
  804668:	10bfe004 	addi	r2,r2,-128
  80466c:	10000226 	beq	r2,zero,804678 <logic+0x34a8>
  804670:	00800044 	movi	r2,1
  804674:	00000106 	br	80467c <logic+0x34ac>
  804678:	0005883a 	mov	r2,zero
  80467c:	1007883a 	mov	r3,r2
  804680:	e0bffc17 	ldw	r2,-16(fp)
  804684:	10c02305 	stb	r3,140(r2)
  if (d->_g22) {
  804688:	e0bffc17 	ldw	r2,-16(fp)
  80468c:	10802303 	ldbu	r2,140(r2)
  804690:	10803fcc 	andi	r2,r2,255
  804694:	1080201c 	xori	r2,r2,128
  804698:	10bfe004 	addi	r2,r2,-128
  80469c:	10000b26 	beq	r2,zero,8046cc <logic+0x34fc>
    d->VP |= 1;
  8046a0:	e0bffc17 	ldw	r2,-16(fp)
  8046a4:	10801dc3 	ldbu	r2,119(r2)
  8046a8:	10800054 	ori	r2,r2,1
  8046ac:	1007883a 	mov	r3,r2
  8046b0:	e0bffc17 	ldw	r2,-16(fp)
  8046b4:	10c01dc5 	stb	r3,119(r2)
    d->_taken_transitions[4] += 1;
  8046b8:	e0bffc17 	ldw	r2,-16(fp)
  8046bc:	10801617 	ldw	r2,88(r2)
  8046c0:	10c00044 	addi	r3,r2,1
  8046c4:	e0bffc17 	ldw	r2,-16(fp)
  8046c8:	10c01615 	stw	r3,88(r2)
  }
  d->_g25 = d->_g54 && !d->_cg97;
  8046cc:	e0bffc17 	ldw	r2,-16(fp)
  8046d0:	108028c3 	ldbu	r2,163(r2)
  8046d4:	10803fcc 	andi	r2,r2,255
  8046d8:	1080201c 	xori	r2,r2,128
  8046dc:	10bfe004 	addi	r2,r2,-128
  8046e0:	10000826 	beq	r2,zero,804704 <logic+0x3534>
  8046e4:	e0bffc17 	ldw	r2,-16(fp)
  8046e8:	10803d03 	ldbu	r2,244(r2)
  8046ec:	10803fcc 	andi	r2,r2,255
  8046f0:	1080201c 	xori	r2,r2,128
  8046f4:	10bfe004 	addi	r2,r2,-128
  8046f8:	1000021e 	bne	r2,zero,804704 <logic+0x3534>
  8046fc:	00800044 	movi	r2,1
  804700:	00000106 	br	804708 <logic+0x3538>
  804704:	0005883a 	mov	r2,zero
  804708:	1007883a 	mov	r3,r2
  80470c:	e0bffc17 	ldw	r2,-16(fp)
  804710:	10c02385 	stb	r3,142(r2)
  if (d->_g25) {
  804714:	e0bffc17 	ldw	r2,-16(fp)
  804718:	10802383 	ldbu	r2,142(r2)
  80471c:	10803fcc 	andi	r2,r2,255
  804720:	1080201c 	xori	r2,r2,128
  804724:	10bfe004 	addi	r2,r2,-128
  804728:	10000b26 	beq	r2,zero,804758 <logic+0x3588>
    d->VP |= 1;
  80472c:	e0bffc17 	ldw	r2,-16(fp)
  804730:	10801dc3 	ldbu	r2,119(r2)
  804734:	10800054 	ori	r2,r2,1
  804738:	1007883a 	mov	r3,r2
  80473c:	e0bffc17 	ldw	r2,-16(fp)
  804740:	10c01dc5 	stb	r3,119(r2)
    d->_taken_transitions[6] += 1;
  804744:	e0bffc17 	ldw	r2,-16(fp)
  804748:	10801817 	ldw	r2,96(r2)
  80474c:	10c00044 	addi	r3,r2,1
  804750:	e0bffc17 	ldw	r2,-16(fp)
  804754:	10c01815 	stw	r3,96(r2)
  }
  d->_g27 = d->_g22 || d->_g25;
  804758:	e0bffc17 	ldw	r2,-16(fp)
  80475c:	10802303 	ldbu	r2,140(r2)
  804760:	10803fcc 	andi	r2,r2,255
  804764:	1080201c 	xori	r2,r2,128
  804768:	10bfe004 	addi	r2,r2,-128
  80476c:	1000061e 	bne	r2,zero,804788 <logic+0x35b8>
  804770:	e0bffc17 	ldw	r2,-16(fp)
  804774:	10802383 	ldbu	r2,142(r2)
  804778:	10803fcc 	andi	r2,r2,255
  80477c:	1080201c 	xori	r2,r2,128
  804780:	10bfe004 	addi	r2,r2,-128
  804784:	10000226 	beq	r2,zero,804790 <logic+0x35c0>
  804788:	00800044 	movi	r2,1
  80478c:	00000106 	br	804794 <logic+0x35c4>
  804790:	0005883a 	mov	r2,zero
  804794:	1007883a 	mov	r3,r2
  804798:	e0bffc17 	ldw	r2,-16(fp)
  80479c:	10c023c5 	stb	r3,143(r2)
  if (d->_g27) {
  8047a0:	e0bffc17 	ldw	r2,-16(fp)
  8047a4:	108023c3 	ldbu	r2,143(r2)
  8047a8:	10803fcc 	andi	r2,r2,255
  8047ac:	1080201c 	xori	r2,r2,128
  8047b0:	10bfe004 	addi	r2,r2,-128
  8047b4:	10001426 	beq	r2,zero,804808 <logic+0x3638>
    d->PVARP_Clock = 0;
  8047b8:	e0bffc17 	ldw	r2,-16(fp)
  8047bc:	10000e15 	stw	zero,56(r2)
  8047c0:	10000f15 	stw	zero,60(r2)
    d->VRP_Clock = 0;
  8047c4:	e0bffc17 	ldw	r2,-16(fp)
  8047c8:	10000615 	stw	zero,24(r2)
  8047cc:	10000715 	stw	zero,28(r2)
    d->AEI_Clock = 0;
  8047d0:	e0bffc17 	ldw	r2,-16(fp)
  8047d4:	10000815 	stw	zero,32(r2)
  8047d8:	10000915 	stw	zero,36(r2)
    d->URI_Clock = 0;
  8047dc:	e0bffc17 	ldw	r2,-16(fp)
  8047e0:	10000c15 	stw	zero,48(r2)
  8047e4:	10000d15 	stw	zero,52(r2)
    d->LRI_Clock = 0;
  8047e8:	e0bffc17 	ldw	r2,-16(fp)
  8047ec:	10000a15 	stw	zero,40(r2)
  8047f0:	10000b15 	stw	zero,44(r2)
    d->_taken_transitions[3] += 1;
  8047f4:	e0bffc17 	ldw	r2,-16(fp)
  8047f8:	10801517 	ldw	r2,84(r2)
  8047fc:	10c00044 	addi	r3,r2,1
  804800:	e0bffc17 	ldw	r2,-16(fp)
  804804:	10c01515 	stw	r3,84(r2)
  }
  d->_g31 = d->_g87_e3 && !d->_cg94;
  804808:	e0bffc17 	ldw	r2,-16(fp)
  80480c:	10803f03 	ldbu	r2,252(r2)
  804810:	10803fcc 	andi	r2,r2,255
  804814:	1080201c 	xori	r2,r2,128
  804818:	10bfe004 	addi	r2,r2,-128
  80481c:	10000826 	beq	r2,zero,804840 <logic+0x3670>
  804820:	e0bffc17 	ldw	r2,-16(fp)
  804824:	10803cc3 	ldbu	r2,243(r2)
  804828:	10803fcc 	andi	r2,r2,255
  80482c:	1080201c 	xori	r2,r2,128
  804830:	10bfe004 	addi	r2,r2,-128
  804834:	1000021e 	bne	r2,zero,804840 <logic+0x3670>
  804838:	00800044 	movi	r2,1
  80483c:	00000106 	br	804844 <logic+0x3674>
  804840:	0005883a 	mov	r2,zero
  804844:	1007883a 	mov	r3,r2
  804848:	e0bffc17 	ldw	r2,-16(fp)
  80484c:	10c02485 	stb	r3,146(r2)
  if (d->_g31) {
  804850:	e0bffc17 	ldw	r2,-16(fp)
  804854:	10802483 	ldbu	r2,146(r2)
  804858:	10803fcc 	andi	r2,r2,255
  80485c:	1080201c 	xori	r2,r2,128
  804860:	10bfe004 	addi	r2,r2,-128
  804864:	10000526 	beq	r2,zero,80487c <logic+0x36ac>
    d->_taken_transitions[2] += 1;
  804868:	e0bffc17 	ldw	r2,-16(fp)
  80486c:	10801417 	ldw	r2,80(r2)
  804870:	10c00044 	addi	r3,r2,1
  804874:	e0bffc17 	ldw	r2,-16(fp)
  804878:	10c01415 	stw	r3,80(r2)
  }
  d->_g33 = d->_g27 || d->_g31;
  80487c:	e0bffc17 	ldw	r2,-16(fp)
  804880:	108023c3 	ldbu	r2,143(r2)
  804884:	10803fcc 	andi	r2,r2,255
  804888:	1080201c 	xori	r2,r2,128
  80488c:	10bfe004 	addi	r2,r2,-128
  804890:	1000061e 	bne	r2,zero,8048ac <logic+0x36dc>
  804894:	e0bffc17 	ldw	r2,-16(fp)
  804898:	10802483 	ldbu	r2,146(r2)
  80489c:	10803fcc 	andi	r2,r2,255
  8048a0:	1080201c 	xori	r2,r2,128
  8048a4:	10bfe004 	addi	r2,r2,-128
  8048a8:	10000226 	beq	r2,zero,8048b4 <logic+0x36e4>
  8048ac:	00800044 	movi	r2,1
  8048b0:	00000106 	br	8048b8 <logic+0x36e8>
  8048b4:	0005883a 	mov	r2,zero
  8048b8:	1007883a 	mov	r3,r2
  8048bc:	e0bffc17 	ldw	r2,-16(fp)
  8048c0:	10c02505 	stb	r3,148(r2)
  if (d->_g33) {
  8048c4:	e0bffc17 	ldw	r2,-16(fp)
  8048c8:	10802503 	ldbu	r2,148(r2)
  8048cc:	10803fcc 	andi	r2,r2,255
  8048d0:	1080201c 	xori	r2,r2,128
  8048d4:	10bfe004 	addi	r2,r2,-128
  8048d8:	10000626 	beq	r2,zero,8048f4 <logic+0x3724>
    d->_Pacemaker_local__Atrig = 0;
  8048dc:	e0bffc17 	ldw	r2,-16(fp)
  8048e0:	10001e05 	stb	zero,120(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  8048e4:	e0bffc17 	ldw	r2,-16(fp)
  8048e8:	10001e45 	stb	zero,121(r2)
    d->_Pacemaker_local__Atrig2 = 0;
  8048ec:	e0bffc17 	ldw	r2,-16(fp)
  8048f0:	10001e85 	stb	zero,122(r2)
  }
  d->_cg61 = d->AEI_Clock < d->AEI;
  8048f4:	e0bffc17 	ldw	r2,-16(fp)
  8048f8:	14000817 	ldw	r16,32(r2)
  8048fc:	14400917 	ldw	r17,36(r2)
  804900:	e0bffc17 	ldw	r2,-16(fp)
  804904:	10800117 	ldw	r2,4(r2)
  804908:	1009883a 	mov	r4,r2
  80490c:	08068dc0 	call	8068dc <__floatsidf>
  804910:	1009883a 	mov	r4,r2
  804914:	180b883a 	mov	r5,r3
  804918:	04800044 	movi	r18,1
  80491c:	200d883a 	mov	r6,r4
  804920:	280f883a 	mov	r7,r5
  804924:	8009883a 	mov	r4,r16
  804928:	880b883a 	mov	r5,r17
  80492c:	0805eec0 	call	805eec <__ledf2>
  804930:	10000116 	blt	r2,zero,804938 <logic+0x3768>
  804934:	0025883a 	mov	r18,zero
  804938:	9007883a 	mov	r3,r18
  80493c:	e0bffc17 	ldw	r2,-16(fp)
  804940:	10c038c5 	stb	r3,227(r2)
  d->_g36 = d->_g33 && d->_cg61;
  804944:	e0bffc17 	ldw	r2,-16(fp)
  804948:	10802503 	ldbu	r2,148(r2)
  80494c:	10803fcc 	andi	r2,r2,255
  804950:	1080201c 	xori	r2,r2,128
  804954:	10bfe004 	addi	r2,r2,-128
  804958:	10000826 	beq	r2,zero,80497c <logic+0x37ac>
  80495c:	e0bffc17 	ldw	r2,-16(fp)
  804960:	108038c3 	ldbu	r2,227(r2)
  804964:	10803fcc 	andi	r2,r2,255
  804968:	1080201c 	xori	r2,r2,128
  80496c:	10bfe004 	addi	r2,r2,-128
  804970:	10000226 	beq	r2,zero,80497c <logic+0x37ac>
  804974:	00800044 	movi	r2,1
  804978:	00000106 	br	804980 <logic+0x37b0>
  80497c:	0005883a 	mov	r2,zero
  804980:	1007883a 	mov	r3,r2
  804984:	e0bffc17 	ldw	r2,-16(fp)
  804988:	10c02585 	stb	r3,150(r2)
  if (d->_g36) {
  80498c:	e0bffc17 	ldw	r2,-16(fp)
  804990:	10802583 	ldbu	r2,150(r2)
  804994:	10803fcc 	andi	r2,r2,255
  804998:	1080201c 	xori	r2,r2,128
  80499c:	10bfe004 	addi	r2,r2,-128
  8049a0:	10003426 	beq	r2,zero,804a74 <logic+0x38a4>
    d->sleepT = (d->sleepT < (d->AEI - d->AEI_Clock)) ? d->sleepT : (d->AEI - d->AEI_Clock);
  8049a4:	e0bffc17 	ldw	r2,-16(fp)
  8049a8:	14001b17 	ldw	r16,108(r2)
  8049ac:	14401c17 	ldw	r17,112(r2)
  8049b0:	e0bffc17 	ldw	r2,-16(fp)
  8049b4:	10800117 	ldw	r2,4(r2)
  8049b8:	1009883a 	mov	r4,r2
  8049bc:	08068dc0 	call	8068dc <__floatsidf>
  8049c0:	1011883a 	mov	r8,r2
  8049c4:	1813883a 	mov	r9,r3
  8049c8:	e13ffc17 	ldw	r4,-16(fp)
  8049cc:	20800817 	ldw	r2,32(r4)
  8049d0:	20c00917 	ldw	r3,36(r4)
  8049d4:	100d883a 	mov	r6,r2
  8049d8:	180f883a 	mov	r7,r3
  8049dc:	4009883a 	mov	r4,r8
  8049e0:	480b883a 	mov	r5,r9
  8049e4:	0805fe00 	call	805fe0 <__subdf3>
  8049e8:	1009883a 	mov	r4,r2
  8049ec:	180b883a 	mov	r5,r3
  8049f0:	2005883a 	mov	r2,r4
  8049f4:	2807883a 	mov	r3,r5
  8049f8:	100d883a 	mov	r6,r2
  8049fc:	180f883a 	mov	r7,r3
  804a00:	8009883a 	mov	r4,r16
  804a04:	880b883a 	mov	r5,r17
  804a08:	0805eec0 	call	805eec <__ledf2>
  804a0c:	1000040e 	bge	r2,zero,804a20 <logic+0x3850>
  804a10:	e13ffc17 	ldw	r4,-16(fp)
  804a14:	20801b17 	ldw	r2,108(r4)
  804a18:	20c01c17 	ldw	r3,112(r4)
  804a1c:	00001206 	br	804a68 <logic+0x3898>
  804a20:	e0bffc17 	ldw	r2,-16(fp)
  804a24:	10800117 	ldw	r2,4(r2)
  804a28:	1009883a 	mov	r4,r2
  804a2c:	08068dc0 	call	8068dc <__floatsidf>
  804a30:	1011883a 	mov	r8,r2
  804a34:	1813883a 	mov	r9,r3
  804a38:	e13ffc17 	ldw	r4,-16(fp)
  804a3c:	20800817 	ldw	r2,32(r4)
  804a40:	20c00917 	ldw	r3,36(r4)
  804a44:	100d883a 	mov	r6,r2
  804a48:	180f883a 	mov	r7,r3
  804a4c:	4009883a 	mov	r4,r8
  804a50:	480b883a 	mov	r5,r9
  804a54:	0805fe00 	call	805fe0 <__subdf3>
  804a58:	1009883a 	mov	r4,r2
  804a5c:	180b883a 	mov	r5,r3
  804a60:	2005883a 	mov	r2,r4
  804a64:	2807883a 	mov	r3,r5
  804a68:	e13ffc17 	ldw	r4,-16(fp)
  804a6c:	20801b15 	stw	r2,108(r4)
  804a70:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg62 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804a74:	e0bffc17 	ldw	r2,-16(fp)
  804a78:	10801e03 	ldbu	r2,120(r2)
  804a7c:	10803fcc 	andi	r2,r2,255
  804a80:	1080201c 	xori	r2,r2,128
  804a84:	10bfe004 	addi	r2,r2,-128
  804a88:	10000c1e 	bne	r2,zero,804abc <logic+0x38ec>
  804a8c:	e0bffc17 	ldw	r2,-16(fp)
  804a90:	10801e43 	ldbu	r2,121(r2)
  804a94:	10803fcc 	andi	r2,r2,255
  804a98:	1080201c 	xori	r2,r2,128
  804a9c:	10bfe004 	addi	r2,r2,-128
  804aa0:	1000061e 	bne	r2,zero,804abc <logic+0x38ec>
  804aa4:	e0bffc17 	ldw	r2,-16(fp)
  804aa8:	10801e83 	ldbu	r2,122(r2)
  804aac:	10803fcc 	andi	r2,r2,255
  804ab0:	1080201c 	xori	r2,r2,128
  804ab4:	10bfe004 	addi	r2,r2,-128
  804ab8:	10000226 	beq	r2,zero,804ac4 <logic+0x38f4>
  804abc:	00800044 	movi	r2,1
  804ac0:	00000106 	br	804ac8 <logic+0x38f8>
  804ac4:	0005883a 	mov	r2,zero
  804ac8:	1007883a 	mov	r3,r2
  804acc:	e0bffc17 	ldw	r2,-16(fp)
  804ad0:	10c03905 	stb	r3,228(r2)
  d->_g38 = d->_g36 && !d->_cg62 || d->_g64 && !d->_cg66;
  804ad4:	e0bffc17 	ldw	r2,-16(fp)
  804ad8:	10802583 	ldbu	r2,150(r2)
  804adc:	10803fcc 	andi	r2,r2,255
  804ae0:	1080201c 	xori	r2,r2,128
  804ae4:	10bfe004 	addi	r2,r2,-128
  804ae8:	10000626 	beq	r2,zero,804b04 <logic+0x3934>
  804aec:	e0bffc17 	ldw	r2,-16(fp)
  804af0:	10803903 	ldbu	r2,228(r2)
  804af4:	10803fcc 	andi	r2,r2,255
  804af8:	1080201c 	xori	r2,r2,128
  804afc:	10bfe004 	addi	r2,r2,-128
  804b00:	10000c26 	beq	r2,zero,804b34 <logic+0x3964>
  804b04:	e0bffc17 	ldw	r2,-16(fp)
  804b08:	10802a43 	ldbu	r2,169(r2)
  804b0c:	10803fcc 	andi	r2,r2,255
  804b10:	1080201c 	xori	r2,r2,128
  804b14:	10bfe004 	addi	r2,r2,-128
  804b18:	10000826 	beq	r2,zero,804b3c <logic+0x396c>
  804b1c:	e0bffc17 	ldw	r2,-16(fp)
  804b20:	10803943 	ldbu	r2,229(r2)
  804b24:	10803fcc 	andi	r2,r2,255
  804b28:	1080201c 	xori	r2,r2,128
  804b2c:	10bfe004 	addi	r2,r2,-128
  804b30:	1000021e 	bne	r2,zero,804b3c <logic+0x396c>
  804b34:	00800044 	movi	r2,1
  804b38:	00000106 	br	804b40 <logic+0x3970>
  804b3c:	0005883a 	mov	r2,zero
  804b40:	1007883a 	mov	r3,r2
  804b44:	e0bffc17 	ldw	r2,-16(fp)
  804b48:	10c025c5 	stb	r3,151(r2)
  d->_g42 = d->_g33 && !d->_cg61;
  804b4c:	e0bffc17 	ldw	r2,-16(fp)
  804b50:	10802503 	ldbu	r2,148(r2)
  804b54:	10803fcc 	andi	r2,r2,255
  804b58:	1080201c 	xori	r2,r2,128
  804b5c:	10bfe004 	addi	r2,r2,-128
  804b60:	10000826 	beq	r2,zero,804b84 <logic+0x39b4>
  804b64:	e0bffc17 	ldw	r2,-16(fp)
  804b68:	108038c3 	ldbu	r2,227(r2)
  804b6c:	10803fcc 	andi	r2,r2,255
  804b70:	1080201c 	xori	r2,r2,128
  804b74:	10bfe004 	addi	r2,r2,-128
  804b78:	1000021e 	bne	r2,zero,804b84 <logic+0x39b4>
  804b7c:	00800044 	movi	r2,1
  804b80:	00000106 	br	804b88 <logic+0x39b8>
  804b84:	0005883a 	mov	r2,zero
  804b88:	1007883a 	mov	r3,r2
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10c02685 	stb	r3,154(r2)
  d->_cg71 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804b94:	e0bffc17 	ldw	r2,-16(fp)
  804b98:	10801e03 	ldbu	r2,120(r2)
  804b9c:	10803fcc 	andi	r2,r2,255
  804ba0:	1080201c 	xori	r2,r2,128
  804ba4:	10bfe004 	addi	r2,r2,-128
  804ba8:	10000c1e 	bne	r2,zero,804bdc <logic+0x3a0c>
  804bac:	e0bffc17 	ldw	r2,-16(fp)
  804bb0:	10801e43 	ldbu	r2,121(r2)
  804bb4:	10803fcc 	andi	r2,r2,255
  804bb8:	1080201c 	xori	r2,r2,128
  804bbc:	10bfe004 	addi	r2,r2,-128
  804bc0:	1000061e 	bne	r2,zero,804bdc <logic+0x3a0c>
  804bc4:	e0bffc17 	ldw	r2,-16(fp)
  804bc8:	10801e83 	ldbu	r2,122(r2)
  804bcc:	10803fcc 	andi	r2,r2,255
  804bd0:	1080201c 	xori	r2,r2,128
  804bd4:	10bfe004 	addi	r2,r2,-128
  804bd8:	10000226 	beq	r2,zero,804be4 <logic+0x3a14>
  804bdc:	00800044 	movi	r2,1
  804be0:	00000106 	br	804be8 <logic+0x3a18>
  804be4:	0005883a 	mov	r2,zero
  804be8:	1007883a 	mov	r3,r2
  804bec:	e0bffc17 	ldw	r2,-16(fp)
  804bf0:	10c03a05 	stb	r3,232(r2)
  d->_g44 = d->_g65 && !d->_cg68 || d->_g42 && !d->_cg71;
  804bf4:	e0bffc17 	ldw	r2,-16(fp)
  804bf8:	10802a83 	ldbu	r2,170(r2)
  804bfc:	10803fcc 	andi	r2,r2,255
  804c00:	1080201c 	xori	r2,r2,128
  804c04:	10bfe004 	addi	r2,r2,-128
  804c08:	10000626 	beq	r2,zero,804c24 <logic+0x3a54>
  804c0c:	e0bffc17 	ldw	r2,-16(fp)
  804c10:	108039c3 	ldbu	r2,231(r2)
  804c14:	10803fcc 	andi	r2,r2,255
  804c18:	1080201c 	xori	r2,r2,128
  804c1c:	10bfe004 	addi	r2,r2,-128
  804c20:	10000c26 	beq	r2,zero,804c54 <logic+0x3a84>
  804c24:	e0bffc17 	ldw	r2,-16(fp)
  804c28:	10802683 	ldbu	r2,154(r2)
  804c2c:	10803fcc 	andi	r2,r2,255
  804c30:	1080201c 	xori	r2,r2,128
  804c34:	10bfe004 	addi	r2,r2,-128
  804c38:	10000826 	beq	r2,zero,804c5c <logic+0x3a8c>
  804c3c:	e0bffc17 	ldw	r2,-16(fp)
  804c40:	10803a03 	ldbu	r2,232(r2)
  804c44:	10803fcc 	andi	r2,r2,255
  804c48:	1080201c 	xori	r2,r2,128
  804c4c:	10bfe004 	addi	r2,r2,-128
  804c50:	1000021e 	bne	r2,zero,804c5c <logic+0x3a8c>
  804c54:	00800044 	movi	r2,1
  804c58:	00000106 	br	804c60 <logic+0x3a90>
  804c5c:	0005883a 	mov	r2,zero
  804c60:	1007883a 	mov	r3,r2
  804c64:	e0bffc17 	ldw	r2,-16(fp)
  804c68:	10c02705 	stb	r3,156(r2)
  d->_cg72 = d->PVARP_Clock < d->PVARP;
  804c6c:	e0bffc17 	ldw	r2,-16(fp)
  804c70:	14000e17 	ldw	r16,56(r2)
  804c74:	14400f17 	ldw	r17,60(r2)
  804c78:	e0bffc17 	ldw	r2,-16(fp)
  804c7c:	10800217 	ldw	r2,8(r2)
  804c80:	1009883a 	mov	r4,r2
  804c84:	08068dc0 	call	8068dc <__floatsidf>
  804c88:	1009883a 	mov	r4,r2
  804c8c:	180b883a 	mov	r5,r3
  804c90:	04800044 	movi	r18,1
  804c94:	200d883a 	mov	r6,r4
  804c98:	280f883a 	mov	r7,r5
  804c9c:	8009883a 	mov	r4,r16
  804ca0:	880b883a 	mov	r5,r17
  804ca4:	0805eec0 	call	805eec <__ledf2>
  804ca8:	10000116 	blt	r2,zero,804cb0 <logic+0x3ae0>
  804cac:	0025883a 	mov	r18,zero
  804cb0:	9007883a 	mov	r3,r18
  804cb4:	e0bffc17 	ldw	r2,-16(fp)
  804cb8:	10c03a45 	stb	r3,233(r2)
  d->_g47 = d->_g33 && d->_cg72;
  804cbc:	e0bffc17 	ldw	r2,-16(fp)
  804cc0:	10802503 	ldbu	r2,148(r2)
  804cc4:	10803fcc 	andi	r2,r2,255
  804cc8:	1080201c 	xori	r2,r2,128
  804ccc:	10bfe004 	addi	r2,r2,-128
  804cd0:	10000826 	beq	r2,zero,804cf4 <logic+0x3b24>
  804cd4:	e0bffc17 	ldw	r2,-16(fp)
  804cd8:	10803a43 	ldbu	r2,233(r2)
  804cdc:	10803fcc 	andi	r2,r2,255
  804ce0:	1080201c 	xori	r2,r2,128
  804ce4:	10bfe004 	addi	r2,r2,-128
  804ce8:	10000226 	beq	r2,zero,804cf4 <logic+0x3b24>
  804cec:	00800044 	movi	r2,1
  804cf0:	00000106 	br	804cf8 <logic+0x3b28>
  804cf4:	0005883a 	mov	r2,zero
  804cf8:	1007883a 	mov	r3,r2
  804cfc:	e0bffc17 	ldw	r2,-16(fp)
  804d00:	10c02785 	stb	r3,158(r2)
  if (d->_g47) {
  804d04:	e0bffc17 	ldw	r2,-16(fp)
  804d08:	10802783 	ldbu	r2,158(r2)
  804d0c:	10803fcc 	andi	r2,r2,255
  804d10:	1080201c 	xori	r2,r2,128
  804d14:	10bfe004 	addi	r2,r2,-128
  804d18:	10003426 	beq	r2,zero,804dec <logic+0x3c1c>
    d->sleepT = (d->sleepT < (d->PVARP - d->PVARP_Clock)) ? d->sleepT : (d->PVARP - d->PVARP_Clock);
  804d1c:	e0bffc17 	ldw	r2,-16(fp)
  804d20:	14001b17 	ldw	r16,108(r2)
  804d24:	14401c17 	ldw	r17,112(r2)
  804d28:	e0bffc17 	ldw	r2,-16(fp)
  804d2c:	10800217 	ldw	r2,8(r2)
  804d30:	1009883a 	mov	r4,r2
  804d34:	08068dc0 	call	8068dc <__floatsidf>
  804d38:	1011883a 	mov	r8,r2
  804d3c:	1813883a 	mov	r9,r3
  804d40:	e13ffc17 	ldw	r4,-16(fp)
  804d44:	20800e17 	ldw	r2,56(r4)
  804d48:	20c00f17 	ldw	r3,60(r4)
  804d4c:	100d883a 	mov	r6,r2
  804d50:	180f883a 	mov	r7,r3
  804d54:	4009883a 	mov	r4,r8
  804d58:	480b883a 	mov	r5,r9
  804d5c:	0805fe00 	call	805fe0 <__subdf3>
  804d60:	1009883a 	mov	r4,r2
  804d64:	180b883a 	mov	r5,r3
  804d68:	2005883a 	mov	r2,r4
  804d6c:	2807883a 	mov	r3,r5
  804d70:	100d883a 	mov	r6,r2
  804d74:	180f883a 	mov	r7,r3
  804d78:	8009883a 	mov	r4,r16
  804d7c:	880b883a 	mov	r5,r17
  804d80:	0805eec0 	call	805eec <__ledf2>
  804d84:	1000040e 	bge	r2,zero,804d98 <logic+0x3bc8>
  804d88:	e13ffc17 	ldw	r4,-16(fp)
  804d8c:	20801b17 	ldw	r2,108(r4)
  804d90:	20c01c17 	ldw	r3,112(r4)
  804d94:	00001206 	br	804de0 <logic+0x3c10>
  804d98:	e0bffc17 	ldw	r2,-16(fp)
  804d9c:	10800217 	ldw	r2,8(r2)
  804da0:	1009883a 	mov	r4,r2
  804da4:	08068dc0 	call	8068dc <__floatsidf>
  804da8:	1011883a 	mov	r8,r2
  804dac:	1813883a 	mov	r9,r3
  804db0:	e13ffc17 	ldw	r4,-16(fp)
  804db4:	20800e17 	ldw	r2,56(r4)
  804db8:	20c00f17 	ldw	r3,60(r4)
  804dbc:	100d883a 	mov	r6,r2
  804dc0:	180f883a 	mov	r7,r3
  804dc4:	4009883a 	mov	r4,r8
  804dc8:	480b883a 	mov	r5,r9
  804dcc:	0805fe00 	call	805fe0 <__subdf3>
  804dd0:	1009883a 	mov	r4,r2
  804dd4:	180b883a 	mov	r5,r3
  804dd8:	2005883a 	mov	r2,r4
  804ddc:	2807883a 	mov	r3,r5
  804de0:	e13ffc17 	ldw	r4,-16(fp)
  804de4:	20801b15 	stw	r2,108(r4)
  804de8:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg73 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804dec:	e0bffc17 	ldw	r2,-16(fp)
  804df0:	10801e03 	ldbu	r2,120(r2)
  804df4:	10803fcc 	andi	r2,r2,255
  804df8:	1080201c 	xori	r2,r2,128
  804dfc:	10bfe004 	addi	r2,r2,-128
  804e00:	10000c1e 	bne	r2,zero,804e34 <logic+0x3c64>
  804e04:	e0bffc17 	ldw	r2,-16(fp)
  804e08:	10801e43 	ldbu	r2,121(r2)
  804e0c:	10803fcc 	andi	r2,r2,255
  804e10:	1080201c 	xori	r2,r2,128
  804e14:	10bfe004 	addi	r2,r2,-128
  804e18:	1000061e 	bne	r2,zero,804e34 <logic+0x3c64>
  804e1c:	e0bffc17 	ldw	r2,-16(fp)
  804e20:	10801e83 	ldbu	r2,122(r2)
  804e24:	10803fcc 	andi	r2,r2,255
  804e28:	1080201c 	xori	r2,r2,128
  804e2c:	10bfe004 	addi	r2,r2,-128
  804e30:	10000226 	beq	r2,zero,804e3c <logic+0x3c6c>
  804e34:	00800044 	movi	r2,1
  804e38:	00000106 	br	804e40 <logic+0x3c70>
  804e3c:	0005883a 	mov	r2,zero
  804e40:	1007883a 	mov	r3,r2
  804e44:	e0bffc17 	ldw	r2,-16(fp)
  804e48:	10c03a85 	stb	r3,234(r2)
  d->_g55 = d->_g47 && !d->_cg73 || d->_g75 && !d->_cg77;
  804e4c:	e0bffc17 	ldw	r2,-16(fp)
  804e50:	10802783 	ldbu	r2,158(r2)
  804e54:	10803fcc 	andi	r2,r2,255
  804e58:	1080201c 	xori	r2,r2,128
  804e5c:	10bfe004 	addi	r2,r2,-128
  804e60:	10000626 	beq	r2,zero,804e7c <logic+0x3cac>
  804e64:	e0bffc17 	ldw	r2,-16(fp)
  804e68:	10803a83 	ldbu	r2,234(r2)
  804e6c:	10803fcc 	andi	r2,r2,255
  804e70:	1080201c 	xori	r2,r2,128
  804e74:	10bfe004 	addi	r2,r2,-128
  804e78:	10000c26 	beq	r2,zero,804eac <logic+0x3cdc>
  804e7c:	e0bffc17 	ldw	r2,-16(fp)
  804e80:	10802b83 	ldbu	r2,174(r2)
  804e84:	10803fcc 	andi	r2,r2,255
  804e88:	1080201c 	xori	r2,r2,128
  804e8c:	10bfe004 	addi	r2,r2,-128
  804e90:	10000826 	beq	r2,zero,804eb4 <logic+0x3ce4>
  804e94:	e0bffc17 	ldw	r2,-16(fp)
  804e98:	10803ac3 	ldbu	r2,235(r2)
  804e9c:	10803fcc 	andi	r2,r2,255
  804ea0:	1080201c 	xori	r2,r2,128
  804ea4:	10bfe004 	addi	r2,r2,-128
  804ea8:	1000021e 	bne	r2,zero,804eb4 <logic+0x3ce4>
  804eac:	00800044 	movi	r2,1
  804eb0:	00000106 	br	804eb8 <logic+0x3ce8>
  804eb4:	0005883a 	mov	r2,zero
  804eb8:	1007883a 	mov	r3,r2
  804ebc:	e0bffc17 	ldw	r2,-16(fp)
  804ec0:	10c02905 	stb	r3,164(r2)
  d->_g3 = d->_g33 && !d->_cg72;
  804ec4:	e0bffc17 	ldw	r2,-16(fp)
  804ec8:	10802503 	ldbu	r2,148(r2)
  804ecc:	10803fcc 	andi	r2,r2,255
  804ed0:	1080201c 	xori	r2,r2,128
  804ed4:	10bfe004 	addi	r2,r2,-128
  804ed8:	10000826 	beq	r2,zero,804efc <logic+0x3d2c>
  804edc:	e0bffc17 	ldw	r2,-16(fp)
  804ee0:	10803a43 	ldbu	r2,233(r2)
  804ee4:	10803fcc 	andi	r2,r2,255
  804ee8:	1080201c 	xori	r2,r2,128
  804eec:	10bfe004 	addi	r2,r2,-128
  804ef0:	1000021e 	bne	r2,zero,804efc <logic+0x3d2c>
  804ef4:	00800044 	movi	r2,1
  804ef8:	00000106 	br	804f00 <logic+0x3d30>
  804efc:	0005883a 	mov	r2,zero
  804f00:	1007883a 	mov	r3,r2
  804f04:	e0bffc17 	ldw	r2,-16(fp)
  804f08:	10c01f85 	stb	r3,126(r2)
  d->_cg82 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804f0c:	e0bffc17 	ldw	r2,-16(fp)
  804f10:	10801e03 	ldbu	r2,120(r2)
  804f14:	10803fcc 	andi	r2,r2,255
  804f18:	1080201c 	xori	r2,r2,128
  804f1c:	10bfe004 	addi	r2,r2,-128
  804f20:	10000c1e 	bne	r2,zero,804f54 <logic+0x3d84>
  804f24:	e0bffc17 	ldw	r2,-16(fp)
  804f28:	10801e43 	ldbu	r2,121(r2)
  804f2c:	10803fcc 	andi	r2,r2,255
  804f30:	1080201c 	xori	r2,r2,128
  804f34:	10bfe004 	addi	r2,r2,-128
  804f38:	1000061e 	bne	r2,zero,804f54 <logic+0x3d84>
  804f3c:	e0bffc17 	ldw	r2,-16(fp)
  804f40:	10801e83 	ldbu	r2,122(r2)
  804f44:	10803fcc 	andi	r2,r2,255
  804f48:	1080201c 	xori	r2,r2,128
  804f4c:	10bfe004 	addi	r2,r2,-128
  804f50:	10000226 	beq	r2,zero,804f5c <logic+0x3d8c>
  804f54:	00800044 	movi	r2,1
  804f58:	00000106 	br	804f60 <logic+0x3d90>
  804f5c:	0005883a 	mov	r2,zero
  804f60:	1007883a 	mov	r3,r2
  804f64:	e0bffc17 	ldw	r2,-16(fp)
  804f68:	10c03b85 	stb	r3,238(r2)
  d->_g57 = d->_g76 && !d->_cg79 || d->_g3 && !d->_cg82;
  804f6c:	e0bffc17 	ldw	r2,-16(fp)
  804f70:	10802bc3 	ldbu	r2,175(r2)
  804f74:	10803fcc 	andi	r2,r2,255
  804f78:	1080201c 	xori	r2,r2,128
  804f7c:	10bfe004 	addi	r2,r2,-128
  804f80:	10000626 	beq	r2,zero,804f9c <logic+0x3dcc>
  804f84:	e0bffc17 	ldw	r2,-16(fp)
  804f88:	10803b43 	ldbu	r2,237(r2)
  804f8c:	10803fcc 	andi	r2,r2,255
  804f90:	1080201c 	xori	r2,r2,128
  804f94:	10bfe004 	addi	r2,r2,-128
  804f98:	10000c26 	beq	r2,zero,804fcc <logic+0x3dfc>
  804f9c:	e0bffc17 	ldw	r2,-16(fp)
  804fa0:	10801f83 	ldbu	r2,126(r2)
  804fa4:	10803fcc 	andi	r2,r2,255
  804fa8:	1080201c 	xori	r2,r2,128
  804fac:	10bfe004 	addi	r2,r2,-128
  804fb0:	10000826 	beq	r2,zero,804fd4 <logic+0x3e04>
  804fb4:	e0bffc17 	ldw	r2,-16(fp)
  804fb8:	10803b83 	ldbu	r2,238(r2)
  804fbc:	10803fcc 	andi	r2,r2,255
  804fc0:	1080201c 	xori	r2,r2,128
  804fc4:	10bfe004 	addi	r2,r2,-128
  804fc8:	1000021e 	bne	r2,zero,804fd4 <logic+0x3e04>
  804fcc:	00800044 	movi	r2,1
  804fd0:	00000106 	br	804fd8 <logic+0x3e08>
  804fd4:	0005883a 	mov	r2,zero
  804fd8:	1007883a 	mov	r3,r2
  804fdc:	e0bffc17 	ldw	r2,-16(fp)
  804fe0:	10c02985 	stb	r3,166(r2)
  d->_g97 = d->_g33 || d->_g88 && !d->_cg90;
  804fe4:	e0bffc17 	ldw	r2,-16(fp)
  804fe8:	10802503 	ldbu	r2,148(r2)
  804fec:	10803fcc 	andi	r2,r2,255
  804ff0:	1080201c 	xori	r2,r2,128
  804ff4:	10bfe004 	addi	r2,r2,-128
  804ff8:	10000c1e 	bne	r2,zero,80502c <logic+0x3e5c>
  804ffc:	e0bffc17 	ldw	r2,-16(fp)
  805000:	10802d43 	ldbu	r2,181(r2)
  805004:	10803fcc 	andi	r2,r2,255
  805008:	1080201c 	xori	r2,r2,128
  80500c:	10bfe004 	addi	r2,r2,-128
  805010:	10000826 	beq	r2,zero,805034 <logic+0x3e64>
  805014:	e0bffc17 	ldw	r2,-16(fp)
  805018:	10803bc3 	ldbu	r2,239(r2)
  80501c:	10803fcc 	andi	r2,r2,255
  805020:	1080201c 	xori	r2,r2,128
  805024:	10bfe004 	addi	r2,r2,-128
  805028:	1000021e 	bne	r2,zero,805034 <logic+0x3e64>
  80502c:	00800044 	movi	r2,1
  805030:	00000106 	br	805038 <logic+0x3e68>
  805034:	0005883a 	mov	r2,zero
  805038:	1007883a 	mov	r3,r2
  80503c:	e0bffc17 	ldw	r2,-16(fp)
  805040:	10c02f45 	stb	r3,189(r2)
  d->_g99 = d->_GO || d->_g107;
  805044:	e0bffc17 	ldw	r2,-16(fp)
  805048:	10803183 	ldbu	r2,198(r2)
  80504c:	10803fcc 	andi	r2,r2,255
  805050:	1080201c 	xori	r2,r2,128
  805054:	10bfe004 	addi	r2,r2,-128
  805058:	1000061e 	bne	r2,zero,805074 <logic+0x3ea4>
  80505c:	e0bffc17 	ldw	r2,-16(fp)
  805060:	10803003 	ldbu	r2,192(r2)
  805064:	10803fcc 	andi	r2,r2,255
  805068:	1080201c 	xori	r2,r2,128
  80506c:	10bfe004 	addi	r2,r2,-128
  805070:	10000226 	beq	r2,zero,80507c <logic+0x3eac>
  805074:	00800044 	movi	r2,1
  805078:	00000106 	br	805080 <logic+0x3eb0>
  80507c:	0005883a 	mov	r2,zero
  805080:	1007883a 	mov	r3,r2
  805084:	e0bffc17 	ldw	r2,-16(fp)
  805088:	10c02fc5 	stb	r3,191(r2)
  d->_g58 = d->_GO || d->_g111;
  80508c:	e0bffc17 	ldw	r2,-16(fp)
  805090:	10803183 	ldbu	r2,198(r2)
  805094:	10803fcc 	andi	r2,r2,255
  805098:	1080201c 	xori	r2,r2,128
  80509c:	10bfe004 	addi	r2,r2,-128
  8050a0:	1000061e 	bne	r2,zero,8050bc <logic+0x3eec>
  8050a4:	e0bffc17 	ldw	r2,-16(fp)
  8050a8:	10803043 	ldbu	r2,193(r2)
  8050ac:	10803fcc 	andi	r2,r2,255
  8050b0:	1080201c 	xori	r2,r2,128
  8050b4:	10bfe004 	addi	r2,r2,-128
  8050b8:	10000226 	beq	r2,zero,8050c4 <logic+0x3ef4>
  8050bc:	00800044 	movi	r2,1
  8050c0:	00000106 	br	8050c8 <logic+0x3ef8>
  8050c4:	0005883a 	mov	r2,zero
  8050c8:	1007883a 	mov	r3,r2
  8050cc:	e0bffc17 	ldw	r2,-16(fp)
  8050d0:	10c029c5 	stb	r3,167(r2)
  d->_g94 = d->_GO || d->_g115;
  8050d4:	e0bffc17 	ldw	r2,-16(fp)
  8050d8:	10803183 	ldbu	r2,198(r2)
  8050dc:	10803fcc 	andi	r2,r2,255
  8050e0:	1080201c 	xori	r2,r2,128
  8050e4:	10bfe004 	addi	r2,r2,-128
  8050e8:	1000061e 	bne	r2,zero,805104 <logic+0x3f34>
  8050ec:	e0bffc17 	ldw	r2,-16(fp)
  8050f0:	10803083 	ldbu	r2,194(r2)
  8050f4:	10803fcc 	andi	r2,r2,255
  8050f8:	1080201c 	xori	r2,r2,128
  8050fc:	10bfe004 	addi	r2,r2,-128
  805100:	10000226 	beq	r2,zero,80510c <logic+0x3f3c>
  805104:	00800044 	movi	r2,1
  805108:	00000106 	br	805110 <logic+0x3f40>
  80510c:	0005883a 	mov	r2,zero
  805110:	1007883a 	mov	r3,r2
  805114:	e0bffc17 	ldw	r2,-16(fp)
  805118:	10c02e85 	stb	r3,186(r2)
  d->_g59 = d->_GO || d->_g92;
  80511c:	e0bffc17 	ldw	r2,-16(fp)
  805120:	10803183 	ldbu	r2,198(r2)
  805124:	10803fcc 	andi	r2,r2,255
  805128:	1080201c 	xori	r2,r2,128
  80512c:	10bfe004 	addi	r2,r2,-128
  805130:	1000061e 	bne	r2,zero,80514c <logic+0x3f7c>
  805134:	e0bffc17 	ldw	r2,-16(fp)
  805138:	10802e03 	ldbu	r2,184(r2)
  80513c:	10803fcc 	andi	r2,r2,255
  805140:	1080201c 	xori	r2,r2,128
  805144:	10bfe004 	addi	r2,r2,-128
  805148:	10000226 	beq	r2,zero,805154 <logic+0x3f84>
  80514c:	00800044 	movi	r2,1
  805150:	00000106 	br	805158 <logic+0x3f88>
  805154:	0005883a 	mov	r2,zero
  805158:	1007883a 	mov	r3,r2
  80515c:	e0bffc17 	ldw	r2,-16(fp)
  805160:	10c02a05 	stb	r3,168(r2)
  d->_g96 = d->_GO || d->_g123;
  805164:	e0bffc17 	ldw	r2,-16(fp)
  805168:	10803183 	ldbu	r2,198(r2)
  80516c:	10803fcc 	andi	r2,r2,255
  805170:	1080201c 	xori	r2,r2,128
  805174:	10bfe004 	addi	r2,r2,-128
  805178:	1000061e 	bne	r2,zero,805194 <logic+0x3fc4>
  80517c:	e0bffc17 	ldw	r2,-16(fp)
  805180:	108030c3 	ldbu	r2,195(r2)
  805184:	10803fcc 	andi	r2,r2,255
  805188:	1080201c 	xori	r2,r2,128
  80518c:	10bfe004 	addi	r2,r2,-128
  805190:	10000226 	beq	r2,zero,80519c <logic+0x3fcc>
  805194:	00800044 	movi	r2,1
  805198:	00000106 	br	8051a0 <logic+0x3fd0>
  80519c:	0005883a 	mov	r2,zero
  8051a0:	1007883a 	mov	r3,r2
  8051a4:	e0bffc17 	ldw	r2,-16(fp)
  8051a8:	10c02f05 	stb	r3,188(r2)
  d->_g66 = d->_GO || d->_g127;
  8051ac:	e0bffc17 	ldw	r2,-16(fp)
  8051b0:	10803183 	ldbu	r2,198(r2)
  8051b4:	10803fcc 	andi	r2,r2,255
  8051b8:	1080201c 	xori	r2,r2,128
  8051bc:	10bfe004 	addi	r2,r2,-128
  8051c0:	1000061e 	bne	r2,zero,8051dc <logic+0x400c>
  8051c4:	e0bffc17 	ldw	r2,-16(fp)
  8051c8:	10803103 	ldbu	r2,196(r2)
  8051cc:	10803fcc 	andi	r2,r2,255
  8051d0:	1080201c 	xori	r2,r2,128
  8051d4:	10bfe004 	addi	r2,r2,-128
  8051d8:	10000226 	beq	r2,zero,8051e4 <logic+0x4014>
  8051dc:	00800044 	movi	r2,1
  8051e0:	00000106 	br	8051e8 <logic+0x4018>
  8051e4:	0005883a 	mov	r2,zero
  8051e8:	1007883a 	mov	r3,r2
  8051ec:	e0bffc17 	ldw	r2,-16(fp)
  8051f0:	10c02ac5 	stb	r3,171(r2)
}
  8051f4:	0001883a 	nop
  8051f8:	e6fffd04 	addi	sp,fp,-12
  8051fc:	dfc00417 	ldw	ra,16(sp)
  805200:	df000317 	ldw	fp,12(sp)
  805204:	dc800217 	ldw	r18,8(sp)
  805208:	dc400117 	ldw	r17,4(sp)
  80520c:	dc000017 	ldw	r16,0(sp)
  805210:	dec00504 	addi	sp,sp,20
  805214:	f800283a 	ret

00805218 <reset>:

void reset(TickData* d) {
  805218:	defffe04 	addi	sp,sp,-8
  80521c:	df000115 	stw	fp,4(sp)
  805220:	df000104 	addi	fp,sp,4
  805224:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  805228:	e0bfff17 	ldw	r2,-4(fp)
  80522c:	00c00044 	movi	r3,1
  805230:	10c03185 	stb	r3,198(r2)
  d->_TERM = 0;
  805234:	e0bfff17 	ldw	r2,-4(fp)
  805238:	10003f45 	stb	zero,253(r2)
  d->AVI = AVI_VALUE;
  80523c:	e0bfff17 	ldw	r2,-4(fp)
  805240:	00c04b04 	movi	r3,300
  805244:	10c00015 	stw	r3,0(r2)
  d->AEI = AEI_VALUE;
  805248:	e0bfff17 	ldw	r2,-4(fp)
  80524c:	00c0c804 	movi	r3,800
  805250:	10c00115 	stw	r3,4(r2)
  d->PVARP = PVARP_VALUE;
  805254:	e0bfff17 	ldw	r2,-4(fp)
  805258:	00c00c84 	movi	r3,50
  80525c:	10c00215 	stw	r3,8(r2)
  d->VRP = VRP_VALUE;
  805260:	e0bfff17 	ldw	r2,-4(fp)
  805264:	00c02584 	movi	r3,150
  805268:	10c00315 	stw	r3,12(r2)
  d->LRI = LRI_VALUE;
  80526c:	e0bfff17 	ldw	r2,-4(fp)
  805270:	00c0ed84 	movi	r3,950
  805274:	10c00415 	stw	r3,16(r2)
  d->URI = URI_VALUE;
  805278:	e0bfff17 	ldw	r2,-4(fp)
  80527c:	00c0e104 	movi	r3,900
  805280:	10c00515 	stw	r3,20(r2)
  d->VRP_Clock = 0;
  805284:	e0bfff17 	ldw	r2,-4(fp)
  805288:	10000615 	stw	zero,24(r2)
  80528c:	10000715 	stw	zero,28(r2)
  d->AEI_Clock = 0;
  805290:	e0bfff17 	ldw	r2,-4(fp)
  805294:	10000815 	stw	zero,32(r2)
  805298:	10000915 	stw	zero,36(r2)
  d->LRI_Clock = 0;
  80529c:	e0bfff17 	ldw	r2,-4(fp)
  8052a0:	10000a15 	stw	zero,40(r2)
  8052a4:	10000b15 	stw	zero,44(r2)
  d->URI_Clock = 0;
  8052a8:	e0bfff17 	ldw	r2,-4(fp)
  8052ac:	10000c15 	stw	zero,48(r2)
  8052b0:	10000d15 	stw	zero,52(r2)
  d->PVARP_Clock = 0;
  8052b4:	e0bfff17 	ldw	r2,-4(fp)
  8052b8:	10000e15 	stw	zero,56(r2)
  8052bc:	10000f15 	stw	zero,60(r2)
  d->AVI_Clock = 0;
  8052c0:	e0bfff17 	ldw	r2,-4(fp)
  8052c4:	10001015 	stw	zero,64(r2)
  8052c8:	10001115 	stw	zero,68(r2)
  d->deltaT = 0.0;
  8052cc:	e0bfff17 	ldw	r2,-4(fp)
  8052d0:	10001915 	stw	zero,100(r2)
  8052d4:	10001a15 	stw	zero,104(r2)
  d->sleepT = 0.0;
  8052d8:	e0bfff17 	ldw	r2,-4(fp)
  8052dc:	10001b15 	stw	zero,108(r2)
  8052e0:	10001c15 	stw	zero,112(r2)
  d->_taken_transitions[0] = 0;
  8052e4:	e0bfff17 	ldw	r2,-4(fp)
  8052e8:	10001215 	stw	zero,72(r2)
  d->_taken_transitions[1] = 0;
  8052ec:	e0bfff17 	ldw	r2,-4(fp)
  8052f0:	10001315 	stw	zero,76(r2)
  d->_taken_transitions[2] = 0;
  8052f4:	e0bfff17 	ldw	r2,-4(fp)
  8052f8:	10001415 	stw	zero,80(r2)
  d->_taken_transitions[3] = 0;
  8052fc:	e0bfff17 	ldw	r2,-4(fp)
  805300:	10001515 	stw	zero,84(r2)
  d->_taken_transitions[4] = 0;
  805304:	e0bfff17 	ldw	r2,-4(fp)
  805308:	10001615 	stw	zero,88(r2)
  d->_taken_transitions[5] = 0;
  80530c:	e0bfff17 	ldw	r2,-4(fp)
  805310:	10001715 	stw	zero,92(r2)
  d->_taken_transitions[6] = 0;
  805314:	e0bfff17 	ldw	r2,-4(fp)
  805318:	10001815 	stw	zero,96(r2)
  d->_pg66 = 0;
  80531c:	e0bfff17 	ldw	r2,-4(fp)
  805320:	10003f85 	stb	zero,254(r2)
  d->_pg44 = 0;
  805324:	e0bfff17 	ldw	r2,-4(fp)
  805328:	10003fc5 	stb	zero,255(r2)
  d->_pg38 = 0;
  80532c:	e0bfff17 	ldw	r2,-4(fp)
  805330:	10004005 	stb	zero,256(r2)
  d->_pg96 = 0;
  805334:	e0bfff17 	ldw	r2,-4(fp)
  805338:	10004045 	stb	zero,257(r2)
  d->_pg97 = 0;
  80533c:	e0bfff17 	ldw	r2,-4(fp)
  805340:	10004085 	stb	zero,258(r2)
  d->_pg58 = 0;
  805344:	e0bfff17 	ldw	r2,-4(fp)
  805348:	100040c5 	stb	zero,259(r2)
  d->_pg57 = 0;
  80534c:	e0bfff17 	ldw	r2,-4(fp)
  805350:	10004105 	stb	zero,260(r2)
  d->_pg55 = 0;
  805354:	e0bfff17 	ldw	r2,-4(fp)
  805358:	10004145 	stb	zero,261(r2)
  d->_pg67_e1 = 0;
  80535c:	e0bfff17 	ldw	r2,-4(fp)
  805360:	10004185 	stb	zero,262(r2)
  d->_pg32 = 0;
  805364:	e0bfff17 	ldw	r2,-4(fp)
  805368:	100041c5 	stb	zero,263(r2)
  d->_pg10 = 0;
  80536c:	e0bfff17 	ldw	r2,-4(fp)
  805370:	10004205 	stb	zero,264(r2)
  d->_pg59 = 0;
  805374:	e0bfff17 	ldw	r2,-4(fp)
  805378:	10004245 	stb	zero,265(r2)
  d->_pg20 = 0;
  80537c:	e0bfff17 	ldw	r2,-4(fp)
  805380:	10004285 	stb	zero,266(r2)
  d->_pg99 = 0;
  805384:	e0bfff17 	ldw	r2,-4(fp)
  805388:	100042c5 	stb	zero,267(r2)
  d->_pg94 = 0;
  80538c:	e0bfff17 	ldw	r2,-4(fp)
  805390:	10004305 	stb	zero,268(r2)
  d->_pg32_e3 = 0;
  805394:	e0bfff17 	ldw	r2,-4(fp)
  805398:	10004345 	stb	zero,269(r2)
  d->_pg21_e2 = 0;
  80539c:	e0bfff17 	ldw	r2,-4(fp)
  8053a0:	10004385 	stb	zero,270(r2)
  d->_pg5 = 0;
  8053a4:	e0bfff17 	ldw	r2,-4(fp)
  8053a8:	100043c5 	stb	zero,271(r2)
  d->_pg93 = 0;
  8053ac:	e0bfff17 	ldw	r2,-4(fp)
  8053b0:	10004405 	stb	zero,272(r2)
  d->_pg16 = 0;
  8053b4:	e0bfff17 	ldw	r2,-4(fp)
  8053b8:	10004445 	stb	zero,273(r2)
  d->_pg11 = 0;
  8053bc:	e0bfff17 	ldw	r2,-4(fp)
  8053c0:	10004485 	stb	zero,274(r2)
}
  8053c4:	0001883a 	nop
  8053c8:	e037883a 	mov	sp,fp
  8053cc:	df000017 	ldw	fp,0(sp)
  8053d0:	dec00104 	addi	sp,sp,4
  8053d4:	f800283a 	ret

008053d8 <tick>:

void tick(TickData* d) {
  8053d8:	defffd04 	addi	sp,sp,-12
  8053dc:	dfc00215 	stw	ra,8(sp)
  8053e0:	df000115 	stw	fp,4(sp)
  8053e4:	df000104 	addi	fp,sp,4
  8053e8:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  8053ec:	e13fff17 	ldw	r4,-4(fp)
  8053f0:	08011d00 	call	8011d0 <logic>

  d->_pg66 = d->_g66;
  8053f4:	e0bfff17 	ldw	r2,-4(fp)
  8053f8:	10c02ac3 	ldbu	r3,171(r2)
  8053fc:	e0bfff17 	ldw	r2,-4(fp)
  805400:	10c03f85 	stb	r3,254(r2)
  d->_pg44 = d->_g44;
  805404:	e0bfff17 	ldw	r2,-4(fp)
  805408:	10c02703 	ldbu	r3,156(r2)
  80540c:	e0bfff17 	ldw	r2,-4(fp)
  805410:	10c03fc5 	stb	r3,255(r2)
  d->_pg38 = d->_g38;
  805414:	e0bfff17 	ldw	r2,-4(fp)
  805418:	10c025c3 	ldbu	r3,151(r2)
  80541c:	e0bfff17 	ldw	r2,-4(fp)
  805420:	10c04005 	stb	r3,256(r2)
  d->_pg96 = d->_g96;
  805424:	e0bfff17 	ldw	r2,-4(fp)
  805428:	10c02f03 	ldbu	r3,188(r2)
  80542c:	e0bfff17 	ldw	r2,-4(fp)
  805430:	10c04045 	stb	r3,257(r2)
  d->_pg97 = d->_g97;
  805434:	e0bfff17 	ldw	r2,-4(fp)
  805438:	10c02f43 	ldbu	r3,189(r2)
  80543c:	e0bfff17 	ldw	r2,-4(fp)
  805440:	10c04085 	stb	r3,258(r2)
  d->_pg58 = d->_g58;
  805444:	e0bfff17 	ldw	r2,-4(fp)
  805448:	10c029c3 	ldbu	r3,167(r2)
  80544c:	e0bfff17 	ldw	r2,-4(fp)
  805450:	10c040c5 	stb	r3,259(r2)
  d->_pg57 = d->_g57;
  805454:	e0bfff17 	ldw	r2,-4(fp)
  805458:	10c02983 	ldbu	r3,166(r2)
  80545c:	e0bfff17 	ldw	r2,-4(fp)
  805460:	10c04105 	stb	r3,260(r2)
  d->_pg55 = d->_g55;
  805464:	e0bfff17 	ldw	r2,-4(fp)
  805468:	10c02903 	ldbu	r3,164(r2)
  80546c:	e0bfff17 	ldw	r2,-4(fp)
  805470:	10c04145 	stb	r3,261(r2)
  d->_pg67_e1 = d->_g67_e1;
  805474:	e0bfff17 	ldw	r2,-4(fp)
  805478:	10c03e83 	ldbu	r3,250(r2)
  80547c:	e0bfff17 	ldw	r2,-4(fp)
  805480:	10c04185 	stb	r3,262(r2)
  d->_pg32 = d->_g32;
  805484:	e0bfff17 	ldw	r2,-4(fp)
  805488:	10c024c3 	ldbu	r3,147(r2)
  80548c:	e0bfff17 	ldw	r2,-4(fp)
  805490:	10c041c5 	stb	r3,263(r2)
  d->_pg10 = d->_g10;
  805494:	e0bfff17 	ldw	r2,-4(fp)
  805498:	10c020c3 	ldbu	r3,131(r2)
  80549c:	e0bfff17 	ldw	r2,-4(fp)
  8054a0:	10c04205 	stb	r3,264(r2)
  d->_pg59 = d->_g59;
  8054a4:	e0bfff17 	ldw	r2,-4(fp)
  8054a8:	10c02a03 	ldbu	r3,168(r2)
  8054ac:	e0bfff17 	ldw	r2,-4(fp)
  8054b0:	10c04245 	stb	r3,265(r2)
  d->_pg20 = d->_g20;
  8054b4:	e0bfff17 	ldw	r2,-4(fp)
  8054b8:	10c02283 	ldbu	r3,138(r2)
  8054bc:	e0bfff17 	ldw	r2,-4(fp)
  8054c0:	10c04285 	stb	r3,266(r2)
  d->_pg99 = d->_g99;
  8054c4:	e0bfff17 	ldw	r2,-4(fp)
  8054c8:	10c02fc3 	ldbu	r3,191(r2)
  8054cc:	e0bfff17 	ldw	r2,-4(fp)
  8054d0:	10c042c5 	stb	r3,267(r2)
  d->_pg94 = d->_g94;
  8054d4:	e0bfff17 	ldw	r2,-4(fp)
  8054d8:	10c02e83 	ldbu	r3,186(r2)
  8054dc:	e0bfff17 	ldw	r2,-4(fp)
  8054e0:	10c04305 	stb	r3,268(r2)
  d->_pg32_e3 = d->_g32_e3;
  8054e4:	e0bfff17 	ldw	r2,-4(fp)
  8054e8:	10c03dc3 	ldbu	r3,247(r2)
  8054ec:	e0bfff17 	ldw	r2,-4(fp)
  8054f0:	10c04345 	stb	r3,269(r2)
  d->_pg21_e2 = d->_g21_e2;
  8054f4:	e0bfff17 	ldw	r2,-4(fp)
  8054f8:	10c03d83 	ldbu	r3,246(r2)
  8054fc:	e0bfff17 	ldw	r2,-4(fp)
  805500:	10c04385 	stb	r3,270(r2)
  d->_pg5 = d->_g5;
  805504:	e0bfff17 	ldw	r2,-4(fp)
  805508:	10c01fc3 	ldbu	r3,127(r2)
  80550c:	e0bfff17 	ldw	r2,-4(fp)
  805510:	10c043c5 	stb	r3,271(r2)
  d->_pg93 = d->_g93;
  805514:	e0bfff17 	ldw	r2,-4(fp)
  805518:	10c02e43 	ldbu	r3,185(r2)
  80551c:	e0bfff17 	ldw	r2,-4(fp)
  805520:	10c04405 	stb	r3,272(r2)
  d->_pg16 = d->_g16;
  805524:	e0bfff17 	ldw	r2,-4(fp)
  805528:	10c021c3 	ldbu	r3,135(r2)
  80552c:	e0bfff17 	ldw	r2,-4(fp)
  805530:	10c04445 	stb	r3,273(r2)
  d->_pg11 = d->_g11;
  805534:	e0bfff17 	ldw	r2,-4(fp)
  805538:	10c02103 	ldbu	r3,132(r2)
  80553c:	e0bfff17 	ldw	r2,-4(fp)
  805540:	10c04485 	stb	r3,274(r2)
  d->_GO = 0;
  805544:	e0bfff17 	ldw	r2,-4(fp)
  805548:	10003185 	stb	zero,198(r2)
}
  80554c:	0001883a 	nop
  805550:	e037883a 	mov	sp,fp
  805554:	dfc00117 	ldw	ra,4(sp)
  805558:	df000017 	ldw	fp,0(sp)
  80555c:	dec00204 	addi	sp,sp,8
  805560:	f800283a 	ret

00805564 <__adddf3>:
  805564:	02c00434 	movhi	r11,16
  805568:	5affffc4 	addi	r11,r11,-1
  80556c:	2806d7fa 	srli	r3,r5,31
  805570:	2ad4703a 	and	r10,r5,r11
  805574:	3ad2703a 	and	r9,r7,r11
  805578:	3804d53a 	srli	r2,r7,20
  80557c:	3018d77a 	srli	r12,r6,29
  805580:	280ad53a 	srli	r5,r5,20
  805584:	501490fa 	slli	r10,r10,3
  805588:	2010d77a 	srli	r8,r4,29
  80558c:	481290fa 	slli	r9,r9,3
  805590:	380ed7fa 	srli	r7,r7,31
  805594:	defffb04 	addi	sp,sp,-20
  805598:	dc800215 	stw	r18,8(sp)
  80559c:	dc400115 	stw	r17,4(sp)
  8055a0:	dc000015 	stw	r16,0(sp)
  8055a4:	dfc00415 	stw	ra,16(sp)
  8055a8:	dcc00315 	stw	r19,12(sp)
  8055ac:	1c803fcc 	andi	r18,r3,255
  8055b0:	2c01ffcc 	andi	r16,r5,2047
  8055b4:	5210b03a 	or	r8,r10,r8
  8055b8:	202290fa 	slli	r17,r4,3
  8055bc:	1081ffcc 	andi	r2,r2,2047
  8055c0:	4b12b03a 	or	r9,r9,r12
  8055c4:	300c90fa 	slli	r6,r6,3
  8055c8:	91c07526 	beq	r18,r7,8057a0 <__adddf3+0x23c>
  8055cc:	8087c83a 	sub	r3,r16,r2
  8055d0:	00c0ab0e 	bge	zero,r3,805880 <__adddf3+0x31c>
  8055d4:	10002a1e 	bne	r2,zero,805680 <__adddf3+0x11c>
  8055d8:	4984b03a 	or	r2,r9,r6
  8055dc:	1000961e 	bne	r2,zero,805838 <__adddf3+0x2d4>
  8055e0:	888001cc 	andi	r2,r17,7
  8055e4:	10000726 	beq	r2,zero,805604 <__adddf3+0xa0>
  8055e8:	888003cc 	andi	r2,r17,15
  8055ec:	00c00104 	movi	r3,4
  8055f0:	10c00426 	beq	r2,r3,805604 <__adddf3+0xa0>
  8055f4:	88c7883a 	add	r3,r17,r3
  8055f8:	1c63803a 	cmpltu	r17,r3,r17
  8055fc:	4451883a 	add	r8,r8,r17
  805600:	1823883a 	mov	r17,r3
  805604:	4080202c 	andhi	r2,r8,128
  805608:	10005926 	beq	r2,zero,805770 <__adddf3+0x20c>
  80560c:	84000044 	addi	r16,r16,1
  805610:	0081ffc4 	movi	r2,2047
  805614:	8080ba26 	beq	r16,r2,805900 <__adddf3+0x39c>
  805618:	00bfe034 	movhi	r2,65408
  80561c:	10bfffc4 	addi	r2,r2,-1
  805620:	4090703a 	and	r8,r8,r2
  805624:	4004977a 	slli	r2,r8,29
  805628:	4010927a 	slli	r8,r8,9
  80562c:	8822d0fa 	srli	r17,r17,3
  805630:	8401ffcc 	andi	r16,r16,2047
  805634:	4010d33a 	srli	r8,r8,12
  805638:	9007883a 	mov	r3,r18
  80563c:	1444b03a 	or	r2,r2,r17
  805640:	8401ffcc 	andi	r16,r16,2047
  805644:	8020953a 	slli	r16,r16,20
  805648:	18c03fcc 	andi	r3,r3,255
  80564c:	01000434 	movhi	r4,16
  805650:	213fffc4 	addi	r4,r4,-1
  805654:	180697fa 	slli	r3,r3,31
  805658:	4110703a 	and	r8,r8,r4
  80565c:	4410b03a 	or	r8,r8,r16
  805660:	40c6b03a 	or	r3,r8,r3
  805664:	dfc00417 	ldw	ra,16(sp)
  805668:	dcc00317 	ldw	r19,12(sp)
  80566c:	dc800217 	ldw	r18,8(sp)
  805670:	dc400117 	ldw	r17,4(sp)
  805674:	dc000017 	ldw	r16,0(sp)
  805678:	dec00504 	addi	sp,sp,20
  80567c:	f800283a 	ret
  805680:	0081ffc4 	movi	r2,2047
  805684:	80bfd626 	beq	r16,r2,8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805688:	4a402034 	orhi	r9,r9,128
  80568c:	00800e04 	movi	r2,56
  805690:	10c09f16 	blt	r2,r3,805910 <__adddf3+0x3ac>
  805694:	008007c4 	movi	r2,31
  805698:	10c0c216 	blt	r2,r3,8059a4 <__adddf3+0x440>
  80569c:	00800804 	movi	r2,32
  8056a0:	10c5c83a 	sub	r2,r2,r3
  8056a4:	488a983a 	sll	r5,r9,r2
  8056a8:	30c8d83a 	srl	r4,r6,r3
  8056ac:	3084983a 	sll	r2,r6,r2
  8056b0:	48c6d83a 	srl	r3,r9,r3
  8056b4:	290cb03a 	or	r6,r5,r4
  8056b8:	1004c03a 	cmpne	r2,r2,zero
  8056bc:	308cb03a 	or	r6,r6,r2
  8056c0:	898dc83a 	sub	r6,r17,r6
  8056c4:	89a3803a 	cmpltu	r17,r17,r6
  8056c8:	40d1c83a 	sub	r8,r8,r3
  8056cc:	4451c83a 	sub	r8,r8,r17
  8056d0:	3023883a 	mov	r17,r6
  8056d4:	4080202c 	andhi	r2,r8,128
  8056d8:	10002326 	beq	r2,zero,805768 <__adddf3+0x204>
  8056dc:	04c02034 	movhi	r19,128
  8056e0:	9cffffc4 	addi	r19,r19,-1
  8056e4:	44e6703a 	and	r19,r8,r19
  8056e8:	98007626 	beq	r19,zero,8058c4 <__adddf3+0x360>
  8056ec:	9809883a 	mov	r4,r19
  8056f0:	0806a600 	call	806a60 <__clzsi2>
  8056f4:	10fffe04 	addi	r3,r2,-8
  8056f8:	010007c4 	movi	r4,31
  8056fc:	20c07716 	blt	r4,r3,8058dc <__adddf3+0x378>
  805700:	00800804 	movi	r2,32
  805704:	10c5c83a 	sub	r2,r2,r3
  805708:	8884d83a 	srl	r2,r17,r2
  80570c:	98d0983a 	sll	r8,r19,r3
  805710:	88e2983a 	sll	r17,r17,r3
  805714:	1204b03a 	or	r2,r2,r8
  805718:	1c007416 	blt	r3,r16,8058ec <__adddf3+0x388>
  80571c:	1c21c83a 	sub	r16,r3,r16
  805720:	82000044 	addi	r8,r16,1
  805724:	00c007c4 	movi	r3,31
  805728:	1a009116 	blt	r3,r8,805970 <__adddf3+0x40c>
  80572c:	00c00804 	movi	r3,32
  805730:	1a07c83a 	sub	r3,r3,r8
  805734:	8a08d83a 	srl	r4,r17,r8
  805738:	88e2983a 	sll	r17,r17,r3
  80573c:	10c6983a 	sll	r3,r2,r3
  805740:	1210d83a 	srl	r8,r2,r8
  805744:	8804c03a 	cmpne	r2,r17,zero
  805748:	1906b03a 	or	r3,r3,r4
  80574c:	18a2b03a 	or	r17,r3,r2
  805750:	0021883a 	mov	r16,zero
  805754:	003fa206 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805758:	1890b03a 	or	r8,r3,r2
  80575c:	40017d26 	beq	r8,zero,805d54 <__adddf3+0x7f0>
  805760:	1011883a 	mov	r8,r2
  805764:	1823883a 	mov	r17,r3
  805768:	888001cc 	andi	r2,r17,7
  80576c:	103f9e1e 	bne	r2,zero,8055e8 <__alt_mem_onchip_mem+0xff7fd5e8>
  805770:	4004977a 	slli	r2,r8,29
  805774:	8822d0fa 	srli	r17,r17,3
  805778:	4010d0fa 	srli	r8,r8,3
  80577c:	9007883a 	mov	r3,r18
  805780:	1444b03a 	or	r2,r2,r17
  805784:	0101ffc4 	movi	r4,2047
  805788:	81002426 	beq	r16,r4,80581c <__adddf3+0x2b8>
  80578c:	8120703a 	and	r16,r16,r4
  805790:	01000434 	movhi	r4,16
  805794:	213fffc4 	addi	r4,r4,-1
  805798:	4110703a 	and	r8,r8,r4
  80579c:	003fa806 	br	805640 <__alt_mem_onchip_mem+0xff7fd640>
  8057a0:	8089c83a 	sub	r4,r16,r2
  8057a4:	01005e0e 	bge	zero,r4,805920 <__adddf3+0x3bc>
  8057a8:	10002b26 	beq	r2,zero,805858 <__adddf3+0x2f4>
  8057ac:	0081ffc4 	movi	r2,2047
  8057b0:	80bf8b26 	beq	r16,r2,8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  8057b4:	4a402034 	orhi	r9,r9,128
  8057b8:	00800e04 	movi	r2,56
  8057bc:	1100a40e 	bge	r2,r4,805a50 <__adddf3+0x4ec>
  8057c0:	498cb03a 	or	r6,r9,r6
  8057c4:	300ac03a 	cmpne	r5,r6,zero
  8057c8:	0013883a 	mov	r9,zero
  8057cc:	2c4b883a 	add	r5,r5,r17
  8057d0:	2c63803a 	cmpltu	r17,r5,r17
  8057d4:	4a11883a 	add	r8,r9,r8
  8057d8:	8a11883a 	add	r8,r17,r8
  8057dc:	2823883a 	mov	r17,r5
  8057e0:	4080202c 	andhi	r2,r8,128
  8057e4:	103fe026 	beq	r2,zero,805768 <__alt_mem_onchip_mem+0xff7fd768>
  8057e8:	84000044 	addi	r16,r16,1
  8057ec:	0081ffc4 	movi	r2,2047
  8057f0:	8080d226 	beq	r16,r2,805b3c <__adddf3+0x5d8>
  8057f4:	00bfe034 	movhi	r2,65408
  8057f8:	10bfffc4 	addi	r2,r2,-1
  8057fc:	4090703a 	and	r8,r8,r2
  805800:	880ad07a 	srli	r5,r17,1
  805804:	400897fa 	slli	r4,r8,31
  805808:	88c0004c 	andi	r3,r17,1
  80580c:	28e2b03a 	or	r17,r5,r3
  805810:	4010d07a 	srli	r8,r8,1
  805814:	2462b03a 	or	r17,r4,r17
  805818:	003f7106 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  80581c:	4088b03a 	or	r4,r8,r2
  805820:	20014526 	beq	r4,zero,805d38 <__adddf3+0x7d4>
  805824:	01000434 	movhi	r4,16
  805828:	42000234 	orhi	r8,r8,8
  80582c:	213fffc4 	addi	r4,r4,-1
  805830:	4110703a 	and	r8,r8,r4
  805834:	003f8206 	br	805640 <__alt_mem_onchip_mem+0xff7fd640>
  805838:	18ffffc4 	addi	r3,r3,-1
  80583c:	1800491e 	bne	r3,zero,805964 <__adddf3+0x400>
  805840:	898bc83a 	sub	r5,r17,r6
  805844:	8963803a 	cmpltu	r17,r17,r5
  805848:	4251c83a 	sub	r8,r8,r9
  80584c:	4451c83a 	sub	r8,r8,r17
  805850:	2823883a 	mov	r17,r5
  805854:	003f9f06 	br	8056d4 <__alt_mem_onchip_mem+0xff7fd6d4>
  805858:	4984b03a 	or	r2,r9,r6
  80585c:	103f6026 	beq	r2,zero,8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805860:	213fffc4 	addi	r4,r4,-1
  805864:	2000931e 	bne	r4,zero,805ab4 <__adddf3+0x550>
  805868:	898d883a 	add	r6,r17,r6
  80586c:	3463803a 	cmpltu	r17,r6,r17
  805870:	4251883a 	add	r8,r8,r9
  805874:	8a11883a 	add	r8,r17,r8
  805878:	3023883a 	mov	r17,r6
  80587c:	003fd806 	br	8057e0 <__alt_mem_onchip_mem+0xff7fd7e0>
  805880:	1800541e 	bne	r3,zero,8059d4 <__adddf3+0x470>
  805884:	80800044 	addi	r2,r16,1
  805888:	1081ffcc 	andi	r2,r2,2047
  80588c:	00c00044 	movi	r3,1
  805890:	1880a00e 	bge	r3,r2,805b14 <__adddf3+0x5b0>
  805894:	8989c83a 	sub	r4,r17,r6
  805898:	8905803a 	cmpltu	r2,r17,r4
  80589c:	4267c83a 	sub	r19,r8,r9
  8058a0:	98a7c83a 	sub	r19,r19,r2
  8058a4:	9880202c 	andhi	r2,r19,128
  8058a8:	10006326 	beq	r2,zero,805a38 <__adddf3+0x4d4>
  8058ac:	3463c83a 	sub	r17,r6,r17
  8058b0:	4a07c83a 	sub	r3,r9,r8
  8058b4:	344d803a 	cmpltu	r6,r6,r17
  8058b8:	19a7c83a 	sub	r19,r3,r6
  8058bc:	3825883a 	mov	r18,r7
  8058c0:	983f8a1e 	bne	r19,zero,8056ec <__alt_mem_onchip_mem+0xff7fd6ec>
  8058c4:	8809883a 	mov	r4,r17
  8058c8:	0806a600 	call	806a60 <__clzsi2>
  8058cc:	10800804 	addi	r2,r2,32
  8058d0:	10fffe04 	addi	r3,r2,-8
  8058d4:	010007c4 	movi	r4,31
  8058d8:	20ff890e 	bge	r4,r3,805700 <__alt_mem_onchip_mem+0xff7fd700>
  8058dc:	10bff604 	addi	r2,r2,-40
  8058e0:	8884983a 	sll	r2,r17,r2
  8058e4:	0023883a 	mov	r17,zero
  8058e8:	1c3f8c0e 	bge	r3,r16,80571c <__alt_mem_onchip_mem+0xff7fd71c>
  8058ec:	023fe034 	movhi	r8,65408
  8058f0:	423fffc4 	addi	r8,r8,-1
  8058f4:	80e1c83a 	sub	r16,r16,r3
  8058f8:	1210703a 	and	r8,r2,r8
  8058fc:	003f3806 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805900:	9007883a 	mov	r3,r18
  805904:	0011883a 	mov	r8,zero
  805908:	0005883a 	mov	r2,zero
  80590c:	003f4c06 	br	805640 <__alt_mem_onchip_mem+0xff7fd640>
  805910:	498cb03a 	or	r6,r9,r6
  805914:	300cc03a 	cmpne	r6,r6,zero
  805918:	0007883a 	mov	r3,zero
  80591c:	003f6806 	br	8056c0 <__alt_mem_onchip_mem+0xff7fd6c0>
  805920:	20009c1e 	bne	r4,zero,805b94 <__adddf3+0x630>
  805924:	80800044 	addi	r2,r16,1
  805928:	1141ffcc 	andi	r5,r2,2047
  80592c:	01000044 	movi	r4,1
  805930:	2140670e 	bge	r4,r5,805ad0 <__adddf3+0x56c>
  805934:	0101ffc4 	movi	r4,2047
  805938:	11007f26 	beq	r2,r4,805b38 <__adddf3+0x5d4>
  80593c:	898d883a 	add	r6,r17,r6
  805940:	4247883a 	add	r3,r8,r9
  805944:	3451803a 	cmpltu	r8,r6,r17
  805948:	40d1883a 	add	r8,r8,r3
  80594c:	402297fa 	slli	r17,r8,31
  805950:	300cd07a 	srli	r6,r6,1
  805954:	4010d07a 	srli	r8,r8,1
  805958:	1021883a 	mov	r16,r2
  80595c:	89a2b03a 	or	r17,r17,r6
  805960:	003f1f06 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805964:	0081ffc4 	movi	r2,2047
  805968:	80bf481e 	bne	r16,r2,80568c <__alt_mem_onchip_mem+0xff7fd68c>
  80596c:	003f1c06 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805970:	843ff844 	addi	r16,r16,-31
  805974:	01000804 	movi	r4,32
  805978:	1406d83a 	srl	r3,r2,r16
  80597c:	41005026 	beq	r8,r4,805ac0 <__adddf3+0x55c>
  805980:	01001004 	movi	r4,64
  805984:	2211c83a 	sub	r8,r4,r8
  805988:	1204983a 	sll	r2,r2,r8
  80598c:	88a2b03a 	or	r17,r17,r2
  805990:	8822c03a 	cmpne	r17,r17,zero
  805994:	1c62b03a 	or	r17,r3,r17
  805998:	0011883a 	mov	r8,zero
  80599c:	0021883a 	mov	r16,zero
  8059a0:	003f7106 	br	805768 <__alt_mem_onchip_mem+0xff7fd768>
  8059a4:	193ff804 	addi	r4,r3,-32
  8059a8:	00800804 	movi	r2,32
  8059ac:	4908d83a 	srl	r4,r9,r4
  8059b0:	18804526 	beq	r3,r2,805ac8 <__adddf3+0x564>
  8059b4:	00801004 	movi	r2,64
  8059b8:	10c5c83a 	sub	r2,r2,r3
  8059bc:	4886983a 	sll	r3,r9,r2
  8059c0:	198cb03a 	or	r6,r3,r6
  8059c4:	300cc03a 	cmpne	r6,r6,zero
  8059c8:	218cb03a 	or	r6,r4,r6
  8059cc:	0007883a 	mov	r3,zero
  8059d0:	003f3b06 	br	8056c0 <__alt_mem_onchip_mem+0xff7fd6c0>
  8059d4:	80002a26 	beq	r16,zero,805a80 <__adddf3+0x51c>
  8059d8:	0101ffc4 	movi	r4,2047
  8059dc:	11006826 	beq	r2,r4,805b80 <__adddf3+0x61c>
  8059e0:	00c7c83a 	sub	r3,zero,r3
  8059e4:	42002034 	orhi	r8,r8,128
  8059e8:	01000e04 	movi	r4,56
  8059ec:	20c07c16 	blt	r4,r3,805be0 <__adddf3+0x67c>
  8059f0:	010007c4 	movi	r4,31
  8059f4:	20c0da16 	blt	r4,r3,805d60 <__adddf3+0x7fc>
  8059f8:	01000804 	movi	r4,32
  8059fc:	20c9c83a 	sub	r4,r4,r3
  805a00:	4114983a 	sll	r10,r8,r4
  805a04:	88cad83a 	srl	r5,r17,r3
  805a08:	8908983a 	sll	r4,r17,r4
  805a0c:	40c6d83a 	srl	r3,r8,r3
  805a10:	5162b03a 	or	r17,r10,r5
  805a14:	2008c03a 	cmpne	r4,r4,zero
  805a18:	8922b03a 	or	r17,r17,r4
  805a1c:	3463c83a 	sub	r17,r6,r17
  805a20:	48c7c83a 	sub	r3,r9,r3
  805a24:	344d803a 	cmpltu	r6,r6,r17
  805a28:	1991c83a 	sub	r8,r3,r6
  805a2c:	1021883a 	mov	r16,r2
  805a30:	3825883a 	mov	r18,r7
  805a34:	003f2706 	br	8056d4 <__alt_mem_onchip_mem+0xff7fd6d4>
  805a38:	24d0b03a 	or	r8,r4,r19
  805a3c:	40001b1e 	bne	r8,zero,805aac <__adddf3+0x548>
  805a40:	0005883a 	mov	r2,zero
  805a44:	0007883a 	mov	r3,zero
  805a48:	0021883a 	mov	r16,zero
  805a4c:	003f4d06 	br	805784 <__alt_mem_onchip_mem+0xff7fd784>
  805a50:	008007c4 	movi	r2,31
  805a54:	11003c16 	blt	r2,r4,805b48 <__adddf3+0x5e4>
  805a58:	00800804 	movi	r2,32
  805a5c:	1105c83a 	sub	r2,r2,r4
  805a60:	488e983a 	sll	r7,r9,r2
  805a64:	310ad83a 	srl	r5,r6,r4
  805a68:	3084983a 	sll	r2,r6,r2
  805a6c:	4912d83a 	srl	r9,r9,r4
  805a70:	394ab03a 	or	r5,r7,r5
  805a74:	1004c03a 	cmpne	r2,r2,zero
  805a78:	288ab03a 	or	r5,r5,r2
  805a7c:	003f5306 	br	8057cc <__alt_mem_onchip_mem+0xff7fd7cc>
  805a80:	4448b03a 	or	r4,r8,r17
  805a84:	20003e26 	beq	r4,zero,805b80 <__adddf3+0x61c>
  805a88:	00c6303a 	nor	r3,zero,r3
  805a8c:	18003a1e 	bne	r3,zero,805b78 <__adddf3+0x614>
  805a90:	3463c83a 	sub	r17,r6,r17
  805a94:	4a07c83a 	sub	r3,r9,r8
  805a98:	344d803a 	cmpltu	r6,r6,r17
  805a9c:	1991c83a 	sub	r8,r3,r6
  805aa0:	1021883a 	mov	r16,r2
  805aa4:	3825883a 	mov	r18,r7
  805aa8:	003f0a06 	br	8056d4 <__alt_mem_onchip_mem+0xff7fd6d4>
  805aac:	2023883a 	mov	r17,r4
  805ab0:	003f0d06 	br	8056e8 <__alt_mem_onchip_mem+0xff7fd6e8>
  805ab4:	0081ffc4 	movi	r2,2047
  805ab8:	80bf3f1e 	bne	r16,r2,8057b8 <__alt_mem_onchip_mem+0xff7fd7b8>
  805abc:	003ec806 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805ac0:	0005883a 	mov	r2,zero
  805ac4:	003fb106 	br	80598c <__alt_mem_onchip_mem+0xff7fd98c>
  805ac8:	0007883a 	mov	r3,zero
  805acc:	003fbc06 	br	8059c0 <__alt_mem_onchip_mem+0xff7fd9c0>
  805ad0:	4444b03a 	or	r2,r8,r17
  805ad4:	8000871e 	bne	r16,zero,805cf4 <__adddf3+0x790>
  805ad8:	1000ba26 	beq	r2,zero,805dc4 <__adddf3+0x860>
  805adc:	4984b03a 	or	r2,r9,r6
  805ae0:	103ebf26 	beq	r2,zero,8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805ae4:	8985883a 	add	r2,r17,r6
  805ae8:	4247883a 	add	r3,r8,r9
  805aec:	1451803a 	cmpltu	r8,r2,r17
  805af0:	40d1883a 	add	r8,r8,r3
  805af4:	40c0202c 	andhi	r3,r8,128
  805af8:	1023883a 	mov	r17,r2
  805afc:	183f1a26 	beq	r3,zero,805768 <__alt_mem_onchip_mem+0xff7fd768>
  805b00:	00bfe034 	movhi	r2,65408
  805b04:	10bfffc4 	addi	r2,r2,-1
  805b08:	2021883a 	mov	r16,r4
  805b0c:	4090703a 	and	r8,r8,r2
  805b10:	003eb306 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805b14:	4444b03a 	or	r2,r8,r17
  805b18:	8000291e 	bne	r16,zero,805bc0 <__adddf3+0x65c>
  805b1c:	10004b1e 	bne	r2,zero,805c4c <__adddf3+0x6e8>
  805b20:	4990b03a 	or	r8,r9,r6
  805b24:	40008b26 	beq	r8,zero,805d54 <__adddf3+0x7f0>
  805b28:	4811883a 	mov	r8,r9
  805b2c:	3023883a 	mov	r17,r6
  805b30:	3825883a 	mov	r18,r7
  805b34:	003eaa06 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805b38:	1021883a 	mov	r16,r2
  805b3c:	0011883a 	mov	r8,zero
  805b40:	0005883a 	mov	r2,zero
  805b44:	003f0f06 	br	805784 <__alt_mem_onchip_mem+0xff7fd784>
  805b48:	217ff804 	addi	r5,r4,-32
  805b4c:	00800804 	movi	r2,32
  805b50:	494ad83a 	srl	r5,r9,r5
  805b54:	20807d26 	beq	r4,r2,805d4c <__adddf3+0x7e8>
  805b58:	00801004 	movi	r2,64
  805b5c:	1109c83a 	sub	r4,r2,r4
  805b60:	4912983a 	sll	r9,r9,r4
  805b64:	498cb03a 	or	r6,r9,r6
  805b68:	300cc03a 	cmpne	r6,r6,zero
  805b6c:	298ab03a 	or	r5,r5,r6
  805b70:	0013883a 	mov	r9,zero
  805b74:	003f1506 	br	8057cc <__alt_mem_onchip_mem+0xff7fd7cc>
  805b78:	0101ffc4 	movi	r4,2047
  805b7c:	113f9a1e 	bne	r2,r4,8059e8 <__alt_mem_onchip_mem+0xff7fd9e8>
  805b80:	4811883a 	mov	r8,r9
  805b84:	3023883a 	mov	r17,r6
  805b88:	1021883a 	mov	r16,r2
  805b8c:	3825883a 	mov	r18,r7
  805b90:	003e9306 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805b94:	8000161e 	bne	r16,zero,805bf0 <__adddf3+0x68c>
  805b98:	444ab03a 	or	r5,r8,r17
  805b9c:	28005126 	beq	r5,zero,805ce4 <__adddf3+0x780>
  805ba0:	0108303a 	nor	r4,zero,r4
  805ba4:	20004d1e 	bne	r4,zero,805cdc <__adddf3+0x778>
  805ba8:	89a3883a 	add	r17,r17,r6
  805bac:	4253883a 	add	r9,r8,r9
  805bb0:	898d803a 	cmpltu	r6,r17,r6
  805bb4:	3251883a 	add	r8,r6,r9
  805bb8:	1021883a 	mov	r16,r2
  805bbc:	003f0806 	br	8057e0 <__alt_mem_onchip_mem+0xff7fd7e0>
  805bc0:	1000301e 	bne	r2,zero,805c84 <__adddf3+0x720>
  805bc4:	4984b03a 	or	r2,r9,r6
  805bc8:	10007126 	beq	r2,zero,805d90 <__adddf3+0x82c>
  805bcc:	4811883a 	mov	r8,r9
  805bd0:	3023883a 	mov	r17,r6
  805bd4:	3825883a 	mov	r18,r7
  805bd8:	0401ffc4 	movi	r16,2047
  805bdc:	003e8006 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805be0:	4462b03a 	or	r17,r8,r17
  805be4:	8822c03a 	cmpne	r17,r17,zero
  805be8:	0007883a 	mov	r3,zero
  805bec:	003f8b06 	br	805a1c <__alt_mem_onchip_mem+0xff7fda1c>
  805bf0:	0141ffc4 	movi	r5,2047
  805bf4:	11403b26 	beq	r2,r5,805ce4 <__adddf3+0x780>
  805bf8:	0109c83a 	sub	r4,zero,r4
  805bfc:	42002034 	orhi	r8,r8,128
  805c00:	01400e04 	movi	r5,56
  805c04:	29006716 	blt	r5,r4,805da4 <__adddf3+0x840>
  805c08:	014007c4 	movi	r5,31
  805c0c:	29007016 	blt	r5,r4,805dd0 <__adddf3+0x86c>
  805c10:	01400804 	movi	r5,32
  805c14:	290bc83a 	sub	r5,r5,r4
  805c18:	4154983a 	sll	r10,r8,r5
  805c1c:	890ed83a 	srl	r7,r17,r4
  805c20:	894a983a 	sll	r5,r17,r5
  805c24:	4108d83a 	srl	r4,r8,r4
  805c28:	51e2b03a 	or	r17,r10,r7
  805c2c:	280ac03a 	cmpne	r5,r5,zero
  805c30:	8962b03a 	or	r17,r17,r5
  805c34:	89a3883a 	add	r17,r17,r6
  805c38:	2253883a 	add	r9,r4,r9
  805c3c:	898d803a 	cmpltu	r6,r17,r6
  805c40:	3251883a 	add	r8,r6,r9
  805c44:	1021883a 	mov	r16,r2
  805c48:	003ee506 	br	8057e0 <__alt_mem_onchip_mem+0xff7fd7e0>
  805c4c:	4984b03a 	or	r2,r9,r6
  805c50:	103e6326 	beq	r2,zero,8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805c54:	8987c83a 	sub	r3,r17,r6
  805c58:	88c9803a 	cmpltu	r4,r17,r3
  805c5c:	4245c83a 	sub	r2,r8,r9
  805c60:	1105c83a 	sub	r2,r2,r4
  805c64:	1100202c 	andhi	r4,r2,128
  805c68:	203ebb26 	beq	r4,zero,805758 <__alt_mem_onchip_mem+0xff7fd758>
  805c6c:	3463c83a 	sub	r17,r6,r17
  805c70:	4a07c83a 	sub	r3,r9,r8
  805c74:	344d803a 	cmpltu	r6,r6,r17
  805c78:	1991c83a 	sub	r8,r3,r6
  805c7c:	3825883a 	mov	r18,r7
  805c80:	003e5706 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805c84:	4984b03a 	or	r2,r9,r6
  805c88:	10002e26 	beq	r2,zero,805d44 <__adddf3+0x7e0>
  805c8c:	4004d0fa 	srli	r2,r8,3
  805c90:	8822d0fa 	srli	r17,r17,3
  805c94:	4010977a 	slli	r8,r8,29
  805c98:	10c0022c 	andhi	r3,r2,8
  805c9c:	4462b03a 	or	r17,r8,r17
  805ca0:	18000826 	beq	r3,zero,805cc4 <__adddf3+0x760>
  805ca4:	4808d0fa 	srli	r4,r9,3
  805ca8:	20c0022c 	andhi	r3,r4,8
  805cac:	1800051e 	bne	r3,zero,805cc4 <__adddf3+0x760>
  805cb0:	300cd0fa 	srli	r6,r6,3
  805cb4:	4806977a 	slli	r3,r9,29
  805cb8:	2005883a 	mov	r2,r4
  805cbc:	3825883a 	mov	r18,r7
  805cc0:	19a2b03a 	or	r17,r3,r6
  805cc4:	8810d77a 	srli	r8,r17,29
  805cc8:	100490fa 	slli	r2,r2,3
  805ccc:	882290fa 	slli	r17,r17,3
  805cd0:	0401ffc4 	movi	r16,2047
  805cd4:	4090b03a 	or	r8,r8,r2
  805cd8:	003e4106 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805cdc:	0141ffc4 	movi	r5,2047
  805ce0:	117fc71e 	bne	r2,r5,805c00 <__alt_mem_onchip_mem+0xff7fdc00>
  805ce4:	4811883a 	mov	r8,r9
  805ce8:	3023883a 	mov	r17,r6
  805cec:	1021883a 	mov	r16,r2
  805cf0:	003e3b06 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805cf4:	10002f26 	beq	r2,zero,805db4 <__adddf3+0x850>
  805cf8:	4984b03a 	or	r2,r9,r6
  805cfc:	10001126 	beq	r2,zero,805d44 <__adddf3+0x7e0>
  805d00:	4004d0fa 	srli	r2,r8,3
  805d04:	8822d0fa 	srli	r17,r17,3
  805d08:	4010977a 	slli	r8,r8,29
  805d0c:	10c0022c 	andhi	r3,r2,8
  805d10:	4462b03a 	or	r17,r8,r17
  805d14:	183feb26 	beq	r3,zero,805cc4 <__alt_mem_onchip_mem+0xff7fdcc4>
  805d18:	4808d0fa 	srli	r4,r9,3
  805d1c:	20c0022c 	andhi	r3,r4,8
  805d20:	183fe81e 	bne	r3,zero,805cc4 <__alt_mem_onchip_mem+0xff7fdcc4>
  805d24:	300cd0fa 	srli	r6,r6,3
  805d28:	4806977a 	slli	r3,r9,29
  805d2c:	2005883a 	mov	r2,r4
  805d30:	19a2b03a 	or	r17,r3,r6
  805d34:	003fe306 	br	805cc4 <__alt_mem_onchip_mem+0xff7fdcc4>
  805d38:	0011883a 	mov	r8,zero
  805d3c:	0005883a 	mov	r2,zero
  805d40:	003e3f06 	br	805640 <__alt_mem_onchip_mem+0xff7fd640>
  805d44:	0401ffc4 	movi	r16,2047
  805d48:	003e2506 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805d4c:	0013883a 	mov	r9,zero
  805d50:	003f8406 	br	805b64 <__alt_mem_onchip_mem+0xff7fdb64>
  805d54:	0005883a 	mov	r2,zero
  805d58:	0007883a 	mov	r3,zero
  805d5c:	003e8906 	br	805784 <__alt_mem_onchip_mem+0xff7fd784>
  805d60:	197ff804 	addi	r5,r3,-32
  805d64:	01000804 	movi	r4,32
  805d68:	414ad83a 	srl	r5,r8,r5
  805d6c:	19002426 	beq	r3,r4,805e00 <__adddf3+0x89c>
  805d70:	01001004 	movi	r4,64
  805d74:	20c7c83a 	sub	r3,r4,r3
  805d78:	40c6983a 	sll	r3,r8,r3
  805d7c:	1c46b03a 	or	r3,r3,r17
  805d80:	1806c03a 	cmpne	r3,r3,zero
  805d84:	28e2b03a 	or	r17,r5,r3
  805d88:	0007883a 	mov	r3,zero
  805d8c:	003f2306 	br	805a1c <__alt_mem_onchip_mem+0xff7fda1c>
  805d90:	0007883a 	mov	r3,zero
  805d94:	5811883a 	mov	r8,r11
  805d98:	00bfffc4 	movi	r2,-1
  805d9c:	0401ffc4 	movi	r16,2047
  805da0:	003e7806 	br	805784 <__alt_mem_onchip_mem+0xff7fd784>
  805da4:	4462b03a 	or	r17,r8,r17
  805da8:	8822c03a 	cmpne	r17,r17,zero
  805dac:	0009883a 	mov	r4,zero
  805db0:	003fa006 	br	805c34 <__alt_mem_onchip_mem+0xff7fdc34>
  805db4:	4811883a 	mov	r8,r9
  805db8:	3023883a 	mov	r17,r6
  805dbc:	0401ffc4 	movi	r16,2047
  805dc0:	003e0706 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805dc4:	4811883a 	mov	r8,r9
  805dc8:	3023883a 	mov	r17,r6
  805dcc:	003e0406 	br	8055e0 <__alt_mem_onchip_mem+0xff7fd5e0>
  805dd0:	21fff804 	addi	r7,r4,-32
  805dd4:	01400804 	movi	r5,32
  805dd8:	41ced83a 	srl	r7,r8,r7
  805ddc:	21400a26 	beq	r4,r5,805e08 <__adddf3+0x8a4>
  805de0:	01401004 	movi	r5,64
  805de4:	2909c83a 	sub	r4,r5,r4
  805de8:	4108983a 	sll	r4,r8,r4
  805dec:	2448b03a 	or	r4,r4,r17
  805df0:	2008c03a 	cmpne	r4,r4,zero
  805df4:	3922b03a 	or	r17,r7,r4
  805df8:	0009883a 	mov	r4,zero
  805dfc:	003f8d06 	br	805c34 <__alt_mem_onchip_mem+0xff7fdc34>
  805e00:	0007883a 	mov	r3,zero
  805e04:	003fdd06 	br	805d7c <__alt_mem_onchip_mem+0xff7fdd7c>
  805e08:	0009883a 	mov	r4,zero
  805e0c:	003ff706 	br	805dec <__alt_mem_onchip_mem+0xff7fddec>

00805e10 <__gedf2>:
  805e10:	2804d53a 	srli	r2,r5,20
  805e14:	3806d53a 	srli	r3,r7,20
  805e18:	02000434 	movhi	r8,16
  805e1c:	423fffc4 	addi	r8,r8,-1
  805e20:	1081ffcc 	andi	r2,r2,2047
  805e24:	0241ffc4 	movi	r9,2047
  805e28:	2a14703a 	and	r10,r5,r8
  805e2c:	18c1ffcc 	andi	r3,r3,2047
  805e30:	3a10703a 	and	r8,r7,r8
  805e34:	280ad7fa 	srli	r5,r5,31
  805e38:	380ed7fa 	srli	r7,r7,31
  805e3c:	12401d26 	beq	r2,r9,805eb4 <__gedf2+0xa4>
  805e40:	0241ffc4 	movi	r9,2047
  805e44:	1a401226 	beq	r3,r9,805e90 <__gedf2+0x80>
  805e48:	1000081e 	bne	r2,zero,805e6c <__gedf2+0x5c>
  805e4c:	2296b03a 	or	r11,r4,r10
  805e50:	5813003a 	cmpeq	r9,r11,zero
  805e54:	1800091e 	bne	r3,zero,805e7c <__gedf2+0x6c>
  805e58:	3218b03a 	or	r12,r6,r8
  805e5c:	6000071e 	bne	r12,zero,805e7c <__gedf2+0x6c>
  805e60:	0005883a 	mov	r2,zero
  805e64:	5800101e 	bne	r11,zero,805ea8 <__gedf2+0x98>
  805e68:	f800283a 	ret
  805e6c:	18000c1e 	bne	r3,zero,805ea0 <__gedf2+0x90>
  805e70:	3212b03a 	or	r9,r6,r8
  805e74:	48000c26 	beq	r9,zero,805ea8 <__gedf2+0x98>
  805e78:	0013883a 	mov	r9,zero
  805e7c:	39c03fcc 	andi	r7,r7,255
  805e80:	48000826 	beq	r9,zero,805ea4 <__gedf2+0x94>
  805e84:	38000926 	beq	r7,zero,805eac <__gedf2+0x9c>
  805e88:	00800044 	movi	r2,1
  805e8c:	f800283a 	ret
  805e90:	3212b03a 	or	r9,r6,r8
  805e94:	483fec26 	beq	r9,zero,805e48 <__alt_mem_onchip_mem+0xff7fde48>
  805e98:	00bfff84 	movi	r2,-2
  805e9c:	f800283a 	ret
  805ea0:	39c03fcc 	andi	r7,r7,255
  805ea4:	29c00626 	beq	r5,r7,805ec0 <__gedf2+0xb0>
  805ea8:	283ff726 	beq	r5,zero,805e88 <__alt_mem_onchip_mem+0xff7fde88>
  805eac:	00bfffc4 	movi	r2,-1
  805eb0:	f800283a 	ret
  805eb4:	2292b03a 	or	r9,r4,r10
  805eb8:	483fe126 	beq	r9,zero,805e40 <__alt_mem_onchip_mem+0xff7fde40>
  805ebc:	003ff606 	br	805e98 <__alt_mem_onchip_mem+0xff7fde98>
  805ec0:	18bff916 	blt	r3,r2,805ea8 <__alt_mem_onchip_mem+0xff7fdea8>
  805ec4:	10c00316 	blt	r2,r3,805ed4 <__gedf2+0xc4>
  805ec8:	42bff736 	bltu	r8,r10,805ea8 <__alt_mem_onchip_mem+0xff7fdea8>
  805ecc:	52000326 	beq	r10,r8,805edc <__gedf2+0xcc>
  805ed0:	5200042e 	bgeu	r10,r8,805ee4 <__gedf2+0xd4>
  805ed4:	283fec1e 	bne	r5,zero,805e88 <__alt_mem_onchip_mem+0xff7fde88>
  805ed8:	003ff406 	br	805eac <__alt_mem_onchip_mem+0xff7fdeac>
  805edc:	313ff236 	bltu	r6,r4,805ea8 <__alt_mem_onchip_mem+0xff7fdea8>
  805ee0:	21bffc36 	bltu	r4,r6,805ed4 <__alt_mem_onchip_mem+0xff7fded4>
  805ee4:	0005883a 	mov	r2,zero
  805ee8:	f800283a 	ret

00805eec <__ledf2>:
  805eec:	2804d53a 	srli	r2,r5,20
  805ef0:	3810d53a 	srli	r8,r7,20
  805ef4:	00c00434 	movhi	r3,16
  805ef8:	18ffffc4 	addi	r3,r3,-1
  805efc:	1081ffcc 	andi	r2,r2,2047
  805f00:	0241ffc4 	movi	r9,2047
  805f04:	28d4703a 	and	r10,r5,r3
  805f08:	4201ffcc 	andi	r8,r8,2047
  805f0c:	38c6703a 	and	r3,r7,r3
  805f10:	280ad7fa 	srli	r5,r5,31
  805f14:	380ed7fa 	srli	r7,r7,31
  805f18:	12401f26 	beq	r2,r9,805f98 <__ledf2+0xac>
  805f1c:	0241ffc4 	movi	r9,2047
  805f20:	42401426 	beq	r8,r9,805f74 <__ledf2+0x88>
  805f24:	1000091e 	bne	r2,zero,805f4c <__ledf2+0x60>
  805f28:	2296b03a 	or	r11,r4,r10
  805f2c:	5813003a 	cmpeq	r9,r11,zero
  805f30:	29403fcc 	andi	r5,r5,255
  805f34:	40000a1e 	bne	r8,zero,805f60 <__ledf2+0x74>
  805f38:	30d8b03a 	or	r12,r6,r3
  805f3c:	6000081e 	bne	r12,zero,805f60 <__ledf2+0x74>
  805f40:	0005883a 	mov	r2,zero
  805f44:	5800111e 	bne	r11,zero,805f8c <__ledf2+0xa0>
  805f48:	f800283a 	ret
  805f4c:	29403fcc 	andi	r5,r5,255
  805f50:	40000c1e 	bne	r8,zero,805f84 <__ledf2+0x98>
  805f54:	30d2b03a 	or	r9,r6,r3
  805f58:	48000c26 	beq	r9,zero,805f8c <__ledf2+0xa0>
  805f5c:	0013883a 	mov	r9,zero
  805f60:	39c03fcc 	andi	r7,r7,255
  805f64:	48000826 	beq	r9,zero,805f88 <__ledf2+0x9c>
  805f68:	38001126 	beq	r7,zero,805fb0 <__ledf2+0xc4>
  805f6c:	00800044 	movi	r2,1
  805f70:	f800283a 	ret
  805f74:	30d2b03a 	or	r9,r6,r3
  805f78:	483fea26 	beq	r9,zero,805f24 <__alt_mem_onchip_mem+0xff7fdf24>
  805f7c:	00800084 	movi	r2,2
  805f80:	f800283a 	ret
  805f84:	39c03fcc 	andi	r7,r7,255
  805f88:	39400726 	beq	r7,r5,805fa8 <__ledf2+0xbc>
  805f8c:	2800081e 	bne	r5,zero,805fb0 <__ledf2+0xc4>
  805f90:	00800044 	movi	r2,1
  805f94:	f800283a 	ret
  805f98:	2292b03a 	or	r9,r4,r10
  805f9c:	483fdf26 	beq	r9,zero,805f1c <__alt_mem_onchip_mem+0xff7fdf1c>
  805fa0:	00800084 	movi	r2,2
  805fa4:	f800283a 	ret
  805fa8:	4080030e 	bge	r8,r2,805fb8 <__ledf2+0xcc>
  805fac:	383fef26 	beq	r7,zero,805f6c <__alt_mem_onchip_mem+0xff7fdf6c>
  805fb0:	00bfffc4 	movi	r2,-1
  805fb4:	f800283a 	ret
  805fb8:	123feb16 	blt	r2,r8,805f68 <__alt_mem_onchip_mem+0xff7fdf68>
  805fbc:	1abff336 	bltu	r3,r10,805f8c <__alt_mem_onchip_mem+0xff7fdf8c>
  805fc0:	50c00326 	beq	r10,r3,805fd0 <__ledf2+0xe4>
  805fc4:	50c0042e 	bgeu	r10,r3,805fd8 <__ledf2+0xec>
  805fc8:	283fe81e 	bne	r5,zero,805f6c <__alt_mem_onchip_mem+0xff7fdf6c>
  805fcc:	003ff806 	br	805fb0 <__alt_mem_onchip_mem+0xff7fdfb0>
  805fd0:	313fee36 	bltu	r6,r4,805f8c <__alt_mem_onchip_mem+0xff7fdf8c>
  805fd4:	21bffc36 	bltu	r4,r6,805fc8 <__alt_mem_onchip_mem+0xff7fdfc8>
  805fd8:	0005883a 	mov	r2,zero
  805fdc:	f800283a 	ret

00805fe0 <__subdf3>:
  805fe0:	02000434 	movhi	r8,16
  805fe4:	423fffc4 	addi	r8,r8,-1
  805fe8:	defffb04 	addi	sp,sp,-20
  805fec:	2a14703a 	and	r10,r5,r8
  805ff0:	3812d53a 	srli	r9,r7,20
  805ff4:	3a10703a 	and	r8,r7,r8
  805ff8:	2006d77a 	srli	r3,r4,29
  805ffc:	3004d77a 	srli	r2,r6,29
  806000:	dc000015 	stw	r16,0(sp)
  806004:	501490fa 	slli	r10,r10,3
  806008:	2820d53a 	srli	r16,r5,20
  80600c:	401090fa 	slli	r8,r8,3
  806010:	dc800215 	stw	r18,8(sp)
  806014:	dc400115 	stw	r17,4(sp)
  806018:	dfc00415 	stw	ra,16(sp)
  80601c:	202290fa 	slli	r17,r4,3
  806020:	dcc00315 	stw	r19,12(sp)
  806024:	4a41ffcc 	andi	r9,r9,2047
  806028:	0101ffc4 	movi	r4,2047
  80602c:	2824d7fa 	srli	r18,r5,31
  806030:	8401ffcc 	andi	r16,r16,2047
  806034:	50c6b03a 	or	r3,r10,r3
  806038:	380ed7fa 	srli	r7,r7,31
  80603c:	408ab03a 	or	r5,r8,r2
  806040:	300c90fa 	slli	r6,r6,3
  806044:	49009626 	beq	r9,r4,8062a0 <__subdf3+0x2c0>
  806048:	39c0005c 	xori	r7,r7,1
  80604c:	8245c83a 	sub	r2,r16,r9
  806050:	3c807426 	beq	r7,r18,806224 <__subdf3+0x244>
  806054:	0080af0e 	bge	zero,r2,806314 <__subdf3+0x334>
  806058:	48002a1e 	bne	r9,zero,806104 <__subdf3+0x124>
  80605c:	2988b03a 	or	r4,r5,r6
  806060:	20009a1e 	bne	r4,zero,8062cc <__subdf3+0x2ec>
  806064:	888001cc 	andi	r2,r17,7
  806068:	10000726 	beq	r2,zero,806088 <__subdf3+0xa8>
  80606c:	888003cc 	andi	r2,r17,15
  806070:	01000104 	movi	r4,4
  806074:	11000426 	beq	r2,r4,806088 <__subdf3+0xa8>
  806078:	890b883a 	add	r5,r17,r4
  80607c:	2c63803a 	cmpltu	r17,r5,r17
  806080:	1c47883a 	add	r3,r3,r17
  806084:	2823883a 	mov	r17,r5
  806088:	1880202c 	andhi	r2,r3,128
  80608c:	10005926 	beq	r2,zero,8061f4 <__subdf3+0x214>
  806090:	84000044 	addi	r16,r16,1
  806094:	0081ffc4 	movi	r2,2047
  806098:	8080be26 	beq	r16,r2,806394 <__subdf3+0x3b4>
  80609c:	017fe034 	movhi	r5,65408
  8060a0:	297fffc4 	addi	r5,r5,-1
  8060a4:	1946703a 	and	r3,r3,r5
  8060a8:	1804977a 	slli	r2,r3,29
  8060ac:	1806927a 	slli	r3,r3,9
  8060b0:	8822d0fa 	srli	r17,r17,3
  8060b4:	8401ffcc 	andi	r16,r16,2047
  8060b8:	180ad33a 	srli	r5,r3,12
  8060bc:	9100004c 	andi	r4,r18,1
  8060c0:	1444b03a 	or	r2,r2,r17
  8060c4:	80c1ffcc 	andi	r3,r16,2047
  8060c8:	1820953a 	slli	r16,r3,20
  8060cc:	20c03fcc 	andi	r3,r4,255
  8060d0:	180897fa 	slli	r4,r3,31
  8060d4:	00c00434 	movhi	r3,16
  8060d8:	18ffffc4 	addi	r3,r3,-1
  8060dc:	28c6703a 	and	r3,r5,r3
  8060e0:	1c06b03a 	or	r3,r3,r16
  8060e4:	1906b03a 	or	r3,r3,r4
  8060e8:	dfc00417 	ldw	ra,16(sp)
  8060ec:	dcc00317 	ldw	r19,12(sp)
  8060f0:	dc800217 	ldw	r18,8(sp)
  8060f4:	dc400117 	ldw	r17,4(sp)
  8060f8:	dc000017 	ldw	r16,0(sp)
  8060fc:	dec00504 	addi	sp,sp,20
  806100:	f800283a 	ret
  806104:	0101ffc4 	movi	r4,2047
  806108:	813fd626 	beq	r16,r4,806064 <__alt_mem_onchip_mem+0xff7fe064>
  80610c:	29402034 	orhi	r5,r5,128
  806110:	01000e04 	movi	r4,56
  806114:	2080a316 	blt	r4,r2,8063a4 <__subdf3+0x3c4>
  806118:	010007c4 	movi	r4,31
  80611c:	2080c616 	blt	r4,r2,806438 <__subdf3+0x458>
  806120:	01000804 	movi	r4,32
  806124:	2089c83a 	sub	r4,r4,r2
  806128:	2910983a 	sll	r8,r5,r4
  80612c:	308ed83a 	srl	r7,r6,r2
  806130:	3108983a 	sll	r4,r6,r4
  806134:	2884d83a 	srl	r2,r5,r2
  806138:	41ccb03a 	or	r6,r8,r7
  80613c:	2008c03a 	cmpne	r4,r4,zero
  806140:	310cb03a 	or	r6,r6,r4
  806144:	898dc83a 	sub	r6,r17,r6
  806148:	89a3803a 	cmpltu	r17,r17,r6
  80614c:	1887c83a 	sub	r3,r3,r2
  806150:	1c47c83a 	sub	r3,r3,r17
  806154:	3023883a 	mov	r17,r6
  806158:	1880202c 	andhi	r2,r3,128
  80615c:	10002326 	beq	r2,zero,8061ec <__subdf3+0x20c>
  806160:	04c02034 	movhi	r19,128
  806164:	9cffffc4 	addi	r19,r19,-1
  806168:	1ce6703a 	and	r19,r3,r19
  80616c:	98007a26 	beq	r19,zero,806358 <__subdf3+0x378>
  806170:	9809883a 	mov	r4,r19
  806174:	0806a600 	call	806a60 <__clzsi2>
  806178:	113ffe04 	addi	r4,r2,-8
  80617c:	00c007c4 	movi	r3,31
  806180:	19007b16 	blt	r3,r4,806370 <__subdf3+0x390>
  806184:	00800804 	movi	r2,32
  806188:	1105c83a 	sub	r2,r2,r4
  80618c:	8884d83a 	srl	r2,r17,r2
  806190:	9906983a 	sll	r3,r19,r4
  806194:	8922983a 	sll	r17,r17,r4
  806198:	10c4b03a 	or	r2,r2,r3
  80619c:	24007816 	blt	r4,r16,806380 <__subdf3+0x3a0>
  8061a0:	2421c83a 	sub	r16,r4,r16
  8061a4:	80c00044 	addi	r3,r16,1
  8061a8:	010007c4 	movi	r4,31
  8061ac:	20c09516 	blt	r4,r3,806404 <__subdf3+0x424>
  8061b0:	01400804 	movi	r5,32
  8061b4:	28cbc83a 	sub	r5,r5,r3
  8061b8:	88c8d83a 	srl	r4,r17,r3
  8061bc:	8962983a 	sll	r17,r17,r5
  8061c0:	114a983a 	sll	r5,r2,r5
  8061c4:	10c6d83a 	srl	r3,r2,r3
  8061c8:	8804c03a 	cmpne	r2,r17,zero
  8061cc:	290ab03a 	or	r5,r5,r4
  8061d0:	28a2b03a 	or	r17,r5,r2
  8061d4:	0021883a 	mov	r16,zero
  8061d8:	003fa206 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  8061dc:	2090b03a 	or	r8,r4,r2
  8061e0:	40018e26 	beq	r8,zero,80681c <__subdf3+0x83c>
  8061e4:	1007883a 	mov	r3,r2
  8061e8:	2023883a 	mov	r17,r4
  8061ec:	888001cc 	andi	r2,r17,7
  8061f0:	103f9e1e 	bne	r2,zero,80606c <__alt_mem_onchip_mem+0xff7fe06c>
  8061f4:	1804977a 	slli	r2,r3,29
  8061f8:	8822d0fa 	srli	r17,r17,3
  8061fc:	1810d0fa 	srli	r8,r3,3
  806200:	9100004c 	andi	r4,r18,1
  806204:	1444b03a 	or	r2,r2,r17
  806208:	00c1ffc4 	movi	r3,2047
  80620c:	80c02826 	beq	r16,r3,8062b0 <__subdf3+0x2d0>
  806210:	01400434 	movhi	r5,16
  806214:	297fffc4 	addi	r5,r5,-1
  806218:	80e0703a 	and	r16,r16,r3
  80621c:	414a703a 	and	r5,r8,r5
  806220:	003fa806 	br	8060c4 <__alt_mem_onchip_mem+0xff7fe0c4>
  806224:	0080630e 	bge	zero,r2,8063b4 <__subdf3+0x3d4>
  806228:	48003026 	beq	r9,zero,8062ec <__subdf3+0x30c>
  80622c:	0101ffc4 	movi	r4,2047
  806230:	813f8c26 	beq	r16,r4,806064 <__alt_mem_onchip_mem+0xff7fe064>
  806234:	29402034 	orhi	r5,r5,128
  806238:	01000e04 	movi	r4,56
  80623c:	2080a90e 	bge	r4,r2,8064e4 <__subdf3+0x504>
  806240:	298cb03a 	or	r6,r5,r6
  806244:	3012c03a 	cmpne	r9,r6,zero
  806248:	0005883a 	mov	r2,zero
  80624c:	4c53883a 	add	r9,r9,r17
  806250:	4c63803a 	cmpltu	r17,r9,r17
  806254:	10c7883a 	add	r3,r2,r3
  806258:	88c7883a 	add	r3,r17,r3
  80625c:	4823883a 	mov	r17,r9
  806260:	1880202c 	andhi	r2,r3,128
  806264:	1000d026 	beq	r2,zero,8065a8 <__subdf3+0x5c8>
  806268:	84000044 	addi	r16,r16,1
  80626c:	0081ffc4 	movi	r2,2047
  806270:	8080fe26 	beq	r16,r2,80666c <__subdf3+0x68c>
  806274:	00bfe034 	movhi	r2,65408
  806278:	10bfffc4 	addi	r2,r2,-1
  80627c:	1886703a 	and	r3,r3,r2
  806280:	880ad07a 	srli	r5,r17,1
  806284:	180497fa 	slli	r2,r3,31
  806288:	8900004c 	andi	r4,r17,1
  80628c:	2922b03a 	or	r17,r5,r4
  806290:	1806d07a 	srli	r3,r3,1
  806294:	1462b03a 	or	r17,r2,r17
  806298:	3825883a 	mov	r18,r7
  80629c:	003f7106 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  8062a0:	2984b03a 	or	r2,r5,r6
  8062a4:	103f6826 	beq	r2,zero,806048 <__alt_mem_onchip_mem+0xff7fe048>
  8062a8:	39c03fcc 	andi	r7,r7,255
  8062ac:	003f6706 	br	80604c <__alt_mem_onchip_mem+0xff7fe04c>
  8062b0:	4086b03a 	or	r3,r8,r2
  8062b4:	18015226 	beq	r3,zero,806800 <__subdf3+0x820>
  8062b8:	00c00434 	movhi	r3,16
  8062bc:	41400234 	orhi	r5,r8,8
  8062c0:	18ffffc4 	addi	r3,r3,-1
  8062c4:	28ca703a 	and	r5,r5,r3
  8062c8:	003f7e06 	br	8060c4 <__alt_mem_onchip_mem+0xff7fe0c4>
  8062cc:	10bfffc4 	addi	r2,r2,-1
  8062d0:	1000491e 	bne	r2,zero,8063f8 <__subdf3+0x418>
  8062d4:	898fc83a 	sub	r7,r17,r6
  8062d8:	89e3803a 	cmpltu	r17,r17,r7
  8062dc:	1947c83a 	sub	r3,r3,r5
  8062e0:	1c47c83a 	sub	r3,r3,r17
  8062e4:	3823883a 	mov	r17,r7
  8062e8:	003f9b06 	br	806158 <__alt_mem_onchip_mem+0xff7fe158>
  8062ec:	2988b03a 	or	r4,r5,r6
  8062f0:	203f5c26 	beq	r4,zero,806064 <__alt_mem_onchip_mem+0xff7fe064>
  8062f4:	10bfffc4 	addi	r2,r2,-1
  8062f8:	1000931e 	bne	r2,zero,806548 <__subdf3+0x568>
  8062fc:	898d883a 	add	r6,r17,r6
  806300:	3463803a 	cmpltu	r17,r6,r17
  806304:	1947883a 	add	r3,r3,r5
  806308:	88c7883a 	add	r3,r17,r3
  80630c:	3023883a 	mov	r17,r6
  806310:	003fd306 	br	806260 <__alt_mem_onchip_mem+0xff7fe260>
  806314:	1000541e 	bne	r2,zero,806468 <__subdf3+0x488>
  806318:	80800044 	addi	r2,r16,1
  80631c:	1081ffcc 	andi	r2,r2,2047
  806320:	01000044 	movi	r4,1
  806324:	2080a20e 	bge	r4,r2,8065b0 <__subdf3+0x5d0>
  806328:	8989c83a 	sub	r4,r17,r6
  80632c:	8905803a 	cmpltu	r2,r17,r4
  806330:	1967c83a 	sub	r19,r3,r5
  806334:	98a7c83a 	sub	r19,r19,r2
  806338:	9880202c 	andhi	r2,r19,128
  80633c:	10006326 	beq	r2,zero,8064cc <__subdf3+0x4ec>
  806340:	3463c83a 	sub	r17,r6,r17
  806344:	28c7c83a 	sub	r3,r5,r3
  806348:	344d803a 	cmpltu	r6,r6,r17
  80634c:	19a7c83a 	sub	r19,r3,r6
  806350:	3825883a 	mov	r18,r7
  806354:	983f861e 	bne	r19,zero,806170 <__alt_mem_onchip_mem+0xff7fe170>
  806358:	8809883a 	mov	r4,r17
  80635c:	0806a600 	call	806a60 <__clzsi2>
  806360:	10800804 	addi	r2,r2,32
  806364:	113ffe04 	addi	r4,r2,-8
  806368:	00c007c4 	movi	r3,31
  80636c:	193f850e 	bge	r3,r4,806184 <__alt_mem_onchip_mem+0xff7fe184>
  806370:	10bff604 	addi	r2,r2,-40
  806374:	8884983a 	sll	r2,r17,r2
  806378:	0023883a 	mov	r17,zero
  80637c:	243f880e 	bge	r4,r16,8061a0 <__alt_mem_onchip_mem+0xff7fe1a0>
  806380:	00ffe034 	movhi	r3,65408
  806384:	18ffffc4 	addi	r3,r3,-1
  806388:	8121c83a 	sub	r16,r16,r4
  80638c:	10c6703a 	and	r3,r2,r3
  806390:	003f3406 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806394:	9100004c 	andi	r4,r18,1
  806398:	000b883a 	mov	r5,zero
  80639c:	0005883a 	mov	r2,zero
  8063a0:	003f4806 	br	8060c4 <__alt_mem_onchip_mem+0xff7fe0c4>
  8063a4:	298cb03a 	or	r6,r5,r6
  8063a8:	300cc03a 	cmpne	r6,r6,zero
  8063ac:	0005883a 	mov	r2,zero
  8063b0:	003f6406 	br	806144 <__alt_mem_onchip_mem+0xff7fe144>
  8063b4:	10009a1e 	bne	r2,zero,806620 <__subdf3+0x640>
  8063b8:	82400044 	addi	r9,r16,1
  8063bc:	4881ffcc 	andi	r2,r9,2047
  8063c0:	02800044 	movi	r10,1
  8063c4:	5080670e 	bge	r10,r2,806564 <__subdf3+0x584>
  8063c8:	0081ffc4 	movi	r2,2047
  8063cc:	4880af26 	beq	r9,r2,80668c <__subdf3+0x6ac>
  8063d0:	898d883a 	add	r6,r17,r6
  8063d4:	1945883a 	add	r2,r3,r5
  8063d8:	3447803a 	cmpltu	r3,r6,r17
  8063dc:	1887883a 	add	r3,r3,r2
  8063e0:	182297fa 	slli	r17,r3,31
  8063e4:	300cd07a 	srli	r6,r6,1
  8063e8:	1806d07a 	srli	r3,r3,1
  8063ec:	4821883a 	mov	r16,r9
  8063f0:	89a2b03a 	or	r17,r17,r6
  8063f4:	003f1b06 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  8063f8:	0101ffc4 	movi	r4,2047
  8063fc:	813f441e 	bne	r16,r4,806110 <__alt_mem_onchip_mem+0xff7fe110>
  806400:	003f1806 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806404:	843ff844 	addi	r16,r16,-31
  806408:	01400804 	movi	r5,32
  80640c:	1408d83a 	srl	r4,r2,r16
  806410:	19405026 	beq	r3,r5,806554 <__subdf3+0x574>
  806414:	01401004 	movi	r5,64
  806418:	28c7c83a 	sub	r3,r5,r3
  80641c:	10c4983a 	sll	r2,r2,r3
  806420:	88a2b03a 	or	r17,r17,r2
  806424:	8822c03a 	cmpne	r17,r17,zero
  806428:	2462b03a 	or	r17,r4,r17
  80642c:	0007883a 	mov	r3,zero
  806430:	0021883a 	mov	r16,zero
  806434:	003f6d06 	br	8061ec <__alt_mem_onchip_mem+0xff7fe1ec>
  806438:	11fff804 	addi	r7,r2,-32
  80643c:	01000804 	movi	r4,32
  806440:	29ced83a 	srl	r7,r5,r7
  806444:	11004526 	beq	r2,r4,80655c <__subdf3+0x57c>
  806448:	01001004 	movi	r4,64
  80644c:	2089c83a 	sub	r4,r4,r2
  806450:	2904983a 	sll	r2,r5,r4
  806454:	118cb03a 	or	r6,r2,r6
  806458:	300cc03a 	cmpne	r6,r6,zero
  80645c:	398cb03a 	or	r6,r7,r6
  806460:	0005883a 	mov	r2,zero
  806464:	003f3706 	br	806144 <__alt_mem_onchip_mem+0xff7fe144>
  806468:	80002a26 	beq	r16,zero,806514 <__subdf3+0x534>
  80646c:	0101ffc4 	movi	r4,2047
  806470:	49006626 	beq	r9,r4,80660c <__subdf3+0x62c>
  806474:	0085c83a 	sub	r2,zero,r2
  806478:	18c02034 	orhi	r3,r3,128
  80647c:	01000e04 	movi	r4,56
  806480:	20807e16 	blt	r4,r2,80667c <__subdf3+0x69c>
  806484:	010007c4 	movi	r4,31
  806488:	2080e716 	blt	r4,r2,806828 <__subdf3+0x848>
  80648c:	01000804 	movi	r4,32
  806490:	2089c83a 	sub	r4,r4,r2
  806494:	1914983a 	sll	r10,r3,r4
  806498:	8890d83a 	srl	r8,r17,r2
  80649c:	8908983a 	sll	r4,r17,r4
  8064a0:	1884d83a 	srl	r2,r3,r2
  8064a4:	5222b03a 	or	r17,r10,r8
  8064a8:	2006c03a 	cmpne	r3,r4,zero
  8064ac:	88e2b03a 	or	r17,r17,r3
  8064b0:	3463c83a 	sub	r17,r6,r17
  8064b4:	2885c83a 	sub	r2,r5,r2
  8064b8:	344d803a 	cmpltu	r6,r6,r17
  8064bc:	1187c83a 	sub	r3,r2,r6
  8064c0:	4821883a 	mov	r16,r9
  8064c4:	3825883a 	mov	r18,r7
  8064c8:	003f2306 	br	806158 <__alt_mem_onchip_mem+0xff7fe158>
  8064cc:	24d0b03a 	or	r8,r4,r19
  8064d0:	40001b1e 	bne	r8,zero,806540 <__subdf3+0x560>
  8064d4:	0005883a 	mov	r2,zero
  8064d8:	0009883a 	mov	r4,zero
  8064dc:	0021883a 	mov	r16,zero
  8064e0:	003f4906 	br	806208 <__alt_mem_onchip_mem+0xff7fe208>
  8064e4:	010007c4 	movi	r4,31
  8064e8:	20803a16 	blt	r4,r2,8065d4 <__subdf3+0x5f4>
  8064ec:	01000804 	movi	r4,32
  8064f0:	2089c83a 	sub	r4,r4,r2
  8064f4:	2912983a 	sll	r9,r5,r4
  8064f8:	3090d83a 	srl	r8,r6,r2
  8064fc:	3108983a 	sll	r4,r6,r4
  806500:	2884d83a 	srl	r2,r5,r2
  806504:	4a12b03a 	or	r9,r9,r8
  806508:	2008c03a 	cmpne	r4,r4,zero
  80650c:	4912b03a 	or	r9,r9,r4
  806510:	003f4e06 	br	80624c <__alt_mem_onchip_mem+0xff7fe24c>
  806514:	1c48b03a 	or	r4,r3,r17
  806518:	20003c26 	beq	r4,zero,80660c <__subdf3+0x62c>
  80651c:	0084303a 	nor	r2,zero,r2
  806520:	1000381e 	bne	r2,zero,806604 <__subdf3+0x624>
  806524:	3463c83a 	sub	r17,r6,r17
  806528:	28c5c83a 	sub	r2,r5,r3
  80652c:	344d803a 	cmpltu	r6,r6,r17
  806530:	1187c83a 	sub	r3,r2,r6
  806534:	4821883a 	mov	r16,r9
  806538:	3825883a 	mov	r18,r7
  80653c:	003f0606 	br	806158 <__alt_mem_onchip_mem+0xff7fe158>
  806540:	2023883a 	mov	r17,r4
  806544:	003f0906 	br	80616c <__alt_mem_onchip_mem+0xff7fe16c>
  806548:	0101ffc4 	movi	r4,2047
  80654c:	813f3a1e 	bne	r16,r4,806238 <__alt_mem_onchip_mem+0xff7fe238>
  806550:	003ec406 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806554:	0005883a 	mov	r2,zero
  806558:	003fb106 	br	806420 <__alt_mem_onchip_mem+0xff7fe420>
  80655c:	0005883a 	mov	r2,zero
  806560:	003fbc06 	br	806454 <__alt_mem_onchip_mem+0xff7fe454>
  806564:	1c44b03a 	or	r2,r3,r17
  806568:	80008e1e 	bne	r16,zero,8067a4 <__subdf3+0x7c4>
  80656c:	1000c826 	beq	r2,zero,806890 <__subdf3+0x8b0>
  806570:	2984b03a 	or	r2,r5,r6
  806574:	103ebb26 	beq	r2,zero,806064 <__alt_mem_onchip_mem+0xff7fe064>
  806578:	8989883a 	add	r4,r17,r6
  80657c:	1945883a 	add	r2,r3,r5
  806580:	2447803a 	cmpltu	r3,r4,r17
  806584:	1887883a 	add	r3,r3,r2
  806588:	1880202c 	andhi	r2,r3,128
  80658c:	2023883a 	mov	r17,r4
  806590:	103f1626 	beq	r2,zero,8061ec <__alt_mem_onchip_mem+0xff7fe1ec>
  806594:	00bfe034 	movhi	r2,65408
  806598:	10bfffc4 	addi	r2,r2,-1
  80659c:	5021883a 	mov	r16,r10
  8065a0:	1886703a 	and	r3,r3,r2
  8065a4:	003eaf06 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  8065a8:	3825883a 	mov	r18,r7
  8065ac:	003f0f06 	br	8061ec <__alt_mem_onchip_mem+0xff7fe1ec>
  8065b0:	1c44b03a 	or	r2,r3,r17
  8065b4:	8000251e 	bne	r16,zero,80664c <__subdf3+0x66c>
  8065b8:	1000661e 	bne	r2,zero,806754 <__subdf3+0x774>
  8065bc:	2990b03a 	or	r8,r5,r6
  8065c0:	40009626 	beq	r8,zero,80681c <__subdf3+0x83c>
  8065c4:	2807883a 	mov	r3,r5
  8065c8:	3023883a 	mov	r17,r6
  8065cc:	3825883a 	mov	r18,r7
  8065d0:	003ea406 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  8065d4:	127ff804 	addi	r9,r2,-32
  8065d8:	01000804 	movi	r4,32
  8065dc:	2a52d83a 	srl	r9,r5,r9
  8065e0:	11008c26 	beq	r2,r4,806814 <__subdf3+0x834>
  8065e4:	01001004 	movi	r4,64
  8065e8:	2085c83a 	sub	r2,r4,r2
  8065ec:	2884983a 	sll	r2,r5,r2
  8065f0:	118cb03a 	or	r6,r2,r6
  8065f4:	300cc03a 	cmpne	r6,r6,zero
  8065f8:	4992b03a 	or	r9,r9,r6
  8065fc:	0005883a 	mov	r2,zero
  806600:	003f1206 	br	80624c <__alt_mem_onchip_mem+0xff7fe24c>
  806604:	0101ffc4 	movi	r4,2047
  806608:	493f9c1e 	bne	r9,r4,80647c <__alt_mem_onchip_mem+0xff7fe47c>
  80660c:	2807883a 	mov	r3,r5
  806610:	3023883a 	mov	r17,r6
  806614:	4821883a 	mov	r16,r9
  806618:	3825883a 	mov	r18,r7
  80661c:	003e9106 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806620:	80001f1e 	bne	r16,zero,8066a0 <__subdf3+0x6c0>
  806624:	1c48b03a 	or	r4,r3,r17
  806628:	20005a26 	beq	r4,zero,806794 <__subdf3+0x7b4>
  80662c:	0084303a 	nor	r2,zero,r2
  806630:	1000561e 	bne	r2,zero,80678c <__subdf3+0x7ac>
  806634:	89a3883a 	add	r17,r17,r6
  806638:	1945883a 	add	r2,r3,r5
  80663c:	898d803a 	cmpltu	r6,r17,r6
  806640:	3087883a 	add	r3,r6,r2
  806644:	4821883a 	mov	r16,r9
  806648:	003f0506 	br	806260 <__alt_mem_onchip_mem+0xff7fe260>
  80664c:	10002b1e 	bne	r2,zero,8066fc <__subdf3+0x71c>
  806650:	2984b03a 	or	r2,r5,r6
  806654:	10008026 	beq	r2,zero,806858 <__subdf3+0x878>
  806658:	2807883a 	mov	r3,r5
  80665c:	3023883a 	mov	r17,r6
  806660:	3825883a 	mov	r18,r7
  806664:	0401ffc4 	movi	r16,2047
  806668:	003e7e06 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  80666c:	3809883a 	mov	r4,r7
  806670:	0011883a 	mov	r8,zero
  806674:	0005883a 	mov	r2,zero
  806678:	003ee306 	br	806208 <__alt_mem_onchip_mem+0xff7fe208>
  80667c:	1c62b03a 	or	r17,r3,r17
  806680:	8822c03a 	cmpne	r17,r17,zero
  806684:	0005883a 	mov	r2,zero
  806688:	003f8906 	br	8064b0 <__alt_mem_onchip_mem+0xff7fe4b0>
  80668c:	3809883a 	mov	r4,r7
  806690:	4821883a 	mov	r16,r9
  806694:	0011883a 	mov	r8,zero
  806698:	0005883a 	mov	r2,zero
  80669c:	003eda06 	br	806208 <__alt_mem_onchip_mem+0xff7fe208>
  8066a0:	0101ffc4 	movi	r4,2047
  8066a4:	49003b26 	beq	r9,r4,806794 <__subdf3+0x7b4>
  8066a8:	0085c83a 	sub	r2,zero,r2
  8066ac:	18c02034 	orhi	r3,r3,128
  8066b0:	01000e04 	movi	r4,56
  8066b4:	20806e16 	blt	r4,r2,806870 <__subdf3+0x890>
  8066b8:	010007c4 	movi	r4,31
  8066bc:	20807716 	blt	r4,r2,80689c <__subdf3+0x8bc>
  8066c0:	01000804 	movi	r4,32
  8066c4:	2089c83a 	sub	r4,r4,r2
  8066c8:	1914983a 	sll	r10,r3,r4
  8066cc:	8890d83a 	srl	r8,r17,r2
  8066d0:	8908983a 	sll	r4,r17,r4
  8066d4:	1884d83a 	srl	r2,r3,r2
  8066d8:	5222b03a 	or	r17,r10,r8
  8066dc:	2006c03a 	cmpne	r3,r4,zero
  8066e0:	88e2b03a 	or	r17,r17,r3
  8066e4:	89a3883a 	add	r17,r17,r6
  8066e8:	1145883a 	add	r2,r2,r5
  8066ec:	898d803a 	cmpltu	r6,r17,r6
  8066f0:	3087883a 	add	r3,r6,r2
  8066f4:	4821883a 	mov	r16,r9
  8066f8:	003ed906 	br	806260 <__alt_mem_onchip_mem+0xff7fe260>
  8066fc:	2984b03a 	or	r2,r5,r6
  806700:	10004226 	beq	r2,zero,80680c <__subdf3+0x82c>
  806704:	1808d0fa 	srli	r4,r3,3
  806708:	8822d0fa 	srli	r17,r17,3
  80670c:	1806977a 	slli	r3,r3,29
  806710:	2080022c 	andhi	r2,r4,8
  806714:	1c62b03a 	or	r17,r3,r17
  806718:	10000826 	beq	r2,zero,80673c <__subdf3+0x75c>
  80671c:	2812d0fa 	srli	r9,r5,3
  806720:	4880022c 	andhi	r2,r9,8
  806724:	1000051e 	bne	r2,zero,80673c <__subdf3+0x75c>
  806728:	300cd0fa 	srli	r6,r6,3
  80672c:	2804977a 	slli	r2,r5,29
  806730:	4809883a 	mov	r4,r9
  806734:	3825883a 	mov	r18,r7
  806738:	11a2b03a 	or	r17,r2,r6
  80673c:	8806d77a 	srli	r3,r17,29
  806740:	200890fa 	slli	r4,r4,3
  806744:	882290fa 	slli	r17,r17,3
  806748:	0401ffc4 	movi	r16,2047
  80674c:	1906b03a 	or	r3,r3,r4
  806750:	003e4406 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806754:	2984b03a 	or	r2,r5,r6
  806758:	103e4226 	beq	r2,zero,806064 <__alt_mem_onchip_mem+0xff7fe064>
  80675c:	8989c83a 	sub	r4,r17,r6
  806760:	8911803a 	cmpltu	r8,r17,r4
  806764:	1945c83a 	sub	r2,r3,r5
  806768:	1205c83a 	sub	r2,r2,r8
  80676c:	1200202c 	andhi	r8,r2,128
  806770:	403e9a26 	beq	r8,zero,8061dc <__alt_mem_onchip_mem+0xff7fe1dc>
  806774:	3463c83a 	sub	r17,r6,r17
  806778:	28c5c83a 	sub	r2,r5,r3
  80677c:	344d803a 	cmpltu	r6,r6,r17
  806780:	1187c83a 	sub	r3,r2,r6
  806784:	3825883a 	mov	r18,r7
  806788:	003e3606 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  80678c:	0101ffc4 	movi	r4,2047
  806790:	493fc71e 	bne	r9,r4,8066b0 <__alt_mem_onchip_mem+0xff7fe6b0>
  806794:	2807883a 	mov	r3,r5
  806798:	3023883a 	mov	r17,r6
  80679c:	4821883a 	mov	r16,r9
  8067a0:	003e3006 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  8067a4:	10003626 	beq	r2,zero,806880 <__subdf3+0x8a0>
  8067a8:	2984b03a 	or	r2,r5,r6
  8067ac:	10001726 	beq	r2,zero,80680c <__subdf3+0x82c>
  8067b0:	1808d0fa 	srli	r4,r3,3
  8067b4:	8822d0fa 	srli	r17,r17,3
  8067b8:	1806977a 	slli	r3,r3,29
  8067bc:	2080022c 	andhi	r2,r4,8
  8067c0:	1c62b03a 	or	r17,r3,r17
  8067c4:	10000726 	beq	r2,zero,8067e4 <__subdf3+0x804>
  8067c8:	2812d0fa 	srli	r9,r5,3
  8067cc:	4880022c 	andhi	r2,r9,8
  8067d0:	1000041e 	bne	r2,zero,8067e4 <__subdf3+0x804>
  8067d4:	300cd0fa 	srli	r6,r6,3
  8067d8:	2804977a 	slli	r2,r5,29
  8067dc:	4809883a 	mov	r4,r9
  8067e0:	11a2b03a 	or	r17,r2,r6
  8067e4:	8806d77a 	srli	r3,r17,29
  8067e8:	200890fa 	slli	r4,r4,3
  8067ec:	882290fa 	slli	r17,r17,3
  8067f0:	3825883a 	mov	r18,r7
  8067f4:	1906b03a 	or	r3,r3,r4
  8067f8:	0401ffc4 	movi	r16,2047
  8067fc:	003e1906 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806800:	000b883a 	mov	r5,zero
  806804:	0005883a 	mov	r2,zero
  806808:	003e2e06 	br	8060c4 <__alt_mem_onchip_mem+0xff7fe0c4>
  80680c:	0401ffc4 	movi	r16,2047
  806810:	003e1406 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806814:	0005883a 	mov	r2,zero
  806818:	003f7506 	br	8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  80681c:	0005883a 	mov	r2,zero
  806820:	0009883a 	mov	r4,zero
  806824:	003e7806 	br	806208 <__alt_mem_onchip_mem+0xff7fe208>
  806828:	123ff804 	addi	r8,r2,-32
  80682c:	01000804 	movi	r4,32
  806830:	1a10d83a 	srl	r8,r3,r8
  806834:	11002526 	beq	r2,r4,8068cc <__subdf3+0x8ec>
  806838:	01001004 	movi	r4,64
  80683c:	2085c83a 	sub	r2,r4,r2
  806840:	1884983a 	sll	r2,r3,r2
  806844:	1444b03a 	or	r2,r2,r17
  806848:	1004c03a 	cmpne	r2,r2,zero
  80684c:	40a2b03a 	or	r17,r8,r2
  806850:	0005883a 	mov	r2,zero
  806854:	003f1606 	br	8064b0 <__alt_mem_onchip_mem+0xff7fe4b0>
  806858:	02000434 	movhi	r8,16
  80685c:	0009883a 	mov	r4,zero
  806860:	423fffc4 	addi	r8,r8,-1
  806864:	00bfffc4 	movi	r2,-1
  806868:	0401ffc4 	movi	r16,2047
  80686c:	003e6606 	br	806208 <__alt_mem_onchip_mem+0xff7fe208>
  806870:	1c62b03a 	or	r17,r3,r17
  806874:	8822c03a 	cmpne	r17,r17,zero
  806878:	0005883a 	mov	r2,zero
  80687c:	003f9906 	br	8066e4 <__alt_mem_onchip_mem+0xff7fe6e4>
  806880:	2807883a 	mov	r3,r5
  806884:	3023883a 	mov	r17,r6
  806888:	0401ffc4 	movi	r16,2047
  80688c:	003df506 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  806890:	2807883a 	mov	r3,r5
  806894:	3023883a 	mov	r17,r6
  806898:	003df206 	br	806064 <__alt_mem_onchip_mem+0xff7fe064>
  80689c:	123ff804 	addi	r8,r2,-32
  8068a0:	01000804 	movi	r4,32
  8068a4:	1a10d83a 	srl	r8,r3,r8
  8068a8:	11000a26 	beq	r2,r4,8068d4 <__subdf3+0x8f4>
  8068ac:	01001004 	movi	r4,64
  8068b0:	2085c83a 	sub	r2,r4,r2
  8068b4:	1884983a 	sll	r2,r3,r2
  8068b8:	1444b03a 	or	r2,r2,r17
  8068bc:	1004c03a 	cmpne	r2,r2,zero
  8068c0:	40a2b03a 	or	r17,r8,r2
  8068c4:	0005883a 	mov	r2,zero
  8068c8:	003f8606 	br	8066e4 <__alt_mem_onchip_mem+0xff7fe6e4>
  8068cc:	0005883a 	mov	r2,zero
  8068d0:	003fdc06 	br	806844 <__alt_mem_onchip_mem+0xff7fe844>
  8068d4:	0005883a 	mov	r2,zero
  8068d8:	003ff706 	br	8068b8 <__alt_mem_onchip_mem+0xff7fe8b8>

008068dc <__floatsidf>:
  8068dc:	defffd04 	addi	sp,sp,-12
  8068e0:	dfc00215 	stw	ra,8(sp)
  8068e4:	dc400115 	stw	r17,4(sp)
  8068e8:	dc000015 	stw	r16,0(sp)
  8068ec:	20002b26 	beq	r4,zero,80699c <__floatsidf+0xc0>
  8068f0:	2023883a 	mov	r17,r4
  8068f4:	2020d7fa 	srli	r16,r4,31
  8068f8:	20002d16 	blt	r4,zero,8069b0 <__floatsidf+0xd4>
  8068fc:	8809883a 	mov	r4,r17
  806900:	0806a600 	call	806a60 <__clzsi2>
  806904:	01410784 	movi	r5,1054
  806908:	288bc83a 	sub	r5,r5,r2
  80690c:	01010cc4 	movi	r4,1075
  806910:	2149c83a 	sub	r4,r4,r5
  806914:	00c007c4 	movi	r3,31
  806918:	1900160e 	bge	r3,r4,806974 <__floatsidf+0x98>
  80691c:	00c104c4 	movi	r3,1043
  806920:	1947c83a 	sub	r3,r3,r5
  806924:	88c6983a 	sll	r3,r17,r3
  806928:	00800434 	movhi	r2,16
  80692c:	10bfffc4 	addi	r2,r2,-1
  806930:	1886703a 	and	r3,r3,r2
  806934:	2941ffcc 	andi	r5,r5,2047
  806938:	800d883a 	mov	r6,r16
  80693c:	0005883a 	mov	r2,zero
  806940:	280a953a 	slli	r5,r5,20
  806944:	31803fcc 	andi	r6,r6,255
  806948:	01000434 	movhi	r4,16
  80694c:	300c97fa 	slli	r6,r6,31
  806950:	213fffc4 	addi	r4,r4,-1
  806954:	1906703a 	and	r3,r3,r4
  806958:	1946b03a 	or	r3,r3,r5
  80695c:	1986b03a 	or	r3,r3,r6
  806960:	dfc00217 	ldw	ra,8(sp)
  806964:	dc400117 	ldw	r17,4(sp)
  806968:	dc000017 	ldw	r16,0(sp)
  80696c:	dec00304 	addi	sp,sp,12
  806970:	f800283a 	ret
  806974:	00c002c4 	movi	r3,11
  806978:	1887c83a 	sub	r3,r3,r2
  80697c:	88c6d83a 	srl	r3,r17,r3
  806980:	8904983a 	sll	r2,r17,r4
  806984:	01000434 	movhi	r4,16
  806988:	213fffc4 	addi	r4,r4,-1
  80698c:	2941ffcc 	andi	r5,r5,2047
  806990:	1906703a 	and	r3,r3,r4
  806994:	800d883a 	mov	r6,r16
  806998:	003fe906 	br	806940 <__alt_mem_onchip_mem+0xff7fe940>
  80699c:	000d883a 	mov	r6,zero
  8069a0:	000b883a 	mov	r5,zero
  8069a4:	0007883a 	mov	r3,zero
  8069a8:	0005883a 	mov	r2,zero
  8069ac:	003fe406 	br	806940 <__alt_mem_onchip_mem+0xff7fe940>
  8069b0:	0123c83a 	sub	r17,zero,r4
  8069b4:	003fd106 	br	8068fc <__alt_mem_onchip_mem+0xff7fe8fc>

008069b8 <__floatunsidf>:
  8069b8:	defffe04 	addi	sp,sp,-8
  8069bc:	dc000015 	stw	r16,0(sp)
  8069c0:	dfc00115 	stw	ra,4(sp)
  8069c4:	2021883a 	mov	r16,r4
  8069c8:	20002226 	beq	r4,zero,806a54 <__floatunsidf+0x9c>
  8069cc:	0806a600 	call	806a60 <__clzsi2>
  8069d0:	01010784 	movi	r4,1054
  8069d4:	2089c83a 	sub	r4,r4,r2
  8069d8:	01810cc4 	movi	r6,1075
  8069dc:	310dc83a 	sub	r6,r6,r4
  8069e0:	00c007c4 	movi	r3,31
  8069e4:	1980120e 	bge	r3,r6,806a30 <__floatunsidf+0x78>
  8069e8:	00c104c4 	movi	r3,1043
  8069ec:	1907c83a 	sub	r3,r3,r4
  8069f0:	80ca983a 	sll	r5,r16,r3
  8069f4:	00800434 	movhi	r2,16
  8069f8:	10bfffc4 	addi	r2,r2,-1
  8069fc:	2101ffcc 	andi	r4,r4,2047
  806a00:	0021883a 	mov	r16,zero
  806a04:	288a703a 	and	r5,r5,r2
  806a08:	2008953a 	slli	r4,r4,20
  806a0c:	00c00434 	movhi	r3,16
  806a10:	18ffffc4 	addi	r3,r3,-1
  806a14:	28c6703a 	and	r3,r5,r3
  806a18:	8005883a 	mov	r2,r16
  806a1c:	1906b03a 	or	r3,r3,r4
  806a20:	dfc00117 	ldw	ra,4(sp)
  806a24:	dc000017 	ldw	r16,0(sp)
  806a28:	dec00204 	addi	sp,sp,8
  806a2c:	f800283a 	ret
  806a30:	00c002c4 	movi	r3,11
  806a34:	188bc83a 	sub	r5,r3,r2
  806a38:	814ad83a 	srl	r5,r16,r5
  806a3c:	00c00434 	movhi	r3,16
  806a40:	18ffffc4 	addi	r3,r3,-1
  806a44:	81a0983a 	sll	r16,r16,r6
  806a48:	2101ffcc 	andi	r4,r4,2047
  806a4c:	28ca703a 	and	r5,r5,r3
  806a50:	003fed06 	br	806a08 <__alt_mem_onchip_mem+0xff7fea08>
  806a54:	0009883a 	mov	r4,zero
  806a58:	000b883a 	mov	r5,zero
  806a5c:	003fea06 	br	806a08 <__alt_mem_onchip_mem+0xff7fea08>

00806a60 <__clzsi2>:
  806a60:	00bfffd4 	movui	r2,65535
  806a64:	11000536 	bltu	r2,r4,806a7c <__clzsi2+0x1c>
  806a68:	00803fc4 	movi	r2,255
  806a6c:	11000f36 	bltu	r2,r4,806aac <__clzsi2+0x4c>
  806a70:	00800804 	movi	r2,32
  806a74:	0007883a 	mov	r3,zero
  806a78:	00000506 	br	806a90 <__clzsi2+0x30>
  806a7c:	00804034 	movhi	r2,256
  806a80:	10bfffc4 	addi	r2,r2,-1
  806a84:	11000c2e 	bgeu	r2,r4,806ab8 <__clzsi2+0x58>
  806a88:	00800204 	movi	r2,8
  806a8c:	00c00604 	movi	r3,24
  806a90:	20c8d83a 	srl	r4,r4,r3
  806a94:	00c02074 	movhi	r3,129
  806a98:	18f7d2c4 	addi	r3,r3,-8373
  806a9c:	1909883a 	add	r4,r3,r4
  806aa0:	20c00003 	ldbu	r3,0(r4)
  806aa4:	10c5c83a 	sub	r2,r2,r3
  806aa8:	f800283a 	ret
  806aac:	00800604 	movi	r2,24
  806ab0:	00c00204 	movi	r3,8
  806ab4:	003ff606 	br	806a90 <__alt_mem_onchip_mem+0xff7fea90>
  806ab8:	00800404 	movi	r2,16
  806abc:	1007883a 	mov	r3,r2
  806ac0:	003ff306 	br	806a90 <__alt_mem_onchip_mem+0xff7fea90>

00806ac4 <_putchar_r>:
  806ac4:	21800217 	ldw	r6,8(r4)
  806ac8:	08082f01 	jmpi	8082f0 <_putc_r>

00806acc <putchar>:
  806acc:	00802074 	movhi	r2,129
  806ad0:	10bfcd04 	addi	r2,r2,-204
  806ad4:	200b883a 	mov	r5,r4
  806ad8:	11000017 	ldw	r4,0(r2)
  806adc:	21800217 	ldw	r6,8(r4)
  806ae0:	08082f01 	jmpi	8082f0 <_putc_r>

00806ae4 <_puts_r>:
  806ae4:	defff604 	addi	sp,sp,-40
  806ae8:	dc000715 	stw	r16,28(sp)
  806aec:	2021883a 	mov	r16,r4
  806af0:	2809883a 	mov	r4,r5
  806af4:	dc400815 	stw	r17,32(sp)
  806af8:	dfc00915 	stw	ra,36(sp)
  806afc:	2823883a 	mov	r17,r5
  806b00:	0806bb80 	call	806bb8 <strlen>
  806b04:	10c00044 	addi	r3,r2,1
  806b08:	d8800115 	stw	r2,4(sp)
  806b0c:	00802074 	movhi	r2,129
  806b10:	10b81304 	addi	r2,r2,-8116
  806b14:	d8800215 	stw	r2,8(sp)
  806b18:	00800044 	movi	r2,1
  806b1c:	d8800315 	stw	r2,12(sp)
  806b20:	00800084 	movi	r2,2
  806b24:	dc400015 	stw	r17,0(sp)
  806b28:	d8c00615 	stw	r3,24(sp)
  806b2c:	dec00415 	stw	sp,16(sp)
  806b30:	d8800515 	stw	r2,20(sp)
  806b34:	80000226 	beq	r16,zero,806b40 <_puts_r+0x5c>
  806b38:	80800e17 	ldw	r2,56(r16)
  806b3c:	10001426 	beq	r2,zero,806b90 <_puts_r+0xac>
  806b40:	81400217 	ldw	r5,8(r16)
  806b44:	2880030b 	ldhu	r2,12(r5)
  806b48:	10c8000c 	andi	r3,r2,8192
  806b4c:	1800061e 	bne	r3,zero,806b68 <_puts_r+0x84>
  806b50:	29001917 	ldw	r4,100(r5)
  806b54:	00f7ffc4 	movi	r3,-8193
  806b58:	10880014 	ori	r2,r2,8192
  806b5c:	20c6703a 	and	r3,r4,r3
  806b60:	2880030d 	sth	r2,12(r5)
  806b64:	28c01915 	stw	r3,100(r5)
  806b68:	d9800404 	addi	r6,sp,16
  806b6c:	8009883a 	mov	r4,r16
  806b70:	0806ff00 	call	806ff0 <__sfvwrite_r>
  806b74:	1000091e 	bne	r2,zero,806b9c <_puts_r+0xb8>
  806b78:	00800284 	movi	r2,10
  806b7c:	dfc00917 	ldw	ra,36(sp)
  806b80:	dc400817 	ldw	r17,32(sp)
  806b84:	dc000717 	ldw	r16,28(sp)
  806b88:	dec00a04 	addi	sp,sp,40
  806b8c:	f800283a 	ret
  806b90:	8009883a 	mov	r4,r16
  806b94:	0806fa00 	call	806fa0 <__sinit>
  806b98:	003fe906 	br	806b40 <__alt_mem_onchip_mem+0xff7feb40>
  806b9c:	00bfffc4 	movi	r2,-1
  806ba0:	003ff606 	br	806b7c <__alt_mem_onchip_mem+0xff7feb7c>

00806ba4 <puts>:
  806ba4:	00802074 	movhi	r2,129
  806ba8:	10bfcd04 	addi	r2,r2,-204
  806bac:	200b883a 	mov	r5,r4
  806bb0:	11000017 	ldw	r4,0(r2)
  806bb4:	0806ae41 	jmpi	806ae4 <_puts_r>

00806bb8 <strlen>:
  806bb8:	208000cc 	andi	r2,r4,3
  806bbc:	10002026 	beq	r2,zero,806c40 <strlen+0x88>
  806bc0:	20800007 	ldb	r2,0(r4)
  806bc4:	10002026 	beq	r2,zero,806c48 <strlen+0x90>
  806bc8:	2005883a 	mov	r2,r4
  806bcc:	00000206 	br	806bd8 <strlen+0x20>
  806bd0:	10c00007 	ldb	r3,0(r2)
  806bd4:	18001826 	beq	r3,zero,806c38 <strlen+0x80>
  806bd8:	10800044 	addi	r2,r2,1
  806bdc:	10c000cc 	andi	r3,r2,3
  806be0:	183ffb1e 	bne	r3,zero,806bd0 <__alt_mem_onchip_mem+0xff7febd0>
  806be4:	10c00017 	ldw	r3,0(r2)
  806be8:	01ffbff4 	movhi	r7,65279
  806bec:	39ffbfc4 	addi	r7,r7,-257
  806bf0:	00ca303a 	nor	r5,zero,r3
  806bf4:	01a02074 	movhi	r6,32897
  806bf8:	19c7883a 	add	r3,r3,r7
  806bfc:	31a02004 	addi	r6,r6,-32640
  806c00:	1946703a 	and	r3,r3,r5
  806c04:	1986703a 	and	r3,r3,r6
  806c08:	1800091e 	bne	r3,zero,806c30 <strlen+0x78>
  806c0c:	10800104 	addi	r2,r2,4
  806c10:	10c00017 	ldw	r3,0(r2)
  806c14:	19cb883a 	add	r5,r3,r7
  806c18:	00c6303a 	nor	r3,zero,r3
  806c1c:	28c6703a 	and	r3,r5,r3
  806c20:	1986703a 	and	r3,r3,r6
  806c24:	183ff926 	beq	r3,zero,806c0c <__alt_mem_onchip_mem+0xff7fec0c>
  806c28:	00000106 	br	806c30 <strlen+0x78>
  806c2c:	10800044 	addi	r2,r2,1
  806c30:	10c00007 	ldb	r3,0(r2)
  806c34:	183ffd1e 	bne	r3,zero,806c2c <__alt_mem_onchip_mem+0xff7fec2c>
  806c38:	1105c83a 	sub	r2,r2,r4
  806c3c:	f800283a 	ret
  806c40:	2005883a 	mov	r2,r4
  806c44:	003fe706 	br	806be4 <__alt_mem_onchip_mem+0xff7febe4>
  806c48:	0005883a 	mov	r2,zero
  806c4c:	f800283a 	ret

00806c50 <__fp_unlock>:
  806c50:	0005883a 	mov	r2,zero
  806c54:	f800283a 	ret

00806c58 <_cleanup_r>:
  806c58:	01402074 	movhi	r5,129
  806c5c:	2963ab04 	addi	r5,r5,-29012
  806c60:	08075701 	jmpi	807570 <_fwalk_reent>

00806c64 <__sinit.part.1>:
  806c64:	defff704 	addi	sp,sp,-36
  806c68:	00c02034 	movhi	r3,128
  806c6c:	dfc00815 	stw	ra,32(sp)
  806c70:	ddc00715 	stw	r23,28(sp)
  806c74:	dd800615 	stw	r22,24(sp)
  806c78:	dd400515 	stw	r21,20(sp)
  806c7c:	dd000415 	stw	r20,16(sp)
  806c80:	dcc00315 	stw	r19,12(sp)
  806c84:	dc800215 	stw	r18,8(sp)
  806c88:	dc400115 	stw	r17,4(sp)
  806c8c:	dc000015 	stw	r16,0(sp)
  806c90:	18db1604 	addi	r3,r3,27736
  806c94:	24000117 	ldw	r16,4(r4)
  806c98:	20c00f15 	stw	r3,60(r4)
  806c9c:	2080bb04 	addi	r2,r4,748
  806ca0:	00c000c4 	movi	r3,3
  806ca4:	20c0b915 	stw	r3,740(r4)
  806ca8:	2080ba15 	stw	r2,744(r4)
  806cac:	2000b815 	stw	zero,736(r4)
  806cb0:	05c00204 	movi	r23,8
  806cb4:	00800104 	movi	r2,4
  806cb8:	2025883a 	mov	r18,r4
  806cbc:	b80d883a 	mov	r6,r23
  806cc0:	81001704 	addi	r4,r16,92
  806cc4:	000b883a 	mov	r5,zero
  806cc8:	80000015 	stw	zero,0(r16)
  806ccc:	80000115 	stw	zero,4(r16)
  806cd0:	80000215 	stw	zero,8(r16)
  806cd4:	8080030d 	sth	r2,12(r16)
  806cd8:	80001915 	stw	zero,100(r16)
  806cdc:	8000038d 	sth	zero,14(r16)
  806ce0:	80000415 	stw	zero,16(r16)
  806ce4:	80000515 	stw	zero,20(r16)
  806ce8:	80000615 	stw	zero,24(r16)
  806cec:	08081c80 	call	8081c8 <memset>
  806cf0:	05802074 	movhi	r22,129
  806cf4:	94400217 	ldw	r17,8(r18)
  806cf8:	05402074 	movhi	r21,129
  806cfc:	05002074 	movhi	r20,129
  806d00:	04c02074 	movhi	r19,129
  806d04:	b5a28404 	addi	r22,r22,-30192
  806d08:	ad629b04 	addi	r21,r21,-30100
  806d0c:	a522ba04 	addi	r20,r20,-29976
  806d10:	9ce2d104 	addi	r19,r19,-29884
  806d14:	85800815 	stw	r22,32(r16)
  806d18:	85400915 	stw	r21,36(r16)
  806d1c:	85000a15 	stw	r20,40(r16)
  806d20:	84c00b15 	stw	r19,44(r16)
  806d24:	84000715 	stw	r16,28(r16)
  806d28:	00800284 	movi	r2,10
  806d2c:	8880030d 	sth	r2,12(r17)
  806d30:	00800044 	movi	r2,1
  806d34:	b80d883a 	mov	r6,r23
  806d38:	89001704 	addi	r4,r17,92
  806d3c:	000b883a 	mov	r5,zero
  806d40:	88000015 	stw	zero,0(r17)
  806d44:	88000115 	stw	zero,4(r17)
  806d48:	88000215 	stw	zero,8(r17)
  806d4c:	88001915 	stw	zero,100(r17)
  806d50:	8880038d 	sth	r2,14(r17)
  806d54:	88000415 	stw	zero,16(r17)
  806d58:	88000515 	stw	zero,20(r17)
  806d5c:	88000615 	stw	zero,24(r17)
  806d60:	08081c80 	call	8081c8 <memset>
  806d64:	94000317 	ldw	r16,12(r18)
  806d68:	00800484 	movi	r2,18
  806d6c:	8c400715 	stw	r17,28(r17)
  806d70:	8d800815 	stw	r22,32(r17)
  806d74:	8d400915 	stw	r21,36(r17)
  806d78:	8d000a15 	stw	r20,40(r17)
  806d7c:	8cc00b15 	stw	r19,44(r17)
  806d80:	8080030d 	sth	r2,12(r16)
  806d84:	00800084 	movi	r2,2
  806d88:	80000015 	stw	zero,0(r16)
  806d8c:	80000115 	stw	zero,4(r16)
  806d90:	80000215 	stw	zero,8(r16)
  806d94:	80001915 	stw	zero,100(r16)
  806d98:	8080038d 	sth	r2,14(r16)
  806d9c:	80000415 	stw	zero,16(r16)
  806da0:	80000515 	stw	zero,20(r16)
  806da4:	80000615 	stw	zero,24(r16)
  806da8:	b80d883a 	mov	r6,r23
  806dac:	000b883a 	mov	r5,zero
  806db0:	81001704 	addi	r4,r16,92
  806db4:	08081c80 	call	8081c8 <memset>
  806db8:	00800044 	movi	r2,1
  806dbc:	84000715 	stw	r16,28(r16)
  806dc0:	85800815 	stw	r22,32(r16)
  806dc4:	85400915 	stw	r21,36(r16)
  806dc8:	85000a15 	stw	r20,40(r16)
  806dcc:	84c00b15 	stw	r19,44(r16)
  806dd0:	90800e15 	stw	r2,56(r18)
  806dd4:	dfc00817 	ldw	ra,32(sp)
  806dd8:	ddc00717 	ldw	r23,28(sp)
  806ddc:	dd800617 	ldw	r22,24(sp)
  806de0:	dd400517 	ldw	r21,20(sp)
  806de4:	dd000417 	ldw	r20,16(sp)
  806de8:	dcc00317 	ldw	r19,12(sp)
  806dec:	dc800217 	ldw	r18,8(sp)
  806df0:	dc400117 	ldw	r17,4(sp)
  806df4:	dc000017 	ldw	r16,0(sp)
  806df8:	dec00904 	addi	sp,sp,36
  806dfc:	f800283a 	ret

00806e00 <__fp_lock>:
  806e00:	0005883a 	mov	r2,zero
  806e04:	f800283a 	ret

00806e08 <__sfmoreglue>:
  806e08:	defffc04 	addi	sp,sp,-16
  806e0c:	dc400115 	stw	r17,4(sp)
  806e10:	2c7fffc4 	addi	r17,r5,-1
  806e14:	8c401a24 	muli	r17,r17,104
  806e18:	dc800215 	stw	r18,8(sp)
  806e1c:	2825883a 	mov	r18,r5
  806e20:	89401d04 	addi	r5,r17,116
  806e24:	dc000015 	stw	r16,0(sp)
  806e28:	dfc00315 	stw	ra,12(sp)
  806e2c:	08076340 	call	807634 <_malloc_r>
  806e30:	1021883a 	mov	r16,r2
  806e34:	10000726 	beq	r2,zero,806e54 <__sfmoreglue+0x4c>
  806e38:	11000304 	addi	r4,r2,12
  806e3c:	10000015 	stw	zero,0(r2)
  806e40:	14800115 	stw	r18,4(r2)
  806e44:	11000215 	stw	r4,8(r2)
  806e48:	89801a04 	addi	r6,r17,104
  806e4c:	000b883a 	mov	r5,zero
  806e50:	08081c80 	call	8081c8 <memset>
  806e54:	8005883a 	mov	r2,r16
  806e58:	dfc00317 	ldw	ra,12(sp)
  806e5c:	dc800217 	ldw	r18,8(sp)
  806e60:	dc400117 	ldw	r17,4(sp)
  806e64:	dc000017 	ldw	r16,0(sp)
  806e68:	dec00404 	addi	sp,sp,16
  806e6c:	f800283a 	ret

00806e70 <__sfp>:
  806e70:	defffb04 	addi	sp,sp,-20
  806e74:	dc000015 	stw	r16,0(sp)
  806e78:	04002074 	movhi	r16,129
  806e7c:	843fcc04 	addi	r16,r16,-208
  806e80:	dcc00315 	stw	r19,12(sp)
  806e84:	2027883a 	mov	r19,r4
  806e88:	81000017 	ldw	r4,0(r16)
  806e8c:	dfc00415 	stw	ra,16(sp)
  806e90:	dc800215 	stw	r18,8(sp)
  806e94:	20800e17 	ldw	r2,56(r4)
  806e98:	dc400115 	stw	r17,4(sp)
  806e9c:	1000021e 	bne	r2,zero,806ea8 <__sfp+0x38>
  806ea0:	0806c640 	call	806c64 <__sinit.part.1>
  806ea4:	81000017 	ldw	r4,0(r16)
  806ea8:	2480b804 	addi	r18,r4,736
  806eac:	047fffc4 	movi	r17,-1
  806eb0:	91000117 	ldw	r4,4(r18)
  806eb4:	94000217 	ldw	r16,8(r18)
  806eb8:	213fffc4 	addi	r4,r4,-1
  806ebc:	20000a16 	blt	r4,zero,806ee8 <__sfp+0x78>
  806ec0:	8080030f 	ldh	r2,12(r16)
  806ec4:	10000c26 	beq	r2,zero,806ef8 <__sfp+0x88>
  806ec8:	80c01d04 	addi	r3,r16,116
  806ecc:	00000206 	br	806ed8 <__sfp+0x68>
  806ed0:	18bfe60f 	ldh	r2,-104(r3)
  806ed4:	10000826 	beq	r2,zero,806ef8 <__sfp+0x88>
  806ed8:	213fffc4 	addi	r4,r4,-1
  806edc:	1c3ffd04 	addi	r16,r3,-12
  806ee0:	18c01a04 	addi	r3,r3,104
  806ee4:	247ffa1e 	bne	r4,r17,806ed0 <__alt_mem_onchip_mem+0xff7feed0>
  806ee8:	90800017 	ldw	r2,0(r18)
  806eec:	10001d26 	beq	r2,zero,806f64 <__sfp+0xf4>
  806ef0:	1025883a 	mov	r18,r2
  806ef4:	003fee06 	br	806eb0 <__alt_mem_onchip_mem+0xff7feeb0>
  806ef8:	00bfffc4 	movi	r2,-1
  806efc:	8080038d 	sth	r2,14(r16)
  806f00:	00800044 	movi	r2,1
  806f04:	8080030d 	sth	r2,12(r16)
  806f08:	80001915 	stw	zero,100(r16)
  806f0c:	80000015 	stw	zero,0(r16)
  806f10:	80000215 	stw	zero,8(r16)
  806f14:	80000115 	stw	zero,4(r16)
  806f18:	80000415 	stw	zero,16(r16)
  806f1c:	80000515 	stw	zero,20(r16)
  806f20:	80000615 	stw	zero,24(r16)
  806f24:	01800204 	movi	r6,8
  806f28:	000b883a 	mov	r5,zero
  806f2c:	81001704 	addi	r4,r16,92
  806f30:	08081c80 	call	8081c8 <memset>
  806f34:	8005883a 	mov	r2,r16
  806f38:	80000c15 	stw	zero,48(r16)
  806f3c:	80000d15 	stw	zero,52(r16)
  806f40:	80001115 	stw	zero,68(r16)
  806f44:	80001215 	stw	zero,72(r16)
  806f48:	dfc00417 	ldw	ra,16(sp)
  806f4c:	dcc00317 	ldw	r19,12(sp)
  806f50:	dc800217 	ldw	r18,8(sp)
  806f54:	dc400117 	ldw	r17,4(sp)
  806f58:	dc000017 	ldw	r16,0(sp)
  806f5c:	dec00504 	addi	sp,sp,20
  806f60:	f800283a 	ret
  806f64:	01400104 	movi	r5,4
  806f68:	9809883a 	mov	r4,r19
  806f6c:	0806e080 	call	806e08 <__sfmoreglue>
  806f70:	90800015 	stw	r2,0(r18)
  806f74:	103fde1e 	bne	r2,zero,806ef0 <__alt_mem_onchip_mem+0xff7feef0>
  806f78:	00800304 	movi	r2,12
  806f7c:	98800015 	stw	r2,0(r19)
  806f80:	0005883a 	mov	r2,zero
  806f84:	003ff006 	br	806f48 <__alt_mem_onchip_mem+0xff7fef48>

00806f88 <_cleanup>:
  806f88:	00802074 	movhi	r2,129
  806f8c:	10bfcc04 	addi	r2,r2,-208
  806f90:	11000017 	ldw	r4,0(r2)
  806f94:	01402074 	movhi	r5,129
  806f98:	2963ab04 	addi	r5,r5,-29012
  806f9c:	08075701 	jmpi	807570 <_fwalk_reent>

00806fa0 <__sinit>:
  806fa0:	20800e17 	ldw	r2,56(r4)
  806fa4:	10000126 	beq	r2,zero,806fac <__sinit+0xc>
  806fa8:	f800283a 	ret
  806fac:	0806c641 	jmpi	806c64 <__sinit.part.1>

00806fb0 <__sfp_lock_acquire>:
  806fb0:	f800283a 	ret

00806fb4 <__sfp_lock_release>:
  806fb4:	f800283a 	ret

00806fb8 <__sinit_lock_acquire>:
  806fb8:	f800283a 	ret

00806fbc <__sinit_lock_release>:
  806fbc:	f800283a 	ret

00806fc0 <__fp_lock_all>:
  806fc0:	00802074 	movhi	r2,129
  806fc4:	10bfcd04 	addi	r2,r2,-204
  806fc8:	11000017 	ldw	r4,0(r2)
  806fcc:	01402034 	movhi	r5,128
  806fd0:	295b8004 	addi	r5,r5,28160
  806fd4:	08074ac1 	jmpi	8074ac <_fwalk>

00806fd8 <__fp_unlock_all>:
  806fd8:	00802074 	movhi	r2,129
  806fdc:	10bfcd04 	addi	r2,r2,-204
  806fe0:	11000017 	ldw	r4,0(r2)
  806fe4:	01402034 	movhi	r5,128
  806fe8:	295b1404 	addi	r5,r5,27728
  806fec:	08074ac1 	jmpi	8074ac <_fwalk>

00806ff0 <__sfvwrite_r>:
  806ff0:	30800217 	ldw	r2,8(r6)
  806ff4:	10006726 	beq	r2,zero,807194 <__sfvwrite_r+0x1a4>
  806ff8:	28c0030b 	ldhu	r3,12(r5)
  806ffc:	defff404 	addi	sp,sp,-48
  807000:	dd400715 	stw	r21,28(sp)
  807004:	dd000615 	stw	r20,24(sp)
  807008:	dc000215 	stw	r16,8(sp)
  80700c:	dfc00b15 	stw	ra,44(sp)
  807010:	df000a15 	stw	fp,40(sp)
  807014:	ddc00915 	stw	r23,36(sp)
  807018:	dd800815 	stw	r22,32(sp)
  80701c:	dcc00515 	stw	r19,20(sp)
  807020:	dc800415 	stw	r18,16(sp)
  807024:	dc400315 	stw	r17,12(sp)
  807028:	1880020c 	andi	r2,r3,8
  80702c:	2821883a 	mov	r16,r5
  807030:	202b883a 	mov	r21,r4
  807034:	3029883a 	mov	r20,r6
  807038:	10002726 	beq	r2,zero,8070d8 <__sfvwrite_r+0xe8>
  80703c:	28800417 	ldw	r2,16(r5)
  807040:	10002526 	beq	r2,zero,8070d8 <__sfvwrite_r+0xe8>
  807044:	1880008c 	andi	r2,r3,2
  807048:	a4400017 	ldw	r17,0(r20)
  80704c:	10002a26 	beq	r2,zero,8070f8 <__sfvwrite_r+0x108>
  807050:	05a00034 	movhi	r22,32768
  807054:	0027883a 	mov	r19,zero
  807058:	0025883a 	mov	r18,zero
  80705c:	b5bf0004 	addi	r22,r22,-1024
  807060:	980d883a 	mov	r6,r19
  807064:	a809883a 	mov	r4,r21
  807068:	90004626 	beq	r18,zero,807184 <__sfvwrite_r+0x194>
  80706c:	900f883a 	mov	r7,r18
  807070:	b480022e 	bgeu	r22,r18,80707c <__sfvwrite_r+0x8c>
  807074:	01e00034 	movhi	r7,32768
  807078:	39ff0004 	addi	r7,r7,-1024
  80707c:	80800917 	ldw	r2,36(r16)
  807080:	81400717 	ldw	r5,28(r16)
  807084:	103ee83a 	callr	r2
  807088:	0080570e 	bge	zero,r2,8071e8 <__sfvwrite_r+0x1f8>
  80708c:	a0c00217 	ldw	r3,8(r20)
  807090:	98a7883a 	add	r19,r19,r2
  807094:	90a5c83a 	sub	r18,r18,r2
  807098:	1885c83a 	sub	r2,r3,r2
  80709c:	a0800215 	stw	r2,8(r20)
  8070a0:	103fef1e 	bne	r2,zero,807060 <__alt_mem_onchip_mem+0xff7ff060>
  8070a4:	0005883a 	mov	r2,zero
  8070a8:	dfc00b17 	ldw	ra,44(sp)
  8070ac:	df000a17 	ldw	fp,40(sp)
  8070b0:	ddc00917 	ldw	r23,36(sp)
  8070b4:	dd800817 	ldw	r22,32(sp)
  8070b8:	dd400717 	ldw	r21,28(sp)
  8070bc:	dd000617 	ldw	r20,24(sp)
  8070c0:	dcc00517 	ldw	r19,20(sp)
  8070c4:	dc800417 	ldw	r18,16(sp)
  8070c8:	dc400317 	ldw	r17,12(sp)
  8070cc:	dc000217 	ldw	r16,8(sp)
  8070d0:	dec00c04 	addi	sp,sp,48
  8070d4:	f800283a 	ret
  8070d8:	800b883a 	mov	r5,r16
  8070dc:	a809883a 	mov	r4,r21
  8070e0:	0808d040 	call	808d04 <__swsetup_r>
  8070e4:	1000eb1e 	bne	r2,zero,807494 <__sfvwrite_r+0x4a4>
  8070e8:	80c0030b 	ldhu	r3,12(r16)
  8070ec:	a4400017 	ldw	r17,0(r20)
  8070f0:	1880008c 	andi	r2,r3,2
  8070f4:	103fd61e 	bne	r2,zero,807050 <__alt_mem_onchip_mem+0xff7ff050>
  8070f8:	1880004c 	andi	r2,r3,1
  8070fc:	10003f1e 	bne	r2,zero,8071fc <__sfvwrite_r+0x20c>
  807100:	0039883a 	mov	fp,zero
  807104:	0025883a 	mov	r18,zero
  807108:	90001a26 	beq	r18,zero,807174 <__sfvwrite_r+0x184>
  80710c:	1880800c 	andi	r2,r3,512
  807110:	84c00217 	ldw	r19,8(r16)
  807114:	10002126 	beq	r2,zero,80719c <__sfvwrite_r+0x1ac>
  807118:	982f883a 	mov	r23,r19
  80711c:	94c09336 	bltu	r18,r19,80736c <__sfvwrite_r+0x37c>
  807120:	1881200c 	andi	r2,r3,1152
  807124:	10009e1e 	bne	r2,zero,8073a0 <__sfvwrite_r+0x3b0>
  807128:	81000017 	ldw	r4,0(r16)
  80712c:	b80d883a 	mov	r6,r23
  807130:	e00b883a 	mov	r5,fp
  807134:	080806c0 	call	80806c <memmove>
  807138:	80c00217 	ldw	r3,8(r16)
  80713c:	81000017 	ldw	r4,0(r16)
  807140:	9005883a 	mov	r2,r18
  807144:	1ce7c83a 	sub	r19,r3,r19
  807148:	25cf883a 	add	r7,r4,r23
  80714c:	84c00215 	stw	r19,8(r16)
  807150:	81c00015 	stw	r7,0(r16)
  807154:	a0c00217 	ldw	r3,8(r20)
  807158:	e0b9883a 	add	fp,fp,r2
  80715c:	90a5c83a 	sub	r18,r18,r2
  807160:	18a7c83a 	sub	r19,r3,r2
  807164:	a4c00215 	stw	r19,8(r20)
  807168:	983fce26 	beq	r19,zero,8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  80716c:	80c0030b 	ldhu	r3,12(r16)
  807170:	903fe61e 	bne	r18,zero,80710c <__alt_mem_onchip_mem+0xff7ff10c>
  807174:	8f000017 	ldw	fp,0(r17)
  807178:	8c800117 	ldw	r18,4(r17)
  80717c:	8c400204 	addi	r17,r17,8
  807180:	003fe106 	br	807108 <__alt_mem_onchip_mem+0xff7ff108>
  807184:	8cc00017 	ldw	r19,0(r17)
  807188:	8c800117 	ldw	r18,4(r17)
  80718c:	8c400204 	addi	r17,r17,8
  807190:	003fb306 	br	807060 <__alt_mem_onchip_mem+0xff7ff060>
  807194:	0005883a 	mov	r2,zero
  807198:	f800283a 	ret
  80719c:	81000017 	ldw	r4,0(r16)
  8071a0:	80800417 	ldw	r2,16(r16)
  8071a4:	11005736 	bltu	r2,r4,807304 <__sfvwrite_r+0x314>
  8071a8:	85c00517 	ldw	r23,20(r16)
  8071ac:	95c05536 	bltu	r18,r23,807304 <__sfvwrite_r+0x314>
  8071b0:	00a00034 	movhi	r2,32768
  8071b4:	10bfffc4 	addi	r2,r2,-1
  8071b8:	9009883a 	mov	r4,r18
  8071bc:	1480012e 	bgeu	r2,r18,8071c4 <__sfvwrite_r+0x1d4>
  8071c0:	1009883a 	mov	r4,r2
  8071c4:	b80b883a 	mov	r5,r23
  8071c8:	08099b80 	call	8099b8 <__divsi3>
  8071cc:	15cf383a 	mul	r7,r2,r23
  8071d0:	81400717 	ldw	r5,28(r16)
  8071d4:	80800917 	ldw	r2,36(r16)
  8071d8:	e00d883a 	mov	r6,fp
  8071dc:	a809883a 	mov	r4,r21
  8071e0:	103ee83a 	callr	r2
  8071e4:	00bfdb16 	blt	zero,r2,807154 <__alt_mem_onchip_mem+0xff7ff154>
  8071e8:	8080030b 	ldhu	r2,12(r16)
  8071ec:	10801014 	ori	r2,r2,64
  8071f0:	8080030d 	sth	r2,12(r16)
  8071f4:	00bfffc4 	movi	r2,-1
  8071f8:	003fab06 	br	8070a8 <__alt_mem_onchip_mem+0xff7ff0a8>
  8071fc:	0027883a 	mov	r19,zero
  807200:	0011883a 	mov	r8,zero
  807204:	0039883a 	mov	fp,zero
  807208:	0025883a 	mov	r18,zero
  80720c:	90001f26 	beq	r18,zero,80728c <__sfvwrite_r+0x29c>
  807210:	40005a26 	beq	r8,zero,80737c <__sfvwrite_r+0x38c>
  807214:	982d883a 	mov	r22,r19
  807218:	94c0012e 	bgeu	r18,r19,807220 <__sfvwrite_r+0x230>
  80721c:	902d883a 	mov	r22,r18
  807220:	81000017 	ldw	r4,0(r16)
  807224:	80800417 	ldw	r2,16(r16)
  807228:	b02f883a 	mov	r23,r22
  80722c:	81c00517 	ldw	r7,20(r16)
  807230:	1100032e 	bgeu	r2,r4,807240 <__sfvwrite_r+0x250>
  807234:	80c00217 	ldw	r3,8(r16)
  807238:	38c7883a 	add	r3,r7,r3
  80723c:	1d801816 	blt	r3,r22,8072a0 <__sfvwrite_r+0x2b0>
  807240:	b1c03e16 	blt	r22,r7,80733c <__sfvwrite_r+0x34c>
  807244:	80800917 	ldw	r2,36(r16)
  807248:	81400717 	ldw	r5,28(r16)
  80724c:	e00d883a 	mov	r6,fp
  807250:	da000115 	stw	r8,4(sp)
  807254:	a809883a 	mov	r4,r21
  807258:	103ee83a 	callr	r2
  80725c:	102f883a 	mov	r23,r2
  807260:	da000117 	ldw	r8,4(sp)
  807264:	00bfe00e 	bge	zero,r2,8071e8 <__alt_mem_onchip_mem+0xff7ff1e8>
  807268:	9de7c83a 	sub	r19,r19,r23
  80726c:	98001f26 	beq	r19,zero,8072ec <__sfvwrite_r+0x2fc>
  807270:	a0800217 	ldw	r2,8(r20)
  807274:	e5f9883a 	add	fp,fp,r23
  807278:	95e5c83a 	sub	r18,r18,r23
  80727c:	15efc83a 	sub	r23,r2,r23
  807280:	a5c00215 	stw	r23,8(r20)
  807284:	b83f8726 	beq	r23,zero,8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807288:	903fe11e 	bne	r18,zero,807210 <__alt_mem_onchip_mem+0xff7ff210>
  80728c:	8f000017 	ldw	fp,0(r17)
  807290:	8c800117 	ldw	r18,4(r17)
  807294:	0011883a 	mov	r8,zero
  807298:	8c400204 	addi	r17,r17,8
  80729c:	003fdb06 	br	80720c <__alt_mem_onchip_mem+0xff7ff20c>
  8072a0:	180d883a 	mov	r6,r3
  8072a4:	e00b883a 	mov	r5,fp
  8072a8:	da000115 	stw	r8,4(sp)
  8072ac:	d8c00015 	stw	r3,0(sp)
  8072b0:	080806c0 	call	80806c <memmove>
  8072b4:	d8c00017 	ldw	r3,0(sp)
  8072b8:	80800017 	ldw	r2,0(r16)
  8072bc:	800b883a 	mov	r5,r16
  8072c0:	a809883a 	mov	r4,r21
  8072c4:	10c5883a 	add	r2,r2,r3
  8072c8:	80800015 	stw	r2,0(r16)
  8072cc:	d8c00015 	stw	r3,0(sp)
  8072d0:	08091cc0 	call	8091cc <_fflush_r>
  8072d4:	d8c00017 	ldw	r3,0(sp)
  8072d8:	da000117 	ldw	r8,4(sp)
  8072dc:	103fc21e 	bne	r2,zero,8071e8 <__alt_mem_onchip_mem+0xff7ff1e8>
  8072e0:	182f883a 	mov	r23,r3
  8072e4:	9de7c83a 	sub	r19,r19,r23
  8072e8:	983fe11e 	bne	r19,zero,807270 <__alt_mem_onchip_mem+0xff7ff270>
  8072ec:	800b883a 	mov	r5,r16
  8072f0:	a809883a 	mov	r4,r21
  8072f4:	08091cc0 	call	8091cc <_fflush_r>
  8072f8:	103fbb1e 	bne	r2,zero,8071e8 <__alt_mem_onchip_mem+0xff7ff1e8>
  8072fc:	0011883a 	mov	r8,zero
  807300:	003fdb06 	br	807270 <__alt_mem_onchip_mem+0xff7ff270>
  807304:	94c0012e 	bgeu	r18,r19,80730c <__sfvwrite_r+0x31c>
  807308:	9027883a 	mov	r19,r18
  80730c:	980d883a 	mov	r6,r19
  807310:	e00b883a 	mov	r5,fp
  807314:	080806c0 	call	80806c <memmove>
  807318:	80800217 	ldw	r2,8(r16)
  80731c:	80c00017 	ldw	r3,0(r16)
  807320:	14c5c83a 	sub	r2,r2,r19
  807324:	1cc7883a 	add	r3,r3,r19
  807328:	80800215 	stw	r2,8(r16)
  80732c:	80c00015 	stw	r3,0(r16)
  807330:	10004326 	beq	r2,zero,807440 <__sfvwrite_r+0x450>
  807334:	9805883a 	mov	r2,r19
  807338:	003f8606 	br	807154 <__alt_mem_onchip_mem+0xff7ff154>
  80733c:	b00d883a 	mov	r6,r22
  807340:	e00b883a 	mov	r5,fp
  807344:	da000115 	stw	r8,4(sp)
  807348:	080806c0 	call	80806c <memmove>
  80734c:	80800217 	ldw	r2,8(r16)
  807350:	80c00017 	ldw	r3,0(r16)
  807354:	da000117 	ldw	r8,4(sp)
  807358:	1585c83a 	sub	r2,r2,r22
  80735c:	1dad883a 	add	r22,r3,r22
  807360:	80800215 	stw	r2,8(r16)
  807364:	85800015 	stw	r22,0(r16)
  807368:	003fbf06 	br	807268 <__alt_mem_onchip_mem+0xff7ff268>
  80736c:	81000017 	ldw	r4,0(r16)
  807370:	9027883a 	mov	r19,r18
  807374:	902f883a 	mov	r23,r18
  807378:	003f6c06 	br	80712c <__alt_mem_onchip_mem+0xff7ff12c>
  80737c:	900d883a 	mov	r6,r18
  807380:	01400284 	movi	r5,10
  807384:	e009883a 	mov	r4,fp
  807388:	0807e400 	call	807e40 <memchr>
  80738c:	10003e26 	beq	r2,zero,807488 <__sfvwrite_r+0x498>
  807390:	10800044 	addi	r2,r2,1
  807394:	1727c83a 	sub	r19,r2,fp
  807398:	02000044 	movi	r8,1
  80739c:	003f9d06 	br	807214 <__alt_mem_onchip_mem+0xff7ff214>
  8073a0:	80800517 	ldw	r2,20(r16)
  8073a4:	81400417 	ldw	r5,16(r16)
  8073a8:	81c00017 	ldw	r7,0(r16)
  8073ac:	10a7883a 	add	r19,r2,r2
  8073b0:	9885883a 	add	r2,r19,r2
  8073b4:	1026d7fa 	srli	r19,r2,31
  8073b8:	396dc83a 	sub	r22,r7,r5
  8073bc:	b1000044 	addi	r4,r22,1
  8073c0:	9885883a 	add	r2,r19,r2
  8073c4:	1027d07a 	srai	r19,r2,1
  8073c8:	2485883a 	add	r2,r4,r18
  8073cc:	980d883a 	mov	r6,r19
  8073d0:	9880022e 	bgeu	r19,r2,8073dc <__sfvwrite_r+0x3ec>
  8073d4:	1027883a 	mov	r19,r2
  8073d8:	100d883a 	mov	r6,r2
  8073dc:	18c1000c 	andi	r3,r3,1024
  8073e0:	18001c26 	beq	r3,zero,807454 <__sfvwrite_r+0x464>
  8073e4:	300b883a 	mov	r5,r6
  8073e8:	a809883a 	mov	r4,r21
  8073ec:	08076340 	call	807634 <_malloc_r>
  8073f0:	102f883a 	mov	r23,r2
  8073f4:	10002926 	beq	r2,zero,80749c <__sfvwrite_r+0x4ac>
  8073f8:	81400417 	ldw	r5,16(r16)
  8073fc:	b00d883a 	mov	r6,r22
  807400:	1009883a 	mov	r4,r2
  807404:	0807f240 	call	807f24 <memcpy>
  807408:	8080030b 	ldhu	r2,12(r16)
  80740c:	00fedfc4 	movi	r3,-1153
  807410:	10c4703a 	and	r2,r2,r3
  807414:	10802014 	ori	r2,r2,128
  807418:	8080030d 	sth	r2,12(r16)
  80741c:	bd89883a 	add	r4,r23,r22
  807420:	9d8fc83a 	sub	r7,r19,r22
  807424:	85c00415 	stw	r23,16(r16)
  807428:	84c00515 	stw	r19,20(r16)
  80742c:	81000015 	stw	r4,0(r16)
  807430:	9027883a 	mov	r19,r18
  807434:	81c00215 	stw	r7,8(r16)
  807438:	902f883a 	mov	r23,r18
  80743c:	003f3b06 	br	80712c <__alt_mem_onchip_mem+0xff7ff12c>
  807440:	800b883a 	mov	r5,r16
  807444:	a809883a 	mov	r4,r21
  807448:	08091cc0 	call	8091cc <_fflush_r>
  80744c:	103fb926 	beq	r2,zero,807334 <__alt_mem_onchip_mem+0xff7ff334>
  807450:	003f6506 	br	8071e8 <__alt_mem_onchip_mem+0xff7ff1e8>
  807454:	a809883a 	mov	r4,r21
  807458:	08084580 	call	808458 <_realloc_r>
  80745c:	102f883a 	mov	r23,r2
  807460:	103fee1e 	bne	r2,zero,80741c <__alt_mem_onchip_mem+0xff7ff41c>
  807464:	81400417 	ldw	r5,16(r16)
  807468:	a809883a 	mov	r4,r21
  80746c:	080937c0 	call	80937c <_free_r>
  807470:	8080030b 	ldhu	r2,12(r16)
  807474:	00ffdfc4 	movi	r3,-129
  807478:	1884703a 	and	r2,r3,r2
  80747c:	00c00304 	movi	r3,12
  807480:	a8c00015 	stw	r3,0(r21)
  807484:	003f5906 	br	8071ec <__alt_mem_onchip_mem+0xff7ff1ec>
  807488:	94c00044 	addi	r19,r18,1
  80748c:	02000044 	movi	r8,1
  807490:	003f6006 	br	807214 <__alt_mem_onchip_mem+0xff7ff214>
  807494:	00bfffc4 	movi	r2,-1
  807498:	003f0306 	br	8070a8 <__alt_mem_onchip_mem+0xff7ff0a8>
  80749c:	00800304 	movi	r2,12
  8074a0:	a8800015 	stw	r2,0(r21)
  8074a4:	8080030b 	ldhu	r2,12(r16)
  8074a8:	003f5006 	br	8071ec <__alt_mem_onchip_mem+0xff7ff1ec>

008074ac <_fwalk>:
  8074ac:	defff704 	addi	sp,sp,-36
  8074b0:	dd000415 	stw	r20,16(sp)
  8074b4:	dfc00815 	stw	ra,32(sp)
  8074b8:	ddc00715 	stw	r23,28(sp)
  8074bc:	dd800615 	stw	r22,24(sp)
  8074c0:	dd400515 	stw	r21,20(sp)
  8074c4:	dcc00315 	stw	r19,12(sp)
  8074c8:	dc800215 	stw	r18,8(sp)
  8074cc:	dc400115 	stw	r17,4(sp)
  8074d0:	dc000015 	stw	r16,0(sp)
  8074d4:	2500b804 	addi	r20,r4,736
  8074d8:	a0002326 	beq	r20,zero,807568 <_fwalk+0xbc>
  8074dc:	282b883a 	mov	r21,r5
  8074e0:	002f883a 	mov	r23,zero
  8074e4:	05800044 	movi	r22,1
  8074e8:	04ffffc4 	movi	r19,-1
  8074ec:	a4400117 	ldw	r17,4(r20)
  8074f0:	a4800217 	ldw	r18,8(r20)
  8074f4:	8c7fffc4 	addi	r17,r17,-1
  8074f8:	88000d16 	blt	r17,zero,807530 <_fwalk+0x84>
  8074fc:	94000304 	addi	r16,r18,12
  807500:	94800384 	addi	r18,r18,14
  807504:	8080000b 	ldhu	r2,0(r16)
  807508:	8c7fffc4 	addi	r17,r17,-1
  80750c:	813ffd04 	addi	r4,r16,-12
  807510:	b080042e 	bgeu	r22,r2,807524 <_fwalk+0x78>
  807514:	9080000f 	ldh	r2,0(r18)
  807518:	14c00226 	beq	r2,r19,807524 <_fwalk+0x78>
  80751c:	a83ee83a 	callr	r21
  807520:	b8aeb03a 	or	r23,r23,r2
  807524:	84001a04 	addi	r16,r16,104
  807528:	94801a04 	addi	r18,r18,104
  80752c:	8cfff51e 	bne	r17,r19,807504 <__alt_mem_onchip_mem+0xff7ff504>
  807530:	a5000017 	ldw	r20,0(r20)
  807534:	a03fed1e 	bne	r20,zero,8074ec <__alt_mem_onchip_mem+0xff7ff4ec>
  807538:	b805883a 	mov	r2,r23
  80753c:	dfc00817 	ldw	ra,32(sp)
  807540:	ddc00717 	ldw	r23,28(sp)
  807544:	dd800617 	ldw	r22,24(sp)
  807548:	dd400517 	ldw	r21,20(sp)
  80754c:	dd000417 	ldw	r20,16(sp)
  807550:	dcc00317 	ldw	r19,12(sp)
  807554:	dc800217 	ldw	r18,8(sp)
  807558:	dc400117 	ldw	r17,4(sp)
  80755c:	dc000017 	ldw	r16,0(sp)
  807560:	dec00904 	addi	sp,sp,36
  807564:	f800283a 	ret
  807568:	002f883a 	mov	r23,zero
  80756c:	003ff206 	br	807538 <__alt_mem_onchip_mem+0xff7ff538>

00807570 <_fwalk_reent>:
  807570:	defff704 	addi	sp,sp,-36
  807574:	dd000415 	stw	r20,16(sp)
  807578:	dfc00815 	stw	ra,32(sp)
  80757c:	ddc00715 	stw	r23,28(sp)
  807580:	dd800615 	stw	r22,24(sp)
  807584:	dd400515 	stw	r21,20(sp)
  807588:	dcc00315 	stw	r19,12(sp)
  80758c:	dc800215 	stw	r18,8(sp)
  807590:	dc400115 	stw	r17,4(sp)
  807594:	dc000015 	stw	r16,0(sp)
  807598:	2500b804 	addi	r20,r4,736
  80759c:	a0002326 	beq	r20,zero,80762c <_fwalk_reent+0xbc>
  8075a0:	282b883a 	mov	r21,r5
  8075a4:	2027883a 	mov	r19,r4
  8075a8:	002f883a 	mov	r23,zero
  8075ac:	05800044 	movi	r22,1
  8075b0:	04bfffc4 	movi	r18,-1
  8075b4:	a4400117 	ldw	r17,4(r20)
  8075b8:	a4000217 	ldw	r16,8(r20)
  8075bc:	8c7fffc4 	addi	r17,r17,-1
  8075c0:	88000c16 	blt	r17,zero,8075f4 <_fwalk_reent+0x84>
  8075c4:	84000304 	addi	r16,r16,12
  8075c8:	8080000b 	ldhu	r2,0(r16)
  8075cc:	8c7fffc4 	addi	r17,r17,-1
  8075d0:	817ffd04 	addi	r5,r16,-12
  8075d4:	b080052e 	bgeu	r22,r2,8075ec <_fwalk_reent+0x7c>
  8075d8:	8080008f 	ldh	r2,2(r16)
  8075dc:	9809883a 	mov	r4,r19
  8075e0:	14800226 	beq	r2,r18,8075ec <_fwalk_reent+0x7c>
  8075e4:	a83ee83a 	callr	r21
  8075e8:	b8aeb03a 	or	r23,r23,r2
  8075ec:	84001a04 	addi	r16,r16,104
  8075f0:	8cbff51e 	bne	r17,r18,8075c8 <__alt_mem_onchip_mem+0xff7ff5c8>
  8075f4:	a5000017 	ldw	r20,0(r20)
  8075f8:	a03fee1e 	bne	r20,zero,8075b4 <__alt_mem_onchip_mem+0xff7ff5b4>
  8075fc:	b805883a 	mov	r2,r23
  807600:	dfc00817 	ldw	ra,32(sp)
  807604:	ddc00717 	ldw	r23,28(sp)
  807608:	dd800617 	ldw	r22,24(sp)
  80760c:	dd400517 	ldw	r21,20(sp)
  807610:	dd000417 	ldw	r20,16(sp)
  807614:	dcc00317 	ldw	r19,12(sp)
  807618:	dc800217 	ldw	r18,8(sp)
  80761c:	dc400117 	ldw	r17,4(sp)
  807620:	dc000017 	ldw	r16,0(sp)
  807624:	dec00904 	addi	sp,sp,36
  807628:	f800283a 	ret
  80762c:	002f883a 	mov	r23,zero
  807630:	003ff206 	br	8075fc <__alt_mem_onchip_mem+0xff7ff5fc>

00807634 <_malloc_r>:
  807634:	defff504 	addi	sp,sp,-44
  807638:	dc800315 	stw	r18,12(sp)
  80763c:	dfc00a15 	stw	ra,40(sp)
  807640:	df000915 	stw	fp,36(sp)
  807644:	ddc00815 	stw	r23,32(sp)
  807648:	dd800715 	stw	r22,28(sp)
  80764c:	dd400615 	stw	r21,24(sp)
  807650:	dd000515 	stw	r20,20(sp)
  807654:	dcc00415 	stw	r19,16(sp)
  807658:	dc400215 	stw	r17,8(sp)
  80765c:	dc000115 	stw	r16,4(sp)
  807660:	288002c4 	addi	r2,r5,11
  807664:	00c00584 	movi	r3,22
  807668:	2025883a 	mov	r18,r4
  80766c:	18807f2e 	bgeu	r3,r2,80786c <_malloc_r+0x238>
  807670:	047ffe04 	movi	r17,-8
  807674:	1462703a 	and	r17,r2,r17
  807678:	8800a316 	blt	r17,zero,807908 <_malloc_r+0x2d4>
  80767c:	8940a236 	bltu	r17,r5,807908 <_malloc_r+0x2d4>
  807680:	080a3940 	call	80a394 <__malloc_lock>
  807684:	00807dc4 	movi	r2,503
  807688:	1441e92e 	bgeu	r2,r17,807e30 <_malloc_r+0x7fc>
  80768c:	8804d27a 	srli	r2,r17,9
  807690:	1000a126 	beq	r2,zero,807918 <_malloc_r+0x2e4>
  807694:	00c00104 	movi	r3,4
  807698:	18811e36 	bltu	r3,r2,807b14 <_malloc_r+0x4e0>
  80769c:	8804d1ba 	srli	r2,r17,6
  8076a0:	12000e44 	addi	r8,r2,57
  8076a4:	11c00e04 	addi	r7,r2,56
  8076a8:	4209883a 	add	r4,r8,r8
  8076ac:	04c02074 	movhi	r19,129
  8076b0:	2109883a 	add	r4,r4,r4
  8076b4:	9cf9cf04 	addi	r19,r19,-6340
  8076b8:	2109883a 	add	r4,r4,r4
  8076bc:	9909883a 	add	r4,r19,r4
  8076c0:	24000117 	ldw	r16,4(r4)
  8076c4:	213ffe04 	addi	r4,r4,-8
  8076c8:	24009726 	beq	r4,r16,807928 <_malloc_r+0x2f4>
  8076cc:	80800117 	ldw	r2,4(r16)
  8076d0:	01bfff04 	movi	r6,-4
  8076d4:	014003c4 	movi	r5,15
  8076d8:	1184703a 	and	r2,r2,r6
  8076dc:	1447c83a 	sub	r3,r2,r17
  8076e0:	28c00716 	blt	r5,r3,807700 <_malloc_r+0xcc>
  8076e4:	1800920e 	bge	r3,zero,807930 <_malloc_r+0x2fc>
  8076e8:	84000317 	ldw	r16,12(r16)
  8076ec:	24008e26 	beq	r4,r16,807928 <_malloc_r+0x2f4>
  8076f0:	80800117 	ldw	r2,4(r16)
  8076f4:	1184703a 	and	r2,r2,r6
  8076f8:	1447c83a 	sub	r3,r2,r17
  8076fc:	28fff90e 	bge	r5,r3,8076e4 <__alt_mem_onchip_mem+0xff7ff6e4>
  807700:	3809883a 	mov	r4,r7
  807704:	01802074 	movhi	r6,129
  807708:	9c000417 	ldw	r16,16(r19)
  80770c:	31b9cf04 	addi	r6,r6,-6340
  807710:	32000204 	addi	r8,r6,8
  807714:	82013426 	beq	r16,r8,807be8 <_malloc_r+0x5b4>
  807718:	80c00117 	ldw	r3,4(r16)
  80771c:	00bfff04 	movi	r2,-4
  807720:	188e703a 	and	r7,r3,r2
  807724:	3c45c83a 	sub	r2,r7,r17
  807728:	00c003c4 	movi	r3,15
  80772c:	18811f16 	blt	r3,r2,807bac <_malloc_r+0x578>
  807730:	32000515 	stw	r8,20(r6)
  807734:	32000415 	stw	r8,16(r6)
  807738:	10007f0e 	bge	r2,zero,807938 <_malloc_r+0x304>
  80773c:	00807fc4 	movi	r2,511
  807740:	11c0fd36 	bltu	r2,r7,807b38 <_malloc_r+0x504>
  807744:	3806d0fa 	srli	r3,r7,3
  807748:	01c00044 	movi	r7,1
  80774c:	30800117 	ldw	r2,4(r6)
  807750:	19400044 	addi	r5,r3,1
  807754:	294b883a 	add	r5,r5,r5
  807758:	1807d0ba 	srai	r3,r3,2
  80775c:	294b883a 	add	r5,r5,r5
  807760:	294b883a 	add	r5,r5,r5
  807764:	298b883a 	add	r5,r5,r6
  807768:	38c6983a 	sll	r3,r7,r3
  80776c:	29c00017 	ldw	r7,0(r5)
  807770:	2a7ffe04 	addi	r9,r5,-8
  807774:	1886b03a 	or	r3,r3,r2
  807778:	82400315 	stw	r9,12(r16)
  80777c:	81c00215 	stw	r7,8(r16)
  807780:	30c00115 	stw	r3,4(r6)
  807784:	2c000015 	stw	r16,0(r5)
  807788:	3c000315 	stw	r16,12(r7)
  80778c:	2005d0ba 	srai	r2,r4,2
  807790:	01400044 	movi	r5,1
  807794:	288a983a 	sll	r5,r5,r2
  807798:	19406f36 	bltu	r3,r5,807958 <_malloc_r+0x324>
  80779c:	28c4703a 	and	r2,r5,r3
  8077a0:	10000a1e 	bne	r2,zero,8077cc <_malloc_r+0x198>
  8077a4:	00bfff04 	movi	r2,-4
  8077a8:	294b883a 	add	r5,r5,r5
  8077ac:	2088703a 	and	r4,r4,r2
  8077b0:	28c4703a 	and	r2,r5,r3
  8077b4:	21000104 	addi	r4,r4,4
  8077b8:	1000041e 	bne	r2,zero,8077cc <_malloc_r+0x198>
  8077bc:	294b883a 	add	r5,r5,r5
  8077c0:	28c4703a 	and	r2,r5,r3
  8077c4:	21000104 	addi	r4,r4,4
  8077c8:	103ffc26 	beq	r2,zero,8077bc <__alt_mem_onchip_mem+0xff7ff7bc>
  8077cc:	02bfff04 	movi	r10,-4
  8077d0:	024003c4 	movi	r9,15
  8077d4:	21800044 	addi	r6,r4,1
  8077d8:	318d883a 	add	r6,r6,r6
  8077dc:	318d883a 	add	r6,r6,r6
  8077e0:	318d883a 	add	r6,r6,r6
  8077e4:	998d883a 	add	r6,r19,r6
  8077e8:	333ffe04 	addi	r12,r6,-8
  8077ec:	2017883a 	mov	r11,r4
  8077f0:	31800104 	addi	r6,r6,4
  8077f4:	34000017 	ldw	r16,0(r6)
  8077f8:	31fffd04 	addi	r7,r6,-12
  8077fc:	81c0041e 	bne	r16,r7,807810 <_malloc_r+0x1dc>
  807800:	0000fb06 	br	807bf0 <_malloc_r+0x5bc>
  807804:	1801030e 	bge	r3,zero,807c14 <_malloc_r+0x5e0>
  807808:	84000317 	ldw	r16,12(r16)
  80780c:	81c0f826 	beq	r16,r7,807bf0 <_malloc_r+0x5bc>
  807810:	80800117 	ldw	r2,4(r16)
  807814:	1284703a 	and	r2,r2,r10
  807818:	1447c83a 	sub	r3,r2,r17
  80781c:	48fff90e 	bge	r9,r3,807804 <__alt_mem_onchip_mem+0xff7ff804>
  807820:	80800317 	ldw	r2,12(r16)
  807824:	81000217 	ldw	r4,8(r16)
  807828:	89400054 	ori	r5,r17,1
  80782c:	81400115 	stw	r5,4(r16)
  807830:	20800315 	stw	r2,12(r4)
  807834:	11000215 	stw	r4,8(r2)
  807838:	8463883a 	add	r17,r16,r17
  80783c:	9c400515 	stw	r17,20(r19)
  807840:	9c400415 	stw	r17,16(r19)
  807844:	18800054 	ori	r2,r3,1
  807848:	88800115 	stw	r2,4(r17)
  80784c:	8a000315 	stw	r8,12(r17)
  807850:	8a000215 	stw	r8,8(r17)
  807854:	88e3883a 	add	r17,r17,r3
  807858:	88c00015 	stw	r3,0(r17)
  80785c:	9009883a 	mov	r4,r18
  807860:	080a3b80 	call	80a3b8 <__malloc_unlock>
  807864:	80800204 	addi	r2,r16,8
  807868:	00001b06 	br	8078d8 <_malloc_r+0x2a4>
  80786c:	04400404 	movi	r17,16
  807870:	89402536 	bltu	r17,r5,807908 <_malloc_r+0x2d4>
  807874:	080a3940 	call	80a394 <__malloc_lock>
  807878:	00800184 	movi	r2,6
  80787c:	01000084 	movi	r4,2
  807880:	04c02074 	movhi	r19,129
  807884:	1085883a 	add	r2,r2,r2
  807888:	9cf9cf04 	addi	r19,r19,-6340
  80788c:	1085883a 	add	r2,r2,r2
  807890:	9885883a 	add	r2,r19,r2
  807894:	14000117 	ldw	r16,4(r2)
  807898:	10fffe04 	addi	r3,r2,-8
  80789c:	80c0d926 	beq	r16,r3,807c04 <_malloc_r+0x5d0>
  8078a0:	80c00117 	ldw	r3,4(r16)
  8078a4:	81000317 	ldw	r4,12(r16)
  8078a8:	00bfff04 	movi	r2,-4
  8078ac:	1884703a 	and	r2,r3,r2
  8078b0:	81400217 	ldw	r5,8(r16)
  8078b4:	8085883a 	add	r2,r16,r2
  8078b8:	10c00117 	ldw	r3,4(r2)
  8078bc:	29000315 	stw	r4,12(r5)
  8078c0:	21400215 	stw	r5,8(r4)
  8078c4:	18c00054 	ori	r3,r3,1
  8078c8:	10c00115 	stw	r3,4(r2)
  8078cc:	9009883a 	mov	r4,r18
  8078d0:	080a3b80 	call	80a3b8 <__malloc_unlock>
  8078d4:	80800204 	addi	r2,r16,8
  8078d8:	dfc00a17 	ldw	ra,40(sp)
  8078dc:	df000917 	ldw	fp,36(sp)
  8078e0:	ddc00817 	ldw	r23,32(sp)
  8078e4:	dd800717 	ldw	r22,28(sp)
  8078e8:	dd400617 	ldw	r21,24(sp)
  8078ec:	dd000517 	ldw	r20,20(sp)
  8078f0:	dcc00417 	ldw	r19,16(sp)
  8078f4:	dc800317 	ldw	r18,12(sp)
  8078f8:	dc400217 	ldw	r17,8(sp)
  8078fc:	dc000117 	ldw	r16,4(sp)
  807900:	dec00b04 	addi	sp,sp,44
  807904:	f800283a 	ret
  807908:	00800304 	movi	r2,12
  80790c:	90800015 	stw	r2,0(r18)
  807910:	0005883a 	mov	r2,zero
  807914:	003ff006 	br	8078d8 <__alt_mem_onchip_mem+0xff7ff8d8>
  807918:	01002004 	movi	r4,128
  80791c:	02001004 	movi	r8,64
  807920:	01c00fc4 	movi	r7,63
  807924:	003f6106 	br	8076ac <__alt_mem_onchip_mem+0xff7ff6ac>
  807928:	4009883a 	mov	r4,r8
  80792c:	003f7506 	br	807704 <__alt_mem_onchip_mem+0xff7ff704>
  807930:	81000317 	ldw	r4,12(r16)
  807934:	003fde06 	br	8078b0 <__alt_mem_onchip_mem+0xff7ff8b0>
  807938:	81c5883a 	add	r2,r16,r7
  80793c:	11400117 	ldw	r5,4(r2)
  807940:	9009883a 	mov	r4,r18
  807944:	29400054 	ori	r5,r5,1
  807948:	11400115 	stw	r5,4(r2)
  80794c:	080a3b80 	call	80a3b8 <__malloc_unlock>
  807950:	80800204 	addi	r2,r16,8
  807954:	003fe006 	br	8078d8 <__alt_mem_onchip_mem+0xff7ff8d8>
  807958:	9c000217 	ldw	r16,8(r19)
  80795c:	00bfff04 	movi	r2,-4
  807960:	85800117 	ldw	r22,4(r16)
  807964:	b0ac703a 	and	r22,r22,r2
  807968:	b4400336 	bltu	r22,r17,807978 <_malloc_r+0x344>
  80796c:	b445c83a 	sub	r2,r22,r17
  807970:	00c003c4 	movi	r3,15
  807974:	18805d16 	blt	r3,r2,807aec <_malloc_r+0x4b8>
  807978:	05c02074 	movhi	r23,129
  80797c:	00802074 	movhi	r2,129
  807980:	1086fb04 	addi	r2,r2,7148
  807984:	bdffce04 	addi	r23,r23,-200
  807988:	15400017 	ldw	r21,0(r2)
  80798c:	b8c00017 	ldw	r3,0(r23)
  807990:	00bfffc4 	movi	r2,-1
  807994:	858d883a 	add	r6,r16,r22
  807998:	8d6b883a 	add	r21,r17,r21
  80799c:	1880ea26 	beq	r3,r2,807d48 <_malloc_r+0x714>
  8079a0:	ad4403c4 	addi	r21,r21,4111
  8079a4:	00bc0004 	movi	r2,-4096
  8079a8:	a8aa703a 	and	r21,r21,r2
  8079ac:	a80b883a 	mov	r5,r21
  8079b0:	9009883a 	mov	r4,r18
  8079b4:	d9800015 	stw	r6,0(sp)
  8079b8:	08089bc0 	call	8089bc <_sbrk_r>
  8079bc:	1029883a 	mov	r20,r2
  8079c0:	00bfffc4 	movi	r2,-1
  8079c4:	d9800017 	ldw	r6,0(sp)
  8079c8:	a080e826 	beq	r20,r2,807d6c <_malloc_r+0x738>
  8079cc:	a180a636 	bltu	r20,r6,807c68 <_malloc_r+0x634>
  8079d0:	07002074 	movhi	fp,129
  8079d4:	e7070404 	addi	fp,fp,7184
  8079d8:	e0800017 	ldw	r2,0(fp)
  8079dc:	a887883a 	add	r3,r21,r2
  8079e0:	e0c00015 	stw	r3,0(fp)
  8079e4:	3500e626 	beq	r6,r20,807d80 <_malloc_r+0x74c>
  8079e8:	b9000017 	ldw	r4,0(r23)
  8079ec:	00bfffc4 	movi	r2,-1
  8079f0:	2080ee26 	beq	r4,r2,807dac <_malloc_r+0x778>
  8079f4:	a185c83a 	sub	r2,r20,r6
  8079f8:	10c5883a 	add	r2,r2,r3
  8079fc:	e0800015 	stw	r2,0(fp)
  807a00:	a0c001cc 	andi	r3,r20,7
  807a04:	1800bc26 	beq	r3,zero,807cf8 <_malloc_r+0x6c4>
  807a08:	a0e9c83a 	sub	r20,r20,r3
  807a0c:	00840204 	movi	r2,4104
  807a10:	a5000204 	addi	r20,r20,8
  807a14:	10c7c83a 	sub	r3,r2,r3
  807a18:	a545883a 	add	r2,r20,r21
  807a1c:	1083ffcc 	andi	r2,r2,4095
  807a20:	18abc83a 	sub	r21,r3,r2
  807a24:	a80b883a 	mov	r5,r21
  807a28:	9009883a 	mov	r4,r18
  807a2c:	08089bc0 	call	8089bc <_sbrk_r>
  807a30:	00ffffc4 	movi	r3,-1
  807a34:	10c0e126 	beq	r2,r3,807dbc <_malloc_r+0x788>
  807a38:	1505c83a 	sub	r2,r2,r20
  807a3c:	1545883a 	add	r2,r2,r21
  807a40:	10800054 	ori	r2,r2,1
  807a44:	e0c00017 	ldw	r3,0(fp)
  807a48:	9d000215 	stw	r20,8(r19)
  807a4c:	a0800115 	stw	r2,4(r20)
  807a50:	a8c7883a 	add	r3,r21,r3
  807a54:	e0c00015 	stw	r3,0(fp)
  807a58:	84c00e26 	beq	r16,r19,807a94 <_malloc_r+0x460>
  807a5c:	018003c4 	movi	r6,15
  807a60:	3580a72e 	bgeu	r6,r22,807d00 <_malloc_r+0x6cc>
  807a64:	81400117 	ldw	r5,4(r16)
  807a68:	013ffe04 	movi	r4,-8
  807a6c:	b0bffd04 	addi	r2,r22,-12
  807a70:	1104703a 	and	r2,r2,r4
  807a74:	2900004c 	andi	r4,r5,1
  807a78:	2088b03a 	or	r4,r4,r2
  807a7c:	81000115 	stw	r4,4(r16)
  807a80:	01400144 	movi	r5,5
  807a84:	8089883a 	add	r4,r16,r2
  807a88:	21400115 	stw	r5,4(r4)
  807a8c:	21400215 	stw	r5,8(r4)
  807a90:	3080cd36 	bltu	r6,r2,807dc8 <_malloc_r+0x794>
  807a94:	00802074 	movhi	r2,129
  807a98:	1086fa04 	addi	r2,r2,7144
  807a9c:	11000017 	ldw	r4,0(r2)
  807aa0:	20c0012e 	bgeu	r4,r3,807aa8 <_malloc_r+0x474>
  807aa4:	10c00015 	stw	r3,0(r2)
  807aa8:	00802074 	movhi	r2,129
  807aac:	1086f904 	addi	r2,r2,7140
  807ab0:	11000017 	ldw	r4,0(r2)
  807ab4:	9c000217 	ldw	r16,8(r19)
  807ab8:	20c0012e 	bgeu	r4,r3,807ac0 <_malloc_r+0x48c>
  807abc:	10c00015 	stw	r3,0(r2)
  807ac0:	80c00117 	ldw	r3,4(r16)
  807ac4:	00bfff04 	movi	r2,-4
  807ac8:	1886703a 	and	r3,r3,r2
  807acc:	1c45c83a 	sub	r2,r3,r17
  807ad0:	1c400236 	bltu	r3,r17,807adc <_malloc_r+0x4a8>
  807ad4:	00c003c4 	movi	r3,15
  807ad8:	18800416 	blt	r3,r2,807aec <_malloc_r+0x4b8>
  807adc:	9009883a 	mov	r4,r18
  807ae0:	080a3b80 	call	80a3b8 <__malloc_unlock>
  807ae4:	0005883a 	mov	r2,zero
  807ae8:	003f7b06 	br	8078d8 <__alt_mem_onchip_mem+0xff7ff8d8>
  807aec:	88c00054 	ori	r3,r17,1
  807af0:	80c00115 	stw	r3,4(r16)
  807af4:	8463883a 	add	r17,r16,r17
  807af8:	10800054 	ori	r2,r2,1
  807afc:	9c400215 	stw	r17,8(r19)
  807b00:	88800115 	stw	r2,4(r17)
  807b04:	9009883a 	mov	r4,r18
  807b08:	080a3b80 	call	80a3b8 <__malloc_unlock>
  807b0c:	80800204 	addi	r2,r16,8
  807b10:	003f7106 	br	8078d8 <__alt_mem_onchip_mem+0xff7ff8d8>
  807b14:	00c00504 	movi	r3,20
  807b18:	18804a2e 	bgeu	r3,r2,807c44 <_malloc_r+0x610>
  807b1c:	00c01504 	movi	r3,84
  807b20:	18806e36 	bltu	r3,r2,807cdc <_malloc_r+0x6a8>
  807b24:	8804d33a 	srli	r2,r17,12
  807b28:	12001bc4 	addi	r8,r2,111
  807b2c:	11c01b84 	addi	r7,r2,110
  807b30:	4209883a 	add	r4,r8,r8
  807b34:	003edd06 	br	8076ac <__alt_mem_onchip_mem+0xff7ff6ac>
  807b38:	3804d27a 	srli	r2,r7,9
  807b3c:	00c00104 	movi	r3,4
  807b40:	1880442e 	bgeu	r3,r2,807c54 <_malloc_r+0x620>
  807b44:	00c00504 	movi	r3,20
  807b48:	18808136 	bltu	r3,r2,807d50 <_malloc_r+0x71c>
  807b4c:	11401704 	addi	r5,r2,92
  807b50:	10c016c4 	addi	r3,r2,91
  807b54:	294b883a 	add	r5,r5,r5
  807b58:	294b883a 	add	r5,r5,r5
  807b5c:	294b883a 	add	r5,r5,r5
  807b60:	994b883a 	add	r5,r19,r5
  807b64:	28800017 	ldw	r2,0(r5)
  807b68:	01802074 	movhi	r6,129
  807b6c:	297ffe04 	addi	r5,r5,-8
  807b70:	31b9cf04 	addi	r6,r6,-6340
  807b74:	28806526 	beq	r5,r2,807d0c <_malloc_r+0x6d8>
  807b78:	01bfff04 	movi	r6,-4
  807b7c:	10c00117 	ldw	r3,4(r2)
  807b80:	1986703a 	and	r3,r3,r6
  807b84:	38c0022e 	bgeu	r7,r3,807b90 <_malloc_r+0x55c>
  807b88:	10800217 	ldw	r2,8(r2)
  807b8c:	28bffb1e 	bne	r5,r2,807b7c <__alt_mem_onchip_mem+0xff7ffb7c>
  807b90:	11400317 	ldw	r5,12(r2)
  807b94:	98c00117 	ldw	r3,4(r19)
  807b98:	81400315 	stw	r5,12(r16)
  807b9c:	80800215 	stw	r2,8(r16)
  807ba0:	2c000215 	stw	r16,8(r5)
  807ba4:	14000315 	stw	r16,12(r2)
  807ba8:	003ef806 	br	80778c <__alt_mem_onchip_mem+0xff7ff78c>
  807bac:	88c00054 	ori	r3,r17,1
  807bb0:	80c00115 	stw	r3,4(r16)
  807bb4:	8463883a 	add	r17,r16,r17
  807bb8:	34400515 	stw	r17,20(r6)
  807bbc:	34400415 	stw	r17,16(r6)
  807bc0:	10c00054 	ori	r3,r2,1
  807bc4:	8a000315 	stw	r8,12(r17)
  807bc8:	8a000215 	stw	r8,8(r17)
  807bcc:	88c00115 	stw	r3,4(r17)
  807bd0:	88a3883a 	add	r17,r17,r2
  807bd4:	88800015 	stw	r2,0(r17)
  807bd8:	9009883a 	mov	r4,r18
  807bdc:	080a3b80 	call	80a3b8 <__malloc_unlock>
  807be0:	80800204 	addi	r2,r16,8
  807be4:	003f3c06 	br	8078d8 <__alt_mem_onchip_mem+0xff7ff8d8>
  807be8:	30c00117 	ldw	r3,4(r6)
  807bec:	003ee706 	br	80778c <__alt_mem_onchip_mem+0xff7ff78c>
  807bf0:	5ac00044 	addi	r11,r11,1
  807bf4:	588000cc 	andi	r2,r11,3
  807bf8:	31800204 	addi	r6,r6,8
  807bfc:	103efd1e 	bne	r2,zero,8077f4 <__alt_mem_onchip_mem+0xff7ff7f4>
  807c00:	00002406 	br	807c94 <_malloc_r+0x660>
  807c04:	14000317 	ldw	r16,12(r2)
  807c08:	143f251e 	bne	r2,r16,8078a0 <__alt_mem_onchip_mem+0xff7ff8a0>
  807c0c:	21000084 	addi	r4,r4,2
  807c10:	003ebc06 	br	807704 <__alt_mem_onchip_mem+0xff7ff704>
  807c14:	8085883a 	add	r2,r16,r2
  807c18:	10c00117 	ldw	r3,4(r2)
  807c1c:	81000317 	ldw	r4,12(r16)
  807c20:	81400217 	ldw	r5,8(r16)
  807c24:	18c00054 	ori	r3,r3,1
  807c28:	10c00115 	stw	r3,4(r2)
  807c2c:	29000315 	stw	r4,12(r5)
  807c30:	21400215 	stw	r5,8(r4)
  807c34:	9009883a 	mov	r4,r18
  807c38:	080a3b80 	call	80a3b8 <__malloc_unlock>
  807c3c:	80800204 	addi	r2,r16,8
  807c40:	003f2506 	br	8078d8 <__alt_mem_onchip_mem+0xff7ff8d8>
  807c44:	12001704 	addi	r8,r2,92
  807c48:	11c016c4 	addi	r7,r2,91
  807c4c:	4209883a 	add	r4,r8,r8
  807c50:	003e9606 	br	8076ac <__alt_mem_onchip_mem+0xff7ff6ac>
  807c54:	3804d1ba 	srli	r2,r7,6
  807c58:	11400e44 	addi	r5,r2,57
  807c5c:	10c00e04 	addi	r3,r2,56
  807c60:	294b883a 	add	r5,r5,r5
  807c64:	003fbc06 	br	807b58 <__alt_mem_onchip_mem+0xff7ffb58>
  807c68:	84ff5926 	beq	r16,r19,8079d0 <__alt_mem_onchip_mem+0xff7ff9d0>
  807c6c:	00802074 	movhi	r2,129
  807c70:	10b9cf04 	addi	r2,r2,-6340
  807c74:	14000217 	ldw	r16,8(r2)
  807c78:	00bfff04 	movi	r2,-4
  807c7c:	80c00117 	ldw	r3,4(r16)
  807c80:	1886703a 	and	r3,r3,r2
  807c84:	003f9106 	br	807acc <__alt_mem_onchip_mem+0xff7ffacc>
  807c88:	60800217 	ldw	r2,8(r12)
  807c8c:	213fffc4 	addi	r4,r4,-1
  807c90:	1300651e 	bne	r2,r12,807e28 <_malloc_r+0x7f4>
  807c94:	208000cc 	andi	r2,r4,3
  807c98:	633ffe04 	addi	r12,r12,-8
  807c9c:	103ffa1e 	bne	r2,zero,807c88 <__alt_mem_onchip_mem+0xff7ffc88>
  807ca0:	98800117 	ldw	r2,4(r19)
  807ca4:	0146303a 	nor	r3,zero,r5
  807ca8:	1884703a 	and	r2,r3,r2
  807cac:	98800115 	stw	r2,4(r19)
  807cb0:	294b883a 	add	r5,r5,r5
  807cb4:	117f2836 	bltu	r2,r5,807958 <__alt_mem_onchip_mem+0xff7ff958>
  807cb8:	283f2726 	beq	r5,zero,807958 <__alt_mem_onchip_mem+0xff7ff958>
  807cbc:	2886703a 	and	r3,r5,r2
  807cc0:	5809883a 	mov	r4,r11
  807cc4:	183ec31e 	bne	r3,zero,8077d4 <__alt_mem_onchip_mem+0xff7ff7d4>
  807cc8:	294b883a 	add	r5,r5,r5
  807ccc:	2886703a 	and	r3,r5,r2
  807cd0:	21000104 	addi	r4,r4,4
  807cd4:	183ffc26 	beq	r3,zero,807cc8 <__alt_mem_onchip_mem+0xff7ffcc8>
  807cd8:	003ebe06 	br	8077d4 <__alt_mem_onchip_mem+0xff7ff7d4>
  807cdc:	00c05504 	movi	r3,340
  807ce0:	18801236 	bltu	r3,r2,807d2c <_malloc_r+0x6f8>
  807ce4:	8804d3fa 	srli	r2,r17,15
  807ce8:	12001e04 	addi	r8,r2,120
  807cec:	11c01dc4 	addi	r7,r2,119
  807cf0:	4209883a 	add	r4,r8,r8
  807cf4:	003e6d06 	br	8076ac <__alt_mem_onchip_mem+0xff7ff6ac>
  807cf8:	00c40004 	movi	r3,4096
  807cfc:	003f4606 	br	807a18 <__alt_mem_onchip_mem+0xff7ffa18>
  807d00:	00800044 	movi	r2,1
  807d04:	a0800115 	stw	r2,4(r20)
  807d08:	003f7406 	br	807adc <__alt_mem_onchip_mem+0xff7ffadc>
  807d0c:	1805d0ba 	srai	r2,r3,2
  807d10:	01c00044 	movi	r7,1
  807d14:	30c00117 	ldw	r3,4(r6)
  807d18:	388e983a 	sll	r7,r7,r2
  807d1c:	2805883a 	mov	r2,r5
  807d20:	38c6b03a 	or	r3,r7,r3
  807d24:	30c00115 	stw	r3,4(r6)
  807d28:	003f9b06 	br	807b98 <__alt_mem_onchip_mem+0xff7ffb98>
  807d2c:	00c15504 	movi	r3,1364
  807d30:	18801a36 	bltu	r3,r2,807d9c <_malloc_r+0x768>
  807d34:	8804d4ba 	srli	r2,r17,18
  807d38:	12001f44 	addi	r8,r2,125
  807d3c:	11c01f04 	addi	r7,r2,124
  807d40:	4209883a 	add	r4,r8,r8
  807d44:	003e5906 	br	8076ac <__alt_mem_onchip_mem+0xff7ff6ac>
  807d48:	ad400404 	addi	r21,r21,16
  807d4c:	003f1706 	br	8079ac <__alt_mem_onchip_mem+0xff7ff9ac>
  807d50:	00c01504 	movi	r3,84
  807d54:	18802336 	bltu	r3,r2,807de4 <_malloc_r+0x7b0>
  807d58:	3804d33a 	srli	r2,r7,12
  807d5c:	11401bc4 	addi	r5,r2,111
  807d60:	10c01b84 	addi	r3,r2,110
  807d64:	294b883a 	add	r5,r5,r5
  807d68:	003f7b06 	br	807b58 <__alt_mem_onchip_mem+0xff7ffb58>
  807d6c:	9c000217 	ldw	r16,8(r19)
  807d70:	00bfff04 	movi	r2,-4
  807d74:	80c00117 	ldw	r3,4(r16)
  807d78:	1886703a 	and	r3,r3,r2
  807d7c:	003f5306 	br	807acc <__alt_mem_onchip_mem+0xff7ffacc>
  807d80:	3083ffcc 	andi	r2,r6,4095
  807d84:	103f181e 	bne	r2,zero,8079e8 <__alt_mem_onchip_mem+0xff7ff9e8>
  807d88:	99000217 	ldw	r4,8(r19)
  807d8c:	b545883a 	add	r2,r22,r21
  807d90:	10800054 	ori	r2,r2,1
  807d94:	20800115 	stw	r2,4(r4)
  807d98:	003f3e06 	br	807a94 <__alt_mem_onchip_mem+0xff7ffa94>
  807d9c:	01003f84 	movi	r4,254
  807da0:	02001fc4 	movi	r8,127
  807da4:	01c01f84 	movi	r7,126
  807da8:	003e4006 	br	8076ac <__alt_mem_onchip_mem+0xff7ff6ac>
  807dac:	00802074 	movhi	r2,129
  807db0:	10bfce04 	addi	r2,r2,-200
  807db4:	15000015 	stw	r20,0(r2)
  807db8:	003f1106 	br	807a00 <__alt_mem_onchip_mem+0xff7ffa00>
  807dbc:	00800044 	movi	r2,1
  807dc0:	002b883a 	mov	r21,zero
  807dc4:	003f1f06 	br	807a44 <__alt_mem_onchip_mem+0xff7ffa44>
  807dc8:	81400204 	addi	r5,r16,8
  807dcc:	9009883a 	mov	r4,r18
  807dd0:	080937c0 	call	80937c <_free_r>
  807dd4:	00802074 	movhi	r2,129
  807dd8:	10870404 	addi	r2,r2,7184
  807ddc:	10c00017 	ldw	r3,0(r2)
  807de0:	003f2c06 	br	807a94 <__alt_mem_onchip_mem+0xff7ffa94>
  807de4:	00c05504 	movi	r3,340
  807de8:	18800536 	bltu	r3,r2,807e00 <_malloc_r+0x7cc>
  807dec:	3804d3fa 	srli	r2,r7,15
  807df0:	11401e04 	addi	r5,r2,120
  807df4:	10c01dc4 	addi	r3,r2,119
  807df8:	294b883a 	add	r5,r5,r5
  807dfc:	003f5606 	br	807b58 <__alt_mem_onchip_mem+0xff7ffb58>
  807e00:	00c15504 	movi	r3,1364
  807e04:	18800536 	bltu	r3,r2,807e1c <_malloc_r+0x7e8>
  807e08:	3804d4ba 	srli	r2,r7,18
  807e0c:	11401f44 	addi	r5,r2,125
  807e10:	10c01f04 	addi	r3,r2,124
  807e14:	294b883a 	add	r5,r5,r5
  807e18:	003f4f06 	br	807b58 <__alt_mem_onchip_mem+0xff7ffb58>
  807e1c:	01403f84 	movi	r5,254
  807e20:	00c01f84 	movi	r3,126
  807e24:	003f4c06 	br	807b58 <__alt_mem_onchip_mem+0xff7ffb58>
  807e28:	98800117 	ldw	r2,4(r19)
  807e2c:	003fa006 	br	807cb0 <__alt_mem_onchip_mem+0xff7ffcb0>
  807e30:	8808d0fa 	srli	r4,r17,3
  807e34:	20800044 	addi	r2,r4,1
  807e38:	1085883a 	add	r2,r2,r2
  807e3c:	003e9006 	br	807880 <__alt_mem_onchip_mem+0xff7ff880>

00807e40 <memchr>:
  807e40:	208000cc 	andi	r2,r4,3
  807e44:	280f883a 	mov	r7,r5
  807e48:	10003426 	beq	r2,zero,807f1c <memchr+0xdc>
  807e4c:	30bfffc4 	addi	r2,r6,-1
  807e50:	30001a26 	beq	r6,zero,807ebc <memchr+0x7c>
  807e54:	20c00003 	ldbu	r3,0(r4)
  807e58:	29803fcc 	andi	r6,r5,255
  807e5c:	30c0051e 	bne	r6,r3,807e74 <memchr+0x34>
  807e60:	00001806 	br	807ec4 <memchr+0x84>
  807e64:	10001526 	beq	r2,zero,807ebc <memchr+0x7c>
  807e68:	20c00003 	ldbu	r3,0(r4)
  807e6c:	10bfffc4 	addi	r2,r2,-1
  807e70:	30c01426 	beq	r6,r3,807ec4 <memchr+0x84>
  807e74:	21000044 	addi	r4,r4,1
  807e78:	20c000cc 	andi	r3,r4,3
  807e7c:	183ff91e 	bne	r3,zero,807e64 <__alt_mem_onchip_mem+0xff7ffe64>
  807e80:	020000c4 	movi	r8,3
  807e84:	40801136 	bltu	r8,r2,807ecc <memchr+0x8c>
  807e88:	10000c26 	beq	r2,zero,807ebc <memchr+0x7c>
  807e8c:	20c00003 	ldbu	r3,0(r4)
  807e90:	29403fcc 	andi	r5,r5,255
  807e94:	28c00b26 	beq	r5,r3,807ec4 <memchr+0x84>
  807e98:	20c00044 	addi	r3,r4,1
  807e9c:	39803fcc 	andi	r6,r7,255
  807ea0:	2089883a 	add	r4,r4,r2
  807ea4:	00000306 	br	807eb4 <memchr+0x74>
  807ea8:	18c00044 	addi	r3,r3,1
  807eac:	197fffc3 	ldbu	r5,-1(r3)
  807eb0:	31400526 	beq	r6,r5,807ec8 <memchr+0x88>
  807eb4:	1805883a 	mov	r2,r3
  807eb8:	20fffb1e 	bne	r4,r3,807ea8 <__alt_mem_onchip_mem+0xff7ffea8>
  807ebc:	0005883a 	mov	r2,zero
  807ec0:	f800283a 	ret
  807ec4:	2005883a 	mov	r2,r4
  807ec8:	f800283a 	ret
  807ecc:	28c03fcc 	andi	r3,r5,255
  807ed0:	1812923a 	slli	r9,r3,8
  807ed4:	02ffbff4 	movhi	r11,65279
  807ed8:	02a02074 	movhi	r10,32897
  807edc:	48d2b03a 	or	r9,r9,r3
  807ee0:	4806943a 	slli	r3,r9,16
  807ee4:	5affbfc4 	addi	r11,r11,-257
  807ee8:	52a02004 	addi	r10,r10,-32640
  807eec:	48d2b03a 	or	r9,r9,r3
  807ef0:	20c00017 	ldw	r3,0(r4)
  807ef4:	48c6f03a 	xor	r3,r9,r3
  807ef8:	1acd883a 	add	r6,r3,r11
  807efc:	00c6303a 	nor	r3,zero,r3
  807f00:	30c6703a 	and	r3,r6,r3
  807f04:	1a86703a 	and	r3,r3,r10
  807f08:	183fe01e 	bne	r3,zero,807e8c <__alt_mem_onchip_mem+0xff7ffe8c>
  807f0c:	10bfff04 	addi	r2,r2,-4
  807f10:	21000104 	addi	r4,r4,4
  807f14:	40bff636 	bltu	r8,r2,807ef0 <__alt_mem_onchip_mem+0xff7ffef0>
  807f18:	003fdb06 	br	807e88 <__alt_mem_onchip_mem+0xff7ffe88>
  807f1c:	3005883a 	mov	r2,r6
  807f20:	003fd706 	br	807e80 <__alt_mem_onchip_mem+0xff7ffe80>

00807f24 <memcpy>:
  807f24:	defffd04 	addi	sp,sp,-12
  807f28:	dfc00215 	stw	ra,8(sp)
  807f2c:	dc400115 	stw	r17,4(sp)
  807f30:	dc000015 	stw	r16,0(sp)
  807f34:	00c003c4 	movi	r3,15
  807f38:	2005883a 	mov	r2,r4
  807f3c:	1980452e 	bgeu	r3,r6,808054 <memcpy+0x130>
  807f40:	2906b03a 	or	r3,r5,r4
  807f44:	18c000cc 	andi	r3,r3,3
  807f48:	1800441e 	bne	r3,zero,80805c <memcpy+0x138>
  807f4c:	347ffc04 	addi	r17,r6,-16
  807f50:	8822d13a 	srli	r17,r17,4
  807f54:	28c00104 	addi	r3,r5,4
  807f58:	23400104 	addi	r13,r4,4
  807f5c:	8820913a 	slli	r16,r17,4
  807f60:	2b000204 	addi	r12,r5,8
  807f64:	22c00204 	addi	r11,r4,8
  807f68:	84000504 	addi	r16,r16,20
  807f6c:	2a800304 	addi	r10,r5,12
  807f70:	22400304 	addi	r9,r4,12
  807f74:	2c21883a 	add	r16,r5,r16
  807f78:	2811883a 	mov	r8,r5
  807f7c:	200f883a 	mov	r7,r4
  807f80:	41000017 	ldw	r4,0(r8)
  807f84:	1fc00017 	ldw	ra,0(r3)
  807f88:	63c00017 	ldw	r15,0(r12)
  807f8c:	39000015 	stw	r4,0(r7)
  807f90:	53800017 	ldw	r14,0(r10)
  807f94:	6fc00015 	stw	ra,0(r13)
  807f98:	5bc00015 	stw	r15,0(r11)
  807f9c:	4b800015 	stw	r14,0(r9)
  807fa0:	18c00404 	addi	r3,r3,16
  807fa4:	39c00404 	addi	r7,r7,16
  807fa8:	42000404 	addi	r8,r8,16
  807fac:	6b400404 	addi	r13,r13,16
  807fb0:	63000404 	addi	r12,r12,16
  807fb4:	5ac00404 	addi	r11,r11,16
  807fb8:	52800404 	addi	r10,r10,16
  807fbc:	4a400404 	addi	r9,r9,16
  807fc0:	1c3fef1e 	bne	r3,r16,807f80 <__alt_mem_onchip_mem+0xff7fff80>
  807fc4:	89c00044 	addi	r7,r17,1
  807fc8:	380e913a 	slli	r7,r7,4
  807fcc:	310003cc 	andi	r4,r6,15
  807fd0:	02c000c4 	movi	r11,3
  807fd4:	11c7883a 	add	r3,r2,r7
  807fd8:	29cb883a 	add	r5,r5,r7
  807fdc:	5900212e 	bgeu	r11,r4,808064 <memcpy+0x140>
  807fe0:	1813883a 	mov	r9,r3
  807fe4:	2811883a 	mov	r8,r5
  807fe8:	200f883a 	mov	r7,r4
  807fec:	42800017 	ldw	r10,0(r8)
  807ff0:	4a400104 	addi	r9,r9,4
  807ff4:	39ffff04 	addi	r7,r7,-4
  807ff8:	4abfff15 	stw	r10,-4(r9)
  807ffc:	42000104 	addi	r8,r8,4
  808000:	59fffa36 	bltu	r11,r7,807fec <__alt_mem_onchip_mem+0xff7fffec>
  808004:	213fff04 	addi	r4,r4,-4
  808008:	2008d0ba 	srli	r4,r4,2
  80800c:	318000cc 	andi	r6,r6,3
  808010:	21000044 	addi	r4,r4,1
  808014:	2109883a 	add	r4,r4,r4
  808018:	2109883a 	add	r4,r4,r4
  80801c:	1907883a 	add	r3,r3,r4
  808020:	290b883a 	add	r5,r5,r4
  808024:	30000626 	beq	r6,zero,808040 <memcpy+0x11c>
  808028:	198d883a 	add	r6,r3,r6
  80802c:	29c00003 	ldbu	r7,0(r5)
  808030:	18c00044 	addi	r3,r3,1
  808034:	29400044 	addi	r5,r5,1
  808038:	19ffffc5 	stb	r7,-1(r3)
  80803c:	19bffb1e 	bne	r3,r6,80802c <__alt_mem_onchip_mem+0xff80002c>
  808040:	dfc00217 	ldw	ra,8(sp)
  808044:	dc400117 	ldw	r17,4(sp)
  808048:	dc000017 	ldw	r16,0(sp)
  80804c:	dec00304 	addi	sp,sp,12
  808050:	f800283a 	ret
  808054:	2007883a 	mov	r3,r4
  808058:	003ff206 	br	808024 <__alt_mem_onchip_mem+0xff800024>
  80805c:	2007883a 	mov	r3,r4
  808060:	003ff106 	br	808028 <__alt_mem_onchip_mem+0xff800028>
  808064:	200d883a 	mov	r6,r4
  808068:	003fee06 	br	808024 <__alt_mem_onchip_mem+0xff800024>

0080806c <memmove>:
  80806c:	2005883a 	mov	r2,r4
  808070:	29000b2e 	bgeu	r5,r4,8080a0 <memmove+0x34>
  808074:	298f883a 	add	r7,r5,r6
  808078:	21c0092e 	bgeu	r4,r7,8080a0 <memmove+0x34>
  80807c:	2187883a 	add	r3,r4,r6
  808080:	198bc83a 	sub	r5,r3,r6
  808084:	30004826 	beq	r6,zero,8081a8 <memmove+0x13c>
  808088:	39ffffc4 	addi	r7,r7,-1
  80808c:	39000003 	ldbu	r4,0(r7)
  808090:	18ffffc4 	addi	r3,r3,-1
  808094:	19000005 	stb	r4,0(r3)
  808098:	28fffb1e 	bne	r5,r3,808088 <__alt_mem_onchip_mem+0xff800088>
  80809c:	f800283a 	ret
  8080a0:	00c003c4 	movi	r3,15
  8080a4:	1980412e 	bgeu	r3,r6,8081ac <memmove+0x140>
  8080a8:	2886b03a 	or	r3,r5,r2
  8080ac:	18c000cc 	andi	r3,r3,3
  8080b0:	1800401e 	bne	r3,zero,8081b4 <memmove+0x148>
  8080b4:	33fffc04 	addi	r15,r6,-16
  8080b8:	781ed13a 	srli	r15,r15,4
  8080bc:	28c00104 	addi	r3,r5,4
  8080c0:	13400104 	addi	r13,r2,4
  8080c4:	781c913a 	slli	r14,r15,4
  8080c8:	2b000204 	addi	r12,r5,8
  8080cc:	12c00204 	addi	r11,r2,8
  8080d0:	73800504 	addi	r14,r14,20
  8080d4:	2a800304 	addi	r10,r5,12
  8080d8:	12400304 	addi	r9,r2,12
  8080dc:	2b9d883a 	add	r14,r5,r14
  8080e0:	2811883a 	mov	r8,r5
  8080e4:	100f883a 	mov	r7,r2
  8080e8:	41000017 	ldw	r4,0(r8)
  8080ec:	39c00404 	addi	r7,r7,16
  8080f0:	18c00404 	addi	r3,r3,16
  8080f4:	393ffc15 	stw	r4,-16(r7)
  8080f8:	193ffc17 	ldw	r4,-16(r3)
  8080fc:	6b400404 	addi	r13,r13,16
  808100:	5ac00404 	addi	r11,r11,16
  808104:	693ffc15 	stw	r4,-16(r13)
  808108:	61000017 	ldw	r4,0(r12)
  80810c:	4a400404 	addi	r9,r9,16
  808110:	42000404 	addi	r8,r8,16
  808114:	593ffc15 	stw	r4,-16(r11)
  808118:	51000017 	ldw	r4,0(r10)
  80811c:	63000404 	addi	r12,r12,16
  808120:	52800404 	addi	r10,r10,16
  808124:	493ffc15 	stw	r4,-16(r9)
  808128:	1bbfef1e 	bne	r3,r14,8080e8 <__alt_mem_onchip_mem+0xff8000e8>
  80812c:	79000044 	addi	r4,r15,1
  808130:	2008913a 	slli	r4,r4,4
  808134:	328003cc 	andi	r10,r6,15
  808138:	02c000c4 	movi	r11,3
  80813c:	1107883a 	add	r3,r2,r4
  808140:	290b883a 	add	r5,r5,r4
  808144:	5a801e2e 	bgeu	r11,r10,8081c0 <memmove+0x154>
  808148:	1813883a 	mov	r9,r3
  80814c:	2811883a 	mov	r8,r5
  808150:	500f883a 	mov	r7,r10
  808154:	41000017 	ldw	r4,0(r8)
  808158:	4a400104 	addi	r9,r9,4
  80815c:	39ffff04 	addi	r7,r7,-4
  808160:	493fff15 	stw	r4,-4(r9)
  808164:	42000104 	addi	r8,r8,4
  808168:	59fffa36 	bltu	r11,r7,808154 <__alt_mem_onchip_mem+0xff800154>
  80816c:	513fff04 	addi	r4,r10,-4
  808170:	2008d0ba 	srli	r4,r4,2
  808174:	318000cc 	andi	r6,r6,3
  808178:	21000044 	addi	r4,r4,1
  80817c:	2109883a 	add	r4,r4,r4
  808180:	2109883a 	add	r4,r4,r4
  808184:	1907883a 	add	r3,r3,r4
  808188:	290b883a 	add	r5,r5,r4
  80818c:	30000b26 	beq	r6,zero,8081bc <memmove+0x150>
  808190:	198d883a 	add	r6,r3,r6
  808194:	29c00003 	ldbu	r7,0(r5)
  808198:	18c00044 	addi	r3,r3,1
  80819c:	29400044 	addi	r5,r5,1
  8081a0:	19ffffc5 	stb	r7,-1(r3)
  8081a4:	19bffb1e 	bne	r3,r6,808194 <__alt_mem_onchip_mem+0xff800194>
  8081a8:	f800283a 	ret
  8081ac:	1007883a 	mov	r3,r2
  8081b0:	003ff606 	br	80818c <__alt_mem_onchip_mem+0xff80018c>
  8081b4:	1007883a 	mov	r3,r2
  8081b8:	003ff506 	br	808190 <__alt_mem_onchip_mem+0xff800190>
  8081bc:	f800283a 	ret
  8081c0:	500d883a 	mov	r6,r10
  8081c4:	003ff106 	br	80818c <__alt_mem_onchip_mem+0xff80018c>

008081c8 <memset>:
  8081c8:	20c000cc 	andi	r3,r4,3
  8081cc:	2005883a 	mov	r2,r4
  8081d0:	18004426 	beq	r3,zero,8082e4 <memset+0x11c>
  8081d4:	31ffffc4 	addi	r7,r6,-1
  8081d8:	30004026 	beq	r6,zero,8082dc <memset+0x114>
  8081dc:	2813883a 	mov	r9,r5
  8081e0:	200d883a 	mov	r6,r4
  8081e4:	2007883a 	mov	r3,r4
  8081e8:	00000406 	br	8081fc <memset+0x34>
  8081ec:	3a3fffc4 	addi	r8,r7,-1
  8081f0:	31800044 	addi	r6,r6,1
  8081f4:	38003926 	beq	r7,zero,8082dc <memset+0x114>
  8081f8:	400f883a 	mov	r7,r8
  8081fc:	18c00044 	addi	r3,r3,1
  808200:	32400005 	stb	r9,0(r6)
  808204:	1a0000cc 	andi	r8,r3,3
  808208:	403ff81e 	bne	r8,zero,8081ec <__alt_mem_onchip_mem+0xff8001ec>
  80820c:	010000c4 	movi	r4,3
  808210:	21c02d2e 	bgeu	r4,r7,8082c8 <memset+0x100>
  808214:	29003fcc 	andi	r4,r5,255
  808218:	200c923a 	slli	r6,r4,8
  80821c:	3108b03a 	or	r4,r6,r4
  808220:	200c943a 	slli	r6,r4,16
  808224:	218cb03a 	or	r6,r4,r6
  808228:	010003c4 	movi	r4,15
  80822c:	21c0182e 	bgeu	r4,r7,808290 <memset+0xc8>
  808230:	3b3ffc04 	addi	r12,r7,-16
  808234:	6018d13a 	srli	r12,r12,4
  808238:	1a000104 	addi	r8,r3,4
  80823c:	1ac00204 	addi	r11,r3,8
  808240:	6008913a 	slli	r4,r12,4
  808244:	1a800304 	addi	r10,r3,12
  808248:	1813883a 	mov	r9,r3
  80824c:	21000504 	addi	r4,r4,20
  808250:	1909883a 	add	r4,r3,r4
  808254:	49800015 	stw	r6,0(r9)
  808258:	41800015 	stw	r6,0(r8)
  80825c:	59800015 	stw	r6,0(r11)
  808260:	51800015 	stw	r6,0(r10)
  808264:	42000404 	addi	r8,r8,16
  808268:	4a400404 	addi	r9,r9,16
  80826c:	5ac00404 	addi	r11,r11,16
  808270:	52800404 	addi	r10,r10,16
  808274:	413ff71e 	bne	r8,r4,808254 <__alt_mem_onchip_mem+0xff800254>
  808278:	63000044 	addi	r12,r12,1
  80827c:	6018913a 	slli	r12,r12,4
  808280:	39c003cc 	andi	r7,r7,15
  808284:	010000c4 	movi	r4,3
  808288:	1b07883a 	add	r3,r3,r12
  80828c:	21c00e2e 	bgeu	r4,r7,8082c8 <memset+0x100>
  808290:	1813883a 	mov	r9,r3
  808294:	3811883a 	mov	r8,r7
  808298:	010000c4 	movi	r4,3
  80829c:	49800015 	stw	r6,0(r9)
  8082a0:	423fff04 	addi	r8,r8,-4
  8082a4:	4a400104 	addi	r9,r9,4
  8082a8:	223ffc36 	bltu	r4,r8,80829c <__alt_mem_onchip_mem+0xff80029c>
  8082ac:	393fff04 	addi	r4,r7,-4
  8082b0:	2008d0ba 	srli	r4,r4,2
  8082b4:	39c000cc 	andi	r7,r7,3
  8082b8:	21000044 	addi	r4,r4,1
  8082bc:	2109883a 	add	r4,r4,r4
  8082c0:	2109883a 	add	r4,r4,r4
  8082c4:	1907883a 	add	r3,r3,r4
  8082c8:	38000526 	beq	r7,zero,8082e0 <memset+0x118>
  8082cc:	19cf883a 	add	r7,r3,r7
  8082d0:	19400005 	stb	r5,0(r3)
  8082d4:	18c00044 	addi	r3,r3,1
  8082d8:	38fffd1e 	bne	r7,r3,8082d0 <__alt_mem_onchip_mem+0xff8002d0>
  8082dc:	f800283a 	ret
  8082e0:	f800283a 	ret
  8082e4:	2007883a 	mov	r3,r4
  8082e8:	300f883a 	mov	r7,r6
  8082ec:	003fc706 	br	80820c <__alt_mem_onchip_mem+0xff80020c>

008082f0 <_putc_r>:
  8082f0:	defffc04 	addi	sp,sp,-16
  8082f4:	dc000215 	stw	r16,8(sp)
  8082f8:	dfc00315 	stw	ra,12(sp)
  8082fc:	2021883a 	mov	r16,r4
  808300:	20000226 	beq	r4,zero,80830c <_putc_r+0x1c>
  808304:	20800e17 	ldw	r2,56(r4)
  808308:	10001b26 	beq	r2,zero,808378 <_putc_r+0x88>
  80830c:	30800217 	ldw	r2,8(r6)
  808310:	10bfffc4 	addi	r2,r2,-1
  808314:	30800215 	stw	r2,8(r6)
  808318:	10000a16 	blt	r2,zero,808344 <_putc_r+0x54>
  80831c:	30800017 	ldw	r2,0(r6)
  808320:	11400005 	stb	r5,0(r2)
  808324:	30800017 	ldw	r2,0(r6)
  808328:	10c00044 	addi	r3,r2,1
  80832c:	30c00015 	stw	r3,0(r6)
  808330:	10800003 	ldbu	r2,0(r2)
  808334:	dfc00317 	ldw	ra,12(sp)
  808338:	dc000217 	ldw	r16,8(sp)
  80833c:	dec00404 	addi	sp,sp,16
  808340:	f800283a 	ret
  808344:	30c00617 	ldw	r3,24(r6)
  808348:	10c00616 	blt	r2,r3,808364 <_putc_r+0x74>
  80834c:	30800017 	ldw	r2,0(r6)
  808350:	00c00284 	movi	r3,10
  808354:	11400005 	stb	r5,0(r2)
  808358:	30800017 	ldw	r2,0(r6)
  80835c:	11400003 	ldbu	r5,0(r2)
  808360:	28fff11e 	bne	r5,r3,808328 <__alt_mem_onchip_mem+0xff800328>
  808364:	8009883a 	mov	r4,r16
  808368:	dfc00317 	ldw	ra,12(sp)
  80836c:	dc000217 	ldw	r16,8(sp)
  808370:	dec00404 	addi	sp,sp,16
  808374:	0808b4c1 	jmpi	808b4c <__swbuf_r>
  808378:	d9400015 	stw	r5,0(sp)
  80837c:	d9800115 	stw	r6,4(sp)
  808380:	0806fa00 	call	806fa0 <__sinit>
  808384:	d9800117 	ldw	r6,4(sp)
  808388:	d9400017 	ldw	r5,0(sp)
  80838c:	003fdf06 	br	80830c <__alt_mem_onchip_mem+0xff80030c>

00808390 <putc>:
  808390:	00802074 	movhi	r2,129
  808394:	defffc04 	addi	sp,sp,-16
  808398:	10bfcd04 	addi	r2,r2,-204
  80839c:	dc000115 	stw	r16,4(sp)
  8083a0:	14000017 	ldw	r16,0(r2)
  8083a4:	dc400215 	stw	r17,8(sp)
  8083a8:	dfc00315 	stw	ra,12(sp)
  8083ac:	2023883a 	mov	r17,r4
  8083b0:	80000226 	beq	r16,zero,8083bc <putc+0x2c>
  8083b4:	80800e17 	ldw	r2,56(r16)
  8083b8:	10001a26 	beq	r2,zero,808424 <putc+0x94>
  8083bc:	28800217 	ldw	r2,8(r5)
  8083c0:	10bfffc4 	addi	r2,r2,-1
  8083c4:	28800215 	stw	r2,8(r5)
  8083c8:	10000b16 	blt	r2,zero,8083f8 <putc+0x68>
  8083cc:	28800017 	ldw	r2,0(r5)
  8083d0:	14400005 	stb	r17,0(r2)
  8083d4:	28800017 	ldw	r2,0(r5)
  8083d8:	10c00044 	addi	r3,r2,1
  8083dc:	28c00015 	stw	r3,0(r5)
  8083e0:	10800003 	ldbu	r2,0(r2)
  8083e4:	dfc00317 	ldw	ra,12(sp)
  8083e8:	dc400217 	ldw	r17,8(sp)
  8083ec:	dc000117 	ldw	r16,4(sp)
  8083f0:	dec00404 	addi	sp,sp,16
  8083f4:	f800283a 	ret
  8083f8:	28c00617 	ldw	r3,24(r5)
  8083fc:	10c00e16 	blt	r2,r3,808438 <putc+0xa8>
  808400:	28800017 	ldw	r2,0(r5)
  808404:	01000284 	movi	r4,10
  808408:	14400005 	stb	r17,0(r2)
  80840c:	28800017 	ldw	r2,0(r5)
  808410:	10c00003 	ldbu	r3,0(r2)
  808414:	193ff01e 	bne	r3,r4,8083d8 <__alt_mem_onchip_mem+0xff8003d8>
  808418:	280d883a 	mov	r6,r5
  80841c:	180b883a 	mov	r5,r3
  808420:	00000706 	br	808440 <putc+0xb0>
  808424:	8009883a 	mov	r4,r16
  808428:	d9400015 	stw	r5,0(sp)
  80842c:	0806fa00 	call	806fa0 <__sinit>
  808430:	d9400017 	ldw	r5,0(sp)
  808434:	003fe106 	br	8083bc <__alt_mem_onchip_mem+0xff8003bc>
  808438:	280d883a 	mov	r6,r5
  80843c:	880b883a 	mov	r5,r17
  808440:	8009883a 	mov	r4,r16
  808444:	dfc00317 	ldw	ra,12(sp)
  808448:	dc400217 	ldw	r17,8(sp)
  80844c:	dc000117 	ldw	r16,4(sp)
  808450:	dec00404 	addi	sp,sp,16
  808454:	0808b4c1 	jmpi	808b4c <__swbuf_r>

00808458 <_realloc_r>:
  808458:	defff604 	addi	sp,sp,-40
  80845c:	dc800215 	stw	r18,8(sp)
  808460:	dfc00915 	stw	ra,36(sp)
  808464:	df000815 	stw	fp,32(sp)
  808468:	ddc00715 	stw	r23,28(sp)
  80846c:	dd800615 	stw	r22,24(sp)
  808470:	dd400515 	stw	r21,20(sp)
  808474:	dd000415 	stw	r20,16(sp)
  808478:	dcc00315 	stw	r19,12(sp)
  80847c:	dc400115 	stw	r17,4(sp)
  808480:	dc000015 	stw	r16,0(sp)
  808484:	3025883a 	mov	r18,r6
  808488:	2800b726 	beq	r5,zero,808768 <_realloc_r+0x310>
  80848c:	282b883a 	mov	r21,r5
  808490:	2029883a 	mov	r20,r4
  808494:	080a3940 	call	80a394 <__malloc_lock>
  808498:	a8bfff17 	ldw	r2,-4(r21)
  80849c:	043fff04 	movi	r16,-4
  8084a0:	90c002c4 	addi	r3,r18,11
  8084a4:	01000584 	movi	r4,22
  8084a8:	acfffe04 	addi	r19,r21,-8
  8084ac:	1420703a 	and	r16,r2,r16
  8084b0:	20c0332e 	bgeu	r4,r3,808580 <_realloc_r+0x128>
  8084b4:	047ffe04 	movi	r17,-8
  8084b8:	1c62703a 	and	r17,r3,r17
  8084bc:	8807883a 	mov	r3,r17
  8084c0:	88005816 	blt	r17,zero,808624 <_realloc_r+0x1cc>
  8084c4:	8c805736 	bltu	r17,r18,808624 <_realloc_r+0x1cc>
  8084c8:	80c0300e 	bge	r16,r3,80858c <_realloc_r+0x134>
  8084cc:	07002074 	movhi	fp,129
  8084d0:	e739cf04 	addi	fp,fp,-6340
  8084d4:	e1c00217 	ldw	r7,8(fp)
  8084d8:	9c09883a 	add	r4,r19,r16
  8084dc:	22000117 	ldw	r8,4(r4)
  8084e0:	21c06326 	beq	r4,r7,808670 <_realloc_r+0x218>
  8084e4:	017fff84 	movi	r5,-2
  8084e8:	414a703a 	and	r5,r8,r5
  8084ec:	214b883a 	add	r5,r4,r5
  8084f0:	29800117 	ldw	r6,4(r5)
  8084f4:	3180004c 	andi	r6,r6,1
  8084f8:	30003f26 	beq	r6,zero,8085f8 <_realloc_r+0x1a0>
  8084fc:	1080004c 	andi	r2,r2,1
  808500:	10008326 	beq	r2,zero,808710 <_realloc_r+0x2b8>
  808504:	900b883a 	mov	r5,r18
  808508:	a009883a 	mov	r4,r20
  80850c:	08076340 	call	807634 <_malloc_r>
  808510:	1025883a 	mov	r18,r2
  808514:	10011e26 	beq	r2,zero,808990 <_realloc_r+0x538>
  808518:	a93fff17 	ldw	r4,-4(r21)
  80851c:	10fffe04 	addi	r3,r2,-8
  808520:	00bfff84 	movi	r2,-2
  808524:	2084703a 	and	r2,r4,r2
  808528:	9885883a 	add	r2,r19,r2
  80852c:	1880ee26 	beq	r3,r2,8088e8 <_realloc_r+0x490>
  808530:	81bfff04 	addi	r6,r16,-4
  808534:	00800904 	movi	r2,36
  808538:	1180b836 	bltu	r2,r6,80881c <_realloc_r+0x3c4>
  80853c:	00c004c4 	movi	r3,19
  808540:	19809636 	bltu	r3,r6,80879c <_realloc_r+0x344>
  808544:	9005883a 	mov	r2,r18
  808548:	a807883a 	mov	r3,r21
  80854c:	19000017 	ldw	r4,0(r3)
  808550:	11000015 	stw	r4,0(r2)
  808554:	19000117 	ldw	r4,4(r3)
  808558:	11000115 	stw	r4,4(r2)
  80855c:	18c00217 	ldw	r3,8(r3)
  808560:	10c00215 	stw	r3,8(r2)
  808564:	a80b883a 	mov	r5,r21
  808568:	a009883a 	mov	r4,r20
  80856c:	080937c0 	call	80937c <_free_r>
  808570:	a009883a 	mov	r4,r20
  808574:	080a3b80 	call	80a3b8 <__malloc_unlock>
  808578:	9005883a 	mov	r2,r18
  80857c:	00001206 	br	8085c8 <_realloc_r+0x170>
  808580:	00c00404 	movi	r3,16
  808584:	1823883a 	mov	r17,r3
  808588:	003fce06 	br	8084c4 <__alt_mem_onchip_mem+0xff8004c4>
  80858c:	a825883a 	mov	r18,r21
  808590:	8445c83a 	sub	r2,r16,r17
  808594:	00c003c4 	movi	r3,15
  808598:	18802636 	bltu	r3,r2,808634 <_realloc_r+0x1dc>
  80859c:	99800117 	ldw	r6,4(r19)
  8085a0:	9c07883a 	add	r3,r19,r16
  8085a4:	3180004c 	andi	r6,r6,1
  8085a8:	3420b03a 	or	r16,r6,r16
  8085ac:	9c000115 	stw	r16,4(r19)
  8085b0:	18800117 	ldw	r2,4(r3)
  8085b4:	10800054 	ori	r2,r2,1
  8085b8:	18800115 	stw	r2,4(r3)
  8085bc:	a009883a 	mov	r4,r20
  8085c0:	080a3b80 	call	80a3b8 <__malloc_unlock>
  8085c4:	9005883a 	mov	r2,r18
  8085c8:	dfc00917 	ldw	ra,36(sp)
  8085cc:	df000817 	ldw	fp,32(sp)
  8085d0:	ddc00717 	ldw	r23,28(sp)
  8085d4:	dd800617 	ldw	r22,24(sp)
  8085d8:	dd400517 	ldw	r21,20(sp)
  8085dc:	dd000417 	ldw	r20,16(sp)
  8085e0:	dcc00317 	ldw	r19,12(sp)
  8085e4:	dc800217 	ldw	r18,8(sp)
  8085e8:	dc400117 	ldw	r17,4(sp)
  8085ec:	dc000017 	ldw	r16,0(sp)
  8085f0:	dec00a04 	addi	sp,sp,40
  8085f4:	f800283a 	ret
  8085f8:	017fff04 	movi	r5,-4
  8085fc:	414a703a 	and	r5,r8,r5
  808600:	814d883a 	add	r6,r16,r5
  808604:	30c01f16 	blt	r6,r3,808684 <_realloc_r+0x22c>
  808608:	20800317 	ldw	r2,12(r4)
  80860c:	20c00217 	ldw	r3,8(r4)
  808610:	a825883a 	mov	r18,r21
  808614:	3021883a 	mov	r16,r6
  808618:	18800315 	stw	r2,12(r3)
  80861c:	10c00215 	stw	r3,8(r2)
  808620:	003fdb06 	br	808590 <__alt_mem_onchip_mem+0xff800590>
  808624:	00800304 	movi	r2,12
  808628:	a0800015 	stw	r2,0(r20)
  80862c:	0005883a 	mov	r2,zero
  808630:	003fe506 	br	8085c8 <__alt_mem_onchip_mem+0xff8005c8>
  808634:	98c00117 	ldw	r3,4(r19)
  808638:	9c4b883a 	add	r5,r19,r17
  80863c:	11000054 	ori	r4,r2,1
  808640:	18c0004c 	andi	r3,r3,1
  808644:	1c62b03a 	or	r17,r3,r17
  808648:	9c400115 	stw	r17,4(r19)
  80864c:	29000115 	stw	r4,4(r5)
  808650:	2885883a 	add	r2,r5,r2
  808654:	10c00117 	ldw	r3,4(r2)
  808658:	29400204 	addi	r5,r5,8
  80865c:	a009883a 	mov	r4,r20
  808660:	18c00054 	ori	r3,r3,1
  808664:	10c00115 	stw	r3,4(r2)
  808668:	080937c0 	call	80937c <_free_r>
  80866c:	003fd306 	br	8085bc <__alt_mem_onchip_mem+0xff8005bc>
  808670:	017fff04 	movi	r5,-4
  808674:	414a703a 	and	r5,r8,r5
  808678:	89800404 	addi	r6,r17,16
  80867c:	8151883a 	add	r8,r16,r5
  808680:	4180590e 	bge	r8,r6,8087e8 <_realloc_r+0x390>
  808684:	1080004c 	andi	r2,r2,1
  808688:	103f9e1e 	bne	r2,zero,808504 <__alt_mem_onchip_mem+0xff800504>
  80868c:	adbffe17 	ldw	r22,-8(r21)
  808690:	00bfff04 	movi	r2,-4
  808694:	9dadc83a 	sub	r22,r19,r22
  808698:	b1800117 	ldw	r6,4(r22)
  80869c:	3084703a 	and	r2,r6,r2
  8086a0:	20002026 	beq	r4,zero,808724 <_realloc_r+0x2cc>
  8086a4:	80af883a 	add	r23,r16,r2
  8086a8:	b96f883a 	add	r23,r23,r5
  8086ac:	21c05f26 	beq	r4,r7,80882c <_realloc_r+0x3d4>
  8086b0:	b8c01c16 	blt	r23,r3,808724 <_realloc_r+0x2cc>
  8086b4:	20800317 	ldw	r2,12(r4)
  8086b8:	20c00217 	ldw	r3,8(r4)
  8086bc:	81bfff04 	addi	r6,r16,-4
  8086c0:	01000904 	movi	r4,36
  8086c4:	18800315 	stw	r2,12(r3)
  8086c8:	10c00215 	stw	r3,8(r2)
  8086cc:	b0c00217 	ldw	r3,8(r22)
  8086d0:	b0800317 	ldw	r2,12(r22)
  8086d4:	b4800204 	addi	r18,r22,8
  8086d8:	18800315 	stw	r2,12(r3)
  8086dc:	10c00215 	stw	r3,8(r2)
  8086e0:	21801b36 	bltu	r4,r6,808750 <_realloc_r+0x2f8>
  8086e4:	008004c4 	movi	r2,19
  8086e8:	1180352e 	bgeu	r2,r6,8087c0 <_realloc_r+0x368>
  8086ec:	a8800017 	ldw	r2,0(r21)
  8086f0:	b0800215 	stw	r2,8(r22)
  8086f4:	a8800117 	ldw	r2,4(r21)
  8086f8:	b0800315 	stw	r2,12(r22)
  8086fc:	008006c4 	movi	r2,27
  808700:	11807f36 	bltu	r2,r6,808900 <_realloc_r+0x4a8>
  808704:	b0800404 	addi	r2,r22,16
  808708:	ad400204 	addi	r21,r21,8
  80870c:	00002d06 	br	8087c4 <_realloc_r+0x36c>
  808710:	adbffe17 	ldw	r22,-8(r21)
  808714:	00bfff04 	movi	r2,-4
  808718:	9dadc83a 	sub	r22,r19,r22
  80871c:	b1000117 	ldw	r4,4(r22)
  808720:	2084703a 	and	r2,r4,r2
  808724:	b03f7726 	beq	r22,zero,808504 <__alt_mem_onchip_mem+0xff800504>
  808728:	80af883a 	add	r23,r16,r2
  80872c:	b8ff7516 	blt	r23,r3,808504 <__alt_mem_onchip_mem+0xff800504>
  808730:	b0800317 	ldw	r2,12(r22)
  808734:	b0c00217 	ldw	r3,8(r22)
  808738:	81bfff04 	addi	r6,r16,-4
  80873c:	01000904 	movi	r4,36
  808740:	18800315 	stw	r2,12(r3)
  808744:	10c00215 	stw	r3,8(r2)
  808748:	b4800204 	addi	r18,r22,8
  80874c:	21bfe52e 	bgeu	r4,r6,8086e4 <__alt_mem_onchip_mem+0xff8006e4>
  808750:	a80b883a 	mov	r5,r21
  808754:	9009883a 	mov	r4,r18
  808758:	080806c0 	call	80806c <memmove>
  80875c:	b821883a 	mov	r16,r23
  808760:	b027883a 	mov	r19,r22
  808764:	003f8a06 	br	808590 <__alt_mem_onchip_mem+0xff800590>
  808768:	300b883a 	mov	r5,r6
  80876c:	dfc00917 	ldw	ra,36(sp)
  808770:	df000817 	ldw	fp,32(sp)
  808774:	ddc00717 	ldw	r23,28(sp)
  808778:	dd800617 	ldw	r22,24(sp)
  80877c:	dd400517 	ldw	r21,20(sp)
  808780:	dd000417 	ldw	r20,16(sp)
  808784:	dcc00317 	ldw	r19,12(sp)
  808788:	dc800217 	ldw	r18,8(sp)
  80878c:	dc400117 	ldw	r17,4(sp)
  808790:	dc000017 	ldw	r16,0(sp)
  808794:	dec00a04 	addi	sp,sp,40
  808798:	08076341 	jmpi	807634 <_malloc_r>
  80879c:	a8c00017 	ldw	r3,0(r21)
  8087a0:	90c00015 	stw	r3,0(r18)
  8087a4:	a8c00117 	ldw	r3,4(r21)
  8087a8:	90c00115 	stw	r3,4(r18)
  8087ac:	00c006c4 	movi	r3,27
  8087b0:	19804536 	bltu	r3,r6,8088c8 <_realloc_r+0x470>
  8087b4:	90800204 	addi	r2,r18,8
  8087b8:	a8c00204 	addi	r3,r21,8
  8087bc:	003f6306 	br	80854c <__alt_mem_onchip_mem+0xff80054c>
  8087c0:	9005883a 	mov	r2,r18
  8087c4:	a8c00017 	ldw	r3,0(r21)
  8087c8:	b821883a 	mov	r16,r23
  8087cc:	b027883a 	mov	r19,r22
  8087d0:	10c00015 	stw	r3,0(r2)
  8087d4:	a8c00117 	ldw	r3,4(r21)
  8087d8:	10c00115 	stw	r3,4(r2)
  8087dc:	a8c00217 	ldw	r3,8(r21)
  8087e0:	10c00215 	stw	r3,8(r2)
  8087e4:	003f6a06 	br	808590 <__alt_mem_onchip_mem+0xff800590>
  8087e8:	9c67883a 	add	r19,r19,r17
  8087ec:	4445c83a 	sub	r2,r8,r17
  8087f0:	e4c00215 	stw	r19,8(fp)
  8087f4:	10800054 	ori	r2,r2,1
  8087f8:	98800115 	stw	r2,4(r19)
  8087fc:	a8bfff17 	ldw	r2,-4(r21)
  808800:	a009883a 	mov	r4,r20
  808804:	1080004c 	andi	r2,r2,1
  808808:	1462b03a 	or	r17,r2,r17
  80880c:	ac7fff15 	stw	r17,-4(r21)
  808810:	080a3b80 	call	80a3b8 <__malloc_unlock>
  808814:	a805883a 	mov	r2,r21
  808818:	003f6b06 	br	8085c8 <__alt_mem_onchip_mem+0xff8005c8>
  80881c:	a80b883a 	mov	r5,r21
  808820:	9009883a 	mov	r4,r18
  808824:	080806c0 	call	80806c <memmove>
  808828:	003f4e06 	br	808564 <__alt_mem_onchip_mem+0xff800564>
  80882c:	89000404 	addi	r4,r17,16
  808830:	b93fbc16 	blt	r23,r4,808724 <__alt_mem_onchip_mem+0xff800724>
  808834:	b0800317 	ldw	r2,12(r22)
  808838:	b0c00217 	ldw	r3,8(r22)
  80883c:	81bfff04 	addi	r6,r16,-4
  808840:	01000904 	movi	r4,36
  808844:	18800315 	stw	r2,12(r3)
  808848:	10c00215 	stw	r3,8(r2)
  80884c:	b4800204 	addi	r18,r22,8
  808850:	21804336 	bltu	r4,r6,808960 <_realloc_r+0x508>
  808854:	008004c4 	movi	r2,19
  808858:	11803f2e 	bgeu	r2,r6,808958 <_realloc_r+0x500>
  80885c:	a8800017 	ldw	r2,0(r21)
  808860:	b0800215 	stw	r2,8(r22)
  808864:	a8800117 	ldw	r2,4(r21)
  808868:	b0800315 	stw	r2,12(r22)
  80886c:	008006c4 	movi	r2,27
  808870:	11803f36 	bltu	r2,r6,808970 <_realloc_r+0x518>
  808874:	b0800404 	addi	r2,r22,16
  808878:	ad400204 	addi	r21,r21,8
  80887c:	a8c00017 	ldw	r3,0(r21)
  808880:	10c00015 	stw	r3,0(r2)
  808884:	a8c00117 	ldw	r3,4(r21)
  808888:	10c00115 	stw	r3,4(r2)
  80888c:	a8c00217 	ldw	r3,8(r21)
  808890:	10c00215 	stw	r3,8(r2)
  808894:	b447883a 	add	r3,r22,r17
  808898:	bc45c83a 	sub	r2,r23,r17
  80889c:	e0c00215 	stw	r3,8(fp)
  8088a0:	10800054 	ori	r2,r2,1
  8088a4:	18800115 	stw	r2,4(r3)
  8088a8:	b0800117 	ldw	r2,4(r22)
  8088ac:	a009883a 	mov	r4,r20
  8088b0:	1080004c 	andi	r2,r2,1
  8088b4:	1462b03a 	or	r17,r2,r17
  8088b8:	b4400115 	stw	r17,4(r22)
  8088bc:	080a3b80 	call	80a3b8 <__malloc_unlock>
  8088c0:	9005883a 	mov	r2,r18
  8088c4:	003f4006 	br	8085c8 <__alt_mem_onchip_mem+0xff8005c8>
  8088c8:	a8c00217 	ldw	r3,8(r21)
  8088cc:	90c00215 	stw	r3,8(r18)
  8088d0:	a8c00317 	ldw	r3,12(r21)
  8088d4:	90c00315 	stw	r3,12(r18)
  8088d8:	30801126 	beq	r6,r2,808920 <_realloc_r+0x4c8>
  8088dc:	90800404 	addi	r2,r18,16
  8088e0:	a8c00404 	addi	r3,r21,16
  8088e4:	003f1906 	br	80854c <__alt_mem_onchip_mem+0xff80054c>
  8088e8:	90ffff17 	ldw	r3,-4(r18)
  8088ec:	00bfff04 	movi	r2,-4
  8088f0:	a825883a 	mov	r18,r21
  8088f4:	1884703a 	and	r2,r3,r2
  8088f8:	80a1883a 	add	r16,r16,r2
  8088fc:	003f2406 	br	808590 <__alt_mem_onchip_mem+0xff800590>
  808900:	a8800217 	ldw	r2,8(r21)
  808904:	b0800415 	stw	r2,16(r22)
  808908:	a8800317 	ldw	r2,12(r21)
  80890c:	b0800515 	stw	r2,20(r22)
  808910:	31000a26 	beq	r6,r4,80893c <_realloc_r+0x4e4>
  808914:	b0800604 	addi	r2,r22,24
  808918:	ad400404 	addi	r21,r21,16
  80891c:	003fa906 	br	8087c4 <__alt_mem_onchip_mem+0xff8007c4>
  808920:	a9000417 	ldw	r4,16(r21)
  808924:	90800604 	addi	r2,r18,24
  808928:	a8c00604 	addi	r3,r21,24
  80892c:	91000415 	stw	r4,16(r18)
  808930:	a9000517 	ldw	r4,20(r21)
  808934:	91000515 	stw	r4,20(r18)
  808938:	003f0406 	br	80854c <__alt_mem_onchip_mem+0xff80054c>
  80893c:	a8c00417 	ldw	r3,16(r21)
  808940:	ad400604 	addi	r21,r21,24
  808944:	b0800804 	addi	r2,r22,32
  808948:	b0c00615 	stw	r3,24(r22)
  80894c:	a8ffff17 	ldw	r3,-4(r21)
  808950:	b0c00715 	stw	r3,28(r22)
  808954:	003f9b06 	br	8087c4 <__alt_mem_onchip_mem+0xff8007c4>
  808958:	9005883a 	mov	r2,r18
  80895c:	003fc706 	br	80887c <__alt_mem_onchip_mem+0xff80087c>
  808960:	a80b883a 	mov	r5,r21
  808964:	9009883a 	mov	r4,r18
  808968:	080806c0 	call	80806c <memmove>
  80896c:	003fc906 	br	808894 <__alt_mem_onchip_mem+0xff800894>
  808970:	a8800217 	ldw	r2,8(r21)
  808974:	b0800415 	stw	r2,16(r22)
  808978:	a8800317 	ldw	r2,12(r21)
  80897c:	b0800515 	stw	r2,20(r22)
  808980:	31000726 	beq	r6,r4,8089a0 <_realloc_r+0x548>
  808984:	b0800604 	addi	r2,r22,24
  808988:	ad400404 	addi	r21,r21,16
  80898c:	003fbb06 	br	80887c <__alt_mem_onchip_mem+0xff80087c>
  808990:	a009883a 	mov	r4,r20
  808994:	080a3b80 	call	80a3b8 <__malloc_unlock>
  808998:	0005883a 	mov	r2,zero
  80899c:	003f0a06 	br	8085c8 <__alt_mem_onchip_mem+0xff8005c8>
  8089a0:	a8c00417 	ldw	r3,16(r21)
  8089a4:	ad400604 	addi	r21,r21,24
  8089a8:	b0800804 	addi	r2,r22,32
  8089ac:	b0c00615 	stw	r3,24(r22)
  8089b0:	a8ffff17 	ldw	r3,-4(r21)
  8089b4:	b0c00715 	stw	r3,28(r22)
  8089b8:	003fb006 	br	80887c <__alt_mem_onchip_mem+0xff80087c>

008089bc <_sbrk_r>:
  8089bc:	defffd04 	addi	sp,sp,-12
  8089c0:	dc000015 	stw	r16,0(sp)
  8089c4:	04002074 	movhi	r16,129
  8089c8:	dc400115 	stw	r17,4(sp)
  8089cc:	8406fc04 	addi	r16,r16,7152
  8089d0:	2023883a 	mov	r17,r4
  8089d4:	2809883a 	mov	r4,r5
  8089d8:	dfc00215 	stw	ra,8(sp)
  8089dc:	80000015 	stw	zero,0(r16)
  8089e0:	080a5780 	call	80a578 <sbrk>
  8089e4:	00ffffc4 	movi	r3,-1
  8089e8:	10c00526 	beq	r2,r3,808a00 <_sbrk_r+0x44>
  8089ec:	dfc00217 	ldw	ra,8(sp)
  8089f0:	dc400117 	ldw	r17,4(sp)
  8089f4:	dc000017 	ldw	r16,0(sp)
  8089f8:	dec00304 	addi	sp,sp,12
  8089fc:	f800283a 	ret
  808a00:	80c00017 	ldw	r3,0(r16)
  808a04:	183ff926 	beq	r3,zero,8089ec <__alt_mem_onchip_mem+0xff8009ec>
  808a08:	88c00015 	stw	r3,0(r17)
  808a0c:	003ff706 	br	8089ec <__alt_mem_onchip_mem+0xff8009ec>

00808a10 <__sread>:
  808a10:	defffe04 	addi	sp,sp,-8
  808a14:	dc000015 	stw	r16,0(sp)
  808a18:	2821883a 	mov	r16,r5
  808a1c:	2940038f 	ldh	r5,14(r5)
  808a20:	dfc00115 	stw	ra,4(sp)
  808a24:	08098a80 	call	8098a8 <_read_r>
  808a28:	10000716 	blt	r2,zero,808a48 <__sread+0x38>
  808a2c:	80c01417 	ldw	r3,80(r16)
  808a30:	1887883a 	add	r3,r3,r2
  808a34:	80c01415 	stw	r3,80(r16)
  808a38:	dfc00117 	ldw	ra,4(sp)
  808a3c:	dc000017 	ldw	r16,0(sp)
  808a40:	dec00204 	addi	sp,sp,8
  808a44:	f800283a 	ret
  808a48:	80c0030b 	ldhu	r3,12(r16)
  808a4c:	18fbffcc 	andi	r3,r3,61439
  808a50:	80c0030d 	sth	r3,12(r16)
  808a54:	dfc00117 	ldw	ra,4(sp)
  808a58:	dc000017 	ldw	r16,0(sp)
  808a5c:	dec00204 	addi	sp,sp,8
  808a60:	f800283a 	ret

00808a64 <__seofread>:
  808a64:	0005883a 	mov	r2,zero
  808a68:	f800283a 	ret

00808a6c <__swrite>:
  808a6c:	2880030b 	ldhu	r2,12(r5)
  808a70:	defffb04 	addi	sp,sp,-20
  808a74:	dcc00315 	stw	r19,12(sp)
  808a78:	dc800215 	stw	r18,8(sp)
  808a7c:	dc400115 	stw	r17,4(sp)
  808a80:	dc000015 	stw	r16,0(sp)
  808a84:	dfc00415 	stw	ra,16(sp)
  808a88:	10c0400c 	andi	r3,r2,256
  808a8c:	2821883a 	mov	r16,r5
  808a90:	2023883a 	mov	r17,r4
  808a94:	3025883a 	mov	r18,r6
  808a98:	3827883a 	mov	r19,r7
  808a9c:	18000526 	beq	r3,zero,808ab4 <__swrite+0x48>
  808aa0:	2940038f 	ldh	r5,14(r5)
  808aa4:	01c00084 	movi	r7,2
  808aa8:	000d883a 	mov	r6,zero
  808aac:	080968c0 	call	80968c <_lseek_r>
  808ab0:	8080030b 	ldhu	r2,12(r16)
  808ab4:	8140038f 	ldh	r5,14(r16)
  808ab8:	10bbffcc 	andi	r2,r2,61439
  808abc:	980f883a 	mov	r7,r19
  808ac0:	900d883a 	mov	r6,r18
  808ac4:	8809883a 	mov	r4,r17
  808ac8:	8080030d 	sth	r2,12(r16)
  808acc:	dfc00417 	ldw	ra,16(sp)
  808ad0:	dcc00317 	ldw	r19,12(sp)
  808ad4:	dc800217 	ldw	r18,8(sp)
  808ad8:	dc400117 	ldw	r17,4(sp)
  808adc:	dc000017 	ldw	r16,0(sp)
  808ae0:	dec00504 	addi	sp,sp,20
  808ae4:	0808ca41 	jmpi	808ca4 <_write_r>

00808ae8 <__sseek>:
  808ae8:	defffe04 	addi	sp,sp,-8
  808aec:	dc000015 	stw	r16,0(sp)
  808af0:	2821883a 	mov	r16,r5
  808af4:	2940038f 	ldh	r5,14(r5)
  808af8:	dfc00115 	stw	ra,4(sp)
  808afc:	080968c0 	call	80968c <_lseek_r>
  808b00:	00ffffc4 	movi	r3,-1
  808b04:	10c00826 	beq	r2,r3,808b28 <__sseek+0x40>
  808b08:	80c0030b 	ldhu	r3,12(r16)
  808b0c:	80801415 	stw	r2,80(r16)
  808b10:	18c40014 	ori	r3,r3,4096
  808b14:	80c0030d 	sth	r3,12(r16)
  808b18:	dfc00117 	ldw	ra,4(sp)
  808b1c:	dc000017 	ldw	r16,0(sp)
  808b20:	dec00204 	addi	sp,sp,8
  808b24:	f800283a 	ret
  808b28:	80c0030b 	ldhu	r3,12(r16)
  808b2c:	18fbffcc 	andi	r3,r3,61439
  808b30:	80c0030d 	sth	r3,12(r16)
  808b34:	dfc00117 	ldw	ra,4(sp)
  808b38:	dc000017 	ldw	r16,0(sp)
  808b3c:	dec00204 	addi	sp,sp,8
  808b40:	f800283a 	ret

00808b44 <__sclose>:
  808b44:	2940038f 	ldh	r5,14(r5)
  808b48:	0808e581 	jmpi	808e58 <_close_r>

00808b4c <__swbuf_r>:
  808b4c:	defffb04 	addi	sp,sp,-20
  808b50:	dcc00315 	stw	r19,12(sp)
  808b54:	dc800215 	stw	r18,8(sp)
  808b58:	dc000015 	stw	r16,0(sp)
  808b5c:	dfc00415 	stw	ra,16(sp)
  808b60:	dc400115 	stw	r17,4(sp)
  808b64:	2025883a 	mov	r18,r4
  808b68:	2827883a 	mov	r19,r5
  808b6c:	3021883a 	mov	r16,r6
  808b70:	20000226 	beq	r4,zero,808b7c <__swbuf_r+0x30>
  808b74:	20800e17 	ldw	r2,56(r4)
  808b78:	10004226 	beq	r2,zero,808c84 <__swbuf_r+0x138>
  808b7c:	80800617 	ldw	r2,24(r16)
  808b80:	8100030b 	ldhu	r4,12(r16)
  808b84:	80800215 	stw	r2,8(r16)
  808b88:	2080020c 	andi	r2,r4,8
  808b8c:	10003626 	beq	r2,zero,808c68 <__swbuf_r+0x11c>
  808b90:	80c00417 	ldw	r3,16(r16)
  808b94:	18003426 	beq	r3,zero,808c68 <__swbuf_r+0x11c>
  808b98:	2088000c 	andi	r2,r4,8192
  808b9c:	9c403fcc 	andi	r17,r19,255
  808ba0:	10001a26 	beq	r2,zero,808c0c <__swbuf_r+0xc0>
  808ba4:	80800017 	ldw	r2,0(r16)
  808ba8:	81000517 	ldw	r4,20(r16)
  808bac:	10c7c83a 	sub	r3,r2,r3
  808bb0:	1900200e 	bge	r3,r4,808c34 <__swbuf_r+0xe8>
  808bb4:	18c00044 	addi	r3,r3,1
  808bb8:	81000217 	ldw	r4,8(r16)
  808bbc:	11400044 	addi	r5,r2,1
  808bc0:	81400015 	stw	r5,0(r16)
  808bc4:	213fffc4 	addi	r4,r4,-1
  808bc8:	81000215 	stw	r4,8(r16)
  808bcc:	14c00005 	stb	r19,0(r2)
  808bd0:	80800517 	ldw	r2,20(r16)
  808bd4:	10c01e26 	beq	r2,r3,808c50 <__swbuf_r+0x104>
  808bd8:	8080030b 	ldhu	r2,12(r16)
  808bdc:	1080004c 	andi	r2,r2,1
  808be0:	10000226 	beq	r2,zero,808bec <__swbuf_r+0xa0>
  808be4:	00800284 	movi	r2,10
  808be8:	88801926 	beq	r17,r2,808c50 <__swbuf_r+0x104>
  808bec:	8805883a 	mov	r2,r17
  808bf0:	dfc00417 	ldw	ra,16(sp)
  808bf4:	dcc00317 	ldw	r19,12(sp)
  808bf8:	dc800217 	ldw	r18,8(sp)
  808bfc:	dc400117 	ldw	r17,4(sp)
  808c00:	dc000017 	ldw	r16,0(sp)
  808c04:	dec00504 	addi	sp,sp,20
  808c08:	f800283a 	ret
  808c0c:	81401917 	ldw	r5,100(r16)
  808c10:	00b7ffc4 	movi	r2,-8193
  808c14:	21080014 	ori	r4,r4,8192
  808c18:	2884703a 	and	r2,r5,r2
  808c1c:	80801915 	stw	r2,100(r16)
  808c20:	80800017 	ldw	r2,0(r16)
  808c24:	8100030d 	sth	r4,12(r16)
  808c28:	81000517 	ldw	r4,20(r16)
  808c2c:	10c7c83a 	sub	r3,r2,r3
  808c30:	193fe016 	blt	r3,r4,808bb4 <__alt_mem_onchip_mem+0xff800bb4>
  808c34:	800b883a 	mov	r5,r16
  808c38:	9009883a 	mov	r4,r18
  808c3c:	08091cc0 	call	8091cc <_fflush_r>
  808c40:	1000071e 	bne	r2,zero,808c60 <__swbuf_r+0x114>
  808c44:	80800017 	ldw	r2,0(r16)
  808c48:	00c00044 	movi	r3,1
  808c4c:	003fda06 	br	808bb8 <__alt_mem_onchip_mem+0xff800bb8>
  808c50:	800b883a 	mov	r5,r16
  808c54:	9009883a 	mov	r4,r18
  808c58:	08091cc0 	call	8091cc <_fflush_r>
  808c5c:	103fe326 	beq	r2,zero,808bec <__alt_mem_onchip_mem+0xff800bec>
  808c60:	00bfffc4 	movi	r2,-1
  808c64:	003fe206 	br	808bf0 <__alt_mem_onchip_mem+0xff800bf0>
  808c68:	800b883a 	mov	r5,r16
  808c6c:	9009883a 	mov	r4,r18
  808c70:	0808d040 	call	808d04 <__swsetup_r>
  808c74:	103ffa1e 	bne	r2,zero,808c60 <__alt_mem_onchip_mem+0xff800c60>
  808c78:	8100030b 	ldhu	r4,12(r16)
  808c7c:	80c00417 	ldw	r3,16(r16)
  808c80:	003fc506 	br	808b98 <__alt_mem_onchip_mem+0xff800b98>
  808c84:	0806fa00 	call	806fa0 <__sinit>
  808c88:	003fbc06 	br	808b7c <__alt_mem_onchip_mem+0xff800b7c>

00808c8c <__swbuf>:
  808c8c:	00802074 	movhi	r2,129
  808c90:	10bfcd04 	addi	r2,r2,-204
  808c94:	280d883a 	mov	r6,r5
  808c98:	200b883a 	mov	r5,r4
  808c9c:	11000017 	ldw	r4,0(r2)
  808ca0:	0808b4c1 	jmpi	808b4c <__swbuf_r>

00808ca4 <_write_r>:
  808ca4:	defffd04 	addi	sp,sp,-12
  808ca8:	2805883a 	mov	r2,r5
  808cac:	dc000015 	stw	r16,0(sp)
  808cb0:	04002074 	movhi	r16,129
  808cb4:	dc400115 	stw	r17,4(sp)
  808cb8:	300b883a 	mov	r5,r6
  808cbc:	8406fc04 	addi	r16,r16,7152
  808cc0:	2023883a 	mov	r17,r4
  808cc4:	380d883a 	mov	r6,r7
  808cc8:	1009883a 	mov	r4,r2
  808ccc:	dfc00215 	stw	ra,8(sp)
  808cd0:	80000015 	stw	zero,0(r16)
  808cd4:	080a8080 	call	80a808 <write>
  808cd8:	00ffffc4 	movi	r3,-1
  808cdc:	10c00526 	beq	r2,r3,808cf4 <_write_r+0x50>
  808ce0:	dfc00217 	ldw	ra,8(sp)
  808ce4:	dc400117 	ldw	r17,4(sp)
  808ce8:	dc000017 	ldw	r16,0(sp)
  808cec:	dec00304 	addi	sp,sp,12
  808cf0:	f800283a 	ret
  808cf4:	80c00017 	ldw	r3,0(r16)
  808cf8:	183ff926 	beq	r3,zero,808ce0 <__alt_mem_onchip_mem+0xff800ce0>
  808cfc:	88c00015 	stw	r3,0(r17)
  808d00:	003ff706 	br	808ce0 <__alt_mem_onchip_mem+0xff800ce0>

00808d04 <__swsetup_r>:
  808d04:	00802074 	movhi	r2,129
  808d08:	defffd04 	addi	sp,sp,-12
  808d0c:	10bfcd04 	addi	r2,r2,-204
  808d10:	dc400115 	stw	r17,4(sp)
  808d14:	2023883a 	mov	r17,r4
  808d18:	11000017 	ldw	r4,0(r2)
  808d1c:	dc000015 	stw	r16,0(sp)
  808d20:	dfc00215 	stw	ra,8(sp)
  808d24:	2821883a 	mov	r16,r5
  808d28:	20000226 	beq	r4,zero,808d34 <__swsetup_r+0x30>
  808d2c:	20800e17 	ldw	r2,56(r4)
  808d30:	10003126 	beq	r2,zero,808df8 <__swsetup_r+0xf4>
  808d34:	8080030b 	ldhu	r2,12(r16)
  808d38:	10c0020c 	andi	r3,r2,8
  808d3c:	1009883a 	mov	r4,r2
  808d40:	18000f26 	beq	r3,zero,808d80 <__swsetup_r+0x7c>
  808d44:	80c00417 	ldw	r3,16(r16)
  808d48:	18001526 	beq	r3,zero,808da0 <__swsetup_r+0x9c>
  808d4c:	1100004c 	andi	r4,r2,1
  808d50:	20001c1e 	bne	r4,zero,808dc4 <__swsetup_r+0xc0>
  808d54:	1080008c 	andi	r2,r2,2
  808d58:	1000291e 	bne	r2,zero,808e00 <__swsetup_r+0xfc>
  808d5c:	80800517 	ldw	r2,20(r16)
  808d60:	80800215 	stw	r2,8(r16)
  808d64:	18001c26 	beq	r3,zero,808dd8 <__swsetup_r+0xd4>
  808d68:	0005883a 	mov	r2,zero
  808d6c:	dfc00217 	ldw	ra,8(sp)
  808d70:	dc400117 	ldw	r17,4(sp)
  808d74:	dc000017 	ldw	r16,0(sp)
  808d78:	dec00304 	addi	sp,sp,12
  808d7c:	f800283a 	ret
  808d80:	2080040c 	andi	r2,r4,16
  808d84:	10002e26 	beq	r2,zero,808e40 <__swsetup_r+0x13c>
  808d88:	2080010c 	andi	r2,r4,4
  808d8c:	10001e1e 	bne	r2,zero,808e08 <__swsetup_r+0x104>
  808d90:	80c00417 	ldw	r3,16(r16)
  808d94:	20800214 	ori	r2,r4,8
  808d98:	8080030d 	sth	r2,12(r16)
  808d9c:	183feb1e 	bne	r3,zero,808d4c <__alt_mem_onchip_mem+0xff800d4c>
  808da0:	1100a00c 	andi	r4,r2,640
  808da4:	01408004 	movi	r5,512
  808da8:	217fe826 	beq	r4,r5,808d4c <__alt_mem_onchip_mem+0xff800d4c>
  808dac:	800b883a 	mov	r5,r16
  808db0:	8809883a 	mov	r4,r17
  808db4:	08096ec0 	call	8096ec <__smakebuf_r>
  808db8:	8080030b 	ldhu	r2,12(r16)
  808dbc:	80c00417 	ldw	r3,16(r16)
  808dc0:	003fe206 	br	808d4c <__alt_mem_onchip_mem+0xff800d4c>
  808dc4:	80800517 	ldw	r2,20(r16)
  808dc8:	80000215 	stw	zero,8(r16)
  808dcc:	0085c83a 	sub	r2,zero,r2
  808dd0:	80800615 	stw	r2,24(r16)
  808dd4:	183fe41e 	bne	r3,zero,808d68 <__alt_mem_onchip_mem+0xff800d68>
  808dd8:	80c0030b 	ldhu	r3,12(r16)
  808ddc:	0005883a 	mov	r2,zero
  808de0:	1900200c 	andi	r4,r3,128
  808de4:	203fe126 	beq	r4,zero,808d6c <__alt_mem_onchip_mem+0xff800d6c>
  808de8:	18c01014 	ori	r3,r3,64
  808dec:	80c0030d 	sth	r3,12(r16)
  808df0:	00bfffc4 	movi	r2,-1
  808df4:	003fdd06 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>
  808df8:	0806fa00 	call	806fa0 <__sinit>
  808dfc:	003fcd06 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  808e00:	0005883a 	mov	r2,zero
  808e04:	003fd606 	br	808d60 <__alt_mem_onchip_mem+0xff800d60>
  808e08:	81400c17 	ldw	r5,48(r16)
  808e0c:	28000626 	beq	r5,zero,808e28 <__swsetup_r+0x124>
  808e10:	80801004 	addi	r2,r16,64
  808e14:	28800326 	beq	r5,r2,808e24 <__swsetup_r+0x120>
  808e18:	8809883a 	mov	r4,r17
  808e1c:	080937c0 	call	80937c <_free_r>
  808e20:	8100030b 	ldhu	r4,12(r16)
  808e24:	80000c15 	stw	zero,48(r16)
  808e28:	80c00417 	ldw	r3,16(r16)
  808e2c:	00bff6c4 	movi	r2,-37
  808e30:	1108703a 	and	r4,r2,r4
  808e34:	80000115 	stw	zero,4(r16)
  808e38:	80c00015 	stw	r3,0(r16)
  808e3c:	003fd506 	br	808d94 <__alt_mem_onchip_mem+0xff800d94>
  808e40:	00800244 	movi	r2,9
  808e44:	88800015 	stw	r2,0(r17)
  808e48:	20801014 	ori	r2,r4,64
  808e4c:	8080030d 	sth	r2,12(r16)
  808e50:	00bfffc4 	movi	r2,-1
  808e54:	003fc506 	br	808d6c <__alt_mem_onchip_mem+0xff800d6c>

00808e58 <_close_r>:
  808e58:	defffd04 	addi	sp,sp,-12
  808e5c:	dc000015 	stw	r16,0(sp)
  808e60:	04002074 	movhi	r16,129
  808e64:	dc400115 	stw	r17,4(sp)
  808e68:	8406fc04 	addi	r16,r16,7152
  808e6c:	2023883a 	mov	r17,r4
  808e70:	2809883a 	mov	r4,r5
  808e74:	dfc00215 	stw	ra,8(sp)
  808e78:	80000015 	stw	zero,0(r16)
  808e7c:	0809cd40 	call	809cd4 <close>
  808e80:	00ffffc4 	movi	r3,-1
  808e84:	10c00526 	beq	r2,r3,808e9c <_close_r+0x44>
  808e88:	dfc00217 	ldw	ra,8(sp)
  808e8c:	dc400117 	ldw	r17,4(sp)
  808e90:	dc000017 	ldw	r16,0(sp)
  808e94:	dec00304 	addi	sp,sp,12
  808e98:	f800283a 	ret
  808e9c:	80c00017 	ldw	r3,0(r16)
  808ea0:	183ff926 	beq	r3,zero,808e88 <__alt_mem_onchip_mem+0xff800e88>
  808ea4:	88c00015 	stw	r3,0(r17)
  808ea8:	003ff706 	br	808e88 <__alt_mem_onchip_mem+0xff800e88>

00808eac <_fclose_r>:
  808eac:	28003926 	beq	r5,zero,808f94 <_fclose_r+0xe8>
  808eb0:	defffc04 	addi	sp,sp,-16
  808eb4:	dc400115 	stw	r17,4(sp)
  808eb8:	dc000015 	stw	r16,0(sp)
  808ebc:	dfc00315 	stw	ra,12(sp)
  808ec0:	dc800215 	stw	r18,8(sp)
  808ec4:	2023883a 	mov	r17,r4
  808ec8:	2821883a 	mov	r16,r5
  808ecc:	20000226 	beq	r4,zero,808ed8 <_fclose_r+0x2c>
  808ed0:	20800e17 	ldw	r2,56(r4)
  808ed4:	10002726 	beq	r2,zero,808f74 <_fclose_r+0xc8>
  808ed8:	8080030f 	ldh	r2,12(r16)
  808edc:	1000071e 	bne	r2,zero,808efc <_fclose_r+0x50>
  808ee0:	0005883a 	mov	r2,zero
  808ee4:	dfc00317 	ldw	ra,12(sp)
  808ee8:	dc800217 	ldw	r18,8(sp)
  808eec:	dc400117 	ldw	r17,4(sp)
  808ef0:	dc000017 	ldw	r16,0(sp)
  808ef4:	dec00404 	addi	sp,sp,16
  808ef8:	f800283a 	ret
  808efc:	800b883a 	mov	r5,r16
  808f00:	8809883a 	mov	r4,r17
  808f04:	0808fb00 	call	808fb0 <__sflush_r>
  808f08:	1025883a 	mov	r18,r2
  808f0c:	80800b17 	ldw	r2,44(r16)
  808f10:	10000426 	beq	r2,zero,808f24 <_fclose_r+0x78>
  808f14:	81400717 	ldw	r5,28(r16)
  808f18:	8809883a 	mov	r4,r17
  808f1c:	103ee83a 	callr	r2
  808f20:	10001616 	blt	r2,zero,808f7c <_fclose_r+0xd0>
  808f24:	8080030b 	ldhu	r2,12(r16)
  808f28:	1080200c 	andi	r2,r2,128
  808f2c:	1000151e 	bne	r2,zero,808f84 <_fclose_r+0xd8>
  808f30:	81400c17 	ldw	r5,48(r16)
  808f34:	28000526 	beq	r5,zero,808f4c <_fclose_r+0xa0>
  808f38:	80801004 	addi	r2,r16,64
  808f3c:	28800226 	beq	r5,r2,808f48 <_fclose_r+0x9c>
  808f40:	8809883a 	mov	r4,r17
  808f44:	080937c0 	call	80937c <_free_r>
  808f48:	80000c15 	stw	zero,48(r16)
  808f4c:	81401117 	ldw	r5,68(r16)
  808f50:	28000326 	beq	r5,zero,808f60 <_fclose_r+0xb4>
  808f54:	8809883a 	mov	r4,r17
  808f58:	080937c0 	call	80937c <_free_r>
  808f5c:	80001115 	stw	zero,68(r16)
  808f60:	0806fb00 	call	806fb0 <__sfp_lock_acquire>
  808f64:	8000030d 	sth	zero,12(r16)
  808f68:	0806fb40 	call	806fb4 <__sfp_lock_release>
  808f6c:	9005883a 	mov	r2,r18
  808f70:	003fdc06 	br	808ee4 <__alt_mem_onchip_mem+0xff800ee4>
  808f74:	0806fa00 	call	806fa0 <__sinit>
  808f78:	003fd706 	br	808ed8 <__alt_mem_onchip_mem+0xff800ed8>
  808f7c:	04bfffc4 	movi	r18,-1
  808f80:	003fe806 	br	808f24 <__alt_mem_onchip_mem+0xff800f24>
  808f84:	81400417 	ldw	r5,16(r16)
  808f88:	8809883a 	mov	r4,r17
  808f8c:	080937c0 	call	80937c <_free_r>
  808f90:	003fe706 	br	808f30 <__alt_mem_onchip_mem+0xff800f30>
  808f94:	0005883a 	mov	r2,zero
  808f98:	f800283a 	ret

00808f9c <fclose>:
  808f9c:	00802074 	movhi	r2,129
  808fa0:	10bfcd04 	addi	r2,r2,-204
  808fa4:	200b883a 	mov	r5,r4
  808fa8:	11000017 	ldw	r4,0(r2)
  808fac:	0808eac1 	jmpi	808eac <_fclose_r>

00808fb0 <__sflush_r>:
  808fb0:	2880030b 	ldhu	r2,12(r5)
  808fb4:	defffb04 	addi	sp,sp,-20
  808fb8:	dcc00315 	stw	r19,12(sp)
  808fbc:	dc400115 	stw	r17,4(sp)
  808fc0:	dfc00415 	stw	ra,16(sp)
  808fc4:	dc800215 	stw	r18,8(sp)
  808fc8:	dc000015 	stw	r16,0(sp)
  808fcc:	10c0020c 	andi	r3,r2,8
  808fd0:	2823883a 	mov	r17,r5
  808fd4:	2027883a 	mov	r19,r4
  808fd8:	1800311e 	bne	r3,zero,8090a0 <__sflush_r+0xf0>
  808fdc:	28c00117 	ldw	r3,4(r5)
  808fe0:	10820014 	ori	r2,r2,2048
  808fe4:	2880030d 	sth	r2,12(r5)
  808fe8:	00c04b0e 	bge	zero,r3,809118 <__sflush_r+0x168>
  808fec:	8a000a17 	ldw	r8,40(r17)
  808ff0:	40002326 	beq	r8,zero,809080 <__sflush_r+0xd0>
  808ff4:	9c000017 	ldw	r16,0(r19)
  808ff8:	10c4000c 	andi	r3,r2,4096
  808ffc:	98000015 	stw	zero,0(r19)
  809000:	18004826 	beq	r3,zero,809124 <__sflush_r+0x174>
  809004:	89801417 	ldw	r6,80(r17)
  809008:	10c0010c 	andi	r3,r2,4
  80900c:	18000626 	beq	r3,zero,809028 <__sflush_r+0x78>
  809010:	88c00117 	ldw	r3,4(r17)
  809014:	88800c17 	ldw	r2,48(r17)
  809018:	30cdc83a 	sub	r6,r6,r3
  80901c:	10000226 	beq	r2,zero,809028 <__sflush_r+0x78>
  809020:	88800f17 	ldw	r2,60(r17)
  809024:	308dc83a 	sub	r6,r6,r2
  809028:	89400717 	ldw	r5,28(r17)
  80902c:	000f883a 	mov	r7,zero
  809030:	9809883a 	mov	r4,r19
  809034:	403ee83a 	callr	r8
  809038:	00ffffc4 	movi	r3,-1
  80903c:	10c04426 	beq	r2,r3,809150 <__sflush_r+0x1a0>
  809040:	88c0030b 	ldhu	r3,12(r17)
  809044:	89000417 	ldw	r4,16(r17)
  809048:	88000115 	stw	zero,4(r17)
  80904c:	197dffcc 	andi	r5,r3,63487
  809050:	8940030d 	sth	r5,12(r17)
  809054:	89000015 	stw	r4,0(r17)
  809058:	18c4000c 	andi	r3,r3,4096
  80905c:	18002c1e 	bne	r3,zero,809110 <__sflush_r+0x160>
  809060:	89400c17 	ldw	r5,48(r17)
  809064:	9c000015 	stw	r16,0(r19)
  809068:	28000526 	beq	r5,zero,809080 <__sflush_r+0xd0>
  80906c:	88801004 	addi	r2,r17,64
  809070:	28800226 	beq	r5,r2,80907c <__sflush_r+0xcc>
  809074:	9809883a 	mov	r4,r19
  809078:	080937c0 	call	80937c <_free_r>
  80907c:	88000c15 	stw	zero,48(r17)
  809080:	0005883a 	mov	r2,zero
  809084:	dfc00417 	ldw	ra,16(sp)
  809088:	dcc00317 	ldw	r19,12(sp)
  80908c:	dc800217 	ldw	r18,8(sp)
  809090:	dc400117 	ldw	r17,4(sp)
  809094:	dc000017 	ldw	r16,0(sp)
  809098:	dec00504 	addi	sp,sp,20
  80909c:	f800283a 	ret
  8090a0:	2c800417 	ldw	r18,16(r5)
  8090a4:	903ff626 	beq	r18,zero,809080 <__alt_mem_onchip_mem+0xff801080>
  8090a8:	2c000017 	ldw	r16,0(r5)
  8090ac:	108000cc 	andi	r2,r2,3
  8090b0:	2c800015 	stw	r18,0(r5)
  8090b4:	84a1c83a 	sub	r16,r16,r18
  8090b8:	1000131e 	bne	r2,zero,809108 <__sflush_r+0x158>
  8090bc:	28800517 	ldw	r2,20(r5)
  8090c0:	88800215 	stw	r2,8(r17)
  8090c4:	04000316 	blt	zero,r16,8090d4 <__sflush_r+0x124>
  8090c8:	003fed06 	br	809080 <__alt_mem_onchip_mem+0xff801080>
  8090cc:	90a5883a 	add	r18,r18,r2
  8090d0:	043feb0e 	bge	zero,r16,809080 <__alt_mem_onchip_mem+0xff801080>
  8090d4:	88800917 	ldw	r2,36(r17)
  8090d8:	89400717 	ldw	r5,28(r17)
  8090dc:	800f883a 	mov	r7,r16
  8090e0:	900d883a 	mov	r6,r18
  8090e4:	9809883a 	mov	r4,r19
  8090e8:	103ee83a 	callr	r2
  8090ec:	80a1c83a 	sub	r16,r16,r2
  8090f0:	00bff616 	blt	zero,r2,8090cc <__alt_mem_onchip_mem+0xff8010cc>
  8090f4:	88c0030b 	ldhu	r3,12(r17)
  8090f8:	00bfffc4 	movi	r2,-1
  8090fc:	18c01014 	ori	r3,r3,64
  809100:	88c0030d 	sth	r3,12(r17)
  809104:	003fdf06 	br	809084 <__alt_mem_onchip_mem+0xff801084>
  809108:	0005883a 	mov	r2,zero
  80910c:	003fec06 	br	8090c0 <__alt_mem_onchip_mem+0xff8010c0>
  809110:	88801415 	stw	r2,80(r17)
  809114:	003fd206 	br	809060 <__alt_mem_onchip_mem+0xff801060>
  809118:	28c00f17 	ldw	r3,60(r5)
  80911c:	00ffb316 	blt	zero,r3,808fec <__alt_mem_onchip_mem+0xff800fec>
  809120:	003fd706 	br	809080 <__alt_mem_onchip_mem+0xff801080>
  809124:	89400717 	ldw	r5,28(r17)
  809128:	000d883a 	mov	r6,zero
  80912c:	01c00044 	movi	r7,1
  809130:	9809883a 	mov	r4,r19
  809134:	403ee83a 	callr	r8
  809138:	100d883a 	mov	r6,r2
  80913c:	00bfffc4 	movi	r2,-1
  809140:	30801426 	beq	r6,r2,809194 <__sflush_r+0x1e4>
  809144:	8880030b 	ldhu	r2,12(r17)
  809148:	8a000a17 	ldw	r8,40(r17)
  80914c:	003fae06 	br	809008 <__alt_mem_onchip_mem+0xff801008>
  809150:	98c00017 	ldw	r3,0(r19)
  809154:	183fba26 	beq	r3,zero,809040 <__alt_mem_onchip_mem+0xff801040>
  809158:	01000744 	movi	r4,29
  80915c:	19000626 	beq	r3,r4,809178 <__sflush_r+0x1c8>
  809160:	01000584 	movi	r4,22
  809164:	19000426 	beq	r3,r4,809178 <__sflush_r+0x1c8>
  809168:	88c0030b 	ldhu	r3,12(r17)
  80916c:	18c01014 	ori	r3,r3,64
  809170:	88c0030d 	sth	r3,12(r17)
  809174:	003fc306 	br	809084 <__alt_mem_onchip_mem+0xff801084>
  809178:	8880030b 	ldhu	r2,12(r17)
  80917c:	88c00417 	ldw	r3,16(r17)
  809180:	88000115 	stw	zero,4(r17)
  809184:	10bdffcc 	andi	r2,r2,63487
  809188:	8880030d 	sth	r2,12(r17)
  80918c:	88c00015 	stw	r3,0(r17)
  809190:	003fb306 	br	809060 <__alt_mem_onchip_mem+0xff801060>
  809194:	98800017 	ldw	r2,0(r19)
  809198:	103fea26 	beq	r2,zero,809144 <__alt_mem_onchip_mem+0xff801144>
  80919c:	00c00744 	movi	r3,29
  8091a0:	10c00226 	beq	r2,r3,8091ac <__sflush_r+0x1fc>
  8091a4:	00c00584 	movi	r3,22
  8091a8:	10c0031e 	bne	r2,r3,8091b8 <__sflush_r+0x208>
  8091ac:	9c000015 	stw	r16,0(r19)
  8091b0:	0005883a 	mov	r2,zero
  8091b4:	003fb306 	br	809084 <__alt_mem_onchip_mem+0xff801084>
  8091b8:	88c0030b 	ldhu	r3,12(r17)
  8091bc:	3005883a 	mov	r2,r6
  8091c0:	18c01014 	ori	r3,r3,64
  8091c4:	88c0030d 	sth	r3,12(r17)
  8091c8:	003fae06 	br	809084 <__alt_mem_onchip_mem+0xff801084>

008091cc <_fflush_r>:
  8091cc:	defffd04 	addi	sp,sp,-12
  8091d0:	dc000115 	stw	r16,4(sp)
  8091d4:	dfc00215 	stw	ra,8(sp)
  8091d8:	2021883a 	mov	r16,r4
  8091dc:	20000226 	beq	r4,zero,8091e8 <_fflush_r+0x1c>
  8091e0:	20800e17 	ldw	r2,56(r4)
  8091e4:	10000c26 	beq	r2,zero,809218 <_fflush_r+0x4c>
  8091e8:	2880030f 	ldh	r2,12(r5)
  8091ec:	1000051e 	bne	r2,zero,809204 <_fflush_r+0x38>
  8091f0:	0005883a 	mov	r2,zero
  8091f4:	dfc00217 	ldw	ra,8(sp)
  8091f8:	dc000117 	ldw	r16,4(sp)
  8091fc:	dec00304 	addi	sp,sp,12
  809200:	f800283a 	ret
  809204:	8009883a 	mov	r4,r16
  809208:	dfc00217 	ldw	ra,8(sp)
  80920c:	dc000117 	ldw	r16,4(sp)
  809210:	dec00304 	addi	sp,sp,12
  809214:	0808fb01 	jmpi	808fb0 <__sflush_r>
  809218:	d9400015 	stw	r5,0(sp)
  80921c:	0806fa00 	call	806fa0 <__sinit>
  809220:	d9400017 	ldw	r5,0(sp)
  809224:	003ff006 	br	8091e8 <__alt_mem_onchip_mem+0xff8011e8>

00809228 <fflush>:
  809228:	20000526 	beq	r4,zero,809240 <fflush+0x18>
  80922c:	00802074 	movhi	r2,129
  809230:	10bfcd04 	addi	r2,r2,-204
  809234:	200b883a 	mov	r5,r4
  809238:	11000017 	ldw	r4,0(r2)
  80923c:	08091cc1 	jmpi	8091cc <_fflush_r>
  809240:	00802074 	movhi	r2,129
  809244:	10bfcc04 	addi	r2,r2,-208
  809248:	11000017 	ldw	r4,0(r2)
  80924c:	01402074 	movhi	r5,129
  809250:	29647304 	addi	r5,r5,-28212
  809254:	08075701 	jmpi	807570 <_fwalk_reent>

00809258 <_malloc_trim_r>:
  809258:	defffb04 	addi	sp,sp,-20
  80925c:	dcc00315 	stw	r19,12(sp)
  809260:	04c02074 	movhi	r19,129
  809264:	dc800215 	stw	r18,8(sp)
  809268:	dc400115 	stw	r17,4(sp)
  80926c:	dc000015 	stw	r16,0(sp)
  809270:	dfc00415 	stw	ra,16(sp)
  809274:	2821883a 	mov	r16,r5
  809278:	9cf9cf04 	addi	r19,r19,-6340
  80927c:	2025883a 	mov	r18,r4
  809280:	080a3940 	call	80a394 <__malloc_lock>
  809284:	98800217 	ldw	r2,8(r19)
  809288:	14400117 	ldw	r17,4(r2)
  80928c:	00bfff04 	movi	r2,-4
  809290:	88a2703a 	and	r17,r17,r2
  809294:	8c21c83a 	sub	r16,r17,r16
  809298:	8403fbc4 	addi	r16,r16,4079
  80929c:	8020d33a 	srli	r16,r16,12
  8092a0:	0083ffc4 	movi	r2,4095
  8092a4:	843fffc4 	addi	r16,r16,-1
  8092a8:	8020933a 	slli	r16,r16,12
  8092ac:	1400060e 	bge	r2,r16,8092c8 <_malloc_trim_r+0x70>
  8092b0:	000b883a 	mov	r5,zero
  8092b4:	9009883a 	mov	r4,r18
  8092b8:	08089bc0 	call	8089bc <_sbrk_r>
  8092bc:	98c00217 	ldw	r3,8(r19)
  8092c0:	1c47883a 	add	r3,r3,r17
  8092c4:	10c00a26 	beq	r2,r3,8092f0 <_malloc_trim_r+0x98>
  8092c8:	9009883a 	mov	r4,r18
  8092cc:	080a3b80 	call	80a3b8 <__malloc_unlock>
  8092d0:	0005883a 	mov	r2,zero
  8092d4:	dfc00417 	ldw	ra,16(sp)
  8092d8:	dcc00317 	ldw	r19,12(sp)
  8092dc:	dc800217 	ldw	r18,8(sp)
  8092e0:	dc400117 	ldw	r17,4(sp)
  8092e4:	dc000017 	ldw	r16,0(sp)
  8092e8:	dec00504 	addi	sp,sp,20
  8092ec:	f800283a 	ret
  8092f0:	040bc83a 	sub	r5,zero,r16
  8092f4:	9009883a 	mov	r4,r18
  8092f8:	08089bc0 	call	8089bc <_sbrk_r>
  8092fc:	00ffffc4 	movi	r3,-1
  809300:	10c00d26 	beq	r2,r3,809338 <_malloc_trim_r+0xe0>
  809304:	00c02074 	movhi	r3,129
  809308:	18c70404 	addi	r3,r3,7184
  80930c:	18800017 	ldw	r2,0(r3)
  809310:	99000217 	ldw	r4,8(r19)
  809314:	8c23c83a 	sub	r17,r17,r16
  809318:	8c400054 	ori	r17,r17,1
  80931c:	1421c83a 	sub	r16,r2,r16
  809320:	24400115 	stw	r17,4(r4)
  809324:	9009883a 	mov	r4,r18
  809328:	1c000015 	stw	r16,0(r3)
  80932c:	080a3b80 	call	80a3b8 <__malloc_unlock>
  809330:	00800044 	movi	r2,1
  809334:	003fe706 	br	8092d4 <__alt_mem_onchip_mem+0xff8012d4>
  809338:	000b883a 	mov	r5,zero
  80933c:	9009883a 	mov	r4,r18
  809340:	08089bc0 	call	8089bc <_sbrk_r>
  809344:	99000217 	ldw	r4,8(r19)
  809348:	014003c4 	movi	r5,15
  80934c:	1107c83a 	sub	r3,r2,r4
  809350:	28ffdd0e 	bge	r5,r3,8092c8 <__alt_mem_onchip_mem+0xff8012c8>
  809354:	01402074 	movhi	r5,129
  809358:	297fce04 	addi	r5,r5,-200
  80935c:	29400017 	ldw	r5,0(r5)
  809360:	18c00054 	ori	r3,r3,1
  809364:	20c00115 	stw	r3,4(r4)
  809368:	00c02074 	movhi	r3,129
  80936c:	1145c83a 	sub	r2,r2,r5
  809370:	18c70404 	addi	r3,r3,7184
  809374:	18800015 	stw	r2,0(r3)
  809378:	003fd306 	br	8092c8 <__alt_mem_onchip_mem+0xff8012c8>

0080937c <_free_r>:
  80937c:	28004126 	beq	r5,zero,809484 <_free_r+0x108>
  809380:	defffd04 	addi	sp,sp,-12
  809384:	dc400115 	stw	r17,4(sp)
  809388:	dc000015 	stw	r16,0(sp)
  80938c:	2023883a 	mov	r17,r4
  809390:	2821883a 	mov	r16,r5
  809394:	dfc00215 	stw	ra,8(sp)
  809398:	080a3940 	call	80a394 <__malloc_lock>
  80939c:	81ffff17 	ldw	r7,-4(r16)
  8093a0:	00bfff84 	movi	r2,-2
  8093a4:	01002074 	movhi	r4,129
  8093a8:	81bffe04 	addi	r6,r16,-8
  8093ac:	3884703a 	and	r2,r7,r2
  8093b0:	2139cf04 	addi	r4,r4,-6340
  8093b4:	308b883a 	add	r5,r6,r2
  8093b8:	2a400117 	ldw	r9,4(r5)
  8093bc:	22000217 	ldw	r8,8(r4)
  8093c0:	00ffff04 	movi	r3,-4
  8093c4:	48c6703a 	and	r3,r9,r3
  8093c8:	2a005726 	beq	r5,r8,809528 <_free_r+0x1ac>
  8093cc:	28c00115 	stw	r3,4(r5)
  8093d0:	39c0004c 	andi	r7,r7,1
  8093d4:	3800091e 	bne	r7,zero,8093fc <_free_r+0x80>
  8093d8:	823ffe17 	ldw	r8,-8(r16)
  8093dc:	22400204 	addi	r9,r4,8
  8093e0:	320dc83a 	sub	r6,r6,r8
  8093e4:	31c00217 	ldw	r7,8(r6)
  8093e8:	1205883a 	add	r2,r2,r8
  8093ec:	3a406526 	beq	r7,r9,809584 <_free_r+0x208>
  8093f0:	32000317 	ldw	r8,12(r6)
  8093f4:	3a000315 	stw	r8,12(r7)
  8093f8:	41c00215 	stw	r7,8(r8)
  8093fc:	28cf883a 	add	r7,r5,r3
  809400:	39c00117 	ldw	r7,4(r7)
  809404:	39c0004c 	andi	r7,r7,1
  809408:	38003a26 	beq	r7,zero,8094f4 <_free_r+0x178>
  80940c:	10c00054 	ori	r3,r2,1
  809410:	30c00115 	stw	r3,4(r6)
  809414:	3087883a 	add	r3,r6,r2
  809418:	18800015 	stw	r2,0(r3)
  80941c:	00c07fc4 	movi	r3,511
  809420:	18801936 	bltu	r3,r2,809488 <_free_r+0x10c>
  809424:	1004d0fa 	srli	r2,r2,3
  809428:	01c00044 	movi	r7,1
  80942c:	21400117 	ldw	r5,4(r4)
  809430:	10c00044 	addi	r3,r2,1
  809434:	18c7883a 	add	r3,r3,r3
  809438:	1005d0ba 	srai	r2,r2,2
  80943c:	18c7883a 	add	r3,r3,r3
  809440:	18c7883a 	add	r3,r3,r3
  809444:	1907883a 	add	r3,r3,r4
  809448:	3884983a 	sll	r2,r7,r2
  80944c:	19c00017 	ldw	r7,0(r3)
  809450:	1a3ffe04 	addi	r8,r3,-8
  809454:	1144b03a 	or	r2,r2,r5
  809458:	32000315 	stw	r8,12(r6)
  80945c:	31c00215 	stw	r7,8(r6)
  809460:	20800115 	stw	r2,4(r4)
  809464:	19800015 	stw	r6,0(r3)
  809468:	39800315 	stw	r6,12(r7)
  80946c:	8809883a 	mov	r4,r17
  809470:	dfc00217 	ldw	ra,8(sp)
  809474:	dc400117 	ldw	r17,4(sp)
  809478:	dc000017 	ldw	r16,0(sp)
  80947c:	dec00304 	addi	sp,sp,12
  809480:	080a3b81 	jmpi	80a3b8 <__malloc_unlock>
  809484:	f800283a 	ret
  809488:	100ad27a 	srli	r5,r2,9
  80948c:	00c00104 	movi	r3,4
  809490:	19404a36 	bltu	r3,r5,8095bc <_free_r+0x240>
  809494:	100ad1ba 	srli	r5,r2,6
  809498:	28c00e44 	addi	r3,r5,57
  80949c:	18c7883a 	add	r3,r3,r3
  8094a0:	29400e04 	addi	r5,r5,56
  8094a4:	18c7883a 	add	r3,r3,r3
  8094a8:	18c7883a 	add	r3,r3,r3
  8094ac:	1909883a 	add	r4,r3,r4
  8094b0:	20c00017 	ldw	r3,0(r4)
  8094b4:	01c02074 	movhi	r7,129
  8094b8:	213ffe04 	addi	r4,r4,-8
  8094bc:	39f9cf04 	addi	r7,r7,-6340
  8094c0:	20c04426 	beq	r4,r3,8095d4 <_free_r+0x258>
  8094c4:	01ffff04 	movi	r7,-4
  8094c8:	19400117 	ldw	r5,4(r3)
  8094cc:	29ca703a 	and	r5,r5,r7
  8094d0:	1140022e 	bgeu	r2,r5,8094dc <_free_r+0x160>
  8094d4:	18c00217 	ldw	r3,8(r3)
  8094d8:	20fffb1e 	bne	r4,r3,8094c8 <__alt_mem_onchip_mem+0xff8014c8>
  8094dc:	19000317 	ldw	r4,12(r3)
  8094e0:	31000315 	stw	r4,12(r6)
  8094e4:	30c00215 	stw	r3,8(r6)
  8094e8:	21800215 	stw	r6,8(r4)
  8094ec:	19800315 	stw	r6,12(r3)
  8094f0:	003fde06 	br	80946c <__alt_mem_onchip_mem+0xff80146c>
  8094f4:	29c00217 	ldw	r7,8(r5)
  8094f8:	10c5883a 	add	r2,r2,r3
  8094fc:	00c02074 	movhi	r3,129
  809500:	18f9d104 	addi	r3,r3,-6332
  809504:	38c03b26 	beq	r7,r3,8095f4 <_free_r+0x278>
  809508:	2a000317 	ldw	r8,12(r5)
  80950c:	11400054 	ori	r5,r2,1
  809510:	3087883a 	add	r3,r6,r2
  809514:	3a000315 	stw	r8,12(r7)
  809518:	41c00215 	stw	r7,8(r8)
  80951c:	31400115 	stw	r5,4(r6)
  809520:	18800015 	stw	r2,0(r3)
  809524:	003fbd06 	br	80941c <__alt_mem_onchip_mem+0xff80141c>
  809528:	39c0004c 	andi	r7,r7,1
  80952c:	10c5883a 	add	r2,r2,r3
  809530:	3800071e 	bne	r7,zero,809550 <_free_r+0x1d4>
  809534:	81fffe17 	ldw	r7,-8(r16)
  809538:	31cdc83a 	sub	r6,r6,r7
  80953c:	30c00317 	ldw	r3,12(r6)
  809540:	31400217 	ldw	r5,8(r6)
  809544:	11c5883a 	add	r2,r2,r7
  809548:	28c00315 	stw	r3,12(r5)
  80954c:	19400215 	stw	r5,8(r3)
  809550:	10c00054 	ori	r3,r2,1
  809554:	30c00115 	stw	r3,4(r6)
  809558:	00c02074 	movhi	r3,129
  80955c:	18ffcf04 	addi	r3,r3,-196
  809560:	18c00017 	ldw	r3,0(r3)
  809564:	21800215 	stw	r6,8(r4)
  809568:	10ffc036 	bltu	r2,r3,80946c <__alt_mem_onchip_mem+0xff80146c>
  80956c:	00802074 	movhi	r2,129
  809570:	1086fb04 	addi	r2,r2,7148
  809574:	11400017 	ldw	r5,0(r2)
  809578:	8809883a 	mov	r4,r17
  80957c:	08092580 	call	809258 <_malloc_trim_r>
  809580:	003fba06 	br	80946c <__alt_mem_onchip_mem+0xff80146c>
  809584:	28c9883a 	add	r4,r5,r3
  809588:	21000117 	ldw	r4,4(r4)
  80958c:	2100004c 	andi	r4,r4,1
  809590:	2000391e 	bne	r4,zero,809678 <_free_r+0x2fc>
  809594:	29c00217 	ldw	r7,8(r5)
  809598:	29000317 	ldw	r4,12(r5)
  80959c:	1885883a 	add	r2,r3,r2
  8095a0:	10c00054 	ori	r3,r2,1
  8095a4:	39000315 	stw	r4,12(r7)
  8095a8:	21c00215 	stw	r7,8(r4)
  8095ac:	30c00115 	stw	r3,4(r6)
  8095b0:	308d883a 	add	r6,r6,r2
  8095b4:	30800015 	stw	r2,0(r6)
  8095b8:	003fac06 	br	80946c <__alt_mem_onchip_mem+0xff80146c>
  8095bc:	00c00504 	movi	r3,20
  8095c0:	19401536 	bltu	r3,r5,809618 <_free_r+0x29c>
  8095c4:	28c01704 	addi	r3,r5,92
  8095c8:	18c7883a 	add	r3,r3,r3
  8095cc:	294016c4 	addi	r5,r5,91
  8095d0:	003fb406 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  8095d4:	280bd0ba 	srai	r5,r5,2
  8095d8:	00c00044 	movi	r3,1
  8095dc:	38800117 	ldw	r2,4(r7)
  8095e0:	194a983a 	sll	r5,r3,r5
  8095e4:	2007883a 	mov	r3,r4
  8095e8:	2884b03a 	or	r2,r5,r2
  8095ec:	38800115 	stw	r2,4(r7)
  8095f0:	003fbb06 	br	8094e0 <__alt_mem_onchip_mem+0xff8014e0>
  8095f4:	21800515 	stw	r6,20(r4)
  8095f8:	21800415 	stw	r6,16(r4)
  8095fc:	10c00054 	ori	r3,r2,1
  809600:	31c00315 	stw	r7,12(r6)
  809604:	31c00215 	stw	r7,8(r6)
  809608:	30c00115 	stw	r3,4(r6)
  80960c:	308d883a 	add	r6,r6,r2
  809610:	30800015 	stw	r2,0(r6)
  809614:	003f9506 	br	80946c <__alt_mem_onchip_mem+0xff80146c>
  809618:	00c01504 	movi	r3,84
  80961c:	19400536 	bltu	r3,r5,809634 <_free_r+0x2b8>
  809620:	100ad33a 	srli	r5,r2,12
  809624:	28c01bc4 	addi	r3,r5,111
  809628:	18c7883a 	add	r3,r3,r3
  80962c:	29401b84 	addi	r5,r5,110
  809630:	003f9c06 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  809634:	00c05504 	movi	r3,340
  809638:	19400536 	bltu	r3,r5,809650 <_free_r+0x2d4>
  80963c:	100ad3fa 	srli	r5,r2,15
  809640:	28c01e04 	addi	r3,r5,120
  809644:	18c7883a 	add	r3,r3,r3
  809648:	29401dc4 	addi	r5,r5,119
  80964c:	003f9506 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  809650:	00c15504 	movi	r3,1364
  809654:	19400536 	bltu	r3,r5,80966c <_free_r+0x2f0>
  809658:	100ad4ba 	srli	r5,r2,18
  80965c:	28c01f44 	addi	r3,r5,125
  809660:	18c7883a 	add	r3,r3,r3
  809664:	29401f04 	addi	r5,r5,124
  809668:	003f8e06 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  80966c:	00c03f84 	movi	r3,254
  809670:	01401f84 	movi	r5,126
  809674:	003f8b06 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  809678:	10c00054 	ori	r3,r2,1
  80967c:	30c00115 	stw	r3,4(r6)
  809680:	308d883a 	add	r6,r6,r2
  809684:	30800015 	stw	r2,0(r6)
  809688:	003f7806 	br	80946c <__alt_mem_onchip_mem+0xff80146c>

0080968c <_lseek_r>:
  80968c:	defffd04 	addi	sp,sp,-12
  809690:	2805883a 	mov	r2,r5
  809694:	dc000015 	stw	r16,0(sp)
  809698:	04002074 	movhi	r16,129
  80969c:	dc400115 	stw	r17,4(sp)
  8096a0:	300b883a 	mov	r5,r6
  8096a4:	8406fc04 	addi	r16,r16,7152
  8096a8:	2023883a 	mov	r17,r4
  8096ac:	380d883a 	mov	r6,r7
  8096b0:	1009883a 	mov	r4,r2
  8096b4:	dfc00215 	stw	ra,8(sp)
  8096b8:	80000015 	stw	zero,0(r16)
  8096bc:	080a2440 	call	80a244 <lseek>
  8096c0:	00ffffc4 	movi	r3,-1
  8096c4:	10c00526 	beq	r2,r3,8096dc <_lseek_r+0x50>
  8096c8:	dfc00217 	ldw	ra,8(sp)
  8096cc:	dc400117 	ldw	r17,4(sp)
  8096d0:	dc000017 	ldw	r16,0(sp)
  8096d4:	dec00304 	addi	sp,sp,12
  8096d8:	f800283a 	ret
  8096dc:	80c00017 	ldw	r3,0(r16)
  8096e0:	183ff926 	beq	r3,zero,8096c8 <__alt_mem_onchip_mem+0xff8016c8>
  8096e4:	88c00015 	stw	r3,0(r17)
  8096e8:	003ff706 	br	8096c8 <__alt_mem_onchip_mem+0xff8016c8>

008096ec <__smakebuf_r>:
  8096ec:	2880030b 	ldhu	r2,12(r5)
  8096f0:	10c0008c 	andi	r3,r2,2
  8096f4:	1800411e 	bne	r3,zero,8097fc <__smakebuf_r+0x110>
  8096f8:	deffec04 	addi	sp,sp,-80
  8096fc:	dc000f15 	stw	r16,60(sp)
  809700:	2821883a 	mov	r16,r5
  809704:	2940038f 	ldh	r5,14(r5)
  809708:	dc401015 	stw	r17,64(sp)
  80970c:	dfc01315 	stw	ra,76(sp)
  809710:	dcc01215 	stw	r19,72(sp)
  809714:	dc801115 	stw	r18,68(sp)
  809718:	2023883a 	mov	r17,r4
  80971c:	28001c16 	blt	r5,zero,809790 <__smakebuf_r+0xa4>
  809720:	d80d883a 	mov	r6,sp
  809724:	08099080 	call	809908 <_fstat_r>
  809728:	10001816 	blt	r2,zero,80978c <__smakebuf_r+0xa0>
  80972c:	d8800117 	ldw	r2,4(sp)
  809730:	00e00014 	movui	r3,32768
  809734:	10bc000c 	andi	r2,r2,61440
  809738:	14c80020 	cmpeqi	r19,r2,8192
  80973c:	10c03726 	beq	r2,r3,80981c <__smakebuf_r+0x130>
  809740:	80c0030b 	ldhu	r3,12(r16)
  809744:	18c20014 	ori	r3,r3,2048
  809748:	80c0030d 	sth	r3,12(r16)
  80974c:	00c80004 	movi	r3,8192
  809750:	10c0521e 	bne	r2,r3,80989c <__smakebuf_r+0x1b0>
  809754:	8140038f 	ldh	r5,14(r16)
  809758:	8809883a 	mov	r4,r17
  80975c:	08099640 	call	809964 <_isatty_r>
  809760:	10004c26 	beq	r2,zero,809894 <__smakebuf_r+0x1a8>
  809764:	8080030b 	ldhu	r2,12(r16)
  809768:	80c010c4 	addi	r3,r16,67
  80976c:	80c00015 	stw	r3,0(r16)
  809770:	10800054 	ori	r2,r2,1
  809774:	8080030d 	sth	r2,12(r16)
  809778:	00800044 	movi	r2,1
  80977c:	80c00415 	stw	r3,16(r16)
  809780:	80800515 	stw	r2,20(r16)
  809784:	04810004 	movi	r18,1024
  809788:	00000706 	br	8097a8 <__smakebuf_r+0xbc>
  80978c:	8080030b 	ldhu	r2,12(r16)
  809790:	10c0200c 	andi	r3,r2,128
  809794:	18001f1e 	bne	r3,zero,809814 <__smakebuf_r+0x128>
  809798:	04810004 	movi	r18,1024
  80979c:	10820014 	ori	r2,r2,2048
  8097a0:	8080030d 	sth	r2,12(r16)
  8097a4:	0027883a 	mov	r19,zero
  8097a8:	900b883a 	mov	r5,r18
  8097ac:	8809883a 	mov	r4,r17
  8097b0:	08076340 	call	807634 <_malloc_r>
  8097b4:	10002c26 	beq	r2,zero,809868 <__smakebuf_r+0x17c>
  8097b8:	80c0030b 	ldhu	r3,12(r16)
  8097bc:	01002034 	movhi	r4,128
  8097c0:	211b1604 	addi	r4,r4,27736
  8097c4:	89000f15 	stw	r4,60(r17)
  8097c8:	18c02014 	ori	r3,r3,128
  8097cc:	80c0030d 	sth	r3,12(r16)
  8097d0:	80800015 	stw	r2,0(r16)
  8097d4:	80800415 	stw	r2,16(r16)
  8097d8:	84800515 	stw	r18,20(r16)
  8097dc:	98001a1e 	bne	r19,zero,809848 <__smakebuf_r+0x15c>
  8097e0:	dfc01317 	ldw	ra,76(sp)
  8097e4:	dcc01217 	ldw	r19,72(sp)
  8097e8:	dc801117 	ldw	r18,68(sp)
  8097ec:	dc401017 	ldw	r17,64(sp)
  8097f0:	dc000f17 	ldw	r16,60(sp)
  8097f4:	dec01404 	addi	sp,sp,80
  8097f8:	f800283a 	ret
  8097fc:	288010c4 	addi	r2,r5,67
  809800:	28800015 	stw	r2,0(r5)
  809804:	28800415 	stw	r2,16(r5)
  809808:	00800044 	movi	r2,1
  80980c:	28800515 	stw	r2,20(r5)
  809810:	f800283a 	ret
  809814:	04801004 	movi	r18,64
  809818:	003fe006 	br	80979c <__alt_mem_onchip_mem+0xff80179c>
  80981c:	81000a17 	ldw	r4,40(r16)
  809820:	00c02074 	movhi	r3,129
  809824:	18e2ba04 	addi	r3,r3,-29976
  809828:	20ffc51e 	bne	r4,r3,809740 <__alt_mem_onchip_mem+0xff801740>
  80982c:	8080030b 	ldhu	r2,12(r16)
  809830:	04810004 	movi	r18,1024
  809834:	84801315 	stw	r18,76(r16)
  809838:	1484b03a 	or	r2,r2,r18
  80983c:	8080030d 	sth	r2,12(r16)
  809840:	0027883a 	mov	r19,zero
  809844:	003fd806 	br	8097a8 <__alt_mem_onchip_mem+0xff8017a8>
  809848:	8140038f 	ldh	r5,14(r16)
  80984c:	8809883a 	mov	r4,r17
  809850:	08099640 	call	809964 <_isatty_r>
  809854:	103fe226 	beq	r2,zero,8097e0 <__alt_mem_onchip_mem+0xff8017e0>
  809858:	8080030b 	ldhu	r2,12(r16)
  80985c:	10800054 	ori	r2,r2,1
  809860:	8080030d 	sth	r2,12(r16)
  809864:	003fde06 	br	8097e0 <__alt_mem_onchip_mem+0xff8017e0>
  809868:	8080030b 	ldhu	r2,12(r16)
  80986c:	10c0800c 	andi	r3,r2,512
  809870:	183fdb1e 	bne	r3,zero,8097e0 <__alt_mem_onchip_mem+0xff8017e0>
  809874:	10800094 	ori	r2,r2,2
  809878:	80c010c4 	addi	r3,r16,67
  80987c:	8080030d 	sth	r2,12(r16)
  809880:	00800044 	movi	r2,1
  809884:	80c00015 	stw	r3,0(r16)
  809888:	80c00415 	stw	r3,16(r16)
  80988c:	80800515 	stw	r2,20(r16)
  809890:	003fd306 	br	8097e0 <__alt_mem_onchip_mem+0xff8017e0>
  809894:	04810004 	movi	r18,1024
  809898:	003fc306 	br	8097a8 <__alt_mem_onchip_mem+0xff8017a8>
  80989c:	0027883a 	mov	r19,zero
  8098a0:	04810004 	movi	r18,1024
  8098a4:	003fc006 	br	8097a8 <__alt_mem_onchip_mem+0xff8017a8>

008098a8 <_read_r>:
  8098a8:	defffd04 	addi	sp,sp,-12
  8098ac:	2805883a 	mov	r2,r5
  8098b0:	dc000015 	stw	r16,0(sp)
  8098b4:	04002074 	movhi	r16,129
  8098b8:	dc400115 	stw	r17,4(sp)
  8098bc:	300b883a 	mov	r5,r6
  8098c0:	8406fc04 	addi	r16,r16,7152
  8098c4:	2023883a 	mov	r17,r4
  8098c8:	380d883a 	mov	r6,r7
  8098cc:	1009883a 	mov	r4,r2
  8098d0:	dfc00215 	stw	ra,8(sp)
  8098d4:	80000015 	stw	zero,0(r16)
  8098d8:	080a4180 	call	80a418 <read>
  8098dc:	00ffffc4 	movi	r3,-1
  8098e0:	10c00526 	beq	r2,r3,8098f8 <_read_r+0x50>
  8098e4:	dfc00217 	ldw	ra,8(sp)
  8098e8:	dc400117 	ldw	r17,4(sp)
  8098ec:	dc000017 	ldw	r16,0(sp)
  8098f0:	dec00304 	addi	sp,sp,12
  8098f4:	f800283a 	ret
  8098f8:	80c00017 	ldw	r3,0(r16)
  8098fc:	183ff926 	beq	r3,zero,8098e4 <__alt_mem_onchip_mem+0xff8018e4>
  809900:	88c00015 	stw	r3,0(r17)
  809904:	003ff706 	br	8098e4 <__alt_mem_onchip_mem+0xff8018e4>

00809908 <_fstat_r>:
  809908:	defffd04 	addi	sp,sp,-12
  80990c:	2805883a 	mov	r2,r5
  809910:	dc000015 	stw	r16,0(sp)
  809914:	04002074 	movhi	r16,129
  809918:	dc400115 	stw	r17,4(sp)
  80991c:	8406fc04 	addi	r16,r16,7152
  809920:	2023883a 	mov	r17,r4
  809924:	300b883a 	mov	r5,r6
  809928:	1009883a 	mov	r4,r2
  80992c:	dfc00215 	stw	ra,8(sp)
  809930:	80000015 	stw	zero,0(r16)
  809934:	0809e0c0 	call	809e0c <fstat>
  809938:	00ffffc4 	movi	r3,-1
  80993c:	10c00526 	beq	r2,r3,809954 <_fstat_r+0x4c>
  809940:	dfc00217 	ldw	ra,8(sp)
  809944:	dc400117 	ldw	r17,4(sp)
  809948:	dc000017 	ldw	r16,0(sp)
  80994c:	dec00304 	addi	sp,sp,12
  809950:	f800283a 	ret
  809954:	80c00017 	ldw	r3,0(r16)
  809958:	183ff926 	beq	r3,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  80995c:	88c00015 	stw	r3,0(r17)
  809960:	003ff706 	br	809940 <__alt_mem_onchip_mem+0xff801940>

00809964 <_isatty_r>:
  809964:	defffd04 	addi	sp,sp,-12
  809968:	dc000015 	stw	r16,0(sp)
  80996c:	04002074 	movhi	r16,129
  809970:	dc400115 	stw	r17,4(sp)
  809974:	8406fc04 	addi	r16,r16,7152
  809978:	2023883a 	mov	r17,r4
  80997c:	2809883a 	mov	r4,r5
  809980:	dfc00215 	stw	ra,8(sp)
  809984:	80000015 	stw	zero,0(r16)
  809988:	080a0780 	call	80a078 <isatty>
  80998c:	00ffffc4 	movi	r3,-1
  809990:	10c00526 	beq	r2,r3,8099a8 <_isatty_r+0x44>
  809994:	dfc00217 	ldw	ra,8(sp)
  809998:	dc400117 	ldw	r17,4(sp)
  80999c:	dc000017 	ldw	r16,0(sp)
  8099a0:	dec00304 	addi	sp,sp,12
  8099a4:	f800283a 	ret
  8099a8:	80c00017 	ldw	r3,0(r16)
  8099ac:	183ff926 	beq	r3,zero,809994 <__alt_mem_onchip_mem+0xff801994>
  8099b0:	88c00015 	stw	r3,0(r17)
  8099b4:	003ff706 	br	809994 <__alt_mem_onchip_mem+0xff801994>

008099b8 <__divsi3>:
  8099b8:	20001b16 	blt	r4,zero,809a28 <__divsi3+0x70>
  8099bc:	000f883a 	mov	r7,zero
  8099c0:	28001616 	blt	r5,zero,809a1c <__divsi3+0x64>
  8099c4:	200d883a 	mov	r6,r4
  8099c8:	29001a2e 	bgeu	r5,r4,809a34 <__divsi3+0x7c>
  8099cc:	00800804 	movi	r2,32
  8099d0:	00c00044 	movi	r3,1
  8099d4:	00000106 	br	8099dc <__divsi3+0x24>
  8099d8:	10000d26 	beq	r2,zero,809a10 <__divsi3+0x58>
  8099dc:	294b883a 	add	r5,r5,r5
  8099e0:	10bfffc4 	addi	r2,r2,-1
  8099e4:	18c7883a 	add	r3,r3,r3
  8099e8:	293ffb36 	bltu	r5,r4,8099d8 <__alt_mem_onchip_mem+0xff8019d8>
  8099ec:	0005883a 	mov	r2,zero
  8099f0:	18000726 	beq	r3,zero,809a10 <__divsi3+0x58>
  8099f4:	0005883a 	mov	r2,zero
  8099f8:	31400236 	bltu	r6,r5,809a04 <__divsi3+0x4c>
  8099fc:	314dc83a 	sub	r6,r6,r5
  809a00:	10c4b03a 	or	r2,r2,r3
  809a04:	1806d07a 	srli	r3,r3,1
  809a08:	280ad07a 	srli	r5,r5,1
  809a0c:	183ffa1e 	bne	r3,zero,8099f8 <__alt_mem_onchip_mem+0xff8019f8>
  809a10:	38000126 	beq	r7,zero,809a18 <__divsi3+0x60>
  809a14:	0085c83a 	sub	r2,zero,r2
  809a18:	f800283a 	ret
  809a1c:	014bc83a 	sub	r5,zero,r5
  809a20:	39c0005c 	xori	r7,r7,1
  809a24:	003fe706 	br	8099c4 <__alt_mem_onchip_mem+0xff8019c4>
  809a28:	0109c83a 	sub	r4,zero,r4
  809a2c:	01c00044 	movi	r7,1
  809a30:	003fe306 	br	8099c0 <__alt_mem_onchip_mem+0xff8019c0>
  809a34:	00c00044 	movi	r3,1
  809a38:	003fee06 	br	8099f4 <__alt_mem_onchip_mem+0xff8019f4>

00809a3c <__modsi3>:
  809a3c:	20001716 	blt	r4,zero,809a9c <__modsi3+0x60>
  809a40:	000f883a 	mov	r7,zero
  809a44:	2005883a 	mov	r2,r4
  809a48:	28001216 	blt	r5,zero,809a94 <__modsi3+0x58>
  809a4c:	2900162e 	bgeu	r5,r4,809aa8 <__modsi3+0x6c>
  809a50:	01800804 	movi	r6,32
  809a54:	00c00044 	movi	r3,1
  809a58:	00000106 	br	809a60 <__modsi3+0x24>
  809a5c:	30000a26 	beq	r6,zero,809a88 <__modsi3+0x4c>
  809a60:	294b883a 	add	r5,r5,r5
  809a64:	31bfffc4 	addi	r6,r6,-1
  809a68:	18c7883a 	add	r3,r3,r3
  809a6c:	293ffb36 	bltu	r5,r4,809a5c <__alt_mem_onchip_mem+0xff801a5c>
  809a70:	18000526 	beq	r3,zero,809a88 <__modsi3+0x4c>
  809a74:	1806d07a 	srli	r3,r3,1
  809a78:	11400136 	bltu	r2,r5,809a80 <__modsi3+0x44>
  809a7c:	1145c83a 	sub	r2,r2,r5
  809a80:	280ad07a 	srli	r5,r5,1
  809a84:	183ffb1e 	bne	r3,zero,809a74 <__alt_mem_onchip_mem+0xff801a74>
  809a88:	38000126 	beq	r7,zero,809a90 <__modsi3+0x54>
  809a8c:	0085c83a 	sub	r2,zero,r2
  809a90:	f800283a 	ret
  809a94:	014bc83a 	sub	r5,zero,r5
  809a98:	003fec06 	br	809a4c <__alt_mem_onchip_mem+0xff801a4c>
  809a9c:	0109c83a 	sub	r4,zero,r4
  809aa0:	01c00044 	movi	r7,1
  809aa4:	003fe706 	br	809a44 <__alt_mem_onchip_mem+0xff801a44>
  809aa8:	00c00044 	movi	r3,1
  809aac:	003ff106 	br	809a74 <__alt_mem_onchip_mem+0xff801a74>

00809ab0 <__udivsi3>:
  809ab0:	200d883a 	mov	r6,r4
  809ab4:	2900152e 	bgeu	r5,r4,809b0c <__udivsi3+0x5c>
  809ab8:	28001416 	blt	r5,zero,809b0c <__udivsi3+0x5c>
  809abc:	00800804 	movi	r2,32
  809ac0:	00c00044 	movi	r3,1
  809ac4:	00000206 	br	809ad0 <__udivsi3+0x20>
  809ac8:	10000e26 	beq	r2,zero,809b04 <__udivsi3+0x54>
  809acc:	28000516 	blt	r5,zero,809ae4 <__udivsi3+0x34>
  809ad0:	294b883a 	add	r5,r5,r5
  809ad4:	10bfffc4 	addi	r2,r2,-1
  809ad8:	18c7883a 	add	r3,r3,r3
  809adc:	293ffa36 	bltu	r5,r4,809ac8 <__alt_mem_onchip_mem+0xff801ac8>
  809ae0:	18000826 	beq	r3,zero,809b04 <__udivsi3+0x54>
  809ae4:	0005883a 	mov	r2,zero
  809ae8:	31400236 	bltu	r6,r5,809af4 <__udivsi3+0x44>
  809aec:	314dc83a 	sub	r6,r6,r5
  809af0:	10c4b03a 	or	r2,r2,r3
  809af4:	1806d07a 	srli	r3,r3,1
  809af8:	280ad07a 	srli	r5,r5,1
  809afc:	183ffa1e 	bne	r3,zero,809ae8 <__alt_mem_onchip_mem+0xff801ae8>
  809b00:	f800283a 	ret
  809b04:	0005883a 	mov	r2,zero
  809b08:	f800283a 	ret
  809b0c:	00c00044 	movi	r3,1
  809b10:	003ff406 	br	809ae4 <__alt_mem_onchip_mem+0xff801ae4>

00809b14 <__umodsi3>:
  809b14:	2005883a 	mov	r2,r4
  809b18:	2900122e 	bgeu	r5,r4,809b64 <__umodsi3+0x50>
  809b1c:	28001116 	blt	r5,zero,809b64 <__umodsi3+0x50>
  809b20:	01800804 	movi	r6,32
  809b24:	00c00044 	movi	r3,1
  809b28:	00000206 	br	809b34 <__umodsi3+0x20>
  809b2c:	30000c26 	beq	r6,zero,809b60 <__umodsi3+0x4c>
  809b30:	28000516 	blt	r5,zero,809b48 <__umodsi3+0x34>
  809b34:	294b883a 	add	r5,r5,r5
  809b38:	31bfffc4 	addi	r6,r6,-1
  809b3c:	18c7883a 	add	r3,r3,r3
  809b40:	293ffa36 	bltu	r5,r4,809b2c <__alt_mem_onchip_mem+0xff801b2c>
  809b44:	18000626 	beq	r3,zero,809b60 <__umodsi3+0x4c>
  809b48:	1806d07a 	srli	r3,r3,1
  809b4c:	11400136 	bltu	r2,r5,809b54 <__umodsi3+0x40>
  809b50:	1145c83a 	sub	r2,r2,r5
  809b54:	280ad07a 	srli	r5,r5,1
  809b58:	183ffb1e 	bne	r3,zero,809b48 <__alt_mem_onchip_mem+0xff801b48>
  809b5c:	f800283a 	ret
  809b60:	f800283a 	ret
  809b64:	00c00044 	movi	r3,1
  809b68:	003ff706 	br	809b48 <__alt_mem_onchip_mem+0xff801b48>

00809b6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  809b6c:	defff504 	addi	sp,sp,-44
  809b70:	df000a15 	stw	fp,40(sp)
  809b74:	df000a04 	addi	fp,sp,40
  809b78:	e13ffc15 	stw	r4,-16(fp)
  809b7c:	e17ffd15 	stw	r5,-12(fp)
  809b80:	e1bffe15 	stw	r6,-8(fp)
  809b84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  809b88:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  809b8c:	d0a73517 	ldw	r2,-25388(gp)
  
  if (alt_ticks_per_second ())
  809b90:	10003c26 	beq	r2,zero,809c84 <alt_alarm_start+0x118>
  {
    if (alarm)
  809b94:	e0bffc17 	ldw	r2,-16(fp)
  809b98:	10003826 	beq	r2,zero,809c7c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  809b9c:	e0bffc17 	ldw	r2,-16(fp)
  809ba0:	e0fffe17 	ldw	r3,-8(fp)
  809ba4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  809ba8:	e0bffc17 	ldw	r2,-16(fp)
  809bac:	e0ffff17 	ldw	r3,-4(fp)
  809bb0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809bb4:	0005303a 	rdctl	r2,status
  809bb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809bbc:	e0fff917 	ldw	r3,-28(fp)
  809bc0:	00bfff84 	movi	r2,-2
  809bc4:	1884703a 	and	r2,r3,r2
  809bc8:	1001703a 	wrctl	status,r2
  
  return context;
  809bcc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  809bd0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  809bd4:	d0a73617 	ldw	r2,-25384(gp)
      
      current_nticks = alt_nticks();
  809bd8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  809bdc:	e0fffd17 	ldw	r3,-12(fp)
  809be0:	e0bff617 	ldw	r2,-40(fp)
  809be4:	1885883a 	add	r2,r3,r2
  809be8:	10c00044 	addi	r3,r2,1
  809bec:	e0bffc17 	ldw	r2,-16(fp)
  809bf0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  809bf4:	e0bffc17 	ldw	r2,-16(fp)
  809bf8:	10c00217 	ldw	r3,8(r2)
  809bfc:	e0bff617 	ldw	r2,-40(fp)
  809c00:	1880042e 	bgeu	r3,r2,809c14 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  809c04:	e0bffc17 	ldw	r2,-16(fp)
  809c08:	00c00044 	movi	r3,1
  809c0c:	10c00405 	stb	r3,16(r2)
  809c10:	00000206 	br	809c1c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  809c14:	e0bffc17 	ldw	r2,-16(fp)
  809c18:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  809c1c:	e0bffc17 	ldw	r2,-16(fp)
  809c20:	d0e00c04 	addi	r3,gp,-32720
  809c24:	e0fffa15 	stw	r3,-24(fp)
  809c28:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  809c2c:	e0bffb17 	ldw	r2,-20(fp)
  809c30:	e0fffa17 	ldw	r3,-24(fp)
  809c34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  809c38:	e0bffa17 	ldw	r2,-24(fp)
  809c3c:	10c00017 	ldw	r3,0(r2)
  809c40:	e0bffb17 	ldw	r2,-20(fp)
  809c44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  809c48:	e0bffa17 	ldw	r2,-24(fp)
  809c4c:	10800017 	ldw	r2,0(r2)
  809c50:	e0fffb17 	ldw	r3,-20(fp)
  809c54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  809c58:	e0bffa17 	ldw	r2,-24(fp)
  809c5c:	e0fffb17 	ldw	r3,-20(fp)
  809c60:	10c00015 	stw	r3,0(r2)
  809c64:	e0bff817 	ldw	r2,-32(fp)
  809c68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809c6c:	e0bff717 	ldw	r2,-36(fp)
  809c70:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  809c74:	0005883a 	mov	r2,zero
  809c78:	00000306 	br	809c88 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  809c7c:	00bffa84 	movi	r2,-22
  809c80:	00000106 	br	809c88 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  809c84:	00bfde84 	movi	r2,-134
  }
}
  809c88:	e037883a 	mov	sp,fp
  809c8c:	df000017 	ldw	fp,0(sp)
  809c90:	dec00104 	addi	sp,sp,4
  809c94:	f800283a 	ret

00809c98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809c98:	defffe04 	addi	sp,sp,-8
  809c9c:	dfc00115 	stw	ra,4(sp)
  809ca0:	df000015 	stw	fp,0(sp)
  809ca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809ca8:	d0a00917 	ldw	r2,-32732(gp)
  809cac:	10000326 	beq	r2,zero,809cbc <alt_get_errno+0x24>
  809cb0:	d0a00917 	ldw	r2,-32732(gp)
  809cb4:	103ee83a 	callr	r2
  809cb8:	00000106 	br	809cc0 <alt_get_errno+0x28>
  809cbc:	d0a73004 	addi	r2,gp,-25408
}
  809cc0:	e037883a 	mov	sp,fp
  809cc4:	dfc00117 	ldw	ra,4(sp)
  809cc8:	df000017 	ldw	fp,0(sp)
  809ccc:	dec00204 	addi	sp,sp,8
  809cd0:	f800283a 	ret

00809cd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  809cd4:	defffb04 	addi	sp,sp,-20
  809cd8:	dfc00415 	stw	ra,16(sp)
  809cdc:	df000315 	stw	fp,12(sp)
  809ce0:	df000304 	addi	fp,sp,12
  809ce4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  809ce8:	e0bfff17 	ldw	r2,-4(fp)
  809cec:	10000616 	blt	r2,zero,809d08 <close+0x34>
  809cf0:	e0bfff17 	ldw	r2,-4(fp)
  809cf4:	10c00324 	muli	r3,r2,12
  809cf8:	00802074 	movhi	r2,129
  809cfc:	10badb04 	addi	r2,r2,-5268
  809d00:	1885883a 	add	r2,r3,r2
  809d04:	00000106 	br	809d0c <close+0x38>
  809d08:	0005883a 	mov	r2,zero
  809d0c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  809d10:	e0bffd17 	ldw	r2,-12(fp)
  809d14:	10001926 	beq	r2,zero,809d7c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  809d18:	e0bffd17 	ldw	r2,-12(fp)
  809d1c:	10800017 	ldw	r2,0(r2)
  809d20:	10800417 	ldw	r2,16(r2)
  809d24:	10000626 	beq	r2,zero,809d40 <close+0x6c>
  809d28:	e0bffd17 	ldw	r2,-12(fp)
  809d2c:	10800017 	ldw	r2,0(r2)
  809d30:	10800417 	ldw	r2,16(r2)
  809d34:	e13ffd17 	ldw	r4,-12(fp)
  809d38:	103ee83a 	callr	r2
  809d3c:	00000106 	br	809d44 <close+0x70>
  809d40:	0005883a 	mov	r2,zero
  809d44:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  809d48:	e13fff17 	ldw	r4,-4(fp)
  809d4c:	080a5140 	call	80a514 <alt_release_fd>
    if (rval < 0)
  809d50:	e0bffe17 	ldw	r2,-8(fp)
  809d54:	1000070e 	bge	r2,zero,809d74 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  809d58:	0809c980 	call	809c98 <alt_get_errno>
  809d5c:	1007883a 	mov	r3,r2
  809d60:	e0bffe17 	ldw	r2,-8(fp)
  809d64:	0085c83a 	sub	r2,zero,r2
  809d68:	18800015 	stw	r2,0(r3)
      return -1;
  809d6c:	00bfffc4 	movi	r2,-1
  809d70:	00000706 	br	809d90 <close+0xbc>
    }
    return 0;
  809d74:	0005883a 	mov	r2,zero
  809d78:	00000506 	br	809d90 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809d7c:	0809c980 	call	809c98 <alt_get_errno>
  809d80:	1007883a 	mov	r3,r2
  809d84:	00801444 	movi	r2,81
  809d88:	18800015 	stw	r2,0(r3)
    return -1;
  809d8c:	00bfffc4 	movi	r2,-1
  }
}
  809d90:	e037883a 	mov	sp,fp
  809d94:	dfc00117 	ldw	ra,4(sp)
  809d98:	df000017 	ldw	fp,0(sp)
  809d9c:	dec00204 	addi	sp,sp,8
  809da0:	f800283a 	ret

00809da4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  809da4:	defffc04 	addi	sp,sp,-16
  809da8:	df000315 	stw	fp,12(sp)
  809dac:	df000304 	addi	fp,sp,12
  809db0:	e13ffd15 	stw	r4,-12(fp)
  809db4:	e17ffe15 	stw	r5,-8(fp)
  809db8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  809dbc:	e0bfff17 	ldw	r2,-4(fp)
}
  809dc0:	e037883a 	mov	sp,fp
  809dc4:	df000017 	ldw	fp,0(sp)
  809dc8:	dec00104 	addi	sp,sp,4
  809dcc:	f800283a 	ret

00809dd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809dd0:	defffe04 	addi	sp,sp,-8
  809dd4:	dfc00115 	stw	ra,4(sp)
  809dd8:	df000015 	stw	fp,0(sp)
  809ddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809de0:	d0a00917 	ldw	r2,-32732(gp)
  809de4:	10000326 	beq	r2,zero,809df4 <alt_get_errno+0x24>
  809de8:	d0a00917 	ldw	r2,-32732(gp)
  809dec:	103ee83a 	callr	r2
  809df0:	00000106 	br	809df8 <alt_get_errno+0x28>
  809df4:	d0a73004 	addi	r2,gp,-25408
}
  809df8:	e037883a 	mov	sp,fp
  809dfc:	dfc00117 	ldw	ra,4(sp)
  809e00:	df000017 	ldw	fp,0(sp)
  809e04:	dec00204 	addi	sp,sp,8
  809e08:	f800283a 	ret

00809e0c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  809e0c:	defffb04 	addi	sp,sp,-20
  809e10:	dfc00415 	stw	ra,16(sp)
  809e14:	df000315 	stw	fp,12(sp)
  809e18:	df000304 	addi	fp,sp,12
  809e1c:	e13ffe15 	stw	r4,-8(fp)
  809e20:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809e24:	e0bffe17 	ldw	r2,-8(fp)
  809e28:	10000616 	blt	r2,zero,809e44 <fstat+0x38>
  809e2c:	e0bffe17 	ldw	r2,-8(fp)
  809e30:	10c00324 	muli	r3,r2,12
  809e34:	00802074 	movhi	r2,129
  809e38:	10badb04 	addi	r2,r2,-5268
  809e3c:	1885883a 	add	r2,r3,r2
  809e40:	00000106 	br	809e48 <fstat+0x3c>
  809e44:	0005883a 	mov	r2,zero
  809e48:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  809e4c:	e0bffd17 	ldw	r2,-12(fp)
  809e50:	10001026 	beq	r2,zero,809e94 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809e54:	e0bffd17 	ldw	r2,-12(fp)
  809e58:	10800017 	ldw	r2,0(r2)
  809e5c:	10800817 	ldw	r2,32(r2)
  809e60:	10000726 	beq	r2,zero,809e80 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  809e64:	e0bffd17 	ldw	r2,-12(fp)
  809e68:	10800017 	ldw	r2,0(r2)
  809e6c:	10800817 	ldw	r2,32(r2)
  809e70:	e17fff17 	ldw	r5,-4(fp)
  809e74:	e13ffd17 	ldw	r4,-12(fp)
  809e78:	103ee83a 	callr	r2
  809e7c:	00000a06 	br	809ea8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809e80:	e0bfff17 	ldw	r2,-4(fp)
  809e84:	00c80004 	movi	r3,8192
  809e88:	10c00115 	stw	r3,4(r2)
      return 0;
  809e8c:	0005883a 	mov	r2,zero
  809e90:	00000506 	br	809ea8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809e94:	0809dd00 	call	809dd0 <alt_get_errno>
  809e98:	1007883a 	mov	r3,r2
  809e9c:	00801444 	movi	r2,81
  809ea0:	18800015 	stw	r2,0(r3)
    return -1;
  809ea4:	00bfffc4 	movi	r2,-1
  }
}
  809ea8:	e037883a 	mov	sp,fp
  809eac:	dfc00117 	ldw	ra,4(sp)
  809eb0:	df000017 	ldw	fp,0(sp)
  809eb4:	dec00204 	addi	sp,sp,8
  809eb8:	f800283a 	ret

00809ebc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  809ebc:	defff004 	addi	sp,sp,-64
  809ec0:	df000f15 	stw	fp,60(sp)
  809ec4:	df000f04 	addi	fp,sp,60
  809ec8:	e13ffd15 	stw	r4,-12(fp)
  809ecc:	e17ffe15 	stw	r5,-8(fp)
  809ed0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  809ed4:	00bffa84 	movi	r2,-22
  809ed8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  809edc:	e0bffd17 	ldw	r2,-12(fp)
  809ee0:	10800828 	cmpgeui	r2,r2,32
  809ee4:	1000501e 	bne	r2,zero,80a028 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809ee8:	0005303a 	rdctl	r2,status
  809eec:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809ef0:	e0fff617 	ldw	r3,-40(fp)
  809ef4:	00bfff84 	movi	r2,-2
  809ef8:	1884703a 	and	r2,r3,r2
  809efc:	1001703a 	wrctl	status,r2
  
  return context;
  809f00:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  809f04:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  809f08:	00802074 	movhi	r2,129
  809f0c:	10870e04 	addi	r2,r2,7224
  809f10:	e0fffd17 	ldw	r3,-12(fp)
  809f14:	180690fa 	slli	r3,r3,3
  809f18:	10c5883a 	add	r2,r2,r3
  809f1c:	e0ffff17 	ldw	r3,-4(fp)
  809f20:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  809f24:	00802074 	movhi	r2,129
  809f28:	10870e04 	addi	r2,r2,7224
  809f2c:	e0fffd17 	ldw	r3,-12(fp)
  809f30:	180690fa 	slli	r3,r3,3
  809f34:	10c5883a 	add	r2,r2,r3
  809f38:	10800104 	addi	r2,r2,4
  809f3c:	e0fffe17 	ldw	r3,-8(fp)
  809f40:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  809f44:	e0bfff17 	ldw	r2,-4(fp)
  809f48:	10001926 	beq	r2,zero,809fb0 <alt_irq_register+0xf4>
  809f4c:	e0bffd17 	ldw	r2,-12(fp)
  809f50:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809f54:	0005303a 	rdctl	r2,status
  809f58:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809f5c:	e0fff717 	ldw	r3,-36(fp)
  809f60:	00bfff84 	movi	r2,-2
  809f64:	1884703a 	and	r2,r3,r2
  809f68:	1001703a 	wrctl	status,r2
  
  return context;
  809f6c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  809f70:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  809f74:	00c00044 	movi	r3,1
  809f78:	e0bff217 	ldw	r2,-56(fp)
  809f7c:	1884983a 	sll	r2,r3,r2
  809f80:	1007883a 	mov	r3,r2
  809f84:	d0a73117 	ldw	r2,-25404(gp)
  809f88:	1884b03a 	or	r2,r3,r2
  809f8c:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  809f90:	d0a73117 	ldw	r2,-25404(gp)
  809f94:	100170fa 	wrctl	ienable,r2
  809f98:	e0bff817 	ldw	r2,-32(fp)
  809f9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809fa0:	e0bff917 	ldw	r2,-28(fp)
  809fa4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  809fa8:	0005883a 	mov	r2,zero
  809fac:	00001906 	br	80a014 <alt_irq_register+0x158>
  809fb0:	e0bffd17 	ldw	r2,-12(fp)
  809fb4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809fb8:	0005303a 	rdctl	r2,status
  809fbc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809fc0:	e0fffa17 	ldw	r3,-24(fp)
  809fc4:	00bfff84 	movi	r2,-2
  809fc8:	1884703a 	and	r2,r3,r2
  809fcc:	1001703a 	wrctl	status,r2
  
  return context;
  809fd0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  809fd4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  809fd8:	00c00044 	movi	r3,1
  809fdc:	e0bff417 	ldw	r2,-48(fp)
  809fe0:	1884983a 	sll	r2,r3,r2
  809fe4:	0084303a 	nor	r2,zero,r2
  809fe8:	1007883a 	mov	r3,r2
  809fec:	d0a73117 	ldw	r2,-25404(gp)
  809ff0:	1884703a 	and	r2,r3,r2
  809ff4:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  809ff8:	d0a73117 	ldw	r2,-25404(gp)
  809ffc:	100170fa 	wrctl	ienable,r2
  80a000:	e0bffb17 	ldw	r2,-20(fp)
  80a004:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a008:	e0bffc17 	ldw	r2,-16(fp)
  80a00c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80a010:	0005883a 	mov	r2,zero
  80a014:	e0bff115 	stw	r2,-60(fp)
  80a018:	e0bff317 	ldw	r2,-52(fp)
  80a01c:	e0bff515 	stw	r2,-44(fp)
  80a020:	e0bff517 	ldw	r2,-44(fp)
  80a024:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80a028:	e0bff117 	ldw	r2,-60(fp)
}
  80a02c:	e037883a 	mov	sp,fp
  80a030:	df000017 	ldw	fp,0(sp)
  80a034:	dec00104 	addi	sp,sp,4
  80a038:	f800283a 	ret

0080a03c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a03c:	defffe04 	addi	sp,sp,-8
  80a040:	dfc00115 	stw	ra,4(sp)
  80a044:	df000015 	stw	fp,0(sp)
  80a048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a04c:	d0a00917 	ldw	r2,-32732(gp)
  80a050:	10000326 	beq	r2,zero,80a060 <alt_get_errno+0x24>
  80a054:	d0a00917 	ldw	r2,-32732(gp)
  80a058:	103ee83a 	callr	r2
  80a05c:	00000106 	br	80a064 <alt_get_errno+0x28>
  80a060:	d0a73004 	addi	r2,gp,-25408
}
  80a064:	e037883a 	mov	sp,fp
  80a068:	dfc00117 	ldw	ra,4(sp)
  80a06c:	df000017 	ldw	fp,0(sp)
  80a070:	dec00204 	addi	sp,sp,8
  80a074:	f800283a 	ret

0080a078 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a078:	deffed04 	addi	sp,sp,-76
  80a07c:	dfc01215 	stw	ra,72(sp)
  80a080:	df001115 	stw	fp,68(sp)
  80a084:	df001104 	addi	fp,sp,68
  80a088:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a08c:	e0bfff17 	ldw	r2,-4(fp)
  80a090:	10000616 	blt	r2,zero,80a0ac <isatty+0x34>
  80a094:	e0bfff17 	ldw	r2,-4(fp)
  80a098:	10c00324 	muli	r3,r2,12
  80a09c:	00802074 	movhi	r2,129
  80a0a0:	10badb04 	addi	r2,r2,-5268
  80a0a4:	1885883a 	add	r2,r3,r2
  80a0a8:	00000106 	br	80a0b0 <isatty+0x38>
  80a0ac:	0005883a 	mov	r2,zero
  80a0b0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80a0b4:	e0bfef17 	ldw	r2,-68(fp)
  80a0b8:	10000e26 	beq	r2,zero,80a0f4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a0bc:	e0bfef17 	ldw	r2,-68(fp)
  80a0c0:	10800017 	ldw	r2,0(r2)
  80a0c4:	10800817 	ldw	r2,32(r2)
  80a0c8:	1000021e 	bne	r2,zero,80a0d4 <isatty+0x5c>
    {
      return 1;
  80a0cc:	00800044 	movi	r2,1
  80a0d0:	00000d06 	br	80a108 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a0d4:	e0bff004 	addi	r2,fp,-64
  80a0d8:	100b883a 	mov	r5,r2
  80a0dc:	e13fff17 	ldw	r4,-4(fp)
  80a0e0:	0809e0c0 	call	809e0c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a0e4:	e0bff117 	ldw	r2,-60(fp)
  80a0e8:	10880020 	cmpeqi	r2,r2,8192
  80a0ec:	10803fcc 	andi	r2,r2,255
  80a0f0:	00000506 	br	80a108 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a0f4:	080a03c0 	call	80a03c <alt_get_errno>
  80a0f8:	1007883a 	mov	r3,r2
  80a0fc:	00801444 	movi	r2,81
  80a100:	18800015 	stw	r2,0(r3)
    return 0;
  80a104:	0005883a 	mov	r2,zero
  }
}
  80a108:	e037883a 	mov	sp,fp
  80a10c:	dfc00117 	ldw	ra,4(sp)
  80a110:	df000017 	ldw	fp,0(sp)
  80a114:	dec00204 	addi	sp,sp,8
  80a118:	f800283a 	ret

0080a11c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a11c:	defffc04 	addi	sp,sp,-16
  80a120:	df000315 	stw	fp,12(sp)
  80a124:	df000304 	addi	fp,sp,12
  80a128:	e13ffd15 	stw	r4,-12(fp)
  80a12c:	e17ffe15 	stw	r5,-8(fp)
  80a130:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a134:	e0fffe17 	ldw	r3,-8(fp)
  80a138:	e0bffd17 	ldw	r2,-12(fp)
  80a13c:	18800c26 	beq	r3,r2,80a170 <alt_load_section+0x54>
  {
    while( to != end )
  80a140:	00000806 	br	80a164 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80a144:	e0bffe17 	ldw	r2,-8(fp)
  80a148:	10c00104 	addi	r3,r2,4
  80a14c:	e0fffe15 	stw	r3,-8(fp)
  80a150:	e0fffd17 	ldw	r3,-12(fp)
  80a154:	19000104 	addi	r4,r3,4
  80a158:	e13ffd15 	stw	r4,-12(fp)
  80a15c:	18c00017 	ldw	r3,0(r3)
  80a160:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80a164:	e0fffe17 	ldw	r3,-8(fp)
  80a168:	e0bfff17 	ldw	r2,-4(fp)
  80a16c:	18bff51e 	bne	r3,r2,80a144 <__alt_mem_onchip_mem+0xff802144>
    {
      *to++ = *from++;
    }
  }
}
  80a170:	0001883a 	nop
  80a174:	e037883a 	mov	sp,fp
  80a178:	df000017 	ldw	fp,0(sp)
  80a17c:	dec00104 	addi	sp,sp,4
  80a180:	f800283a 	ret

0080a184 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80a184:	defffe04 	addi	sp,sp,-8
  80a188:	dfc00115 	stw	ra,4(sp)
  80a18c:	df000015 	stw	fp,0(sp)
  80a190:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80a194:	01802074 	movhi	r6,129
  80a198:	31bfdc04 	addi	r6,r6,-144
  80a19c:	01402074 	movhi	r5,129
  80a1a0:	2978c604 	addi	r5,r5,-7400
  80a1a4:	01002074 	movhi	r4,129
  80a1a8:	213fdc04 	addi	r4,r4,-144
  80a1ac:	080a11c0 	call	80a11c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80a1b0:	01802034 	movhi	r6,128
  80a1b4:	31809104 	addi	r6,r6,580
  80a1b8:	01402034 	movhi	r5,128
  80a1bc:	29400804 	addi	r5,r5,32
  80a1c0:	01002034 	movhi	r4,128
  80a1c4:	21000804 	addi	r4,r4,32
  80a1c8:	080a11c0 	call	80a11c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a1cc:	01802074 	movhi	r6,129
  80a1d0:	31b8c604 	addi	r6,r6,-7400
  80a1d4:	01402074 	movhi	r5,129
  80a1d8:	29778304 	addi	r5,r5,-8692
  80a1dc:	01002074 	movhi	r4,129
  80a1e0:	21378304 	addi	r4,r4,-8692
  80a1e4:	080a11c0 	call	80a11c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a1e8:	080cd140 	call	80cd14 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a1ec:	080cefc0 	call	80cefc <alt_icache_flush_all>
}
  80a1f0:	0001883a 	nop
  80a1f4:	e037883a 	mov	sp,fp
  80a1f8:	dfc00117 	ldw	ra,4(sp)
  80a1fc:	df000017 	ldw	fp,0(sp)
  80a200:	dec00204 	addi	sp,sp,8
  80a204:	f800283a 	ret

0080a208 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a208:	defffe04 	addi	sp,sp,-8
  80a20c:	dfc00115 	stw	ra,4(sp)
  80a210:	df000015 	stw	fp,0(sp)
  80a214:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a218:	d0a00917 	ldw	r2,-32732(gp)
  80a21c:	10000326 	beq	r2,zero,80a22c <alt_get_errno+0x24>
  80a220:	d0a00917 	ldw	r2,-32732(gp)
  80a224:	103ee83a 	callr	r2
  80a228:	00000106 	br	80a230 <alt_get_errno+0x28>
  80a22c:	d0a73004 	addi	r2,gp,-25408
}
  80a230:	e037883a 	mov	sp,fp
  80a234:	dfc00117 	ldw	ra,4(sp)
  80a238:	df000017 	ldw	fp,0(sp)
  80a23c:	dec00204 	addi	sp,sp,8
  80a240:	f800283a 	ret

0080a244 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80a244:	defff904 	addi	sp,sp,-28
  80a248:	dfc00615 	stw	ra,24(sp)
  80a24c:	df000515 	stw	fp,20(sp)
  80a250:	df000504 	addi	fp,sp,20
  80a254:	e13ffd15 	stw	r4,-12(fp)
  80a258:	e17ffe15 	stw	r5,-8(fp)
  80a25c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80a260:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a264:	e0bffd17 	ldw	r2,-12(fp)
  80a268:	10000616 	blt	r2,zero,80a284 <lseek+0x40>
  80a26c:	e0bffd17 	ldw	r2,-12(fp)
  80a270:	10c00324 	muli	r3,r2,12
  80a274:	00802074 	movhi	r2,129
  80a278:	10badb04 	addi	r2,r2,-5268
  80a27c:	1885883a 	add	r2,r3,r2
  80a280:	00000106 	br	80a288 <lseek+0x44>
  80a284:	0005883a 	mov	r2,zero
  80a288:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80a28c:	e0bffc17 	ldw	r2,-16(fp)
  80a290:	10001026 	beq	r2,zero,80a2d4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a294:	e0bffc17 	ldw	r2,-16(fp)
  80a298:	10800017 	ldw	r2,0(r2)
  80a29c:	10800717 	ldw	r2,28(r2)
  80a2a0:	10000926 	beq	r2,zero,80a2c8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a2a4:	e0bffc17 	ldw	r2,-16(fp)
  80a2a8:	10800017 	ldw	r2,0(r2)
  80a2ac:	10800717 	ldw	r2,28(r2)
  80a2b0:	e1bfff17 	ldw	r6,-4(fp)
  80a2b4:	e17ffe17 	ldw	r5,-8(fp)
  80a2b8:	e13ffc17 	ldw	r4,-16(fp)
  80a2bc:	103ee83a 	callr	r2
  80a2c0:	e0bffb15 	stw	r2,-20(fp)
  80a2c4:	00000506 	br	80a2dc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a2c8:	00bfde84 	movi	r2,-134
  80a2cc:	e0bffb15 	stw	r2,-20(fp)
  80a2d0:	00000206 	br	80a2dc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a2d4:	00bfebc4 	movi	r2,-81
  80a2d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80a2dc:	e0bffb17 	ldw	r2,-20(fp)
  80a2e0:	1000070e 	bge	r2,zero,80a300 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80a2e4:	080a2080 	call	80a208 <alt_get_errno>
  80a2e8:	1007883a 	mov	r3,r2
  80a2ec:	e0bffb17 	ldw	r2,-20(fp)
  80a2f0:	0085c83a 	sub	r2,zero,r2
  80a2f4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a2f8:	00bfffc4 	movi	r2,-1
  80a2fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80a300:	e0bffb17 	ldw	r2,-20(fp)
}
  80a304:	e037883a 	mov	sp,fp
  80a308:	dfc00117 	ldw	ra,4(sp)
  80a30c:	df000017 	ldw	fp,0(sp)
  80a310:	dec00204 	addi	sp,sp,8
  80a314:	f800283a 	ret

0080a318 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a318:	defffd04 	addi	sp,sp,-12
  80a31c:	dfc00215 	stw	ra,8(sp)
  80a320:	df000115 	stw	fp,4(sp)
  80a324:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a328:	0009883a 	mov	r4,zero
  80a32c:	080a9340 	call	80a934 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80a330:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a334:	080a96c0 	call	80a96c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a338:	01802074 	movhi	r6,129
  80a33c:	31b81804 	addi	r6,r6,-8096
  80a340:	01402074 	movhi	r5,129
  80a344:	29781804 	addi	r5,r5,-8096
  80a348:	01002074 	movhi	r4,129
  80a34c:	21381804 	addi	r4,r4,-8096
  80a350:	080d2940 	call	80d294 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a354:	080ce3c0 	call	80ce3c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a358:	01002074 	movhi	r4,129
  80a35c:	2133a704 	addi	r4,r4,-12644
  80a360:	080da780 	call	80da78 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a364:	d0a73217 	ldw	r2,-25400(gp)
  80a368:	d0e73317 	ldw	r3,-25396(gp)
  80a36c:	d1273417 	ldw	r4,-25392(gp)
  80a370:	200d883a 	mov	r6,r4
  80a374:	180b883a 	mov	r5,r3
  80a378:	1009883a 	mov	r4,r2
  80a37c:	08005980 	call	800598 <main>
  80a380:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a384:	01000044 	movi	r4,1
  80a388:	0809cd40 	call	809cd4 <close>
  exit (result);
  80a38c:	e13fff17 	ldw	r4,-4(fp)
  80a390:	080da8c0 	call	80da8c <exit>

0080a394 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80a394:	defffe04 	addi	sp,sp,-8
  80a398:	df000115 	stw	fp,4(sp)
  80a39c:	df000104 	addi	fp,sp,4
  80a3a0:	e13fff15 	stw	r4,-4(fp)
}
  80a3a4:	0001883a 	nop
  80a3a8:	e037883a 	mov	sp,fp
  80a3ac:	df000017 	ldw	fp,0(sp)
  80a3b0:	dec00104 	addi	sp,sp,4
  80a3b4:	f800283a 	ret

0080a3b8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80a3b8:	defffe04 	addi	sp,sp,-8
  80a3bc:	df000115 	stw	fp,4(sp)
  80a3c0:	df000104 	addi	fp,sp,4
  80a3c4:	e13fff15 	stw	r4,-4(fp)
}
  80a3c8:	0001883a 	nop
  80a3cc:	e037883a 	mov	sp,fp
  80a3d0:	df000017 	ldw	fp,0(sp)
  80a3d4:	dec00104 	addi	sp,sp,4
  80a3d8:	f800283a 	ret

0080a3dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a3dc:	defffe04 	addi	sp,sp,-8
  80a3e0:	dfc00115 	stw	ra,4(sp)
  80a3e4:	df000015 	stw	fp,0(sp)
  80a3e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a3ec:	d0a00917 	ldw	r2,-32732(gp)
  80a3f0:	10000326 	beq	r2,zero,80a400 <alt_get_errno+0x24>
  80a3f4:	d0a00917 	ldw	r2,-32732(gp)
  80a3f8:	103ee83a 	callr	r2
  80a3fc:	00000106 	br	80a404 <alt_get_errno+0x28>
  80a400:	d0a73004 	addi	r2,gp,-25408
}
  80a404:	e037883a 	mov	sp,fp
  80a408:	dfc00117 	ldw	ra,4(sp)
  80a40c:	df000017 	ldw	fp,0(sp)
  80a410:	dec00204 	addi	sp,sp,8
  80a414:	f800283a 	ret

0080a418 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80a418:	defff904 	addi	sp,sp,-28
  80a41c:	dfc00615 	stw	ra,24(sp)
  80a420:	df000515 	stw	fp,20(sp)
  80a424:	df000504 	addi	fp,sp,20
  80a428:	e13ffd15 	stw	r4,-12(fp)
  80a42c:	e17ffe15 	stw	r5,-8(fp)
  80a430:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a434:	e0bffd17 	ldw	r2,-12(fp)
  80a438:	10000616 	blt	r2,zero,80a454 <read+0x3c>
  80a43c:	e0bffd17 	ldw	r2,-12(fp)
  80a440:	10c00324 	muli	r3,r2,12
  80a444:	00802074 	movhi	r2,129
  80a448:	10badb04 	addi	r2,r2,-5268
  80a44c:	1885883a 	add	r2,r3,r2
  80a450:	00000106 	br	80a458 <read+0x40>
  80a454:	0005883a 	mov	r2,zero
  80a458:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a45c:	e0bffb17 	ldw	r2,-20(fp)
  80a460:	10002226 	beq	r2,zero,80a4ec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a464:	e0bffb17 	ldw	r2,-20(fp)
  80a468:	10800217 	ldw	r2,8(r2)
  80a46c:	108000cc 	andi	r2,r2,3
  80a470:	10800060 	cmpeqi	r2,r2,1
  80a474:	1000181e 	bne	r2,zero,80a4d8 <read+0xc0>
        (fd->dev->read))
  80a478:	e0bffb17 	ldw	r2,-20(fp)
  80a47c:	10800017 	ldw	r2,0(r2)
  80a480:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a484:	10001426 	beq	r2,zero,80a4d8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80a488:	e0bffb17 	ldw	r2,-20(fp)
  80a48c:	10800017 	ldw	r2,0(r2)
  80a490:	10800517 	ldw	r2,20(r2)
  80a494:	e0ffff17 	ldw	r3,-4(fp)
  80a498:	180d883a 	mov	r6,r3
  80a49c:	e17ffe17 	ldw	r5,-8(fp)
  80a4a0:	e13ffb17 	ldw	r4,-20(fp)
  80a4a4:	103ee83a 	callr	r2
  80a4a8:	e0bffc15 	stw	r2,-16(fp)
  80a4ac:	e0bffc17 	ldw	r2,-16(fp)
  80a4b0:	1000070e 	bge	r2,zero,80a4d0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80a4b4:	080a3dc0 	call	80a3dc <alt_get_errno>
  80a4b8:	1007883a 	mov	r3,r2
  80a4bc:	e0bffc17 	ldw	r2,-16(fp)
  80a4c0:	0085c83a 	sub	r2,zero,r2
  80a4c4:	18800015 	stw	r2,0(r3)
          return -1;
  80a4c8:	00bfffc4 	movi	r2,-1
  80a4cc:	00000c06 	br	80a500 <read+0xe8>
        }
        return rval;
  80a4d0:	e0bffc17 	ldw	r2,-16(fp)
  80a4d4:	00000a06 	br	80a500 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80a4d8:	080a3dc0 	call	80a3dc <alt_get_errno>
  80a4dc:	1007883a 	mov	r3,r2
  80a4e0:	00800344 	movi	r2,13
  80a4e4:	18800015 	stw	r2,0(r3)
  80a4e8:	00000406 	br	80a4fc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80a4ec:	080a3dc0 	call	80a3dc <alt_get_errno>
  80a4f0:	1007883a 	mov	r3,r2
  80a4f4:	00801444 	movi	r2,81
  80a4f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a4fc:	00bfffc4 	movi	r2,-1
}
  80a500:	e037883a 	mov	sp,fp
  80a504:	dfc00117 	ldw	ra,4(sp)
  80a508:	df000017 	ldw	fp,0(sp)
  80a50c:	dec00204 	addi	sp,sp,8
  80a510:	f800283a 	ret

0080a514 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80a514:	defffe04 	addi	sp,sp,-8
  80a518:	df000115 	stw	fp,4(sp)
  80a51c:	df000104 	addi	fp,sp,4
  80a520:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80a524:	e0bfff17 	ldw	r2,-4(fp)
  80a528:	108000d0 	cmplti	r2,r2,3
  80a52c:	10000d1e 	bne	r2,zero,80a564 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80a530:	00802074 	movhi	r2,129
  80a534:	10badb04 	addi	r2,r2,-5268
  80a538:	e0ffff17 	ldw	r3,-4(fp)
  80a53c:	18c00324 	muli	r3,r3,12
  80a540:	10c5883a 	add	r2,r2,r3
  80a544:	10800204 	addi	r2,r2,8
  80a548:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80a54c:	00802074 	movhi	r2,129
  80a550:	10badb04 	addi	r2,r2,-5268
  80a554:	e0ffff17 	ldw	r3,-4(fp)
  80a558:	18c00324 	muli	r3,r3,12
  80a55c:	10c5883a 	add	r2,r2,r3
  80a560:	10000015 	stw	zero,0(r2)
  }
}
  80a564:	0001883a 	nop
  80a568:	e037883a 	mov	sp,fp
  80a56c:	df000017 	ldw	fp,0(sp)
  80a570:	dec00104 	addi	sp,sp,4
  80a574:	f800283a 	ret

0080a578 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80a578:	defff904 	addi	sp,sp,-28
  80a57c:	df000615 	stw	fp,24(sp)
  80a580:	df000604 	addi	fp,sp,24
  80a584:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a588:	0005303a 	rdctl	r2,status
  80a58c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a590:	e0fffe17 	ldw	r3,-8(fp)
  80a594:	00bfff84 	movi	r2,-2
  80a598:	1884703a 	and	r2,r3,r2
  80a59c:	1001703a 	wrctl	status,r2
  
  return context;
  80a5a0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80a5a4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80a5a8:	d0a00b17 	ldw	r2,-32724(gp)
  80a5ac:	10c000c4 	addi	r3,r2,3
  80a5b0:	00bfff04 	movi	r2,-4
  80a5b4:	1884703a 	and	r2,r3,r2
  80a5b8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80a5bc:	d0e00b17 	ldw	r3,-32724(gp)
  80a5c0:	e0bfff17 	ldw	r2,-4(fp)
  80a5c4:	1887883a 	add	r3,r3,r2
  80a5c8:	00804034 	movhi	r2,256
  80a5cc:	10800004 	addi	r2,r2,0
  80a5d0:	10c0062e 	bgeu	r2,r3,80a5ec <sbrk+0x74>
  80a5d4:	e0bffb17 	ldw	r2,-20(fp)
  80a5d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a5dc:	e0bffa17 	ldw	r2,-24(fp)
  80a5e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80a5e4:	00bfffc4 	movi	r2,-1
  80a5e8:	00000b06 	br	80a618 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80a5ec:	d0a00b17 	ldw	r2,-32724(gp)
  80a5f0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80a5f4:	d0e00b17 	ldw	r3,-32724(gp)
  80a5f8:	e0bfff17 	ldw	r2,-4(fp)
  80a5fc:	1885883a 	add	r2,r3,r2
  80a600:	d0a00b15 	stw	r2,-32724(gp)
  80a604:	e0bffb17 	ldw	r2,-20(fp)
  80a608:	e0bffc15 	stw	r2,-16(fp)
  80a60c:	e0bffc17 	ldw	r2,-16(fp)
  80a610:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80a614:	e0bffd17 	ldw	r2,-12(fp)
} 
  80a618:	e037883a 	mov	sp,fp
  80a61c:	df000017 	ldw	fp,0(sp)
  80a620:	dec00104 	addi	sp,sp,4
  80a624:	f800283a 	ret

0080a628 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80a628:	defffa04 	addi	sp,sp,-24
  80a62c:	df000515 	stw	fp,20(sp)
  80a630:	df000504 	addi	fp,sp,20
  80a634:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a638:	0005303a 	rdctl	r2,status
  80a63c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a640:	e0fffc17 	ldw	r3,-16(fp)
  80a644:	00bfff84 	movi	r2,-2
  80a648:	1884703a 	and	r2,r3,r2
  80a64c:	1001703a 	wrctl	status,r2
  
  return context;
  80a650:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80a654:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80a658:	e0bfff17 	ldw	r2,-4(fp)
  80a65c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80a660:	e0bffd17 	ldw	r2,-12(fp)
  80a664:	10800017 	ldw	r2,0(r2)
  80a668:	e0fffd17 	ldw	r3,-12(fp)
  80a66c:	18c00117 	ldw	r3,4(r3)
  80a670:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80a674:	e0bffd17 	ldw	r2,-12(fp)
  80a678:	10800117 	ldw	r2,4(r2)
  80a67c:	e0fffd17 	ldw	r3,-12(fp)
  80a680:	18c00017 	ldw	r3,0(r3)
  80a684:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80a688:	e0bffd17 	ldw	r2,-12(fp)
  80a68c:	e0fffd17 	ldw	r3,-12(fp)
  80a690:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80a694:	e0bffd17 	ldw	r2,-12(fp)
  80a698:	e0fffd17 	ldw	r3,-12(fp)
  80a69c:	10c00015 	stw	r3,0(r2)
  80a6a0:	e0bffb17 	ldw	r2,-20(fp)
  80a6a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a6a8:	e0bffe17 	ldw	r2,-8(fp)
  80a6ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80a6b0:	0001883a 	nop
  80a6b4:	e037883a 	mov	sp,fp
  80a6b8:	df000017 	ldw	fp,0(sp)
  80a6bc:	dec00104 	addi	sp,sp,4
  80a6c0:	f800283a 	ret

0080a6c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80a6c4:	defffb04 	addi	sp,sp,-20
  80a6c8:	dfc00415 	stw	ra,16(sp)
  80a6cc:	df000315 	stw	fp,12(sp)
  80a6d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80a6d4:	d0a00c17 	ldw	r2,-32720(gp)
  80a6d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80a6dc:	d0a73617 	ldw	r2,-25384(gp)
  80a6e0:	10800044 	addi	r2,r2,1
  80a6e4:	d0a73615 	stw	r2,-25384(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80a6e8:	00002e06 	br	80a7a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80a6ec:	e0bffd17 	ldw	r2,-12(fp)
  80a6f0:	10800017 	ldw	r2,0(r2)
  80a6f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80a6f8:	e0bffd17 	ldw	r2,-12(fp)
  80a6fc:	10800403 	ldbu	r2,16(r2)
  80a700:	10803fcc 	andi	r2,r2,255
  80a704:	10000426 	beq	r2,zero,80a718 <alt_tick+0x54>
  80a708:	d0a73617 	ldw	r2,-25384(gp)
  80a70c:	1000021e 	bne	r2,zero,80a718 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80a710:	e0bffd17 	ldw	r2,-12(fp)
  80a714:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80a718:	e0bffd17 	ldw	r2,-12(fp)
  80a71c:	10800217 	ldw	r2,8(r2)
  80a720:	d0e73617 	ldw	r3,-25384(gp)
  80a724:	18801d36 	bltu	r3,r2,80a79c <alt_tick+0xd8>
  80a728:	e0bffd17 	ldw	r2,-12(fp)
  80a72c:	10800403 	ldbu	r2,16(r2)
  80a730:	10803fcc 	andi	r2,r2,255
  80a734:	1000191e 	bne	r2,zero,80a79c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80a738:	e0bffd17 	ldw	r2,-12(fp)
  80a73c:	10800317 	ldw	r2,12(r2)
  80a740:	e0fffd17 	ldw	r3,-12(fp)
  80a744:	18c00517 	ldw	r3,20(r3)
  80a748:	1809883a 	mov	r4,r3
  80a74c:	103ee83a 	callr	r2
  80a750:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80a754:	e0bfff17 	ldw	r2,-4(fp)
  80a758:	1000031e 	bne	r2,zero,80a768 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80a75c:	e13ffd17 	ldw	r4,-12(fp)
  80a760:	080a6280 	call	80a628 <alt_alarm_stop>
  80a764:	00000d06 	br	80a79c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80a768:	e0bffd17 	ldw	r2,-12(fp)
  80a76c:	10c00217 	ldw	r3,8(r2)
  80a770:	e0bfff17 	ldw	r2,-4(fp)
  80a774:	1887883a 	add	r3,r3,r2
  80a778:	e0bffd17 	ldw	r2,-12(fp)
  80a77c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80a780:	e0bffd17 	ldw	r2,-12(fp)
  80a784:	10c00217 	ldw	r3,8(r2)
  80a788:	d0a73617 	ldw	r2,-25384(gp)
  80a78c:	1880032e 	bgeu	r3,r2,80a79c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80a790:	e0bffd17 	ldw	r2,-12(fp)
  80a794:	00c00044 	movi	r3,1
  80a798:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80a79c:	e0bffe17 	ldw	r2,-8(fp)
  80a7a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80a7a4:	e0fffd17 	ldw	r3,-12(fp)
  80a7a8:	d0a00c04 	addi	r2,gp,-32720
  80a7ac:	18bfcf1e 	bne	r3,r2,80a6ec <__alt_mem_onchip_mem+0xff8026ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80a7b0:	0001883a 	nop
}
  80a7b4:	0001883a 	nop
  80a7b8:	e037883a 	mov	sp,fp
  80a7bc:	dfc00117 	ldw	ra,4(sp)
  80a7c0:	df000017 	ldw	fp,0(sp)
  80a7c4:	dec00204 	addi	sp,sp,8
  80a7c8:	f800283a 	ret

0080a7cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a7cc:	defffe04 	addi	sp,sp,-8
  80a7d0:	dfc00115 	stw	ra,4(sp)
  80a7d4:	df000015 	stw	fp,0(sp)
  80a7d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a7dc:	d0a00917 	ldw	r2,-32732(gp)
  80a7e0:	10000326 	beq	r2,zero,80a7f0 <alt_get_errno+0x24>
  80a7e4:	d0a00917 	ldw	r2,-32732(gp)
  80a7e8:	103ee83a 	callr	r2
  80a7ec:	00000106 	br	80a7f4 <alt_get_errno+0x28>
  80a7f0:	d0a73004 	addi	r2,gp,-25408
}
  80a7f4:	e037883a 	mov	sp,fp
  80a7f8:	dfc00117 	ldw	ra,4(sp)
  80a7fc:	df000017 	ldw	fp,0(sp)
  80a800:	dec00204 	addi	sp,sp,8
  80a804:	f800283a 	ret

0080a808 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80a808:	defff904 	addi	sp,sp,-28
  80a80c:	dfc00615 	stw	ra,24(sp)
  80a810:	df000515 	stw	fp,20(sp)
  80a814:	df000504 	addi	fp,sp,20
  80a818:	e13ffd15 	stw	r4,-12(fp)
  80a81c:	e17ffe15 	stw	r5,-8(fp)
  80a820:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a824:	e0bffd17 	ldw	r2,-12(fp)
  80a828:	10000616 	blt	r2,zero,80a844 <write+0x3c>
  80a82c:	e0bffd17 	ldw	r2,-12(fp)
  80a830:	10c00324 	muli	r3,r2,12
  80a834:	00802074 	movhi	r2,129
  80a838:	10badb04 	addi	r2,r2,-5268
  80a83c:	1885883a 	add	r2,r3,r2
  80a840:	00000106 	br	80a848 <write+0x40>
  80a844:	0005883a 	mov	r2,zero
  80a848:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a84c:	e0bffb17 	ldw	r2,-20(fp)
  80a850:	10002126 	beq	r2,zero,80a8d8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80a854:	e0bffb17 	ldw	r2,-20(fp)
  80a858:	10800217 	ldw	r2,8(r2)
  80a85c:	108000cc 	andi	r2,r2,3
  80a860:	10001826 	beq	r2,zero,80a8c4 <write+0xbc>
  80a864:	e0bffb17 	ldw	r2,-20(fp)
  80a868:	10800017 	ldw	r2,0(r2)
  80a86c:	10800617 	ldw	r2,24(r2)
  80a870:	10001426 	beq	r2,zero,80a8c4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80a874:	e0bffb17 	ldw	r2,-20(fp)
  80a878:	10800017 	ldw	r2,0(r2)
  80a87c:	10800617 	ldw	r2,24(r2)
  80a880:	e0ffff17 	ldw	r3,-4(fp)
  80a884:	180d883a 	mov	r6,r3
  80a888:	e17ffe17 	ldw	r5,-8(fp)
  80a88c:	e13ffb17 	ldw	r4,-20(fp)
  80a890:	103ee83a 	callr	r2
  80a894:	e0bffc15 	stw	r2,-16(fp)
  80a898:	e0bffc17 	ldw	r2,-16(fp)
  80a89c:	1000070e 	bge	r2,zero,80a8bc <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80a8a0:	080a7cc0 	call	80a7cc <alt_get_errno>
  80a8a4:	1007883a 	mov	r3,r2
  80a8a8:	e0bffc17 	ldw	r2,-16(fp)
  80a8ac:	0085c83a 	sub	r2,zero,r2
  80a8b0:	18800015 	stw	r2,0(r3)
        return -1;
  80a8b4:	00bfffc4 	movi	r2,-1
  80a8b8:	00000c06 	br	80a8ec <write+0xe4>
      }
      return rval;
  80a8bc:	e0bffc17 	ldw	r2,-16(fp)
  80a8c0:	00000a06 	br	80a8ec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80a8c4:	080a7cc0 	call	80a7cc <alt_get_errno>
  80a8c8:	1007883a 	mov	r3,r2
  80a8cc:	00800344 	movi	r2,13
  80a8d0:	18800015 	stw	r2,0(r3)
  80a8d4:	00000406 	br	80a8e8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80a8d8:	080a7cc0 	call	80a7cc <alt_get_errno>
  80a8dc:	1007883a 	mov	r3,r2
  80a8e0:	00801444 	movi	r2,81
  80a8e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a8e8:	00bfffc4 	movi	r2,-1
}
  80a8ec:	e037883a 	mov	sp,fp
  80a8f0:	dfc00117 	ldw	ra,4(sp)
  80a8f4:	df000017 	ldw	fp,0(sp)
  80a8f8:	dec00204 	addi	sp,sp,8
  80a8fc:	f800283a 	ret

0080a900 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80a900:	defffd04 	addi	sp,sp,-12
  80a904:	dfc00215 	stw	ra,8(sp)
  80a908:	df000115 	stw	fp,4(sp)
  80a90c:	df000104 	addi	fp,sp,4
  80a910:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80a914:	d1600604 	addi	r5,gp,-32744
  80a918:	e13fff17 	ldw	r4,-4(fp)
  80a91c:	080cd980 	call	80cd98 <alt_dev_llist_insert>
}
  80a920:	e037883a 	mov	sp,fp
  80a924:	dfc00117 	ldw	ra,4(sp)
  80a928:	df000017 	ldw	fp,0(sp)
  80a92c:	dec00204 	addi	sp,sp,8
  80a930:	f800283a 	ret

0080a934 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80a934:	defffd04 	addi	sp,sp,-12
  80a938:	dfc00215 	stw	ra,8(sp)
  80a93c:	df000115 	stw	fp,4(sp)
  80a940:	df000104 	addi	fp,sp,4
  80a944:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80a948:	080d5940 	call	80d594 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80a94c:	00800044 	movi	r2,1
  80a950:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80a954:	0001883a 	nop
  80a958:	e037883a 	mov	sp,fp
  80a95c:	dfc00117 	ldw	ra,4(sp)
  80a960:	df000017 	ldw	fp,0(sp)
  80a964:	dec00204 	addi	sp,sp,8
  80a968:	f800283a 	ret

0080a96c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80a96c:	defffe04 	addi	sp,sp,-8
  80a970:	dfc00115 	stw	ra,4(sp)
  80a974:	df000015 	stw	fp,0(sp)
  80a978:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80a97c:	01c0fa04 	movi	r7,1000
  80a980:	01800084 	movi	r6,2
  80a984:	000b883a 	mov	r5,zero
  80a988:	01004074 	movhi	r4,257
  80a98c:	21040804 	addi	r4,r4,4128
  80a990:	080c3c00 	call	80c3c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80a994:	01800044 	movi	r6,1
  80a998:	000b883a 	mov	r5,zero
  80a99c:	01002074 	movhi	r4,129
  80a9a0:	213b4504 	addi	r4,r4,-4844
  80a9a4:	080ab680 	call	80ab68 <altera_avalon_jtag_uart_init>
  80a9a8:	01002074 	movhi	r4,129
  80a9ac:	213b3b04 	addi	r4,r4,-4884
  80a9b0:	080a9000 	call	80a900 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80a9b4:	01002074 	movhi	r4,129
  80a9b8:	213f5d04 	addi	r4,r4,-652
  80a9bc:	080c1b40 	call	80c1b4 <altera_avalon_lcd_16207_init>
  80a9c0:	01002074 	movhi	r4,129
  80a9c4:	213f5304 	addi	r4,r4,-692
  80a9c8:	080a9000 	call	80a900 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80a9cc:	000d883a 	mov	r6,zero
  80a9d0:	000b883a 	mov	r5,zero
  80a9d4:	01002074 	movhi	r4,129
  80a9d8:	213fa504 	addi	r4,r4,-364
  80a9dc:	080c54c0 	call	80c54c <altera_avalon_uart_init>
  80a9e0:	01002074 	movhi	r4,129
  80a9e4:	213f9b04 	addi	r4,r4,-404
  80a9e8:	080a9000 	call	80a900 <alt_dev_reg>
}
  80a9ec:	0001883a 	nop
  80a9f0:	e037883a 	mov	sp,fp
  80a9f4:	dfc00117 	ldw	ra,4(sp)
  80a9f8:	df000017 	ldw	fp,0(sp)
  80a9fc:	dec00204 	addi	sp,sp,8
  80aa00:	f800283a 	ret

0080aa04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80aa04:	defffa04 	addi	sp,sp,-24
  80aa08:	dfc00515 	stw	ra,20(sp)
  80aa0c:	df000415 	stw	fp,16(sp)
  80aa10:	df000404 	addi	fp,sp,16
  80aa14:	e13ffd15 	stw	r4,-12(fp)
  80aa18:	e17ffe15 	stw	r5,-8(fp)
  80aa1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80aa20:	e0bffd17 	ldw	r2,-12(fp)
  80aa24:	10800017 	ldw	r2,0(r2)
  80aa28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80aa2c:	e0bffc17 	ldw	r2,-16(fp)
  80aa30:	10c00a04 	addi	r3,r2,40
  80aa34:	e0bffd17 	ldw	r2,-12(fp)
  80aa38:	10800217 	ldw	r2,8(r2)
  80aa3c:	100f883a 	mov	r7,r2
  80aa40:	e1bfff17 	ldw	r6,-4(fp)
  80aa44:	e17ffe17 	ldw	r5,-8(fp)
  80aa48:	1809883a 	mov	r4,r3
  80aa4c:	080b02c0 	call	80b02c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80aa50:	e037883a 	mov	sp,fp
  80aa54:	dfc00117 	ldw	ra,4(sp)
  80aa58:	df000017 	ldw	fp,0(sp)
  80aa5c:	dec00204 	addi	sp,sp,8
  80aa60:	f800283a 	ret

0080aa64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80aa64:	defffa04 	addi	sp,sp,-24
  80aa68:	dfc00515 	stw	ra,20(sp)
  80aa6c:	df000415 	stw	fp,16(sp)
  80aa70:	df000404 	addi	fp,sp,16
  80aa74:	e13ffd15 	stw	r4,-12(fp)
  80aa78:	e17ffe15 	stw	r5,-8(fp)
  80aa7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80aa80:	e0bffd17 	ldw	r2,-12(fp)
  80aa84:	10800017 	ldw	r2,0(r2)
  80aa88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80aa8c:	e0bffc17 	ldw	r2,-16(fp)
  80aa90:	10c00a04 	addi	r3,r2,40
  80aa94:	e0bffd17 	ldw	r2,-12(fp)
  80aa98:	10800217 	ldw	r2,8(r2)
  80aa9c:	100f883a 	mov	r7,r2
  80aaa0:	e1bfff17 	ldw	r6,-4(fp)
  80aaa4:	e17ffe17 	ldw	r5,-8(fp)
  80aaa8:	1809883a 	mov	r4,r3
  80aaac:	080b2480 	call	80b248 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80aab0:	e037883a 	mov	sp,fp
  80aab4:	dfc00117 	ldw	ra,4(sp)
  80aab8:	df000017 	ldw	fp,0(sp)
  80aabc:	dec00204 	addi	sp,sp,8
  80aac0:	f800283a 	ret

0080aac4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80aac4:	defffc04 	addi	sp,sp,-16
  80aac8:	dfc00315 	stw	ra,12(sp)
  80aacc:	df000215 	stw	fp,8(sp)
  80aad0:	df000204 	addi	fp,sp,8
  80aad4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80aad8:	e0bfff17 	ldw	r2,-4(fp)
  80aadc:	10800017 	ldw	r2,0(r2)
  80aae0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80aae4:	e0bffe17 	ldw	r2,-8(fp)
  80aae8:	10c00a04 	addi	r3,r2,40
  80aaec:	e0bfff17 	ldw	r2,-4(fp)
  80aaf0:	10800217 	ldw	r2,8(r2)
  80aaf4:	100b883a 	mov	r5,r2
  80aaf8:	1809883a 	mov	r4,r3
  80aafc:	080aed40 	call	80aed4 <altera_avalon_jtag_uart_close>
}
  80ab00:	e037883a 	mov	sp,fp
  80ab04:	dfc00117 	ldw	ra,4(sp)
  80ab08:	df000017 	ldw	fp,0(sp)
  80ab0c:	dec00204 	addi	sp,sp,8
  80ab10:	f800283a 	ret

0080ab14 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80ab14:	defffa04 	addi	sp,sp,-24
  80ab18:	dfc00515 	stw	ra,20(sp)
  80ab1c:	df000415 	stw	fp,16(sp)
  80ab20:	df000404 	addi	fp,sp,16
  80ab24:	e13ffd15 	stw	r4,-12(fp)
  80ab28:	e17ffe15 	stw	r5,-8(fp)
  80ab2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80ab30:	e0bffd17 	ldw	r2,-12(fp)
  80ab34:	10800017 	ldw	r2,0(r2)
  80ab38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ab3c:	e0bffc17 	ldw	r2,-16(fp)
  80ab40:	10800a04 	addi	r2,r2,40
  80ab44:	e1bfff17 	ldw	r6,-4(fp)
  80ab48:	e17ffe17 	ldw	r5,-8(fp)
  80ab4c:	1009883a 	mov	r4,r2
  80ab50:	080af3c0 	call	80af3c <altera_avalon_jtag_uart_ioctl>
}
  80ab54:	e037883a 	mov	sp,fp
  80ab58:	dfc00117 	ldw	ra,4(sp)
  80ab5c:	df000017 	ldw	fp,0(sp)
  80ab60:	dec00204 	addi	sp,sp,8
  80ab64:	f800283a 	ret

0080ab68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ab68:	defffa04 	addi	sp,sp,-24
  80ab6c:	dfc00515 	stw	ra,20(sp)
  80ab70:	df000415 	stw	fp,16(sp)
  80ab74:	df000404 	addi	fp,sp,16
  80ab78:	e13ffd15 	stw	r4,-12(fp)
  80ab7c:	e17ffe15 	stw	r5,-8(fp)
  80ab80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ab84:	e0bffd17 	ldw	r2,-12(fp)
  80ab88:	00c00044 	movi	r3,1
  80ab8c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ab90:	e0bffd17 	ldw	r2,-12(fp)
  80ab94:	10800017 	ldw	r2,0(r2)
  80ab98:	10800104 	addi	r2,r2,4
  80ab9c:	1007883a 	mov	r3,r2
  80aba0:	e0bffd17 	ldw	r2,-12(fp)
  80aba4:	10800817 	ldw	r2,32(r2)
  80aba8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80abac:	e0bffe17 	ldw	r2,-8(fp)
  80abb0:	e0ffff17 	ldw	r3,-4(fp)
  80abb4:	d8000015 	stw	zero,0(sp)
  80abb8:	e1fffd17 	ldw	r7,-12(fp)
  80abbc:	01802074 	movhi	r6,129
  80abc0:	31ab0a04 	addi	r6,r6,-21464
  80abc4:	180b883a 	mov	r5,r3
  80abc8:	1009883a 	mov	r4,r2
  80abcc:	080cf300 	call	80cf30 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80abd0:	e0bffd17 	ldw	r2,-12(fp)
  80abd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80abd8:	e0bffd17 	ldw	r2,-12(fp)
  80abdc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80abe0:	d0e73517 	ldw	r3,-25388(gp)
  80abe4:	e1fffd17 	ldw	r7,-12(fp)
  80abe8:	01802074 	movhi	r6,129
  80abec:	31ab8d04 	addi	r6,r6,-20940
  80abf0:	180b883a 	mov	r5,r3
  80abf4:	1009883a 	mov	r4,r2
  80abf8:	0809b6c0 	call	809b6c <alt_alarm_start>
  80abfc:	1000040e 	bge	r2,zero,80ac10 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80ac00:	e0fffd17 	ldw	r3,-12(fp)
  80ac04:	00a00034 	movhi	r2,32768
  80ac08:	10bfffc4 	addi	r2,r2,-1
  80ac0c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80ac10:	0001883a 	nop
  80ac14:	e037883a 	mov	sp,fp
  80ac18:	dfc00117 	ldw	ra,4(sp)
  80ac1c:	df000017 	ldw	fp,0(sp)
  80ac20:	dec00204 	addi	sp,sp,8
  80ac24:	f800283a 	ret

0080ac28 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80ac28:	defff804 	addi	sp,sp,-32
  80ac2c:	df000715 	stw	fp,28(sp)
  80ac30:	df000704 	addi	fp,sp,28
  80ac34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ac38:	e0bfff17 	ldw	r2,-4(fp)
  80ac3c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80ac40:	e0bffb17 	ldw	r2,-20(fp)
  80ac44:	10800017 	ldw	r2,0(r2)
  80ac48:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ac4c:	e0bffc17 	ldw	r2,-16(fp)
  80ac50:	10800104 	addi	r2,r2,4
  80ac54:	10800037 	ldwio	r2,0(r2)
  80ac58:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ac5c:	e0bffd17 	ldw	r2,-12(fp)
  80ac60:	1080c00c 	andi	r2,r2,768
  80ac64:	10006d26 	beq	r2,zero,80ae1c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ac68:	e0bffd17 	ldw	r2,-12(fp)
  80ac6c:	1080400c 	andi	r2,r2,256
  80ac70:	10003526 	beq	r2,zero,80ad48 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ac74:	00800074 	movhi	r2,1
  80ac78:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ac7c:	e0bffb17 	ldw	r2,-20(fp)
  80ac80:	10800a17 	ldw	r2,40(r2)
  80ac84:	10800044 	addi	r2,r2,1
  80ac88:	1081ffcc 	andi	r2,r2,2047
  80ac8c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80ac90:	e0bffb17 	ldw	r2,-20(fp)
  80ac94:	10c00b17 	ldw	r3,44(r2)
  80ac98:	e0bffe17 	ldw	r2,-8(fp)
  80ac9c:	18801526 	beq	r3,r2,80acf4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80aca0:	e0bffc17 	ldw	r2,-16(fp)
  80aca4:	10800037 	ldwio	r2,0(r2)
  80aca8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80acac:	e0bff917 	ldw	r2,-28(fp)
  80acb0:	10a0000c 	andi	r2,r2,32768
  80acb4:	10001126 	beq	r2,zero,80acfc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80acb8:	e0bffb17 	ldw	r2,-20(fp)
  80acbc:	10800a17 	ldw	r2,40(r2)
  80acc0:	e0fff917 	ldw	r3,-28(fp)
  80acc4:	1809883a 	mov	r4,r3
  80acc8:	e0fffb17 	ldw	r3,-20(fp)
  80accc:	1885883a 	add	r2,r3,r2
  80acd0:	10800e04 	addi	r2,r2,56
  80acd4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80acd8:	e0bffb17 	ldw	r2,-20(fp)
  80acdc:	10800a17 	ldw	r2,40(r2)
  80ace0:	10800044 	addi	r2,r2,1
  80ace4:	10c1ffcc 	andi	r3,r2,2047
  80ace8:	e0bffb17 	ldw	r2,-20(fp)
  80acec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80acf0:	003fe206 	br	80ac7c <__alt_mem_onchip_mem+0xff802c7c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80acf4:	0001883a 	nop
  80acf8:	00000106 	br	80ad00 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80acfc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ad00:	e0bff917 	ldw	r2,-28(fp)
  80ad04:	10bfffec 	andhi	r2,r2,65535
  80ad08:	10000f26 	beq	r2,zero,80ad48 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ad0c:	e0bffb17 	ldw	r2,-20(fp)
  80ad10:	10c00817 	ldw	r3,32(r2)
  80ad14:	00bfff84 	movi	r2,-2
  80ad18:	1886703a 	and	r3,r3,r2
  80ad1c:	e0bffb17 	ldw	r2,-20(fp)
  80ad20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80ad24:	e0bffc17 	ldw	r2,-16(fp)
  80ad28:	10800104 	addi	r2,r2,4
  80ad2c:	1007883a 	mov	r3,r2
  80ad30:	e0bffb17 	ldw	r2,-20(fp)
  80ad34:	10800817 	ldw	r2,32(r2)
  80ad38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ad3c:	e0bffc17 	ldw	r2,-16(fp)
  80ad40:	10800104 	addi	r2,r2,4
  80ad44:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80ad48:	e0bffd17 	ldw	r2,-12(fp)
  80ad4c:	1080800c 	andi	r2,r2,512
  80ad50:	103fbe26 	beq	r2,zero,80ac4c <__alt_mem_onchip_mem+0xff802c4c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80ad54:	e0bffd17 	ldw	r2,-12(fp)
  80ad58:	1004d43a 	srli	r2,r2,16
  80ad5c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ad60:	00001406 	br	80adb4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80ad64:	e0bffc17 	ldw	r2,-16(fp)
  80ad68:	e0fffb17 	ldw	r3,-20(fp)
  80ad6c:	18c00d17 	ldw	r3,52(r3)
  80ad70:	e13ffb17 	ldw	r4,-20(fp)
  80ad74:	20c7883a 	add	r3,r4,r3
  80ad78:	18c20e04 	addi	r3,r3,2104
  80ad7c:	18c00003 	ldbu	r3,0(r3)
  80ad80:	18c03fcc 	andi	r3,r3,255
  80ad84:	18c0201c 	xori	r3,r3,128
  80ad88:	18ffe004 	addi	r3,r3,-128
  80ad8c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ad90:	e0bffb17 	ldw	r2,-20(fp)
  80ad94:	10800d17 	ldw	r2,52(r2)
  80ad98:	10800044 	addi	r2,r2,1
  80ad9c:	10c1ffcc 	andi	r3,r2,2047
  80ada0:	e0bffb17 	ldw	r2,-20(fp)
  80ada4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80ada8:	e0bffa17 	ldw	r2,-24(fp)
  80adac:	10bfffc4 	addi	r2,r2,-1
  80adb0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80adb4:	e0bffa17 	ldw	r2,-24(fp)
  80adb8:	10000526 	beq	r2,zero,80add0 <altera_avalon_jtag_uart_irq+0x1a8>
  80adbc:	e0bffb17 	ldw	r2,-20(fp)
  80adc0:	10c00d17 	ldw	r3,52(r2)
  80adc4:	e0bffb17 	ldw	r2,-20(fp)
  80adc8:	10800c17 	ldw	r2,48(r2)
  80adcc:	18bfe51e 	bne	r3,r2,80ad64 <__alt_mem_onchip_mem+0xff802d64>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80add0:	e0bffa17 	ldw	r2,-24(fp)
  80add4:	103f9d26 	beq	r2,zero,80ac4c <__alt_mem_onchip_mem+0xff802c4c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80add8:	e0bffb17 	ldw	r2,-20(fp)
  80addc:	10c00817 	ldw	r3,32(r2)
  80ade0:	00bfff44 	movi	r2,-3
  80ade4:	1886703a 	and	r3,r3,r2
  80ade8:	e0bffb17 	ldw	r2,-20(fp)
  80adec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80adf0:	e0bffb17 	ldw	r2,-20(fp)
  80adf4:	10800017 	ldw	r2,0(r2)
  80adf8:	10800104 	addi	r2,r2,4
  80adfc:	1007883a 	mov	r3,r2
  80ae00:	e0bffb17 	ldw	r2,-20(fp)
  80ae04:	10800817 	ldw	r2,32(r2)
  80ae08:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ae0c:	e0bffc17 	ldw	r2,-16(fp)
  80ae10:	10800104 	addi	r2,r2,4
  80ae14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80ae18:	003f8c06 	br	80ac4c <__alt_mem_onchip_mem+0xff802c4c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80ae1c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80ae20:	0001883a 	nop
  80ae24:	e037883a 	mov	sp,fp
  80ae28:	df000017 	ldw	fp,0(sp)
  80ae2c:	dec00104 	addi	sp,sp,4
  80ae30:	f800283a 	ret

0080ae34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80ae34:	defff804 	addi	sp,sp,-32
  80ae38:	df000715 	stw	fp,28(sp)
  80ae3c:	df000704 	addi	fp,sp,28
  80ae40:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80ae44:	e0bffb17 	ldw	r2,-20(fp)
  80ae48:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80ae4c:	e0bff917 	ldw	r2,-28(fp)
  80ae50:	10800017 	ldw	r2,0(r2)
  80ae54:	10800104 	addi	r2,r2,4
  80ae58:	10800037 	ldwio	r2,0(r2)
  80ae5c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ae60:	e0bffa17 	ldw	r2,-24(fp)
  80ae64:	1081000c 	andi	r2,r2,1024
  80ae68:	10000b26 	beq	r2,zero,80ae98 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ae6c:	e0bff917 	ldw	r2,-28(fp)
  80ae70:	10800017 	ldw	r2,0(r2)
  80ae74:	10800104 	addi	r2,r2,4
  80ae78:	1007883a 	mov	r3,r2
  80ae7c:	e0bff917 	ldw	r2,-28(fp)
  80ae80:	10800817 	ldw	r2,32(r2)
  80ae84:	10810014 	ori	r2,r2,1024
  80ae88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80ae8c:	e0bff917 	ldw	r2,-28(fp)
  80ae90:	10000915 	stw	zero,36(r2)
  80ae94:	00000a06 	br	80aec0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ae98:	e0bff917 	ldw	r2,-28(fp)
  80ae9c:	10c00917 	ldw	r3,36(r2)
  80aea0:	00a00034 	movhi	r2,32768
  80aea4:	10bfff04 	addi	r2,r2,-4
  80aea8:	10c00536 	bltu	r2,r3,80aec0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80aeac:	e0bff917 	ldw	r2,-28(fp)
  80aeb0:	10800917 	ldw	r2,36(r2)
  80aeb4:	10c00044 	addi	r3,r2,1
  80aeb8:	e0bff917 	ldw	r2,-28(fp)
  80aebc:	10c00915 	stw	r3,36(r2)
  80aec0:	d0a73517 	ldw	r2,-25388(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80aec4:	e037883a 	mov	sp,fp
  80aec8:	df000017 	ldw	fp,0(sp)
  80aecc:	dec00104 	addi	sp,sp,4
  80aed0:	f800283a 	ret

0080aed4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80aed4:	defffd04 	addi	sp,sp,-12
  80aed8:	df000215 	stw	fp,8(sp)
  80aedc:	df000204 	addi	fp,sp,8
  80aee0:	e13ffe15 	stw	r4,-8(fp)
  80aee4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80aee8:	00000506 	br	80af00 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80aeec:	e0bfff17 	ldw	r2,-4(fp)
  80aef0:	1090000c 	andi	r2,r2,16384
  80aef4:	10000226 	beq	r2,zero,80af00 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80aef8:	00bffd44 	movi	r2,-11
  80aefc:	00000b06 	br	80af2c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80af00:	e0bffe17 	ldw	r2,-8(fp)
  80af04:	10c00d17 	ldw	r3,52(r2)
  80af08:	e0bffe17 	ldw	r2,-8(fp)
  80af0c:	10800c17 	ldw	r2,48(r2)
  80af10:	18800526 	beq	r3,r2,80af28 <altera_avalon_jtag_uart_close+0x54>
  80af14:	e0bffe17 	ldw	r2,-8(fp)
  80af18:	10c00917 	ldw	r3,36(r2)
  80af1c:	e0bffe17 	ldw	r2,-8(fp)
  80af20:	10800117 	ldw	r2,4(r2)
  80af24:	18bff136 	bltu	r3,r2,80aeec <__alt_mem_onchip_mem+0xff802eec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80af28:	0005883a 	mov	r2,zero
}
  80af2c:	e037883a 	mov	sp,fp
  80af30:	df000017 	ldw	fp,0(sp)
  80af34:	dec00104 	addi	sp,sp,4
  80af38:	f800283a 	ret

0080af3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80af3c:	defffa04 	addi	sp,sp,-24
  80af40:	df000515 	stw	fp,20(sp)
  80af44:	df000504 	addi	fp,sp,20
  80af48:	e13ffd15 	stw	r4,-12(fp)
  80af4c:	e17ffe15 	stw	r5,-8(fp)
  80af50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80af54:	00bff9c4 	movi	r2,-25
  80af58:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80af5c:	e0bffe17 	ldw	r2,-8(fp)
  80af60:	10da8060 	cmpeqi	r3,r2,27137
  80af64:	1800031e 	bne	r3,zero,80af74 <altera_avalon_jtag_uart_ioctl+0x38>
  80af68:	109a80a0 	cmpeqi	r2,r2,27138
  80af6c:	1000181e 	bne	r2,zero,80afd0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80af70:	00002906 	br	80b018 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80af74:	e0bffd17 	ldw	r2,-12(fp)
  80af78:	10c00117 	ldw	r3,4(r2)
  80af7c:	00a00034 	movhi	r2,32768
  80af80:	10bfffc4 	addi	r2,r2,-1
  80af84:	18802126 	beq	r3,r2,80b00c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80af88:	e0bfff17 	ldw	r2,-4(fp)
  80af8c:	10800017 	ldw	r2,0(r2)
  80af90:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80af94:	e0bffc17 	ldw	r2,-16(fp)
  80af98:	10800090 	cmplti	r2,r2,2
  80af9c:	1000061e 	bne	r2,zero,80afb8 <altera_avalon_jtag_uart_ioctl+0x7c>
  80afa0:	e0fffc17 	ldw	r3,-16(fp)
  80afa4:	00a00034 	movhi	r2,32768
  80afa8:	10bfffc4 	addi	r2,r2,-1
  80afac:	18800226 	beq	r3,r2,80afb8 <altera_avalon_jtag_uart_ioctl+0x7c>
  80afb0:	e0bffc17 	ldw	r2,-16(fp)
  80afb4:	00000206 	br	80afc0 <altera_avalon_jtag_uart_ioctl+0x84>
  80afb8:	00a00034 	movhi	r2,32768
  80afbc:	10bfff84 	addi	r2,r2,-2
  80afc0:	e0fffd17 	ldw	r3,-12(fp)
  80afc4:	18800115 	stw	r2,4(r3)
      rc = 0;
  80afc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80afcc:	00000f06 	br	80b00c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80afd0:	e0bffd17 	ldw	r2,-12(fp)
  80afd4:	10c00117 	ldw	r3,4(r2)
  80afd8:	00a00034 	movhi	r2,32768
  80afdc:	10bfffc4 	addi	r2,r2,-1
  80afe0:	18800c26 	beq	r3,r2,80b014 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80afe4:	e0bffd17 	ldw	r2,-12(fp)
  80afe8:	10c00917 	ldw	r3,36(r2)
  80afec:	e0bffd17 	ldw	r2,-12(fp)
  80aff0:	10800117 	ldw	r2,4(r2)
  80aff4:	1885803a 	cmpltu	r2,r3,r2
  80aff8:	10c03fcc 	andi	r3,r2,255
  80affc:	e0bfff17 	ldw	r2,-4(fp)
  80b000:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80b004:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80b008:	00000206 	br	80b014 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80b00c:	0001883a 	nop
  80b010:	00000106 	br	80b018 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80b014:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80b018:	e0bffb17 	ldw	r2,-20(fp)
}
  80b01c:	e037883a 	mov	sp,fp
  80b020:	df000017 	ldw	fp,0(sp)
  80b024:	dec00104 	addi	sp,sp,4
  80b028:	f800283a 	ret

0080b02c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b02c:	defff304 	addi	sp,sp,-52
  80b030:	dfc00c15 	stw	ra,48(sp)
  80b034:	df000b15 	stw	fp,44(sp)
  80b038:	df000b04 	addi	fp,sp,44
  80b03c:	e13ffc15 	stw	r4,-16(fp)
  80b040:	e17ffd15 	stw	r5,-12(fp)
  80b044:	e1bffe15 	stw	r6,-8(fp)
  80b048:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80b04c:	e0bffd17 	ldw	r2,-12(fp)
  80b050:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b054:	00004706 	br	80b174 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b058:	e0bffc17 	ldw	r2,-16(fp)
  80b05c:	10800a17 	ldw	r2,40(r2)
  80b060:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80b064:	e0bffc17 	ldw	r2,-16(fp)
  80b068:	10800b17 	ldw	r2,44(r2)
  80b06c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80b070:	e0fff717 	ldw	r3,-36(fp)
  80b074:	e0bff817 	ldw	r2,-32(fp)
  80b078:	18800536 	bltu	r3,r2,80b090 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80b07c:	e0fff717 	ldw	r3,-36(fp)
  80b080:	e0bff817 	ldw	r2,-32(fp)
  80b084:	1885c83a 	sub	r2,r3,r2
  80b088:	e0bff615 	stw	r2,-40(fp)
  80b08c:	00000406 	br	80b0a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80b090:	00c20004 	movi	r3,2048
  80b094:	e0bff817 	ldw	r2,-32(fp)
  80b098:	1885c83a 	sub	r2,r3,r2
  80b09c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80b0a0:	e0bff617 	ldw	r2,-40(fp)
  80b0a4:	10001e26 	beq	r2,zero,80b120 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80b0a8:	e0fffe17 	ldw	r3,-8(fp)
  80b0ac:	e0bff617 	ldw	r2,-40(fp)
  80b0b0:	1880022e 	bgeu	r3,r2,80b0bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80b0b4:	e0bffe17 	ldw	r2,-8(fp)
  80b0b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80b0bc:	e0bffc17 	ldw	r2,-16(fp)
  80b0c0:	10c00e04 	addi	r3,r2,56
  80b0c4:	e0bff817 	ldw	r2,-32(fp)
  80b0c8:	1885883a 	add	r2,r3,r2
  80b0cc:	e1bff617 	ldw	r6,-40(fp)
  80b0d0:	100b883a 	mov	r5,r2
  80b0d4:	e13ff517 	ldw	r4,-44(fp)
  80b0d8:	0807f240 	call	807f24 <memcpy>
      ptr   += n;
  80b0dc:	e0fff517 	ldw	r3,-44(fp)
  80b0e0:	e0bff617 	ldw	r2,-40(fp)
  80b0e4:	1885883a 	add	r2,r3,r2
  80b0e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80b0ec:	e0fffe17 	ldw	r3,-8(fp)
  80b0f0:	e0bff617 	ldw	r2,-40(fp)
  80b0f4:	1885c83a 	sub	r2,r3,r2
  80b0f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b0fc:	e0fff817 	ldw	r3,-32(fp)
  80b100:	e0bff617 	ldw	r2,-40(fp)
  80b104:	1885883a 	add	r2,r3,r2
  80b108:	10c1ffcc 	andi	r3,r2,2047
  80b10c:	e0bffc17 	ldw	r2,-16(fp)
  80b110:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80b114:	e0bffe17 	ldw	r2,-8(fp)
  80b118:	00bfcf16 	blt	zero,r2,80b058 <__alt_mem_onchip_mem+0xff803058>
  80b11c:	00000106 	br	80b124 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80b120:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80b124:	e0fff517 	ldw	r3,-44(fp)
  80b128:	e0bffd17 	ldw	r2,-12(fp)
  80b12c:	1880141e 	bne	r3,r2,80b180 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b130:	e0bfff17 	ldw	r2,-4(fp)
  80b134:	1090000c 	andi	r2,r2,16384
  80b138:	1000131e 	bne	r2,zero,80b188 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80b13c:	0001883a 	nop
  80b140:	e0bffc17 	ldw	r2,-16(fp)
  80b144:	10c00a17 	ldw	r3,40(r2)
  80b148:	e0bff717 	ldw	r2,-36(fp)
  80b14c:	1880051e 	bne	r3,r2,80b164 <altera_avalon_jtag_uart_read+0x138>
  80b150:	e0bffc17 	ldw	r2,-16(fp)
  80b154:	10c00917 	ldw	r3,36(r2)
  80b158:	e0bffc17 	ldw	r2,-16(fp)
  80b15c:	10800117 	ldw	r2,4(r2)
  80b160:	18bff736 	bltu	r3,r2,80b140 <__alt_mem_onchip_mem+0xff803140>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80b164:	e0bffc17 	ldw	r2,-16(fp)
  80b168:	10c00a17 	ldw	r3,40(r2)
  80b16c:	e0bff717 	ldw	r2,-36(fp)
  80b170:	18800726 	beq	r3,r2,80b190 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b174:	e0bffe17 	ldw	r2,-8(fp)
  80b178:	00bfb716 	blt	zero,r2,80b058 <__alt_mem_onchip_mem+0xff803058>
  80b17c:	00000506 	br	80b194 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80b180:	0001883a 	nop
  80b184:	00000306 	br	80b194 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80b188:	0001883a 	nop
  80b18c:	00000106 	br	80b194 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80b190:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80b194:	e0fff517 	ldw	r3,-44(fp)
  80b198:	e0bffd17 	ldw	r2,-12(fp)
  80b19c:	18801826 	beq	r3,r2,80b200 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b1a0:	0005303a 	rdctl	r2,status
  80b1a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b1a8:	e0fffb17 	ldw	r3,-20(fp)
  80b1ac:	00bfff84 	movi	r2,-2
  80b1b0:	1884703a 	and	r2,r3,r2
  80b1b4:	1001703a 	wrctl	status,r2
  
  return context;
  80b1b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80b1bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b1c0:	e0bffc17 	ldw	r2,-16(fp)
  80b1c4:	10800817 	ldw	r2,32(r2)
  80b1c8:	10c00054 	ori	r3,r2,1
  80b1cc:	e0bffc17 	ldw	r2,-16(fp)
  80b1d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b1d4:	e0bffc17 	ldw	r2,-16(fp)
  80b1d8:	10800017 	ldw	r2,0(r2)
  80b1dc:	10800104 	addi	r2,r2,4
  80b1e0:	1007883a 	mov	r3,r2
  80b1e4:	e0bffc17 	ldw	r2,-16(fp)
  80b1e8:	10800817 	ldw	r2,32(r2)
  80b1ec:	18800035 	stwio	r2,0(r3)
  80b1f0:	e0bffa17 	ldw	r2,-24(fp)
  80b1f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b1f8:	e0bff917 	ldw	r2,-28(fp)
  80b1fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80b200:	e0fff517 	ldw	r3,-44(fp)
  80b204:	e0bffd17 	ldw	r2,-12(fp)
  80b208:	18800426 	beq	r3,r2,80b21c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80b20c:	e0fff517 	ldw	r3,-44(fp)
  80b210:	e0bffd17 	ldw	r2,-12(fp)
  80b214:	1885c83a 	sub	r2,r3,r2
  80b218:	00000606 	br	80b234 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80b21c:	e0bfff17 	ldw	r2,-4(fp)
  80b220:	1090000c 	andi	r2,r2,16384
  80b224:	10000226 	beq	r2,zero,80b230 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80b228:	00bffd44 	movi	r2,-11
  80b22c:	00000106 	br	80b234 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80b230:	00bffec4 	movi	r2,-5
}
  80b234:	e037883a 	mov	sp,fp
  80b238:	dfc00117 	ldw	ra,4(sp)
  80b23c:	df000017 	ldw	fp,0(sp)
  80b240:	dec00204 	addi	sp,sp,8
  80b244:	f800283a 	ret

0080b248 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80b248:	defff304 	addi	sp,sp,-52
  80b24c:	dfc00c15 	stw	ra,48(sp)
  80b250:	df000b15 	stw	fp,44(sp)
  80b254:	df000b04 	addi	fp,sp,44
  80b258:	e13ffc15 	stw	r4,-16(fp)
  80b25c:	e17ffd15 	stw	r5,-12(fp)
  80b260:	e1bffe15 	stw	r6,-8(fp)
  80b264:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80b268:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80b26c:	e0bffd17 	ldw	r2,-12(fp)
  80b270:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b274:	00003706 	br	80b354 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80b278:	e0bffc17 	ldw	r2,-16(fp)
  80b27c:	10800c17 	ldw	r2,48(r2)
  80b280:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80b284:	e0bffc17 	ldw	r2,-16(fp)
  80b288:	10800d17 	ldw	r2,52(r2)
  80b28c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80b290:	e0fff917 	ldw	r3,-28(fp)
  80b294:	e0bff517 	ldw	r2,-44(fp)
  80b298:	1880062e 	bgeu	r3,r2,80b2b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80b29c:	e0fff517 	ldw	r3,-44(fp)
  80b2a0:	e0bff917 	ldw	r2,-28(fp)
  80b2a4:	1885c83a 	sub	r2,r3,r2
  80b2a8:	10bfffc4 	addi	r2,r2,-1
  80b2ac:	e0bff615 	stw	r2,-40(fp)
  80b2b0:	00000b06 	br	80b2e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80b2b4:	e0bff517 	ldw	r2,-44(fp)
  80b2b8:	10000526 	beq	r2,zero,80b2d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80b2bc:	00c20004 	movi	r3,2048
  80b2c0:	e0bff917 	ldw	r2,-28(fp)
  80b2c4:	1885c83a 	sub	r2,r3,r2
  80b2c8:	e0bff615 	stw	r2,-40(fp)
  80b2cc:	00000406 	br	80b2e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80b2d0:	00c1ffc4 	movi	r3,2047
  80b2d4:	e0bff917 	ldw	r2,-28(fp)
  80b2d8:	1885c83a 	sub	r2,r3,r2
  80b2dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80b2e0:	e0bff617 	ldw	r2,-40(fp)
  80b2e4:	10001e26 	beq	r2,zero,80b360 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80b2e8:	e0fffe17 	ldw	r3,-8(fp)
  80b2ec:	e0bff617 	ldw	r2,-40(fp)
  80b2f0:	1880022e 	bgeu	r3,r2,80b2fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80b2f4:	e0bffe17 	ldw	r2,-8(fp)
  80b2f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80b2fc:	e0bffc17 	ldw	r2,-16(fp)
  80b300:	10c20e04 	addi	r3,r2,2104
  80b304:	e0bff917 	ldw	r2,-28(fp)
  80b308:	1885883a 	add	r2,r3,r2
  80b30c:	e1bff617 	ldw	r6,-40(fp)
  80b310:	e17ffd17 	ldw	r5,-12(fp)
  80b314:	1009883a 	mov	r4,r2
  80b318:	0807f240 	call	807f24 <memcpy>
      ptr   += n;
  80b31c:	e0fffd17 	ldw	r3,-12(fp)
  80b320:	e0bff617 	ldw	r2,-40(fp)
  80b324:	1885883a 	add	r2,r3,r2
  80b328:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80b32c:	e0fffe17 	ldw	r3,-8(fp)
  80b330:	e0bff617 	ldw	r2,-40(fp)
  80b334:	1885c83a 	sub	r2,r3,r2
  80b338:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b33c:	e0fff917 	ldw	r3,-28(fp)
  80b340:	e0bff617 	ldw	r2,-40(fp)
  80b344:	1885883a 	add	r2,r3,r2
  80b348:	10c1ffcc 	andi	r3,r2,2047
  80b34c:	e0bffc17 	ldw	r2,-16(fp)
  80b350:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b354:	e0bffe17 	ldw	r2,-8(fp)
  80b358:	00bfc716 	blt	zero,r2,80b278 <__alt_mem_onchip_mem+0xff803278>
  80b35c:	00000106 	br	80b364 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80b360:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b364:	0005303a 	rdctl	r2,status
  80b368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b36c:	e0fffb17 	ldw	r3,-20(fp)
  80b370:	00bfff84 	movi	r2,-2
  80b374:	1884703a 	and	r2,r3,r2
  80b378:	1001703a 	wrctl	status,r2
  
  return context;
  80b37c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80b380:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b384:	e0bffc17 	ldw	r2,-16(fp)
  80b388:	10800817 	ldw	r2,32(r2)
  80b38c:	10c00094 	ori	r3,r2,2
  80b390:	e0bffc17 	ldw	r2,-16(fp)
  80b394:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b398:	e0bffc17 	ldw	r2,-16(fp)
  80b39c:	10800017 	ldw	r2,0(r2)
  80b3a0:	10800104 	addi	r2,r2,4
  80b3a4:	1007883a 	mov	r3,r2
  80b3a8:	e0bffc17 	ldw	r2,-16(fp)
  80b3ac:	10800817 	ldw	r2,32(r2)
  80b3b0:	18800035 	stwio	r2,0(r3)
  80b3b4:	e0bffa17 	ldw	r2,-24(fp)
  80b3b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b3bc:	e0bff817 	ldw	r2,-32(fp)
  80b3c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80b3c4:	e0bffe17 	ldw	r2,-8(fp)
  80b3c8:	0080100e 	bge	zero,r2,80b40c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80b3cc:	e0bfff17 	ldw	r2,-4(fp)
  80b3d0:	1090000c 	andi	r2,r2,16384
  80b3d4:	1000101e 	bne	r2,zero,80b418 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80b3d8:	0001883a 	nop
  80b3dc:	e0bffc17 	ldw	r2,-16(fp)
  80b3e0:	10c00d17 	ldw	r3,52(r2)
  80b3e4:	e0bff517 	ldw	r2,-44(fp)
  80b3e8:	1880051e 	bne	r3,r2,80b400 <altera_avalon_jtag_uart_write+0x1b8>
  80b3ec:	e0bffc17 	ldw	r2,-16(fp)
  80b3f0:	10c00917 	ldw	r3,36(r2)
  80b3f4:	e0bffc17 	ldw	r2,-16(fp)
  80b3f8:	10800117 	ldw	r2,4(r2)
  80b3fc:	18bff736 	bltu	r3,r2,80b3dc <__alt_mem_onchip_mem+0xff8033dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80b400:	e0bffc17 	ldw	r2,-16(fp)
  80b404:	10800917 	ldw	r2,36(r2)
  80b408:	1000051e 	bne	r2,zero,80b420 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80b40c:	e0bffe17 	ldw	r2,-8(fp)
  80b410:	00bfd016 	blt	zero,r2,80b354 <__alt_mem_onchip_mem+0xff803354>
  80b414:	00000306 	br	80b424 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80b418:	0001883a 	nop
  80b41c:	00000106 	br	80b424 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80b420:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80b424:	e0fffd17 	ldw	r3,-12(fp)
  80b428:	e0bff717 	ldw	r2,-36(fp)
  80b42c:	18800426 	beq	r3,r2,80b440 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80b430:	e0fffd17 	ldw	r3,-12(fp)
  80b434:	e0bff717 	ldw	r2,-36(fp)
  80b438:	1885c83a 	sub	r2,r3,r2
  80b43c:	00000606 	br	80b458 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80b440:	e0bfff17 	ldw	r2,-4(fp)
  80b444:	1090000c 	andi	r2,r2,16384
  80b448:	10000226 	beq	r2,zero,80b454 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80b44c:	00bffd44 	movi	r2,-11
  80b450:	00000106 	br	80b458 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80b454:	00bffec4 	movi	r2,-5
}
  80b458:	e037883a 	mov	sp,fp
  80b45c:	dfc00117 	ldw	ra,4(sp)
  80b460:	df000017 	ldw	fp,0(sp)
  80b464:	dec00204 	addi	sp,sp,8
  80b468:	f800283a 	ret

0080b46c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80b46c:	defffa04 	addi	sp,sp,-24
  80b470:	dfc00515 	stw	ra,20(sp)
  80b474:	df000415 	stw	fp,16(sp)
  80b478:	df000404 	addi	fp,sp,16
  80b47c:	e13ffe15 	stw	r4,-8(fp)
  80b480:	2805883a 	mov	r2,r5
  80b484:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80b488:	e0bffe17 	ldw	r2,-8(fp)
  80b48c:	10800017 	ldw	r2,0(r2)
  80b490:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80b494:	008003f4 	movhi	r2,15
  80b498:	10909004 	addi	r2,r2,16960
  80b49c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80b4a0:	e0bffe17 	ldw	r2,-8(fp)
  80b4a4:	10800803 	ldbu	r2,32(r2)
  80b4a8:	10803fcc 	andi	r2,r2,255
  80b4ac:	1080201c 	xori	r2,r2,128
  80b4b0:	10bfe004 	addi	r2,r2,-128
  80b4b4:	1000151e 	bne	r2,zero,80b50c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80b4b8:	00000906 	br	80b4e0 <lcd_write_command+0x74>
    if (--i == 0)
  80b4bc:	e0bffc17 	ldw	r2,-16(fp)
  80b4c0:	10bfffc4 	addi	r2,r2,-1
  80b4c4:	e0bffc15 	stw	r2,-16(fp)
  80b4c8:	e0bffc17 	ldw	r2,-16(fp)
  80b4cc:	1000041e 	bne	r2,zero,80b4e0 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80b4d0:	e0bffe17 	ldw	r2,-8(fp)
  80b4d4:	00c00044 	movi	r3,1
  80b4d8:	10c00805 	stb	r3,32(r2)
      return;
  80b4dc:	00000c06 	br	80b510 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80b4e0:	e0bffd17 	ldw	r2,-12(fp)
  80b4e4:	10800104 	addi	r2,r2,4
  80b4e8:	10800037 	ldwio	r2,0(r2)
  80b4ec:	1080200c 	andi	r2,r2,128
  80b4f0:	103ff21e 	bne	r2,zero,80b4bc <__alt_mem_onchip_mem+0xff8034bc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80b4f4:	01001904 	movi	r4,100
  80b4f8:	080d5640 	call	80d564 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80b4fc:	e0bffd17 	ldw	r2,-12(fp)
  80b500:	e0ffff03 	ldbu	r3,-4(fp)
  80b504:	10c00035 	stwio	r3,0(r2)
  80b508:	00000106 	br	80b510 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80b50c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80b510:	e037883a 	mov	sp,fp
  80b514:	dfc00117 	ldw	ra,4(sp)
  80b518:	df000017 	ldw	fp,0(sp)
  80b51c:	dec00204 	addi	sp,sp,8
  80b520:	f800283a 	ret

0080b524 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80b524:	defffa04 	addi	sp,sp,-24
  80b528:	dfc00515 	stw	ra,20(sp)
  80b52c:	df000415 	stw	fp,16(sp)
  80b530:	df000404 	addi	fp,sp,16
  80b534:	e13ffe15 	stw	r4,-8(fp)
  80b538:	2805883a 	mov	r2,r5
  80b53c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80b540:	e0bffe17 	ldw	r2,-8(fp)
  80b544:	10800017 	ldw	r2,0(r2)
  80b548:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80b54c:	008003f4 	movhi	r2,15
  80b550:	10909004 	addi	r2,r2,16960
  80b554:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80b558:	e0bffe17 	ldw	r2,-8(fp)
  80b55c:	10800803 	ldbu	r2,32(r2)
  80b560:	10803fcc 	andi	r2,r2,255
  80b564:	1080201c 	xori	r2,r2,128
  80b568:	10bfe004 	addi	r2,r2,-128
  80b56c:	10001d1e 	bne	r2,zero,80b5e4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80b570:	00000906 	br	80b598 <lcd_write_data+0x74>
    if (--i == 0)
  80b574:	e0bffc17 	ldw	r2,-16(fp)
  80b578:	10bfffc4 	addi	r2,r2,-1
  80b57c:	e0bffc15 	stw	r2,-16(fp)
  80b580:	e0bffc17 	ldw	r2,-16(fp)
  80b584:	1000041e 	bne	r2,zero,80b598 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80b588:	e0bffe17 	ldw	r2,-8(fp)
  80b58c:	00c00044 	movi	r3,1
  80b590:	10c00805 	stb	r3,32(r2)
      return;
  80b594:	00001406 	br	80b5e8 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80b598:	e0bffd17 	ldw	r2,-12(fp)
  80b59c:	10800104 	addi	r2,r2,4
  80b5a0:	10800037 	ldwio	r2,0(r2)
  80b5a4:	1080200c 	andi	r2,r2,128
  80b5a8:	103ff21e 	bne	r2,zero,80b574 <__alt_mem_onchip_mem+0xff803574>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80b5ac:	01001904 	movi	r4,100
  80b5b0:	080d5640 	call	80d564 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80b5b4:	e0bffd17 	ldw	r2,-12(fp)
  80b5b8:	10800204 	addi	r2,r2,8
  80b5bc:	1007883a 	mov	r3,r2
  80b5c0:	e0bfff03 	ldbu	r2,-4(fp)
  80b5c4:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80b5c8:	e0bffe17 	ldw	r2,-8(fp)
  80b5cc:	108008c3 	ldbu	r2,35(r2)
  80b5d0:	10800044 	addi	r2,r2,1
  80b5d4:	1007883a 	mov	r3,r2
  80b5d8:	e0bffe17 	ldw	r2,-8(fp)
  80b5dc:	10c008c5 	stb	r3,35(r2)
  80b5e0:	00000106 	br	80b5e8 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80b5e4:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80b5e8:	e037883a 	mov	sp,fp
  80b5ec:	dfc00117 	ldw	ra,4(sp)
  80b5f0:	df000017 	ldw	fp,0(sp)
  80b5f4:	dec00204 	addi	sp,sp,8
  80b5f8:	f800283a 	ret

0080b5fc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80b5fc:	defffc04 	addi	sp,sp,-16
  80b600:	dfc00315 	stw	ra,12(sp)
  80b604:	df000215 	stw	fp,8(sp)
  80b608:	df000204 	addi	fp,sp,8
  80b60c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80b610:	01400044 	movi	r5,1
  80b614:	e13fff17 	ldw	r4,-4(fp)
  80b618:	080b46c0 	call	80b46c <lcd_write_command>

  sp->x = 0;
  80b61c:	e0bfff17 	ldw	r2,-4(fp)
  80b620:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80b624:	e0bfff17 	ldw	r2,-4(fp)
  80b628:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80b62c:	e0bfff17 	ldw	r2,-4(fp)
  80b630:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b634:	e03ffe15 	stw	zero,-8(fp)
  80b638:	00001b06 	br	80b6a8 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80b63c:	e0bffe17 	ldw	r2,-8(fp)
  80b640:	108018e4 	muli	r2,r2,99
  80b644:	10801004 	addi	r2,r2,64
  80b648:	e0ffff17 	ldw	r3,-4(fp)
  80b64c:	1885883a 	add	r2,r3,r2
  80b650:	01801444 	movi	r6,81
  80b654:	01400804 	movi	r5,32
  80b658:	1009883a 	mov	r4,r2
  80b65c:	08081c80 	call	8081c8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80b660:	e0bffe17 	ldw	r2,-8(fp)
  80b664:	108018e4 	muli	r2,r2,99
  80b668:	10800c04 	addi	r2,r2,48
  80b66c:	e0ffff17 	ldw	r3,-4(fp)
  80b670:	1885883a 	add	r2,r3,r2
  80b674:	01800404 	movi	r6,16
  80b678:	01400804 	movi	r5,32
  80b67c:	1009883a 	mov	r4,r2
  80b680:	08081c80 	call	8081c8 <memset>
    sp->line[y].width = 0;
  80b684:	e0ffff17 	ldw	r3,-4(fp)
  80b688:	e0bffe17 	ldw	r2,-8(fp)
  80b68c:	108018e4 	muli	r2,r2,99
  80b690:	1885883a 	add	r2,r3,r2
  80b694:	10802444 	addi	r2,r2,145
  80b698:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b69c:	e0bffe17 	ldw	r2,-8(fp)
  80b6a0:	10800044 	addi	r2,r2,1
  80b6a4:	e0bffe15 	stw	r2,-8(fp)
  80b6a8:	e0bffe17 	ldw	r2,-8(fp)
  80b6ac:	10800090 	cmplti	r2,r2,2
  80b6b0:	103fe21e 	bne	r2,zero,80b63c <__alt_mem_onchip_mem+0xff80363c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80b6b4:	0001883a 	nop
  80b6b8:	e037883a 	mov	sp,fp
  80b6bc:	dfc00117 	ldw	ra,4(sp)
  80b6c0:	df000017 	ldw	fp,0(sp)
  80b6c4:	dec00204 	addi	sp,sp,8
  80b6c8:	f800283a 	ret

0080b6cc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80b6cc:	defff704 	addi	sp,sp,-36
  80b6d0:	dfc00815 	stw	ra,32(sp)
  80b6d4:	df000715 	stw	fp,28(sp)
  80b6d8:	df000704 	addi	fp,sp,28
  80b6dc:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80b6e0:	e0bfff17 	ldw	r2,-4(fp)
  80b6e4:	10800943 	ldbu	r2,37(r2)
  80b6e8:	10803fcc 	andi	r2,r2,255
  80b6ec:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b6f0:	e03ff915 	stw	zero,-28(fp)
  80b6f4:	00006706 	br	80b894 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80b6f8:	e0ffff17 	ldw	r3,-4(fp)
  80b6fc:	e0bff917 	ldw	r2,-28(fp)
  80b700:	108018e4 	muli	r2,r2,99
  80b704:	1885883a 	add	r2,r3,r2
  80b708:	10802444 	addi	r2,r2,145
  80b70c:	10800003 	ldbu	r2,0(r2)
  80b710:	10803fcc 	andi	r2,r2,255
  80b714:	1080201c 	xori	r2,r2,128
  80b718:	10bfe004 	addi	r2,r2,-128
  80b71c:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80b720:	e0ffff17 	ldw	r3,-4(fp)
  80b724:	e0bff917 	ldw	r2,-28(fp)
  80b728:	108018e4 	muli	r2,r2,99
  80b72c:	1885883a 	add	r2,r3,r2
  80b730:	10802484 	addi	r2,r2,146
  80b734:	10800003 	ldbu	r2,0(r2)
  80b738:	10c03fcc 	andi	r3,r2,255
  80b73c:	e0bffc17 	ldw	r2,-16(fp)
  80b740:	1885383a 	mul	r2,r3,r2
  80b744:	1005d23a 	srai	r2,r2,8
  80b748:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80b74c:	e0fffb17 	ldw	r3,-20(fp)
  80b750:	e0bffd17 	ldw	r2,-12(fp)
  80b754:	18800116 	blt	r3,r2,80b75c <lcd_repaint_screen+0x90>
      offset = 0;
  80b758:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80b75c:	e03ffa15 	stw	zero,-24(fp)
  80b760:	00004606 	br	80b87c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80b764:	e0fffa17 	ldw	r3,-24(fp)
  80b768:	e0bffb17 	ldw	r2,-20(fp)
  80b76c:	1885883a 	add	r2,r3,r2
  80b770:	e17ffd17 	ldw	r5,-12(fp)
  80b774:	1009883a 	mov	r4,r2
  80b778:	0809a3c0 	call	809a3c <__modsi3>
  80b77c:	1009883a 	mov	r4,r2
  80b780:	e0ffff17 	ldw	r3,-4(fp)
  80b784:	e0bff917 	ldw	r2,-28(fp)
  80b788:	108018e4 	muli	r2,r2,99
  80b78c:	1885883a 	add	r2,r3,r2
  80b790:	1105883a 	add	r2,r2,r4
  80b794:	10801004 	addi	r2,r2,64
  80b798:	10800003 	ldbu	r2,0(r2)
  80b79c:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80b7a0:	e0ffff17 	ldw	r3,-4(fp)
  80b7a4:	e0bff917 	ldw	r2,-28(fp)
  80b7a8:	108018e4 	muli	r2,r2,99
  80b7ac:	1887883a 	add	r3,r3,r2
  80b7b0:	e0bffa17 	ldw	r2,-24(fp)
  80b7b4:	1885883a 	add	r2,r3,r2
  80b7b8:	10800c04 	addi	r2,r2,48
  80b7bc:	10800003 	ldbu	r2,0(r2)
  80b7c0:	10c03fcc 	andi	r3,r2,255
  80b7c4:	18c0201c 	xori	r3,r3,128
  80b7c8:	18ffe004 	addi	r3,r3,-128
  80b7cc:	e0bffe07 	ldb	r2,-8(fp)
  80b7d0:	18802726 	beq	r3,r2,80b870 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80b7d4:	e0fff917 	ldw	r3,-28(fp)
  80b7d8:	d0a00e04 	addi	r2,gp,-32712
  80b7dc:	1885883a 	add	r2,r3,r2
  80b7e0:	10800003 	ldbu	r2,0(r2)
  80b7e4:	1007883a 	mov	r3,r2
  80b7e8:	e0bffa17 	ldw	r2,-24(fp)
  80b7ec:	1885883a 	add	r2,r3,r2
  80b7f0:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80b7f4:	e0fffe43 	ldbu	r3,-7(fp)
  80b7f8:	e0bfff17 	ldw	r2,-4(fp)
  80b7fc:	108008c3 	ldbu	r2,35(r2)
  80b800:	10803fcc 	andi	r2,r2,255
  80b804:	1080201c 	xori	r2,r2,128
  80b808:	10bfe004 	addi	r2,r2,-128
  80b80c:	18800a26 	beq	r3,r2,80b838 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80b810:	e0fffe43 	ldbu	r3,-7(fp)
  80b814:	00bfe004 	movi	r2,-128
  80b818:	1884b03a 	or	r2,r3,r2
  80b81c:	10803fcc 	andi	r2,r2,255
  80b820:	100b883a 	mov	r5,r2
  80b824:	e13fff17 	ldw	r4,-4(fp)
  80b828:	080b46c0 	call	80b46c <lcd_write_command>
          sp->address = address;
  80b82c:	e0fffe43 	ldbu	r3,-7(fp)
  80b830:	e0bfff17 	ldw	r2,-4(fp)
  80b834:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80b838:	e0bffe03 	ldbu	r2,-8(fp)
  80b83c:	10803fcc 	andi	r2,r2,255
  80b840:	100b883a 	mov	r5,r2
  80b844:	e13fff17 	ldw	r4,-4(fp)
  80b848:	080b5240 	call	80b524 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80b84c:	e0ffff17 	ldw	r3,-4(fp)
  80b850:	e0bff917 	ldw	r2,-28(fp)
  80b854:	108018e4 	muli	r2,r2,99
  80b858:	1887883a 	add	r3,r3,r2
  80b85c:	e0bffa17 	ldw	r2,-24(fp)
  80b860:	1885883a 	add	r2,r3,r2
  80b864:	10800c04 	addi	r2,r2,48
  80b868:	e0fffe03 	ldbu	r3,-8(fp)
  80b86c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80b870:	e0bffa17 	ldw	r2,-24(fp)
  80b874:	10800044 	addi	r2,r2,1
  80b878:	e0bffa15 	stw	r2,-24(fp)
  80b87c:	e0bffa17 	ldw	r2,-24(fp)
  80b880:	10800410 	cmplti	r2,r2,16
  80b884:	103fb71e 	bne	r2,zero,80b764 <__alt_mem_onchip_mem+0xff803764>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b888:	e0bff917 	ldw	r2,-28(fp)
  80b88c:	10800044 	addi	r2,r2,1
  80b890:	e0bff915 	stw	r2,-28(fp)
  80b894:	e0bff917 	ldw	r2,-28(fp)
  80b898:	10800090 	cmplti	r2,r2,2
  80b89c:	103f961e 	bne	r2,zero,80b6f8 <__alt_mem_onchip_mem+0xff8036f8>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80b8a0:	0001883a 	nop
  80b8a4:	e037883a 	mov	sp,fp
  80b8a8:	dfc00117 	ldw	ra,4(sp)
  80b8ac:	df000017 	ldw	fp,0(sp)
  80b8b0:	dec00204 	addi	sp,sp,8
  80b8b4:	f800283a 	ret

0080b8b8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80b8b8:	defffc04 	addi	sp,sp,-16
  80b8bc:	dfc00315 	stw	ra,12(sp)
  80b8c0:	df000215 	stw	fp,8(sp)
  80b8c4:	df000204 	addi	fp,sp,8
  80b8c8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b8cc:	e03ffe15 	stw	zero,-8(fp)
  80b8d0:	00001d06 	br	80b948 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80b8d4:	e0bffe17 	ldw	r2,-8(fp)
  80b8d8:	00800f16 	blt	zero,r2,80b918 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80b8dc:	e0bffe17 	ldw	r2,-8(fp)
  80b8e0:	108018e4 	muli	r2,r2,99
  80b8e4:	10801004 	addi	r2,r2,64
  80b8e8:	e0ffff17 	ldw	r3,-4(fp)
  80b8ec:	1889883a 	add	r4,r3,r2
  80b8f0:	e0bffe17 	ldw	r2,-8(fp)
  80b8f4:	10800044 	addi	r2,r2,1
  80b8f8:	108018e4 	muli	r2,r2,99
  80b8fc:	10801004 	addi	r2,r2,64
  80b900:	e0ffff17 	ldw	r3,-4(fp)
  80b904:	1885883a 	add	r2,r3,r2
  80b908:	01801404 	movi	r6,80
  80b90c:	100b883a 	mov	r5,r2
  80b910:	0807f240 	call	807f24 <memcpy>
  80b914:	00000906 	br	80b93c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80b918:	e0bffe17 	ldw	r2,-8(fp)
  80b91c:	108018e4 	muli	r2,r2,99
  80b920:	10801004 	addi	r2,r2,64
  80b924:	e0ffff17 	ldw	r3,-4(fp)
  80b928:	1885883a 	add	r2,r3,r2
  80b92c:	01801404 	movi	r6,80
  80b930:	01400804 	movi	r5,32
  80b934:	1009883a 	mov	r4,r2
  80b938:	08081c80 	call	8081c8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b93c:	e0bffe17 	ldw	r2,-8(fp)
  80b940:	10800044 	addi	r2,r2,1
  80b944:	e0bffe15 	stw	r2,-8(fp)
  80b948:	e0bffe17 	ldw	r2,-8(fp)
  80b94c:	10800090 	cmplti	r2,r2,2
  80b950:	103fe01e 	bne	r2,zero,80b8d4 <__alt_mem_onchip_mem+0xff8038d4>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80b954:	e0bfff17 	ldw	r2,-4(fp)
  80b958:	10800883 	ldbu	r2,34(r2)
  80b95c:	10bfffc4 	addi	r2,r2,-1
  80b960:	1007883a 	mov	r3,r2
  80b964:	e0bfff17 	ldw	r2,-4(fp)
  80b968:	10c00885 	stb	r3,34(r2)
}
  80b96c:	0001883a 	nop
  80b970:	e037883a 	mov	sp,fp
  80b974:	dfc00117 	ldw	ra,4(sp)
  80b978:	df000017 	ldw	fp,0(sp)
  80b97c:	dec00204 	addi	sp,sp,8
  80b980:	f800283a 	ret

0080b984 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80b984:	defff904 	addi	sp,sp,-28
  80b988:	dfc00615 	stw	ra,24(sp)
  80b98c:	df000515 	stw	fp,20(sp)
  80b990:	df000504 	addi	fp,sp,20
  80b994:	e13ffe15 	stw	r4,-8(fp)
  80b998:	2805883a 	mov	r2,r5
  80b99c:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80b9a0:	e03ffb15 	stw	zero,-20(fp)
  80b9a4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80b9a8:	e0bffe17 	ldw	r2,-8(fp)
  80b9ac:	10800a03 	ldbu	r2,40(r2)
  80b9b0:	10803fcc 	andi	r2,r2,255
  80b9b4:	1080201c 	xori	r2,r2,128
  80b9b8:	10bfe004 	addi	r2,r2,-128
  80b9bc:	108016d8 	cmpnei	r2,r2,91
  80b9c0:	1000411e 	bne	r2,zero,80bac8 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80b9c4:	e0bffe17 	ldw	r2,-8(fp)
  80b9c8:	10800a04 	addi	r2,r2,40
  80b9cc:	10800044 	addi	r2,r2,1
  80b9d0:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80b9d4:	00000c06 	br	80ba08 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80b9d8:	e0bffb17 	ldw	r2,-20(fp)
  80b9dc:	10c002a4 	muli	r3,r2,10
  80b9e0:	e0bffd17 	ldw	r2,-12(fp)
  80b9e4:	11000044 	addi	r4,r2,1
  80b9e8:	e13ffd15 	stw	r4,-12(fp)
  80b9ec:	10800003 	ldbu	r2,0(r2)
  80b9f0:	10803fcc 	andi	r2,r2,255
  80b9f4:	1080201c 	xori	r2,r2,128
  80b9f8:	10bfe004 	addi	r2,r2,-128
  80b9fc:	10bff404 	addi	r2,r2,-48
  80ba00:	1885883a 	add	r2,r3,r2
  80ba04:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80ba08:	d0e00f17 	ldw	r3,-32708(gp)
  80ba0c:	e0bffd17 	ldw	r2,-12(fp)
  80ba10:	10800003 	ldbu	r2,0(r2)
  80ba14:	10803fcc 	andi	r2,r2,255
  80ba18:	1080201c 	xori	r2,r2,128
  80ba1c:	10bfe004 	addi	r2,r2,-128
  80ba20:	10800044 	addi	r2,r2,1
  80ba24:	1885883a 	add	r2,r3,r2
  80ba28:	10800003 	ldbu	r2,0(r2)
  80ba2c:	10803fcc 	andi	r2,r2,255
  80ba30:	1080010c 	andi	r2,r2,4
  80ba34:	103fe81e 	bne	r2,zero,80b9d8 <__alt_mem_onchip_mem+0xff8039d8>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80ba38:	e0bffd17 	ldw	r2,-12(fp)
  80ba3c:	10800003 	ldbu	r2,0(r2)
  80ba40:	10803fcc 	andi	r2,r2,255
  80ba44:	1080201c 	xori	r2,r2,128
  80ba48:	10bfe004 	addi	r2,r2,-128
  80ba4c:	10800ed8 	cmpnei	r2,r2,59
  80ba50:	10001f1e 	bne	r2,zero,80bad0 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80ba54:	e0bffd17 	ldw	r2,-12(fp)
  80ba58:	10800044 	addi	r2,r2,1
  80ba5c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80ba60:	00000c06 	br	80ba94 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80ba64:	e0bffc17 	ldw	r2,-16(fp)
  80ba68:	10c002a4 	muli	r3,r2,10
  80ba6c:	e0bffd17 	ldw	r2,-12(fp)
  80ba70:	11000044 	addi	r4,r2,1
  80ba74:	e13ffd15 	stw	r4,-12(fp)
  80ba78:	10800003 	ldbu	r2,0(r2)
  80ba7c:	10803fcc 	andi	r2,r2,255
  80ba80:	1080201c 	xori	r2,r2,128
  80ba84:	10bfe004 	addi	r2,r2,-128
  80ba88:	10bff404 	addi	r2,r2,-48
  80ba8c:	1885883a 	add	r2,r3,r2
  80ba90:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80ba94:	d0e00f17 	ldw	r3,-32708(gp)
  80ba98:	e0bffd17 	ldw	r2,-12(fp)
  80ba9c:	10800003 	ldbu	r2,0(r2)
  80baa0:	10803fcc 	andi	r2,r2,255
  80baa4:	1080201c 	xori	r2,r2,128
  80baa8:	10bfe004 	addi	r2,r2,-128
  80baac:	10800044 	addi	r2,r2,1
  80bab0:	1885883a 	add	r2,r3,r2
  80bab4:	10800003 	ldbu	r2,0(r2)
  80bab8:	10803fcc 	andi	r2,r2,255
  80babc:	1080010c 	andi	r2,r2,4
  80bac0:	103fe81e 	bne	r2,zero,80ba64 <__alt_mem_onchip_mem+0xff803a64>
  80bac4:	00000206 	br	80bad0 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80bac8:	00bfffc4 	movi	r2,-1
  80bacc:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80bad0:	e0bfff07 	ldb	r2,-4(fp)
  80bad4:	10c012a0 	cmpeqi	r3,r2,74
  80bad8:	1800291e 	bne	r3,zero,80bb80 <lcd_handle_escape+0x1fc>
  80badc:	10c012c8 	cmpgei	r3,r2,75
  80bae0:	1800031e 	bne	r3,zero,80baf0 <lcd_handle_escape+0x16c>
  80bae4:	10801220 	cmpeqi	r2,r2,72
  80bae8:	1000061e 	bne	r2,zero,80bb04 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80baec:	00004a06 	br	80bc18 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80baf0:	10c012e0 	cmpeqi	r3,r2,75
  80baf4:	1800281e 	bne	r3,zero,80bb98 <lcd_handle_escape+0x214>
  80baf8:	108019a0 	cmpeqi	r2,r2,102
  80bafc:	1000011e 	bne	r2,zero,80bb04 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80bb00:	00004506 	br	80bc18 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80bb04:	e0bffc17 	ldw	r2,-16(fp)
  80bb08:	0080050e 	bge	zero,r2,80bb20 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80bb0c:	e0bffc17 	ldw	r2,-16(fp)
  80bb10:	10bfffc4 	addi	r2,r2,-1
  80bb14:	1007883a 	mov	r3,r2
  80bb18:	e0bffe17 	ldw	r2,-8(fp)
  80bb1c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80bb20:	e0bffb17 	ldw	r2,-20(fp)
  80bb24:	0080370e 	bge	zero,r2,80bc04 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80bb28:	e0bffb17 	ldw	r2,-20(fp)
  80bb2c:	10bfffc4 	addi	r2,r2,-1
  80bb30:	1007883a 	mov	r3,r2
  80bb34:	e0bffe17 	ldw	r2,-8(fp)
  80bb38:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80bb3c:	e0bffe17 	ldw	r2,-8(fp)
  80bb40:	10800883 	ldbu	r2,34(r2)
  80bb44:	10803fcc 	andi	r2,r2,255
  80bb48:	10800170 	cmpltui	r2,r2,5
  80bb4c:	1000061e 	bne	r2,zero,80bb68 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80bb50:	e0bffe17 	ldw	r2,-8(fp)
  80bb54:	00c00104 	movi	r3,4
  80bb58:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80bb5c:	00000206 	br	80bb68 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80bb60:	e13ffe17 	ldw	r4,-8(fp)
  80bb64:	080b8b80 	call	80b8b8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80bb68:	e0bffe17 	ldw	r2,-8(fp)
  80bb6c:	10800883 	ldbu	r2,34(r2)
  80bb70:	10803fcc 	andi	r2,r2,255
  80bb74:	108000e8 	cmpgeui	r2,r2,3
  80bb78:	103ff91e 	bne	r2,zero,80bb60 <__alt_mem_onchip_mem+0xff803b60>
        lcd_scroll_up(sp);
    }
    break;
  80bb7c:	00002106 	br	80bc04 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80bb80:	e0bffb17 	ldw	r2,-20(fp)
  80bb84:	10800098 	cmpnei	r2,r2,2
  80bb88:	1000201e 	bne	r2,zero,80bc0c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80bb8c:	e13ffe17 	ldw	r4,-8(fp)
  80bb90:	080b5fc0 	call	80b5fc <lcd_clear_screen>
    break;
  80bb94:	00001d06 	br	80bc0c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80bb98:	e0bffb17 	ldw	r2,-20(fp)
  80bb9c:	00801d16 	blt	zero,r2,80bc14 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80bba0:	e0bffe17 	ldw	r2,-8(fp)
  80bba4:	10800843 	ldbu	r2,33(r2)
  80bba8:	10803fcc 	andi	r2,r2,255
  80bbac:	10801428 	cmpgeui	r2,r2,80
  80bbb0:	1000181e 	bne	r2,zero,80bc14 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80bbb4:	e0bffe17 	ldw	r2,-8(fp)
  80bbb8:	10800883 	ldbu	r2,34(r2)
  80bbbc:	10803fcc 	andi	r2,r2,255
  80bbc0:	108018e4 	muli	r2,r2,99
  80bbc4:	10801004 	addi	r2,r2,64
  80bbc8:	e0fffe17 	ldw	r3,-8(fp)
  80bbcc:	1887883a 	add	r3,r3,r2
  80bbd0:	e0bffe17 	ldw	r2,-8(fp)
  80bbd4:	10800843 	ldbu	r2,33(r2)
  80bbd8:	10803fcc 	andi	r2,r2,255
  80bbdc:	1889883a 	add	r4,r3,r2
  80bbe0:	e0bffe17 	ldw	r2,-8(fp)
  80bbe4:	10800843 	ldbu	r2,33(r2)
  80bbe8:	10803fcc 	andi	r2,r2,255
  80bbec:	00c01404 	movi	r3,80
  80bbf0:	1885c83a 	sub	r2,r3,r2
  80bbf4:	100d883a 	mov	r6,r2
  80bbf8:	01400804 	movi	r5,32
  80bbfc:	08081c80 	call	8081c8 <memset>
    }
    break;
  80bc00:	00000406 	br	80bc14 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80bc04:	0001883a 	nop
  80bc08:	00000306 	br	80bc18 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80bc0c:	0001883a 	nop
  80bc10:	00000106 	br	80bc18 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80bc14:	0001883a 	nop
  }
}
  80bc18:	0001883a 	nop
  80bc1c:	e037883a 	mov	sp,fp
  80bc20:	dfc00117 	ldw	ra,4(sp)
  80bc24:	df000017 	ldw	fp,0(sp)
  80bc28:	dec00204 	addi	sp,sp,8
  80bc2c:	f800283a 	ret

0080bc30 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80bc30:	defff304 	addi	sp,sp,-52
  80bc34:	dfc00c15 	stw	ra,48(sp)
  80bc38:	df000b15 	stw	fp,44(sp)
  80bc3c:	df000b04 	addi	fp,sp,44
  80bc40:	e13ffc15 	stw	r4,-16(fp)
  80bc44:	e17ffd15 	stw	r5,-12(fp)
  80bc48:	e1bffe15 	stw	r6,-8(fp)
  80bc4c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80bc50:	e0bffe17 	ldw	r2,-8(fp)
  80bc54:	e0fffd17 	ldw	r3,-12(fp)
  80bc58:	1885883a 	add	r2,r3,r2
  80bc5c:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80bc60:	e0bffc17 	ldw	r2,-16(fp)
  80bc64:	00c00044 	movi	r3,1
  80bc68:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80bc6c:	00009906 	br	80bed4 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80bc70:	e0bffd17 	ldw	r2,-12(fp)
  80bc74:	10800003 	ldbu	r2,0(r2)
  80bc78:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80bc7c:	e0bffc17 	ldw	r2,-16(fp)
  80bc80:	10800903 	ldbu	r2,36(r2)
  80bc84:	10803fcc 	andi	r2,r2,255
  80bc88:	1080201c 	xori	r2,r2,128
  80bc8c:	10bfe004 	addi	r2,r2,-128
  80bc90:	10003716 	blt	r2,zero,80bd70 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80bc94:	e0bffc17 	ldw	r2,-16(fp)
  80bc98:	10800903 	ldbu	r2,36(r2)
  80bc9c:	10803fcc 	andi	r2,r2,255
  80bca0:	1080201c 	xori	r2,r2,128
  80bca4:	10bfe004 	addi	r2,r2,-128
  80bca8:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80bcac:	e0bffa17 	ldw	r2,-24(fp)
  80bcb0:	1000031e 	bne	r2,zero,80bcc0 <altera_avalon_lcd_16207_write+0x90>
  80bcb4:	e0bff907 	ldb	r2,-28(fp)
  80bcb8:	108016d8 	cmpnei	r2,r2,91
  80bcbc:	10000d1e 	bne	r2,zero,80bcf4 <altera_avalon_lcd_16207_write+0xc4>
  80bcc0:	e0bffa17 	ldw	r2,-24(fp)
  80bcc4:	10001826 	beq	r2,zero,80bd28 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80bcc8:	d0e00f17 	ldw	r3,-32708(gp)
  80bccc:	e0bff907 	ldb	r2,-28(fp)
  80bcd0:	10800044 	addi	r2,r2,1
  80bcd4:	1885883a 	add	r2,r3,r2
  80bcd8:	10800003 	ldbu	r2,0(r2)
  80bcdc:	10803fcc 	andi	r2,r2,255
  80bce0:	1080010c 	andi	r2,r2,4
  80bce4:	1000101e 	bne	r2,zero,80bd28 <altera_avalon_lcd_16207_write+0xf8>
  80bce8:	e0bff907 	ldb	r2,-28(fp)
  80bcec:	10800ee0 	cmpeqi	r2,r2,59
  80bcf0:	10000d1e 	bne	r2,zero,80bd28 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80bcf4:	e0fffc17 	ldw	r3,-16(fp)
  80bcf8:	e0bffa17 	ldw	r2,-24(fp)
  80bcfc:	1885883a 	add	r2,r3,r2
  80bd00:	10800a04 	addi	r2,r2,40
  80bd04:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80bd08:	e0bff907 	ldb	r2,-28(fp)
  80bd0c:	100b883a 	mov	r5,r2
  80bd10:	e13ffc17 	ldw	r4,-16(fp)
  80bd14:	080b9840 	call	80b984 <lcd_handle_escape>

        sp->esccount = -1;
  80bd18:	e0bffc17 	ldw	r2,-16(fp)
  80bd1c:	00ffffc4 	movi	r3,-1
  80bd20:	10c00905 	stb	r3,36(r2)
  80bd24:	00006806 	br	80bec8 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80bd28:	e0bffc17 	ldw	r2,-16(fp)
  80bd2c:	10800903 	ldbu	r2,36(r2)
  80bd30:	10803fcc 	andi	r2,r2,255
  80bd34:	108001e8 	cmpgeui	r2,r2,7
  80bd38:	1000631e 	bne	r2,zero,80bec8 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80bd3c:	e0fffc17 	ldw	r3,-16(fp)
  80bd40:	e0bffa17 	ldw	r2,-24(fp)
  80bd44:	1885883a 	add	r2,r3,r2
  80bd48:	10800a04 	addi	r2,r2,40
  80bd4c:	e0fff903 	ldbu	r3,-28(fp)
  80bd50:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80bd54:	e0bffc17 	ldw	r2,-16(fp)
  80bd58:	10800903 	ldbu	r2,36(r2)
  80bd5c:	10800044 	addi	r2,r2,1
  80bd60:	1007883a 	mov	r3,r2
  80bd64:	e0bffc17 	ldw	r2,-16(fp)
  80bd68:	10c00905 	stb	r3,36(r2)
  80bd6c:	00005606 	br	80bec8 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80bd70:	e0bff907 	ldb	r2,-28(fp)
  80bd74:	108006d8 	cmpnei	r2,r2,27
  80bd78:	1000031e 	bne	r2,zero,80bd88 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80bd7c:	e0bffc17 	ldw	r2,-16(fp)
  80bd80:	10000905 	stb	zero,36(r2)
  80bd84:	00005006 	br	80bec8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80bd88:	e0bff907 	ldb	r2,-28(fp)
  80bd8c:	10800358 	cmpnei	r2,r2,13
  80bd90:	1000031e 	bne	r2,zero,80bda0 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80bd94:	e0bffc17 	ldw	r2,-16(fp)
  80bd98:	10000845 	stb	zero,33(r2)
  80bd9c:	00004a06 	br	80bec8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80bda0:	e0bff907 	ldb	r2,-28(fp)
  80bda4:	10800298 	cmpnei	r2,r2,10
  80bda8:	1000101e 	bne	r2,zero,80bdec <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80bdac:	e0bffc17 	ldw	r2,-16(fp)
  80bdb0:	10000845 	stb	zero,33(r2)
      sp->y++;
  80bdb4:	e0bffc17 	ldw	r2,-16(fp)
  80bdb8:	10800883 	ldbu	r2,34(r2)
  80bdbc:	10800044 	addi	r2,r2,1
  80bdc0:	1007883a 	mov	r3,r2
  80bdc4:	e0bffc17 	ldw	r2,-16(fp)
  80bdc8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80bdcc:	e0bffc17 	ldw	r2,-16(fp)
  80bdd0:	10800883 	ldbu	r2,34(r2)
  80bdd4:	10803fcc 	andi	r2,r2,255
  80bdd8:	108000f0 	cmpltui	r2,r2,3
  80bddc:	10003a1e 	bne	r2,zero,80bec8 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80bde0:	e13ffc17 	ldw	r4,-16(fp)
  80bde4:	080b8b80 	call	80b8b8 <lcd_scroll_up>
  80bde8:	00003706 	br	80bec8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80bdec:	e0bff907 	ldb	r2,-28(fp)
  80bdf0:	10800218 	cmpnei	r2,r2,8
  80bdf4:	10000b1e 	bne	r2,zero,80be24 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80bdf8:	e0bffc17 	ldw	r2,-16(fp)
  80bdfc:	10800843 	ldbu	r2,33(r2)
  80be00:	10803fcc 	andi	r2,r2,255
  80be04:	10003026 	beq	r2,zero,80bec8 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80be08:	e0bffc17 	ldw	r2,-16(fp)
  80be0c:	10800843 	ldbu	r2,33(r2)
  80be10:	10bfffc4 	addi	r2,r2,-1
  80be14:	1007883a 	mov	r3,r2
  80be18:	e0bffc17 	ldw	r2,-16(fp)
  80be1c:	10c00845 	stb	r3,33(r2)
  80be20:	00002906 	br	80bec8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80be24:	d0e00f17 	ldw	r3,-32708(gp)
  80be28:	e0bff907 	ldb	r2,-28(fp)
  80be2c:	10800044 	addi	r2,r2,1
  80be30:	1885883a 	add	r2,r3,r2
  80be34:	10800003 	ldbu	r2,0(r2)
  80be38:	10803fcc 	andi	r2,r2,255
  80be3c:	1080201c 	xori	r2,r2,128
  80be40:	10bfe004 	addi	r2,r2,-128
  80be44:	108025cc 	andi	r2,r2,151
  80be48:	10001f26 	beq	r2,zero,80bec8 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80be4c:	e0bffc17 	ldw	r2,-16(fp)
  80be50:	10800883 	ldbu	r2,34(r2)
  80be54:	10803fcc 	andi	r2,r2,255
  80be58:	108000b0 	cmpltui	r2,r2,2
  80be5c:	1000021e 	bne	r2,zero,80be68 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80be60:	e13ffc17 	ldw	r4,-16(fp)
  80be64:	080b8b80 	call	80b8b8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80be68:	e0bffc17 	ldw	r2,-16(fp)
  80be6c:	10800843 	ldbu	r2,33(r2)
  80be70:	10803fcc 	andi	r2,r2,255
  80be74:	10801428 	cmpgeui	r2,r2,80
  80be78:	10000d1e 	bne	r2,zero,80beb0 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80be7c:	e0bffc17 	ldw	r2,-16(fp)
  80be80:	10800883 	ldbu	r2,34(r2)
  80be84:	10c03fcc 	andi	r3,r2,255
  80be88:	e0bffc17 	ldw	r2,-16(fp)
  80be8c:	10800843 	ldbu	r2,33(r2)
  80be90:	10803fcc 	andi	r2,r2,255
  80be94:	e13ffc17 	ldw	r4,-16(fp)
  80be98:	18c018e4 	muli	r3,r3,99
  80be9c:	20c7883a 	add	r3,r4,r3
  80bea0:	1885883a 	add	r2,r3,r2
  80bea4:	10801004 	addi	r2,r2,64
  80bea8:	e0fff903 	ldbu	r3,-28(fp)
  80beac:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80beb0:	e0bffc17 	ldw	r2,-16(fp)
  80beb4:	10800843 	ldbu	r2,33(r2)
  80beb8:	10800044 	addi	r2,r2,1
  80bebc:	1007883a 	mov	r3,r2
  80bec0:	e0bffc17 	ldw	r2,-16(fp)
  80bec4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80bec8:	e0bffd17 	ldw	r2,-12(fp)
  80becc:	10800044 	addi	r2,r2,1
  80bed0:	e0bffd15 	stw	r2,-12(fp)
  80bed4:	e0fffd17 	ldw	r3,-12(fp)
  80bed8:	e0bff817 	ldw	r2,-32(fp)
  80bedc:	18bf6436 	bltu	r3,r2,80bc70 <__alt_mem_onchip_mem+0xff803c70>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80bee0:	00800404 	movi	r2,16
  80bee4:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bee8:	e03ff515 	stw	zero,-44(fp)
  80beec:	00003706 	br	80bfcc <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80bef0:	00801404 	movi	r2,80
  80bef4:	e0bff715 	stw	r2,-36(fp)
  80bef8:	00001106 	br	80bf40 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80befc:	e0bff717 	ldw	r2,-36(fp)
  80bf00:	10bfffc4 	addi	r2,r2,-1
  80bf04:	e13ffc17 	ldw	r4,-16(fp)
  80bf08:	e0fff517 	ldw	r3,-44(fp)
  80bf0c:	18c018e4 	muli	r3,r3,99
  80bf10:	20c7883a 	add	r3,r4,r3
  80bf14:	1885883a 	add	r2,r3,r2
  80bf18:	10801004 	addi	r2,r2,64
  80bf1c:	10800003 	ldbu	r2,0(r2)
  80bf20:	10803fcc 	andi	r2,r2,255
  80bf24:	1080201c 	xori	r2,r2,128
  80bf28:	10bfe004 	addi	r2,r2,-128
  80bf2c:	10800820 	cmpeqi	r2,r2,32
  80bf30:	10000626 	beq	r2,zero,80bf4c <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80bf34:	e0bff717 	ldw	r2,-36(fp)
  80bf38:	10bfffc4 	addi	r2,r2,-1
  80bf3c:	e0bff715 	stw	r2,-36(fp)
  80bf40:	e0bff717 	ldw	r2,-36(fp)
  80bf44:	00bfed16 	blt	zero,r2,80befc <__alt_mem_onchip_mem+0xff803efc>
  80bf48:	00000106 	br	80bf50 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80bf4c:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80bf50:	e0bff717 	ldw	r2,-36(fp)
  80bf54:	10800448 	cmpgei	r2,r2,17
  80bf58:	1000031e 	bne	r2,zero,80bf68 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80bf5c:	00800404 	movi	r2,16
  80bf60:	e0bff715 	stw	r2,-36(fp)
  80bf64:	00000306 	br	80bf74 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80bf68:	e0bff717 	ldw	r2,-36(fp)
  80bf6c:	10800044 	addi	r2,r2,1
  80bf70:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80bf74:	e0bff717 	ldw	r2,-36(fp)
  80bf78:	1009883a 	mov	r4,r2
  80bf7c:	e0fffc17 	ldw	r3,-16(fp)
  80bf80:	e0bff517 	ldw	r2,-44(fp)
  80bf84:	108018e4 	muli	r2,r2,99
  80bf88:	1885883a 	add	r2,r3,r2
  80bf8c:	10802444 	addi	r2,r2,145
  80bf90:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80bf94:	e0fff617 	ldw	r3,-40(fp)
  80bf98:	e0bff717 	ldw	r2,-36(fp)
  80bf9c:	1880020e 	bge	r3,r2,80bfa8 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80bfa0:	e0bff717 	ldw	r2,-36(fp)
  80bfa4:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80bfa8:	e0fffc17 	ldw	r3,-16(fp)
  80bfac:	e0bff517 	ldw	r2,-44(fp)
  80bfb0:	108018e4 	muli	r2,r2,99
  80bfb4:	1885883a 	add	r2,r3,r2
  80bfb8:	10802484 	addi	r2,r2,146
  80bfbc:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bfc0:	e0bff517 	ldw	r2,-44(fp)
  80bfc4:	10800044 	addi	r2,r2,1
  80bfc8:	e0bff515 	stw	r2,-44(fp)
  80bfcc:	e0bff517 	ldw	r2,-44(fp)
  80bfd0:	10800090 	cmplti	r2,r2,2
  80bfd4:	103fc61e 	bne	r2,zero,80bef0 <__alt_mem_onchip_mem+0xff803ef0>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80bfd8:	e0bff617 	ldw	r2,-40(fp)
  80bfdc:	10800448 	cmpgei	r2,r2,17
  80bfe0:	1000031e 	bne	r2,zero,80bff0 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80bfe4:	e0bffc17 	ldw	r2,-16(fp)
  80bfe8:	10000985 	stb	zero,38(r2)
  80bfec:	00002e06 	br	80c0a8 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80bff0:	e0bff617 	ldw	r2,-40(fp)
  80bff4:	1085883a 	add	r2,r2,r2
  80bff8:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80bffc:	e0bff617 	ldw	r2,-40(fp)
  80c000:	1007883a 	mov	r3,r2
  80c004:	e0bffc17 	ldw	r2,-16(fp)
  80c008:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c00c:	e03ff515 	stw	zero,-44(fp)
  80c010:	00002206 	br	80c09c <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80c014:	e0fffc17 	ldw	r3,-16(fp)
  80c018:	e0bff517 	ldw	r2,-44(fp)
  80c01c:	108018e4 	muli	r2,r2,99
  80c020:	1885883a 	add	r2,r3,r2
  80c024:	10802444 	addi	r2,r2,145
  80c028:	10800003 	ldbu	r2,0(r2)
  80c02c:	10803fcc 	andi	r2,r2,255
  80c030:	1080201c 	xori	r2,r2,128
  80c034:	10bfe004 	addi	r2,r2,-128
  80c038:	10800450 	cmplti	r2,r2,17
  80c03c:	1000141e 	bne	r2,zero,80c090 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80c040:	e0fffc17 	ldw	r3,-16(fp)
  80c044:	e0bff517 	ldw	r2,-44(fp)
  80c048:	108018e4 	muli	r2,r2,99
  80c04c:	1885883a 	add	r2,r3,r2
  80c050:	10802444 	addi	r2,r2,145
  80c054:	10800003 	ldbu	r2,0(r2)
  80c058:	10803fcc 	andi	r2,r2,255
  80c05c:	1080201c 	xori	r2,r2,128
  80c060:	10bfe004 	addi	r2,r2,-128
  80c064:	1004923a 	slli	r2,r2,8
  80c068:	e17ff617 	ldw	r5,-40(fp)
  80c06c:	1009883a 	mov	r4,r2
  80c070:	08099b80 	call	8099b8 <__divsi3>
  80c074:	1009883a 	mov	r4,r2
  80c078:	e0fffc17 	ldw	r3,-16(fp)
  80c07c:	e0bff517 	ldw	r2,-44(fp)
  80c080:	108018e4 	muli	r2,r2,99
  80c084:	1885883a 	add	r2,r3,r2
  80c088:	10802484 	addi	r2,r2,146
  80c08c:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c090:	e0bff517 	ldw	r2,-44(fp)
  80c094:	10800044 	addi	r2,r2,1
  80c098:	e0bff515 	stw	r2,-44(fp)
  80c09c:	e0bff517 	ldw	r2,-44(fp)
  80c0a0:	10800090 	cmplti	r2,r2,2
  80c0a4:	103fdb1e 	bne	r2,zero,80c014 <__alt_mem_onchip_mem+0xff804014>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80c0a8:	e0bffc17 	ldw	r2,-16(fp)
  80c0ac:	10800943 	ldbu	r2,37(r2)
  80c0b0:	10803fcc 	andi	r2,r2,255
  80c0b4:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80c0b8:	e13ffc17 	ldw	r4,-16(fp)
  80c0bc:	080b6cc0 	call	80b6cc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80c0c0:	e0bffc17 	ldw	r2,-16(fp)
  80c0c4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80c0c8:	e0bffc17 	ldw	r2,-16(fp)
  80c0cc:	10800943 	ldbu	r2,37(r2)
  80c0d0:	10c03fcc 	andi	r3,r2,255
  80c0d4:	e0bffb17 	ldw	r2,-20(fp)
  80c0d8:	18800426 	beq	r3,r2,80c0ec <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80c0dc:	e0bffc17 	ldw	r2,-16(fp)
  80c0e0:	00c00044 	movi	r3,1
  80c0e4:	10c009c5 	stb	r3,39(r2)
  }
  80c0e8:	003fef06 	br	80c0a8 <__alt_mem_onchip_mem+0xff8040a8>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80c0ec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80c0f0:	e0bffe17 	ldw	r2,-8(fp)
}
  80c0f4:	e037883a 	mov	sp,fp
  80c0f8:	dfc00117 	ldw	ra,4(sp)
  80c0fc:	df000017 	ldw	fp,0(sp)
  80c100:	dec00204 	addi	sp,sp,8
  80c104:	f800283a 	ret

0080c108 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80c108:	defffc04 	addi	sp,sp,-16
  80c10c:	dfc00315 	stw	ra,12(sp)
  80c110:	df000215 	stw	fp,8(sp)
  80c114:	df000204 	addi	fp,sp,8
  80c118:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80c11c:	e0bfff17 	ldw	r2,-4(fp)
  80c120:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80c124:	e0bffe17 	ldw	r2,-8(fp)
  80c128:	10800943 	ldbu	r2,37(r2)
  80c12c:	10803fcc 	andi	r2,r2,255
  80c130:	10c00044 	addi	r3,r2,1
  80c134:	e0bffe17 	ldw	r2,-8(fp)
  80c138:	10800983 	ldbu	r2,38(r2)
  80c13c:	10803fcc 	andi	r2,r2,255
  80c140:	18800316 	blt	r3,r2,80c150 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80c144:	e0bffe17 	ldw	r2,-8(fp)
  80c148:	10000945 	stb	zero,37(r2)
  80c14c:	00000606 	br	80c168 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80c150:	e0bffe17 	ldw	r2,-8(fp)
  80c154:	10800943 	ldbu	r2,37(r2)
  80c158:	10800044 	addi	r2,r2,1
  80c15c:	1007883a 	mov	r3,r2
  80c160:	e0bffe17 	ldw	r2,-8(fp)
  80c164:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80c168:	e0bffe17 	ldw	r2,-8(fp)
  80c16c:	10800983 	ldbu	r2,38(r2)
  80c170:	10803fcc 	andi	r2,r2,255
  80c174:	10000826 	beq	r2,zero,80c198 <alt_lcd_16207_timeout+0x90>
  80c178:	e0bffe17 	ldw	r2,-8(fp)
  80c17c:	108009c3 	ldbu	r2,39(r2)
  80c180:	10803fcc 	andi	r2,r2,255
  80c184:	1080201c 	xori	r2,r2,128
  80c188:	10bfe004 	addi	r2,r2,-128
  80c18c:	1000021e 	bne	r2,zero,80c198 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80c190:	e13ffe17 	ldw	r4,-8(fp)
  80c194:	080b6cc0 	call	80b6cc <lcd_repaint_screen>

  return sp->period;
  80c198:	e0bffe17 	ldw	r2,-8(fp)
  80c19c:	10800717 	ldw	r2,28(r2)
}
  80c1a0:	e037883a 	mov	sp,fp
  80c1a4:	dfc00117 	ldw	ra,4(sp)
  80c1a8:	df000017 	ldw	fp,0(sp)
  80c1ac:	dec00204 	addi	sp,sp,8
  80c1b0:	f800283a 	ret

0080c1b4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80c1b4:	defffc04 	addi	sp,sp,-16
  80c1b8:	dfc00315 	stw	ra,12(sp)
  80c1bc:	df000215 	stw	fp,8(sp)
  80c1c0:	df000204 	addi	fp,sp,8
  80c1c4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80c1c8:	e0bfff17 	ldw	r2,-4(fp)
  80c1cc:	10800017 	ldw	r2,0(r2)
  80c1d0:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80c1d4:	e0bfff17 	ldw	r2,-4(fp)
  80c1d8:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80c1dc:	010ea604 	movi	r4,15000
  80c1e0:	080d5640 	call	80d564 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c1e4:	e0bffe17 	ldw	r2,-8(fp)
  80c1e8:	00c00c04 	movi	r3,48
  80c1ec:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80c1f0:	01040104 	movi	r4,4100
  80c1f4:	080d5640 	call	80d564 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c1f8:	e0bffe17 	ldw	r2,-8(fp)
  80c1fc:	00c00c04 	movi	r3,48
  80c200:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80c204:	0100fa04 	movi	r4,1000
  80c208:	080d5640 	call	80d564 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c20c:	e0bffe17 	ldw	r2,-8(fp)
  80c210:	00c00c04 	movi	r3,48
  80c214:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80c218:	01400e04 	movi	r5,56
  80c21c:	e13fff17 	ldw	r4,-4(fp)
  80c220:	080b46c0 	call	80b46c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80c224:	01400204 	movi	r5,8
  80c228:	e13fff17 	ldw	r4,-4(fp)
  80c22c:	080b46c0 	call	80b46c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80c230:	e13fff17 	ldw	r4,-4(fp)
  80c234:	080b5fc0 	call	80b5fc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80c238:	01400184 	movi	r5,6
  80c23c:	e13fff17 	ldw	r4,-4(fp)
  80c240:	080b46c0 	call	80b46c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80c244:	01400304 	movi	r5,12
  80c248:	e13fff17 	ldw	r4,-4(fp)
  80c24c:	080b46c0 	call	80b46c <lcd_write_command>

  sp->esccount = -1;
  80c250:	e0bfff17 	ldw	r2,-4(fp)
  80c254:	00ffffc4 	movi	r3,-1
  80c258:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80c25c:	e0bfff17 	ldw	r2,-4(fp)
  80c260:	10800a04 	addi	r2,r2,40
  80c264:	01800204 	movi	r6,8
  80c268:	000b883a 	mov	r5,zero
  80c26c:	1009883a 	mov	r4,r2
  80c270:	08081c80 	call	8081c8 <memset>

  sp->scrollpos = 0;
  80c274:	e0bfff17 	ldw	r2,-4(fp)
  80c278:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80c27c:	e0bfff17 	ldw	r2,-4(fp)
  80c280:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80c284:	e0bfff17 	ldw	r2,-4(fp)
  80c288:	100009c5 	stb	zero,39(r2)
  80c28c:	d0a73517 	ldw	r2,-25388(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80c290:	01400284 	movi	r5,10
  80c294:	1009883a 	mov	r4,r2
  80c298:	0809ab00 	call	809ab0 <__udivsi3>
  80c29c:	1007883a 	mov	r3,r2
  80c2a0:	e0bfff17 	ldw	r2,-4(fp)
  80c2a4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80c2a8:	e0bfff17 	ldw	r2,-4(fp)
  80c2ac:	10c00104 	addi	r3,r2,4
  80c2b0:	e0bfff17 	ldw	r2,-4(fp)
  80c2b4:	10800717 	ldw	r2,28(r2)
  80c2b8:	e1ffff17 	ldw	r7,-4(fp)
  80c2bc:	01802074 	movhi	r6,129
  80c2c0:	31b04204 	addi	r6,r6,-16120
  80c2c4:	100b883a 	mov	r5,r2
  80c2c8:	1809883a 	mov	r4,r3
  80c2cc:	0809b6c0 	call	809b6c <alt_alarm_start>
}
  80c2d0:	0001883a 	nop
  80c2d4:	e037883a 	mov	sp,fp
  80c2d8:	dfc00117 	ldw	ra,4(sp)
  80c2dc:	df000017 	ldw	fp,0(sp)
  80c2e0:	dec00204 	addi	sp,sp,8
  80c2e4:	f800283a 	ret

0080c2e8 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80c2e8:	defffa04 	addi	sp,sp,-24
  80c2ec:	dfc00515 	stw	ra,20(sp)
  80c2f0:	df000415 	stw	fp,16(sp)
  80c2f4:	df000404 	addi	fp,sp,16
  80c2f8:	e13ffd15 	stw	r4,-12(fp)
  80c2fc:	e17ffe15 	stw	r5,-8(fp)
  80c300:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80c304:	e0bffd17 	ldw	r2,-12(fp)
  80c308:	10800017 	ldw	r2,0(r2)
  80c30c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80c310:	e0bffc17 	ldw	r2,-16(fp)
  80c314:	10c00a04 	addi	r3,r2,40
  80c318:	e0bffd17 	ldw	r2,-12(fp)
  80c31c:	10800217 	ldw	r2,8(r2)
  80c320:	100f883a 	mov	r7,r2
  80c324:	e1bfff17 	ldw	r6,-4(fp)
  80c328:	e17ffe17 	ldw	r5,-8(fp)
  80c32c:	1809883a 	mov	r4,r3
  80c330:	080bc300 	call	80bc30 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80c334:	e037883a 	mov	sp,fp
  80c338:	dfc00117 	ldw	ra,4(sp)
  80c33c:	df000017 	ldw	fp,0(sp)
  80c340:	dec00204 	addi	sp,sp,8
  80c344:	f800283a 	ret

0080c348 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80c348:	defffa04 	addi	sp,sp,-24
  80c34c:	dfc00515 	stw	ra,20(sp)
  80c350:	df000415 	stw	fp,16(sp)
  80c354:	df000404 	addi	fp,sp,16
  80c358:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80c35c:	0007883a 	mov	r3,zero
  80c360:	e0bfff17 	ldw	r2,-4(fp)
  80c364:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80c368:	e0bfff17 	ldw	r2,-4(fp)
  80c36c:	10800104 	addi	r2,r2,4
  80c370:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c374:	0005303a 	rdctl	r2,status
  80c378:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c37c:	e0fffd17 	ldw	r3,-12(fp)
  80c380:	00bfff84 	movi	r2,-2
  80c384:	1884703a 	and	r2,r3,r2
  80c388:	1001703a 	wrctl	status,r2
  
  return context;
  80c38c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80c390:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80c394:	080a6c40 	call	80a6c4 <alt_tick>
  80c398:	e0bffc17 	ldw	r2,-16(fp)
  80c39c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c3a0:	e0bffe17 	ldw	r2,-8(fp)
  80c3a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80c3a8:	0001883a 	nop
  80c3ac:	e037883a 	mov	sp,fp
  80c3b0:	dfc00117 	ldw	ra,4(sp)
  80c3b4:	df000017 	ldw	fp,0(sp)
  80c3b8:	dec00204 	addi	sp,sp,8
  80c3bc:	f800283a 	ret

0080c3c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80c3c0:	defff804 	addi	sp,sp,-32
  80c3c4:	dfc00715 	stw	ra,28(sp)
  80c3c8:	df000615 	stw	fp,24(sp)
  80c3cc:	df000604 	addi	fp,sp,24
  80c3d0:	e13ffc15 	stw	r4,-16(fp)
  80c3d4:	e17ffd15 	stw	r5,-12(fp)
  80c3d8:	e1bffe15 	stw	r6,-8(fp)
  80c3dc:	e1ffff15 	stw	r7,-4(fp)
  80c3e0:	e0bfff17 	ldw	r2,-4(fp)
  80c3e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80c3e8:	d0a73517 	ldw	r2,-25388(gp)
  80c3ec:	1000021e 	bne	r2,zero,80c3f8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80c3f0:	e0bffb17 	ldw	r2,-20(fp)
  80c3f4:	d0a73515 	stw	r2,-25388(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80c3f8:	e0bffc17 	ldw	r2,-16(fp)
  80c3fc:	10800104 	addi	r2,r2,4
  80c400:	00c001c4 	movi	r3,7
  80c404:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80c408:	d8000015 	stw	zero,0(sp)
  80c40c:	e1fffc17 	ldw	r7,-16(fp)
  80c410:	01802074 	movhi	r6,129
  80c414:	31b0d204 	addi	r6,r6,-15544
  80c418:	e17ffe17 	ldw	r5,-8(fp)
  80c41c:	e13ffd17 	ldw	r4,-12(fp)
  80c420:	080cf300 	call	80cf30 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80c424:	0001883a 	nop
  80c428:	e037883a 	mov	sp,fp
  80c42c:	dfc00117 	ldw	ra,4(sp)
  80c430:	df000017 	ldw	fp,0(sp)
  80c434:	dec00204 	addi	sp,sp,8
  80c438:	f800283a 	ret

0080c43c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80c43c:	defffa04 	addi	sp,sp,-24
  80c440:	dfc00515 	stw	ra,20(sp)
  80c444:	df000415 	stw	fp,16(sp)
  80c448:	df000404 	addi	fp,sp,16
  80c44c:	e13ffd15 	stw	r4,-12(fp)
  80c450:	e17ffe15 	stw	r5,-8(fp)
  80c454:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80c458:	e0bffd17 	ldw	r2,-12(fp)
  80c45c:	10800017 	ldw	r2,0(r2)
  80c460:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80c464:	e0bffc17 	ldw	r2,-16(fp)
  80c468:	10c00a04 	addi	r3,r2,40
  80c46c:	e0bffd17 	ldw	r2,-12(fp)
  80c470:	10800217 	ldw	r2,8(r2)
  80c474:	100f883a 	mov	r7,r2
  80c478:	e1bfff17 	ldw	r6,-4(fp)
  80c47c:	e17ffe17 	ldw	r5,-8(fp)
  80c480:	1809883a 	mov	r4,r3
  80c484:	080c9500 	call	80c950 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80c488:	e037883a 	mov	sp,fp
  80c48c:	dfc00117 	ldw	ra,4(sp)
  80c490:	df000017 	ldw	fp,0(sp)
  80c494:	dec00204 	addi	sp,sp,8
  80c498:	f800283a 	ret

0080c49c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80c49c:	defffa04 	addi	sp,sp,-24
  80c4a0:	dfc00515 	stw	ra,20(sp)
  80c4a4:	df000415 	stw	fp,16(sp)
  80c4a8:	df000404 	addi	fp,sp,16
  80c4ac:	e13ffd15 	stw	r4,-12(fp)
  80c4b0:	e17ffe15 	stw	r5,-8(fp)
  80c4b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80c4b8:	e0bffd17 	ldw	r2,-12(fp)
  80c4bc:	10800017 	ldw	r2,0(r2)
  80c4c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80c4c4:	e0bffc17 	ldw	r2,-16(fp)
  80c4c8:	10c00a04 	addi	r3,r2,40
  80c4cc:	e0bffd17 	ldw	r2,-12(fp)
  80c4d0:	10800217 	ldw	r2,8(r2)
  80c4d4:	100f883a 	mov	r7,r2
  80c4d8:	e1bfff17 	ldw	r6,-4(fp)
  80c4dc:	e17ffe17 	ldw	r5,-8(fp)
  80c4e0:	1809883a 	mov	r4,r3
  80c4e4:	080cb680 	call	80cb68 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80c4e8:	e037883a 	mov	sp,fp
  80c4ec:	dfc00117 	ldw	ra,4(sp)
  80c4f0:	df000017 	ldw	fp,0(sp)
  80c4f4:	dec00204 	addi	sp,sp,8
  80c4f8:	f800283a 	ret

0080c4fc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80c4fc:	defffc04 	addi	sp,sp,-16
  80c500:	dfc00315 	stw	ra,12(sp)
  80c504:	df000215 	stw	fp,8(sp)
  80c508:	df000204 	addi	fp,sp,8
  80c50c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80c510:	e0bfff17 	ldw	r2,-4(fp)
  80c514:	10800017 	ldw	r2,0(r2)
  80c518:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80c51c:	e0bffe17 	ldw	r2,-8(fp)
  80c520:	10c00a04 	addi	r3,r2,40
  80c524:	e0bfff17 	ldw	r2,-4(fp)
  80c528:	10800217 	ldw	r2,8(r2)
  80c52c:	100b883a 	mov	r5,r2
  80c530:	1809883a 	mov	r4,r3
  80c534:	080c8c00 	call	80c8c0 <altera_avalon_uart_close>
}
  80c538:	e037883a 	mov	sp,fp
  80c53c:	dfc00117 	ldw	ra,4(sp)
  80c540:	df000017 	ldw	fp,0(sp)
  80c544:	dec00204 	addi	sp,sp,8
  80c548:	f800283a 	ret

0080c54c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80c54c:	defff804 	addi	sp,sp,-32
  80c550:	dfc00715 	stw	ra,28(sp)
  80c554:	df000615 	stw	fp,24(sp)
  80c558:	df000604 	addi	fp,sp,24
  80c55c:	e13ffd15 	stw	r4,-12(fp)
  80c560:	e17ffe15 	stw	r5,-8(fp)
  80c564:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80c568:	e0bffd17 	ldw	r2,-12(fp)
  80c56c:	10800017 	ldw	r2,0(r2)
  80c570:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80c574:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80c578:	1000041e 	bne	r2,zero,80c58c <altera_avalon_uart_init+0x40>
  80c57c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80c580:	1000021e 	bne	r2,zero,80c58c <altera_avalon_uart_init+0x40>
  80c584:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80c588:	10000226 	beq	r2,zero,80c594 <altera_avalon_uart_init+0x48>
  80c58c:	00800044 	movi	r2,1
  80c590:	00000106 	br	80c598 <altera_avalon_uart_init+0x4c>
  80c594:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80c598:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80c59c:	e0bffc17 	ldw	r2,-16(fp)
  80c5a0:	10000f1e 	bne	r2,zero,80c5e0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80c5a4:	e0bffd17 	ldw	r2,-12(fp)
  80c5a8:	00c32004 	movi	r3,3200
  80c5ac:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80c5b0:	e0bffb17 	ldw	r2,-20(fp)
  80c5b4:	10800304 	addi	r2,r2,12
  80c5b8:	e0fffd17 	ldw	r3,-12(fp)
  80c5bc:	18c00117 	ldw	r3,4(r3)
  80c5c0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80c5c4:	d8000015 	stw	zero,0(sp)
  80c5c8:	e1fffd17 	ldw	r7,-12(fp)
  80c5cc:	01802074 	movhi	r6,129
  80c5d0:	31b17e04 	addi	r6,r6,-14856
  80c5d4:	e17fff17 	ldw	r5,-4(fp)
  80c5d8:	e13ffe17 	ldw	r4,-8(fp)
  80c5dc:	080cf300 	call	80cf30 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80c5e0:	0001883a 	nop
  80c5e4:	e037883a 	mov	sp,fp
  80c5e8:	dfc00117 	ldw	ra,4(sp)
  80c5ec:	df000017 	ldw	fp,0(sp)
  80c5f0:	dec00204 	addi	sp,sp,8
  80c5f4:	f800283a 	ret

0080c5f8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80c5f8:	defffa04 	addi	sp,sp,-24
  80c5fc:	dfc00515 	stw	ra,20(sp)
  80c600:	df000415 	stw	fp,16(sp)
  80c604:	df000404 	addi	fp,sp,16
  80c608:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80c60c:	e0bfff17 	ldw	r2,-4(fp)
  80c610:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80c614:	e0bffc17 	ldw	r2,-16(fp)
  80c618:	10800017 	ldw	r2,0(r2)
  80c61c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80c620:	e0bffd17 	ldw	r2,-12(fp)
  80c624:	10800204 	addi	r2,r2,8
  80c628:	10800037 	ldwio	r2,0(r2)
  80c62c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80c630:	e0bffd17 	ldw	r2,-12(fp)
  80c634:	10800204 	addi	r2,r2,8
  80c638:	0007883a 	mov	r3,zero
  80c63c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80c640:	e0bffd17 	ldw	r2,-12(fp)
  80c644:	10800204 	addi	r2,r2,8
  80c648:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80c64c:	e0bffe17 	ldw	r2,-8(fp)
  80c650:	1080200c 	andi	r2,r2,128
  80c654:	10000326 	beq	r2,zero,80c664 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80c658:	e17ffe17 	ldw	r5,-8(fp)
  80c65c:	e13ffc17 	ldw	r4,-16(fp)
  80c660:	080c6940 	call	80c694 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80c664:	e0bffe17 	ldw	r2,-8(fp)
  80c668:	1081100c 	andi	r2,r2,1088
  80c66c:	10000326 	beq	r2,zero,80c67c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80c670:	e17ffe17 	ldw	r5,-8(fp)
  80c674:	e13ffc17 	ldw	r4,-16(fp)
  80c678:	080c7780 	call	80c778 <altera_avalon_uart_txirq>
  }
  

}
  80c67c:	0001883a 	nop
  80c680:	e037883a 	mov	sp,fp
  80c684:	dfc00117 	ldw	ra,4(sp)
  80c688:	df000017 	ldw	fp,0(sp)
  80c68c:	dec00204 	addi	sp,sp,8
  80c690:	f800283a 	ret

0080c694 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80c694:	defffc04 	addi	sp,sp,-16
  80c698:	df000315 	stw	fp,12(sp)
  80c69c:	df000304 	addi	fp,sp,12
  80c6a0:	e13ffe15 	stw	r4,-8(fp)
  80c6a4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80c6a8:	e0bfff17 	ldw	r2,-4(fp)
  80c6ac:	108000cc 	andi	r2,r2,3
  80c6b0:	10002c1e 	bne	r2,zero,80c764 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80c6b4:	e0bffe17 	ldw	r2,-8(fp)
  80c6b8:	10800317 	ldw	r2,12(r2)
  80c6bc:	e0bffe17 	ldw	r2,-8(fp)
  80c6c0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80c6c4:	e0bffe17 	ldw	r2,-8(fp)
  80c6c8:	10800317 	ldw	r2,12(r2)
  80c6cc:	10800044 	addi	r2,r2,1
  80c6d0:	10800fcc 	andi	r2,r2,63
  80c6d4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80c6d8:	e0bffe17 	ldw	r2,-8(fp)
  80c6dc:	10800317 	ldw	r2,12(r2)
  80c6e0:	e0fffe17 	ldw	r3,-8(fp)
  80c6e4:	18c00017 	ldw	r3,0(r3)
  80c6e8:	18c00037 	ldwio	r3,0(r3)
  80c6ec:	1809883a 	mov	r4,r3
  80c6f0:	e0fffe17 	ldw	r3,-8(fp)
  80c6f4:	1885883a 	add	r2,r3,r2
  80c6f8:	10800704 	addi	r2,r2,28
  80c6fc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80c700:	e0bffe17 	ldw	r2,-8(fp)
  80c704:	e0fffd17 	ldw	r3,-12(fp)
  80c708:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80c70c:	e0bffe17 	ldw	r2,-8(fp)
  80c710:	10800317 	ldw	r2,12(r2)
  80c714:	10800044 	addi	r2,r2,1
  80c718:	10800fcc 	andi	r2,r2,63
  80c71c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80c720:	e0bffe17 	ldw	r2,-8(fp)
  80c724:	10c00217 	ldw	r3,8(r2)
  80c728:	e0bffd17 	ldw	r2,-12(fp)
  80c72c:	18800e1e 	bne	r3,r2,80c768 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80c730:	e0bffe17 	ldw	r2,-8(fp)
  80c734:	10c00117 	ldw	r3,4(r2)
  80c738:	00bfdfc4 	movi	r2,-129
  80c73c:	1886703a 	and	r3,r3,r2
  80c740:	e0bffe17 	ldw	r2,-8(fp)
  80c744:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80c748:	e0bffe17 	ldw	r2,-8(fp)
  80c74c:	10800017 	ldw	r2,0(r2)
  80c750:	10800304 	addi	r2,r2,12
  80c754:	e0fffe17 	ldw	r3,-8(fp)
  80c758:	18c00117 	ldw	r3,4(r3)
  80c75c:	10c00035 	stwio	r3,0(r2)
  80c760:	00000106 	br	80c768 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80c764:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80c768:	e037883a 	mov	sp,fp
  80c76c:	df000017 	ldw	fp,0(sp)
  80c770:	dec00104 	addi	sp,sp,4
  80c774:	f800283a 	ret

0080c778 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80c778:	defffb04 	addi	sp,sp,-20
  80c77c:	df000415 	stw	fp,16(sp)
  80c780:	df000404 	addi	fp,sp,16
  80c784:	e13ffc15 	stw	r4,-16(fp)
  80c788:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80c78c:	e0bffc17 	ldw	r2,-16(fp)
  80c790:	10c00417 	ldw	r3,16(r2)
  80c794:	e0bffc17 	ldw	r2,-16(fp)
  80c798:	10800517 	ldw	r2,20(r2)
  80c79c:	18803226 	beq	r3,r2,80c868 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80c7a0:	e0bffc17 	ldw	r2,-16(fp)
  80c7a4:	10800617 	ldw	r2,24(r2)
  80c7a8:	1080008c 	andi	r2,r2,2
  80c7ac:	10000326 	beq	r2,zero,80c7bc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80c7b0:	e0bffd17 	ldw	r2,-12(fp)
  80c7b4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80c7b8:	10001d26 	beq	r2,zero,80c830 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80c7bc:	e0bffc17 	ldw	r2,-16(fp)
  80c7c0:	10800417 	ldw	r2,16(r2)
  80c7c4:	e0bffc17 	ldw	r2,-16(fp)
  80c7c8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80c7cc:	e0bffc17 	ldw	r2,-16(fp)
  80c7d0:	10800017 	ldw	r2,0(r2)
  80c7d4:	10800104 	addi	r2,r2,4
  80c7d8:	e0fffc17 	ldw	r3,-16(fp)
  80c7dc:	18c00417 	ldw	r3,16(r3)
  80c7e0:	e13ffc17 	ldw	r4,-16(fp)
  80c7e4:	20c7883a 	add	r3,r4,r3
  80c7e8:	18c01704 	addi	r3,r3,92
  80c7ec:	18c00003 	ldbu	r3,0(r3)
  80c7f0:	18c03fcc 	andi	r3,r3,255
  80c7f4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80c7f8:	e0bffc17 	ldw	r2,-16(fp)
  80c7fc:	10800417 	ldw	r2,16(r2)
  80c800:	10800044 	addi	r2,r2,1
  80c804:	e0fffc17 	ldw	r3,-16(fp)
  80c808:	18800415 	stw	r2,16(r3)
  80c80c:	10c00fcc 	andi	r3,r2,63
  80c810:	e0bffc17 	ldw	r2,-16(fp)
  80c814:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80c818:	e0bffc17 	ldw	r2,-16(fp)
  80c81c:	10800117 	ldw	r2,4(r2)
  80c820:	10c01014 	ori	r3,r2,64
  80c824:	e0bffc17 	ldw	r2,-16(fp)
  80c828:	10c00115 	stw	r3,4(r2)
  80c82c:	00000e06 	br	80c868 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80c830:	e0bffc17 	ldw	r2,-16(fp)
  80c834:	10800017 	ldw	r2,0(r2)
  80c838:	10800204 	addi	r2,r2,8
  80c83c:	10800037 	ldwio	r2,0(r2)
  80c840:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80c844:	e0bffd17 	ldw	r2,-12(fp)
  80c848:	1082000c 	andi	r2,r2,2048
  80c84c:	1000061e 	bne	r2,zero,80c868 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80c850:	e0bffc17 	ldw	r2,-16(fp)
  80c854:	10c00117 	ldw	r3,4(r2)
  80c858:	00bfefc4 	movi	r2,-65
  80c85c:	1886703a 	and	r3,r3,r2
  80c860:	e0bffc17 	ldw	r2,-16(fp)
  80c864:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80c868:	e0bffc17 	ldw	r2,-16(fp)
  80c86c:	10c00417 	ldw	r3,16(r2)
  80c870:	e0bffc17 	ldw	r2,-16(fp)
  80c874:	10800517 	ldw	r2,20(r2)
  80c878:	1880061e 	bne	r3,r2,80c894 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80c87c:	e0bffc17 	ldw	r2,-16(fp)
  80c880:	10c00117 	ldw	r3,4(r2)
  80c884:	00beefc4 	movi	r2,-1089
  80c888:	1886703a 	and	r3,r3,r2
  80c88c:	e0bffc17 	ldw	r2,-16(fp)
  80c890:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80c894:	e0bffc17 	ldw	r2,-16(fp)
  80c898:	10800017 	ldw	r2,0(r2)
  80c89c:	10800304 	addi	r2,r2,12
  80c8a0:	e0fffc17 	ldw	r3,-16(fp)
  80c8a4:	18c00117 	ldw	r3,4(r3)
  80c8a8:	10c00035 	stwio	r3,0(r2)
}
  80c8ac:	0001883a 	nop
  80c8b0:	e037883a 	mov	sp,fp
  80c8b4:	df000017 	ldw	fp,0(sp)
  80c8b8:	dec00104 	addi	sp,sp,4
  80c8bc:	f800283a 	ret

0080c8c0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80c8c0:	defffd04 	addi	sp,sp,-12
  80c8c4:	df000215 	stw	fp,8(sp)
  80c8c8:	df000204 	addi	fp,sp,8
  80c8cc:	e13ffe15 	stw	r4,-8(fp)
  80c8d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80c8d4:	00000506 	br	80c8ec <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80c8d8:	e0bfff17 	ldw	r2,-4(fp)
  80c8dc:	1090000c 	andi	r2,r2,16384
  80c8e0:	10000226 	beq	r2,zero,80c8ec <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80c8e4:	00bffd44 	movi	r2,-11
  80c8e8:	00000606 	br	80c904 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80c8ec:	e0bffe17 	ldw	r2,-8(fp)
  80c8f0:	10c00417 	ldw	r3,16(r2)
  80c8f4:	e0bffe17 	ldw	r2,-8(fp)
  80c8f8:	10800517 	ldw	r2,20(r2)
  80c8fc:	18bff61e 	bne	r3,r2,80c8d8 <__alt_mem_onchip_mem+0xff8048d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c900:	0005883a 	mov	r2,zero
}
  80c904:	e037883a 	mov	sp,fp
  80c908:	df000017 	ldw	fp,0(sp)
  80c90c:	dec00104 	addi	sp,sp,4
  80c910:	f800283a 	ret

0080c914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c914:	defffe04 	addi	sp,sp,-8
  80c918:	dfc00115 	stw	ra,4(sp)
  80c91c:	df000015 	stw	fp,0(sp)
  80c920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c924:	d0a00917 	ldw	r2,-32732(gp)
  80c928:	10000326 	beq	r2,zero,80c938 <alt_get_errno+0x24>
  80c92c:	d0a00917 	ldw	r2,-32732(gp)
  80c930:	103ee83a 	callr	r2
  80c934:	00000106 	br	80c93c <alt_get_errno+0x28>
  80c938:	d0a73004 	addi	r2,gp,-25408
}
  80c93c:	e037883a 	mov	sp,fp
  80c940:	dfc00117 	ldw	ra,4(sp)
  80c944:	df000017 	ldw	fp,0(sp)
  80c948:	dec00204 	addi	sp,sp,8
  80c94c:	f800283a 	ret

0080c950 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80c950:	defff204 	addi	sp,sp,-56
  80c954:	dfc00d15 	stw	ra,52(sp)
  80c958:	df000c15 	stw	fp,48(sp)
  80c95c:	df000c04 	addi	fp,sp,48
  80c960:	e13ffc15 	stw	r4,-16(fp)
  80c964:	e17ffd15 	stw	r5,-12(fp)
  80c968:	e1bffe15 	stw	r6,-8(fp)
  80c96c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80c970:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80c974:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80c978:	e0bfff17 	ldw	r2,-4(fp)
  80c97c:	1090000c 	andi	r2,r2,16384
  80c980:	1005003a 	cmpeq	r2,r2,zero
  80c984:	10803fcc 	andi	r2,r2,255
  80c988:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80c98c:	00001306 	br	80c9dc <altera_avalon_uart_read+0x8c>
    {
      count++;
  80c990:	e0bff517 	ldw	r2,-44(fp)
  80c994:	10800044 	addi	r2,r2,1
  80c998:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80c99c:	e0bffd17 	ldw	r2,-12(fp)
  80c9a0:	10c00044 	addi	r3,r2,1
  80c9a4:	e0fffd15 	stw	r3,-12(fp)
  80c9a8:	e0fffc17 	ldw	r3,-16(fp)
  80c9ac:	18c00217 	ldw	r3,8(r3)
  80c9b0:	e13ffc17 	ldw	r4,-16(fp)
  80c9b4:	20c7883a 	add	r3,r4,r3
  80c9b8:	18c00704 	addi	r3,r3,28
  80c9bc:	18c00003 	ldbu	r3,0(r3)
  80c9c0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80c9c4:	e0bffc17 	ldw	r2,-16(fp)
  80c9c8:	10800217 	ldw	r2,8(r2)
  80c9cc:	10800044 	addi	r2,r2,1
  80c9d0:	10c00fcc 	andi	r3,r2,63
  80c9d4:	e0bffc17 	ldw	r2,-16(fp)
  80c9d8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80c9dc:	e0fff517 	ldw	r3,-44(fp)
  80c9e0:	e0bffe17 	ldw	r2,-8(fp)
  80c9e4:	1880050e 	bge	r3,r2,80c9fc <altera_avalon_uart_read+0xac>
  80c9e8:	e0bffc17 	ldw	r2,-16(fp)
  80c9ec:	10c00217 	ldw	r3,8(r2)
  80c9f0:	e0bffc17 	ldw	r2,-16(fp)
  80c9f4:	10800317 	ldw	r2,12(r2)
  80c9f8:	18bfe51e 	bne	r3,r2,80c990 <__alt_mem_onchip_mem+0xff804990>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80c9fc:	e0bff517 	ldw	r2,-44(fp)
  80ca00:	1000251e 	bne	r2,zero,80ca98 <altera_avalon_uart_read+0x148>
  80ca04:	e0bffc17 	ldw	r2,-16(fp)
  80ca08:	10c00217 	ldw	r3,8(r2)
  80ca0c:	e0bffc17 	ldw	r2,-16(fp)
  80ca10:	10800317 	ldw	r2,12(r2)
  80ca14:	1880201e 	bne	r3,r2,80ca98 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80ca18:	e0bff617 	ldw	r2,-40(fp)
  80ca1c:	1000071e 	bne	r2,zero,80ca3c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80ca20:	080c9140 	call	80c914 <alt_get_errno>
  80ca24:	1007883a 	mov	r3,r2
  80ca28:	008002c4 	movi	r2,11
  80ca2c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80ca30:	00800044 	movi	r2,1
  80ca34:	e0bff405 	stb	r2,-48(fp)
        break;
  80ca38:	00001b06 	br	80caa8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ca3c:	0005303a 	rdctl	r2,status
  80ca40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca44:	e0fff917 	ldw	r3,-28(fp)
  80ca48:	00bfff84 	movi	r2,-2
  80ca4c:	1884703a 	and	r2,r3,r2
  80ca50:	1001703a 	wrctl	status,r2
  
  return context;
  80ca54:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80ca58:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80ca5c:	e0bffc17 	ldw	r2,-16(fp)
  80ca60:	10800117 	ldw	r2,4(r2)
  80ca64:	10c02014 	ori	r3,r2,128
  80ca68:	e0bffc17 	ldw	r2,-16(fp)
  80ca6c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80ca70:	e0bffc17 	ldw	r2,-16(fp)
  80ca74:	10800017 	ldw	r2,0(r2)
  80ca78:	10800304 	addi	r2,r2,12
  80ca7c:	e0fffc17 	ldw	r3,-16(fp)
  80ca80:	18c00117 	ldw	r3,4(r3)
  80ca84:	10c00035 	stwio	r3,0(r2)
  80ca88:	e0bff817 	ldw	r2,-32(fp)
  80ca8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ca90:	e0bffa17 	ldw	r2,-24(fp)
  80ca94:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80ca98:	e0bff517 	ldw	r2,-44(fp)
  80ca9c:	1000021e 	bne	r2,zero,80caa8 <altera_avalon_uart_read+0x158>
  80caa0:	e0bffe17 	ldw	r2,-8(fp)
  80caa4:	103fcd1e 	bne	r2,zero,80c9dc <__alt_mem_onchip_mem+0xff8049dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80caa8:	0005303a 	rdctl	r2,status
  80caac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cab0:	e0fffb17 	ldw	r3,-20(fp)
  80cab4:	00bfff84 	movi	r2,-2
  80cab8:	1884703a 	and	r2,r3,r2
  80cabc:	1001703a 	wrctl	status,r2
  
  return context;
  80cac0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80cac4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80cac8:	e0bffc17 	ldw	r2,-16(fp)
  80cacc:	10800117 	ldw	r2,4(r2)
  80cad0:	10c02014 	ori	r3,r2,128
  80cad4:	e0bffc17 	ldw	r2,-16(fp)
  80cad8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80cadc:	e0bffc17 	ldw	r2,-16(fp)
  80cae0:	10800017 	ldw	r2,0(r2)
  80cae4:	10800304 	addi	r2,r2,12
  80cae8:	e0fffc17 	ldw	r3,-16(fp)
  80caec:	18c00117 	ldw	r3,4(r3)
  80caf0:	10c00035 	stwio	r3,0(r2)
  80caf4:	e0bff817 	ldw	r2,-32(fp)
  80caf8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cafc:	e0bff717 	ldw	r2,-36(fp)
  80cb00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80cb04:	e0bff403 	ldbu	r2,-48(fp)
  80cb08:	10000226 	beq	r2,zero,80cb14 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80cb0c:	00bffd44 	movi	r2,-11
  80cb10:	00000106 	br	80cb18 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80cb14:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80cb18:	e037883a 	mov	sp,fp
  80cb1c:	dfc00117 	ldw	ra,4(sp)
  80cb20:	df000017 	ldw	fp,0(sp)
  80cb24:	dec00204 	addi	sp,sp,8
  80cb28:	f800283a 	ret

0080cb2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cb2c:	defffe04 	addi	sp,sp,-8
  80cb30:	dfc00115 	stw	ra,4(sp)
  80cb34:	df000015 	stw	fp,0(sp)
  80cb38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80cb3c:	d0a00917 	ldw	r2,-32732(gp)
  80cb40:	10000326 	beq	r2,zero,80cb50 <alt_get_errno+0x24>
  80cb44:	d0a00917 	ldw	r2,-32732(gp)
  80cb48:	103ee83a 	callr	r2
  80cb4c:	00000106 	br	80cb54 <alt_get_errno+0x28>
  80cb50:	d0a73004 	addi	r2,gp,-25408
}
  80cb54:	e037883a 	mov	sp,fp
  80cb58:	dfc00117 	ldw	ra,4(sp)
  80cb5c:	df000017 	ldw	fp,0(sp)
  80cb60:	dec00204 	addi	sp,sp,8
  80cb64:	f800283a 	ret

0080cb68 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80cb68:	defff204 	addi	sp,sp,-56
  80cb6c:	dfc00d15 	stw	ra,52(sp)
  80cb70:	df000c15 	stw	fp,48(sp)
  80cb74:	df000c04 	addi	fp,sp,48
  80cb78:	e13ffc15 	stw	r4,-16(fp)
  80cb7c:	e17ffd15 	stw	r5,-12(fp)
  80cb80:	e1bffe15 	stw	r6,-8(fp)
  80cb84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80cb88:	e0bffe17 	ldw	r2,-8(fp)
  80cb8c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80cb90:	e0bfff17 	ldw	r2,-4(fp)
  80cb94:	1090000c 	andi	r2,r2,16384
  80cb98:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80cb9c:	00003c06 	br	80cc90 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80cba0:	e0bffc17 	ldw	r2,-16(fp)
  80cba4:	10800517 	ldw	r2,20(r2)
  80cba8:	10800044 	addi	r2,r2,1
  80cbac:	10800fcc 	andi	r2,r2,63
  80cbb0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80cbb4:	e0bffc17 	ldw	r2,-16(fp)
  80cbb8:	10c00417 	ldw	r3,16(r2)
  80cbbc:	e0bff717 	ldw	r2,-36(fp)
  80cbc0:	1880221e 	bne	r3,r2,80cc4c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80cbc4:	e0bff517 	ldw	r2,-44(fp)
  80cbc8:	10000526 	beq	r2,zero,80cbe0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80cbcc:	080cb2c0 	call	80cb2c <alt_get_errno>
  80cbd0:	1007883a 	mov	r3,r2
  80cbd4:	008002c4 	movi	r2,11
  80cbd8:	18800015 	stw	r2,0(r3)
        break;
  80cbdc:	00002e06 	br	80cc98 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cbe0:	0005303a 	rdctl	r2,status
  80cbe4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cbe8:	e0fff917 	ldw	r3,-28(fp)
  80cbec:	00bfff84 	movi	r2,-2
  80cbf0:	1884703a 	and	r2,r3,r2
  80cbf4:	1001703a 	wrctl	status,r2
  
  return context;
  80cbf8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80cbfc:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80cc00:	e0bffc17 	ldw	r2,-16(fp)
  80cc04:	10800117 	ldw	r2,4(r2)
  80cc08:	10c11014 	ori	r3,r2,1088
  80cc0c:	e0bffc17 	ldw	r2,-16(fp)
  80cc10:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80cc14:	e0bffc17 	ldw	r2,-16(fp)
  80cc18:	10800017 	ldw	r2,0(r2)
  80cc1c:	10800304 	addi	r2,r2,12
  80cc20:	e0fffc17 	ldw	r3,-16(fp)
  80cc24:	18c00117 	ldw	r3,4(r3)
  80cc28:	10c00035 	stwio	r3,0(r2)
  80cc2c:	e0bff817 	ldw	r2,-32(fp)
  80cc30:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cc34:	e0bff617 	ldw	r2,-40(fp)
  80cc38:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80cc3c:	e0bffc17 	ldw	r2,-16(fp)
  80cc40:	10c00417 	ldw	r3,16(r2)
  80cc44:	e0bff717 	ldw	r2,-36(fp)
  80cc48:	18bffc26 	beq	r3,r2,80cc3c <__alt_mem_onchip_mem+0xff804c3c>
      }
    }

    count--;
  80cc4c:	e0bff417 	ldw	r2,-48(fp)
  80cc50:	10bfffc4 	addi	r2,r2,-1
  80cc54:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80cc58:	e0bffc17 	ldw	r2,-16(fp)
  80cc5c:	10c00517 	ldw	r3,20(r2)
  80cc60:	e0bffd17 	ldw	r2,-12(fp)
  80cc64:	11000044 	addi	r4,r2,1
  80cc68:	e13ffd15 	stw	r4,-12(fp)
  80cc6c:	10800003 	ldbu	r2,0(r2)
  80cc70:	1009883a 	mov	r4,r2
  80cc74:	e0bffc17 	ldw	r2,-16(fp)
  80cc78:	10c5883a 	add	r2,r2,r3
  80cc7c:	10801704 	addi	r2,r2,92
  80cc80:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80cc84:	e0bffc17 	ldw	r2,-16(fp)
  80cc88:	e0fff717 	ldw	r3,-36(fp)
  80cc8c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80cc90:	e0bff417 	ldw	r2,-48(fp)
  80cc94:	103fc21e 	bne	r2,zero,80cba0 <__alt_mem_onchip_mem+0xff804ba0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cc98:	0005303a 	rdctl	r2,status
  80cc9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cca0:	e0fffb17 	ldw	r3,-20(fp)
  80cca4:	00bfff84 	movi	r2,-2
  80cca8:	1884703a 	and	r2,r3,r2
  80ccac:	1001703a 	wrctl	status,r2
  
  return context;
  80ccb0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80ccb4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80ccb8:	e0bffc17 	ldw	r2,-16(fp)
  80ccbc:	10800117 	ldw	r2,4(r2)
  80ccc0:	10c11014 	ori	r3,r2,1088
  80ccc4:	e0bffc17 	ldw	r2,-16(fp)
  80ccc8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80cccc:	e0bffc17 	ldw	r2,-16(fp)
  80ccd0:	10800017 	ldw	r2,0(r2)
  80ccd4:	10800304 	addi	r2,r2,12
  80ccd8:	e0fffc17 	ldw	r3,-16(fp)
  80ccdc:	18c00117 	ldw	r3,4(r3)
  80cce0:	10c00035 	stwio	r3,0(r2)
  80cce4:	e0bff817 	ldw	r2,-32(fp)
  80cce8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ccec:	e0bffa17 	ldw	r2,-24(fp)
  80ccf0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80ccf4:	e0fffe17 	ldw	r3,-8(fp)
  80ccf8:	e0bff417 	ldw	r2,-48(fp)
  80ccfc:	1885c83a 	sub	r2,r3,r2
}
  80cd00:	e037883a 	mov	sp,fp
  80cd04:	dfc00117 	ldw	ra,4(sp)
  80cd08:	df000017 	ldw	fp,0(sp)
  80cd0c:	dec00204 	addi	sp,sp,8
  80cd10:	f800283a 	ret

0080cd14 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80cd14:	defffe04 	addi	sp,sp,-8
  80cd18:	df000115 	stw	fp,4(sp)
  80cd1c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80cd20:	e03fff15 	stw	zero,-4(fp)
  80cd24:	00000506 	br	80cd3c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80cd28:	e0bfff17 	ldw	r2,-4(fp)
  80cd2c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80cd30:	e0bfff17 	ldw	r2,-4(fp)
  80cd34:	10800804 	addi	r2,r2,32
  80cd38:	e0bfff15 	stw	r2,-4(fp)
  80cd3c:	e0bfff17 	ldw	r2,-4(fp)
  80cd40:	10820030 	cmpltui	r2,r2,2048
  80cd44:	103ff81e 	bne	r2,zero,80cd28 <__alt_mem_onchip_mem+0xff804d28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80cd48:	0001883a 	nop
  80cd4c:	e037883a 	mov	sp,fp
  80cd50:	df000017 	ldw	fp,0(sp)
  80cd54:	dec00104 	addi	sp,sp,4
  80cd58:	f800283a 	ret

0080cd5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cd5c:	defffe04 	addi	sp,sp,-8
  80cd60:	dfc00115 	stw	ra,4(sp)
  80cd64:	df000015 	stw	fp,0(sp)
  80cd68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80cd6c:	d0a00917 	ldw	r2,-32732(gp)
  80cd70:	10000326 	beq	r2,zero,80cd80 <alt_get_errno+0x24>
  80cd74:	d0a00917 	ldw	r2,-32732(gp)
  80cd78:	103ee83a 	callr	r2
  80cd7c:	00000106 	br	80cd84 <alt_get_errno+0x28>
  80cd80:	d0a73004 	addi	r2,gp,-25408
}
  80cd84:	e037883a 	mov	sp,fp
  80cd88:	dfc00117 	ldw	ra,4(sp)
  80cd8c:	df000017 	ldw	fp,0(sp)
  80cd90:	dec00204 	addi	sp,sp,8
  80cd94:	f800283a 	ret

0080cd98 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80cd98:	defffa04 	addi	sp,sp,-24
  80cd9c:	dfc00515 	stw	ra,20(sp)
  80cda0:	df000415 	stw	fp,16(sp)
  80cda4:	df000404 	addi	fp,sp,16
  80cda8:	e13ffe15 	stw	r4,-8(fp)
  80cdac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80cdb0:	e0bffe17 	ldw	r2,-8(fp)
  80cdb4:	10000326 	beq	r2,zero,80cdc4 <alt_dev_llist_insert+0x2c>
  80cdb8:	e0bffe17 	ldw	r2,-8(fp)
  80cdbc:	10800217 	ldw	r2,8(r2)
  80cdc0:	1000061e 	bne	r2,zero,80cddc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80cdc4:	080cd5c0 	call	80cd5c <alt_get_errno>
  80cdc8:	1007883a 	mov	r3,r2
  80cdcc:	00800584 	movi	r2,22
  80cdd0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80cdd4:	00bffa84 	movi	r2,-22
  80cdd8:	00001306 	br	80ce28 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80cddc:	e0bffe17 	ldw	r2,-8(fp)
  80cde0:	e0ffff17 	ldw	r3,-4(fp)
  80cde4:	e0fffc15 	stw	r3,-16(fp)
  80cde8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80cdec:	e0bffd17 	ldw	r2,-12(fp)
  80cdf0:	e0fffc17 	ldw	r3,-16(fp)
  80cdf4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80cdf8:	e0bffc17 	ldw	r2,-16(fp)
  80cdfc:	10c00017 	ldw	r3,0(r2)
  80ce00:	e0bffd17 	ldw	r2,-12(fp)
  80ce04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ce08:	e0bffc17 	ldw	r2,-16(fp)
  80ce0c:	10800017 	ldw	r2,0(r2)
  80ce10:	e0fffd17 	ldw	r3,-12(fp)
  80ce14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80ce18:	e0bffc17 	ldw	r2,-16(fp)
  80ce1c:	e0fffd17 	ldw	r3,-12(fp)
  80ce20:	10c00015 	stw	r3,0(r2)

  return 0;  
  80ce24:	0005883a 	mov	r2,zero
}
  80ce28:	e037883a 	mov	sp,fp
  80ce2c:	dfc00117 	ldw	ra,4(sp)
  80ce30:	df000017 	ldw	fp,0(sp)
  80ce34:	dec00204 	addi	sp,sp,8
  80ce38:	f800283a 	ret

0080ce3c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ce3c:	defffd04 	addi	sp,sp,-12
  80ce40:	dfc00215 	stw	ra,8(sp)
  80ce44:	df000115 	stw	fp,4(sp)
  80ce48:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ce4c:	00802074 	movhi	r2,129
  80ce50:	10b78204 	addi	r2,r2,-8696
  80ce54:	e0bfff15 	stw	r2,-4(fp)
  80ce58:	00000606 	br	80ce74 <_do_ctors+0x38>
        (*ctor) (); 
  80ce5c:	e0bfff17 	ldw	r2,-4(fp)
  80ce60:	10800017 	ldw	r2,0(r2)
  80ce64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ce68:	e0bfff17 	ldw	r2,-4(fp)
  80ce6c:	10bfff04 	addi	r2,r2,-4
  80ce70:	e0bfff15 	stw	r2,-4(fp)
  80ce74:	e0ffff17 	ldw	r3,-4(fp)
  80ce78:	00802074 	movhi	r2,129
  80ce7c:	10b78304 	addi	r2,r2,-8692
  80ce80:	18bff62e 	bgeu	r3,r2,80ce5c <__alt_mem_onchip_mem+0xff804e5c>
        (*ctor) (); 
}
  80ce84:	0001883a 	nop
  80ce88:	e037883a 	mov	sp,fp
  80ce8c:	dfc00117 	ldw	ra,4(sp)
  80ce90:	df000017 	ldw	fp,0(sp)
  80ce94:	dec00204 	addi	sp,sp,8
  80ce98:	f800283a 	ret

0080ce9c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80ce9c:	defffd04 	addi	sp,sp,-12
  80cea0:	dfc00215 	stw	ra,8(sp)
  80cea4:	df000115 	stw	fp,4(sp)
  80cea8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ceac:	00802074 	movhi	r2,129
  80ceb0:	10b78204 	addi	r2,r2,-8696
  80ceb4:	e0bfff15 	stw	r2,-4(fp)
  80ceb8:	00000606 	br	80ced4 <_do_dtors+0x38>
        (*dtor) (); 
  80cebc:	e0bfff17 	ldw	r2,-4(fp)
  80cec0:	10800017 	ldw	r2,0(r2)
  80cec4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80cec8:	e0bfff17 	ldw	r2,-4(fp)
  80cecc:	10bfff04 	addi	r2,r2,-4
  80ced0:	e0bfff15 	stw	r2,-4(fp)
  80ced4:	e0ffff17 	ldw	r3,-4(fp)
  80ced8:	00802074 	movhi	r2,129
  80cedc:	10b78304 	addi	r2,r2,-8692
  80cee0:	18bff62e 	bgeu	r3,r2,80cebc <__alt_mem_onchip_mem+0xff804ebc>
        (*dtor) (); 
}
  80cee4:	0001883a 	nop
  80cee8:	e037883a 	mov	sp,fp
  80ceec:	dfc00117 	ldw	ra,4(sp)
  80cef0:	df000017 	ldw	fp,0(sp)
  80cef4:	dec00204 	addi	sp,sp,8
  80cef8:	f800283a 	ret

0080cefc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80cefc:	defffe04 	addi	sp,sp,-8
  80cf00:	dfc00115 	stw	ra,4(sp)
  80cf04:	df000015 	stw	fp,0(sp)
  80cf08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80cf0c:	01440004 	movi	r5,4096
  80cf10:	0009883a 	mov	r4,zero
  80cf14:	080d94c0 	call	80d94c <alt_icache_flush>
#endif
}
  80cf18:	0001883a 	nop
  80cf1c:	e037883a 	mov	sp,fp
  80cf20:	dfc00117 	ldw	ra,4(sp)
  80cf24:	df000017 	ldw	fp,0(sp)
  80cf28:	dec00204 	addi	sp,sp,8
  80cf2c:	f800283a 	ret

0080cf30 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80cf30:	defff904 	addi	sp,sp,-28
  80cf34:	dfc00615 	stw	ra,24(sp)
  80cf38:	df000515 	stw	fp,20(sp)
  80cf3c:	df000504 	addi	fp,sp,20
  80cf40:	e13ffc15 	stw	r4,-16(fp)
  80cf44:	e17ffd15 	stw	r5,-12(fp)
  80cf48:	e1bffe15 	stw	r6,-8(fp)
  80cf4c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80cf50:	e0800217 	ldw	r2,8(fp)
  80cf54:	d8800015 	stw	r2,0(sp)
  80cf58:	e1ffff17 	ldw	r7,-4(fp)
  80cf5c:	e1bffe17 	ldw	r6,-8(fp)
  80cf60:	e17ffd17 	ldw	r5,-12(fp)
  80cf64:	e13ffc17 	ldw	r4,-16(fp)
  80cf68:	080d0e00 	call	80d0e0 <alt_iic_isr_register>
}  
  80cf6c:	e037883a 	mov	sp,fp
  80cf70:	dfc00117 	ldw	ra,4(sp)
  80cf74:	df000017 	ldw	fp,0(sp)
  80cf78:	dec00204 	addi	sp,sp,8
  80cf7c:	f800283a 	ret

0080cf80 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80cf80:	defff904 	addi	sp,sp,-28
  80cf84:	df000615 	stw	fp,24(sp)
  80cf88:	df000604 	addi	fp,sp,24
  80cf8c:	e13ffe15 	stw	r4,-8(fp)
  80cf90:	e17fff15 	stw	r5,-4(fp)
  80cf94:	e0bfff17 	ldw	r2,-4(fp)
  80cf98:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cf9c:	0005303a 	rdctl	r2,status
  80cfa0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cfa4:	e0fffb17 	ldw	r3,-20(fp)
  80cfa8:	00bfff84 	movi	r2,-2
  80cfac:	1884703a 	and	r2,r3,r2
  80cfb0:	1001703a 	wrctl	status,r2
  
  return context;
  80cfb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80cfb8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80cfbc:	00c00044 	movi	r3,1
  80cfc0:	e0bffa17 	ldw	r2,-24(fp)
  80cfc4:	1884983a 	sll	r2,r3,r2
  80cfc8:	1007883a 	mov	r3,r2
  80cfcc:	d0a73117 	ldw	r2,-25404(gp)
  80cfd0:	1884b03a 	or	r2,r3,r2
  80cfd4:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80cfd8:	d0a73117 	ldw	r2,-25404(gp)
  80cfdc:	100170fa 	wrctl	ienable,r2
  80cfe0:	e0bffc17 	ldw	r2,-16(fp)
  80cfe4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cfe8:	e0bffd17 	ldw	r2,-12(fp)
  80cfec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80cff0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80cff4:	0001883a 	nop
}
  80cff8:	e037883a 	mov	sp,fp
  80cffc:	df000017 	ldw	fp,0(sp)
  80d000:	dec00104 	addi	sp,sp,4
  80d004:	f800283a 	ret

0080d008 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80d008:	defff904 	addi	sp,sp,-28
  80d00c:	df000615 	stw	fp,24(sp)
  80d010:	df000604 	addi	fp,sp,24
  80d014:	e13ffe15 	stw	r4,-8(fp)
  80d018:	e17fff15 	stw	r5,-4(fp)
  80d01c:	e0bfff17 	ldw	r2,-4(fp)
  80d020:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d024:	0005303a 	rdctl	r2,status
  80d028:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d02c:	e0fffb17 	ldw	r3,-20(fp)
  80d030:	00bfff84 	movi	r2,-2
  80d034:	1884703a 	and	r2,r3,r2
  80d038:	1001703a 	wrctl	status,r2
  
  return context;
  80d03c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d040:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80d044:	00c00044 	movi	r3,1
  80d048:	e0bffa17 	ldw	r2,-24(fp)
  80d04c:	1884983a 	sll	r2,r3,r2
  80d050:	0084303a 	nor	r2,zero,r2
  80d054:	1007883a 	mov	r3,r2
  80d058:	d0a73117 	ldw	r2,-25404(gp)
  80d05c:	1884703a 	and	r2,r3,r2
  80d060:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d064:	d0a73117 	ldw	r2,-25404(gp)
  80d068:	100170fa 	wrctl	ienable,r2
  80d06c:	e0bffc17 	ldw	r2,-16(fp)
  80d070:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d074:	e0bffd17 	ldw	r2,-12(fp)
  80d078:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d07c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80d080:	0001883a 	nop
}
  80d084:	e037883a 	mov	sp,fp
  80d088:	df000017 	ldw	fp,0(sp)
  80d08c:	dec00104 	addi	sp,sp,4
  80d090:	f800283a 	ret

0080d094 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80d094:	defffc04 	addi	sp,sp,-16
  80d098:	df000315 	stw	fp,12(sp)
  80d09c:	df000304 	addi	fp,sp,12
  80d0a0:	e13ffe15 	stw	r4,-8(fp)
  80d0a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80d0a8:	000530fa 	rdctl	r2,ienable
  80d0ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80d0b0:	00c00044 	movi	r3,1
  80d0b4:	e0bfff17 	ldw	r2,-4(fp)
  80d0b8:	1884983a 	sll	r2,r3,r2
  80d0bc:	1007883a 	mov	r3,r2
  80d0c0:	e0bffd17 	ldw	r2,-12(fp)
  80d0c4:	1884703a 	and	r2,r3,r2
  80d0c8:	1004c03a 	cmpne	r2,r2,zero
  80d0cc:	10803fcc 	andi	r2,r2,255
}
  80d0d0:	e037883a 	mov	sp,fp
  80d0d4:	df000017 	ldw	fp,0(sp)
  80d0d8:	dec00104 	addi	sp,sp,4
  80d0dc:	f800283a 	ret

0080d0e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80d0e0:	defff504 	addi	sp,sp,-44
  80d0e4:	dfc00a15 	stw	ra,40(sp)
  80d0e8:	df000915 	stw	fp,36(sp)
  80d0ec:	df000904 	addi	fp,sp,36
  80d0f0:	e13ffc15 	stw	r4,-16(fp)
  80d0f4:	e17ffd15 	stw	r5,-12(fp)
  80d0f8:	e1bffe15 	stw	r6,-8(fp)
  80d0fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80d100:	00bffa84 	movi	r2,-22
  80d104:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80d108:	e0bffd17 	ldw	r2,-12(fp)
  80d10c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80d110:	e0bff817 	ldw	r2,-32(fp)
  80d114:	10800808 	cmpgei	r2,r2,32
  80d118:	1000271e 	bne	r2,zero,80d1b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d11c:	0005303a 	rdctl	r2,status
  80d120:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d124:	e0fffb17 	ldw	r3,-20(fp)
  80d128:	00bfff84 	movi	r2,-2
  80d12c:	1884703a 	and	r2,r3,r2
  80d130:	1001703a 	wrctl	status,r2
  
  return context;
  80d134:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80d138:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80d13c:	00802074 	movhi	r2,129
  80d140:	10870e04 	addi	r2,r2,7224
  80d144:	e0fff817 	ldw	r3,-32(fp)
  80d148:	180690fa 	slli	r3,r3,3
  80d14c:	10c5883a 	add	r2,r2,r3
  80d150:	e0fffe17 	ldw	r3,-8(fp)
  80d154:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80d158:	00802074 	movhi	r2,129
  80d15c:	10870e04 	addi	r2,r2,7224
  80d160:	e0fff817 	ldw	r3,-32(fp)
  80d164:	180690fa 	slli	r3,r3,3
  80d168:	10c5883a 	add	r2,r2,r3
  80d16c:	10800104 	addi	r2,r2,4
  80d170:	e0ffff17 	ldw	r3,-4(fp)
  80d174:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80d178:	e0bffe17 	ldw	r2,-8(fp)
  80d17c:	10000526 	beq	r2,zero,80d194 <alt_iic_isr_register+0xb4>
  80d180:	e0bff817 	ldw	r2,-32(fp)
  80d184:	100b883a 	mov	r5,r2
  80d188:	e13ffc17 	ldw	r4,-16(fp)
  80d18c:	080cf800 	call	80cf80 <alt_ic_irq_enable>
  80d190:	00000406 	br	80d1a4 <alt_iic_isr_register+0xc4>
  80d194:	e0bff817 	ldw	r2,-32(fp)
  80d198:	100b883a 	mov	r5,r2
  80d19c:	e13ffc17 	ldw	r4,-16(fp)
  80d1a0:	080d0080 	call	80d008 <alt_ic_irq_disable>
  80d1a4:	e0bff715 	stw	r2,-36(fp)
  80d1a8:	e0bffa17 	ldw	r2,-24(fp)
  80d1ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d1b0:	e0bff917 	ldw	r2,-28(fp)
  80d1b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80d1b8:	e0bff717 	ldw	r2,-36(fp)
}
  80d1bc:	e037883a 	mov	sp,fp
  80d1c0:	dfc00117 	ldw	ra,4(sp)
  80d1c4:	df000017 	ldw	fp,0(sp)
  80d1c8:	dec00204 	addi	sp,sp,8
  80d1cc:	f800283a 	ret

0080d1d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80d1d0:	defff904 	addi	sp,sp,-28
  80d1d4:	dfc00615 	stw	ra,24(sp)
  80d1d8:	df000515 	stw	fp,20(sp)
  80d1dc:	df000504 	addi	fp,sp,20
  80d1e0:	e13ffc15 	stw	r4,-16(fp)
  80d1e4:	e17ffd15 	stw	r5,-12(fp)
  80d1e8:	e1bffe15 	stw	r6,-8(fp)
  80d1ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80d1f0:	e1bfff17 	ldw	r6,-4(fp)
  80d1f4:	e17ffe17 	ldw	r5,-8(fp)
  80d1f8:	e13ffd17 	ldw	r4,-12(fp)
  80d1fc:	080d4100 	call	80d410 <open>
  80d200:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80d204:	e0bffb17 	ldw	r2,-20(fp)
  80d208:	10001c16 	blt	r2,zero,80d27c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80d20c:	00802074 	movhi	r2,129
  80d210:	10badb04 	addi	r2,r2,-5268
  80d214:	e0fffb17 	ldw	r3,-20(fp)
  80d218:	18c00324 	muli	r3,r3,12
  80d21c:	10c5883a 	add	r2,r2,r3
  80d220:	10c00017 	ldw	r3,0(r2)
  80d224:	e0bffc17 	ldw	r2,-16(fp)
  80d228:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80d22c:	00802074 	movhi	r2,129
  80d230:	10badb04 	addi	r2,r2,-5268
  80d234:	e0fffb17 	ldw	r3,-20(fp)
  80d238:	18c00324 	muli	r3,r3,12
  80d23c:	10c5883a 	add	r2,r2,r3
  80d240:	10800104 	addi	r2,r2,4
  80d244:	10c00017 	ldw	r3,0(r2)
  80d248:	e0bffc17 	ldw	r2,-16(fp)
  80d24c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80d250:	00802074 	movhi	r2,129
  80d254:	10badb04 	addi	r2,r2,-5268
  80d258:	e0fffb17 	ldw	r3,-20(fp)
  80d25c:	18c00324 	muli	r3,r3,12
  80d260:	10c5883a 	add	r2,r2,r3
  80d264:	10800204 	addi	r2,r2,8
  80d268:	10c00017 	ldw	r3,0(r2)
  80d26c:	e0bffc17 	ldw	r2,-16(fp)
  80d270:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80d274:	e13ffb17 	ldw	r4,-20(fp)
  80d278:	080a5140 	call	80a514 <alt_release_fd>
  }
} 
  80d27c:	0001883a 	nop
  80d280:	e037883a 	mov	sp,fp
  80d284:	dfc00117 	ldw	ra,4(sp)
  80d288:	df000017 	ldw	fp,0(sp)
  80d28c:	dec00204 	addi	sp,sp,8
  80d290:	f800283a 	ret

0080d294 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80d294:	defffb04 	addi	sp,sp,-20
  80d298:	dfc00415 	stw	ra,16(sp)
  80d29c:	df000315 	stw	fp,12(sp)
  80d2a0:	df000304 	addi	fp,sp,12
  80d2a4:	e13ffd15 	stw	r4,-12(fp)
  80d2a8:	e17ffe15 	stw	r5,-8(fp)
  80d2ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80d2b0:	01c07fc4 	movi	r7,511
  80d2b4:	01800044 	movi	r6,1
  80d2b8:	e17ffd17 	ldw	r5,-12(fp)
  80d2bc:	01002074 	movhi	r4,129
  80d2c0:	213ade04 	addi	r4,r4,-5256
  80d2c4:	080d1d00 	call	80d1d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80d2c8:	01c07fc4 	movi	r7,511
  80d2cc:	000d883a 	mov	r6,zero
  80d2d0:	e17ffe17 	ldw	r5,-8(fp)
  80d2d4:	01002074 	movhi	r4,129
  80d2d8:	213adb04 	addi	r4,r4,-5268
  80d2dc:	080d1d00 	call	80d1d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80d2e0:	01c07fc4 	movi	r7,511
  80d2e4:	01800044 	movi	r6,1
  80d2e8:	e17fff17 	ldw	r5,-4(fp)
  80d2ec:	01002074 	movhi	r4,129
  80d2f0:	213ae104 	addi	r4,r4,-5244
  80d2f4:	080d1d00 	call	80d1d0 <alt_open_fd>
}  
  80d2f8:	0001883a 	nop
  80d2fc:	e037883a 	mov	sp,fp
  80d300:	dfc00117 	ldw	ra,4(sp)
  80d304:	df000017 	ldw	fp,0(sp)
  80d308:	dec00204 	addi	sp,sp,8
  80d30c:	f800283a 	ret

0080d310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d310:	defffe04 	addi	sp,sp,-8
  80d314:	dfc00115 	stw	ra,4(sp)
  80d318:	df000015 	stw	fp,0(sp)
  80d31c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d320:	d0a00917 	ldw	r2,-32732(gp)
  80d324:	10000326 	beq	r2,zero,80d334 <alt_get_errno+0x24>
  80d328:	d0a00917 	ldw	r2,-32732(gp)
  80d32c:	103ee83a 	callr	r2
  80d330:	00000106 	br	80d338 <alt_get_errno+0x28>
  80d334:	d0a73004 	addi	r2,gp,-25408
}
  80d338:	e037883a 	mov	sp,fp
  80d33c:	dfc00117 	ldw	ra,4(sp)
  80d340:	df000017 	ldw	fp,0(sp)
  80d344:	dec00204 	addi	sp,sp,8
  80d348:	f800283a 	ret

0080d34c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80d34c:	defffd04 	addi	sp,sp,-12
  80d350:	df000215 	stw	fp,8(sp)
  80d354:	df000204 	addi	fp,sp,8
  80d358:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80d35c:	e0bfff17 	ldw	r2,-4(fp)
  80d360:	10800217 	ldw	r2,8(r2)
  80d364:	10d00034 	orhi	r3,r2,16384
  80d368:	e0bfff17 	ldw	r2,-4(fp)
  80d36c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80d370:	e03ffe15 	stw	zero,-8(fp)
  80d374:	00001d06 	br	80d3ec <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80d378:	00802074 	movhi	r2,129
  80d37c:	10badb04 	addi	r2,r2,-5268
  80d380:	e0fffe17 	ldw	r3,-8(fp)
  80d384:	18c00324 	muli	r3,r3,12
  80d388:	10c5883a 	add	r2,r2,r3
  80d38c:	10c00017 	ldw	r3,0(r2)
  80d390:	e0bfff17 	ldw	r2,-4(fp)
  80d394:	10800017 	ldw	r2,0(r2)
  80d398:	1880111e 	bne	r3,r2,80d3e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80d39c:	00802074 	movhi	r2,129
  80d3a0:	10badb04 	addi	r2,r2,-5268
  80d3a4:	e0fffe17 	ldw	r3,-8(fp)
  80d3a8:	18c00324 	muli	r3,r3,12
  80d3ac:	10c5883a 	add	r2,r2,r3
  80d3b0:	10800204 	addi	r2,r2,8
  80d3b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80d3b8:	1000090e 	bge	r2,zero,80d3e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80d3bc:	e0bffe17 	ldw	r2,-8(fp)
  80d3c0:	10c00324 	muli	r3,r2,12
  80d3c4:	00802074 	movhi	r2,129
  80d3c8:	10badb04 	addi	r2,r2,-5268
  80d3cc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80d3d0:	e0bfff17 	ldw	r2,-4(fp)
  80d3d4:	18800226 	beq	r3,r2,80d3e0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80d3d8:	00bffcc4 	movi	r2,-13
  80d3dc:	00000806 	br	80d400 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80d3e0:	e0bffe17 	ldw	r2,-8(fp)
  80d3e4:	10800044 	addi	r2,r2,1
  80d3e8:	e0bffe15 	stw	r2,-8(fp)
  80d3ec:	d0a00817 	ldw	r2,-32736(gp)
  80d3f0:	1007883a 	mov	r3,r2
  80d3f4:	e0bffe17 	ldw	r2,-8(fp)
  80d3f8:	18bfdf2e 	bgeu	r3,r2,80d378 <__alt_mem_onchip_mem+0xff805378>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80d3fc:	0005883a 	mov	r2,zero
}
  80d400:	e037883a 	mov	sp,fp
  80d404:	df000017 	ldw	fp,0(sp)
  80d408:	dec00104 	addi	sp,sp,4
  80d40c:	f800283a 	ret

0080d410 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80d410:	defff604 	addi	sp,sp,-40
  80d414:	dfc00915 	stw	ra,36(sp)
  80d418:	df000815 	stw	fp,32(sp)
  80d41c:	df000804 	addi	fp,sp,32
  80d420:	e13ffd15 	stw	r4,-12(fp)
  80d424:	e17ffe15 	stw	r5,-8(fp)
  80d428:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80d42c:	00bfffc4 	movi	r2,-1
  80d430:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80d434:	00bffb44 	movi	r2,-19
  80d438:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80d43c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80d440:	d1600604 	addi	r5,gp,-32744
  80d444:	e13ffd17 	ldw	r4,-12(fp)
  80d448:	080d7100 	call	80d710 <alt_find_dev>
  80d44c:	e0bff815 	stw	r2,-32(fp)
  80d450:	e0bff817 	ldw	r2,-32(fp)
  80d454:	1000051e 	bne	r2,zero,80d46c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80d458:	e13ffd17 	ldw	r4,-12(fp)
  80d45c:	080d7a00 	call	80d7a0 <alt_find_file>
  80d460:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80d464:	00800044 	movi	r2,1
  80d468:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80d46c:	e0bff817 	ldw	r2,-32(fp)
  80d470:	10002926 	beq	r2,zero,80d518 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80d474:	e13ff817 	ldw	r4,-32(fp)
  80d478:	080d8a80 	call	80d8a8 <alt_get_fd>
  80d47c:	e0bff915 	stw	r2,-28(fp)
  80d480:	e0bff917 	ldw	r2,-28(fp)
  80d484:	1000030e 	bge	r2,zero,80d494 <open+0x84>
    {
      status = index;
  80d488:	e0bff917 	ldw	r2,-28(fp)
  80d48c:	e0bffa15 	stw	r2,-24(fp)
  80d490:	00002306 	br	80d520 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80d494:	e0bff917 	ldw	r2,-28(fp)
  80d498:	10c00324 	muli	r3,r2,12
  80d49c:	00802074 	movhi	r2,129
  80d4a0:	10badb04 	addi	r2,r2,-5268
  80d4a4:	1885883a 	add	r2,r3,r2
  80d4a8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80d4ac:	e0fffe17 	ldw	r3,-8(fp)
  80d4b0:	00900034 	movhi	r2,16384
  80d4b4:	10bfffc4 	addi	r2,r2,-1
  80d4b8:	1886703a 	and	r3,r3,r2
  80d4bc:	e0bffc17 	ldw	r2,-16(fp)
  80d4c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80d4c4:	e0bffb17 	ldw	r2,-20(fp)
  80d4c8:	1000051e 	bne	r2,zero,80d4e0 <open+0xd0>
  80d4cc:	e13ffc17 	ldw	r4,-16(fp)
  80d4d0:	080d34c0 	call	80d34c <alt_file_locked>
  80d4d4:	e0bffa15 	stw	r2,-24(fp)
  80d4d8:	e0bffa17 	ldw	r2,-24(fp)
  80d4dc:	10001016 	blt	r2,zero,80d520 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80d4e0:	e0bff817 	ldw	r2,-32(fp)
  80d4e4:	10800317 	ldw	r2,12(r2)
  80d4e8:	10000826 	beq	r2,zero,80d50c <open+0xfc>
  80d4ec:	e0bff817 	ldw	r2,-32(fp)
  80d4f0:	10800317 	ldw	r2,12(r2)
  80d4f4:	e1ffff17 	ldw	r7,-4(fp)
  80d4f8:	e1bffe17 	ldw	r6,-8(fp)
  80d4fc:	e17ffd17 	ldw	r5,-12(fp)
  80d500:	e13ffc17 	ldw	r4,-16(fp)
  80d504:	103ee83a 	callr	r2
  80d508:	00000106 	br	80d510 <open+0x100>
  80d50c:	0005883a 	mov	r2,zero
  80d510:	e0bffa15 	stw	r2,-24(fp)
  80d514:	00000206 	br	80d520 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80d518:	00bffb44 	movi	r2,-19
  80d51c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80d520:	e0bffa17 	ldw	r2,-24(fp)
  80d524:	1000090e 	bge	r2,zero,80d54c <open+0x13c>
  {
    alt_release_fd (index);  
  80d528:	e13ff917 	ldw	r4,-28(fp)
  80d52c:	080a5140 	call	80a514 <alt_release_fd>
    ALT_ERRNO = -status;
  80d530:	080d3100 	call	80d310 <alt_get_errno>
  80d534:	1007883a 	mov	r3,r2
  80d538:	e0bffa17 	ldw	r2,-24(fp)
  80d53c:	0085c83a 	sub	r2,zero,r2
  80d540:	18800015 	stw	r2,0(r3)
    return -1;
  80d544:	00bfffc4 	movi	r2,-1
  80d548:	00000106 	br	80d550 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80d54c:	e0bff917 	ldw	r2,-28(fp)
}
  80d550:	e037883a 	mov	sp,fp
  80d554:	dfc00117 	ldw	ra,4(sp)
  80d558:	df000017 	ldw	fp,0(sp)
  80d55c:	dec00204 	addi	sp,sp,8
  80d560:	f800283a 	ret

0080d564 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80d564:	defffd04 	addi	sp,sp,-12
  80d568:	dfc00215 	stw	ra,8(sp)
  80d56c:	df000115 	stw	fp,4(sp)
  80d570:	df000104 	addi	fp,sp,4
  80d574:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80d578:	e13fff17 	ldw	r4,-4(fp)
  80d57c:	080d5b80 	call	80d5b8 <alt_busy_sleep>
}
  80d580:	e037883a 	mov	sp,fp
  80d584:	dfc00117 	ldw	ra,4(sp)
  80d588:	df000017 	ldw	fp,0(sp)
  80d58c:	dec00204 	addi	sp,sp,8
  80d590:	f800283a 	ret

0080d594 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80d594:	deffff04 	addi	sp,sp,-4
  80d598:	df000015 	stw	fp,0(sp)
  80d59c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80d5a0:	000170fa 	wrctl	ienable,zero
}
  80d5a4:	0001883a 	nop
  80d5a8:	e037883a 	mov	sp,fp
  80d5ac:	df000017 	ldw	fp,0(sp)
  80d5b0:	dec00104 	addi	sp,sp,4
  80d5b4:	f800283a 	ret

0080d5b8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80d5b8:	defffa04 	addi	sp,sp,-24
  80d5bc:	dfc00515 	stw	ra,20(sp)
  80d5c0:	df000415 	stw	fp,16(sp)
  80d5c4:	df000404 	addi	fp,sp,16
  80d5c8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80d5cc:	008000c4 	movi	r2,3
  80d5d0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80d5d4:	e0fffd17 	ldw	r3,-12(fp)
  80d5d8:	008003f4 	movhi	r2,15
  80d5dc:	10909004 	addi	r2,r2,16960
  80d5e0:	1885383a 	mul	r2,r3,r2
  80d5e4:	100b883a 	mov	r5,r2
  80d5e8:	0100bef4 	movhi	r4,763
  80d5ec:	213c2004 	addi	r4,r4,-3968
  80d5f0:	0809ab00 	call	809ab0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80d5f4:	100b883a 	mov	r5,r2
  80d5f8:	01200034 	movhi	r4,32768
  80d5fc:	213fffc4 	addi	r4,r4,-1
  80d600:	0809ab00 	call	809ab0 <__udivsi3>
  80d604:	100b883a 	mov	r5,r2
  80d608:	e13fff17 	ldw	r4,-4(fp)
  80d60c:	0809ab00 	call	809ab0 <__udivsi3>
  80d610:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80d614:	e0bffe17 	ldw	r2,-8(fp)
  80d618:	10002a26 	beq	r2,zero,80d6c4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80d61c:	e03ffc15 	stw	zero,-16(fp)
  80d620:	00001706 	br	80d680 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80d624:	00a00034 	movhi	r2,32768
  80d628:	10bfffc4 	addi	r2,r2,-1
  80d62c:	10bfffc4 	addi	r2,r2,-1
  80d630:	103ffe1e 	bne	r2,zero,80d62c <__alt_mem_onchip_mem+0xff80562c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80d634:	e0fffd17 	ldw	r3,-12(fp)
  80d638:	008003f4 	movhi	r2,15
  80d63c:	10909004 	addi	r2,r2,16960
  80d640:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80d644:	100b883a 	mov	r5,r2
  80d648:	0100bef4 	movhi	r4,763
  80d64c:	213c2004 	addi	r4,r4,-3968
  80d650:	0809ab00 	call	809ab0 <__udivsi3>
  80d654:	100b883a 	mov	r5,r2
  80d658:	01200034 	movhi	r4,32768
  80d65c:	213fffc4 	addi	r4,r4,-1
  80d660:	0809ab00 	call	809ab0 <__udivsi3>
  80d664:	1007883a 	mov	r3,r2
  80d668:	e0bfff17 	ldw	r2,-4(fp)
  80d66c:	10c5c83a 	sub	r2,r2,r3
  80d670:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80d674:	e0bffc17 	ldw	r2,-16(fp)
  80d678:	10800044 	addi	r2,r2,1
  80d67c:	e0bffc15 	stw	r2,-16(fp)
  80d680:	e0fffc17 	ldw	r3,-16(fp)
  80d684:	e0bffe17 	ldw	r2,-8(fp)
  80d688:	18bfe616 	blt	r3,r2,80d624 <__alt_mem_onchip_mem+0xff805624>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80d68c:	e0fffd17 	ldw	r3,-12(fp)
  80d690:	008003f4 	movhi	r2,15
  80d694:	10909004 	addi	r2,r2,16960
  80d698:	1885383a 	mul	r2,r3,r2
  80d69c:	100b883a 	mov	r5,r2
  80d6a0:	0100bef4 	movhi	r4,763
  80d6a4:	213c2004 	addi	r4,r4,-3968
  80d6a8:	0809ab00 	call	809ab0 <__udivsi3>
  80d6ac:	1007883a 	mov	r3,r2
  80d6b0:	e0bfff17 	ldw	r2,-4(fp)
  80d6b4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80d6b8:	10bfffc4 	addi	r2,r2,-1
  80d6bc:	103ffe1e 	bne	r2,zero,80d6b8 <__alt_mem_onchip_mem+0xff8056b8>
  80d6c0:	00000d06 	br	80d6f8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80d6c4:	e0fffd17 	ldw	r3,-12(fp)
  80d6c8:	008003f4 	movhi	r2,15
  80d6cc:	10909004 	addi	r2,r2,16960
  80d6d0:	1885383a 	mul	r2,r3,r2
  80d6d4:	100b883a 	mov	r5,r2
  80d6d8:	0100bef4 	movhi	r4,763
  80d6dc:	213c2004 	addi	r4,r4,-3968
  80d6e0:	0809ab00 	call	809ab0 <__udivsi3>
  80d6e4:	1007883a 	mov	r3,r2
  80d6e8:	e0bfff17 	ldw	r2,-4(fp)
  80d6ec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80d6f0:	10bfffc4 	addi	r2,r2,-1
  80d6f4:	00bffe16 	blt	zero,r2,80d6f0 <__alt_mem_onchip_mem+0xff8056f0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80d6f8:	0005883a 	mov	r2,zero
}
  80d6fc:	e037883a 	mov	sp,fp
  80d700:	dfc00117 	ldw	ra,4(sp)
  80d704:	df000017 	ldw	fp,0(sp)
  80d708:	dec00204 	addi	sp,sp,8
  80d70c:	f800283a 	ret

0080d710 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80d710:	defffa04 	addi	sp,sp,-24
  80d714:	dfc00515 	stw	ra,20(sp)
  80d718:	df000415 	stw	fp,16(sp)
  80d71c:	df000404 	addi	fp,sp,16
  80d720:	e13ffe15 	stw	r4,-8(fp)
  80d724:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80d728:	e0bfff17 	ldw	r2,-4(fp)
  80d72c:	10800017 	ldw	r2,0(r2)
  80d730:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80d734:	e13ffe17 	ldw	r4,-8(fp)
  80d738:	0806bb80 	call	806bb8 <strlen>
  80d73c:	10800044 	addi	r2,r2,1
  80d740:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d744:	00000d06 	br	80d77c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80d748:	e0bffc17 	ldw	r2,-16(fp)
  80d74c:	10800217 	ldw	r2,8(r2)
  80d750:	e0fffd17 	ldw	r3,-12(fp)
  80d754:	180d883a 	mov	r6,r3
  80d758:	e17ffe17 	ldw	r5,-8(fp)
  80d75c:	1009883a 	mov	r4,r2
  80d760:	080dac40 	call	80dac4 <memcmp>
  80d764:	1000021e 	bne	r2,zero,80d770 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80d768:	e0bffc17 	ldw	r2,-16(fp)
  80d76c:	00000706 	br	80d78c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80d770:	e0bffc17 	ldw	r2,-16(fp)
  80d774:	10800017 	ldw	r2,0(r2)
  80d778:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d77c:	e0fffc17 	ldw	r3,-16(fp)
  80d780:	e0bfff17 	ldw	r2,-4(fp)
  80d784:	18bff01e 	bne	r3,r2,80d748 <__alt_mem_onchip_mem+0xff805748>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80d788:	0005883a 	mov	r2,zero
}
  80d78c:	e037883a 	mov	sp,fp
  80d790:	dfc00117 	ldw	ra,4(sp)
  80d794:	df000017 	ldw	fp,0(sp)
  80d798:	dec00204 	addi	sp,sp,8
  80d79c:	f800283a 	ret

0080d7a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80d7a0:	defffb04 	addi	sp,sp,-20
  80d7a4:	dfc00415 	stw	ra,16(sp)
  80d7a8:	df000315 	stw	fp,12(sp)
  80d7ac:	df000304 	addi	fp,sp,12
  80d7b0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80d7b4:	d0a00417 	ldw	r2,-32752(gp)
  80d7b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d7bc:	00003106 	br	80d884 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80d7c0:	e0bffd17 	ldw	r2,-12(fp)
  80d7c4:	10800217 	ldw	r2,8(r2)
  80d7c8:	1009883a 	mov	r4,r2
  80d7cc:	0806bb80 	call	806bb8 <strlen>
  80d7d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80d7d4:	e0bffd17 	ldw	r2,-12(fp)
  80d7d8:	10c00217 	ldw	r3,8(r2)
  80d7dc:	e0bffe17 	ldw	r2,-8(fp)
  80d7e0:	10bfffc4 	addi	r2,r2,-1
  80d7e4:	1885883a 	add	r2,r3,r2
  80d7e8:	10800003 	ldbu	r2,0(r2)
  80d7ec:	10803fcc 	andi	r2,r2,255
  80d7f0:	1080201c 	xori	r2,r2,128
  80d7f4:	10bfe004 	addi	r2,r2,-128
  80d7f8:	10800bd8 	cmpnei	r2,r2,47
  80d7fc:	1000031e 	bne	r2,zero,80d80c <alt_find_file+0x6c>
    {
      len -= 1;
  80d800:	e0bffe17 	ldw	r2,-8(fp)
  80d804:	10bfffc4 	addi	r2,r2,-1
  80d808:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80d80c:	e0bffe17 	ldw	r2,-8(fp)
  80d810:	e0ffff17 	ldw	r3,-4(fp)
  80d814:	1885883a 	add	r2,r3,r2
  80d818:	10800003 	ldbu	r2,0(r2)
  80d81c:	10803fcc 	andi	r2,r2,255
  80d820:	1080201c 	xori	r2,r2,128
  80d824:	10bfe004 	addi	r2,r2,-128
  80d828:	10800be0 	cmpeqi	r2,r2,47
  80d82c:	1000081e 	bne	r2,zero,80d850 <alt_find_file+0xb0>
  80d830:	e0bffe17 	ldw	r2,-8(fp)
  80d834:	e0ffff17 	ldw	r3,-4(fp)
  80d838:	1885883a 	add	r2,r3,r2
  80d83c:	10800003 	ldbu	r2,0(r2)
  80d840:	10803fcc 	andi	r2,r2,255
  80d844:	1080201c 	xori	r2,r2,128
  80d848:	10bfe004 	addi	r2,r2,-128
  80d84c:	10000a1e 	bne	r2,zero,80d878 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80d850:	e0bffd17 	ldw	r2,-12(fp)
  80d854:	10800217 	ldw	r2,8(r2)
  80d858:	e0fffe17 	ldw	r3,-8(fp)
  80d85c:	180d883a 	mov	r6,r3
  80d860:	e17fff17 	ldw	r5,-4(fp)
  80d864:	1009883a 	mov	r4,r2
  80d868:	080dac40 	call	80dac4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80d86c:	1000021e 	bne	r2,zero,80d878 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80d870:	e0bffd17 	ldw	r2,-12(fp)
  80d874:	00000706 	br	80d894 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80d878:	e0bffd17 	ldw	r2,-12(fp)
  80d87c:	10800017 	ldw	r2,0(r2)
  80d880:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d884:	e0fffd17 	ldw	r3,-12(fp)
  80d888:	d0a00404 	addi	r2,gp,-32752
  80d88c:	18bfcc1e 	bne	r3,r2,80d7c0 <__alt_mem_onchip_mem+0xff8057c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80d890:	0005883a 	mov	r2,zero
}
  80d894:	e037883a 	mov	sp,fp
  80d898:	dfc00117 	ldw	ra,4(sp)
  80d89c:	df000017 	ldw	fp,0(sp)
  80d8a0:	dec00204 	addi	sp,sp,8
  80d8a4:	f800283a 	ret

0080d8a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80d8a8:	defffc04 	addi	sp,sp,-16
  80d8ac:	df000315 	stw	fp,12(sp)
  80d8b0:	df000304 	addi	fp,sp,12
  80d8b4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80d8b8:	00bffa04 	movi	r2,-24
  80d8bc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d8c0:	e03ffd15 	stw	zero,-12(fp)
  80d8c4:	00001906 	br	80d92c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80d8c8:	00802074 	movhi	r2,129
  80d8cc:	10badb04 	addi	r2,r2,-5268
  80d8d0:	e0fffd17 	ldw	r3,-12(fp)
  80d8d4:	18c00324 	muli	r3,r3,12
  80d8d8:	10c5883a 	add	r2,r2,r3
  80d8dc:	10800017 	ldw	r2,0(r2)
  80d8e0:	10000f1e 	bne	r2,zero,80d920 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80d8e4:	00802074 	movhi	r2,129
  80d8e8:	10badb04 	addi	r2,r2,-5268
  80d8ec:	e0fffd17 	ldw	r3,-12(fp)
  80d8f0:	18c00324 	muli	r3,r3,12
  80d8f4:	10c5883a 	add	r2,r2,r3
  80d8f8:	e0ffff17 	ldw	r3,-4(fp)
  80d8fc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80d900:	d0e00817 	ldw	r3,-32736(gp)
  80d904:	e0bffd17 	ldw	r2,-12(fp)
  80d908:	1880020e 	bge	r3,r2,80d914 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80d90c:	e0bffd17 	ldw	r2,-12(fp)
  80d910:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  80d914:	e0bffd17 	ldw	r2,-12(fp)
  80d918:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80d91c:	00000606 	br	80d938 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d920:	e0bffd17 	ldw	r2,-12(fp)
  80d924:	10800044 	addi	r2,r2,1
  80d928:	e0bffd15 	stw	r2,-12(fp)
  80d92c:	e0bffd17 	ldw	r2,-12(fp)
  80d930:	10800810 	cmplti	r2,r2,32
  80d934:	103fe41e 	bne	r2,zero,80d8c8 <__alt_mem_onchip_mem+0xff8058c8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80d938:	e0bffe17 	ldw	r2,-8(fp)
}
  80d93c:	e037883a 	mov	sp,fp
  80d940:	df000017 	ldw	fp,0(sp)
  80d944:	dec00104 	addi	sp,sp,4
  80d948:	f800283a 	ret

0080d94c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80d94c:	defffb04 	addi	sp,sp,-20
  80d950:	df000415 	stw	fp,16(sp)
  80d954:	df000404 	addi	fp,sp,16
  80d958:	e13ffe15 	stw	r4,-8(fp)
  80d95c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80d960:	e0bfff17 	ldw	r2,-4(fp)
  80d964:	10840070 	cmpltui	r2,r2,4097
  80d968:	1000021e 	bne	r2,zero,80d974 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80d96c:	00840004 	movi	r2,4096
  80d970:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80d974:	e0fffe17 	ldw	r3,-8(fp)
  80d978:	e0bfff17 	ldw	r2,-4(fp)
  80d97c:	1885883a 	add	r2,r3,r2
  80d980:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d984:	e0bffe17 	ldw	r2,-8(fp)
  80d988:	e0bffc15 	stw	r2,-16(fp)
  80d98c:	00000506 	br	80d9a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80d990:	e0bffc17 	ldw	r2,-16(fp)
  80d994:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d998:	e0bffc17 	ldw	r2,-16(fp)
  80d99c:	10800804 	addi	r2,r2,32
  80d9a0:	e0bffc15 	stw	r2,-16(fp)
  80d9a4:	e0fffc17 	ldw	r3,-16(fp)
  80d9a8:	e0bffd17 	ldw	r2,-12(fp)
  80d9ac:	18bff836 	bltu	r3,r2,80d990 <__alt_mem_onchip_mem+0xff805990>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80d9b0:	e0bffe17 	ldw	r2,-8(fp)
  80d9b4:	108007cc 	andi	r2,r2,31
  80d9b8:	10000226 	beq	r2,zero,80d9c4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80d9bc:	e0bffc17 	ldw	r2,-16(fp)
  80d9c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80d9c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80d9c8:	0001883a 	nop
  80d9cc:	e037883a 	mov	sp,fp
  80d9d0:	df000017 	ldw	fp,0(sp)
  80d9d4:	dec00104 	addi	sp,sp,4
  80d9d8:	f800283a 	ret

0080d9dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80d9dc:	defffe04 	addi	sp,sp,-8
  80d9e0:	df000115 	stw	fp,4(sp)
  80d9e4:	df000104 	addi	fp,sp,4
  80d9e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80d9ec:	e0bfff17 	ldw	r2,-4(fp)
  80d9f0:	10bffe84 	addi	r2,r2,-6
  80d9f4:	10c00428 	cmpgeui	r3,r2,16
  80d9f8:	18001a1e 	bne	r3,zero,80da64 <alt_exception_cause_generated_bad_addr+0x88>
  80d9fc:	100690ba 	slli	r3,r2,2
  80da00:	00802074 	movhi	r2,129
  80da04:	10b68504 	addi	r2,r2,-9708
  80da08:	1885883a 	add	r2,r3,r2
  80da0c:	10800017 	ldw	r2,0(r2)
  80da10:	1000683a 	jmp	r2
  80da14:	0080da54 	movui	r2,873
  80da18:	0080da54 	movui	r2,873
  80da1c:	0080da64 	muli	r2,zero,873
  80da20:	0080da64 	muli	r2,zero,873
  80da24:	0080da64 	muli	r2,zero,873
  80da28:	0080da54 	movui	r2,873
  80da2c:	0080da5c 	xori	r2,zero,873
  80da30:	0080da64 	muli	r2,zero,873
  80da34:	0080da54 	movui	r2,873
  80da38:	0080da54 	movui	r2,873
  80da3c:	0080da64 	muli	r2,zero,873
  80da40:	0080da54 	movui	r2,873
  80da44:	0080da5c 	xori	r2,zero,873
  80da48:	0080da64 	muli	r2,zero,873
  80da4c:	0080da64 	muli	r2,zero,873
  80da50:	0080da54 	movui	r2,873
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80da54:	00800044 	movi	r2,1
  80da58:	00000306 	br	80da68 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80da5c:	0005883a 	mov	r2,zero
  80da60:	00000106 	br	80da68 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80da64:	0005883a 	mov	r2,zero
  }
}
  80da68:	e037883a 	mov	sp,fp
  80da6c:	df000017 	ldw	fp,0(sp)
  80da70:	dec00104 	addi	sp,sp,4
  80da74:	f800283a 	ret

0080da78 <atexit>:
  80da78:	200b883a 	mov	r5,r4
  80da7c:	000f883a 	mov	r7,zero
  80da80:	000d883a 	mov	r6,zero
  80da84:	0009883a 	mov	r4,zero
  80da88:	080db401 	jmpi	80db40 <__register_exitproc>

0080da8c <exit>:
  80da8c:	defffe04 	addi	sp,sp,-8
  80da90:	000b883a 	mov	r5,zero
  80da94:	dc000015 	stw	r16,0(sp)
  80da98:	dfc00115 	stw	ra,4(sp)
  80da9c:	2021883a 	mov	r16,r4
  80daa0:	080dc580 	call	80dc58 <__call_exitprocs>
  80daa4:	00802074 	movhi	r2,129
  80daa8:	10bfcc04 	addi	r2,r2,-208
  80daac:	11000017 	ldw	r4,0(r2)
  80dab0:	20800f17 	ldw	r2,60(r4)
  80dab4:	10000126 	beq	r2,zero,80dabc <exit+0x30>
  80dab8:	103ee83a 	callr	r2
  80dabc:	8009883a 	mov	r4,r16
  80dac0:	080ddd80 	call	80ddd8 <_exit>

0080dac4 <memcmp>:
  80dac4:	01c000c4 	movi	r7,3
  80dac8:	3980192e 	bgeu	r7,r6,80db30 <memcmp+0x6c>
  80dacc:	2144b03a 	or	r2,r4,r5
  80dad0:	11c4703a 	and	r2,r2,r7
  80dad4:	10000f26 	beq	r2,zero,80db14 <memcmp+0x50>
  80dad8:	20800003 	ldbu	r2,0(r4)
  80dadc:	28c00003 	ldbu	r3,0(r5)
  80dae0:	10c0151e 	bne	r2,r3,80db38 <memcmp+0x74>
  80dae4:	31bfff84 	addi	r6,r6,-2
  80dae8:	01ffffc4 	movi	r7,-1
  80daec:	00000406 	br	80db00 <memcmp+0x3c>
  80daf0:	20800003 	ldbu	r2,0(r4)
  80daf4:	28c00003 	ldbu	r3,0(r5)
  80daf8:	31bfffc4 	addi	r6,r6,-1
  80dafc:	10c00e1e 	bne	r2,r3,80db38 <memcmp+0x74>
  80db00:	21000044 	addi	r4,r4,1
  80db04:	29400044 	addi	r5,r5,1
  80db08:	31fff91e 	bne	r6,r7,80daf0 <__alt_mem_onchip_mem+0xff805af0>
  80db0c:	0005883a 	mov	r2,zero
  80db10:	f800283a 	ret
  80db14:	20c00017 	ldw	r3,0(r4)
  80db18:	28800017 	ldw	r2,0(r5)
  80db1c:	18bfee1e 	bne	r3,r2,80dad8 <__alt_mem_onchip_mem+0xff805ad8>
  80db20:	31bfff04 	addi	r6,r6,-4
  80db24:	21000104 	addi	r4,r4,4
  80db28:	29400104 	addi	r5,r5,4
  80db2c:	39bff936 	bltu	r7,r6,80db14 <__alt_mem_onchip_mem+0xff805b14>
  80db30:	303fe91e 	bne	r6,zero,80dad8 <__alt_mem_onchip_mem+0xff805ad8>
  80db34:	003ff506 	br	80db0c <__alt_mem_onchip_mem+0xff805b0c>
  80db38:	10c5c83a 	sub	r2,r2,r3
  80db3c:	f800283a 	ret

0080db40 <__register_exitproc>:
  80db40:	defffa04 	addi	sp,sp,-24
  80db44:	dc000315 	stw	r16,12(sp)
  80db48:	04002074 	movhi	r16,129
  80db4c:	843fcc04 	addi	r16,r16,-208
  80db50:	80c00017 	ldw	r3,0(r16)
  80db54:	dc400415 	stw	r17,16(sp)
  80db58:	dfc00515 	stw	ra,20(sp)
  80db5c:	18805217 	ldw	r2,328(r3)
  80db60:	2023883a 	mov	r17,r4
  80db64:	10003726 	beq	r2,zero,80dc44 <__register_exitproc+0x104>
  80db68:	10c00117 	ldw	r3,4(r2)
  80db6c:	010007c4 	movi	r4,31
  80db70:	20c00e16 	blt	r4,r3,80dbac <__register_exitproc+0x6c>
  80db74:	1a000044 	addi	r8,r3,1
  80db78:	8800221e 	bne	r17,zero,80dc04 <__register_exitproc+0xc4>
  80db7c:	18c00084 	addi	r3,r3,2
  80db80:	18c7883a 	add	r3,r3,r3
  80db84:	18c7883a 	add	r3,r3,r3
  80db88:	12000115 	stw	r8,4(r2)
  80db8c:	10c7883a 	add	r3,r2,r3
  80db90:	19400015 	stw	r5,0(r3)
  80db94:	0005883a 	mov	r2,zero
  80db98:	dfc00517 	ldw	ra,20(sp)
  80db9c:	dc400417 	ldw	r17,16(sp)
  80dba0:	dc000317 	ldw	r16,12(sp)
  80dba4:	dec00604 	addi	sp,sp,24
  80dba8:	f800283a 	ret
  80dbac:	00800034 	movhi	r2,0
  80dbb0:	10800004 	addi	r2,r2,0
  80dbb4:	10002626 	beq	r2,zero,80dc50 <__register_exitproc+0x110>
  80dbb8:	01006404 	movi	r4,400
  80dbbc:	d9400015 	stw	r5,0(sp)
  80dbc0:	d9800115 	stw	r6,4(sp)
  80dbc4:	d9c00215 	stw	r7,8(sp)
  80dbc8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80dbcc:	d9400017 	ldw	r5,0(sp)
  80dbd0:	d9800117 	ldw	r6,4(sp)
  80dbd4:	d9c00217 	ldw	r7,8(sp)
  80dbd8:	10001d26 	beq	r2,zero,80dc50 <__register_exitproc+0x110>
  80dbdc:	81000017 	ldw	r4,0(r16)
  80dbe0:	10000115 	stw	zero,4(r2)
  80dbe4:	02000044 	movi	r8,1
  80dbe8:	22405217 	ldw	r9,328(r4)
  80dbec:	0007883a 	mov	r3,zero
  80dbf0:	12400015 	stw	r9,0(r2)
  80dbf4:	20805215 	stw	r2,328(r4)
  80dbf8:	10006215 	stw	zero,392(r2)
  80dbfc:	10006315 	stw	zero,396(r2)
  80dc00:	883fde26 	beq	r17,zero,80db7c <__alt_mem_onchip_mem+0xff805b7c>
  80dc04:	18c9883a 	add	r4,r3,r3
  80dc08:	2109883a 	add	r4,r4,r4
  80dc0c:	1109883a 	add	r4,r2,r4
  80dc10:	21802215 	stw	r6,136(r4)
  80dc14:	01800044 	movi	r6,1
  80dc18:	12406217 	ldw	r9,392(r2)
  80dc1c:	30cc983a 	sll	r6,r6,r3
  80dc20:	4992b03a 	or	r9,r9,r6
  80dc24:	12406215 	stw	r9,392(r2)
  80dc28:	21c04215 	stw	r7,264(r4)
  80dc2c:	01000084 	movi	r4,2
  80dc30:	893fd21e 	bne	r17,r4,80db7c <__alt_mem_onchip_mem+0xff805b7c>
  80dc34:	11006317 	ldw	r4,396(r2)
  80dc38:	218cb03a 	or	r6,r4,r6
  80dc3c:	11806315 	stw	r6,396(r2)
  80dc40:	003fce06 	br	80db7c <__alt_mem_onchip_mem+0xff805b7c>
  80dc44:	18805304 	addi	r2,r3,332
  80dc48:	18805215 	stw	r2,328(r3)
  80dc4c:	003fc606 	br	80db68 <__alt_mem_onchip_mem+0xff805b68>
  80dc50:	00bfffc4 	movi	r2,-1
  80dc54:	003fd006 	br	80db98 <__alt_mem_onchip_mem+0xff805b98>

0080dc58 <__call_exitprocs>:
  80dc58:	defff504 	addi	sp,sp,-44
  80dc5c:	df000915 	stw	fp,36(sp)
  80dc60:	dd400615 	stw	r21,24(sp)
  80dc64:	dc800315 	stw	r18,12(sp)
  80dc68:	dfc00a15 	stw	ra,40(sp)
  80dc6c:	ddc00815 	stw	r23,32(sp)
  80dc70:	dd800715 	stw	r22,28(sp)
  80dc74:	dd000515 	stw	r20,20(sp)
  80dc78:	dcc00415 	stw	r19,16(sp)
  80dc7c:	dc400215 	stw	r17,8(sp)
  80dc80:	dc000115 	stw	r16,4(sp)
  80dc84:	d9000015 	stw	r4,0(sp)
  80dc88:	2839883a 	mov	fp,r5
  80dc8c:	04800044 	movi	r18,1
  80dc90:	057fffc4 	movi	r21,-1
  80dc94:	00802074 	movhi	r2,129
  80dc98:	10bfcc04 	addi	r2,r2,-208
  80dc9c:	12000017 	ldw	r8,0(r2)
  80dca0:	45005217 	ldw	r20,328(r8)
  80dca4:	44c05204 	addi	r19,r8,328
  80dca8:	a0001c26 	beq	r20,zero,80dd1c <__call_exitprocs+0xc4>
  80dcac:	a0800117 	ldw	r2,4(r20)
  80dcb0:	15ffffc4 	addi	r23,r2,-1
  80dcb4:	b8000d16 	blt	r23,zero,80dcec <__call_exitprocs+0x94>
  80dcb8:	14000044 	addi	r16,r2,1
  80dcbc:	8421883a 	add	r16,r16,r16
  80dcc0:	8421883a 	add	r16,r16,r16
  80dcc4:	84402004 	addi	r17,r16,128
  80dcc8:	a463883a 	add	r17,r20,r17
  80dccc:	a421883a 	add	r16,r20,r16
  80dcd0:	e0001e26 	beq	fp,zero,80dd4c <__call_exitprocs+0xf4>
  80dcd4:	80804017 	ldw	r2,256(r16)
  80dcd8:	e0801c26 	beq	fp,r2,80dd4c <__call_exitprocs+0xf4>
  80dcdc:	bdffffc4 	addi	r23,r23,-1
  80dce0:	843fff04 	addi	r16,r16,-4
  80dce4:	8c7fff04 	addi	r17,r17,-4
  80dce8:	bd7ff91e 	bne	r23,r21,80dcd0 <__alt_mem_onchip_mem+0xff805cd0>
  80dcec:	00800034 	movhi	r2,0
  80dcf0:	10800004 	addi	r2,r2,0
  80dcf4:	10000926 	beq	r2,zero,80dd1c <__call_exitprocs+0xc4>
  80dcf8:	a0800117 	ldw	r2,4(r20)
  80dcfc:	1000301e 	bne	r2,zero,80ddc0 <__call_exitprocs+0x168>
  80dd00:	a0800017 	ldw	r2,0(r20)
  80dd04:	10003226 	beq	r2,zero,80ddd0 <__call_exitprocs+0x178>
  80dd08:	a009883a 	mov	r4,r20
  80dd0c:	98800015 	stw	r2,0(r19)
  80dd10:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80dd14:	9d000017 	ldw	r20,0(r19)
  80dd18:	a03fe41e 	bne	r20,zero,80dcac <__alt_mem_onchip_mem+0xff805cac>
  80dd1c:	dfc00a17 	ldw	ra,40(sp)
  80dd20:	df000917 	ldw	fp,36(sp)
  80dd24:	ddc00817 	ldw	r23,32(sp)
  80dd28:	dd800717 	ldw	r22,28(sp)
  80dd2c:	dd400617 	ldw	r21,24(sp)
  80dd30:	dd000517 	ldw	r20,20(sp)
  80dd34:	dcc00417 	ldw	r19,16(sp)
  80dd38:	dc800317 	ldw	r18,12(sp)
  80dd3c:	dc400217 	ldw	r17,8(sp)
  80dd40:	dc000117 	ldw	r16,4(sp)
  80dd44:	dec00b04 	addi	sp,sp,44
  80dd48:	f800283a 	ret
  80dd4c:	a0800117 	ldw	r2,4(r20)
  80dd50:	80c00017 	ldw	r3,0(r16)
  80dd54:	10bfffc4 	addi	r2,r2,-1
  80dd58:	15c01426 	beq	r2,r23,80ddac <__call_exitprocs+0x154>
  80dd5c:	80000015 	stw	zero,0(r16)
  80dd60:	183fde26 	beq	r3,zero,80dcdc <__alt_mem_onchip_mem+0xff805cdc>
  80dd64:	95c8983a 	sll	r4,r18,r23
  80dd68:	a0806217 	ldw	r2,392(r20)
  80dd6c:	a5800117 	ldw	r22,4(r20)
  80dd70:	2084703a 	and	r2,r4,r2
  80dd74:	10000b26 	beq	r2,zero,80dda4 <__call_exitprocs+0x14c>
  80dd78:	a0806317 	ldw	r2,396(r20)
  80dd7c:	2088703a 	and	r4,r4,r2
  80dd80:	20000c1e 	bne	r4,zero,80ddb4 <__call_exitprocs+0x15c>
  80dd84:	89400017 	ldw	r5,0(r17)
  80dd88:	d9000017 	ldw	r4,0(sp)
  80dd8c:	183ee83a 	callr	r3
  80dd90:	a0800117 	ldw	r2,4(r20)
  80dd94:	15bfbf1e 	bne	r2,r22,80dc94 <__alt_mem_onchip_mem+0xff805c94>
  80dd98:	98800017 	ldw	r2,0(r19)
  80dd9c:	153fcf26 	beq	r2,r20,80dcdc <__alt_mem_onchip_mem+0xff805cdc>
  80dda0:	003fbc06 	br	80dc94 <__alt_mem_onchip_mem+0xff805c94>
  80dda4:	183ee83a 	callr	r3
  80dda8:	003ff906 	br	80dd90 <__alt_mem_onchip_mem+0xff805d90>
  80ddac:	a5c00115 	stw	r23,4(r20)
  80ddb0:	003feb06 	br	80dd60 <__alt_mem_onchip_mem+0xff805d60>
  80ddb4:	89000017 	ldw	r4,0(r17)
  80ddb8:	183ee83a 	callr	r3
  80ddbc:	003ff406 	br	80dd90 <__alt_mem_onchip_mem+0xff805d90>
  80ddc0:	a0800017 	ldw	r2,0(r20)
  80ddc4:	a027883a 	mov	r19,r20
  80ddc8:	1029883a 	mov	r20,r2
  80ddcc:	003fb606 	br	80dca8 <__alt_mem_onchip_mem+0xff805ca8>
  80ddd0:	0005883a 	mov	r2,zero
  80ddd4:	003ffb06 	br	80ddc4 <__alt_mem_onchip_mem+0xff805dc4>

0080ddd8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80ddd8:	defffd04 	addi	sp,sp,-12
  80dddc:	df000215 	stw	fp,8(sp)
  80dde0:	df000204 	addi	fp,sp,8
  80dde4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80dde8:	0001883a 	nop
  80ddec:	e0bfff17 	ldw	r2,-4(fp)
  80ddf0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80ddf4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80ddf8:	10000226 	beq	r2,zero,80de04 <_exit+0x2c>
    ALT_SIM_FAIL();
  80ddfc:	002af070 	cmpltui	zero,zero,43969
  80de00:	00000106 	br	80de08 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80de04:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80de08:	003fff06 	br	80de08 <__alt_mem_onchip_mem+0xff805e08>
