
pacemaker_c_implementation.elf:     file format elf32-littlenios2
pacemaker_c_implementation.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000081a0 memsz 0x000081a0 flags r-x
    LOAD off    0x000091c0 vaddr 0x008081c0 paddr 0x00809e18 align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x0000ba70 vaddr 0x0080ba70 paddr 0x0080ba70 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007bec  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000390  00807e30  00807e30  00008e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  008081c0  00809e18  000091c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  0080ba70  0080ba70  0000ba70  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0080bbd4  0080bbd4  0000ae18  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0000ae18  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000ae18  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b68  00000000  00000000  0000ae40  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00018d64  00000000  00000000  0000b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006da7  00000000  00000000  0002470c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000792f  00000000  00000000  0002b4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001c28  00000000  00000000  00032de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000316a  00000000  00000000  00034a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  00037b76  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0003c5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000698  00000000  00000000  0003c628  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003fc29  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0003fc2c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003fc2f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003fc30  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0003fc31  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003fc3a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0003fc43  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0003fc4c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000030  00000000  00000000  0003fc58  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000677b7  00000000  00000000  0003fc88  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00807e30 l    d  .rodata	00000000 .rodata
008081c0 l    d  .rwdata	00000000 .rwdata
0080ba70 l    d  .bss	00000000 .bss
0080bbd4 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Projects/University/303-Assignment/pacemaker_c_implementation_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 buttons_test.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 switches.c
00000000 l    df *ABS*	00000000 uart_test.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00800f34 l     F .text	00000008 __fp_unlock
00800f48 l     F .text	0000019c __sinit.part.1
008010e4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008081c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00803cbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803dc8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00803df4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00804060 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00804140 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080422c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00804400 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00809e04 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
008047f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00804924 l     F .text	00000034 alt_dev_reg
00808b94 l     O .rwdata	00001060 jtag_uart
00809bf4 l     O .rwdata	00000120 lcd
00809d14 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00804c4c l     F .text	0000020c altera_avalon_jtag_uart_irq
00804e58 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00809e10 l     O .rwdata	00000004 colstart
00805490 l     F .text	000000b8 lcd_write_command
00805548 l     F .text	000000d8 lcd_write_data
00805620 l     F .text	000000d0 lcd_clear_screen
008056f0 l     F .text	000001ec lcd_repaint_screen
008058dc l     F .text	000000cc lcd_scroll_up
008059a8 l     F .text	000002ac lcd_handle_escape
0080612c l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080636c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080661c l     F .text	0000009c altera_avalon_uart_irq
008066b8 l     F .text	000000e4 altera_avalon_uart_rxirq
0080679c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00806938 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00806b50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00806d80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008071f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00807334 l     F .text	0000003c alt_get_errno
00807370 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080803f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080baa8 g     O .bss	00000004 alt_instruction_exception_handler
0080ba79 g     O .bss	00000001 a_pace_led_timer_already_started
00803988 g     F .text	00000054 _isatty_r
0080433c g     F .text	0000007c alt_main
00800dc8 g     F .text	000000c0 _puts_r
0080bad4 g     O .bss	00000100 alt_irq
008036b0 g     F .text	00000060 _lseek_r
00809e18 g       *ABS*	00000000 __flash_rwdata_start
0080bbd4 g       *ABS*	00000000 __alt_heap_start
00802c64 g     F .text	0000005c __sseek
00801284 g     F .text	00000010 __sinit
008010ec g     F .text	00000068 __sfmoreglue
008043dc g     F .text	00000024 __malloc_unlock
00800c7c g     F .text	00000104 clear_sense_led_events
00802350 g     F .text	0000015c memmove
0080126c g     F .text	00000018 _cleanup
00800290 g     F .text	000000e0 buttons_interrupts_function
008075b8 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080392c g     F .text	0000005c _fstat_r
0080ba8c g     O .bss	00000004 errno
00802be0 g     F .text	00000008 __seofread
0080ba98 g     O .bss	00000004 alt_argv
00811dd8 g       *ABS*	00000000 _gp
00807588 g     F .text	00000030 usleep
0080ba74 g     O .bss	00000001 is_paced
00808a14 g     O .rwdata	00000180 alt_fd_list
00800398 g     F .text	00000028 v_pace_led_timer_isr_function
00807734 g     F .text	00000090 alt_find_dev
00802208 g     F .text	00000148 memcpy
00800f3c g     F .text	0000000c _cleanup_r
008072b8 g     F .text	0000007c alt_io_redirect
00807e30 g       *ABS*	00000000 __DTOR_END__
00800e88 g     F .text	00000014 puts
00807a00 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00805050 g     F .text	0000021c altera_avalon_jtag_uart_read
00803ad4 g     F .text	00000064 .hidden __udivsi3
0080409c g     F .text	000000a4 isatty
00807970 g     F .text	00000090 alt_icache_flush
008004fc g     F .text	00000040 v_events_timer_isr_function
0080ba88 g     O .bss	00000004 __malloc_top_pad
008012d4 g     F .text	000004bc __sfvwrite_r
00802b38 g     F .text	00000054 _sbrk_r
00800370 g     F .text	00000028 a_pace_led_timer_isr_function
008038cc g     F .text	00000060 _read_r
00809df8 g     O .rwdata	00000004 alt_max_fd
00802ed0 g     F .text	000000f0 _fclose_r
0080324c g     F .text	00000030 fflush
0080ba84 g     O .bss	00000004 __malloc_max_sbrked_mem
00803ee0 g     F .text	00000180 alt_irq_register
00804268 g     F .text	000000d4 lseek
008003e8 g     F .text	00000028 v_sense_led_timer_isr_function
00809dd8 g     O .rwdata	00000004 _global_impure_ptr
008025d4 g     F .text	00000564 _realloc_r
0080bbd4 g       *ABS*	00000000 __bss_end
00807104 g     F .text	000000f0 alt_iic_isr_register
008046e8 g     F .text	00000108 alt_tick
00806570 g     F .text	000000ac altera_avalon_uart_init
008012a4 g     F .text	00000018 __fp_lock_all
008070b8 g     F .text	0000004c alt_ic_irq_enabled
0080464c g     F .text	0000009c alt_alarm_stop
0080ba90 g     O .bss	00000004 alt_irq_active
0080ba71 g     O .bss	00000001 implementation_mode
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
008089ec g     O .rwdata	00000028 alt_dev_null
00806d38 g     F .text	00000048 alt_dcache_flush_all
00809e18 g       *ABS*	00000000 __ram_rwdata_end
00809df0 g     O .rwdata	00000008 alt_dev_list
0080482c g     F .text	000000f8 write
008081c0 g       *ABS*	00000000 __ram_rodata_end
00803e30 g     F .text	000000b0 fstat
008003c0 g     F .text	00000028 a_sense_led_timer_isr_function
00803b38 g     F .text	00000058 .hidden __umodsi3
00800d80 g     F .text	00000028 C_Mode_Pacemaker
0080bbd4 g       *ABS*	00000000 end
00805c54 g     F .text	000004d8 altera_avalon_lcd_16207_write
00800ad8 g     F .text	00000074 send_ventricular_event
00806b8c g     F .text	000001ac altera_avalon_uart_write
00804b8c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00807e30 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080ba70 g     O .bss	00000001 pulse_mode
008063e4 g     F .text	0000007c alt_avalon_timer_sc_init
008064c0 g     F .text	00000060 altera_avalon_uart_write_fd
00806520 g     F .text	00000050 altera_avalon_uart_close_fd
0080526c g     F .text	00000224 altera_avalon_jtag_uart_write
00801294 g     F .text	00000004 __sfp_lock_acquire
00802124 g     F .text	000000e4 memchr
008033a0 g     F .text	00000310 _free_r
00807c7c g     F .text	00000180 __call_exitprocs
00809de0 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
008004bc g     F .text	00000040 a_events_timer_isr_function
0080baa0 g     O .bss	00000004 _alt_tick_rate
0080baa4 g     O .bss	00000004 _alt_nticks
0080443c g     F .text	000000fc read
00804990 g     F .text	00000098 alt_sys_init
00800b78 g     F .text	00000104 clear_pace_led_events
00807b64 g     F .text	00000118 __register_exitproc
00804ef8 g     F .text	00000068 altera_avalon_jtag_uart_close
008081c0 g       *ABS*	00000000 __ram_rwdata_start
00807e30 g       *ABS*	00000000 __ram_rodata_start
0080baac g     O .bss	00000028 __malloc_current_mallinfo
00804a28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008078cc g     F .text	000000a4 alt_get_fd
008075dc g     F .text	00000158 alt_busy_sleep
00802e7c g     F .text	00000054 _close_r
00807ae8 g     F .text	0000007c memcmp
00804ae8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0080bbd4 g       *ABS*	00000000 __alt_stack_base
00804b38 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802d28 g     F .text	00000154 __swsetup_r
00801154 g     F .text	00000118 __sfp
008085e4 g     O .rwdata	00000408 __malloc_av_
008012a0 g     F .text	00000004 __sinit_lock_release
00802b8c g     F .text	00000054 __sread
008077c4 g     F .text	00000108 alt_find_file
00806dbc g     F .text	000000a4 alt_dev_llist_insert
008043b8 g     F .text	00000024 __malloc_lock
0080459c g     F .text	000000b0 sbrk
008031f0 g     F .text	0000005c _fflush_r
0080ba72 g     O .bss	00000001 atrial_event
0080ba70 g       *ABS*	00000000 __bss_start
008024ac g     F .text	00000128 memset
0080053c g     F .text	00000528 main
0080ba9c g     O .bss	00000004 alt_envp
0080ba80 g     O .bss	00000004 __malloc_max_total_mem
00804a88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008061d8 g     F .text	00000134 altera_avalon_lcd_16207_init
00802cc0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802fc0 g     F .text	00000014 fclose
00801918 g     F .text	0000080c _malloc_r
00809dfc g     O .rwdata	00000004 alt_errno
00801790 g     F .text	000000c4 _fwalk
00800410 g     F .text	000000ac uart_read_isr_function
008039dc g     F .text	00000084 .hidden __divsi3
0080327c g     F .text	00000124 _malloc_trim_r
00807e30 g       *ABS*	00000000 __CTOR_END__
0080ba78 g     O .bss	00000001 led_sense_ventricular_event
00807e30 g       *ABS*	00000000 __flash_rodata_start
00807e30 g       *ABS*	00000000 __DTOR_LIST__
00804958 g     F .text	00000038 alt_irq_init
00804538 g     F .text	00000064 alt_release_fd
00807a9c g     F .text	00000014 atexit
00802cc8 g     F .text	00000060 _write_r
00800b4c g     F .text	0000002c clear_heart_flags
00809ddc g     O .rwdata	00000004 _impure_ptr
0080ba94 g     O .bss	00000004 alt_argc
00800da8 g     F .text	00000020 SCCHARTS_Mode_Pacemaker
00802fd4 g     F .text	0000021c __sflush_r
00806ec0 g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
008012bc g     F .text	00000018 __fp_unlock_all
0080630c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00809de8 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806f54 g     F .text	00000050 alt_ic_isr_register
00809e18 g       *ABS*	00000000 _edata
00806460 g     F .text	00000060 altera_avalon_uart_read_fd
0080ba73 g     O .bss	00000001 ventricular_event
0080bbd4 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00804f60 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080702c g     F .text	0000008c alt_ic_irq_disable
00802be8 g     F .text	0000007c __swrite
00809de4 g     O .rwdata	00000004 __malloc_trim_threshold
00807ab0 g     F .text	00000038 exit
0080ba75 g     O .bss	00000001 led_pace_atrial_event
00801854 g     F .text	000000c4 _fwalk_reent
00803a60 g     F .text	00000074 .hidden __modsi3
00809e14 g     O .rwdata	00000004 __ctype_ptr__
0080ba77 g     O .bss	00000001 led_sense_atrial_event
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801298 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00807f3e g     O .rodata	00000101 _ctype_
008068e4 g     F .text	00000054 altera_avalon_uart_close
00807dfc g     F .text	00000034 _exit
00803b90 g     F .text	0000012c alt_alarm_start
00803710 g     F .text	000001bc __smakebuf_r
00800e9c g     F .text	00000098 strlen
00807434 g     F .text	00000154 open
0080ba7b g     O .bss	00000001 a_sense_led_timer_already_started
00806f20 g     F .text	00000034 alt_icache_flush_all
00809e00 g     O .rwdata	00000004 alt_priority_mask
00806fa4 g     F .text	00000088 alt_ic_irq_enable
0080ba7c g     O .bss	00000001 v_sense_led_timer_already_started
00806974 g     F .text	000001dc altera_avalon_uart_read
0080ba76 g     O .bss	00000001 led_pace_ventricular_event
0080ba7a g     O .bss	00000001 v_pace_led_timer_already_started
00800a64 g     F .text	00000074 send_atrial_event
00809e08 g     O .rwdata	00000008 alt_alarm_list
00806e60 g     F .text	00000060 _do_ctors
00803cf8 g     F .text	000000d0 close
008041a8 g     F .text	00000084 alt_load
0080129c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10aeb504 	addi	r2,r2,-17708
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10aeb504 	addi	r2,r2,-17708
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73417 	ldw	r2,-25392(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73417 	ldw	r2,-25392(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6877614 	ori	gp,gp,7640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	10ae9c14 	ori	r2,r2,47728

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18eef514 	ori	r3,r3,48084

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08041a80 	call	8041a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080433c0 	call	80433c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <buttons_interrupts_function>:

bool a_sense_led_timer_already_started = false;
bool v_sense_led_timer_already_started = false;

void buttons_interrupts_function(void* context, alt_u32 id)
{
  800290:	defffb04 	addi	sp,sp,-20
  800294:	dfc00415 	stw	ra,16(sp)
  800298:	df000315 	stw	fp,12(sp)
  80029c:	df000304 	addi	fp,sp,12
  8002a0:	e13ffe15 	stw	r4,-8(fp)
  8002a4:	e17fff15 	stw	r5,-4(fp)

	int* temp_button_value = (int*) context; // Cast the context before using it
  8002a8:	e0bffe17 	ldw	r2,-8(fp)
  8002ac:	e0bffd15 	stw	r2,-12(fp)
	(*temp_button_value) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8002b0:	00804074 	movhi	r2,257
  8002b4:	10842b04 	addi	r2,r2,4268
  8002b8:	10c00037 	ldwio	r3,0(r2)
  8002bc:	e0bffd17 	ldw	r2,-12(fp)
  8002c0:	10c00015 	stw	r3,0(r2)

	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8002c4:	0007883a 	mov	r3,zero
  8002c8:	00804074 	movhi	r2,257
  8002cc:	10842b04 	addi	r2,r2,4268
  8002d0:	10c00035 	stwio	r3,0(r2)

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
  8002d4:	d0a72603 	ldbu	r2,-25448(gp)
  8002d8:	1080005c 	xori	r2,r2,1
  8002dc:	10803fcc 	andi	r2,r2,255
  8002e0:	10001d1e 	bne	r2,zero,800358 <buttons_interrupts_function+0xc8>
		return;
	}


	if ((*temp_button_value & (1 << KEY0))) {
  8002e4:	e0bffd17 	ldw	r2,-12(fp)
  8002e8:	10800017 	ldw	r2,0(r2)
  8002ec:	1080004c 	andi	r2,r2,1
  8002f0:	10000526 	beq	r2,zero,800308 <buttons_interrupts_function+0x78>
		//printf("KEY0 : ATRIAL EVENT!\n");
		send_atrial_event(true);
  8002f4:	01000044 	movi	r4,1
  8002f8:	0800a640 	call	800a64 <send_atrial_event>
		printf("Atrium Paced!\n");
  8002fc:	01002034 	movhi	r4,128
  800300:	211f8c04 	addi	r4,r4,32304
  800304:	0800e880 	call	800e88 <puts>
	}

	if ((*temp_button_value & (1 << KEY1))) {
  800308:	e0bffd17 	ldw	r2,-12(fp)
  80030c:	10800017 	ldw	r2,0(r2)
  800310:	1080008c 	andi	r2,r2,2
  800314:	10000526 	beq	r2,zero,80032c <buttons_interrupts_function+0x9c>
		//printf("KEY1 : VENTRICULAR EVENT!\n");
		send_ventricular_event(true);
  800318:	01000044 	movi	r4,1
  80031c:	0800ad80 	call	800ad8 <send_ventricular_event>
		printf("Ventricular Paced!\n");
  800320:	01002034 	movhi	r4,128
  800324:	211f9004 	addi	r4,r4,32320
  800328:	0800e880 	call	800e88 <puts>
	}

	if ((*temp_button_value & (1 << 2))) {
  80032c:	e0bffd17 	ldw	r2,-12(fp)
  800330:	10800017 	ldw	r2,0(r2)
  800334:	1080010c 	andi	r2,r2,4
  800338:	10000826 	beq	r2,zero,80035c <buttons_interrupts_function+0xcc>
		// reset leds -- DEBUGGING / CLEAR EVENTS
		atrial_event = false;
  80033c:	d0272685 	stb	zero,-25446(gp)
		ventricular_event = false;
  800340:	d02726c5 	stb	zero,-25445(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  800344:	0007883a 	mov	r3,zero
  800348:	00804074 	movhi	r2,257
  80034c:	10841c04 	addi	r2,r2,4208
  800350:	10c00035 	stwio	r3,0(r2)
  800354:	00000106 	br	80035c <buttons_interrupts_function+0xcc>
	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
		return;
  800358:	0001883a 	nop
		ventricular_event = false;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	}

	//printf("button pressed: %i\n", *temp_button_value); DEBUGGING PURPOSES
}
  80035c:	e037883a 	mov	sp,fp
  800360:	dfc00117 	ldw	ra,4(sp)
  800364:	df000017 	ldw	fp,0(sp)
  800368:	dec00204 	addi	sp,sp,8
  80036c:	f800283a 	ret

00800370 <a_pace_led_timer_isr_function>:

alt_u32 a_pace_led_timer_isr_function(void* context) {
  800370:	defffe04 	addi	sp,sp,-8
  800374:	df000115 	stw	fp,4(sp)
  800378:	df000104 	addi	fp,sp,4
  80037c:	e13fff15 	stw	r4,-4(fp)

	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	//int *led_time_count = (int*) context;
	led_pace_atrial_event = false;
  800380:	d0272745 	stb	zero,-25443(gp)
	return LED_ON_MILLISECONDS;
  800384:	00801904 	movi	r2,100
}
  800388:	e037883a 	mov	sp,fp
  80038c:	df000017 	ldw	fp,0(sp)
  800390:	dec00104 	addi	sp,sp,4
  800394:	f800283a 	ret

00800398 <v_pace_led_timer_isr_function>:

alt_u32 v_pace_led_timer_isr_function(void* context) {
  800398:	defffe04 	addi	sp,sp,-8
  80039c:	df000115 	stw	fp,4(sp)
  8003a0:	df000104 	addi	fp,sp,4
  8003a4:	e13fff15 	stw	r4,-4(fp)

	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	//int *(led_time_count) = (int*) context;
	led_pace_ventricular_event = false;
  8003a8:	d0272785 	stb	zero,-25442(gp)
	return LED_ON_MILLISECONDS;
  8003ac:	00801904 	movi	r2,100
}
  8003b0:	e037883a 	mov	sp,fp
  8003b4:	df000017 	ldw	fp,0(sp)
  8003b8:	dec00104 	addi	sp,sp,4
  8003bc:	f800283a 	ret

008003c0 <a_sense_led_timer_isr_function>:

alt_u32 a_sense_led_timer_isr_function(void* contxet) {
  8003c0:	defffe04 	addi	sp,sp,-8
  8003c4:	df000115 	stw	fp,4(sp)
  8003c8:	df000104 	addi	fp,sp,4
  8003cc:	e13fff15 	stw	r4,-4(fp)
	led_sense_atrial_event = false;
  8003d0:	d02727c5 	stb	zero,-25441(gp)
	return LED_ON_MILLISECONDS;
  8003d4:	00801904 	movi	r2,100
}
  8003d8:	e037883a 	mov	sp,fp
  8003dc:	df000017 	ldw	fp,0(sp)
  8003e0:	dec00104 	addi	sp,sp,4
  8003e4:	f800283a 	ret

008003e8 <v_sense_led_timer_isr_function>:

alt_u32 v_sense_led_timer_isr_function(void* contxet) {
  8003e8:	defffe04 	addi	sp,sp,-8
  8003ec:	df000115 	stw	fp,4(sp)
  8003f0:	df000104 	addi	fp,sp,4
  8003f4:	e13fff15 	stw	r4,-4(fp)
	led_sense_ventricular_event = false;
  8003f8:	d0272805 	stb	zero,-25440(gp)
	return LED_ON_MILLISECONDS;
  8003fc:	00801904 	movi	r2,100
}
  800400:	e037883a 	mov	sp,fp
  800404:	df000017 	ldw	fp,0(sp)
  800408:	dec00104 	addi	sp,sp,4
  80040c:	f800283a 	ret

00800410 <uart_read_isr_function>:

void uart_read_isr_function(void* context, alt_u32 id)
{
  800410:	defffb04 	addi	sp,sp,-20
  800414:	dfc00415 	stw	ra,16(sp)
  800418:	df000315 	stw	fp,12(sp)
  80041c:	df000304 	addi	fp,sp,12
  800420:	e13ffe15 	stw	r4,-8(fp)
  800424:	e17fff15 	stw	r5,-4(fp)
	// if we are NOT in UART MODE then exit early;

	char temp;
	temp = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
  800428:	00804074 	movhi	r2,257
  80042c:	10841004 	addi	r2,r2,4160
  800430:	10800037 	ldwio	r2,0(r2)
  800434:	e0bffd05 	stb	r2,-12(fp)

	if (pulse_mode == BUTTON_MODE) {
  800438:	d0a72603 	ldbu	r2,-25448(gp)
  80043c:	10803fcc 	andi	r2,r2,255
  800440:	10000d26 	beq	r2,zero,800478 <uart_read_isr_function+0x68>

		if (atrial_event) {
  800444:	d0a72683 	ldbu	r2,-25446(gp)
  800448:	10803fcc 	andi	r2,r2,255
  80044c:	10000326 	beq	r2,zero,80045c <uart_read_isr_function+0x4c>
			printf("Atrial Sent!\n");
  800450:	01002034 	movhi	r4,128
  800454:	211f9504 	addi	r4,r4,32340
  800458:	0800e880 	call	800e88 <puts>
		}

		if (ventricular_event) {
  80045c:	d0a726c3 	ldbu	r2,-25445(gp)
  800460:	10803fcc 	andi	r2,r2,255
  800464:	10000f26 	beq	r2,zero,8004a4 <uart_read_isr_function+0x94>
			printf("Ventricular Sent!\n");
  800468:	01002034 	movhi	r4,128
  80046c:	211f9904 	addi	r4,r4,32356
  800470:	0800e880 	call	800e88 <puts>
		}
		return;
  800474:	00000b06 	br	8004a4 <uart_read_isr_function+0x94>
	}

	if (temp == 'A') {
  800478:	e0bffd07 	ldb	r2,-12(fp)
  80047c:	10801058 	cmpnei	r2,r2,65
  800480:	1000021e 	bne	r2,zero,80048c <uart_read_isr_function+0x7c>
		send_atrial_event(false);
  800484:	0009883a 	mov	r4,zero
  800488:	0800a640 	call	800a64 <send_atrial_event>
	}
	if (temp == 'V') {
  80048c:	e0bffd07 	ldb	r2,-12(fp)
  800490:	10801598 	cmpnei	r2,r2,86
  800494:	1000041e 	bne	r2,zero,8004a8 <uart_read_isr_function+0x98>
		send_ventricular_event(false);
  800498:	0009883a 	mov	r4,zero
  80049c:	0800ad80 	call	800ad8 <send_ventricular_event>
  8004a0:	00000106 	br	8004a8 <uart_read_isr_function+0x98>
		}

		if (ventricular_event) {
			printf("Ventricular Sent!\n");
		}
		return;
  8004a4:	0001883a 	nop
	}
	if (temp == 'V') {
		send_ventricular_event(false);
	}
	//printf("UART read: %c\n", temp);
}
  8004a8:	e037883a 	mov	sp,fp
  8004ac:	dfc00117 	ldw	ra,4(sp)
  8004b0:	df000017 	ldw	fp,0(sp)
  8004b4:	dec00204 	addi	sp,sp,8
  8004b8:	f800283a 	ret

008004bc <a_events_timer_isr_function>:

alt_u32 a_events_timer_isr_function(void* context) {
  8004bc:	defffd04 	addi	sp,sp,-12
  8004c0:	df000215 	stw	fp,8(sp)
  8004c4:	df000204 	addi	fp,sp,8
  8004c8:	e13fff15 	stw	r4,-4(fp)
	int *a_timer_count =(int*) context;
  8004cc:	e0bfff17 	ldw	r2,-4(fp)
  8004d0:	e0bffe15 	stw	r2,-8(fp)
	(*a_timer_count)++;
  8004d4:	e0bffe17 	ldw	r2,-8(fp)
  8004d8:	10800017 	ldw	r2,0(r2)
  8004dc:	10c00044 	addi	r3,r2,1
  8004e0:	e0bffe17 	ldw	r2,-8(fp)
  8004e4:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  8004e8:	00800044 	movi	r2,1
}
  8004ec:	e037883a 	mov	sp,fp
  8004f0:	df000017 	ldw	fp,0(sp)
  8004f4:	dec00104 	addi	sp,sp,4
  8004f8:	f800283a 	ret

008004fc <v_events_timer_isr_function>:

alt_u32 v_events_timer_isr_function(void* context) {
  8004fc:	defffd04 	addi	sp,sp,-12
  800500:	df000215 	stw	fp,8(sp)
  800504:	df000204 	addi	fp,sp,8
  800508:	e13fff15 	stw	r4,-4(fp)
	int *v_timer_count =(int*) context;
  80050c:	e0bfff17 	ldw	r2,-4(fp)
  800510:	e0bffe15 	stw	r2,-8(fp)
	(*v_timer_count)++;
  800514:	e0bffe17 	ldw	r2,-8(fp)
  800518:	10800017 	ldw	r2,0(r2)
  80051c:	10c00044 	addi	r3,r2,1
  800520:	e0bffe17 	ldw	r2,-8(fp)
  800524:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  800528:	00800044 	movi	r2,1
}
  80052c:	e037883a 	mov	sp,fp
  800530:	df000017 	ldw	fp,0(sp)
  800534:	dec00104 	addi	sp,sp,4
  800538:	f800283a 	ret

0080053c <main>:

int main(void)
{
  80053c:	deffcb04 	addi	sp,sp,-212
  800540:	dfc03415 	stw	ra,208(sp)
  800544:	df003315 	stw	fp,204(sp)
  800548:	df003304 	addi	fp,sp,204
	printf("Starting.\n");
  80054c:	01002034 	movhi	r4,128
  800550:	211f9e04 	addi	r4,r4,32376
  800554:	0800e880 	call	800e88 <puts>

	unsigned int switch_value = 0;
  800558:	e03fd515 	stw	zero,-172(fp)
	int button_value = 1;
  80055c:	00800044 	movi	r2,1
  800560:	e0bfd915 	stw	r2,-156(fp)
	void* button_context = (void*) &button_value; // Cast before passing context to isr
  800564:	e0bfd904 	addi	r2,fp,-156
  800568:	e0bfd615 	stw	r2,-168(fp)
	//========= 	  INTERRUPTS  	   =========

	// Clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  80056c:	0007883a 	mov	r3,zero
  800570:	00804074 	movhi	r2,257
  800574:	10842b04 	addi	r2,r2,4268
  800578:	10c00035 	stwio	r3,0(r2)

	// Enable interrupts
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  80057c:	00c001c4 	movi	r3,7
  800580:	00804074 	movhi	r2,257
  800584:	10842a04 	addi	r2,r2,4264
  800588:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(UART_BASE, 0x0080);
  80058c:	00c02004 	movi	r3,128
  800590:	00804074 	movhi	r2,257
  800594:	10841204 	addi	r2,r2,4168
  800598:	10c00035 	stwio	r3,0(r2)

	// Register the isr
	alt_irq_register(KEYS_IRQ, button_context, buttons_interrupts_function);
  80059c:	01802034 	movhi	r6,128
  8005a0:	3180a404 	addi	r6,r6,656
  8005a4:	e17fd617 	ldw	r5,-168(fp)
  8005a8:	01000104 	movi	r4,4
  8005ac:	0803ee00 	call	803ee0 <alt_irq_register>
	alt_irq_register(UART_IRQ, NULL, uart_read_isr_function);
  8005b0:	01802034 	movhi	r6,128
  8005b4:	31810404 	addi	r6,r6,1040
  8005b8:	000b883a 	mov	r5,zero
  8005bc:	0009883a 	mov	r4,zero
  8005c0:	0803ee00 	call	803ee0 <alt_irq_register>

	printf("Interrupts Initialised.\n");
  8005c4:	01002034 	movhi	r4,128
  8005c8:	211fa104 	addi	r4,r4,32388
  8005cc:	0800e880 	call	800e88 <puts>
	//========= 	  INTERRUPTS  	   =========
	//========= 	    TIMERS  	   =========
	// Lets LEDs stay on for 500 seconds.
	alt_alarm a_pace_led_timer;
	alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  8005d0:	e0bfda04 	addi	r2,fp,-152
  8005d4:	000f883a 	mov	r7,zero
  8005d8:	01802034 	movhi	r6,128
  8005dc:	3180dc04 	addi	r6,r6,880
  8005e0:	01401904 	movi	r5,100
  8005e4:	1009883a 	mov	r4,r2
  8005e8:	0803b900 	call	803b90 <alt_alarm_start>

	alt_alarm v_pace_led_timer;
	alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  8005ec:	e0bfe004 	addi	r2,fp,-128
  8005f0:	000f883a 	mov	r7,zero
  8005f4:	01802034 	movhi	r6,128
  8005f8:	3180e604 	addi	r6,r6,920
  8005fc:	01401904 	movi	r5,100
  800600:	1009883a 	mov	r4,r2
  800604:	0803b900 	call	803b90 <alt_alarm_start>

	alt_alarm a_sense_led_timer;
	alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  800608:	e0bfe604 	addi	r2,fp,-104
  80060c:	000f883a 	mov	r7,zero
  800610:	01802034 	movhi	r6,128
  800614:	3180f004 	addi	r6,r6,960
  800618:	01401904 	movi	r5,100
  80061c:	1009883a 	mov	r4,r2
  800620:	0803b900 	call	803b90 <alt_alarm_start>

	alt_alarm v_sense_led_timer;
	alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  800624:	e0bfec04 	addi	r2,fp,-80
  800628:	000f883a 	mov	r7,zero
  80062c:	01802034 	movhi	r6,128
  800630:	3180fa04 	addi	r6,r6,1000
  800634:	01401904 	movi	r5,100
  800638:	1009883a 	mov	r4,r2
  80063c:	0803b900 	call	803b90 <alt_alarm_start>

	alt_alarm a_events_timer;
	int a_timer_count = 0;
  800640:	e03ff815 	stw	zero,-32(fp)
	void *a_events_timer_context = (void*) &a_timer_count;
  800644:	e0bff804 	addi	r2,fp,-32
  800648:	e0bfd715 	stw	r2,-164(fp)
	//alt_alarm_start(&a_events_timer, 1, a_events_timer_isr_function, a_events_timer_context);

	alt_alarm v_events_timer;
	int v_timer_count = 0;
  80064c:	e03fff15 	stw	zero,-4(fp)
	void *v_events_timer_context = (void*) &v_timer_count;
  800650:	e0bfff04 	addi	r2,fp,-4
  800654:	e0bfd815 	stw	r2,-160(fp)
	//alt_alarm_start(&v_events_timer, 1, v_events_timer_isr_function, v_events_timer_context);


	//========= 	    TIMERS  	   =========
	printf("Timers Initialised.\n");
  800658:	01002034 	movhi	r4,128
  80065c:	211fa704 	addi	r4,r4,32412
  800660:	0800e880 	call	800e88 <puts>

	printf("Entering Loop.\n");
  800664:	01002034 	movhi	r4,128
  800668:	211fac04 	addi	r4,r4,32432
  80066c:	0800e880 	call	800e88 <puts>
	while(1) {
		// Get switch state from switch peripheral (returns a binary)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800670:	00804074 	movhi	r2,257
  800674:	10842404 	addi	r2,r2,4240
  800678:	10800037 	ldwio	r2,0(r2)
  80067c:	e0bfd515 	stw	r2,-172(fp)


		// ========= 	  PULSE MODES 	  =========
		if (switch_value & (1 << PULSE_MODE_SWITCH)) {
  800680:	e0bfd517 	ldw	r2,-172(fp)
  800684:	1080004c 	andi	r2,r2,1
  800688:	10000326 	beq	r2,zero,800698 <main+0x15c>
			// SW0 is ON
			pulse_mode = BUTTON_MODE;
  80068c:	00800044 	movi	r2,1
  800690:	d0a72605 	stb	r2,-25448(gp)
  800694:	00000406 	br	8006a8 <main+0x16c>
		} else if (!(switch_value & (1 << PULSE_MODE_SWITCH))) {
  800698:	e0bfd517 	ldw	r2,-172(fp)
  80069c:	1080004c 	andi	r2,r2,1
  8006a0:	1000011e 	bne	r2,zero,8006a8 <main+0x16c>
			// SW0 is OFF
			pulse_mode = UART_MODE;
  8006a4:	d0272605 	stb	zero,-25448(gp)
		}
		// ========= 	  PULSE MODES 	  =========

		// ========= IMPLEMENTATION MODES =========
		if (switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH)) {
  8006a8:	e0bfd517 	ldw	r2,-172(fp)
  8006ac:	1080008c 	andi	r2,r2,2
  8006b0:	10000326 	beq	r2,zero,8006c0 <main+0x184>
			// SW1 is ON
			implementation_mode = SCCHARTS_MODE;
  8006b4:	00800044 	movi	r2,1
  8006b8:	d0a72645 	stb	r2,-25447(gp)
  8006bc:	00000406 	br	8006d0 <main+0x194>
		} else if (!(switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH))) {
  8006c0:	e0bfd517 	ldw	r2,-172(fp)
  8006c4:	1080008c 	andi	r2,r2,2
  8006c8:	1000011e 	bne	r2,zero,8006d0 <main+0x194>
			// SW1 is OFF
			implementation_mode = C_MODE;
  8006cc:	d0272645 	stb	zero,-25447(gp)
		}
		// ========= IMPLEMENTATION MODES =========

		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING
		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING
		if (atrial_event) {
  8006d0:	d0a72683 	ldbu	r2,-25446(gp)
  8006d4:	10803fcc 	andi	r2,r2,255
  8006d8:	10001e26 	beq	r2,zero,800754 <main+0x218>
			if (is_paced) {
  8006dc:	d0a72703 	ldbu	r2,-25444(gp)
  8006e0:	10803fcc 	andi	r2,r2,255
  8006e4:	10000326 	beq	r2,zero,8006f4 <main+0x1b8>
				led_pace_atrial_event = true;
  8006e8:	00800044 	movi	r2,1
  8006ec:	d0a72745 	stb	r2,-25443(gp)
  8006f0:	00000206 	br	8006fc <main+0x1c0>
			} else {
				led_sense_atrial_event = true;
  8006f4:	00800044 	movi	r2,1
  8006f8:	d0a727c5 	stb	r2,-25441(gp)
			}

			// If we are in C_Mode, restart timer
			if (implementation_mode == C_MODE) {
  8006fc:	d0a72643 	ldbu	r2,-25447(gp)
  800700:	1080005c 	xori	r2,r2,1
  800704:	10803fcc 	andi	r2,r2,255
  800708:	10000c26 	beq	r2,zero,80073c <main+0x200>
				a_timer_count = 0;
  80070c:	e03ff815 	stw	zero,-32(fp)
				alt_alarm_stop(&a_events_timer);
  800710:	e0bff204 	addi	r2,fp,-56
  800714:	1009883a 	mov	r4,r2
  800718:	080464c0 	call	80464c <alt_alarm_stop>
				alt_alarm_start(&a_events_timer, 1, a_events_timer_isr_function, a_events_timer_context);
  80071c:	e0bff204 	addi	r2,fp,-56
  800720:	e1ffd717 	ldw	r7,-164(fp)
  800724:	01802034 	movhi	r6,128
  800728:	31812f04 	addi	r6,r6,1212
  80072c:	01400044 	movi	r5,1
  800730:	1009883a 	mov	r4,r2
  800734:	0803b900 	call	803b90 <alt_alarm_start>
  800738:	00000406 	br	80074c <main+0x210>
			} else if (implementation_mode == SCCHARTS_MODE) {
  80073c:	d0a72643 	ldbu	r2,-25447(gp)
  800740:	10803fcc 	andi	r2,r2,255
  800744:	10000126 	beq	r2,zero,80074c <main+0x210>
				SCCHARTS_Mode_Pacemaker();
  800748:	0800da80 	call	800da8 <SCCHARTS_Mode_Pacemaker>
			}



			atrial_event = false;
  80074c:	d0272685 	stb	zero,-25446(gp)
			is_paced = false;
  800750:	d0272705 	stb	zero,-25444(gp)
		}

		if (ventricular_event) {
  800754:	d0a726c3 	ldbu	r2,-25445(gp)
  800758:	10803fcc 	andi	r2,r2,255
  80075c:	10000a26 	beq	r2,zero,800788 <main+0x24c>
			if (is_paced) {
  800760:	d0a72703 	ldbu	r2,-25444(gp)
  800764:	10803fcc 	andi	r2,r2,255
  800768:	10000326 	beq	r2,zero,800778 <main+0x23c>
				led_pace_ventricular_event = true;
  80076c:	00800044 	movi	r2,1
  800770:	d0a72785 	stb	r2,-25442(gp)
  800774:	00000206 	br	800780 <main+0x244>
			} else {
				led_sense_ventricular_event = true;
  800778:	00800044 	movi	r2,1
  80077c:	d0a72805 	stb	r2,-25440(gp)
			}

			// do stuff
			ventricular_event = false;
  800780:	d02726c5 	stb	zero,-25445(gp)
			is_paced = false;
  800784:	d0272705 	stb	zero,-25444(gp)
		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS -- SENSING

		// IMPLEMENTATION
		// IMPLEMENTATION

		if (implementation_mode == C_MODE) {
  800788:	d0a72643 	ldbu	r2,-25447(gp)
  80078c:	1080005c 	xori	r2,r2,1
  800790:	10803fcc 	andi	r2,r2,255
  800794:	10000626 	beq	r2,zero,8007b0 <main+0x274>
			C_Mode_Pacemaker(a_timer_count, v_timer_count);
  800798:	e0bff817 	ldw	r2,-32(fp)
  80079c:	e0ffff17 	ldw	r3,-4(fp)
  8007a0:	180b883a 	mov	r5,r3
  8007a4:	1009883a 	mov	r4,r2
  8007a8:	0800d800 	call	800d80 <C_Mode_Pacemaker>
  8007ac:	00000406 	br	8007c0 <main+0x284>
		} else if (implementation_mode == SCCHARTS_MODE) {
  8007b0:	d0a72643 	ldbu	r2,-25447(gp)
  8007b4:	10803fcc 	andi	r2,r2,255
  8007b8:	10000126 	beq	r2,zero,8007c0 <main+0x284>
			SCCHARTS_Mode_Pacemaker();
  8007bc:	0800da80 	call	800da8 <SCCHARTS_Mode_Pacemaker>
		// IMPLEMENTATION


		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		if (led_pace_atrial_event) {
  8007c0:	d0a72743 	ldbu	r2,-25443(gp)
  8007c4:	10803fcc 	andi	r2,r2,255
  8007c8:	10002626 	beq	r2,zero,800864 <main+0x328>
			if (!a_pace_led_timer_already_started) {
  8007cc:	d0a72843 	ldbu	r2,-25439(gp)
  8007d0:	1080005c 	xori	r2,r2,1
  8007d4:	10803fcc 	andi	r2,r2,255
  8007d8:	10000c26 	beq	r2,zero,80080c <main+0x2d0>
				alt_alarm_stop(&a_pace_led_timer);
  8007dc:	e0bfda04 	addi	r2,fp,-152
  8007e0:	1009883a 	mov	r4,r2
  8007e4:	080464c0 	call	80464c <alt_alarm_stop>
				alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  8007e8:	e0bfda04 	addi	r2,fp,-152
  8007ec:	000f883a 	mov	r7,zero
  8007f0:	01802034 	movhi	r6,128
  8007f4:	3180dc04 	addi	r6,r6,880
  8007f8:	01401904 	movi	r5,100
  8007fc:	1009883a 	mov	r4,r2
  800800:	0803b900 	call	803b90 <alt_alarm_start>
				a_pace_led_timer_already_started = true;
  800804:	00800044 	movi	r2,1
  800808:	d0a72845 	stb	r2,-25439(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  80080c:	00804074 	movhi	r2,257
  800810:	10841c04 	addi	r2,r2,4208
  800814:	10800037 	ldwio	r2,0(r2)
  800818:	e0bfcd15 	stw	r2,-204(fp)

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = LEDG0; i < LEDG3 + 1; i++) {
  80081c:	e03fce15 	stw	zero,-200(fp)
  800820:	00000906 	br	800848 <main+0x30c>
				led_value = led_value |= (1<<i);
  800824:	00c00044 	movi	r3,1
  800828:	e0bfce17 	ldw	r2,-200(fp)
  80082c:	1884983a 	sll	r2,r3,r2
  800830:	e0ffcd17 	ldw	r3,-204(fp)
  800834:	1884b03a 	or	r2,r3,r2
  800838:	e0bfcd15 	stw	r2,-204(fp)
				a_pace_led_timer_already_started = true;
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = LEDG0; i < LEDG3 + 1; i++) {
  80083c:	e0bfce17 	ldw	r2,-200(fp)
  800840:	10800044 	addi	r2,r2,1
  800844:	e0bfce15 	stw	r2,-200(fp)
  800848:	e0bfce17 	ldw	r2,-200(fp)
  80084c:	10800110 	cmplti	r2,r2,4
  800850:	103ff41e 	bne	r2,zero,800824 <__alt_mem_onchip_mem+0xff7f8824>
				led_value = led_value |= (1<<i);
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800854:	00804074 	movhi	r2,257
  800858:	10841c04 	addi	r2,r2,4208
  80085c:	e0ffcd17 	ldw	r3,-204(fp)
  800860:	10c00035 	stwio	r3,0(r2)

		}

		if (led_pace_ventricular_event) {
  800864:	d0a72783 	ldbu	r2,-25442(gp)
  800868:	10803fcc 	andi	r2,r2,255
  80086c:	10002726 	beq	r2,zero,80090c <main+0x3d0>
			if (!v_pace_led_timer_already_started) {
  800870:	d0a72883 	ldbu	r2,-25438(gp)
  800874:	1080005c 	xori	r2,r2,1
  800878:	10803fcc 	andi	r2,r2,255
  80087c:	10000c26 	beq	r2,zero,8008b0 <main+0x374>
				alt_alarm_stop(&v_pace_led_timer);
  800880:	e0bfe004 	addi	r2,fp,-128
  800884:	1009883a 	mov	r4,r2
  800888:	080464c0 	call	80464c <alt_alarm_stop>
				alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  80088c:	e0bfe004 	addi	r2,fp,-128
  800890:	000f883a 	mov	r7,zero
  800894:	01802034 	movhi	r6,128
  800898:	3180e604 	addi	r6,r6,920
  80089c:	01401904 	movi	r5,100
  8008a0:	1009883a 	mov	r4,r2
  8008a4:	0803b900 	call	803b90 <alt_alarm_start>
				v_pace_led_timer_already_started = true;
  8008a8:	00800044 	movi	r2,1
  8008ac:	d0a72885 	stb	r2,-25438(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  8008b0:	00804074 	movhi	r2,257
  8008b4:	10841c04 	addi	r2,r2,4208
  8008b8:	10800037 	ldwio	r2,0(r2)
  8008bc:	e0bfcf15 	stw	r2,-196(fp)

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = LEDG4; i < LEDG7 + 1; i++) {
  8008c0:	00800104 	movi	r2,4
  8008c4:	e0bfd015 	stw	r2,-192(fp)
  8008c8:	00000906 	br	8008f0 <main+0x3b4>
				led_value = led_value |= (1<<i);
  8008cc:	00c00044 	movi	r3,1
  8008d0:	e0bfd017 	ldw	r2,-192(fp)
  8008d4:	1884983a 	sll	r2,r3,r2
  8008d8:	e0ffcf17 	ldw	r3,-196(fp)
  8008dc:	1884b03a 	or	r2,r3,r2
  8008e0:	e0bfcf15 	stw	r2,-196(fp)
				v_pace_led_timer_already_started = true;
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = LEDG4; i < LEDG7 + 1; i++) {
  8008e4:	e0bfd017 	ldw	r2,-192(fp)
  8008e8:	10800044 	addi	r2,r2,1
  8008ec:	e0bfd015 	stw	r2,-192(fp)
  8008f0:	e0bfd017 	ldw	r2,-192(fp)
  8008f4:	10800210 	cmplti	r2,r2,8
  8008f8:	103ff41e 	bne	r2,zero,8008cc <__alt_mem_onchip_mem+0xff7f88cc>
				led_value = led_value |= (1<<i);
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  8008fc:	00804074 	movhi	r2,257
  800900:	10841c04 	addi	r2,r2,4208
  800904:	e0ffcf17 	ldw	r3,-196(fp)
  800908:	10c00035 	stwio	r3,0(r2)
		}
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==

		// SENSE LEDS == SENSE LEDS == SENSE LEDS == SENSE LEDS ==
		if (led_sense_atrial_event) {
  80090c:	d0a727c3 	ldbu	r2,-25441(gp)
  800910:	10803fcc 	andi	r2,r2,255
  800914:	10002626 	beq	r2,zero,8009b0 <main+0x474>
			if (!a_sense_led_timer_already_started) {
  800918:	d0a728c3 	ldbu	r2,-25437(gp)
  80091c:	1080005c 	xori	r2,r2,1
  800920:	10803fcc 	andi	r2,r2,255
  800924:	10000c26 	beq	r2,zero,800958 <main+0x41c>
				alt_alarm_stop(&a_sense_led_timer);
  800928:	e0bfe604 	addi	r2,fp,-104
  80092c:	1009883a 	mov	r4,r2
  800930:	080464c0 	call	80464c <alt_alarm_stop>
				alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  800934:	e0bfe604 	addi	r2,fp,-104
  800938:	000f883a 	mov	r7,zero
  80093c:	01802034 	movhi	r6,128
  800940:	3180f004 	addi	r6,r6,960
  800944:	01401904 	movi	r5,100
  800948:	1009883a 	mov	r4,r2
  80094c:	0803b900 	call	803b90 <alt_alarm_start>
				a_sense_led_timer_already_started = true;
  800950:	00800044 	movi	r2,1
  800954:	d0a728c5 	stb	r2,-25437(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800958:	00804074 	movhi	r2,257
  80095c:	10842004 	addi	r2,r2,4224
  800960:	10800037 	ldwio	r2,0(r2)
  800964:	e0bfd115 	stw	r2,-188(fp)

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = 0; i < 9; i++) {
  800968:	e03fd215 	stw	zero,-184(fp)
  80096c:	00000906 	br	800994 <main+0x458>
				led_value = led_value |= (1<<i);
  800970:	00c00044 	movi	r3,1
  800974:	e0bfd217 	ldw	r2,-184(fp)
  800978:	1884983a 	sll	r2,r3,r2
  80097c:	e0ffd117 	ldw	r3,-188(fp)
  800980:	1884b03a 	or	r2,r3,r2
  800984:	e0bfd115 	stw	r2,-188(fp)
				a_sense_led_timer_already_started = true;
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = 0; i < 9; i++) {
  800988:	e0bfd217 	ldw	r2,-184(fp)
  80098c:	10800044 	addi	r2,r2,1
  800990:	e0bfd215 	stw	r2,-184(fp)
  800994:	e0bfd217 	ldw	r2,-184(fp)
  800998:	10800250 	cmplti	r2,r2,9
  80099c:	103ff41e 	bne	r2,zero,800970 <__alt_mem_onchip_mem+0xff7f8970>
				led_value = led_value |= (1<<i);
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  8009a0:	00804074 	movhi	r2,257
  8009a4:	10842004 	addi	r2,r2,4224
  8009a8:	e0ffd117 	ldw	r3,-188(fp)
  8009ac:	10c00035 	stwio	r3,0(r2)

		}

		if (led_sense_ventricular_event) {
  8009b0:	d0a72803 	ldbu	r2,-25440(gp)
  8009b4:	10803fcc 	andi	r2,r2,255
  8009b8:	10002726 	beq	r2,zero,800a58 <main+0x51c>
			if (!v_sense_led_timer_already_started) {
  8009bc:	d0a72903 	ldbu	r2,-25436(gp)
  8009c0:	1080005c 	xori	r2,r2,1
  8009c4:	10803fcc 	andi	r2,r2,255
  8009c8:	10000c26 	beq	r2,zero,8009fc <main+0x4c0>
				alt_alarm_stop(&v_sense_led_timer);
  8009cc:	e0bfec04 	addi	r2,fp,-80
  8009d0:	1009883a 	mov	r4,r2
  8009d4:	080464c0 	call	80464c <alt_alarm_stop>
				alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  8009d8:	e0bfec04 	addi	r2,fp,-80
  8009dc:	000f883a 	mov	r7,zero
  8009e0:	01802034 	movhi	r6,128
  8009e4:	3180fa04 	addi	r6,r6,1000
  8009e8:	01401904 	movi	r5,100
  8009ec:	1009883a 	mov	r4,r2
  8009f0:	0803b900 	call	803b90 <alt_alarm_start>
				v_sense_led_timer_already_started = true;
  8009f4:	00800044 	movi	r2,1
  8009f8:	d0a72905 	stb	r2,-25436(gp)
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  8009fc:	00804074 	movhi	r2,257
  800a00:	10842004 	addi	r2,r2,4224
  800a04:	10800037 	ldwio	r2,0(r2)
  800a08:	e0bfd315 	stw	r2,-180(fp)

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = 9; i < 18; i++) {
  800a0c:	00800244 	movi	r2,9
  800a10:	e0bfd415 	stw	r2,-176(fp)
  800a14:	00000906 	br	800a3c <main+0x500>
				led_value = led_value |= (1<<i);
  800a18:	00c00044 	movi	r3,1
  800a1c:	e0bfd417 	ldw	r2,-176(fp)
  800a20:	1884983a 	sll	r2,r3,r2
  800a24:	e0ffd317 	ldw	r3,-180(fp)
  800a28:	1884b03a 	or	r2,r3,r2
  800a2c:	e0bfd315 	stw	r2,-180(fp)
				v_sense_led_timer_already_started = true;
			}
			int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

			// SET ALL BITS UP FROM LEDG0 TO LEDG3
			for (int i = 9; i < 18; i++) {
  800a30:	e0bfd417 	ldw	r2,-176(fp)
  800a34:	10800044 	addi	r2,r2,1
  800a38:	e0bfd415 	stw	r2,-176(fp)
  800a3c:	e0bfd417 	ldw	r2,-176(fp)
  800a40:	10800490 	cmplti	r2,r2,18
  800a44:	103ff41e 	bne	r2,zero,800a18 <__alt_mem_onchip_mem+0xff7f8a18>
				led_value = led_value |= (1<<i);
			}

			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800a48:	00804074 	movhi	r2,257
  800a4c:	10842004 	addi	r2,r2,4224
  800a50:	e0ffd317 	ldw	r3,-180(fp)
  800a54:	10c00035 	stwio	r3,0(r2)

		}

		clear_pace_led_events();
  800a58:	0800b780 	call	800b78 <clear_pace_led_events>
		clear_sense_led_events();
  800a5c:	0800c7c0 	call	800c7c <clear_sense_led_events>
		//clear_heart_flags();
	}
  800a60:	003f0306 	br	800670 <__alt_mem_onchip_mem+0xff7f8670>

00800a64 <send_atrial_event>:
	printf("Exiting Loop.\n");
	return 0;
}

void send_atrial_event(bool isThisEventPaced) {
  800a64:	defffc04 	addi	sp,sp,-16
  800a68:	dfc00315 	stw	ra,12(sp)
  800a6c:	df000215 	stw	fp,8(sp)
  800a70:	df000204 	addi	fp,sp,8
  800a74:	2005883a 	mov	r2,r4
  800a78:	e0bfff05 	stb	r2,-4(fp)
	if (isThisEventPaced) {
  800a7c:	e0bfff03 	ldbu	r2,-4(fp)
  800a80:	10000926 	beq	r2,zero,800aa8 <send_atrial_event+0x44>
		is_paced = true;
  800a84:	00800044 	movi	r2,1
  800a88:	d0a72705 	stb	r2,-25444(gp)
		char atrial_char = 'A';
  800a8c:	00801044 	movi	r2,65
  800a90:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, atrial_char);
  800a94:	e0fffe07 	ldb	r3,-8(fp)
  800a98:	00804074 	movhi	r2,257
  800a9c:	10841104 	addi	r2,r2,4164
  800aa0:	10c00035 	stwio	r3,0(r2)
  800aa4:	00000106 	br	800aac <send_atrial_event+0x48>
	} else {
		is_paced = false;
  800aa8:	d0272705 	stb	zero,-25444(gp)
	}
	atrial_event = true;
  800aac:	00800044 	movi	r2,1
  800ab0:	d0a72685 	stb	r2,-25446(gp)
	printf("Atrial Event Flagged!\n");
  800ab4:	01002034 	movhi	r4,128
  800ab8:	211fb004 	addi	r4,r4,32448
  800abc:	0800e880 	call	800e88 <puts>
}
  800ac0:	0001883a 	nop
  800ac4:	e037883a 	mov	sp,fp
  800ac8:	dfc00117 	ldw	ra,4(sp)
  800acc:	df000017 	ldw	fp,0(sp)
  800ad0:	dec00204 	addi	sp,sp,8
  800ad4:	f800283a 	ret

00800ad8 <send_ventricular_event>:

void send_ventricular_event(bool isThisEventPaced) {
  800ad8:	defffc04 	addi	sp,sp,-16
  800adc:	dfc00315 	stw	ra,12(sp)
  800ae0:	df000215 	stw	fp,8(sp)
  800ae4:	df000204 	addi	fp,sp,8
  800ae8:	2005883a 	mov	r2,r4
  800aec:	e0bfff05 	stb	r2,-4(fp)
	if (isThisEventPaced) {
  800af0:	e0bfff03 	ldbu	r2,-4(fp)
  800af4:	10000926 	beq	r2,zero,800b1c <send_ventricular_event+0x44>
		is_paced = true;
  800af8:	00800044 	movi	r2,1
  800afc:	d0a72705 	stb	r2,-25444(gp)
		char ventricular_char = 'V';
  800b00:	00801584 	movi	r2,86
  800b04:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, ventricular_char);
  800b08:	e0fffe07 	ldb	r3,-8(fp)
  800b0c:	00804074 	movhi	r2,257
  800b10:	10841104 	addi	r2,r2,4164
  800b14:	10c00035 	stwio	r3,0(r2)
  800b18:	00000106 	br	800b20 <send_ventricular_event+0x48>
	} else {
		is_paced = false;
  800b1c:	d0272705 	stb	zero,-25444(gp)
	}
	ventricular_event = true;
  800b20:	00800044 	movi	r2,1
  800b24:	d0a726c5 	stb	r2,-25445(gp)
	printf("Ventricular Event Flagged!\n");
  800b28:	01002034 	movhi	r4,128
  800b2c:	211fb604 	addi	r4,r4,32472
  800b30:	0800e880 	call	800e88 <puts>
}
  800b34:	0001883a 	nop
  800b38:	e037883a 	mov	sp,fp
  800b3c:	dfc00117 	ldw	ra,4(sp)
  800b40:	df000017 	ldw	fp,0(sp)
  800b44:	dec00204 	addi	sp,sp,8
  800b48:	f800283a 	ret

00800b4c <clear_heart_flags>:

void clear_heart_flags() {
  800b4c:	deffff04 	addi	sp,sp,-4
  800b50:	df000015 	stw	fp,0(sp)
  800b54:	d839883a 	mov	fp,sp
	atrial_event = false;
  800b58:	d0272685 	stb	zero,-25446(gp)
	ventricular_event = false;
  800b5c:	d02726c5 	stb	zero,-25445(gp)
	is_paced = false;
  800b60:	d0272705 	stb	zero,-25444(gp)
}
  800b64:	0001883a 	nop
  800b68:	e037883a 	mov	sp,fp
  800b6c:	df000017 	ldw	fp,0(sp)
  800b70:	dec00104 	addi	sp,sp,4
  800b74:	f800283a 	ret

00800b78 <clear_pace_led_events>:

void clear_pace_led_events() {
  800b78:	defffb04 	addi	sp,sp,-20
  800b7c:	df000415 	stw	fp,16(sp)
  800b80:	df000404 	addi	fp,sp,16
	if (!led_pace_atrial_event) {
  800b84:	d0a72743 	ldbu	r2,-25443(gp)
  800b88:	1080005c 	xori	r2,r2,1
  800b8c:	10803fcc 	andi	r2,r2,255
  800b90:	10001826 	beq	r2,zero,800bf4 <clear_pace_led_events+0x7c>
		a_pace_led_timer_already_started = false;
  800b94:	d0272845 	stb	zero,-25439(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800b98:	00804074 	movhi	r2,257
  800b9c:	10841c04 	addi	r2,r2,4208
  800ba0:	10800037 	ldwio	r2,0(r2)
  800ba4:	e0bffc15 	stw	r2,-16(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800ba8:	e03ffd15 	stw	zero,-12(fp)
  800bac:	00000a06 	br	800bd8 <clear_pace_led_events+0x60>
			led_value = led_value &= ~(1<<i);
  800bb0:	00c00044 	movi	r3,1
  800bb4:	e0bffd17 	ldw	r2,-12(fp)
  800bb8:	1884983a 	sll	r2,r3,r2
  800bbc:	0084303a 	nor	r2,zero,r2
  800bc0:	e0fffc17 	ldw	r3,-16(fp)
  800bc4:	1884703a 	and	r2,r3,r2
  800bc8:	e0bffc15 	stw	r2,-16(fp)
	if (!led_pace_atrial_event) {
		a_pace_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG0; i < LEDG3 + 1; i++) {
  800bcc:	e0bffd17 	ldw	r2,-12(fp)
  800bd0:	10800044 	addi	r2,r2,1
  800bd4:	e0bffd15 	stw	r2,-12(fp)
  800bd8:	e0bffd17 	ldw	r2,-12(fp)
  800bdc:	10800110 	cmplti	r2,r2,4
  800be0:	103ff31e 	bne	r2,zero,800bb0 <__alt_mem_onchip_mem+0xff7f8bb0>
			led_value = led_value &= ~(1<<i);
		}

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800be4:	00804074 	movhi	r2,257
  800be8:	10841c04 	addi	r2,r2,4208
  800bec:	e0fffc17 	ldw	r3,-16(fp)
  800bf0:	10c00035 	stwio	r3,0(r2)
	}

	if (!led_pace_ventricular_event) {
  800bf4:	d0a72783 	ldbu	r2,-25442(gp)
  800bf8:	1080005c 	xori	r2,r2,1
  800bfc:	10803fcc 	andi	r2,r2,255
  800c00:	10001926 	beq	r2,zero,800c68 <clear_pace_led_events+0xf0>
		v_pace_led_timer_already_started = false;
  800c04:	d0272885 	stb	zero,-25438(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800c08:	00804074 	movhi	r2,257
  800c0c:	10841c04 	addi	r2,r2,4208
  800c10:	10800037 	ldwio	r2,0(r2)
  800c14:	e0bffe15 	stw	r2,-8(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800c18:	00800104 	movi	r2,4
  800c1c:	e0bfff15 	stw	r2,-4(fp)
  800c20:	00000a06 	br	800c4c <clear_pace_led_events+0xd4>
			led_value = led_value &= ~(1<<i);
  800c24:	00c00044 	movi	r3,1
  800c28:	e0bfff17 	ldw	r2,-4(fp)
  800c2c:	1884983a 	sll	r2,r3,r2
  800c30:	0084303a 	nor	r2,zero,r2
  800c34:	e0fffe17 	ldw	r3,-8(fp)
  800c38:	1884703a 	and	r2,r3,r2
  800c3c:	e0bffe15 	stw	r2,-8(fp)
	if (!led_pace_ventricular_event) {
		v_pace_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = LEDG4; i < LEDG7 + 1; i++) {
  800c40:	e0bfff17 	ldw	r2,-4(fp)
  800c44:	10800044 	addi	r2,r2,1
  800c48:	e0bfff15 	stw	r2,-4(fp)
  800c4c:	e0bfff17 	ldw	r2,-4(fp)
  800c50:	10800210 	cmplti	r2,r2,8
  800c54:	103ff31e 	bne	r2,zero,800c24 <__alt_mem_onchip_mem+0xff7f8c24>
			led_value = led_value &= ~(1<<i);
		}

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800c58:	00804074 	movhi	r2,257
  800c5c:	10841c04 	addi	r2,r2,4208
  800c60:	e0fffe17 	ldw	r3,-8(fp)
  800c64:	10c00035 	stwio	r3,0(r2)
	}
}
  800c68:	0001883a 	nop
  800c6c:	e037883a 	mov	sp,fp
  800c70:	df000017 	ldw	fp,0(sp)
  800c74:	dec00104 	addi	sp,sp,4
  800c78:	f800283a 	ret

00800c7c <clear_sense_led_events>:

void clear_sense_led_events() {
  800c7c:	defffb04 	addi	sp,sp,-20
  800c80:	df000415 	stw	fp,16(sp)
  800c84:	df000404 	addi	fp,sp,16
	if (!led_sense_atrial_event) {
  800c88:	d0a727c3 	ldbu	r2,-25441(gp)
  800c8c:	1080005c 	xori	r2,r2,1
  800c90:	10803fcc 	andi	r2,r2,255
  800c94:	10001826 	beq	r2,zero,800cf8 <clear_sense_led_events+0x7c>
		a_sense_led_timer_already_started = false;
  800c98:	d02728c5 	stb	zero,-25437(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800c9c:	00804074 	movhi	r2,257
  800ca0:	10842004 	addi	r2,r2,4224
  800ca4:	10800037 	ldwio	r2,0(r2)
  800ca8:	e0bffc15 	stw	r2,-16(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 0; i < 9; i++) {
  800cac:	e03ffd15 	stw	zero,-12(fp)
  800cb0:	00000a06 	br	800cdc <clear_sense_led_events+0x60>
			led_value = led_value &= ~(1<<i);
  800cb4:	00c00044 	movi	r3,1
  800cb8:	e0bffd17 	ldw	r2,-12(fp)
  800cbc:	1884983a 	sll	r2,r3,r2
  800cc0:	0084303a 	nor	r2,zero,r2
  800cc4:	e0fffc17 	ldw	r3,-16(fp)
  800cc8:	1884703a 	and	r2,r3,r2
  800ccc:	e0bffc15 	stw	r2,-16(fp)
	if (!led_sense_atrial_event) {
		a_sense_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 0; i < 9; i++) {
  800cd0:	e0bffd17 	ldw	r2,-12(fp)
  800cd4:	10800044 	addi	r2,r2,1
  800cd8:	e0bffd15 	stw	r2,-12(fp)
  800cdc:	e0bffd17 	ldw	r2,-12(fp)
  800ce0:	10800250 	cmplti	r2,r2,9
  800ce4:	103ff31e 	bne	r2,zero,800cb4 <__alt_mem_onchip_mem+0xff7f8cb4>
			led_value = led_value &= ~(1<<i);
		}

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800ce8:	00804074 	movhi	r2,257
  800cec:	10842004 	addi	r2,r2,4224
  800cf0:	e0fffc17 	ldw	r3,-16(fp)
  800cf4:	10c00035 	stwio	r3,0(r2)
	}

	if (!led_sense_ventricular_event) {
  800cf8:	d0a72803 	ldbu	r2,-25440(gp)
  800cfc:	1080005c 	xori	r2,r2,1
  800d00:	10803fcc 	andi	r2,r2,255
  800d04:	10001926 	beq	r2,zero,800d6c <clear_sense_led_events+0xf0>
		v_sense_led_timer_already_started = false;
  800d08:	d0272905 	stb	zero,-25436(gp)
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800d0c:	00804074 	movhi	r2,257
  800d10:	10842004 	addi	r2,r2,4224
  800d14:	10800037 	ldwio	r2,0(r2)
  800d18:	e0bffe15 	stw	r2,-8(fp)

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 9; i < 18; i++) {
  800d1c:	00800244 	movi	r2,9
  800d20:	e0bfff15 	stw	r2,-4(fp)
  800d24:	00000a06 	br	800d50 <clear_sense_led_events+0xd4>
			led_value = led_value &= ~(1<<i);
  800d28:	00c00044 	movi	r3,1
  800d2c:	e0bfff17 	ldw	r2,-4(fp)
  800d30:	1884983a 	sll	r2,r3,r2
  800d34:	0084303a 	nor	r2,zero,r2
  800d38:	e0fffe17 	ldw	r3,-8(fp)
  800d3c:	1884703a 	and	r2,r3,r2
  800d40:	e0bffe15 	stw	r2,-8(fp)
	if (!led_sense_ventricular_event) {
		v_sense_led_timer_already_started = false;
		int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);

		// CLEAR ALL BITS UP FROM LEDG0 TO LEDG3
		for (int i = 9; i < 18; i++) {
  800d44:	e0bfff17 	ldw	r2,-4(fp)
  800d48:	10800044 	addi	r2,r2,1
  800d4c:	e0bfff15 	stw	r2,-4(fp)
  800d50:	e0bfff17 	ldw	r2,-4(fp)
  800d54:	10800490 	cmplti	r2,r2,18
  800d58:	103ff31e 	bne	r2,zero,800d28 <__alt_mem_onchip_mem+0xff7f8d28>
			led_value = led_value &= ~(1<<i);
		}

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800d5c:	00804074 	movhi	r2,257
  800d60:	10842004 	addi	r2,r2,4224
  800d64:	e0fffe17 	ldw	r3,-8(fp)
  800d68:	10c00035 	stwio	r3,0(r2)
	}
}
  800d6c:	0001883a 	nop
  800d70:	e037883a 	mov	sp,fp
  800d74:	df000017 	ldw	fp,0(sp)
  800d78:	dec00104 	addi	sp,sp,4
  800d7c:	f800283a 	ret

00800d80 <C_Mode_Pacemaker>:

void C_Mode_Pacemaker(int a_timer_count, int v_timer_count) {
  800d80:	defffd04 	addi	sp,sp,-12
  800d84:	df000215 	stw	fp,8(sp)
  800d88:	df000204 	addi	fp,sp,8
  800d8c:	e13ffe15 	stw	r4,-8(fp)
  800d90:	e17fff15 	stw	r5,-4(fp)
		//printf("TIMER HIT!\n");
		//send_ventricular_event(true);
		//a_timer_count = 0; // hey future me, this shit works, just implement the whole timing diagram shit
		// - past you 3:27am
	}
}
  800d94:	0001883a 	nop
  800d98:	e037883a 	mov	sp,fp
  800d9c:	df000017 	ldw	fp,0(sp)
  800da0:	dec00104 	addi	sp,sp,4
  800da4:	f800283a 	ret

00800da8 <SCCHARTS_Mode_Pacemaker>:

void SCCHARTS_Mode_Pacemaker() {
  800da8:	deffff04 	addi	sp,sp,-4
  800dac:	df000015 	stw	fp,0(sp)
  800db0:	d839883a 	mov	fp,sp

}
  800db4:	0001883a 	nop
  800db8:	e037883a 	mov	sp,fp
  800dbc:	df000017 	ldw	fp,0(sp)
  800dc0:	dec00104 	addi	sp,sp,4
  800dc4:	f800283a 	ret

00800dc8 <_puts_r>:
  800dc8:	defff604 	addi	sp,sp,-40
  800dcc:	dc000715 	stw	r16,28(sp)
  800dd0:	2021883a 	mov	r16,r4
  800dd4:	2809883a 	mov	r4,r5
  800dd8:	dc400815 	stw	r17,32(sp)
  800ddc:	dfc00915 	stw	ra,36(sp)
  800de0:	2823883a 	mov	r17,r5
  800de4:	0800e9c0 	call	800e9c <strlen>
  800de8:	10c00044 	addi	r3,r2,1
  800dec:	d8800115 	stw	r2,4(sp)
  800df0:	00802034 	movhi	r2,128
  800df4:	109fbd04 	addi	r2,r2,32500
  800df8:	d8800215 	stw	r2,8(sp)
  800dfc:	00800044 	movi	r2,1
  800e00:	d8800315 	stw	r2,12(sp)
  800e04:	00800084 	movi	r2,2
  800e08:	dc400015 	stw	r17,0(sp)
  800e0c:	d8c00615 	stw	r3,24(sp)
  800e10:	dec00415 	stw	sp,16(sp)
  800e14:	d8800515 	stw	r2,20(sp)
  800e18:	80000226 	beq	r16,zero,800e24 <_puts_r+0x5c>
  800e1c:	80800e17 	ldw	r2,56(r16)
  800e20:	10001426 	beq	r2,zero,800e74 <_puts_r+0xac>
  800e24:	81400217 	ldw	r5,8(r16)
  800e28:	2880030b 	ldhu	r2,12(r5)
  800e2c:	10c8000c 	andi	r3,r2,8192
  800e30:	1800061e 	bne	r3,zero,800e4c <_puts_r+0x84>
  800e34:	29001917 	ldw	r4,100(r5)
  800e38:	00f7ffc4 	movi	r3,-8193
  800e3c:	10880014 	ori	r2,r2,8192
  800e40:	20c6703a 	and	r3,r4,r3
  800e44:	2880030d 	sth	r2,12(r5)
  800e48:	28c01915 	stw	r3,100(r5)
  800e4c:	d9800404 	addi	r6,sp,16
  800e50:	8009883a 	mov	r4,r16
  800e54:	08012d40 	call	8012d4 <__sfvwrite_r>
  800e58:	1000091e 	bne	r2,zero,800e80 <_puts_r+0xb8>
  800e5c:	00800284 	movi	r2,10
  800e60:	dfc00917 	ldw	ra,36(sp)
  800e64:	dc400817 	ldw	r17,32(sp)
  800e68:	dc000717 	ldw	r16,28(sp)
  800e6c:	dec00a04 	addi	sp,sp,40
  800e70:	f800283a 	ret
  800e74:	8009883a 	mov	r4,r16
  800e78:	08012840 	call	801284 <__sinit>
  800e7c:	003fe906 	br	800e24 <__alt_mem_onchip_mem+0xff7f8e24>
  800e80:	00bfffc4 	movi	r2,-1
  800e84:	003ff606 	br	800e60 <__alt_mem_onchip_mem+0xff7f8e60>

00800e88 <puts>:
  800e88:	00802074 	movhi	r2,129
  800e8c:	10a77704 	addi	r2,r2,-25124
  800e90:	200b883a 	mov	r5,r4
  800e94:	11000017 	ldw	r4,0(r2)
  800e98:	0800dc81 	jmpi	800dc8 <_puts_r>

00800e9c <strlen>:
  800e9c:	208000cc 	andi	r2,r4,3
  800ea0:	10002026 	beq	r2,zero,800f24 <strlen+0x88>
  800ea4:	20800007 	ldb	r2,0(r4)
  800ea8:	10002026 	beq	r2,zero,800f2c <strlen+0x90>
  800eac:	2005883a 	mov	r2,r4
  800eb0:	00000206 	br	800ebc <strlen+0x20>
  800eb4:	10c00007 	ldb	r3,0(r2)
  800eb8:	18001826 	beq	r3,zero,800f1c <strlen+0x80>
  800ebc:	10800044 	addi	r2,r2,1
  800ec0:	10c000cc 	andi	r3,r2,3
  800ec4:	183ffb1e 	bne	r3,zero,800eb4 <__alt_mem_onchip_mem+0xff7f8eb4>
  800ec8:	10c00017 	ldw	r3,0(r2)
  800ecc:	01ffbff4 	movhi	r7,65279
  800ed0:	39ffbfc4 	addi	r7,r7,-257
  800ed4:	00ca303a 	nor	r5,zero,r3
  800ed8:	01a02074 	movhi	r6,32897
  800edc:	19c7883a 	add	r3,r3,r7
  800ee0:	31a02004 	addi	r6,r6,-32640
  800ee4:	1946703a 	and	r3,r3,r5
  800ee8:	1986703a 	and	r3,r3,r6
  800eec:	1800091e 	bne	r3,zero,800f14 <strlen+0x78>
  800ef0:	10800104 	addi	r2,r2,4
  800ef4:	10c00017 	ldw	r3,0(r2)
  800ef8:	19cb883a 	add	r5,r3,r7
  800efc:	00c6303a 	nor	r3,zero,r3
  800f00:	28c6703a 	and	r3,r5,r3
  800f04:	1986703a 	and	r3,r3,r6
  800f08:	183ff926 	beq	r3,zero,800ef0 <__alt_mem_onchip_mem+0xff7f8ef0>
  800f0c:	00000106 	br	800f14 <strlen+0x78>
  800f10:	10800044 	addi	r2,r2,1
  800f14:	10c00007 	ldb	r3,0(r2)
  800f18:	183ffd1e 	bne	r3,zero,800f10 <__alt_mem_onchip_mem+0xff7f8f10>
  800f1c:	1105c83a 	sub	r2,r2,r4
  800f20:	f800283a 	ret
  800f24:	2005883a 	mov	r2,r4
  800f28:	003fe706 	br	800ec8 <__alt_mem_onchip_mem+0xff7f8ec8>
  800f2c:	0005883a 	mov	r2,zero
  800f30:	f800283a 	ret

00800f34 <__fp_unlock>:
  800f34:	0005883a 	mov	r2,zero
  800f38:	f800283a 	ret

00800f3c <_cleanup_r>:
  800f3c:	01402034 	movhi	r5,128
  800f40:	294bb404 	addi	r5,r5,11984
  800f44:	08018541 	jmpi	801854 <_fwalk_reent>

00800f48 <__sinit.part.1>:
  800f48:	defff704 	addi	sp,sp,-36
  800f4c:	00c02034 	movhi	r3,128
  800f50:	dfc00815 	stw	ra,32(sp)
  800f54:	ddc00715 	stw	r23,28(sp)
  800f58:	dd800615 	stw	r22,24(sp)
  800f5c:	dd400515 	stw	r21,20(sp)
  800f60:	dd000415 	stw	r20,16(sp)
  800f64:	dcc00315 	stw	r19,12(sp)
  800f68:	dc800215 	stw	r18,8(sp)
  800f6c:	dc400115 	stw	r17,4(sp)
  800f70:	dc000015 	stw	r16,0(sp)
  800f74:	18c3cf04 	addi	r3,r3,3900
  800f78:	24000117 	ldw	r16,4(r4)
  800f7c:	20c00f15 	stw	r3,60(r4)
  800f80:	2080bb04 	addi	r2,r4,748
  800f84:	00c000c4 	movi	r3,3
  800f88:	20c0b915 	stw	r3,740(r4)
  800f8c:	2080ba15 	stw	r2,744(r4)
  800f90:	2000b815 	stw	zero,736(r4)
  800f94:	05c00204 	movi	r23,8
  800f98:	00800104 	movi	r2,4
  800f9c:	2025883a 	mov	r18,r4
  800fa0:	b80d883a 	mov	r6,r23
  800fa4:	81001704 	addi	r4,r16,92
  800fa8:	000b883a 	mov	r5,zero
  800fac:	80000015 	stw	zero,0(r16)
  800fb0:	80000115 	stw	zero,4(r16)
  800fb4:	80000215 	stw	zero,8(r16)
  800fb8:	8080030d 	sth	r2,12(r16)
  800fbc:	80001915 	stw	zero,100(r16)
  800fc0:	8000038d 	sth	zero,14(r16)
  800fc4:	80000415 	stw	zero,16(r16)
  800fc8:	80000515 	stw	zero,20(r16)
  800fcc:	80000615 	stw	zero,24(r16)
  800fd0:	08024ac0 	call	8024ac <memset>
  800fd4:	05802034 	movhi	r22,128
  800fd8:	94400217 	ldw	r17,8(r18)
  800fdc:	05402034 	movhi	r21,128
  800fe0:	05002034 	movhi	r20,128
  800fe4:	04c02034 	movhi	r19,128
  800fe8:	b58ae304 	addi	r22,r22,11148
  800fec:	ad4afa04 	addi	r21,r21,11240
  800ff0:	a50b1904 	addi	r20,r20,11364
  800ff4:	9ccb3004 	addi	r19,r19,11456
  800ff8:	85800815 	stw	r22,32(r16)
  800ffc:	85400915 	stw	r21,36(r16)
  801000:	85000a15 	stw	r20,40(r16)
  801004:	84c00b15 	stw	r19,44(r16)
  801008:	84000715 	stw	r16,28(r16)
  80100c:	00800284 	movi	r2,10
  801010:	8880030d 	sth	r2,12(r17)
  801014:	00800044 	movi	r2,1
  801018:	b80d883a 	mov	r6,r23
  80101c:	89001704 	addi	r4,r17,92
  801020:	000b883a 	mov	r5,zero
  801024:	88000015 	stw	zero,0(r17)
  801028:	88000115 	stw	zero,4(r17)
  80102c:	88000215 	stw	zero,8(r17)
  801030:	88001915 	stw	zero,100(r17)
  801034:	8880038d 	sth	r2,14(r17)
  801038:	88000415 	stw	zero,16(r17)
  80103c:	88000515 	stw	zero,20(r17)
  801040:	88000615 	stw	zero,24(r17)
  801044:	08024ac0 	call	8024ac <memset>
  801048:	94000317 	ldw	r16,12(r18)
  80104c:	00800484 	movi	r2,18
  801050:	8c400715 	stw	r17,28(r17)
  801054:	8d800815 	stw	r22,32(r17)
  801058:	8d400915 	stw	r21,36(r17)
  80105c:	8d000a15 	stw	r20,40(r17)
  801060:	8cc00b15 	stw	r19,44(r17)
  801064:	8080030d 	sth	r2,12(r16)
  801068:	00800084 	movi	r2,2
  80106c:	80000015 	stw	zero,0(r16)
  801070:	80000115 	stw	zero,4(r16)
  801074:	80000215 	stw	zero,8(r16)
  801078:	80001915 	stw	zero,100(r16)
  80107c:	8080038d 	sth	r2,14(r16)
  801080:	80000415 	stw	zero,16(r16)
  801084:	80000515 	stw	zero,20(r16)
  801088:	80000615 	stw	zero,24(r16)
  80108c:	b80d883a 	mov	r6,r23
  801090:	000b883a 	mov	r5,zero
  801094:	81001704 	addi	r4,r16,92
  801098:	08024ac0 	call	8024ac <memset>
  80109c:	00800044 	movi	r2,1
  8010a0:	84000715 	stw	r16,28(r16)
  8010a4:	85800815 	stw	r22,32(r16)
  8010a8:	85400915 	stw	r21,36(r16)
  8010ac:	85000a15 	stw	r20,40(r16)
  8010b0:	84c00b15 	stw	r19,44(r16)
  8010b4:	90800e15 	stw	r2,56(r18)
  8010b8:	dfc00817 	ldw	ra,32(sp)
  8010bc:	ddc00717 	ldw	r23,28(sp)
  8010c0:	dd800617 	ldw	r22,24(sp)
  8010c4:	dd400517 	ldw	r21,20(sp)
  8010c8:	dd000417 	ldw	r20,16(sp)
  8010cc:	dcc00317 	ldw	r19,12(sp)
  8010d0:	dc800217 	ldw	r18,8(sp)
  8010d4:	dc400117 	ldw	r17,4(sp)
  8010d8:	dc000017 	ldw	r16,0(sp)
  8010dc:	dec00904 	addi	sp,sp,36
  8010e0:	f800283a 	ret

008010e4 <__fp_lock>:
  8010e4:	0005883a 	mov	r2,zero
  8010e8:	f800283a 	ret

008010ec <__sfmoreglue>:
  8010ec:	defffc04 	addi	sp,sp,-16
  8010f0:	dc400115 	stw	r17,4(sp)
  8010f4:	2c7fffc4 	addi	r17,r5,-1
  8010f8:	8c401a24 	muli	r17,r17,104
  8010fc:	dc800215 	stw	r18,8(sp)
  801100:	2825883a 	mov	r18,r5
  801104:	89401d04 	addi	r5,r17,116
  801108:	dc000015 	stw	r16,0(sp)
  80110c:	dfc00315 	stw	ra,12(sp)
  801110:	08019180 	call	801918 <_malloc_r>
  801114:	1021883a 	mov	r16,r2
  801118:	10000726 	beq	r2,zero,801138 <__sfmoreglue+0x4c>
  80111c:	11000304 	addi	r4,r2,12
  801120:	10000015 	stw	zero,0(r2)
  801124:	14800115 	stw	r18,4(r2)
  801128:	11000215 	stw	r4,8(r2)
  80112c:	89801a04 	addi	r6,r17,104
  801130:	000b883a 	mov	r5,zero
  801134:	08024ac0 	call	8024ac <memset>
  801138:	8005883a 	mov	r2,r16
  80113c:	dfc00317 	ldw	ra,12(sp)
  801140:	dc800217 	ldw	r18,8(sp)
  801144:	dc400117 	ldw	r17,4(sp)
  801148:	dc000017 	ldw	r16,0(sp)
  80114c:	dec00404 	addi	sp,sp,16
  801150:	f800283a 	ret

00801154 <__sfp>:
  801154:	defffb04 	addi	sp,sp,-20
  801158:	dc000015 	stw	r16,0(sp)
  80115c:	04002074 	movhi	r16,129
  801160:	84277604 	addi	r16,r16,-25128
  801164:	dcc00315 	stw	r19,12(sp)
  801168:	2027883a 	mov	r19,r4
  80116c:	81000017 	ldw	r4,0(r16)
  801170:	dfc00415 	stw	ra,16(sp)
  801174:	dc800215 	stw	r18,8(sp)
  801178:	20800e17 	ldw	r2,56(r4)
  80117c:	dc400115 	stw	r17,4(sp)
  801180:	1000021e 	bne	r2,zero,80118c <__sfp+0x38>
  801184:	0800f480 	call	800f48 <__sinit.part.1>
  801188:	81000017 	ldw	r4,0(r16)
  80118c:	2480b804 	addi	r18,r4,736
  801190:	047fffc4 	movi	r17,-1
  801194:	91000117 	ldw	r4,4(r18)
  801198:	94000217 	ldw	r16,8(r18)
  80119c:	213fffc4 	addi	r4,r4,-1
  8011a0:	20000a16 	blt	r4,zero,8011cc <__sfp+0x78>
  8011a4:	8080030f 	ldh	r2,12(r16)
  8011a8:	10000c26 	beq	r2,zero,8011dc <__sfp+0x88>
  8011ac:	80c01d04 	addi	r3,r16,116
  8011b0:	00000206 	br	8011bc <__sfp+0x68>
  8011b4:	18bfe60f 	ldh	r2,-104(r3)
  8011b8:	10000826 	beq	r2,zero,8011dc <__sfp+0x88>
  8011bc:	213fffc4 	addi	r4,r4,-1
  8011c0:	1c3ffd04 	addi	r16,r3,-12
  8011c4:	18c01a04 	addi	r3,r3,104
  8011c8:	247ffa1e 	bne	r4,r17,8011b4 <__alt_mem_onchip_mem+0xff7f91b4>
  8011cc:	90800017 	ldw	r2,0(r18)
  8011d0:	10001d26 	beq	r2,zero,801248 <__sfp+0xf4>
  8011d4:	1025883a 	mov	r18,r2
  8011d8:	003fee06 	br	801194 <__alt_mem_onchip_mem+0xff7f9194>
  8011dc:	00bfffc4 	movi	r2,-1
  8011e0:	8080038d 	sth	r2,14(r16)
  8011e4:	00800044 	movi	r2,1
  8011e8:	8080030d 	sth	r2,12(r16)
  8011ec:	80001915 	stw	zero,100(r16)
  8011f0:	80000015 	stw	zero,0(r16)
  8011f4:	80000215 	stw	zero,8(r16)
  8011f8:	80000115 	stw	zero,4(r16)
  8011fc:	80000415 	stw	zero,16(r16)
  801200:	80000515 	stw	zero,20(r16)
  801204:	80000615 	stw	zero,24(r16)
  801208:	01800204 	movi	r6,8
  80120c:	000b883a 	mov	r5,zero
  801210:	81001704 	addi	r4,r16,92
  801214:	08024ac0 	call	8024ac <memset>
  801218:	8005883a 	mov	r2,r16
  80121c:	80000c15 	stw	zero,48(r16)
  801220:	80000d15 	stw	zero,52(r16)
  801224:	80001115 	stw	zero,68(r16)
  801228:	80001215 	stw	zero,72(r16)
  80122c:	dfc00417 	ldw	ra,16(sp)
  801230:	dcc00317 	ldw	r19,12(sp)
  801234:	dc800217 	ldw	r18,8(sp)
  801238:	dc400117 	ldw	r17,4(sp)
  80123c:	dc000017 	ldw	r16,0(sp)
  801240:	dec00504 	addi	sp,sp,20
  801244:	f800283a 	ret
  801248:	01400104 	movi	r5,4
  80124c:	9809883a 	mov	r4,r19
  801250:	08010ec0 	call	8010ec <__sfmoreglue>
  801254:	90800015 	stw	r2,0(r18)
  801258:	103fde1e 	bne	r2,zero,8011d4 <__alt_mem_onchip_mem+0xff7f91d4>
  80125c:	00800304 	movi	r2,12
  801260:	98800015 	stw	r2,0(r19)
  801264:	0005883a 	mov	r2,zero
  801268:	003ff006 	br	80122c <__alt_mem_onchip_mem+0xff7f922c>

0080126c <_cleanup>:
  80126c:	00802074 	movhi	r2,129
  801270:	10a77604 	addi	r2,r2,-25128
  801274:	11000017 	ldw	r4,0(r2)
  801278:	01402034 	movhi	r5,128
  80127c:	294bb404 	addi	r5,r5,11984
  801280:	08018541 	jmpi	801854 <_fwalk_reent>

00801284 <__sinit>:
  801284:	20800e17 	ldw	r2,56(r4)
  801288:	10000126 	beq	r2,zero,801290 <__sinit+0xc>
  80128c:	f800283a 	ret
  801290:	0800f481 	jmpi	800f48 <__sinit.part.1>

00801294 <__sfp_lock_acquire>:
  801294:	f800283a 	ret

00801298 <__sfp_lock_release>:
  801298:	f800283a 	ret

0080129c <__sinit_lock_acquire>:
  80129c:	f800283a 	ret

008012a0 <__sinit_lock_release>:
  8012a0:	f800283a 	ret

008012a4 <__fp_lock_all>:
  8012a4:	00802074 	movhi	r2,129
  8012a8:	10a77704 	addi	r2,r2,-25124
  8012ac:	11000017 	ldw	r4,0(r2)
  8012b0:	01402034 	movhi	r5,128
  8012b4:	29443904 	addi	r5,r5,4324
  8012b8:	08017901 	jmpi	801790 <_fwalk>

008012bc <__fp_unlock_all>:
  8012bc:	00802074 	movhi	r2,129
  8012c0:	10a77704 	addi	r2,r2,-25124
  8012c4:	11000017 	ldw	r4,0(r2)
  8012c8:	01402034 	movhi	r5,128
  8012cc:	2943cd04 	addi	r5,r5,3892
  8012d0:	08017901 	jmpi	801790 <_fwalk>

008012d4 <__sfvwrite_r>:
  8012d4:	30800217 	ldw	r2,8(r6)
  8012d8:	10006726 	beq	r2,zero,801478 <__sfvwrite_r+0x1a4>
  8012dc:	28c0030b 	ldhu	r3,12(r5)
  8012e0:	defff404 	addi	sp,sp,-48
  8012e4:	dd400715 	stw	r21,28(sp)
  8012e8:	dd000615 	stw	r20,24(sp)
  8012ec:	dc000215 	stw	r16,8(sp)
  8012f0:	dfc00b15 	stw	ra,44(sp)
  8012f4:	df000a15 	stw	fp,40(sp)
  8012f8:	ddc00915 	stw	r23,36(sp)
  8012fc:	dd800815 	stw	r22,32(sp)
  801300:	dcc00515 	stw	r19,20(sp)
  801304:	dc800415 	stw	r18,16(sp)
  801308:	dc400315 	stw	r17,12(sp)
  80130c:	1880020c 	andi	r2,r3,8
  801310:	2821883a 	mov	r16,r5
  801314:	202b883a 	mov	r21,r4
  801318:	3029883a 	mov	r20,r6
  80131c:	10002726 	beq	r2,zero,8013bc <__sfvwrite_r+0xe8>
  801320:	28800417 	ldw	r2,16(r5)
  801324:	10002526 	beq	r2,zero,8013bc <__sfvwrite_r+0xe8>
  801328:	1880008c 	andi	r2,r3,2
  80132c:	a4400017 	ldw	r17,0(r20)
  801330:	10002a26 	beq	r2,zero,8013dc <__sfvwrite_r+0x108>
  801334:	05a00034 	movhi	r22,32768
  801338:	0027883a 	mov	r19,zero
  80133c:	0025883a 	mov	r18,zero
  801340:	b5bf0004 	addi	r22,r22,-1024
  801344:	980d883a 	mov	r6,r19
  801348:	a809883a 	mov	r4,r21
  80134c:	90004626 	beq	r18,zero,801468 <__sfvwrite_r+0x194>
  801350:	900f883a 	mov	r7,r18
  801354:	b480022e 	bgeu	r22,r18,801360 <__sfvwrite_r+0x8c>
  801358:	01e00034 	movhi	r7,32768
  80135c:	39ff0004 	addi	r7,r7,-1024
  801360:	80800917 	ldw	r2,36(r16)
  801364:	81400717 	ldw	r5,28(r16)
  801368:	103ee83a 	callr	r2
  80136c:	0080570e 	bge	zero,r2,8014cc <__sfvwrite_r+0x1f8>
  801370:	a0c00217 	ldw	r3,8(r20)
  801374:	98a7883a 	add	r19,r19,r2
  801378:	90a5c83a 	sub	r18,r18,r2
  80137c:	1885c83a 	sub	r2,r3,r2
  801380:	a0800215 	stw	r2,8(r20)
  801384:	103fef1e 	bne	r2,zero,801344 <__alt_mem_onchip_mem+0xff7f9344>
  801388:	0005883a 	mov	r2,zero
  80138c:	dfc00b17 	ldw	ra,44(sp)
  801390:	df000a17 	ldw	fp,40(sp)
  801394:	ddc00917 	ldw	r23,36(sp)
  801398:	dd800817 	ldw	r22,32(sp)
  80139c:	dd400717 	ldw	r21,28(sp)
  8013a0:	dd000617 	ldw	r20,24(sp)
  8013a4:	dcc00517 	ldw	r19,20(sp)
  8013a8:	dc800417 	ldw	r18,16(sp)
  8013ac:	dc400317 	ldw	r17,12(sp)
  8013b0:	dc000217 	ldw	r16,8(sp)
  8013b4:	dec00c04 	addi	sp,sp,48
  8013b8:	f800283a 	ret
  8013bc:	800b883a 	mov	r5,r16
  8013c0:	a809883a 	mov	r4,r21
  8013c4:	0802d280 	call	802d28 <__swsetup_r>
  8013c8:	1000eb1e 	bne	r2,zero,801778 <__sfvwrite_r+0x4a4>
  8013cc:	80c0030b 	ldhu	r3,12(r16)
  8013d0:	a4400017 	ldw	r17,0(r20)
  8013d4:	1880008c 	andi	r2,r3,2
  8013d8:	103fd61e 	bne	r2,zero,801334 <__alt_mem_onchip_mem+0xff7f9334>
  8013dc:	1880004c 	andi	r2,r3,1
  8013e0:	10003f1e 	bne	r2,zero,8014e0 <__sfvwrite_r+0x20c>
  8013e4:	0039883a 	mov	fp,zero
  8013e8:	0025883a 	mov	r18,zero
  8013ec:	90001a26 	beq	r18,zero,801458 <__sfvwrite_r+0x184>
  8013f0:	1880800c 	andi	r2,r3,512
  8013f4:	84c00217 	ldw	r19,8(r16)
  8013f8:	10002126 	beq	r2,zero,801480 <__sfvwrite_r+0x1ac>
  8013fc:	982f883a 	mov	r23,r19
  801400:	94c09336 	bltu	r18,r19,801650 <__sfvwrite_r+0x37c>
  801404:	1881200c 	andi	r2,r3,1152
  801408:	10009e1e 	bne	r2,zero,801684 <__sfvwrite_r+0x3b0>
  80140c:	81000017 	ldw	r4,0(r16)
  801410:	b80d883a 	mov	r6,r23
  801414:	e00b883a 	mov	r5,fp
  801418:	08023500 	call	802350 <memmove>
  80141c:	80c00217 	ldw	r3,8(r16)
  801420:	81000017 	ldw	r4,0(r16)
  801424:	9005883a 	mov	r2,r18
  801428:	1ce7c83a 	sub	r19,r3,r19
  80142c:	25cf883a 	add	r7,r4,r23
  801430:	84c00215 	stw	r19,8(r16)
  801434:	81c00015 	stw	r7,0(r16)
  801438:	a0c00217 	ldw	r3,8(r20)
  80143c:	e0b9883a 	add	fp,fp,r2
  801440:	90a5c83a 	sub	r18,r18,r2
  801444:	18a7c83a 	sub	r19,r3,r2
  801448:	a4c00215 	stw	r19,8(r20)
  80144c:	983fce26 	beq	r19,zero,801388 <__alt_mem_onchip_mem+0xff7f9388>
  801450:	80c0030b 	ldhu	r3,12(r16)
  801454:	903fe61e 	bne	r18,zero,8013f0 <__alt_mem_onchip_mem+0xff7f93f0>
  801458:	8f000017 	ldw	fp,0(r17)
  80145c:	8c800117 	ldw	r18,4(r17)
  801460:	8c400204 	addi	r17,r17,8
  801464:	003fe106 	br	8013ec <__alt_mem_onchip_mem+0xff7f93ec>
  801468:	8cc00017 	ldw	r19,0(r17)
  80146c:	8c800117 	ldw	r18,4(r17)
  801470:	8c400204 	addi	r17,r17,8
  801474:	003fb306 	br	801344 <__alt_mem_onchip_mem+0xff7f9344>
  801478:	0005883a 	mov	r2,zero
  80147c:	f800283a 	ret
  801480:	81000017 	ldw	r4,0(r16)
  801484:	80800417 	ldw	r2,16(r16)
  801488:	11005736 	bltu	r2,r4,8015e8 <__sfvwrite_r+0x314>
  80148c:	85c00517 	ldw	r23,20(r16)
  801490:	95c05536 	bltu	r18,r23,8015e8 <__sfvwrite_r+0x314>
  801494:	00a00034 	movhi	r2,32768
  801498:	10bfffc4 	addi	r2,r2,-1
  80149c:	9009883a 	mov	r4,r18
  8014a0:	1480012e 	bgeu	r2,r18,8014a8 <__sfvwrite_r+0x1d4>
  8014a4:	1009883a 	mov	r4,r2
  8014a8:	b80b883a 	mov	r5,r23
  8014ac:	08039dc0 	call	8039dc <__divsi3>
  8014b0:	15cf383a 	mul	r7,r2,r23
  8014b4:	81400717 	ldw	r5,28(r16)
  8014b8:	80800917 	ldw	r2,36(r16)
  8014bc:	e00d883a 	mov	r6,fp
  8014c0:	a809883a 	mov	r4,r21
  8014c4:	103ee83a 	callr	r2
  8014c8:	00bfdb16 	blt	zero,r2,801438 <__alt_mem_onchip_mem+0xff7f9438>
  8014cc:	8080030b 	ldhu	r2,12(r16)
  8014d0:	10801014 	ori	r2,r2,64
  8014d4:	8080030d 	sth	r2,12(r16)
  8014d8:	00bfffc4 	movi	r2,-1
  8014dc:	003fab06 	br	80138c <__alt_mem_onchip_mem+0xff7f938c>
  8014e0:	0027883a 	mov	r19,zero
  8014e4:	0011883a 	mov	r8,zero
  8014e8:	0039883a 	mov	fp,zero
  8014ec:	0025883a 	mov	r18,zero
  8014f0:	90001f26 	beq	r18,zero,801570 <__sfvwrite_r+0x29c>
  8014f4:	40005a26 	beq	r8,zero,801660 <__sfvwrite_r+0x38c>
  8014f8:	982d883a 	mov	r22,r19
  8014fc:	94c0012e 	bgeu	r18,r19,801504 <__sfvwrite_r+0x230>
  801500:	902d883a 	mov	r22,r18
  801504:	81000017 	ldw	r4,0(r16)
  801508:	80800417 	ldw	r2,16(r16)
  80150c:	b02f883a 	mov	r23,r22
  801510:	81c00517 	ldw	r7,20(r16)
  801514:	1100032e 	bgeu	r2,r4,801524 <__sfvwrite_r+0x250>
  801518:	80c00217 	ldw	r3,8(r16)
  80151c:	38c7883a 	add	r3,r7,r3
  801520:	1d801816 	blt	r3,r22,801584 <__sfvwrite_r+0x2b0>
  801524:	b1c03e16 	blt	r22,r7,801620 <__sfvwrite_r+0x34c>
  801528:	80800917 	ldw	r2,36(r16)
  80152c:	81400717 	ldw	r5,28(r16)
  801530:	e00d883a 	mov	r6,fp
  801534:	da000115 	stw	r8,4(sp)
  801538:	a809883a 	mov	r4,r21
  80153c:	103ee83a 	callr	r2
  801540:	102f883a 	mov	r23,r2
  801544:	da000117 	ldw	r8,4(sp)
  801548:	00bfe00e 	bge	zero,r2,8014cc <__alt_mem_onchip_mem+0xff7f94cc>
  80154c:	9de7c83a 	sub	r19,r19,r23
  801550:	98001f26 	beq	r19,zero,8015d0 <__sfvwrite_r+0x2fc>
  801554:	a0800217 	ldw	r2,8(r20)
  801558:	e5f9883a 	add	fp,fp,r23
  80155c:	95e5c83a 	sub	r18,r18,r23
  801560:	15efc83a 	sub	r23,r2,r23
  801564:	a5c00215 	stw	r23,8(r20)
  801568:	b83f8726 	beq	r23,zero,801388 <__alt_mem_onchip_mem+0xff7f9388>
  80156c:	903fe11e 	bne	r18,zero,8014f4 <__alt_mem_onchip_mem+0xff7f94f4>
  801570:	8f000017 	ldw	fp,0(r17)
  801574:	8c800117 	ldw	r18,4(r17)
  801578:	0011883a 	mov	r8,zero
  80157c:	8c400204 	addi	r17,r17,8
  801580:	003fdb06 	br	8014f0 <__alt_mem_onchip_mem+0xff7f94f0>
  801584:	180d883a 	mov	r6,r3
  801588:	e00b883a 	mov	r5,fp
  80158c:	da000115 	stw	r8,4(sp)
  801590:	d8c00015 	stw	r3,0(sp)
  801594:	08023500 	call	802350 <memmove>
  801598:	d8c00017 	ldw	r3,0(sp)
  80159c:	80800017 	ldw	r2,0(r16)
  8015a0:	800b883a 	mov	r5,r16
  8015a4:	a809883a 	mov	r4,r21
  8015a8:	10c5883a 	add	r2,r2,r3
  8015ac:	80800015 	stw	r2,0(r16)
  8015b0:	d8c00015 	stw	r3,0(sp)
  8015b4:	08031f00 	call	8031f0 <_fflush_r>
  8015b8:	d8c00017 	ldw	r3,0(sp)
  8015bc:	da000117 	ldw	r8,4(sp)
  8015c0:	103fc21e 	bne	r2,zero,8014cc <__alt_mem_onchip_mem+0xff7f94cc>
  8015c4:	182f883a 	mov	r23,r3
  8015c8:	9de7c83a 	sub	r19,r19,r23
  8015cc:	983fe11e 	bne	r19,zero,801554 <__alt_mem_onchip_mem+0xff7f9554>
  8015d0:	800b883a 	mov	r5,r16
  8015d4:	a809883a 	mov	r4,r21
  8015d8:	08031f00 	call	8031f0 <_fflush_r>
  8015dc:	103fbb1e 	bne	r2,zero,8014cc <__alt_mem_onchip_mem+0xff7f94cc>
  8015e0:	0011883a 	mov	r8,zero
  8015e4:	003fdb06 	br	801554 <__alt_mem_onchip_mem+0xff7f9554>
  8015e8:	94c0012e 	bgeu	r18,r19,8015f0 <__sfvwrite_r+0x31c>
  8015ec:	9027883a 	mov	r19,r18
  8015f0:	980d883a 	mov	r6,r19
  8015f4:	e00b883a 	mov	r5,fp
  8015f8:	08023500 	call	802350 <memmove>
  8015fc:	80800217 	ldw	r2,8(r16)
  801600:	80c00017 	ldw	r3,0(r16)
  801604:	14c5c83a 	sub	r2,r2,r19
  801608:	1cc7883a 	add	r3,r3,r19
  80160c:	80800215 	stw	r2,8(r16)
  801610:	80c00015 	stw	r3,0(r16)
  801614:	10004326 	beq	r2,zero,801724 <__sfvwrite_r+0x450>
  801618:	9805883a 	mov	r2,r19
  80161c:	003f8606 	br	801438 <__alt_mem_onchip_mem+0xff7f9438>
  801620:	b00d883a 	mov	r6,r22
  801624:	e00b883a 	mov	r5,fp
  801628:	da000115 	stw	r8,4(sp)
  80162c:	08023500 	call	802350 <memmove>
  801630:	80800217 	ldw	r2,8(r16)
  801634:	80c00017 	ldw	r3,0(r16)
  801638:	da000117 	ldw	r8,4(sp)
  80163c:	1585c83a 	sub	r2,r2,r22
  801640:	1dad883a 	add	r22,r3,r22
  801644:	80800215 	stw	r2,8(r16)
  801648:	85800015 	stw	r22,0(r16)
  80164c:	003fbf06 	br	80154c <__alt_mem_onchip_mem+0xff7f954c>
  801650:	81000017 	ldw	r4,0(r16)
  801654:	9027883a 	mov	r19,r18
  801658:	902f883a 	mov	r23,r18
  80165c:	003f6c06 	br	801410 <__alt_mem_onchip_mem+0xff7f9410>
  801660:	900d883a 	mov	r6,r18
  801664:	01400284 	movi	r5,10
  801668:	e009883a 	mov	r4,fp
  80166c:	08021240 	call	802124 <memchr>
  801670:	10003e26 	beq	r2,zero,80176c <__sfvwrite_r+0x498>
  801674:	10800044 	addi	r2,r2,1
  801678:	1727c83a 	sub	r19,r2,fp
  80167c:	02000044 	movi	r8,1
  801680:	003f9d06 	br	8014f8 <__alt_mem_onchip_mem+0xff7f94f8>
  801684:	80800517 	ldw	r2,20(r16)
  801688:	81400417 	ldw	r5,16(r16)
  80168c:	81c00017 	ldw	r7,0(r16)
  801690:	10a7883a 	add	r19,r2,r2
  801694:	9885883a 	add	r2,r19,r2
  801698:	1026d7fa 	srli	r19,r2,31
  80169c:	396dc83a 	sub	r22,r7,r5
  8016a0:	b1000044 	addi	r4,r22,1
  8016a4:	9885883a 	add	r2,r19,r2
  8016a8:	1027d07a 	srai	r19,r2,1
  8016ac:	2485883a 	add	r2,r4,r18
  8016b0:	980d883a 	mov	r6,r19
  8016b4:	9880022e 	bgeu	r19,r2,8016c0 <__sfvwrite_r+0x3ec>
  8016b8:	1027883a 	mov	r19,r2
  8016bc:	100d883a 	mov	r6,r2
  8016c0:	18c1000c 	andi	r3,r3,1024
  8016c4:	18001c26 	beq	r3,zero,801738 <__sfvwrite_r+0x464>
  8016c8:	300b883a 	mov	r5,r6
  8016cc:	a809883a 	mov	r4,r21
  8016d0:	08019180 	call	801918 <_malloc_r>
  8016d4:	102f883a 	mov	r23,r2
  8016d8:	10002926 	beq	r2,zero,801780 <__sfvwrite_r+0x4ac>
  8016dc:	81400417 	ldw	r5,16(r16)
  8016e0:	b00d883a 	mov	r6,r22
  8016e4:	1009883a 	mov	r4,r2
  8016e8:	08022080 	call	802208 <memcpy>
  8016ec:	8080030b 	ldhu	r2,12(r16)
  8016f0:	00fedfc4 	movi	r3,-1153
  8016f4:	10c4703a 	and	r2,r2,r3
  8016f8:	10802014 	ori	r2,r2,128
  8016fc:	8080030d 	sth	r2,12(r16)
  801700:	bd89883a 	add	r4,r23,r22
  801704:	9d8fc83a 	sub	r7,r19,r22
  801708:	85c00415 	stw	r23,16(r16)
  80170c:	84c00515 	stw	r19,20(r16)
  801710:	81000015 	stw	r4,0(r16)
  801714:	9027883a 	mov	r19,r18
  801718:	81c00215 	stw	r7,8(r16)
  80171c:	902f883a 	mov	r23,r18
  801720:	003f3b06 	br	801410 <__alt_mem_onchip_mem+0xff7f9410>
  801724:	800b883a 	mov	r5,r16
  801728:	a809883a 	mov	r4,r21
  80172c:	08031f00 	call	8031f0 <_fflush_r>
  801730:	103fb926 	beq	r2,zero,801618 <__alt_mem_onchip_mem+0xff7f9618>
  801734:	003f6506 	br	8014cc <__alt_mem_onchip_mem+0xff7f94cc>
  801738:	a809883a 	mov	r4,r21
  80173c:	08025d40 	call	8025d4 <_realloc_r>
  801740:	102f883a 	mov	r23,r2
  801744:	103fee1e 	bne	r2,zero,801700 <__alt_mem_onchip_mem+0xff7f9700>
  801748:	81400417 	ldw	r5,16(r16)
  80174c:	a809883a 	mov	r4,r21
  801750:	08033a00 	call	8033a0 <_free_r>
  801754:	8080030b 	ldhu	r2,12(r16)
  801758:	00ffdfc4 	movi	r3,-129
  80175c:	1884703a 	and	r2,r3,r2
  801760:	00c00304 	movi	r3,12
  801764:	a8c00015 	stw	r3,0(r21)
  801768:	003f5906 	br	8014d0 <__alt_mem_onchip_mem+0xff7f94d0>
  80176c:	94c00044 	addi	r19,r18,1
  801770:	02000044 	movi	r8,1
  801774:	003f6006 	br	8014f8 <__alt_mem_onchip_mem+0xff7f94f8>
  801778:	00bfffc4 	movi	r2,-1
  80177c:	003f0306 	br	80138c <__alt_mem_onchip_mem+0xff7f938c>
  801780:	00800304 	movi	r2,12
  801784:	a8800015 	stw	r2,0(r21)
  801788:	8080030b 	ldhu	r2,12(r16)
  80178c:	003f5006 	br	8014d0 <__alt_mem_onchip_mem+0xff7f94d0>

00801790 <_fwalk>:
  801790:	defff704 	addi	sp,sp,-36
  801794:	dd000415 	stw	r20,16(sp)
  801798:	dfc00815 	stw	ra,32(sp)
  80179c:	ddc00715 	stw	r23,28(sp)
  8017a0:	dd800615 	stw	r22,24(sp)
  8017a4:	dd400515 	stw	r21,20(sp)
  8017a8:	dcc00315 	stw	r19,12(sp)
  8017ac:	dc800215 	stw	r18,8(sp)
  8017b0:	dc400115 	stw	r17,4(sp)
  8017b4:	dc000015 	stw	r16,0(sp)
  8017b8:	2500b804 	addi	r20,r4,736
  8017bc:	a0002326 	beq	r20,zero,80184c <_fwalk+0xbc>
  8017c0:	282b883a 	mov	r21,r5
  8017c4:	002f883a 	mov	r23,zero
  8017c8:	05800044 	movi	r22,1
  8017cc:	04ffffc4 	movi	r19,-1
  8017d0:	a4400117 	ldw	r17,4(r20)
  8017d4:	a4800217 	ldw	r18,8(r20)
  8017d8:	8c7fffc4 	addi	r17,r17,-1
  8017dc:	88000d16 	blt	r17,zero,801814 <_fwalk+0x84>
  8017e0:	94000304 	addi	r16,r18,12
  8017e4:	94800384 	addi	r18,r18,14
  8017e8:	8080000b 	ldhu	r2,0(r16)
  8017ec:	8c7fffc4 	addi	r17,r17,-1
  8017f0:	813ffd04 	addi	r4,r16,-12
  8017f4:	b080042e 	bgeu	r22,r2,801808 <_fwalk+0x78>
  8017f8:	9080000f 	ldh	r2,0(r18)
  8017fc:	14c00226 	beq	r2,r19,801808 <_fwalk+0x78>
  801800:	a83ee83a 	callr	r21
  801804:	b8aeb03a 	or	r23,r23,r2
  801808:	84001a04 	addi	r16,r16,104
  80180c:	94801a04 	addi	r18,r18,104
  801810:	8cfff51e 	bne	r17,r19,8017e8 <__alt_mem_onchip_mem+0xff7f97e8>
  801814:	a5000017 	ldw	r20,0(r20)
  801818:	a03fed1e 	bne	r20,zero,8017d0 <__alt_mem_onchip_mem+0xff7f97d0>
  80181c:	b805883a 	mov	r2,r23
  801820:	dfc00817 	ldw	ra,32(sp)
  801824:	ddc00717 	ldw	r23,28(sp)
  801828:	dd800617 	ldw	r22,24(sp)
  80182c:	dd400517 	ldw	r21,20(sp)
  801830:	dd000417 	ldw	r20,16(sp)
  801834:	dcc00317 	ldw	r19,12(sp)
  801838:	dc800217 	ldw	r18,8(sp)
  80183c:	dc400117 	ldw	r17,4(sp)
  801840:	dc000017 	ldw	r16,0(sp)
  801844:	dec00904 	addi	sp,sp,36
  801848:	f800283a 	ret
  80184c:	002f883a 	mov	r23,zero
  801850:	003ff206 	br	80181c <__alt_mem_onchip_mem+0xff7f981c>

00801854 <_fwalk_reent>:
  801854:	defff704 	addi	sp,sp,-36
  801858:	dd000415 	stw	r20,16(sp)
  80185c:	dfc00815 	stw	ra,32(sp)
  801860:	ddc00715 	stw	r23,28(sp)
  801864:	dd800615 	stw	r22,24(sp)
  801868:	dd400515 	stw	r21,20(sp)
  80186c:	dcc00315 	stw	r19,12(sp)
  801870:	dc800215 	stw	r18,8(sp)
  801874:	dc400115 	stw	r17,4(sp)
  801878:	dc000015 	stw	r16,0(sp)
  80187c:	2500b804 	addi	r20,r4,736
  801880:	a0002326 	beq	r20,zero,801910 <_fwalk_reent+0xbc>
  801884:	282b883a 	mov	r21,r5
  801888:	2027883a 	mov	r19,r4
  80188c:	002f883a 	mov	r23,zero
  801890:	05800044 	movi	r22,1
  801894:	04bfffc4 	movi	r18,-1
  801898:	a4400117 	ldw	r17,4(r20)
  80189c:	a4000217 	ldw	r16,8(r20)
  8018a0:	8c7fffc4 	addi	r17,r17,-1
  8018a4:	88000c16 	blt	r17,zero,8018d8 <_fwalk_reent+0x84>
  8018a8:	84000304 	addi	r16,r16,12
  8018ac:	8080000b 	ldhu	r2,0(r16)
  8018b0:	8c7fffc4 	addi	r17,r17,-1
  8018b4:	817ffd04 	addi	r5,r16,-12
  8018b8:	b080052e 	bgeu	r22,r2,8018d0 <_fwalk_reent+0x7c>
  8018bc:	8080008f 	ldh	r2,2(r16)
  8018c0:	9809883a 	mov	r4,r19
  8018c4:	14800226 	beq	r2,r18,8018d0 <_fwalk_reent+0x7c>
  8018c8:	a83ee83a 	callr	r21
  8018cc:	b8aeb03a 	or	r23,r23,r2
  8018d0:	84001a04 	addi	r16,r16,104
  8018d4:	8cbff51e 	bne	r17,r18,8018ac <__alt_mem_onchip_mem+0xff7f98ac>
  8018d8:	a5000017 	ldw	r20,0(r20)
  8018dc:	a03fee1e 	bne	r20,zero,801898 <__alt_mem_onchip_mem+0xff7f9898>
  8018e0:	b805883a 	mov	r2,r23
  8018e4:	dfc00817 	ldw	ra,32(sp)
  8018e8:	ddc00717 	ldw	r23,28(sp)
  8018ec:	dd800617 	ldw	r22,24(sp)
  8018f0:	dd400517 	ldw	r21,20(sp)
  8018f4:	dd000417 	ldw	r20,16(sp)
  8018f8:	dcc00317 	ldw	r19,12(sp)
  8018fc:	dc800217 	ldw	r18,8(sp)
  801900:	dc400117 	ldw	r17,4(sp)
  801904:	dc000017 	ldw	r16,0(sp)
  801908:	dec00904 	addi	sp,sp,36
  80190c:	f800283a 	ret
  801910:	002f883a 	mov	r23,zero
  801914:	003ff206 	br	8018e0 <__alt_mem_onchip_mem+0xff7f98e0>

00801918 <_malloc_r>:
  801918:	defff504 	addi	sp,sp,-44
  80191c:	dc800315 	stw	r18,12(sp)
  801920:	dfc00a15 	stw	ra,40(sp)
  801924:	df000915 	stw	fp,36(sp)
  801928:	ddc00815 	stw	r23,32(sp)
  80192c:	dd800715 	stw	r22,28(sp)
  801930:	dd400615 	stw	r21,24(sp)
  801934:	dd000515 	stw	r20,20(sp)
  801938:	dcc00415 	stw	r19,16(sp)
  80193c:	dc400215 	stw	r17,8(sp)
  801940:	dc000115 	stw	r16,4(sp)
  801944:	288002c4 	addi	r2,r5,11
  801948:	00c00584 	movi	r3,22
  80194c:	2025883a 	mov	r18,r4
  801950:	18807f2e 	bgeu	r3,r2,801b50 <_malloc_r+0x238>
  801954:	047ffe04 	movi	r17,-8
  801958:	1462703a 	and	r17,r2,r17
  80195c:	8800a316 	blt	r17,zero,801bec <_malloc_r+0x2d4>
  801960:	8940a236 	bltu	r17,r5,801bec <_malloc_r+0x2d4>
  801964:	08043b80 	call	8043b8 <__malloc_lock>
  801968:	00807dc4 	movi	r2,503
  80196c:	1441e92e 	bgeu	r2,r17,802114 <_malloc_r+0x7fc>
  801970:	8804d27a 	srli	r2,r17,9
  801974:	1000a126 	beq	r2,zero,801bfc <_malloc_r+0x2e4>
  801978:	00c00104 	movi	r3,4
  80197c:	18811e36 	bltu	r3,r2,801df8 <_malloc_r+0x4e0>
  801980:	8804d1ba 	srli	r2,r17,6
  801984:	12000e44 	addi	r8,r2,57
  801988:	11c00e04 	addi	r7,r2,56
  80198c:	4209883a 	add	r4,r8,r8
  801990:	04c02074 	movhi	r19,129
  801994:	2109883a 	add	r4,r4,r4
  801998:	9ce17904 	addi	r19,r19,-31260
  80199c:	2109883a 	add	r4,r4,r4
  8019a0:	9909883a 	add	r4,r19,r4
  8019a4:	24000117 	ldw	r16,4(r4)
  8019a8:	213ffe04 	addi	r4,r4,-8
  8019ac:	24009726 	beq	r4,r16,801c0c <_malloc_r+0x2f4>
  8019b0:	80800117 	ldw	r2,4(r16)
  8019b4:	01bfff04 	movi	r6,-4
  8019b8:	014003c4 	movi	r5,15
  8019bc:	1184703a 	and	r2,r2,r6
  8019c0:	1447c83a 	sub	r3,r2,r17
  8019c4:	28c00716 	blt	r5,r3,8019e4 <_malloc_r+0xcc>
  8019c8:	1800920e 	bge	r3,zero,801c14 <_malloc_r+0x2fc>
  8019cc:	84000317 	ldw	r16,12(r16)
  8019d0:	24008e26 	beq	r4,r16,801c0c <_malloc_r+0x2f4>
  8019d4:	80800117 	ldw	r2,4(r16)
  8019d8:	1184703a 	and	r2,r2,r6
  8019dc:	1447c83a 	sub	r3,r2,r17
  8019e0:	28fff90e 	bge	r5,r3,8019c8 <__alt_mem_onchip_mem+0xff7f99c8>
  8019e4:	3809883a 	mov	r4,r7
  8019e8:	01802074 	movhi	r6,129
  8019ec:	9c000417 	ldw	r16,16(r19)
  8019f0:	31a17904 	addi	r6,r6,-31260
  8019f4:	32000204 	addi	r8,r6,8
  8019f8:	82013426 	beq	r16,r8,801ecc <_malloc_r+0x5b4>
  8019fc:	80c00117 	ldw	r3,4(r16)
  801a00:	00bfff04 	movi	r2,-4
  801a04:	188e703a 	and	r7,r3,r2
  801a08:	3c45c83a 	sub	r2,r7,r17
  801a0c:	00c003c4 	movi	r3,15
  801a10:	18811f16 	blt	r3,r2,801e90 <_malloc_r+0x578>
  801a14:	32000515 	stw	r8,20(r6)
  801a18:	32000415 	stw	r8,16(r6)
  801a1c:	10007f0e 	bge	r2,zero,801c1c <_malloc_r+0x304>
  801a20:	00807fc4 	movi	r2,511
  801a24:	11c0fd36 	bltu	r2,r7,801e1c <_malloc_r+0x504>
  801a28:	3806d0fa 	srli	r3,r7,3
  801a2c:	01c00044 	movi	r7,1
  801a30:	30800117 	ldw	r2,4(r6)
  801a34:	19400044 	addi	r5,r3,1
  801a38:	294b883a 	add	r5,r5,r5
  801a3c:	1807d0ba 	srai	r3,r3,2
  801a40:	294b883a 	add	r5,r5,r5
  801a44:	294b883a 	add	r5,r5,r5
  801a48:	298b883a 	add	r5,r5,r6
  801a4c:	38c6983a 	sll	r3,r7,r3
  801a50:	29c00017 	ldw	r7,0(r5)
  801a54:	2a7ffe04 	addi	r9,r5,-8
  801a58:	1886b03a 	or	r3,r3,r2
  801a5c:	82400315 	stw	r9,12(r16)
  801a60:	81c00215 	stw	r7,8(r16)
  801a64:	30c00115 	stw	r3,4(r6)
  801a68:	2c000015 	stw	r16,0(r5)
  801a6c:	3c000315 	stw	r16,12(r7)
  801a70:	2005d0ba 	srai	r2,r4,2
  801a74:	01400044 	movi	r5,1
  801a78:	288a983a 	sll	r5,r5,r2
  801a7c:	19406f36 	bltu	r3,r5,801c3c <_malloc_r+0x324>
  801a80:	28c4703a 	and	r2,r5,r3
  801a84:	10000a1e 	bne	r2,zero,801ab0 <_malloc_r+0x198>
  801a88:	00bfff04 	movi	r2,-4
  801a8c:	294b883a 	add	r5,r5,r5
  801a90:	2088703a 	and	r4,r4,r2
  801a94:	28c4703a 	and	r2,r5,r3
  801a98:	21000104 	addi	r4,r4,4
  801a9c:	1000041e 	bne	r2,zero,801ab0 <_malloc_r+0x198>
  801aa0:	294b883a 	add	r5,r5,r5
  801aa4:	28c4703a 	and	r2,r5,r3
  801aa8:	21000104 	addi	r4,r4,4
  801aac:	103ffc26 	beq	r2,zero,801aa0 <__alt_mem_onchip_mem+0xff7f9aa0>
  801ab0:	02bfff04 	movi	r10,-4
  801ab4:	024003c4 	movi	r9,15
  801ab8:	21800044 	addi	r6,r4,1
  801abc:	318d883a 	add	r6,r6,r6
  801ac0:	318d883a 	add	r6,r6,r6
  801ac4:	318d883a 	add	r6,r6,r6
  801ac8:	998d883a 	add	r6,r19,r6
  801acc:	333ffe04 	addi	r12,r6,-8
  801ad0:	2017883a 	mov	r11,r4
  801ad4:	31800104 	addi	r6,r6,4
  801ad8:	34000017 	ldw	r16,0(r6)
  801adc:	31fffd04 	addi	r7,r6,-12
  801ae0:	81c0041e 	bne	r16,r7,801af4 <_malloc_r+0x1dc>
  801ae4:	0000fb06 	br	801ed4 <_malloc_r+0x5bc>
  801ae8:	1801030e 	bge	r3,zero,801ef8 <_malloc_r+0x5e0>
  801aec:	84000317 	ldw	r16,12(r16)
  801af0:	81c0f826 	beq	r16,r7,801ed4 <_malloc_r+0x5bc>
  801af4:	80800117 	ldw	r2,4(r16)
  801af8:	1284703a 	and	r2,r2,r10
  801afc:	1447c83a 	sub	r3,r2,r17
  801b00:	48fff90e 	bge	r9,r3,801ae8 <__alt_mem_onchip_mem+0xff7f9ae8>
  801b04:	80800317 	ldw	r2,12(r16)
  801b08:	81000217 	ldw	r4,8(r16)
  801b0c:	89400054 	ori	r5,r17,1
  801b10:	81400115 	stw	r5,4(r16)
  801b14:	20800315 	stw	r2,12(r4)
  801b18:	11000215 	stw	r4,8(r2)
  801b1c:	8463883a 	add	r17,r16,r17
  801b20:	9c400515 	stw	r17,20(r19)
  801b24:	9c400415 	stw	r17,16(r19)
  801b28:	18800054 	ori	r2,r3,1
  801b2c:	88800115 	stw	r2,4(r17)
  801b30:	8a000315 	stw	r8,12(r17)
  801b34:	8a000215 	stw	r8,8(r17)
  801b38:	88e3883a 	add	r17,r17,r3
  801b3c:	88c00015 	stw	r3,0(r17)
  801b40:	9009883a 	mov	r4,r18
  801b44:	08043dc0 	call	8043dc <__malloc_unlock>
  801b48:	80800204 	addi	r2,r16,8
  801b4c:	00001b06 	br	801bbc <_malloc_r+0x2a4>
  801b50:	04400404 	movi	r17,16
  801b54:	89402536 	bltu	r17,r5,801bec <_malloc_r+0x2d4>
  801b58:	08043b80 	call	8043b8 <__malloc_lock>
  801b5c:	00800184 	movi	r2,6
  801b60:	01000084 	movi	r4,2
  801b64:	04c02074 	movhi	r19,129
  801b68:	1085883a 	add	r2,r2,r2
  801b6c:	9ce17904 	addi	r19,r19,-31260
  801b70:	1085883a 	add	r2,r2,r2
  801b74:	9885883a 	add	r2,r19,r2
  801b78:	14000117 	ldw	r16,4(r2)
  801b7c:	10fffe04 	addi	r3,r2,-8
  801b80:	80c0d926 	beq	r16,r3,801ee8 <_malloc_r+0x5d0>
  801b84:	80c00117 	ldw	r3,4(r16)
  801b88:	81000317 	ldw	r4,12(r16)
  801b8c:	00bfff04 	movi	r2,-4
  801b90:	1884703a 	and	r2,r3,r2
  801b94:	81400217 	ldw	r5,8(r16)
  801b98:	8085883a 	add	r2,r16,r2
  801b9c:	10c00117 	ldw	r3,4(r2)
  801ba0:	29000315 	stw	r4,12(r5)
  801ba4:	21400215 	stw	r5,8(r4)
  801ba8:	18c00054 	ori	r3,r3,1
  801bac:	10c00115 	stw	r3,4(r2)
  801bb0:	9009883a 	mov	r4,r18
  801bb4:	08043dc0 	call	8043dc <__malloc_unlock>
  801bb8:	80800204 	addi	r2,r16,8
  801bbc:	dfc00a17 	ldw	ra,40(sp)
  801bc0:	df000917 	ldw	fp,36(sp)
  801bc4:	ddc00817 	ldw	r23,32(sp)
  801bc8:	dd800717 	ldw	r22,28(sp)
  801bcc:	dd400617 	ldw	r21,24(sp)
  801bd0:	dd000517 	ldw	r20,20(sp)
  801bd4:	dcc00417 	ldw	r19,16(sp)
  801bd8:	dc800317 	ldw	r18,12(sp)
  801bdc:	dc400217 	ldw	r17,8(sp)
  801be0:	dc000117 	ldw	r16,4(sp)
  801be4:	dec00b04 	addi	sp,sp,44
  801be8:	f800283a 	ret
  801bec:	00800304 	movi	r2,12
  801bf0:	90800015 	stw	r2,0(r18)
  801bf4:	0005883a 	mov	r2,zero
  801bf8:	003ff006 	br	801bbc <__alt_mem_onchip_mem+0xff7f9bbc>
  801bfc:	01002004 	movi	r4,128
  801c00:	02001004 	movi	r8,64
  801c04:	01c00fc4 	movi	r7,63
  801c08:	003f6106 	br	801990 <__alt_mem_onchip_mem+0xff7f9990>
  801c0c:	4009883a 	mov	r4,r8
  801c10:	003f7506 	br	8019e8 <__alt_mem_onchip_mem+0xff7f99e8>
  801c14:	81000317 	ldw	r4,12(r16)
  801c18:	003fde06 	br	801b94 <__alt_mem_onchip_mem+0xff7f9b94>
  801c1c:	81c5883a 	add	r2,r16,r7
  801c20:	11400117 	ldw	r5,4(r2)
  801c24:	9009883a 	mov	r4,r18
  801c28:	29400054 	ori	r5,r5,1
  801c2c:	11400115 	stw	r5,4(r2)
  801c30:	08043dc0 	call	8043dc <__malloc_unlock>
  801c34:	80800204 	addi	r2,r16,8
  801c38:	003fe006 	br	801bbc <__alt_mem_onchip_mem+0xff7f9bbc>
  801c3c:	9c000217 	ldw	r16,8(r19)
  801c40:	00bfff04 	movi	r2,-4
  801c44:	85800117 	ldw	r22,4(r16)
  801c48:	b0ac703a 	and	r22,r22,r2
  801c4c:	b4400336 	bltu	r22,r17,801c5c <_malloc_r+0x344>
  801c50:	b445c83a 	sub	r2,r22,r17
  801c54:	00c003c4 	movi	r3,15
  801c58:	18805d16 	blt	r3,r2,801dd0 <_malloc_r+0x4b8>
  801c5c:	05c02074 	movhi	r23,129
  801c60:	00802074 	movhi	r2,129
  801c64:	10aea204 	addi	r2,r2,-17784
  801c68:	bde77804 	addi	r23,r23,-25120
  801c6c:	15400017 	ldw	r21,0(r2)
  801c70:	b8c00017 	ldw	r3,0(r23)
  801c74:	00bfffc4 	movi	r2,-1
  801c78:	858d883a 	add	r6,r16,r22
  801c7c:	8d6b883a 	add	r21,r17,r21
  801c80:	1880ea26 	beq	r3,r2,80202c <_malloc_r+0x714>
  801c84:	ad4403c4 	addi	r21,r21,4111
  801c88:	00bc0004 	movi	r2,-4096
  801c8c:	a8aa703a 	and	r21,r21,r2
  801c90:	a80b883a 	mov	r5,r21
  801c94:	9009883a 	mov	r4,r18
  801c98:	d9800015 	stw	r6,0(sp)
  801c9c:	0802b380 	call	802b38 <_sbrk_r>
  801ca0:	1029883a 	mov	r20,r2
  801ca4:	00bfffc4 	movi	r2,-1
  801ca8:	d9800017 	ldw	r6,0(sp)
  801cac:	a080e826 	beq	r20,r2,802050 <_malloc_r+0x738>
  801cb0:	a180a636 	bltu	r20,r6,801f4c <_malloc_r+0x634>
  801cb4:	07002074 	movhi	fp,129
  801cb8:	e72eab04 	addi	fp,fp,-17748
  801cbc:	e0800017 	ldw	r2,0(fp)
  801cc0:	a887883a 	add	r3,r21,r2
  801cc4:	e0c00015 	stw	r3,0(fp)
  801cc8:	3500e626 	beq	r6,r20,802064 <_malloc_r+0x74c>
  801ccc:	b9000017 	ldw	r4,0(r23)
  801cd0:	00bfffc4 	movi	r2,-1
  801cd4:	2080ee26 	beq	r4,r2,802090 <_malloc_r+0x778>
  801cd8:	a185c83a 	sub	r2,r20,r6
  801cdc:	10c5883a 	add	r2,r2,r3
  801ce0:	e0800015 	stw	r2,0(fp)
  801ce4:	a0c001cc 	andi	r3,r20,7
  801ce8:	1800bc26 	beq	r3,zero,801fdc <_malloc_r+0x6c4>
  801cec:	a0e9c83a 	sub	r20,r20,r3
  801cf0:	00840204 	movi	r2,4104
  801cf4:	a5000204 	addi	r20,r20,8
  801cf8:	10c7c83a 	sub	r3,r2,r3
  801cfc:	a545883a 	add	r2,r20,r21
  801d00:	1083ffcc 	andi	r2,r2,4095
  801d04:	18abc83a 	sub	r21,r3,r2
  801d08:	a80b883a 	mov	r5,r21
  801d0c:	9009883a 	mov	r4,r18
  801d10:	0802b380 	call	802b38 <_sbrk_r>
  801d14:	00ffffc4 	movi	r3,-1
  801d18:	10c0e126 	beq	r2,r3,8020a0 <_malloc_r+0x788>
  801d1c:	1505c83a 	sub	r2,r2,r20
  801d20:	1545883a 	add	r2,r2,r21
  801d24:	10800054 	ori	r2,r2,1
  801d28:	e0c00017 	ldw	r3,0(fp)
  801d2c:	9d000215 	stw	r20,8(r19)
  801d30:	a0800115 	stw	r2,4(r20)
  801d34:	a8c7883a 	add	r3,r21,r3
  801d38:	e0c00015 	stw	r3,0(fp)
  801d3c:	84c00e26 	beq	r16,r19,801d78 <_malloc_r+0x460>
  801d40:	018003c4 	movi	r6,15
  801d44:	3580a72e 	bgeu	r6,r22,801fe4 <_malloc_r+0x6cc>
  801d48:	81400117 	ldw	r5,4(r16)
  801d4c:	013ffe04 	movi	r4,-8
  801d50:	b0bffd04 	addi	r2,r22,-12
  801d54:	1104703a 	and	r2,r2,r4
  801d58:	2900004c 	andi	r4,r5,1
  801d5c:	2088b03a 	or	r4,r4,r2
  801d60:	81000115 	stw	r4,4(r16)
  801d64:	01400144 	movi	r5,5
  801d68:	8089883a 	add	r4,r16,r2
  801d6c:	21400115 	stw	r5,4(r4)
  801d70:	21400215 	stw	r5,8(r4)
  801d74:	3080cd36 	bltu	r6,r2,8020ac <_malloc_r+0x794>
  801d78:	00802074 	movhi	r2,129
  801d7c:	10aea104 	addi	r2,r2,-17788
  801d80:	11000017 	ldw	r4,0(r2)
  801d84:	20c0012e 	bgeu	r4,r3,801d8c <_malloc_r+0x474>
  801d88:	10c00015 	stw	r3,0(r2)
  801d8c:	00802074 	movhi	r2,129
  801d90:	10aea004 	addi	r2,r2,-17792
  801d94:	11000017 	ldw	r4,0(r2)
  801d98:	9c000217 	ldw	r16,8(r19)
  801d9c:	20c0012e 	bgeu	r4,r3,801da4 <_malloc_r+0x48c>
  801da0:	10c00015 	stw	r3,0(r2)
  801da4:	80c00117 	ldw	r3,4(r16)
  801da8:	00bfff04 	movi	r2,-4
  801dac:	1886703a 	and	r3,r3,r2
  801db0:	1c45c83a 	sub	r2,r3,r17
  801db4:	1c400236 	bltu	r3,r17,801dc0 <_malloc_r+0x4a8>
  801db8:	00c003c4 	movi	r3,15
  801dbc:	18800416 	blt	r3,r2,801dd0 <_malloc_r+0x4b8>
  801dc0:	9009883a 	mov	r4,r18
  801dc4:	08043dc0 	call	8043dc <__malloc_unlock>
  801dc8:	0005883a 	mov	r2,zero
  801dcc:	003f7b06 	br	801bbc <__alt_mem_onchip_mem+0xff7f9bbc>
  801dd0:	88c00054 	ori	r3,r17,1
  801dd4:	80c00115 	stw	r3,4(r16)
  801dd8:	8463883a 	add	r17,r16,r17
  801ddc:	10800054 	ori	r2,r2,1
  801de0:	9c400215 	stw	r17,8(r19)
  801de4:	88800115 	stw	r2,4(r17)
  801de8:	9009883a 	mov	r4,r18
  801dec:	08043dc0 	call	8043dc <__malloc_unlock>
  801df0:	80800204 	addi	r2,r16,8
  801df4:	003f7106 	br	801bbc <__alt_mem_onchip_mem+0xff7f9bbc>
  801df8:	00c00504 	movi	r3,20
  801dfc:	18804a2e 	bgeu	r3,r2,801f28 <_malloc_r+0x610>
  801e00:	00c01504 	movi	r3,84
  801e04:	18806e36 	bltu	r3,r2,801fc0 <_malloc_r+0x6a8>
  801e08:	8804d33a 	srli	r2,r17,12
  801e0c:	12001bc4 	addi	r8,r2,111
  801e10:	11c01b84 	addi	r7,r2,110
  801e14:	4209883a 	add	r4,r8,r8
  801e18:	003edd06 	br	801990 <__alt_mem_onchip_mem+0xff7f9990>
  801e1c:	3804d27a 	srli	r2,r7,9
  801e20:	00c00104 	movi	r3,4
  801e24:	1880442e 	bgeu	r3,r2,801f38 <_malloc_r+0x620>
  801e28:	00c00504 	movi	r3,20
  801e2c:	18808136 	bltu	r3,r2,802034 <_malloc_r+0x71c>
  801e30:	11401704 	addi	r5,r2,92
  801e34:	10c016c4 	addi	r3,r2,91
  801e38:	294b883a 	add	r5,r5,r5
  801e3c:	294b883a 	add	r5,r5,r5
  801e40:	294b883a 	add	r5,r5,r5
  801e44:	994b883a 	add	r5,r19,r5
  801e48:	28800017 	ldw	r2,0(r5)
  801e4c:	01802074 	movhi	r6,129
  801e50:	297ffe04 	addi	r5,r5,-8
  801e54:	31a17904 	addi	r6,r6,-31260
  801e58:	28806526 	beq	r5,r2,801ff0 <_malloc_r+0x6d8>
  801e5c:	01bfff04 	movi	r6,-4
  801e60:	10c00117 	ldw	r3,4(r2)
  801e64:	1986703a 	and	r3,r3,r6
  801e68:	38c0022e 	bgeu	r7,r3,801e74 <_malloc_r+0x55c>
  801e6c:	10800217 	ldw	r2,8(r2)
  801e70:	28bffb1e 	bne	r5,r2,801e60 <__alt_mem_onchip_mem+0xff7f9e60>
  801e74:	11400317 	ldw	r5,12(r2)
  801e78:	98c00117 	ldw	r3,4(r19)
  801e7c:	81400315 	stw	r5,12(r16)
  801e80:	80800215 	stw	r2,8(r16)
  801e84:	2c000215 	stw	r16,8(r5)
  801e88:	14000315 	stw	r16,12(r2)
  801e8c:	003ef806 	br	801a70 <__alt_mem_onchip_mem+0xff7f9a70>
  801e90:	88c00054 	ori	r3,r17,1
  801e94:	80c00115 	stw	r3,4(r16)
  801e98:	8463883a 	add	r17,r16,r17
  801e9c:	34400515 	stw	r17,20(r6)
  801ea0:	34400415 	stw	r17,16(r6)
  801ea4:	10c00054 	ori	r3,r2,1
  801ea8:	8a000315 	stw	r8,12(r17)
  801eac:	8a000215 	stw	r8,8(r17)
  801eb0:	88c00115 	stw	r3,4(r17)
  801eb4:	88a3883a 	add	r17,r17,r2
  801eb8:	88800015 	stw	r2,0(r17)
  801ebc:	9009883a 	mov	r4,r18
  801ec0:	08043dc0 	call	8043dc <__malloc_unlock>
  801ec4:	80800204 	addi	r2,r16,8
  801ec8:	003f3c06 	br	801bbc <__alt_mem_onchip_mem+0xff7f9bbc>
  801ecc:	30c00117 	ldw	r3,4(r6)
  801ed0:	003ee706 	br	801a70 <__alt_mem_onchip_mem+0xff7f9a70>
  801ed4:	5ac00044 	addi	r11,r11,1
  801ed8:	588000cc 	andi	r2,r11,3
  801edc:	31800204 	addi	r6,r6,8
  801ee0:	103efd1e 	bne	r2,zero,801ad8 <__alt_mem_onchip_mem+0xff7f9ad8>
  801ee4:	00002406 	br	801f78 <_malloc_r+0x660>
  801ee8:	14000317 	ldw	r16,12(r2)
  801eec:	143f251e 	bne	r2,r16,801b84 <__alt_mem_onchip_mem+0xff7f9b84>
  801ef0:	21000084 	addi	r4,r4,2
  801ef4:	003ebc06 	br	8019e8 <__alt_mem_onchip_mem+0xff7f99e8>
  801ef8:	8085883a 	add	r2,r16,r2
  801efc:	10c00117 	ldw	r3,4(r2)
  801f00:	81000317 	ldw	r4,12(r16)
  801f04:	81400217 	ldw	r5,8(r16)
  801f08:	18c00054 	ori	r3,r3,1
  801f0c:	10c00115 	stw	r3,4(r2)
  801f10:	29000315 	stw	r4,12(r5)
  801f14:	21400215 	stw	r5,8(r4)
  801f18:	9009883a 	mov	r4,r18
  801f1c:	08043dc0 	call	8043dc <__malloc_unlock>
  801f20:	80800204 	addi	r2,r16,8
  801f24:	003f2506 	br	801bbc <__alt_mem_onchip_mem+0xff7f9bbc>
  801f28:	12001704 	addi	r8,r2,92
  801f2c:	11c016c4 	addi	r7,r2,91
  801f30:	4209883a 	add	r4,r8,r8
  801f34:	003e9606 	br	801990 <__alt_mem_onchip_mem+0xff7f9990>
  801f38:	3804d1ba 	srli	r2,r7,6
  801f3c:	11400e44 	addi	r5,r2,57
  801f40:	10c00e04 	addi	r3,r2,56
  801f44:	294b883a 	add	r5,r5,r5
  801f48:	003fbc06 	br	801e3c <__alt_mem_onchip_mem+0xff7f9e3c>
  801f4c:	84ff5926 	beq	r16,r19,801cb4 <__alt_mem_onchip_mem+0xff7f9cb4>
  801f50:	00802074 	movhi	r2,129
  801f54:	10a17904 	addi	r2,r2,-31260
  801f58:	14000217 	ldw	r16,8(r2)
  801f5c:	00bfff04 	movi	r2,-4
  801f60:	80c00117 	ldw	r3,4(r16)
  801f64:	1886703a 	and	r3,r3,r2
  801f68:	003f9106 	br	801db0 <__alt_mem_onchip_mem+0xff7f9db0>
  801f6c:	60800217 	ldw	r2,8(r12)
  801f70:	213fffc4 	addi	r4,r4,-1
  801f74:	1300651e 	bne	r2,r12,80210c <_malloc_r+0x7f4>
  801f78:	208000cc 	andi	r2,r4,3
  801f7c:	633ffe04 	addi	r12,r12,-8
  801f80:	103ffa1e 	bne	r2,zero,801f6c <__alt_mem_onchip_mem+0xff7f9f6c>
  801f84:	98800117 	ldw	r2,4(r19)
  801f88:	0146303a 	nor	r3,zero,r5
  801f8c:	1884703a 	and	r2,r3,r2
  801f90:	98800115 	stw	r2,4(r19)
  801f94:	294b883a 	add	r5,r5,r5
  801f98:	117f2836 	bltu	r2,r5,801c3c <__alt_mem_onchip_mem+0xff7f9c3c>
  801f9c:	283f2726 	beq	r5,zero,801c3c <__alt_mem_onchip_mem+0xff7f9c3c>
  801fa0:	2886703a 	and	r3,r5,r2
  801fa4:	5809883a 	mov	r4,r11
  801fa8:	183ec31e 	bne	r3,zero,801ab8 <__alt_mem_onchip_mem+0xff7f9ab8>
  801fac:	294b883a 	add	r5,r5,r5
  801fb0:	2886703a 	and	r3,r5,r2
  801fb4:	21000104 	addi	r4,r4,4
  801fb8:	183ffc26 	beq	r3,zero,801fac <__alt_mem_onchip_mem+0xff7f9fac>
  801fbc:	003ebe06 	br	801ab8 <__alt_mem_onchip_mem+0xff7f9ab8>
  801fc0:	00c05504 	movi	r3,340
  801fc4:	18801236 	bltu	r3,r2,802010 <_malloc_r+0x6f8>
  801fc8:	8804d3fa 	srli	r2,r17,15
  801fcc:	12001e04 	addi	r8,r2,120
  801fd0:	11c01dc4 	addi	r7,r2,119
  801fd4:	4209883a 	add	r4,r8,r8
  801fd8:	003e6d06 	br	801990 <__alt_mem_onchip_mem+0xff7f9990>
  801fdc:	00c40004 	movi	r3,4096
  801fe0:	003f4606 	br	801cfc <__alt_mem_onchip_mem+0xff7f9cfc>
  801fe4:	00800044 	movi	r2,1
  801fe8:	a0800115 	stw	r2,4(r20)
  801fec:	003f7406 	br	801dc0 <__alt_mem_onchip_mem+0xff7f9dc0>
  801ff0:	1805d0ba 	srai	r2,r3,2
  801ff4:	01c00044 	movi	r7,1
  801ff8:	30c00117 	ldw	r3,4(r6)
  801ffc:	388e983a 	sll	r7,r7,r2
  802000:	2805883a 	mov	r2,r5
  802004:	38c6b03a 	or	r3,r7,r3
  802008:	30c00115 	stw	r3,4(r6)
  80200c:	003f9b06 	br	801e7c <__alt_mem_onchip_mem+0xff7f9e7c>
  802010:	00c15504 	movi	r3,1364
  802014:	18801a36 	bltu	r3,r2,802080 <_malloc_r+0x768>
  802018:	8804d4ba 	srli	r2,r17,18
  80201c:	12001f44 	addi	r8,r2,125
  802020:	11c01f04 	addi	r7,r2,124
  802024:	4209883a 	add	r4,r8,r8
  802028:	003e5906 	br	801990 <__alt_mem_onchip_mem+0xff7f9990>
  80202c:	ad400404 	addi	r21,r21,16
  802030:	003f1706 	br	801c90 <__alt_mem_onchip_mem+0xff7f9c90>
  802034:	00c01504 	movi	r3,84
  802038:	18802336 	bltu	r3,r2,8020c8 <_malloc_r+0x7b0>
  80203c:	3804d33a 	srli	r2,r7,12
  802040:	11401bc4 	addi	r5,r2,111
  802044:	10c01b84 	addi	r3,r2,110
  802048:	294b883a 	add	r5,r5,r5
  80204c:	003f7b06 	br	801e3c <__alt_mem_onchip_mem+0xff7f9e3c>
  802050:	9c000217 	ldw	r16,8(r19)
  802054:	00bfff04 	movi	r2,-4
  802058:	80c00117 	ldw	r3,4(r16)
  80205c:	1886703a 	and	r3,r3,r2
  802060:	003f5306 	br	801db0 <__alt_mem_onchip_mem+0xff7f9db0>
  802064:	3083ffcc 	andi	r2,r6,4095
  802068:	103f181e 	bne	r2,zero,801ccc <__alt_mem_onchip_mem+0xff7f9ccc>
  80206c:	99000217 	ldw	r4,8(r19)
  802070:	b545883a 	add	r2,r22,r21
  802074:	10800054 	ori	r2,r2,1
  802078:	20800115 	stw	r2,4(r4)
  80207c:	003f3e06 	br	801d78 <__alt_mem_onchip_mem+0xff7f9d78>
  802080:	01003f84 	movi	r4,254
  802084:	02001fc4 	movi	r8,127
  802088:	01c01f84 	movi	r7,126
  80208c:	003e4006 	br	801990 <__alt_mem_onchip_mem+0xff7f9990>
  802090:	00802074 	movhi	r2,129
  802094:	10a77804 	addi	r2,r2,-25120
  802098:	15000015 	stw	r20,0(r2)
  80209c:	003f1106 	br	801ce4 <__alt_mem_onchip_mem+0xff7f9ce4>
  8020a0:	00800044 	movi	r2,1
  8020a4:	002b883a 	mov	r21,zero
  8020a8:	003f1f06 	br	801d28 <__alt_mem_onchip_mem+0xff7f9d28>
  8020ac:	81400204 	addi	r5,r16,8
  8020b0:	9009883a 	mov	r4,r18
  8020b4:	08033a00 	call	8033a0 <_free_r>
  8020b8:	00802074 	movhi	r2,129
  8020bc:	10aeab04 	addi	r2,r2,-17748
  8020c0:	10c00017 	ldw	r3,0(r2)
  8020c4:	003f2c06 	br	801d78 <__alt_mem_onchip_mem+0xff7f9d78>
  8020c8:	00c05504 	movi	r3,340
  8020cc:	18800536 	bltu	r3,r2,8020e4 <_malloc_r+0x7cc>
  8020d0:	3804d3fa 	srli	r2,r7,15
  8020d4:	11401e04 	addi	r5,r2,120
  8020d8:	10c01dc4 	addi	r3,r2,119
  8020dc:	294b883a 	add	r5,r5,r5
  8020e0:	003f5606 	br	801e3c <__alt_mem_onchip_mem+0xff7f9e3c>
  8020e4:	00c15504 	movi	r3,1364
  8020e8:	18800536 	bltu	r3,r2,802100 <_malloc_r+0x7e8>
  8020ec:	3804d4ba 	srli	r2,r7,18
  8020f0:	11401f44 	addi	r5,r2,125
  8020f4:	10c01f04 	addi	r3,r2,124
  8020f8:	294b883a 	add	r5,r5,r5
  8020fc:	003f4f06 	br	801e3c <__alt_mem_onchip_mem+0xff7f9e3c>
  802100:	01403f84 	movi	r5,254
  802104:	00c01f84 	movi	r3,126
  802108:	003f4c06 	br	801e3c <__alt_mem_onchip_mem+0xff7f9e3c>
  80210c:	98800117 	ldw	r2,4(r19)
  802110:	003fa006 	br	801f94 <__alt_mem_onchip_mem+0xff7f9f94>
  802114:	8808d0fa 	srli	r4,r17,3
  802118:	20800044 	addi	r2,r4,1
  80211c:	1085883a 	add	r2,r2,r2
  802120:	003e9006 	br	801b64 <__alt_mem_onchip_mem+0xff7f9b64>

00802124 <memchr>:
  802124:	208000cc 	andi	r2,r4,3
  802128:	280f883a 	mov	r7,r5
  80212c:	10003426 	beq	r2,zero,802200 <memchr+0xdc>
  802130:	30bfffc4 	addi	r2,r6,-1
  802134:	30001a26 	beq	r6,zero,8021a0 <memchr+0x7c>
  802138:	20c00003 	ldbu	r3,0(r4)
  80213c:	29803fcc 	andi	r6,r5,255
  802140:	30c0051e 	bne	r6,r3,802158 <memchr+0x34>
  802144:	00001806 	br	8021a8 <memchr+0x84>
  802148:	10001526 	beq	r2,zero,8021a0 <memchr+0x7c>
  80214c:	20c00003 	ldbu	r3,0(r4)
  802150:	10bfffc4 	addi	r2,r2,-1
  802154:	30c01426 	beq	r6,r3,8021a8 <memchr+0x84>
  802158:	21000044 	addi	r4,r4,1
  80215c:	20c000cc 	andi	r3,r4,3
  802160:	183ff91e 	bne	r3,zero,802148 <__alt_mem_onchip_mem+0xff7fa148>
  802164:	020000c4 	movi	r8,3
  802168:	40801136 	bltu	r8,r2,8021b0 <memchr+0x8c>
  80216c:	10000c26 	beq	r2,zero,8021a0 <memchr+0x7c>
  802170:	20c00003 	ldbu	r3,0(r4)
  802174:	29403fcc 	andi	r5,r5,255
  802178:	28c00b26 	beq	r5,r3,8021a8 <memchr+0x84>
  80217c:	20c00044 	addi	r3,r4,1
  802180:	39803fcc 	andi	r6,r7,255
  802184:	2089883a 	add	r4,r4,r2
  802188:	00000306 	br	802198 <memchr+0x74>
  80218c:	18c00044 	addi	r3,r3,1
  802190:	197fffc3 	ldbu	r5,-1(r3)
  802194:	31400526 	beq	r6,r5,8021ac <memchr+0x88>
  802198:	1805883a 	mov	r2,r3
  80219c:	20fffb1e 	bne	r4,r3,80218c <__alt_mem_onchip_mem+0xff7fa18c>
  8021a0:	0005883a 	mov	r2,zero
  8021a4:	f800283a 	ret
  8021a8:	2005883a 	mov	r2,r4
  8021ac:	f800283a 	ret
  8021b0:	28c03fcc 	andi	r3,r5,255
  8021b4:	1812923a 	slli	r9,r3,8
  8021b8:	02ffbff4 	movhi	r11,65279
  8021bc:	02a02074 	movhi	r10,32897
  8021c0:	48d2b03a 	or	r9,r9,r3
  8021c4:	4806943a 	slli	r3,r9,16
  8021c8:	5affbfc4 	addi	r11,r11,-257
  8021cc:	52a02004 	addi	r10,r10,-32640
  8021d0:	48d2b03a 	or	r9,r9,r3
  8021d4:	20c00017 	ldw	r3,0(r4)
  8021d8:	48c6f03a 	xor	r3,r9,r3
  8021dc:	1acd883a 	add	r6,r3,r11
  8021e0:	00c6303a 	nor	r3,zero,r3
  8021e4:	30c6703a 	and	r3,r6,r3
  8021e8:	1a86703a 	and	r3,r3,r10
  8021ec:	183fe01e 	bne	r3,zero,802170 <__alt_mem_onchip_mem+0xff7fa170>
  8021f0:	10bfff04 	addi	r2,r2,-4
  8021f4:	21000104 	addi	r4,r4,4
  8021f8:	40bff636 	bltu	r8,r2,8021d4 <__alt_mem_onchip_mem+0xff7fa1d4>
  8021fc:	003fdb06 	br	80216c <__alt_mem_onchip_mem+0xff7fa16c>
  802200:	3005883a 	mov	r2,r6
  802204:	003fd706 	br	802164 <__alt_mem_onchip_mem+0xff7fa164>

00802208 <memcpy>:
  802208:	defffd04 	addi	sp,sp,-12
  80220c:	dfc00215 	stw	ra,8(sp)
  802210:	dc400115 	stw	r17,4(sp)
  802214:	dc000015 	stw	r16,0(sp)
  802218:	00c003c4 	movi	r3,15
  80221c:	2005883a 	mov	r2,r4
  802220:	1980452e 	bgeu	r3,r6,802338 <memcpy+0x130>
  802224:	2906b03a 	or	r3,r5,r4
  802228:	18c000cc 	andi	r3,r3,3
  80222c:	1800441e 	bne	r3,zero,802340 <memcpy+0x138>
  802230:	347ffc04 	addi	r17,r6,-16
  802234:	8822d13a 	srli	r17,r17,4
  802238:	28c00104 	addi	r3,r5,4
  80223c:	23400104 	addi	r13,r4,4
  802240:	8820913a 	slli	r16,r17,4
  802244:	2b000204 	addi	r12,r5,8
  802248:	22c00204 	addi	r11,r4,8
  80224c:	84000504 	addi	r16,r16,20
  802250:	2a800304 	addi	r10,r5,12
  802254:	22400304 	addi	r9,r4,12
  802258:	2c21883a 	add	r16,r5,r16
  80225c:	2811883a 	mov	r8,r5
  802260:	200f883a 	mov	r7,r4
  802264:	41000017 	ldw	r4,0(r8)
  802268:	1fc00017 	ldw	ra,0(r3)
  80226c:	63c00017 	ldw	r15,0(r12)
  802270:	39000015 	stw	r4,0(r7)
  802274:	53800017 	ldw	r14,0(r10)
  802278:	6fc00015 	stw	ra,0(r13)
  80227c:	5bc00015 	stw	r15,0(r11)
  802280:	4b800015 	stw	r14,0(r9)
  802284:	18c00404 	addi	r3,r3,16
  802288:	39c00404 	addi	r7,r7,16
  80228c:	42000404 	addi	r8,r8,16
  802290:	6b400404 	addi	r13,r13,16
  802294:	63000404 	addi	r12,r12,16
  802298:	5ac00404 	addi	r11,r11,16
  80229c:	52800404 	addi	r10,r10,16
  8022a0:	4a400404 	addi	r9,r9,16
  8022a4:	1c3fef1e 	bne	r3,r16,802264 <__alt_mem_onchip_mem+0xff7fa264>
  8022a8:	89c00044 	addi	r7,r17,1
  8022ac:	380e913a 	slli	r7,r7,4
  8022b0:	310003cc 	andi	r4,r6,15
  8022b4:	02c000c4 	movi	r11,3
  8022b8:	11c7883a 	add	r3,r2,r7
  8022bc:	29cb883a 	add	r5,r5,r7
  8022c0:	5900212e 	bgeu	r11,r4,802348 <memcpy+0x140>
  8022c4:	1813883a 	mov	r9,r3
  8022c8:	2811883a 	mov	r8,r5
  8022cc:	200f883a 	mov	r7,r4
  8022d0:	42800017 	ldw	r10,0(r8)
  8022d4:	4a400104 	addi	r9,r9,4
  8022d8:	39ffff04 	addi	r7,r7,-4
  8022dc:	4abfff15 	stw	r10,-4(r9)
  8022e0:	42000104 	addi	r8,r8,4
  8022e4:	59fffa36 	bltu	r11,r7,8022d0 <__alt_mem_onchip_mem+0xff7fa2d0>
  8022e8:	213fff04 	addi	r4,r4,-4
  8022ec:	2008d0ba 	srli	r4,r4,2
  8022f0:	318000cc 	andi	r6,r6,3
  8022f4:	21000044 	addi	r4,r4,1
  8022f8:	2109883a 	add	r4,r4,r4
  8022fc:	2109883a 	add	r4,r4,r4
  802300:	1907883a 	add	r3,r3,r4
  802304:	290b883a 	add	r5,r5,r4
  802308:	30000626 	beq	r6,zero,802324 <memcpy+0x11c>
  80230c:	198d883a 	add	r6,r3,r6
  802310:	29c00003 	ldbu	r7,0(r5)
  802314:	18c00044 	addi	r3,r3,1
  802318:	29400044 	addi	r5,r5,1
  80231c:	19ffffc5 	stb	r7,-1(r3)
  802320:	19bffb1e 	bne	r3,r6,802310 <__alt_mem_onchip_mem+0xff7fa310>
  802324:	dfc00217 	ldw	ra,8(sp)
  802328:	dc400117 	ldw	r17,4(sp)
  80232c:	dc000017 	ldw	r16,0(sp)
  802330:	dec00304 	addi	sp,sp,12
  802334:	f800283a 	ret
  802338:	2007883a 	mov	r3,r4
  80233c:	003ff206 	br	802308 <__alt_mem_onchip_mem+0xff7fa308>
  802340:	2007883a 	mov	r3,r4
  802344:	003ff106 	br	80230c <__alt_mem_onchip_mem+0xff7fa30c>
  802348:	200d883a 	mov	r6,r4
  80234c:	003fee06 	br	802308 <__alt_mem_onchip_mem+0xff7fa308>

00802350 <memmove>:
  802350:	2005883a 	mov	r2,r4
  802354:	29000b2e 	bgeu	r5,r4,802384 <memmove+0x34>
  802358:	298f883a 	add	r7,r5,r6
  80235c:	21c0092e 	bgeu	r4,r7,802384 <memmove+0x34>
  802360:	2187883a 	add	r3,r4,r6
  802364:	198bc83a 	sub	r5,r3,r6
  802368:	30004826 	beq	r6,zero,80248c <memmove+0x13c>
  80236c:	39ffffc4 	addi	r7,r7,-1
  802370:	39000003 	ldbu	r4,0(r7)
  802374:	18ffffc4 	addi	r3,r3,-1
  802378:	19000005 	stb	r4,0(r3)
  80237c:	28fffb1e 	bne	r5,r3,80236c <__alt_mem_onchip_mem+0xff7fa36c>
  802380:	f800283a 	ret
  802384:	00c003c4 	movi	r3,15
  802388:	1980412e 	bgeu	r3,r6,802490 <memmove+0x140>
  80238c:	2886b03a 	or	r3,r5,r2
  802390:	18c000cc 	andi	r3,r3,3
  802394:	1800401e 	bne	r3,zero,802498 <memmove+0x148>
  802398:	33fffc04 	addi	r15,r6,-16
  80239c:	781ed13a 	srli	r15,r15,4
  8023a0:	28c00104 	addi	r3,r5,4
  8023a4:	13400104 	addi	r13,r2,4
  8023a8:	781c913a 	slli	r14,r15,4
  8023ac:	2b000204 	addi	r12,r5,8
  8023b0:	12c00204 	addi	r11,r2,8
  8023b4:	73800504 	addi	r14,r14,20
  8023b8:	2a800304 	addi	r10,r5,12
  8023bc:	12400304 	addi	r9,r2,12
  8023c0:	2b9d883a 	add	r14,r5,r14
  8023c4:	2811883a 	mov	r8,r5
  8023c8:	100f883a 	mov	r7,r2
  8023cc:	41000017 	ldw	r4,0(r8)
  8023d0:	39c00404 	addi	r7,r7,16
  8023d4:	18c00404 	addi	r3,r3,16
  8023d8:	393ffc15 	stw	r4,-16(r7)
  8023dc:	193ffc17 	ldw	r4,-16(r3)
  8023e0:	6b400404 	addi	r13,r13,16
  8023e4:	5ac00404 	addi	r11,r11,16
  8023e8:	693ffc15 	stw	r4,-16(r13)
  8023ec:	61000017 	ldw	r4,0(r12)
  8023f0:	4a400404 	addi	r9,r9,16
  8023f4:	42000404 	addi	r8,r8,16
  8023f8:	593ffc15 	stw	r4,-16(r11)
  8023fc:	51000017 	ldw	r4,0(r10)
  802400:	63000404 	addi	r12,r12,16
  802404:	52800404 	addi	r10,r10,16
  802408:	493ffc15 	stw	r4,-16(r9)
  80240c:	1bbfef1e 	bne	r3,r14,8023cc <__alt_mem_onchip_mem+0xff7fa3cc>
  802410:	79000044 	addi	r4,r15,1
  802414:	2008913a 	slli	r4,r4,4
  802418:	328003cc 	andi	r10,r6,15
  80241c:	02c000c4 	movi	r11,3
  802420:	1107883a 	add	r3,r2,r4
  802424:	290b883a 	add	r5,r5,r4
  802428:	5a801e2e 	bgeu	r11,r10,8024a4 <memmove+0x154>
  80242c:	1813883a 	mov	r9,r3
  802430:	2811883a 	mov	r8,r5
  802434:	500f883a 	mov	r7,r10
  802438:	41000017 	ldw	r4,0(r8)
  80243c:	4a400104 	addi	r9,r9,4
  802440:	39ffff04 	addi	r7,r7,-4
  802444:	493fff15 	stw	r4,-4(r9)
  802448:	42000104 	addi	r8,r8,4
  80244c:	59fffa36 	bltu	r11,r7,802438 <__alt_mem_onchip_mem+0xff7fa438>
  802450:	513fff04 	addi	r4,r10,-4
  802454:	2008d0ba 	srli	r4,r4,2
  802458:	318000cc 	andi	r6,r6,3
  80245c:	21000044 	addi	r4,r4,1
  802460:	2109883a 	add	r4,r4,r4
  802464:	2109883a 	add	r4,r4,r4
  802468:	1907883a 	add	r3,r3,r4
  80246c:	290b883a 	add	r5,r5,r4
  802470:	30000b26 	beq	r6,zero,8024a0 <memmove+0x150>
  802474:	198d883a 	add	r6,r3,r6
  802478:	29c00003 	ldbu	r7,0(r5)
  80247c:	18c00044 	addi	r3,r3,1
  802480:	29400044 	addi	r5,r5,1
  802484:	19ffffc5 	stb	r7,-1(r3)
  802488:	19bffb1e 	bne	r3,r6,802478 <__alt_mem_onchip_mem+0xff7fa478>
  80248c:	f800283a 	ret
  802490:	1007883a 	mov	r3,r2
  802494:	003ff606 	br	802470 <__alt_mem_onchip_mem+0xff7fa470>
  802498:	1007883a 	mov	r3,r2
  80249c:	003ff506 	br	802474 <__alt_mem_onchip_mem+0xff7fa474>
  8024a0:	f800283a 	ret
  8024a4:	500d883a 	mov	r6,r10
  8024a8:	003ff106 	br	802470 <__alt_mem_onchip_mem+0xff7fa470>

008024ac <memset>:
  8024ac:	20c000cc 	andi	r3,r4,3
  8024b0:	2005883a 	mov	r2,r4
  8024b4:	18004426 	beq	r3,zero,8025c8 <memset+0x11c>
  8024b8:	31ffffc4 	addi	r7,r6,-1
  8024bc:	30004026 	beq	r6,zero,8025c0 <memset+0x114>
  8024c0:	2813883a 	mov	r9,r5
  8024c4:	200d883a 	mov	r6,r4
  8024c8:	2007883a 	mov	r3,r4
  8024cc:	00000406 	br	8024e0 <memset+0x34>
  8024d0:	3a3fffc4 	addi	r8,r7,-1
  8024d4:	31800044 	addi	r6,r6,1
  8024d8:	38003926 	beq	r7,zero,8025c0 <memset+0x114>
  8024dc:	400f883a 	mov	r7,r8
  8024e0:	18c00044 	addi	r3,r3,1
  8024e4:	32400005 	stb	r9,0(r6)
  8024e8:	1a0000cc 	andi	r8,r3,3
  8024ec:	403ff81e 	bne	r8,zero,8024d0 <__alt_mem_onchip_mem+0xff7fa4d0>
  8024f0:	010000c4 	movi	r4,3
  8024f4:	21c02d2e 	bgeu	r4,r7,8025ac <memset+0x100>
  8024f8:	29003fcc 	andi	r4,r5,255
  8024fc:	200c923a 	slli	r6,r4,8
  802500:	3108b03a 	or	r4,r6,r4
  802504:	200c943a 	slli	r6,r4,16
  802508:	218cb03a 	or	r6,r4,r6
  80250c:	010003c4 	movi	r4,15
  802510:	21c0182e 	bgeu	r4,r7,802574 <memset+0xc8>
  802514:	3b3ffc04 	addi	r12,r7,-16
  802518:	6018d13a 	srli	r12,r12,4
  80251c:	1a000104 	addi	r8,r3,4
  802520:	1ac00204 	addi	r11,r3,8
  802524:	6008913a 	slli	r4,r12,4
  802528:	1a800304 	addi	r10,r3,12
  80252c:	1813883a 	mov	r9,r3
  802530:	21000504 	addi	r4,r4,20
  802534:	1909883a 	add	r4,r3,r4
  802538:	49800015 	stw	r6,0(r9)
  80253c:	41800015 	stw	r6,0(r8)
  802540:	59800015 	stw	r6,0(r11)
  802544:	51800015 	stw	r6,0(r10)
  802548:	42000404 	addi	r8,r8,16
  80254c:	4a400404 	addi	r9,r9,16
  802550:	5ac00404 	addi	r11,r11,16
  802554:	52800404 	addi	r10,r10,16
  802558:	413ff71e 	bne	r8,r4,802538 <__alt_mem_onchip_mem+0xff7fa538>
  80255c:	63000044 	addi	r12,r12,1
  802560:	6018913a 	slli	r12,r12,4
  802564:	39c003cc 	andi	r7,r7,15
  802568:	010000c4 	movi	r4,3
  80256c:	1b07883a 	add	r3,r3,r12
  802570:	21c00e2e 	bgeu	r4,r7,8025ac <memset+0x100>
  802574:	1813883a 	mov	r9,r3
  802578:	3811883a 	mov	r8,r7
  80257c:	010000c4 	movi	r4,3
  802580:	49800015 	stw	r6,0(r9)
  802584:	423fff04 	addi	r8,r8,-4
  802588:	4a400104 	addi	r9,r9,4
  80258c:	223ffc36 	bltu	r4,r8,802580 <__alt_mem_onchip_mem+0xff7fa580>
  802590:	393fff04 	addi	r4,r7,-4
  802594:	2008d0ba 	srli	r4,r4,2
  802598:	39c000cc 	andi	r7,r7,3
  80259c:	21000044 	addi	r4,r4,1
  8025a0:	2109883a 	add	r4,r4,r4
  8025a4:	2109883a 	add	r4,r4,r4
  8025a8:	1907883a 	add	r3,r3,r4
  8025ac:	38000526 	beq	r7,zero,8025c4 <memset+0x118>
  8025b0:	19cf883a 	add	r7,r3,r7
  8025b4:	19400005 	stb	r5,0(r3)
  8025b8:	18c00044 	addi	r3,r3,1
  8025bc:	38fffd1e 	bne	r7,r3,8025b4 <__alt_mem_onchip_mem+0xff7fa5b4>
  8025c0:	f800283a 	ret
  8025c4:	f800283a 	ret
  8025c8:	2007883a 	mov	r3,r4
  8025cc:	300f883a 	mov	r7,r6
  8025d0:	003fc706 	br	8024f0 <__alt_mem_onchip_mem+0xff7fa4f0>

008025d4 <_realloc_r>:
  8025d4:	defff604 	addi	sp,sp,-40
  8025d8:	dc800215 	stw	r18,8(sp)
  8025dc:	dfc00915 	stw	ra,36(sp)
  8025e0:	df000815 	stw	fp,32(sp)
  8025e4:	ddc00715 	stw	r23,28(sp)
  8025e8:	dd800615 	stw	r22,24(sp)
  8025ec:	dd400515 	stw	r21,20(sp)
  8025f0:	dd000415 	stw	r20,16(sp)
  8025f4:	dcc00315 	stw	r19,12(sp)
  8025f8:	dc400115 	stw	r17,4(sp)
  8025fc:	dc000015 	stw	r16,0(sp)
  802600:	3025883a 	mov	r18,r6
  802604:	2800b726 	beq	r5,zero,8028e4 <_realloc_r+0x310>
  802608:	282b883a 	mov	r21,r5
  80260c:	2029883a 	mov	r20,r4
  802610:	08043b80 	call	8043b8 <__malloc_lock>
  802614:	a8bfff17 	ldw	r2,-4(r21)
  802618:	043fff04 	movi	r16,-4
  80261c:	90c002c4 	addi	r3,r18,11
  802620:	01000584 	movi	r4,22
  802624:	acfffe04 	addi	r19,r21,-8
  802628:	1420703a 	and	r16,r2,r16
  80262c:	20c0332e 	bgeu	r4,r3,8026fc <_realloc_r+0x128>
  802630:	047ffe04 	movi	r17,-8
  802634:	1c62703a 	and	r17,r3,r17
  802638:	8807883a 	mov	r3,r17
  80263c:	88005816 	blt	r17,zero,8027a0 <_realloc_r+0x1cc>
  802640:	8c805736 	bltu	r17,r18,8027a0 <_realloc_r+0x1cc>
  802644:	80c0300e 	bge	r16,r3,802708 <_realloc_r+0x134>
  802648:	07002074 	movhi	fp,129
  80264c:	e7217904 	addi	fp,fp,-31260
  802650:	e1c00217 	ldw	r7,8(fp)
  802654:	9c09883a 	add	r4,r19,r16
  802658:	22000117 	ldw	r8,4(r4)
  80265c:	21c06326 	beq	r4,r7,8027ec <_realloc_r+0x218>
  802660:	017fff84 	movi	r5,-2
  802664:	414a703a 	and	r5,r8,r5
  802668:	214b883a 	add	r5,r4,r5
  80266c:	29800117 	ldw	r6,4(r5)
  802670:	3180004c 	andi	r6,r6,1
  802674:	30003f26 	beq	r6,zero,802774 <_realloc_r+0x1a0>
  802678:	1080004c 	andi	r2,r2,1
  80267c:	10008326 	beq	r2,zero,80288c <_realloc_r+0x2b8>
  802680:	900b883a 	mov	r5,r18
  802684:	a009883a 	mov	r4,r20
  802688:	08019180 	call	801918 <_malloc_r>
  80268c:	1025883a 	mov	r18,r2
  802690:	10011e26 	beq	r2,zero,802b0c <_realloc_r+0x538>
  802694:	a93fff17 	ldw	r4,-4(r21)
  802698:	10fffe04 	addi	r3,r2,-8
  80269c:	00bfff84 	movi	r2,-2
  8026a0:	2084703a 	and	r2,r4,r2
  8026a4:	9885883a 	add	r2,r19,r2
  8026a8:	1880ee26 	beq	r3,r2,802a64 <_realloc_r+0x490>
  8026ac:	81bfff04 	addi	r6,r16,-4
  8026b0:	00800904 	movi	r2,36
  8026b4:	1180b836 	bltu	r2,r6,802998 <_realloc_r+0x3c4>
  8026b8:	00c004c4 	movi	r3,19
  8026bc:	19809636 	bltu	r3,r6,802918 <_realloc_r+0x344>
  8026c0:	9005883a 	mov	r2,r18
  8026c4:	a807883a 	mov	r3,r21
  8026c8:	19000017 	ldw	r4,0(r3)
  8026cc:	11000015 	stw	r4,0(r2)
  8026d0:	19000117 	ldw	r4,4(r3)
  8026d4:	11000115 	stw	r4,4(r2)
  8026d8:	18c00217 	ldw	r3,8(r3)
  8026dc:	10c00215 	stw	r3,8(r2)
  8026e0:	a80b883a 	mov	r5,r21
  8026e4:	a009883a 	mov	r4,r20
  8026e8:	08033a00 	call	8033a0 <_free_r>
  8026ec:	a009883a 	mov	r4,r20
  8026f0:	08043dc0 	call	8043dc <__malloc_unlock>
  8026f4:	9005883a 	mov	r2,r18
  8026f8:	00001206 	br	802744 <_realloc_r+0x170>
  8026fc:	00c00404 	movi	r3,16
  802700:	1823883a 	mov	r17,r3
  802704:	003fce06 	br	802640 <__alt_mem_onchip_mem+0xff7fa640>
  802708:	a825883a 	mov	r18,r21
  80270c:	8445c83a 	sub	r2,r16,r17
  802710:	00c003c4 	movi	r3,15
  802714:	18802636 	bltu	r3,r2,8027b0 <_realloc_r+0x1dc>
  802718:	99800117 	ldw	r6,4(r19)
  80271c:	9c07883a 	add	r3,r19,r16
  802720:	3180004c 	andi	r6,r6,1
  802724:	3420b03a 	or	r16,r6,r16
  802728:	9c000115 	stw	r16,4(r19)
  80272c:	18800117 	ldw	r2,4(r3)
  802730:	10800054 	ori	r2,r2,1
  802734:	18800115 	stw	r2,4(r3)
  802738:	a009883a 	mov	r4,r20
  80273c:	08043dc0 	call	8043dc <__malloc_unlock>
  802740:	9005883a 	mov	r2,r18
  802744:	dfc00917 	ldw	ra,36(sp)
  802748:	df000817 	ldw	fp,32(sp)
  80274c:	ddc00717 	ldw	r23,28(sp)
  802750:	dd800617 	ldw	r22,24(sp)
  802754:	dd400517 	ldw	r21,20(sp)
  802758:	dd000417 	ldw	r20,16(sp)
  80275c:	dcc00317 	ldw	r19,12(sp)
  802760:	dc800217 	ldw	r18,8(sp)
  802764:	dc400117 	ldw	r17,4(sp)
  802768:	dc000017 	ldw	r16,0(sp)
  80276c:	dec00a04 	addi	sp,sp,40
  802770:	f800283a 	ret
  802774:	017fff04 	movi	r5,-4
  802778:	414a703a 	and	r5,r8,r5
  80277c:	814d883a 	add	r6,r16,r5
  802780:	30c01f16 	blt	r6,r3,802800 <_realloc_r+0x22c>
  802784:	20800317 	ldw	r2,12(r4)
  802788:	20c00217 	ldw	r3,8(r4)
  80278c:	a825883a 	mov	r18,r21
  802790:	3021883a 	mov	r16,r6
  802794:	18800315 	stw	r2,12(r3)
  802798:	10c00215 	stw	r3,8(r2)
  80279c:	003fdb06 	br	80270c <__alt_mem_onchip_mem+0xff7fa70c>
  8027a0:	00800304 	movi	r2,12
  8027a4:	a0800015 	stw	r2,0(r20)
  8027a8:	0005883a 	mov	r2,zero
  8027ac:	003fe506 	br	802744 <__alt_mem_onchip_mem+0xff7fa744>
  8027b0:	98c00117 	ldw	r3,4(r19)
  8027b4:	9c4b883a 	add	r5,r19,r17
  8027b8:	11000054 	ori	r4,r2,1
  8027bc:	18c0004c 	andi	r3,r3,1
  8027c0:	1c62b03a 	or	r17,r3,r17
  8027c4:	9c400115 	stw	r17,4(r19)
  8027c8:	29000115 	stw	r4,4(r5)
  8027cc:	2885883a 	add	r2,r5,r2
  8027d0:	10c00117 	ldw	r3,4(r2)
  8027d4:	29400204 	addi	r5,r5,8
  8027d8:	a009883a 	mov	r4,r20
  8027dc:	18c00054 	ori	r3,r3,1
  8027e0:	10c00115 	stw	r3,4(r2)
  8027e4:	08033a00 	call	8033a0 <_free_r>
  8027e8:	003fd306 	br	802738 <__alt_mem_onchip_mem+0xff7fa738>
  8027ec:	017fff04 	movi	r5,-4
  8027f0:	414a703a 	and	r5,r8,r5
  8027f4:	89800404 	addi	r6,r17,16
  8027f8:	8151883a 	add	r8,r16,r5
  8027fc:	4180590e 	bge	r8,r6,802964 <_realloc_r+0x390>
  802800:	1080004c 	andi	r2,r2,1
  802804:	103f9e1e 	bne	r2,zero,802680 <__alt_mem_onchip_mem+0xff7fa680>
  802808:	adbffe17 	ldw	r22,-8(r21)
  80280c:	00bfff04 	movi	r2,-4
  802810:	9dadc83a 	sub	r22,r19,r22
  802814:	b1800117 	ldw	r6,4(r22)
  802818:	3084703a 	and	r2,r6,r2
  80281c:	20002026 	beq	r4,zero,8028a0 <_realloc_r+0x2cc>
  802820:	80af883a 	add	r23,r16,r2
  802824:	b96f883a 	add	r23,r23,r5
  802828:	21c05f26 	beq	r4,r7,8029a8 <_realloc_r+0x3d4>
  80282c:	b8c01c16 	blt	r23,r3,8028a0 <_realloc_r+0x2cc>
  802830:	20800317 	ldw	r2,12(r4)
  802834:	20c00217 	ldw	r3,8(r4)
  802838:	81bfff04 	addi	r6,r16,-4
  80283c:	01000904 	movi	r4,36
  802840:	18800315 	stw	r2,12(r3)
  802844:	10c00215 	stw	r3,8(r2)
  802848:	b0c00217 	ldw	r3,8(r22)
  80284c:	b0800317 	ldw	r2,12(r22)
  802850:	b4800204 	addi	r18,r22,8
  802854:	18800315 	stw	r2,12(r3)
  802858:	10c00215 	stw	r3,8(r2)
  80285c:	21801b36 	bltu	r4,r6,8028cc <_realloc_r+0x2f8>
  802860:	008004c4 	movi	r2,19
  802864:	1180352e 	bgeu	r2,r6,80293c <_realloc_r+0x368>
  802868:	a8800017 	ldw	r2,0(r21)
  80286c:	b0800215 	stw	r2,8(r22)
  802870:	a8800117 	ldw	r2,4(r21)
  802874:	b0800315 	stw	r2,12(r22)
  802878:	008006c4 	movi	r2,27
  80287c:	11807f36 	bltu	r2,r6,802a7c <_realloc_r+0x4a8>
  802880:	b0800404 	addi	r2,r22,16
  802884:	ad400204 	addi	r21,r21,8
  802888:	00002d06 	br	802940 <_realloc_r+0x36c>
  80288c:	adbffe17 	ldw	r22,-8(r21)
  802890:	00bfff04 	movi	r2,-4
  802894:	9dadc83a 	sub	r22,r19,r22
  802898:	b1000117 	ldw	r4,4(r22)
  80289c:	2084703a 	and	r2,r4,r2
  8028a0:	b03f7726 	beq	r22,zero,802680 <__alt_mem_onchip_mem+0xff7fa680>
  8028a4:	80af883a 	add	r23,r16,r2
  8028a8:	b8ff7516 	blt	r23,r3,802680 <__alt_mem_onchip_mem+0xff7fa680>
  8028ac:	b0800317 	ldw	r2,12(r22)
  8028b0:	b0c00217 	ldw	r3,8(r22)
  8028b4:	81bfff04 	addi	r6,r16,-4
  8028b8:	01000904 	movi	r4,36
  8028bc:	18800315 	stw	r2,12(r3)
  8028c0:	10c00215 	stw	r3,8(r2)
  8028c4:	b4800204 	addi	r18,r22,8
  8028c8:	21bfe52e 	bgeu	r4,r6,802860 <__alt_mem_onchip_mem+0xff7fa860>
  8028cc:	a80b883a 	mov	r5,r21
  8028d0:	9009883a 	mov	r4,r18
  8028d4:	08023500 	call	802350 <memmove>
  8028d8:	b821883a 	mov	r16,r23
  8028dc:	b027883a 	mov	r19,r22
  8028e0:	003f8a06 	br	80270c <__alt_mem_onchip_mem+0xff7fa70c>
  8028e4:	300b883a 	mov	r5,r6
  8028e8:	dfc00917 	ldw	ra,36(sp)
  8028ec:	df000817 	ldw	fp,32(sp)
  8028f0:	ddc00717 	ldw	r23,28(sp)
  8028f4:	dd800617 	ldw	r22,24(sp)
  8028f8:	dd400517 	ldw	r21,20(sp)
  8028fc:	dd000417 	ldw	r20,16(sp)
  802900:	dcc00317 	ldw	r19,12(sp)
  802904:	dc800217 	ldw	r18,8(sp)
  802908:	dc400117 	ldw	r17,4(sp)
  80290c:	dc000017 	ldw	r16,0(sp)
  802910:	dec00a04 	addi	sp,sp,40
  802914:	08019181 	jmpi	801918 <_malloc_r>
  802918:	a8c00017 	ldw	r3,0(r21)
  80291c:	90c00015 	stw	r3,0(r18)
  802920:	a8c00117 	ldw	r3,4(r21)
  802924:	90c00115 	stw	r3,4(r18)
  802928:	00c006c4 	movi	r3,27
  80292c:	19804536 	bltu	r3,r6,802a44 <_realloc_r+0x470>
  802930:	90800204 	addi	r2,r18,8
  802934:	a8c00204 	addi	r3,r21,8
  802938:	003f6306 	br	8026c8 <__alt_mem_onchip_mem+0xff7fa6c8>
  80293c:	9005883a 	mov	r2,r18
  802940:	a8c00017 	ldw	r3,0(r21)
  802944:	b821883a 	mov	r16,r23
  802948:	b027883a 	mov	r19,r22
  80294c:	10c00015 	stw	r3,0(r2)
  802950:	a8c00117 	ldw	r3,4(r21)
  802954:	10c00115 	stw	r3,4(r2)
  802958:	a8c00217 	ldw	r3,8(r21)
  80295c:	10c00215 	stw	r3,8(r2)
  802960:	003f6a06 	br	80270c <__alt_mem_onchip_mem+0xff7fa70c>
  802964:	9c67883a 	add	r19,r19,r17
  802968:	4445c83a 	sub	r2,r8,r17
  80296c:	e4c00215 	stw	r19,8(fp)
  802970:	10800054 	ori	r2,r2,1
  802974:	98800115 	stw	r2,4(r19)
  802978:	a8bfff17 	ldw	r2,-4(r21)
  80297c:	a009883a 	mov	r4,r20
  802980:	1080004c 	andi	r2,r2,1
  802984:	1462b03a 	or	r17,r2,r17
  802988:	ac7fff15 	stw	r17,-4(r21)
  80298c:	08043dc0 	call	8043dc <__malloc_unlock>
  802990:	a805883a 	mov	r2,r21
  802994:	003f6b06 	br	802744 <__alt_mem_onchip_mem+0xff7fa744>
  802998:	a80b883a 	mov	r5,r21
  80299c:	9009883a 	mov	r4,r18
  8029a0:	08023500 	call	802350 <memmove>
  8029a4:	003f4e06 	br	8026e0 <__alt_mem_onchip_mem+0xff7fa6e0>
  8029a8:	89000404 	addi	r4,r17,16
  8029ac:	b93fbc16 	blt	r23,r4,8028a0 <__alt_mem_onchip_mem+0xff7fa8a0>
  8029b0:	b0800317 	ldw	r2,12(r22)
  8029b4:	b0c00217 	ldw	r3,8(r22)
  8029b8:	81bfff04 	addi	r6,r16,-4
  8029bc:	01000904 	movi	r4,36
  8029c0:	18800315 	stw	r2,12(r3)
  8029c4:	10c00215 	stw	r3,8(r2)
  8029c8:	b4800204 	addi	r18,r22,8
  8029cc:	21804336 	bltu	r4,r6,802adc <_realloc_r+0x508>
  8029d0:	008004c4 	movi	r2,19
  8029d4:	11803f2e 	bgeu	r2,r6,802ad4 <_realloc_r+0x500>
  8029d8:	a8800017 	ldw	r2,0(r21)
  8029dc:	b0800215 	stw	r2,8(r22)
  8029e0:	a8800117 	ldw	r2,4(r21)
  8029e4:	b0800315 	stw	r2,12(r22)
  8029e8:	008006c4 	movi	r2,27
  8029ec:	11803f36 	bltu	r2,r6,802aec <_realloc_r+0x518>
  8029f0:	b0800404 	addi	r2,r22,16
  8029f4:	ad400204 	addi	r21,r21,8
  8029f8:	a8c00017 	ldw	r3,0(r21)
  8029fc:	10c00015 	stw	r3,0(r2)
  802a00:	a8c00117 	ldw	r3,4(r21)
  802a04:	10c00115 	stw	r3,4(r2)
  802a08:	a8c00217 	ldw	r3,8(r21)
  802a0c:	10c00215 	stw	r3,8(r2)
  802a10:	b447883a 	add	r3,r22,r17
  802a14:	bc45c83a 	sub	r2,r23,r17
  802a18:	e0c00215 	stw	r3,8(fp)
  802a1c:	10800054 	ori	r2,r2,1
  802a20:	18800115 	stw	r2,4(r3)
  802a24:	b0800117 	ldw	r2,4(r22)
  802a28:	a009883a 	mov	r4,r20
  802a2c:	1080004c 	andi	r2,r2,1
  802a30:	1462b03a 	or	r17,r2,r17
  802a34:	b4400115 	stw	r17,4(r22)
  802a38:	08043dc0 	call	8043dc <__malloc_unlock>
  802a3c:	9005883a 	mov	r2,r18
  802a40:	003f4006 	br	802744 <__alt_mem_onchip_mem+0xff7fa744>
  802a44:	a8c00217 	ldw	r3,8(r21)
  802a48:	90c00215 	stw	r3,8(r18)
  802a4c:	a8c00317 	ldw	r3,12(r21)
  802a50:	90c00315 	stw	r3,12(r18)
  802a54:	30801126 	beq	r6,r2,802a9c <_realloc_r+0x4c8>
  802a58:	90800404 	addi	r2,r18,16
  802a5c:	a8c00404 	addi	r3,r21,16
  802a60:	003f1906 	br	8026c8 <__alt_mem_onchip_mem+0xff7fa6c8>
  802a64:	90ffff17 	ldw	r3,-4(r18)
  802a68:	00bfff04 	movi	r2,-4
  802a6c:	a825883a 	mov	r18,r21
  802a70:	1884703a 	and	r2,r3,r2
  802a74:	80a1883a 	add	r16,r16,r2
  802a78:	003f2406 	br	80270c <__alt_mem_onchip_mem+0xff7fa70c>
  802a7c:	a8800217 	ldw	r2,8(r21)
  802a80:	b0800415 	stw	r2,16(r22)
  802a84:	a8800317 	ldw	r2,12(r21)
  802a88:	b0800515 	stw	r2,20(r22)
  802a8c:	31000a26 	beq	r6,r4,802ab8 <_realloc_r+0x4e4>
  802a90:	b0800604 	addi	r2,r22,24
  802a94:	ad400404 	addi	r21,r21,16
  802a98:	003fa906 	br	802940 <__alt_mem_onchip_mem+0xff7fa940>
  802a9c:	a9000417 	ldw	r4,16(r21)
  802aa0:	90800604 	addi	r2,r18,24
  802aa4:	a8c00604 	addi	r3,r21,24
  802aa8:	91000415 	stw	r4,16(r18)
  802aac:	a9000517 	ldw	r4,20(r21)
  802ab0:	91000515 	stw	r4,20(r18)
  802ab4:	003f0406 	br	8026c8 <__alt_mem_onchip_mem+0xff7fa6c8>
  802ab8:	a8c00417 	ldw	r3,16(r21)
  802abc:	ad400604 	addi	r21,r21,24
  802ac0:	b0800804 	addi	r2,r22,32
  802ac4:	b0c00615 	stw	r3,24(r22)
  802ac8:	a8ffff17 	ldw	r3,-4(r21)
  802acc:	b0c00715 	stw	r3,28(r22)
  802ad0:	003f9b06 	br	802940 <__alt_mem_onchip_mem+0xff7fa940>
  802ad4:	9005883a 	mov	r2,r18
  802ad8:	003fc706 	br	8029f8 <__alt_mem_onchip_mem+0xff7fa9f8>
  802adc:	a80b883a 	mov	r5,r21
  802ae0:	9009883a 	mov	r4,r18
  802ae4:	08023500 	call	802350 <memmove>
  802ae8:	003fc906 	br	802a10 <__alt_mem_onchip_mem+0xff7faa10>
  802aec:	a8800217 	ldw	r2,8(r21)
  802af0:	b0800415 	stw	r2,16(r22)
  802af4:	a8800317 	ldw	r2,12(r21)
  802af8:	b0800515 	stw	r2,20(r22)
  802afc:	31000726 	beq	r6,r4,802b1c <_realloc_r+0x548>
  802b00:	b0800604 	addi	r2,r22,24
  802b04:	ad400404 	addi	r21,r21,16
  802b08:	003fbb06 	br	8029f8 <__alt_mem_onchip_mem+0xff7fa9f8>
  802b0c:	a009883a 	mov	r4,r20
  802b10:	08043dc0 	call	8043dc <__malloc_unlock>
  802b14:	0005883a 	mov	r2,zero
  802b18:	003f0a06 	br	802744 <__alt_mem_onchip_mem+0xff7fa744>
  802b1c:	a8c00417 	ldw	r3,16(r21)
  802b20:	ad400604 	addi	r21,r21,24
  802b24:	b0800804 	addi	r2,r22,32
  802b28:	b0c00615 	stw	r3,24(r22)
  802b2c:	a8ffff17 	ldw	r3,-4(r21)
  802b30:	b0c00715 	stw	r3,28(r22)
  802b34:	003fb006 	br	8029f8 <__alt_mem_onchip_mem+0xff7fa9f8>

00802b38 <_sbrk_r>:
  802b38:	defffd04 	addi	sp,sp,-12
  802b3c:	dc000015 	stw	r16,0(sp)
  802b40:	04002074 	movhi	r16,129
  802b44:	dc400115 	stw	r17,4(sp)
  802b48:	842ea304 	addi	r16,r16,-17780
  802b4c:	2023883a 	mov	r17,r4
  802b50:	2809883a 	mov	r4,r5
  802b54:	dfc00215 	stw	ra,8(sp)
  802b58:	80000015 	stw	zero,0(r16)
  802b5c:	080459c0 	call	80459c <sbrk>
  802b60:	00ffffc4 	movi	r3,-1
  802b64:	10c00526 	beq	r2,r3,802b7c <_sbrk_r+0x44>
  802b68:	dfc00217 	ldw	ra,8(sp)
  802b6c:	dc400117 	ldw	r17,4(sp)
  802b70:	dc000017 	ldw	r16,0(sp)
  802b74:	dec00304 	addi	sp,sp,12
  802b78:	f800283a 	ret
  802b7c:	80c00017 	ldw	r3,0(r16)
  802b80:	183ff926 	beq	r3,zero,802b68 <__alt_mem_onchip_mem+0xff7fab68>
  802b84:	88c00015 	stw	r3,0(r17)
  802b88:	003ff706 	br	802b68 <__alt_mem_onchip_mem+0xff7fab68>

00802b8c <__sread>:
  802b8c:	defffe04 	addi	sp,sp,-8
  802b90:	dc000015 	stw	r16,0(sp)
  802b94:	2821883a 	mov	r16,r5
  802b98:	2940038f 	ldh	r5,14(r5)
  802b9c:	dfc00115 	stw	ra,4(sp)
  802ba0:	08038cc0 	call	8038cc <_read_r>
  802ba4:	10000716 	blt	r2,zero,802bc4 <__sread+0x38>
  802ba8:	80c01417 	ldw	r3,80(r16)
  802bac:	1887883a 	add	r3,r3,r2
  802bb0:	80c01415 	stw	r3,80(r16)
  802bb4:	dfc00117 	ldw	ra,4(sp)
  802bb8:	dc000017 	ldw	r16,0(sp)
  802bbc:	dec00204 	addi	sp,sp,8
  802bc0:	f800283a 	ret
  802bc4:	80c0030b 	ldhu	r3,12(r16)
  802bc8:	18fbffcc 	andi	r3,r3,61439
  802bcc:	80c0030d 	sth	r3,12(r16)
  802bd0:	dfc00117 	ldw	ra,4(sp)
  802bd4:	dc000017 	ldw	r16,0(sp)
  802bd8:	dec00204 	addi	sp,sp,8
  802bdc:	f800283a 	ret

00802be0 <__seofread>:
  802be0:	0005883a 	mov	r2,zero
  802be4:	f800283a 	ret

00802be8 <__swrite>:
  802be8:	2880030b 	ldhu	r2,12(r5)
  802bec:	defffb04 	addi	sp,sp,-20
  802bf0:	dcc00315 	stw	r19,12(sp)
  802bf4:	dc800215 	stw	r18,8(sp)
  802bf8:	dc400115 	stw	r17,4(sp)
  802bfc:	dc000015 	stw	r16,0(sp)
  802c00:	dfc00415 	stw	ra,16(sp)
  802c04:	10c0400c 	andi	r3,r2,256
  802c08:	2821883a 	mov	r16,r5
  802c0c:	2023883a 	mov	r17,r4
  802c10:	3025883a 	mov	r18,r6
  802c14:	3827883a 	mov	r19,r7
  802c18:	18000526 	beq	r3,zero,802c30 <__swrite+0x48>
  802c1c:	2940038f 	ldh	r5,14(r5)
  802c20:	01c00084 	movi	r7,2
  802c24:	000d883a 	mov	r6,zero
  802c28:	08036b00 	call	8036b0 <_lseek_r>
  802c2c:	8080030b 	ldhu	r2,12(r16)
  802c30:	8140038f 	ldh	r5,14(r16)
  802c34:	10bbffcc 	andi	r2,r2,61439
  802c38:	980f883a 	mov	r7,r19
  802c3c:	900d883a 	mov	r6,r18
  802c40:	8809883a 	mov	r4,r17
  802c44:	8080030d 	sth	r2,12(r16)
  802c48:	dfc00417 	ldw	ra,16(sp)
  802c4c:	dcc00317 	ldw	r19,12(sp)
  802c50:	dc800217 	ldw	r18,8(sp)
  802c54:	dc400117 	ldw	r17,4(sp)
  802c58:	dc000017 	ldw	r16,0(sp)
  802c5c:	dec00504 	addi	sp,sp,20
  802c60:	0802cc81 	jmpi	802cc8 <_write_r>

00802c64 <__sseek>:
  802c64:	defffe04 	addi	sp,sp,-8
  802c68:	dc000015 	stw	r16,0(sp)
  802c6c:	2821883a 	mov	r16,r5
  802c70:	2940038f 	ldh	r5,14(r5)
  802c74:	dfc00115 	stw	ra,4(sp)
  802c78:	08036b00 	call	8036b0 <_lseek_r>
  802c7c:	00ffffc4 	movi	r3,-1
  802c80:	10c00826 	beq	r2,r3,802ca4 <__sseek+0x40>
  802c84:	80c0030b 	ldhu	r3,12(r16)
  802c88:	80801415 	stw	r2,80(r16)
  802c8c:	18c40014 	ori	r3,r3,4096
  802c90:	80c0030d 	sth	r3,12(r16)
  802c94:	dfc00117 	ldw	ra,4(sp)
  802c98:	dc000017 	ldw	r16,0(sp)
  802c9c:	dec00204 	addi	sp,sp,8
  802ca0:	f800283a 	ret
  802ca4:	80c0030b 	ldhu	r3,12(r16)
  802ca8:	18fbffcc 	andi	r3,r3,61439
  802cac:	80c0030d 	sth	r3,12(r16)
  802cb0:	dfc00117 	ldw	ra,4(sp)
  802cb4:	dc000017 	ldw	r16,0(sp)
  802cb8:	dec00204 	addi	sp,sp,8
  802cbc:	f800283a 	ret

00802cc0 <__sclose>:
  802cc0:	2940038f 	ldh	r5,14(r5)
  802cc4:	0802e7c1 	jmpi	802e7c <_close_r>

00802cc8 <_write_r>:
  802cc8:	defffd04 	addi	sp,sp,-12
  802ccc:	2805883a 	mov	r2,r5
  802cd0:	dc000015 	stw	r16,0(sp)
  802cd4:	04002074 	movhi	r16,129
  802cd8:	dc400115 	stw	r17,4(sp)
  802cdc:	300b883a 	mov	r5,r6
  802ce0:	842ea304 	addi	r16,r16,-17780
  802ce4:	2023883a 	mov	r17,r4
  802ce8:	380d883a 	mov	r6,r7
  802cec:	1009883a 	mov	r4,r2
  802cf0:	dfc00215 	stw	ra,8(sp)
  802cf4:	80000015 	stw	zero,0(r16)
  802cf8:	080482c0 	call	80482c <write>
  802cfc:	00ffffc4 	movi	r3,-1
  802d00:	10c00526 	beq	r2,r3,802d18 <_write_r+0x50>
  802d04:	dfc00217 	ldw	ra,8(sp)
  802d08:	dc400117 	ldw	r17,4(sp)
  802d0c:	dc000017 	ldw	r16,0(sp)
  802d10:	dec00304 	addi	sp,sp,12
  802d14:	f800283a 	ret
  802d18:	80c00017 	ldw	r3,0(r16)
  802d1c:	183ff926 	beq	r3,zero,802d04 <__alt_mem_onchip_mem+0xff7fad04>
  802d20:	88c00015 	stw	r3,0(r17)
  802d24:	003ff706 	br	802d04 <__alt_mem_onchip_mem+0xff7fad04>

00802d28 <__swsetup_r>:
  802d28:	00802074 	movhi	r2,129
  802d2c:	defffd04 	addi	sp,sp,-12
  802d30:	10a77704 	addi	r2,r2,-25124
  802d34:	dc400115 	stw	r17,4(sp)
  802d38:	2023883a 	mov	r17,r4
  802d3c:	11000017 	ldw	r4,0(r2)
  802d40:	dc000015 	stw	r16,0(sp)
  802d44:	dfc00215 	stw	ra,8(sp)
  802d48:	2821883a 	mov	r16,r5
  802d4c:	20000226 	beq	r4,zero,802d58 <__swsetup_r+0x30>
  802d50:	20800e17 	ldw	r2,56(r4)
  802d54:	10003126 	beq	r2,zero,802e1c <__swsetup_r+0xf4>
  802d58:	8080030b 	ldhu	r2,12(r16)
  802d5c:	10c0020c 	andi	r3,r2,8
  802d60:	1009883a 	mov	r4,r2
  802d64:	18000f26 	beq	r3,zero,802da4 <__swsetup_r+0x7c>
  802d68:	80c00417 	ldw	r3,16(r16)
  802d6c:	18001526 	beq	r3,zero,802dc4 <__swsetup_r+0x9c>
  802d70:	1100004c 	andi	r4,r2,1
  802d74:	20001c1e 	bne	r4,zero,802de8 <__swsetup_r+0xc0>
  802d78:	1080008c 	andi	r2,r2,2
  802d7c:	1000291e 	bne	r2,zero,802e24 <__swsetup_r+0xfc>
  802d80:	80800517 	ldw	r2,20(r16)
  802d84:	80800215 	stw	r2,8(r16)
  802d88:	18001c26 	beq	r3,zero,802dfc <__swsetup_r+0xd4>
  802d8c:	0005883a 	mov	r2,zero
  802d90:	dfc00217 	ldw	ra,8(sp)
  802d94:	dc400117 	ldw	r17,4(sp)
  802d98:	dc000017 	ldw	r16,0(sp)
  802d9c:	dec00304 	addi	sp,sp,12
  802da0:	f800283a 	ret
  802da4:	2080040c 	andi	r2,r4,16
  802da8:	10002e26 	beq	r2,zero,802e64 <__swsetup_r+0x13c>
  802dac:	2080010c 	andi	r2,r4,4
  802db0:	10001e1e 	bne	r2,zero,802e2c <__swsetup_r+0x104>
  802db4:	80c00417 	ldw	r3,16(r16)
  802db8:	20800214 	ori	r2,r4,8
  802dbc:	8080030d 	sth	r2,12(r16)
  802dc0:	183feb1e 	bne	r3,zero,802d70 <__alt_mem_onchip_mem+0xff7fad70>
  802dc4:	1100a00c 	andi	r4,r2,640
  802dc8:	01408004 	movi	r5,512
  802dcc:	217fe826 	beq	r4,r5,802d70 <__alt_mem_onchip_mem+0xff7fad70>
  802dd0:	800b883a 	mov	r5,r16
  802dd4:	8809883a 	mov	r4,r17
  802dd8:	08037100 	call	803710 <__smakebuf_r>
  802ddc:	8080030b 	ldhu	r2,12(r16)
  802de0:	80c00417 	ldw	r3,16(r16)
  802de4:	003fe206 	br	802d70 <__alt_mem_onchip_mem+0xff7fad70>
  802de8:	80800517 	ldw	r2,20(r16)
  802dec:	80000215 	stw	zero,8(r16)
  802df0:	0085c83a 	sub	r2,zero,r2
  802df4:	80800615 	stw	r2,24(r16)
  802df8:	183fe41e 	bne	r3,zero,802d8c <__alt_mem_onchip_mem+0xff7fad8c>
  802dfc:	80c0030b 	ldhu	r3,12(r16)
  802e00:	0005883a 	mov	r2,zero
  802e04:	1900200c 	andi	r4,r3,128
  802e08:	203fe126 	beq	r4,zero,802d90 <__alt_mem_onchip_mem+0xff7fad90>
  802e0c:	18c01014 	ori	r3,r3,64
  802e10:	80c0030d 	sth	r3,12(r16)
  802e14:	00bfffc4 	movi	r2,-1
  802e18:	003fdd06 	br	802d90 <__alt_mem_onchip_mem+0xff7fad90>
  802e1c:	08012840 	call	801284 <__sinit>
  802e20:	003fcd06 	br	802d58 <__alt_mem_onchip_mem+0xff7fad58>
  802e24:	0005883a 	mov	r2,zero
  802e28:	003fd606 	br	802d84 <__alt_mem_onchip_mem+0xff7fad84>
  802e2c:	81400c17 	ldw	r5,48(r16)
  802e30:	28000626 	beq	r5,zero,802e4c <__swsetup_r+0x124>
  802e34:	80801004 	addi	r2,r16,64
  802e38:	28800326 	beq	r5,r2,802e48 <__swsetup_r+0x120>
  802e3c:	8809883a 	mov	r4,r17
  802e40:	08033a00 	call	8033a0 <_free_r>
  802e44:	8100030b 	ldhu	r4,12(r16)
  802e48:	80000c15 	stw	zero,48(r16)
  802e4c:	80c00417 	ldw	r3,16(r16)
  802e50:	00bff6c4 	movi	r2,-37
  802e54:	1108703a 	and	r4,r2,r4
  802e58:	80000115 	stw	zero,4(r16)
  802e5c:	80c00015 	stw	r3,0(r16)
  802e60:	003fd506 	br	802db8 <__alt_mem_onchip_mem+0xff7fadb8>
  802e64:	00800244 	movi	r2,9
  802e68:	88800015 	stw	r2,0(r17)
  802e6c:	20801014 	ori	r2,r4,64
  802e70:	8080030d 	sth	r2,12(r16)
  802e74:	00bfffc4 	movi	r2,-1
  802e78:	003fc506 	br	802d90 <__alt_mem_onchip_mem+0xff7fad90>

00802e7c <_close_r>:
  802e7c:	defffd04 	addi	sp,sp,-12
  802e80:	dc000015 	stw	r16,0(sp)
  802e84:	04002074 	movhi	r16,129
  802e88:	dc400115 	stw	r17,4(sp)
  802e8c:	842ea304 	addi	r16,r16,-17780
  802e90:	2023883a 	mov	r17,r4
  802e94:	2809883a 	mov	r4,r5
  802e98:	dfc00215 	stw	ra,8(sp)
  802e9c:	80000015 	stw	zero,0(r16)
  802ea0:	0803cf80 	call	803cf8 <close>
  802ea4:	00ffffc4 	movi	r3,-1
  802ea8:	10c00526 	beq	r2,r3,802ec0 <_close_r+0x44>
  802eac:	dfc00217 	ldw	ra,8(sp)
  802eb0:	dc400117 	ldw	r17,4(sp)
  802eb4:	dc000017 	ldw	r16,0(sp)
  802eb8:	dec00304 	addi	sp,sp,12
  802ebc:	f800283a 	ret
  802ec0:	80c00017 	ldw	r3,0(r16)
  802ec4:	183ff926 	beq	r3,zero,802eac <__alt_mem_onchip_mem+0xff7faeac>
  802ec8:	88c00015 	stw	r3,0(r17)
  802ecc:	003ff706 	br	802eac <__alt_mem_onchip_mem+0xff7faeac>

00802ed0 <_fclose_r>:
  802ed0:	28003926 	beq	r5,zero,802fb8 <_fclose_r+0xe8>
  802ed4:	defffc04 	addi	sp,sp,-16
  802ed8:	dc400115 	stw	r17,4(sp)
  802edc:	dc000015 	stw	r16,0(sp)
  802ee0:	dfc00315 	stw	ra,12(sp)
  802ee4:	dc800215 	stw	r18,8(sp)
  802ee8:	2023883a 	mov	r17,r4
  802eec:	2821883a 	mov	r16,r5
  802ef0:	20000226 	beq	r4,zero,802efc <_fclose_r+0x2c>
  802ef4:	20800e17 	ldw	r2,56(r4)
  802ef8:	10002726 	beq	r2,zero,802f98 <_fclose_r+0xc8>
  802efc:	8080030f 	ldh	r2,12(r16)
  802f00:	1000071e 	bne	r2,zero,802f20 <_fclose_r+0x50>
  802f04:	0005883a 	mov	r2,zero
  802f08:	dfc00317 	ldw	ra,12(sp)
  802f0c:	dc800217 	ldw	r18,8(sp)
  802f10:	dc400117 	ldw	r17,4(sp)
  802f14:	dc000017 	ldw	r16,0(sp)
  802f18:	dec00404 	addi	sp,sp,16
  802f1c:	f800283a 	ret
  802f20:	800b883a 	mov	r5,r16
  802f24:	8809883a 	mov	r4,r17
  802f28:	0802fd40 	call	802fd4 <__sflush_r>
  802f2c:	1025883a 	mov	r18,r2
  802f30:	80800b17 	ldw	r2,44(r16)
  802f34:	10000426 	beq	r2,zero,802f48 <_fclose_r+0x78>
  802f38:	81400717 	ldw	r5,28(r16)
  802f3c:	8809883a 	mov	r4,r17
  802f40:	103ee83a 	callr	r2
  802f44:	10001616 	blt	r2,zero,802fa0 <_fclose_r+0xd0>
  802f48:	8080030b 	ldhu	r2,12(r16)
  802f4c:	1080200c 	andi	r2,r2,128
  802f50:	1000151e 	bne	r2,zero,802fa8 <_fclose_r+0xd8>
  802f54:	81400c17 	ldw	r5,48(r16)
  802f58:	28000526 	beq	r5,zero,802f70 <_fclose_r+0xa0>
  802f5c:	80801004 	addi	r2,r16,64
  802f60:	28800226 	beq	r5,r2,802f6c <_fclose_r+0x9c>
  802f64:	8809883a 	mov	r4,r17
  802f68:	08033a00 	call	8033a0 <_free_r>
  802f6c:	80000c15 	stw	zero,48(r16)
  802f70:	81401117 	ldw	r5,68(r16)
  802f74:	28000326 	beq	r5,zero,802f84 <_fclose_r+0xb4>
  802f78:	8809883a 	mov	r4,r17
  802f7c:	08033a00 	call	8033a0 <_free_r>
  802f80:	80001115 	stw	zero,68(r16)
  802f84:	08012940 	call	801294 <__sfp_lock_acquire>
  802f88:	8000030d 	sth	zero,12(r16)
  802f8c:	08012980 	call	801298 <__sfp_lock_release>
  802f90:	9005883a 	mov	r2,r18
  802f94:	003fdc06 	br	802f08 <__alt_mem_onchip_mem+0xff7faf08>
  802f98:	08012840 	call	801284 <__sinit>
  802f9c:	003fd706 	br	802efc <__alt_mem_onchip_mem+0xff7faefc>
  802fa0:	04bfffc4 	movi	r18,-1
  802fa4:	003fe806 	br	802f48 <__alt_mem_onchip_mem+0xff7faf48>
  802fa8:	81400417 	ldw	r5,16(r16)
  802fac:	8809883a 	mov	r4,r17
  802fb0:	08033a00 	call	8033a0 <_free_r>
  802fb4:	003fe706 	br	802f54 <__alt_mem_onchip_mem+0xff7faf54>
  802fb8:	0005883a 	mov	r2,zero
  802fbc:	f800283a 	ret

00802fc0 <fclose>:
  802fc0:	00802074 	movhi	r2,129
  802fc4:	10a77704 	addi	r2,r2,-25124
  802fc8:	200b883a 	mov	r5,r4
  802fcc:	11000017 	ldw	r4,0(r2)
  802fd0:	0802ed01 	jmpi	802ed0 <_fclose_r>

00802fd4 <__sflush_r>:
  802fd4:	2880030b 	ldhu	r2,12(r5)
  802fd8:	defffb04 	addi	sp,sp,-20
  802fdc:	dcc00315 	stw	r19,12(sp)
  802fe0:	dc400115 	stw	r17,4(sp)
  802fe4:	dfc00415 	stw	ra,16(sp)
  802fe8:	dc800215 	stw	r18,8(sp)
  802fec:	dc000015 	stw	r16,0(sp)
  802ff0:	10c0020c 	andi	r3,r2,8
  802ff4:	2823883a 	mov	r17,r5
  802ff8:	2027883a 	mov	r19,r4
  802ffc:	1800311e 	bne	r3,zero,8030c4 <__sflush_r+0xf0>
  803000:	28c00117 	ldw	r3,4(r5)
  803004:	10820014 	ori	r2,r2,2048
  803008:	2880030d 	sth	r2,12(r5)
  80300c:	00c04b0e 	bge	zero,r3,80313c <__sflush_r+0x168>
  803010:	8a000a17 	ldw	r8,40(r17)
  803014:	40002326 	beq	r8,zero,8030a4 <__sflush_r+0xd0>
  803018:	9c000017 	ldw	r16,0(r19)
  80301c:	10c4000c 	andi	r3,r2,4096
  803020:	98000015 	stw	zero,0(r19)
  803024:	18004826 	beq	r3,zero,803148 <__sflush_r+0x174>
  803028:	89801417 	ldw	r6,80(r17)
  80302c:	10c0010c 	andi	r3,r2,4
  803030:	18000626 	beq	r3,zero,80304c <__sflush_r+0x78>
  803034:	88c00117 	ldw	r3,4(r17)
  803038:	88800c17 	ldw	r2,48(r17)
  80303c:	30cdc83a 	sub	r6,r6,r3
  803040:	10000226 	beq	r2,zero,80304c <__sflush_r+0x78>
  803044:	88800f17 	ldw	r2,60(r17)
  803048:	308dc83a 	sub	r6,r6,r2
  80304c:	89400717 	ldw	r5,28(r17)
  803050:	000f883a 	mov	r7,zero
  803054:	9809883a 	mov	r4,r19
  803058:	403ee83a 	callr	r8
  80305c:	00ffffc4 	movi	r3,-1
  803060:	10c04426 	beq	r2,r3,803174 <__sflush_r+0x1a0>
  803064:	88c0030b 	ldhu	r3,12(r17)
  803068:	89000417 	ldw	r4,16(r17)
  80306c:	88000115 	stw	zero,4(r17)
  803070:	197dffcc 	andi	r5,r3,63487
  803074:	8940030d 	sth	r5,12(r17)
  803078:	89000015 	stw	r4,0(r17)
  80307c:	18c4000c 	andi	r3,r3,4096
  803080:	18002c1e 	bne	r3,zero,803134 <__sflush_r+0x160>
  803084:	89400c17 	ldw	r5,48(r17)
  803088:	9c000015 	stw	r16,0(r19)
  80308c:	28000526 	beq	r5,zero,8030a4 <__sflush_r+0xd0>
  803090:	88801004 	addi	r2,r17,64
  803094:	28800226 	beq	r5,r2,8030a0 <__sflush_r+0xcc>
  803098:	9809883a 	mov	r4,r19
  80309c:	08033a00 	call	8033a0 <_free_r>
  8030a0:	88000c15 	stw	zero,48(r17)
  8030a4:	0005883a 	mov	r2,zero
  8030a8:	dfc00417 	ldw	ra,16(sp)
  8030ac:	dcc00317 	ldw	r19,12(sp)
  8030b0:	dc800217 	ldw	r18,8(sp)
  8030b4:	dc400117 	ldw	r17,4(sp)
  8030b8:	dc000017 	ldw	r16,0(sp)
  8030bc:	dec00504 	addi	sp,sp,20
  8030c0:	f800283a 	ret
  8030c4:	2c800417 	ldw	r18,16(r5)
  8030c8:	903ff626 	beq	r18,zero,8030a4 <__alt_mem_onchip_mem+0xff7fb0a4>
  8030cc:	2c000017 	ldw	r16,0(r5)
  8030d0:	108000cc 	andi	r2,r2,3
  8030d4:	2c800015 	stw	r18,0(r5)
  8030d8:	84a1c83a 	sub	r16,r16,r18
  8030dc:	1000131e 	bne	r2,zero,80312c <__sflush_r+0x158>
  8030e0:	28800517 	ldw	r2,20(r5)
  8030e4:	88800215 	stw	r2,8(r17)
  8030e8:	04000316 	blt	zero,r16,8030f8 <__sflush_r+0x124>
  8030ec:	003fed06 	br	8030a4 <__alt_mem_onchip_mem+0xff7fb0a4>
  8030f0:	90a5883a 	add	r18,r18,r2
  8030f4:	043feb0e 	bge	zero,r16,8030a4 <__alt_mem_onchip_mem+0xff7fb0a4>
  8030f8:	88800917 	ldw	r2,36(r17)
  8030fc:	89400717 	ldw	r5,28(r17)
  803100:	800f883a 	mov	r7,r16
  803104:	900d883a 	mov	r6,r18
  803108:	9809883a 	mov	r4,r19
  80310c:	103ee83a 	callr	r2
  803110:	80a1c83a 	sub	r16,r16,r2
  803114:	00bff616 	blt	zero,r2,8030f0 <__alt_mem_onchip_mem+0xff7fb0f0>
  803118:	88c0030b 	ldhu	r3,12(r17)
  80311c:	00bfffc4 	movi	r2,-1
  803120:	18c01014 	ori	r3,r3,64
  803124:	88c0030d 	sth	r3,12(r17)
  803128:	003fdf06 	br	8030a8 <__alt_mem_onchip_mem+0xff7fb0a8>
  80312c:	0005883a 	mov	r2,zero
  803130:	003fec06 	br	8030e4 <__alt_mem_onchip_mem+0xff7fb0e4>
  803134:	88801415 	stw	r2,80(r17)
  803138:	003fd206 	br	803084 <__alt_mem_onchip_mem+0xff7fb084>
  80313c:	28c00f17 	ldw	r3,60(r5)
  803140:	00ffb316 	blt	zero,r3,803010 <__alt_mem_onchip_mem+0xff7fb010>
  803144:	003fd706 	br	8030a4 <__alt_mem_onchip_mem+0xff7fb0a4>
  803148:	89400717 	ldw	r5,28(r17)
  80314c:	000d883a 	mov	r6,zero
  803150:	01c00044 	movi	r7,1
  803154:	9809883a 	mov	r4,r19
  803158:	403ee83a 	callr	r8
  80315c:	100d883a 	mov	r6,r2
  803160:	00bfffc4 	movi	r2,-1
  803164:	30801426 	beq	r6,r2,8031b8 <__sflush_r+0x1e4>
  803168:	8880030b 	ldhu	r2,12(r17)
  80316c:	8a000a17 	ldw	r8,40(r17)
  803170:	003fae06 	br	80302c <__alt_mem_onchip_mem+0xff7fb02c>
  803174:	98c00017 	ldw	r3,0(r19)
  803178:	183fba26 	beq	r3,zero,803064 <__alt_mem_onchip_mem+0xff7fb064>
  80317c:	01000744 	movi	r4,29
  803180:	19000626 	beq	r3,r4,80319c <__sflush_r+0x1c8>
  803184:	01000584 	movi	r4,22
  803188:	19000426 	beq	r3,r4,80319c <__sflush_r+0x1c8>
  80318c:	88c0030b 	ldhu	r3,12(r17)
  803190:	18c01014 	ori	r3,r3,64
  803194:	88c0030d 	sth	r3,12(r17)
  803198:	003fc306 	br	8030a8 <__alt_mem_onchip_mem+0xff7fb0a8>
  80319c:	8880030b 	ldhu	r2,12(r17)
  8031a0:	88c00417 	ldw	r3,16(r17)
  8031a4:	88000115 	stw	zero,4(r17)
  8031a8:	10bdffcc 	andi	r2,r2,63487
  8031ac:	8880030d 	sth	r2,12(r17)
  8031b0:	88c00015 	stw	r3,0(r17)
  8031b4:	003fb306 	br	803084 <__alt_mem_onchip_mem+0xff7fb084>
  8031b8:	98800017 	ldw	r2,0(r19)
  8031bc:	103fea26 	beq	r2,zero,803168 <__alt_mem_onchip_mem+0xff7fb168>
  8031c0:	00c00744 	movi	r3,29
  8031c4:	10c00226 	beq	r2,r3,8031d0 <__sflush_r+0x1fc>
  8031c8:	00c00584 	movi	r3,22
  8031cc:	10c0031e 	bne	r2,r3,8031dc <__sflush_r+0x208>
  8031d0:	9c000015 	stw	r16,0(r19)
  8031d4:	0005883a 	mov	r2,zero
  8031d8:	003fb306 	br	8030a8 <__alt_mem_onchip_mem+0xff7fb0a8>
  8031dc:	88c0030b 	ldhu	r3,12(r17)
  8031e0:	3005883a 	mov	r2,r6
  8031e4:	18c01014 	ori	r3,r3,64
  8031e8:	88c0030d 	sth	r3,12(r17)
  8031ec:	003fae06 	br	8030a8 <__alt_mem_onchip_mem+0xff7fb0a8>

008031f0 <_fflush_r>:
  8031f0:	defffd04 	addi	sp,sp,-12
  8031f4:	dc000115 	stw	r16,4(sp)
  8031f8:	dfc00215 	stw	ra,8(sp)
  8031fc:	2021883a 	mov	r16,r4
  803200:	20000226 	beq	r4,zero,80320c <_fflush_r+0x1c>
  803204:	20800e17 	ldw	r2,56(r4)
  803208:	10000c26 	beq	r2,zero,80323c <_fflush_r+0x4c>
  80320c:	2880030f 	ldh	r2,12(r5)
  803210:	1000051e 	bne	r2,zero,803228 <_fflush_r+0x38>
  803214:	0005883a 	mov	r2,zero
  803218:	dfc00217 	ldw	ra,8(sp)
  80321c:	dc000117 	ldw	r16,4(sp)
  803220:	dec00304 	addi	sp,sp,12
  803224:	f800283a 	ret
  803228:	8009883a 	mov	r4,r16
  80322c:	dfc00217 	ldw	ra,8(sp)
  803230:	dc000117 	ldw	r16,4(sp)
  803234:	dec00304 	addi	sp,sp,12
  803238:	0802fd41 	jmpi	802fd4 <__sflush_r>
  80323c:	d9400015 	stw	r5,0(sp)
  803240:	08012840 	call	801284 <__sinit>
  803244:	d9400017 	ldw	r5,0(sp)
  803248:	003ff006 	br	80320c <__alt_mem_onchip_mem+0xff7fb20c>

0080324c <fflush>:
  80324c:	20000526 	beq	r4,zero,803264 <fflush+0x18>
  803250:	00802074 	movhi	r2,129
  803254:	10a77704 	addi	r2,r2,-25124
  803258:	200b883a 	mov	r5,r4
  80325c:	11000017 	ldw	r4,0(r2)
  803260:	08031f01 	jmpi	8031f0 <_fflush_r>
  803264:	00802074 	movhi	r2,129
  803268:	10a77604 	addi	r2,r2,-25128
  80326c:	11000017 	ldw	r4,0(r2)
  803270:	01402034 	movhi	r5,128
  803274:	294c7c04 	addi	r5,r5,12784
  803278:	08018541 	jmpi	801854 <_fwalk_reent>

0080327c <_malloc_trim_r>:
  80327c:	defffb04 	addi	sp,sp,-20
  803280:	dcc00315 	stw	r19,12(sp)
  803284:	04c02074 	movhi	r19,129
  803288:	dc800215 	stw	r18,8(sp)
  80328c:	dc400115 	stw	r17,4(sp)
  803290:	dc000015 	stw	r16,0(sp)
  803294:	dfc00415 	stw	ra,16(sp)
  803298:	2821883a 	mov	r16,r5
  80329c:	9ce17904 	addi	r19,r19,-31260
  8032a0:	2025883a 	mov	r18,r4
  8032a4:	08043b80 	call	8043b8 <__malloc_lock>
  8032a8:	98800217 	ldw	r2,8(r19)
  8032ac:	14400117 	ldw	r17,4(r2)
  8032b0:	00bfff04 	movi	r2,-4
  8032b4:	88a2703a 	and	r17,r17,r2
  8032b8:	8c21c83a 	sub	r16,r17,r16
  8032bc:	8403fbc4 	addi	r16,r16,4079
  8032c0:	8020d33a 	srli	r16,r16,12
  8032c4:	0083ffc4 	movi	r2,4095
  8032c8:	843fffc4 	addi	r16,r16,-1
  8032cc:	8020933a 	slli	r16,r16,12
  8032d0:	1400060e 	bge	r2,r16,8032ec <_malloc_trim_r+0x70>
  8032d4:	000b883a 	mov	r5,zero
  8032d8:	9009883a 	mov	r4,r18
  8032dc:	0802b380 	call	802b38 <_sbrk_r>
  8032e0:	98c00217 	ldw	r3,8(r19)
  8032e4:	1c47883a 	add	r3,r3,r17
  8032e8:	10c00a26 	beq	r2,r3,803314 <_malloc_trim_r+0x98>
  8032ec:	9009883a 	mov	r4,r18
  8032f0:	08043dc0 	call	8043dc <__malloc_unlock>
  8032f4:	0005883a 	mov	r2,zero
  8032f8:	dfc00417 	ldw	ra,16(sp)
  8032fc:	dcc00317 	ldw	r19,12(sp)
  803300:	dc800217 	ldw	r18,8(sp)
  803304:	dc400117 	ldw	r17,4(sp)
  803308:	dc000017 	ldw	r16,0(sp)
  80330c:	dec00504 	addi	sp,sp,20
  803310:	f800283a 	ret
  803314:	040bc83a 	sub	r5,zero,r16
  803318:	9009883a 	mov	r4,r18
  80331c:	0802b380 	call	802b38 <_sbrk_r>
  803320:	00ffffc4 	movi	r3,-1
  803324:	10c00d26 	beq	r2,r3,80335c <_malloc_trim_r+0xe0>
  803328:	00c02074 	movhi	r3,129
  80332c:	18eeab04 	addi	r3,r3,-17748
  803330:	18800017 	ldw	r2,0(r3)
  803334:	99000217 	ldw	r4,8(r19)
  803338:	8c23c83a 	sub	r17,r17,r16
  80333c:	8c400054 	ori	r17,r17,1
  803340:	1421c83a 	sub	r16,r2,r16
  803344:	24400115 	stw	r17,4(r4)
  803348:	9009883a 	mov	r4,r18
  80334c:	1c000015 	stw	r16,0(r3)
  803350:	08043dc0 	call	8043dc <__malloc_unlock>
  803354:	00800044 	movi	r2,1
  803358:	003fe706 	br	8032f8 <__alt_mem_onchip_mem+0xff7fb2f8>
  80335c:	000b883a 	mov	r5,zero
  803360:	9009883a 	mov	r4,r18
  803364:	0802b380 	call	802b38 <_sbrk_r>
  803368:	99000217 	ldw	r4,8(r19)
  80336c:	014003c4 	movi	r5,15
  803370:	1107c83a 	sub	r3,r2,r4
  803374:	28ffdd0e 	bge	r5,r3,8032ec <__alt_mem_onchip_mem+0xff7fb2ec>
  803378:	01402074 	movhi	r5,129
  80337c:	29677804 	addi	r5,r5,-25120
  803380:	29400017 	ldw	r5,0(r5)
  803384:	18c00054 	ori	r3,r3,1
  803388:	20c00115 	stw	r3,4(r4)
  80338c:	00c02074 	movhi	r3,129
  803390:	1145c83a 	sub	r2,r2,r5
  803394:	18eeab04 	addi	r3,r3,-17748
  803398:	18800015 	stw	r2,0(r3)
  80339c:	003fd306 	br	8032ec <__alt_mem_onchip_mem+0xff7fb2ec>

008033a0 <_free_r>:
  8033a0:	28004126 	beq	r5,zero,8034a8 <_free_r+0x108>
  8033a4:	defffd04 	addi	sp,sp,-12
  8033a8:	dc400115 	stw	r17,4(sp)
  8033ac:	dc000015 	stw	r16,0(sp)
  8033b0:	2023883a 	mov	r17,r4
  8033b4:	2821883a 	mov	r16,r5
  8033b8:	dfc00215 	stw	ra,8(sp)
  8033bc:	08043b80 	call	8043b8 <__malloc_lock>
  8033c0:	81ffff17 	ldw	r7,-4(r16)
  8033c4:	00bfff84 	movi	r2,-2
  8033c8:	01002074 	movhi	r4,129
  8033cc:	81bffe04 	addi	r6,r16,-8
  8033d0:	3884703a 	and	r2,r7,r2
  8033d4:	21217904 	addi	r4,r4,-31260
  8033d8:	308b883a 	add	r5,r6,r2
  8033dc:	2a400117 	ldw	r9,4(r5)
  8033e0:	22000217 	ldw	r8,8(r4)
  8033e4:	00ffff04 	movi	r3,-4
  8033e8:	48c6703a 	and	r3,r9,r3
  8033ec:	2a005726 	beq	r5,r8,80354c <_free_r+0x1ac>
  8033f0:	28c00115 	stw	r3,4(r5)
  8033f4:	39c0004c 	andi	r7,r7,1
  8033f8:	3800091e 	bne	r7,zero,803420 <_free_r+0x80>
  8033fc:	823ffe17 	ldw	r8,-8(r16)
  803400:	22400204 	addi	r9,r4,8
  803404:	320dc83a 	sub	r6,r6,r8
  803408:	31c00217 	ldw	r7,8(r6)
  80340c:	1205883a 	add	r2,r2,r8
  803410:	3a406526 	beq	r7,r9,8035a8 <_free_r+0x208>
  803414:	32000317 	ldw	r8,12(r6)
  803418:	3a000315 	stw	r8,12(r7)
  80341c:	41c00215 	stw	r7,8(r8)
  803420:	28cf883a 	add	r7,r5,r3
  803424:	39c00117 	ldw	r7,4(r7)
  803428:	39c0004c 	andi	r7,r7,1
  80342c:	38003a26 	beq	r7,zero,803518 <_free_r+0x178>
  803430:	10c00054 	ori	r3,r2,1
  803434:	30c00115 	stw	r3,4(r6)
  803438:	3087883a 	add	r3,r6,r2
  80343c:	18800015 	stw	r2,0(r3)
  803440:	00c07fc4 	movi	r3,511
  803444:	18801936 	bltu	r3,r2,8034ac <_free_r+0x10c>
  803448:	1004d0fa 	srli	r2,r2,3
  80344c:	01c00044 	movi	r7,1
  803450:	21400117 	ldw	r5,4(r4)
  803454:	10c00044 	addi	r3,r2,1
  803458:	18c7883a 	add	r3,r3,r3
  80345c:	1005d0ba 	srai	r2,r2,2
  803460:	18c7883a 	add	r3,r3,r3
  803464:	18c7883a 	add	r3,r3,r3
  803468:	1907883a 	add	r3,r3,r4
  80346c:	3884983a 	sll	r2,r7,r2
  803470:	19c00017 	ldw	r7,0(r3)
  803474:	1a3ffe04 	addi	r8,r3,-8
  803478:	1144b03a 	or	r2,r2,r5
  80347c:	32000315 	stw	r8,12(r6)
  803480:	31c00215 	stw	r7,8(r6)
  803484:	20800115 	stw	r2,4(r4)
  803488:	19800015 	stw	r6,0(r3)
  80348c:	39800315 	stw	r6,12(r7)
  803490:	8809883a 	mov	r4,r17
  803494:	dfc00217 	ldw	ra,8(sp)
  803498:	dc400117 	ldw	r17,4(sp)
  80349c:	dc000017 	ldw	r16,0(sp)
  8034a0:	dec00304 	addi	sp,sp,12
  8034a4:	08043dc1 	jmpi	8043dc <__malloc_unlock>
  8034a8:	f800283a 	ret
  8034ac:	100ad27a 	srli	r5,r2,9
  8034b0:	00c00104 	movi	r3,4
  8034b4:	19404a36 	bltu	r3,r5,8035e0 <_free_r+0x240>
  8034b8:	100ad1ba 	srli	r5,r2,6
  8034bc:	28c00e44 	addi	r3,r5,57
  8034c0:	18c7883a 	add	r3,r3,r3
  8034c4:	29400e04 	addi	r5,r5,56
  8034c8:	18c7883a 	add	r3,r3,r3
  8034cc:	18c7883a 	add	r3,r3,r3
  8034d0:	1909883a 	add	r4,r3,r4
  8034d4:	20c00017 	ldw	r3,0(r4)
  8034d8:	01c02074 	movhi	r7,129
  8034dc:	213ffe04 	addi	r4,r4,-8
  8034e0:	39e17904 	addi	r7,r7,-31260
  8034e4:	20c04426 	beq	r4,r3,8035f8 <_free_r+0x258>
  8034e8:	01ffff04 	movi	r7,-4
  8034ec:	19400117 	ldw	r5,4(r3)
  8034f0:	29ca703a 	and	r5,r5,r7
  8034f4:	1140022e 	bgeu	r2,r5,803500 <_free_r+0x160>
  8034f8:	18c00217 	ldw	r3,8(r3)
  8034fc:	20fffb1e 	bne	r4,r3,8034ec <__alt_mem_onchip_mem+0xff7fb4ec>
  803500:	19000317 	ldw	r4,12(r3)
  803504:	31000315 	stw	r4,12(r6)
  803508:	30c00215 	stw	r3,8(r6)
  80350c:	21800215 	stw	r6,8(r4)
  803510:	19800315 	stw	r6,12(r3)
  803514:	003fde06 	br	803490 <__alt_mem_onchip_mem+0xff7fb490>
  803518:	29c00217 	ldw	r7,8(r5)
  80351c:	10c5883a 	add	r2,r2,r3
  803520:	00c02074 	movhi	r3,129
  803524:	18e17b04 	addi	r3,r3,-31252
  803528:	38c03b26 	beq	r7,r3,803618 <_free_r+0x278>
  80352c:	2a000317 	ldw	r8,12(r5)
  803530:	11400054 	ori	r5,r2,1
  803534:	3087883a 	add	r3,r6,r2
  803538:	3a000315 	stw	r8,12(r7)
  80353c:	41c00215 	stw	r7,8(r8)
  803540:	31400115 	stw	r5,4(r6)
  803544:	18800015 	stw	r2,0(r3)
  803548:	003fbd06 	br	803440 <__alt_mem_onchip_mem+0xff7fb440>
  80354c:	39c0004c 	andi	r7,r7,1
  803550:	10c5883a 	add	r2,r2,r3
  803554:	3800071e 	bne	r7,zero,803574 <_free_r+0x1d4>
  803558:	81fffe17 	ldw	r7,-8(r16)
  80355c:	31cdc83a 	sub	r6,r6,r7
  803560:	30c00317 	ldw	r3,12(r6)
  803564:	31400217 	ldw	r5,8(r6)
  803568:	11c5883a 	add	r2,r2,r7
  80356c:	28c00315 	stw	r3,12(r5)
  803570:	19400215 	stw	r5,8(r3)
  803574:	10c00054 	ori	r3,r2,1
  803578:	30c00115 	stw	r3,4(r6)
  80357c:	00c02074 	movhi	r3,129
  803580:	18e77904 	addi	r3,r3,-25116
  803584:	18c00017 	ldw	r3,0(r3)
  803588:	21800215 	stw	r6,8(r4)
  80358c:	10ffc036 	bltu	r2,r3,803490 <__alt_mem_onchip_mem+0xff7fb490>
  803590:	00802074 	movhi	r2,129
  803594:	10aea204 	addi	r2,r2,-17784
  803598:	11400017 	ldw	r5,0(r2)
  80359c:	8809883a 	mov	r4,r17
  8035a0:	080327c0 	call	80327c <_malloc_trim_r>
  8035a4:	003fba06 	br	803490 <__alt_mem_onchip_mem+0xff7fb490>
  8035a8:	28c9883a 	add	r4,r5,r3
  8035ac:	21000117 	ldw	r4,4(r4)
  8035b0:	2100004c 	andi	r4,r4,1
  8035b4:	2000391e 	bne	r4,zero,80369c <_free_r+0x2fc>
  8035b8:	29c00217 	ldw	r7,8(r5)
  8035bc:	29000317 	ldw	r4,12(r5)
  8035c0:	1885883a 	add	r2,r3,r2
  8035c4:	10c00054 	ori	r3,r2,1
  8035c8:	39000315 	stw	r4,12(r7)
  8035cc:	21c00215 	stw	r7,8(r4)
  8035d0:	30c00115 	stw	r3,4(r6)
  8035d4:	308d883a 	add	r6,r6,r2
  8035d8:	30800015 	stw	r2,0(r6)
  8035dc:	003fac06 	br	803490 <__alt_mem_onchip_mem+0xff7fb490>
  8035e0:	00c00504 	movi	r3,20
  8035e4:	19401536 	bltu	r3,r5,80363c <_free_r+0x29c>
  8035e8:	28c01704 	addi	r3,r5,92
  8035ec:	18c7883a 	add	r3,r3,r3
  8035f0:	294016c4 	addi	r5,r5,91
  8035f4:	003fb406 	br	8034c8 <__alt_mem_onchip_mem+0xff7fb4c8>
  8035f8:	280bd0ba 	srai	r5,r5,2
  8035fc:	00c00044 	movi	r3,1
  803600:	38800117 	ldw	r2,4(r7)
  803604:	194a983a 	sll	r5,r3,r5
  803608:	2007883a 	mov	r3,r4
  80360c:	2884b03a 	or	r2,r5,r2
  803610:	38800115 	stw	r2,4(r7)
  803614:	003fbb06 	br	803504 <__alt_mem_onchip_mem+0xff7fb504>
  803618:	21800515 	stw	r6,20(r4)
  80361c:	21800415 	stw	r6,16(r4)
  803620:	10c00054 	ori	r3,r2,1
  803624:	31c00315 	stw	r7,12(r6)
  803628:	31c00215 	stw	r7,8(r6)
  80362c:	30c00115 	stw	r3,4(r6)
  803630:	308d883a 	add	r6,r6,r2
  803634:	30800015 	stw	r2,0(r6)
  803638:	003f9506 	br	803490 <__alt_mem_onchip_mem+0xff7fb490>
  80363c:	00c01504 	movi	r3,84
  803640:	19400536 	bltu	r3,r5,803658 <_free_r+0x2b8>
  803644:	100ad33a 	srli	r5,r2,12
  803648:	28c01bc4 	addi	r3,r5,111
  80364c:	18c7883a 	add	r3,r3,r3
  803650:	29401b84 	addi	r5,r5,110
  803654:	003f9c06 	br	8034c8 <__alt_mem_onchip_mem+0xff7fb4c8>
  803658:	00c05504 	movi	r3,340
  80365c:	19400536 	bltu	r3,r5,803674 <_free_r+0x2d4>
  803660:	100ad3fa 	srli	r5,r2,15
  803664:	28c01e04 	addi	r3,r5,120
  803668:	18c7883a 	add	r3,r3,r3
  80366c:	29401dc4 	addi	r5,r5,119
  803670:	003f9506 	br	8034c8 <__alt_mem_onchip_mem+0xff7fb4c8>
  803674:	00c15504 	movi	r3,1364
  803678:	19400536 	bltu	r3,r5,803690 <_free_r+0x2f0>
  80367c:	100ad4ba 	srli	r5,r2,18
  803680:	28c01f44 	addi	r3,r5,125
  803684:	18c7883a 	add	r3,r3,r3
  803688:	29401f04 	addi	r5,r5,124
  80368c:	003f8e06 	br	8034c8 <__alt_mem_onchip_mem+0xff7fb4c8>
  803690:	00c03f84 	movi	r3,254
  803694:	01401f84 	movi	r5,126
  803698:	003f8b06 	br	8034c8 <__alt_mem_onchip_mem+0xff7fb4c8>
  80369c:	10c00054 	ori	r3,r2,1
  8036a0:	30c00115 	stw	r3,4(r6)
  8036a4:	308d883a 	add	r6,r6,r2
  8036a8:	30800015 	stw	r2,0(r6)
  8036ac:	003f7806 	br	803490 <__alt_mem_onchip_mem+0xff7fb490>

008036b0 <_lseek_r>:
  8036b0:	defffd04 	addi	sp,sp,-12
  8036b4:	2805883a 	mov	r2,r5
  8036b8:	dc000015 	stw	r16,0(sp)
  8036bc:	04002074 	movhi	r16,129
  8036c0:	dc400115 	stw	r17,4(sp)
  8036c4:	300b883a 	mov	r5,r6
  8036c8:	842ea304 	addi	r16,r16,-17780
  8036cc:	2023883a 	mov	r17,r4
  8036d0:	380d883a 	mov	r6,r7
  8036d4:	1009883a 	mov	r4,r2
  8036d8:	dfc00215 	stw	ra,8(sp)
  8036dc:	80000015 	stw	zero,0(r16)
  8036e0:	08042680 	call	804268 <lseek>
  8036e4:	00ffffc4 	movi	r3,-1
  8036e8:	10c00526 	beq	r2,r3,803700 <_lseek_r+0x50>
  8036ec:	dfc00217 	ldw	ra,8(sp)
  8036f0:	dc400117 	ldw	r17,4(sp)
  8036f4:	dc000017 	ldw	r16,0(sp)
  8036f8:	dec00304 	addi	sp,sp,12
  8036fc:	f800283a 	ret
  803700:	80c00017 	ldw	r3,0(r16)
  803704:	183ff926 	beq	r3,zero,8036ec <__alt_mem_onchip_mem+0xff7fb6ec>
  803708:	88c00015 	stw	r3,0(r17)
  80370c:	003ff706 	br	8036ec <__alt_mem_onchip_mem+0xff7fb6ec>

00803710 <__smakebuf_r>:
  803710:	2880030b 	ldhu	r2,12(r5)
  803714:	10c0008c 	andi	r3,r2,2
  803718:	1800411e 	bne	r3,zero,803820 <__smakebuf_r+0x110>
  80371c:	deffec04 	addi	sp,sp,-80
  803720:	dc000f15 	stw	r16,60(sp)
  803724:	2821883a 	mov	r16,r5
  803728:	2940038f 	ldh	r5,14(r5)
  80372c:	dc401015 	stw	r17,64(sp)
  803730:	dfc01315 	stw	ra,76(sp)
  803734:	dcc01215 	stw	r19,72(sp)
  803738:	dc801115 	stw	r18,68(sp)
  80373c:	2023883a 	mov	r17,r4
  803740:	28001c16 	blt	r5,zero,8037b4 <__smakebuf_r+0xa4>
  803744:	d80d883a 	mov	r6,sp
  803748:	080392c0 	call	80392c <_fstat_r>
  80374c:	10001816 	blt	r2,zero,8037b0 <__smakebuf_r+0xa0>
  803750:	d8800117 	ldw	r2,4(sp)
  803754:	00e00014 	movui	r3,32768
  803758:	10bc000c 	andi	r2,r2,61440
  80375c:	14c80020 	cmpeqi	r19,r2,8192
  803760:	10c03726 	beq	r2,r3,803840 <__smakebuf_r+0x130>
  803764:	80c0030b 	ldhu	r3,12(r16)
  803768:	18c20014 	ori	r3,r3,2048
  80376c:	80c0030d 	sth	r3,12(r16)
  803770:	00c80004 	movi	r3,8192
  803774:	10c0521e 	bne	r2,r3,8038c0 <__smakebuf_r+0x1b0>
  803778:	8140038f 	ldh	r5,14(r16)
  80377c:	8809883a 	mov	r4,r17
  803780:	08039880 	call	803988 <_isatty_r>
  803784:	10004c26 	beq	r2,zero,8038b8 <__smakebuf_r+0x1a8>
  803788:	8080030b 	ldhu	r2,12(r16)
  80378c:	80c010c4 	addi	r3,r16,67
  803790:	80c00015 	stw	r3,0(r16)
  803794:	10800054 	ori	r2,r2,1
  803798:	8080030d 	sth	r2,12(r16)
  80379c:	00800044 	movi	r2,1
  8037a0:	80c00415 	stw	r3,16(r16)
  8037a4:	80800515 	stw	r2,20(r16)
  8037a8:	04810004 	movi	r18,1024
  8037ac:	00000706 	br	8037cc <__smakebuf_r+0xbc>
  8037b0:	8080030b 	ldhu	r2,12(r16)
  8037b4:	10c0200c 	andi	r3,r2,128
  8037b8:	18001f1e 	bne	r3,zero,803838 <__smakebuf_r+0x128>
  8037bc:	04810004 	movi	r18,1024
  8037c0:	10820014 	ori	r2,r2,2048
  8037c4:	8080030d 	sth	r2,12(r16)
  8037c8:	0027883a 	mov	r19,zero
  8037cc:	900b883a 	mov	r5,r18
  8037d0:	8809883a 	mov	r4,r17
  8037d4:	08019180 	call	801918 <_malloc_r>
  8037d8:	10002c26 	beq	r2,zero,80388c <__smakebuf_r+0x17c>
  8037dc:	80c0030b 	ldhu	r3,12(r16)
  8037e0:	01002034 	movhi	r4,128
  8037e4:	2103cf04 	addi	r4,r4,3900
  8037e8:	89000f15 	stw	r4,60(r17)
  8037ec:	18c02014 	ori	r3,r3,128
  8037f0:	80c0030d 	sth	r3,12(r16)
  8037f4:	80800015 	stw	r2,0(r16)
  8037f8:	80800415 	stw	r2,16(r16)
  8037fc:	84800515 	stw	r18,20(r16)
  803800:	98001a1e 	bne	r19,zero,80386c <__smakebuf_r+0x15c>
  803804:	dfc01317 	ldw	ra,76(sp)
  803808:	dcc01217 	ldw	r19,72(sp)
  80380c:	dc801117 	ldw	r18,68(sp)
  803810:	dc401017 	ldw	r17,64(sp)
  803814:	dc000f17 	ldw	r16,60(sp)
  803818:	dec01404 	addi	sp,sp,80
  80381c:	f800283a 	ret
  803820:	288010c4 	addi	r2,r5,67
  803824:	28800015 	stw	r2,0(r5)
  803828:	28800415 	stw	r2,16(r5)
  80382c:	00800044 	movi	r2,1
  803830:	28800515 	stw	r2,20(r5)
  803834:	f800283a 	ret
  803838:	04801004 	movi	r18,64
  80383c:	003fe006 	br	8037c0 <__alt_mem_onchip_mem+0xff7fb7c0>
  803840:	81000a17 	ldw	r4,40(r16)
  803844:	00c02034 	movhi	r3,128
  803848:	18cb1904 	addi	r3,r3,11364
  80384c:	20ffc51e 	bne	r4,r3,803764 <__alt_mem_onchip_mem+0xff7fb764>
  803850:	8080030b 	ldhu	r2,12(r16)
  803854:	04810004 	movi	r18,1024
  803858:	84801315 	stw	r18,76(r16)
  80385c:	1484b03a 	or	r2,r2,r18
  803860:	8080030d 	sth	r2,12(r16)
  803864:	0027883a 	mov	r19,zero
  803868:	003fd806 	br	8037cc <__alt_mem_onchip_mem+0xff7fb7cc>
  80386c:	8140038f 	ldh	r5,14(r16)
  803870:	8809883a 	mov	r4,r17
  803874:	08039880 	call	803988 <_isatty_r>
  803878:	103fe226 	beq	r2,zero,803804 <__alt_mem_onchip_mem+0xff7fb804>
  80387c:	8080030b 	ldhu	r2,12(r16)
  803880:	10800054 	ori	r2,r2,1
  803884:	8080030d 	sth	r2,12(r16)
  803888:	003fde06 	br	803804 <__alt_mem_onchip_mem+0xff7fb804>
  80388c:	8080030b 	ldhu	r2,12(r16)
  803890:	10c0800c 	andi	r3,r2,512
  803894:	183fdb1e 	bne	r3,zero,803804 <__alt_mem_onchip_mem+0xff7fb804>
  803898:	10800094 	ori	r2,r2,2
  80389c:	80c010c4 	addi	r3,r16,67
  8038a0:	8080030d 	sth	r2,12(r16)
  8038a4:	00800044 	movi	r2,1
  8038a8:	80c00015 	stw	r3,0(r16)
  8038ac:	80c00415 	stw	r3,16(r16)
  8038b0:	80800515 	stw	r2,20(r16)
  8038b4:	003fd306 	br	803804 <__alt_mem_onchip_mem+0xff7fb804>
  8038b8:	04810004 	movi	r18,1024
  8038bc:	003fc306 	br	8037cc <__alt_mem_onchip_mem+0xff7fb7cc>
  8038c0:	0027883a 	mov	r19,zero
  8038c4:	04810004 	movi	r18,1024
  8038c8:	003fc006 	br	8037cc <__alt_mem_onchip_mem+0xff7fb7cc>

008038cc <_read_r>:
  8038cc:	defffd04 	addi	sp,sp,-12
  8038d0:	2805883a 	mov	r2,r5
  8038d4:	dc000015 	stw	r16,0(sp)
  8038d8:	04002074 	movhi	r16,129
  8038dc:	dc400115 	stw	r17,4(sp)
  8038e0:	300b883a 	mov	r5,r6
  8038e4:	842ea304 	addi	r16,r16,-17780
  8038e8:	2023883a 	mov	r17,r4
  8038ec:	380d883a 	mov	r6,r7
  8038f0:	1009883a 	mov	r4,r2
  8038f4:	dfc00215 	stw	ra,8(sp)
  8038f8:	80000015 	stw	zero,0(r16)
  8038fc:	080443c0 	call	80443c <read>
  803900:	00ffffc4 	movi	r3,-1
  803904:	10c00526 	beq	r2,r3,80391c <_read_r+0x50>
  803908:	dfc00217 	ldw	ra,8(sp)
  80390c:	dc400117 	ldw	r17,4(sp)
  803910:	dc000017 	ldw	r16,0(sp)
  803914:	dec00304 	addi	sp,sp,12
  803918:	f800283a 	ret
  80391c:	80c00017 	ldw	r3,0(r16)
  803920:	183ff926 	beq	r3,zero,803908 <__alt_mem_onchip_mem+0xff7fb908>
  803924:	88c00015 	stw	r3,0(r17)
  803928:	003ff706 	br	803908 <__alt_mem_onchip_mem+0xff7fb908>

0080392c <_fstat_r>:
  80392c:	defffd04 	addi	sp,sp,-12
  803930:	2805883a 	mov	r2,r5
  803934:	dc000015 	stw	r16,0(sp)
  803938:	04002074 	movhi	r16,129
  80393c:	dc400115 	stw	r17,4(sp)
  803940:	842ea304 	addi	r16,r16,-17780
  803944:	2023883a 	mov	r17,r4
  803948:	300b883a 	mov	r5,r6
  80394c:	1009883a 	mov	r4,r2
  803950:	dfc00215 	stw	ra,8(sp)
  803954:	80000015 	stw	zero,0(r16)
  803958:	0803e300 	call	803e30 <fstat>
  80395c:	00ffffc4 	movi	r3,-1
  803960:	10c00526 	beq	r2,r3,803978 <_fstat_r+0x4c>
  803964:	dfc00217 	ldw	ra,8(sp)
  803968:	dc400117 	ldw	r17,4(sp)
  80396c:	dc000017 	ldw	r16,0(sp)
  803970:	dec00304 	addi	sp,sp,12
  803974:	f800283a 	ret
  803978:	80c00017 	ldw	r3,0(r16)
  80397c:	183ff926 	beq	r3,zero,803964 <__alt_mem_onchip_mem+0xff7fb964>
  803980:	88c00015 	stw	r3,0(r17)
  803984:	003ff706 	br	803964 <__alt_mem_onchip_mem+0xff7fb964>

00803988 <_isatty_r>:
  803988:	defffd04 	addi	sp,sp,-12
  80398c:	dc000015 	stw	r16,0(sp)
  803990:	04002074 	movhi	r16,129
  803994:	dc400115 	stw	r17,4(sp)
  803998:	842ea304 	addi	r16,r16,-17780
  80399c:	2023883a 	mov	r17,r4
  8039a0:	2809883a 	mov	r4,r5
  8039a4:	dfc00215 	stw	ra,8(sp)
  8039a8:	80000015 	stw	zero,0(r16)
  8039ac:	080409c0 	call	80409c <isatty>
  8039b0:	00ffffc4 	movi	r3,-1
  8039b4:	10c00526 	beq	r2,r3,8039cc <_isatty_r+0x44>
  8039b8:	dfc00217 	ldw	ra,8(sp)
  8039bc:	dc400117 	ldw	r17,4(sp)
  8039c0:	dc000017 	ldw	r16,0(sp)
  8039c4:	dec00304 	addi	sp,sp,12
  8039c8:	f800283a 	ret
  8039cc:	80c00017 	ldw	r3,0(r16)
  8039d0:	183ff926 	beq	r3,zero,8039b8 <__alt_mem_onchip_mem+0xff7fb9b8>
  8039d4:	88c00015 	stw	r3,0(r17)
  8039d8:	003ff706 	br	8039b8 <__alt_mem_onchip_mem+0xff7fb9b8>

008039dc <__divsi3>:
  8039dc:	20001b16 	blt	r4,zero,803a4c <__divsi3+0x70>
  8039e0:	000f883a 	mov	r7,zero
  8039e4:	28001616 	blt	r5,zero,803a40 <__divsi3+0x64>
  8039e8:	200d883a 	mov	r6,r4
  8039ec:	29001a2e 	bgeu	r5,r4,803a58 <__divsi3+0x7c>
  8039f0:	00800804 	movi	r2,32
  8039f4:	00c00044 	movi	r3,1
  8039f8:	00000106 	br	803a00 <__divsi3+0x24>
  8039fc:	10000d26 	beq	r2,zero,803a34 <__divsi3+0x58>
  803a00:	294b883a 	add	r5,r5,r5
  803a04:	10bfffc4 	addi	r2,r2,-1
  803a08:	18c7883a 	add	r3,r3,r3
  803a0c:	293ffb36 	bltu	r5,r4,8039fc <__alt_mem_onchip_mem+0xff7fb9fc>
  803a10:	0005883a 	mov	r2,zero
  803a14:	18000726 	beq	r3,zero,803a34 <__divsi3+0x58>
  803a18:	0005883a 	mov	r2,zero
  803a1c:	31400236 	bltu	r6,r5,803a28 <__divsi3+0x4c>
  803a20:	314dc83a 	sub	r6,r6,r5
  803a24:	10c4b03a 	or	r2,r2,r3
  803a28:	1806d07a 	srli	r3,r3,1
  803a2c:	280ad07a 	srli	r5,r5,1
  803a30:	183ffa1e 	bne	r3,zero,803a1c <__alt_mem_onchip_mem+0xff7fba1c>
  803a34:	38000126 	beq	r7,zero,803a3c <__divsi3+0x60>
  803a38:	0085c83a 	sub	r2,zero,r2
  803a3c:	f800283a 	ret
  803a40:	014bc83a 	sub	r5,zero,r5
  803a44:	39c0005c 	xori	r7,r7,1
  803a48:	003fe706 	br	8039e8 <__alt_mem_onchip_mem+0xff7fb9e8>
  803a4c:	0109c83a 	sub	r4,zero,r4
  803a50:	01c00044 	movi	r7,1
  803a54:	003fe306 	br	8039e4 <__alt_mem_onchip_mem+0xff7fb9e4>
  803a58:	00c00044 	movi	r3,1
  803a5c:	003fee06 	br	803a18 <__alt_mem_onchip_mem+0xff7fba18>

00803a60 <__modsi3>:
  803a60:	20001716 	blt	r4,zero,803ac0 <__modsi3+0x60>
  803a64:	000f883a 	mov	r7,zero
  803a68:	2005883a 	mov	r2,r4
  803a6c:	28001216 	blt	r5,zero,803ab8 <__modsi3+0x58>
  803a70:	2900162e 	bgeu	r5,r4,803acc <__modsi3+0x6c>
  803a74:	01800804 	movi	r6,32
  803a78:	00c00044 	movi	r3,1
  803a7c:	00000106 	br	803a84 <__modsi3+0x24>
  803a80:	30000a26 	beq	r6,zero,803aac <__modsi3+0x4c>
  803a84:	294b883a 	add	r5,r5,r5
  803a88:	31bfffc4 	addi	r6,r6,-1
  803a8c:	18c7883a 	add	r3,r3,r3
  803a90:	293ffb36 	bltu	r5,r4,803a80 <__alt_mem_onchip_mem+0xff7fba80>
  803a94:	18000526 	beq	r3,zero,803aac <__modsi3+0x4c>
  803a98:	1806d07a 	srli	r3,r3,1
  803a9c:	11400136 	bltu	r2,r5,803aa4 <__modsi3+0x44>
  803aa0:	1145c83a 	sub	r2,r2,r5
  803aa4:	280ad07a 	srli	r5,r5,1
  803aa8:	183ffb1e 	bne	r3,zero,803a98 <__alt_mem_onchip_mem+0xff7fba98>
  803aac:	38000126 	beq	r7,zero,803ab4 <__modsi3+0x54>
  803ab0:	0085c83a 	sub	r2,zero,r2
  803ab4:	f800283a 	ret
  803ab8:	014bc83a 	sub	r5,zero,r5
  803abc:	003fec06 	br	803a70 <__alt_mem_onchip_mem+0xff7fba70>
  803ac0:	0109c83a 	sub	r4,zero,r4
  803ac4:	01c00044 	movi	r7,1
  803ac8:	003fe706 	br	803a68 <__alt_mem_onchip_mem+0xff7fba68>
  803acc:	00c00044 	movi	r3,1
  803ad0:	003ff106 	br	803a98 <__alt_mem_onchip_mem+0xff7fba98>

00803ad4 <__udivsi3>:
  803ad4:	200d883a 	mov	r6,r4
  803ad8:	2900152e 	bgeu	r5,r4,803b30 <__udivsi3+0x5c>
  803adc:	28001416 	blt	r5,zero,803b30 <__udivsi3+0x5c>
  803ae0:	00800804 	movi	r2,32
  803ae4:	00c00044 	movi	r3,1
  803ae8:	00000206 	br	803af4 <__udivsi3+0x20>
  803aec:	10000e26 	beq	r2,zero,803b28 <__udivsi3+0x54>
  803af0:	28000516 	blt	r5,zero,803b08 <__udivsi3+0x34>
  803af4:	294b883a 	add	r5,r5,r5
  803af8:	10bfffc4 	addi	r2,r2,-1
  803afc:	18c7883a 	add	r3,r3,r3
  803b00:	293ffa36 	bltu	r5,r4,803aec <__alt_mem_onchip_mem+0xff7fbaec>
  803b04:	18000826 	beq	r3,zero,803b28 <__udivsi3+0x54>
  803b08:	0005883a 	mov	r2,zero
  803b0c:	31400236 	bltu	r6,r5,803b18 <__udivsi3+0x44>
  803b10:	314dc83a 	sub	r6,r6,r5
  803b14:	10c4b03a 	or	r2,r2,r3
  803b18:	1806d07a 	srli	r3,r3,1
  803b1c:	280ad07a 	srli	r5,r5,1
  803b20:	183ffa1e 	bne	r3,zero,803b0c <__alt_mem_onchip_mem+0xff7fbb0c>
  803b24:	f800283a 	ret
  803b28:	0005883a 	mov	r2,zero
  803b2c:	f800283a 	ret
  803b30:	00c00044 	movi	r3,1
  803b34:	003ff406 	br	803b08 <__alt_mem_onchip_mem+0xff7fbb08>

00803b38 <__umodsi3>:
  803b38:	2005883a 	mov	r2,r4
  803b3c:	2900122e 	bgeu	r5,r4,803b88 <__umodsi3+0x50>
  803b40:	28001116 	blt	r5,zero,803b88 <__umodsi3+0x50>
  803b44:	01800804 	movi	r6,32
  803b48:	00c00044 	movi	r3,1
  803b4c:	00000206 	br	803b58 <__umodsi3+0x20>
  803b50:	30000c26 	beq	r6,zero,803b84 <__umodsi3+0x4c>
  803b54:	28000516 	blt	r5,zero,803b6c <__umodsi3+0x34>
  803b58:	294b883a 	add	r5,r5,r5
  803b5c:	31bfffc4 	addi	r6,r6,-1
  803b60:	18c7883a 	add	r3,r3,r3
  803b64:	293ffa36 	bltu	r5,r4,803b50 <__alt_mem_onchip_mem+0xff7fbb50>
  803b68:	18000626 	beq	r3,zero,803b84 <__umodsi3+0x4c>
  803b6c:	1806d07a 	srli	r3,r3,1
  803b70:	11400136 	bltu	r2,r5,803b78 <__umodsi3+0x40>
  803b74:	1145c83a 	sub	r2,r2,r5
  803b78:	280ad07a 	srli	r5,r5,1
  803b7c:	183ffb1e 	bne	r3,zero,803b6c <__alt_mem_onchip_mem+0xff7fbb6c>
  803b80:	f800283a 	ret
  803b84:	f800283a 	ret
  803b88:	00c00044 	movi	r3,1
  803b8c:	003ff706 	br	803b6c <__alt_mem_onchip_mem+0xff7fbb6c>

00803b90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  803b90:	defff504 	addi	sp,sp,-44
  803b94:	df000a15 	stw	fp,40(sp)
  803b98:	df000a04 	addi	fp,sp,40
  803b9c:	e13ffc15 	stw	r4,-16(fp)
  803ba0:	e17ffd15 	stw	r5,-12(fp)
  803ba4:	e1bffe15 	stw	r6,-8(fp)
  803ba8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  803bac:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803bb0:	d0a73217 	ldw	r2,-25400(gp)
  
  if (alt_ticks_per_second ())
  803bb4:	10003c26 	beq	r2,zero,803ca8 <alt_alarm_start+0x118>
  {
    if (alarm)
  803bb8:	e0bffc17 	ldw	r2,-16(fp)
  803bbc:	10003826 	beq	r2,zero,803ca0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  803bc0:	e0bffc17 	ldw	r2,-16(fp)
  803bc4:	e0fffe17 	ldw	r3,-8(fp)
  803bc8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  803bcc:	e0bffc17 	ldw	r2,-16(fp)
  803bd0:	e0ffff17 	ldw	r3,-4(fp)
  803bd4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803bd8:	0005303a 	rdctl	r2,status
  803bdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803be0:	e0fff917 	ldw	r3,-28(fp)
  803be4:	00bfff84 	movi	r2,-2
  803be8:	1884703a 	and	r2,r3,r2
  803bec:	1001703a 	wrctl	status,r2
  
  return context;
  803bf0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  803bf4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  803bf8:	d0a73317 	ldw	r2,-25396(gp)
      
      current_nticks = alt_nticks();
  803bfc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  803c00:	e0fffd17 	ldw	r3,-12(fp)
  803c04:	e0bff617 	ldw	r2,-40(fp)
  803c08:	1885883a 	add	r2,r3,r2
  803c0c:	10c00044 	addi	r3,r2,1
  803c10:	e0bffc17 	ldw	r2,-16(fp)
  803c14:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  803c18:	e0bffc17 	ldw	r2,-16(fp)
  803c1c:	10c00217 	ldw	r3,8(r2)
  803c20:	e0bff617 	ldw	r2,-40(fp)
  803c24:	1880042e 	bgeu	r3,r2,803c38 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  803c28:	e0bffc17 	ldw	r2,-16(fp)
  803c2c:	00c00044 	movi	r3,1
  803c30:	10c00405 	stb	r3,16(r2)
  803c34:	00000206 	br	803c40 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  803c38:	e0bffc17 	ldw	r2,-16(fp)
  803c3c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  803c40:	e0bffc17 	ldw	r2,-16(fp)
  803c44:	d0e00c04 	addi	r3,gp,-32720
  803c48:	e0fffa15 	stw	r3,-24(fp)
  803c4c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803c50:	e0bffb17 	ldw	r2,-20(fp)
  803c54:	e0fffa17 	ldw	r3,-24(fp)
  803c58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  803c5c:	e0bffa17 	ldw	r2,-24(fp)
  803c60:	10c00017 	ldw	r3,0(r2)
  803c64:	e0bffb17 	ldw	r2,-20(fp)
  803c68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  803c6c:	e0bffa17 	ldw	r2,-24(fp)
  803c70:	10800017 	ldw	r2,0(r2)
  803c74:	e0fffb17 	ldw	r3,-20(fp)
  803c78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  803c7c:	e0bffa17 	ldw	r2,-24(fp)
  803c80:	e0fffb17 	ldw	r3,-20(fp)
  803c84:	10c00015 	stw	r3,0(r2)
  803c88:	e0bff817 	ldw	r2,-32(fp)
  803c8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803c90:	e0bff717 	ldw	r2,-36(fp)
  803c94:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  803c98:	0005883a 	mov	r2,zero
  803c9c:	00000306 	br	803cac <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  803ca0:	00bffa84 	movi	r2,-22
  803ca4:	00000106 	br	803cac <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  803ca8:	00bfde84 	movi	r2,-134
  }
}
  803cac:	e037883a 	mov	sp,fp
  803cb0:	df000017 	ldw	fp,0(sp)
  803cb4:	dec00104 	addi	sp,sp,4
  803cb8:	f800283a 	ret

00803cbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803cbc:	defffe04 	addi	sp,sp,-8
  803cc0:	dfc00115 	stw	ra,4(sp)
  803cc4:	df000015 	stw	fp,0(sp)
  803cc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803ccc:	d0a00917 	ldw	r2,-32732(gp)
  803cd0:	10000326 	beq	r2,zero,803ce0 <alt_get_errno+0x24>
  803cd4:	d0a00917 	ldw	r2,-32732(gp)
  803cd8:	103ee83a 	callr	r2
  803cdc:	00000106 	br	803ce4 <alt_get_errno+0x28>
  803ce0:	d0a72d04 	addi	r2,gp,-25420
}
  803ce4:	e037883a 	mov	sp,fp
  803ce8:	dfc00117 	ldw	ra,4(sp)
  803cec:	df000017 	ldw	fp,0(sp)
  803cf0:	dec00204 	addi	sp,sp,8
  803cf4:	f800283a 	ret

00803cf8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  803cf8:	defffb04 	addi	sp,sp,-20
  803cfc:	dfc00415 	stw	ra,16(sp)
  803d00:	df000315 	stw	fp,12(sp)
  803d04:	df000304 	addi	fp,sp,12
  803d08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803d0c:	e0bfff17 	ldw	r2,-4(fp)
  803d10:	10000616 	blt	r2,zero,803d2c <close+0x34>
  803d14:	e0bfff17 	ldw	r2,-4(fp)
  803d18:	10c00324 	muli	r3,r2,12
  803d1c:	00802074 	movhi	r2,129
  803d20:	10a28504 	addi	r2,r2,-30188
  803d24:	1885883a 	add	r2,r3,r2
  803d28:	00000106 	br	803d30 <close+0x38>
  803d2c:	0005883a 	mov	r2,zero
  803d30:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  803d34:	e0bffd17 	ldw	r2,-12(fp)
  803d38:	10001926 	beq	r2,zero,803da0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803d3c:	e0bffd17 	ldw	r2,-12(fp)
  803d40:	10800017 	ldw	r2,0(r2)
  803d44:	10800417 	ldw	r2,16(r2)
  803d48:	10000626 	beq	r2,zero,803d64 <close+0x6c>
  803d4c:	e0bffd17 	ldw	r2,-12(fp)
  803d50:	10800017 	ldw	r2,0(r2)
  803d54:	10800417 	ldw	r2,16(r2)
  803d58:	e13ffd17 	ldw	r4,-12(fp)
  803d5c:	103ee83a 	callr	r2
  803d60:	00000106 	br	803d68 <close+0x70>
  803d64:	0005883a 	mov	r2,zero
  803d68:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  803d6c:	e13fff17 	ldw	r4,-4(fp)
  803d70:	08045380 	call	804538 <alt_release_fd>
    if (rval < 0)
  803d74:	e0bffe17 	ldw	r2,-8(fp)
  803d78:	1000070e 	bge	r2,zero,803d98 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  803d7c:	0803cbc0 	call	803cbc <alt_get_errno>
  803d80:	1007883a 	mov	r3,r2
  803d84:	e0bffe17 	ldw	r2,-8(fp)
  803d88:	0085c83a 	sub	r2,zero,r2
  803d8c:	18800015 	stw	r2,0(r3)
      return -1;
  803d90:	00bfffc4 	movi	r2,-1
  803d94:	00000706 	br	803db4 <close+0xbc>
    }
    return 0;
  803d98:	0005883a 	mov	r2,zero
  803d9c:	00000506 	br	803db4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803da0:	0803cbc0 	call	803cbc <alt_get_errno>
  803da4:	1007883a 	mov	r3,r2
  803da8:	00801444 	movi	r2,81
  803dac:	18800015 	stw	r2,0(r3)
    return -1;
  803db0:	00bfffc4 	movi	r2,-1
  }
}
  803db4:	e037883a 	mov	sp,fp
  803db8:	dfc00117 	ldw	ra,4(sp)
  803dbc:	df000017 	ldw	fp,0(sp)
  803dc0:	dec00204 	addi	sp,sp,8
  803dc4:	f800283a 	ret

00803dc8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803dc8:	defffc04 	addi	sp,sp,-16
  803dcc:	df000315 	stw	fp,12(sp)
  803dd0:	df000304 	addi	fp,sp,12
  803dd4:	e13ffd15 	stw	r4,-12(fp)
  803dd8:	e17ffe15 	stw	r5,-8(fp)
  803ddc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803de0:	e0bfff17 	ldw	r2,-4(fp)
}
  803de4:	e037883a 	mov	sp,fp
  803de8:	df000017 	ldw	fp,0(sp)
  803dec:	dec00104 	addi	sp,sp,4
  803df0:	f800283a 	ret

00803df4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803df4:	defffe04 	addi	sp,sp,-8
  803df8:	dfc00115 	stw	ra,4(sp)
  803dfc:	df000015 	stw	fp,0(sp)
  803e00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803e04:	d0a00917 	ldw	r2,-32732(gp)
  803e08:	10000326 	beq	r2,zero,803e18 <alt_get_errno+0x24>
  803e0c:	d0a00917 	ldw	r2,-32732(gp)
  803e10:	103ee83a 	callr	r2
  803e14:	00000106 	br	803e1c <alt_get_errno+0x28>
  803e18:	d0a72d04 	addi	r2,gp,-25420
}
  803e1c:	e037883a 	mov	sp,fp
  803e20:	dfc00117 	ldw	ra,4(sp)
  803e24:	df000017 	ldw	fp,0(sp)
  803e28:	dec00204 	addi	sp,sp,8
  803e2c:	f800283a 	ret

00803e30 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  803e30:	defffb04 	addi	sp,sp,-20
  803e34:	dfc00415 	stw	ra,16(sp)
  803e38:	df000315 	stw	fp,12(sp)
  803e3c:	df000304 	addi	fp,sp,12
  803e40:	e13ffe15 	stw	r4,-8(fp)
  803e44:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803e48:	e0bffe17 	ldw	r2,-8(fp)
  803e4c:	10000616 	blt	r2,zero,803e68 <fstat+0x38>
  803e50:	e0bffe17 	ldw	r2,-8(fp)
  803e54:	10c00324 	muli	r3,r2,12
  803e58:	00802074 	movhi	r2,129
  803e5c:	10a28504 	addi	r2,r2,-30188
  803e60:	1885883a 	add	r2,r3,r2
  803e64:	00000106 	br	803e6c <fstat+0x3c>
  803e68:	0005883a 	mov	r2,zero
  803e6c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  803e70:	e0bffd17 	ldw	r2,-12(fp)
  803e74:	10001026 	beq	r2,zero,803eb8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  803e78:	e0bffd17 	ldw	r2,-12(fp)
  803e7c:	10800017 	ldw	r2,0(r2)
  803e80:	10800817 	ldw	r2,32(r2)
  803e84:	10000726 	beq	r2,zero,803ea4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  803e88:	e0bffd17 	ldw	r2,-12(fp)
  803e8c:	10800017 	ldw	r2,0(r2)
  803e90:	10800817 	ldw	r2,32(r2)
  803e94:	e17fff17 	ldw	r5,-4(fp)
  803e98:	e13ffd17 	ldw	r4,-12(fp)
  803e9c:	103ee83a 	callr	r2
  803ea0:	00000a06 	br	803ecc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  803ea4:	e0bfff17 	ldw	r2,-4(fp)
  803ea8:	00c80004 	movi	r3,8192
  803eac:	10c00115 	stw	r3,4(r2)
      return 0;
  803eb0:	0005883a 	mov	r2,zero
  803eb4:	00000506 	br	803ecc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803eb8:	0803df40 	call	803df4 <alt_get_errno>
  803ebc:	1007883a 	mov	r3,r2
  803ec0:	00801444 	movi	r2,81
  803ec4:	18800015 	stw	r2,0(r3)
    return -1;
  803ec8:	00bfffc4 	movi	r2,-1
  }
}
  803ecc:	e037883a 	mov	sp,fp
  803ed0:	dfc00117 	ldw	ra,4(sp)
  803ed4:	df000017 	ldw	fp,0(sp)
  803ed8:	dec00204 	addi	sp,sp,8
  803edc:	f800283a 	ret

00803ee0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  803ee0:	defff004 	addi	sp,sp,-64
  803ee4:	df000f15 	stw	fp,60(sp)
  803ee8:	df000f04 	addi	fp,sp,60
  803eec:	e13ffd15 	stw	r4,-12(fp)
  803ef0:	e17ffe15 	stw	r5,-8(fp)
  803ef4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  803ef8:	00bffa84 	movi	r2,-22
  803efc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803f00:	e0bffd17 	ldw	r2,-12(fp)
  803f04:	10800828 	cmpgeui	r2,r2,32
  803f08:	1000501e 	bne	r2,zero,80404c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803f0c:	0005303a 	rdctl	r2,status
  803f10:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803f14:	e0fff617 	ldw	r3,-40(fp)
  803f18:	00bfff84 	movi	r2,-2
  803f1c:	1884703a 	and	r2,r3,r2
  803f20:	1001703a 	wrctl	status,r2
  
  return context;
  803f24:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  803f28:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  803f2c:	00802074 	movhi	r2,129
  803f30:	10aeb504 	addi	r2,r2,-17708
  803f34:	e0fffd17 	ldw	r3,-12(fp)
  803f38:	180690fa 	slli	r3,r3,3
  803f3c:	10c5883a 	add	r2,r2,r3
  803f40:	e0ffff17 	ldw	r3,-4(fp)
  803f44:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  803f48:	00802074 	movhi	r2,129
  803f4c:	10aeb504 	addi	r2,r2,-17708
  803f50:	e0fffd17 	ldw	r3,-12(fp)
  803f54:	180690fa 	slli	r3,r3,3
  803f58:	10c5883a 	add	r2,r2,r3
  803f5c:	10800104 	addi	r2,r2,4
  803f60:	e0fffe17 	ldw	r3,-8(fp)
  803f64:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  803f68:	e0bfff17 	ldw	r2,-4(fp)
  803f6c:	10001926 	beq	r2,zero,803fd4 <alt_irq_register+0xf4>
  803f70:	e0bffd17 	ldw	r2,-12(fp)
  803f74:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803f78:	0005303a 	rdctl	r2,status
  803f7c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803f80:	e0fff717 	ldw	r3,-36(fp)
  803f84:	00bfff84 	movi	r2,-2
  803f88:	1884703a 	and	r2,r3,r2
  803f8c:	1001703a 	wrctl	status,r2
  
  return context;
  803f90:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803f94:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  803f98:	00c00044 	movi	r3,1
  803f9c:	e0bff217 	ldw	r2,-56(fp)
  803fa0:	1884983a 	sll	r2,r3,r2
  803fa4:	1007883a 	mov	r3,r2
  803fa8:	d0a72e17 	ldw	r2,-25416(gp)
  803fac:	1884b03a 	or	r2,r3,r2
  803fb0:	d0a72e15 	stw	r2,-25416(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803fb4:	d0a72e17 	ldw	r2,-25416(gp)
  803fb8:	100170fa 	wrctl	ienable,r2
  803fbc:	e0bff817 	ldw	r2,-32(fp)
  803fc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803fc4:	e0bff917 	ldw	r2,-28(fp)
  803fc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803fcc:	0005883a 	mov	r2,zero
  803fd0:	00001906 	br	804038 <alt_irq_register+0x158>
  803fd4:	e0bffd17 	ldw	r2,-12(fp)
  803fd8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803fdc:	0005303a 	rdctl	r2,status
  803fe0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803fe4:	e0fffa17 	ldw	r3,-24(fp)
  803fe8:	00bfff84 	movi	r2,-2
  803fec:	1884703a 	and	r2,r3,r2
  803ff0:	1001703a 	wrctl	status,r2
  
  return context;
  803ff4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803ff8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  803ffc:	00c00044 	movi	r3,1
  804000:	e0bff417 	ldw	r2,-48(fp)
  804004:	1884983a 	sll	r2,r3,r2
  804008:	0084303a 	nor	r2,zero,r2
  80400c:	1007883a 	mov	r3,r2
  804010:	d0a72e17 	ldw	r2,-25416(gp)
  804014:	1884703a 	and	r2,r3,r2
  804018:	d0a72e15 	stw	r2,-25416(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80401c:	d0a72e17 	ldw	r2,-25416(gp)
  804020:	100170fa 	wrctl	ienable,r2
  804024:	e0bffb17 	ldw	r2,-20(fp)
  804028:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80402c:	e0bffc17 	ldw	r2,-16(fp)
  804030:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  804034:	0005883a 	mov	r2,zero
  804038:	e0bff115 	stw	r2,-60(fp)
  80403c:	e0bff317 	ldw	r2,-52(fp)
  804040:	e0bff515 	stw	r2,-44(fp)
  804044:	e0bff517 	ldw	r2,-44(fp)
  804048:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80404c:	e0bff117 	ldw	r2,-60(fp)
}
  804050:	e037883a 	mov	sp,fp
  804054:	df000017 	ldw	fp,0(sp)
  804058:	dec00104 	addi	sp,sp,4
  80405c:	f800283a 	ret

00804060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804060:	defffe04 	addi	sp,sp,-8
  804064:	dfc00115 	stw	ra,4(sp)
  804068:	df000015 	stw	fp,0(sp)
  80406c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804070:	d0a00917 	ldw	r2,-32732(gp)
  804074:	10000326 	beq	r2,zero,804084 <alt_get_errno+0x24>
  804078:	d0a00917 	ldw	r2,-32732(gp)
  80407c:	103ee83a 	callr	r2
  804080:	00000106 	br	804088 <alt_get_errno+0x28>
  804084:	d0a72d04 	addi	r2,gp,-25420
}
  804088:	e037883a 	mov	sp,fp
  80408c:	dfc00117 	ldw	ra,4(sp)
  804090:	df000017 	ldw	fp,0(sp)
  804094:	dec00204 	addi	sp,sp,8
  804098:	f800283a 	ret

0080409c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80409c:	deffed04 	addi	sp,sp,-76
  8040a0:	dfc01215 	stw	ra,72(sp)
  8040a4:	df001115 	stw	fp,68(sp)
  8040a8:	df001104 	addi	fp,sp,68
  8040ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8040b0:	e0bfff17 	ldw	r2,-4(fp)
  8040b4:	10000616 	blt	r2,zero,8040d0 <isatty+0x34>
  8040b8:	e0bfff17 	ldw	r2,-4(fp)
  8040bc:	10c00324 	muli	r3,r2,12
  8040c0:	00802074 	movhi	r2,129
  8040c4:	10a28504 	addi	r2,r2,-30188
  8040c8:	1885883a 	add	r2,r3,r2
  8040cc:	00000106 	br	8040d4 <isatty+0x38>
  8040d0:	0005883a 	mov	r2,zero
  8040d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8040d8:	e0bfef17 	ldw	r2,-68(fp)
  8040dc:	10000e26 	beq	r2,zero,804118 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8040e0:	e0bfef17 	ldw	r2,-68(fp)
  8040e4:	10800017 	ldw	r2,0(r2)
  8040e8:	10800817 	ldw	r2,32(r2)
  8040ec:	1000021e 	bne	r2,zero,8040f8 <isatty+0x5c>
    {
      return 1;
  8040f0:	00800044 	movi	r2,1
  8040f4:	00000d06 	br	80412c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8040f8:	e0bff004 	addi	r2,fp,-64
  8040fc:	100b883a 	mov	r5,r2
  804100:	e13fff17 	ldw	r4,-4(fp)
  804104:	0803e300 	call	803e30 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  804108:	e0bff117 	ldw	r2,-60(fp)
  80410c:	10880020 	cmpeqi	r2,r2,8192
  804110:	10803fcc 	andi	r2,r2,255
  804114:	00000506 	br	80412c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  804118:	08040600 	call	804060 <alt_get_errno>
  80411c:	1007883a 	mov	r3,r2
  804120:	00801444 	movi	r2,81
  804124:	18800015 	stw	r2,0(r3)
    return 0;
  804128:	0005883a 	mov	r2,zero
  }
}
  80412c:	e037883a 	mov	sp,fp
  804130:	dfc00117 	ldw	ra,4(sp)
  804134:	df000017 	ldw	fp,0(sp)
  804138:	dec00204 	addi	sp,sp,8
  80413c:	f800283a 	ret

00804140 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  804140:	defffc04 	addi	sp,sp,-16
  804144:	df000315 	stw	fp,12(sp)
  804148:	df000304 	addi	fp,sp,12
  80414c:	e13ffd15 	stw	r4,-12(fp)
  804150:	e17ffe15 	stw	r5,-8(fp)
  804154:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  804158:	e0fffe17 	ldw	r3,-8(fp)
  80415c:	e0bffd17 	ldw	r2,-12(fp)
  804160:	18800c26 	beq	r3,r2,804194 <alt_load_section+0x54>
  {
    while( to != end )
  804164:	00000806 	br	804188 <alt_load_section+0x48>
    {
      *to++ = *from++;
  804168:	e0bffe17 	ldw	r2,-8(fp)
  80416c:	10c00104 	addi	r3,r2,4
  804170:	e0fffe15 	stw	r3,-8(fp)
  804174:	e0fffd17 	ldw	r3,-12(fp)
  804178:	19000104 	addi	r4,r3,4
  80417c:	e13ffd15 	stw	r4,-12(fp)
  804180:	18c00017 	ldw	r3,0(r3)
  804184:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  804188:	e0fffe17 	ldw	r3,-8(fp)
  80418c:	e0bfff17 	ldw	r2,-4(fp)
  804190:	18bff51e 	bne	r3,r2,804168 <__alt_mem_onchip_mem+0xff7fc168>
    {
      *to++ = *from++;
    }
  }
}
  804194:	0001883a 	nop
  804198:	e037883a 	mov	sp,fp
  80419c:	df000017 	ldw	fp,0(sp)
  8041a0:	dec00104 	addi	sp,sp,4
  8041a4:	f800283a 	ret

008041a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8041a8:	defffe04 	addi	sp,sp,-8
  8041ac:	dfc00115 	stw	ra,4(sp)
  8041b0:	df000015 	stw	fp,0(sp)
  8041b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8041b8:	01802074 	movhi	r6,129
  8041bc:	31a78604 	addi	r6,r6,-25064
  8041c0:	01402074 	movhi	r5,129
  8041c4:	29607004 	addi	r5,r5,-32320
  8041c8:	01002074 	movhi	r4,129
  8041cc:	21278604 	addi	r4,r4,-25064
  8041d0:	08041400 	call	804140 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8041d4:	01802034 	movhi	r6,128
  8041d8:	31809104 	addi	r6,r6,580
  8041dc:	01402034 	movhi	r5,128
  8041e0:	29400804 	addi	r5,r5,32
  8041e4:	01002034 	movhi	r4,128
  8041e8:	21000804 	addi	r4,r4,32
  8041ec:	08041400 	call	804140 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8041f0:	01802074 	movhi	r6,129
  8041f4:	31a07004 	addi	r6,r6,-32320
  8041f8:	01402034 	movhi	r5,128
  8041fc:	295f8c04 	addi	r5,r5,32304
  804200:	01002034 	movhi	r4,128
  804204:	211f8c04 	addi	r4,r4,32304
  804208:	08041400 	call	804140 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80420c:	0806d380 	call	806d38 <alt_dcache_flush_all>
  alt_icache_flush_all();
  804210:	0806f200 	call	806f20 <alt_icache_flush_all>
}
  804214:	0001883a 	nop
  804218:	e037883a 	mov	sp,fp
  80421c:	dfc00117 	ldw	ra,4(sp)
  804220:	df000017 	ldw	fp,0(sp)
  804224:	dec00204 	addi	sp,sp,8
  804228:	f800283a 	ret

0080422c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80422c:	defffe04 	addi	sp,sp,-8
  804230:	dfc00115 	stw	ra,4(sp)
  804234:	df000015 	stw	fp,0(sp)
  804238:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80423c:	d0a00917 	ldw	r2,-32732(gp)
  804240:	10000326 	beq	r2,zero,804250 <alt_get_errno+0x24>
  804244:	d0a00917 	ldw	r2,-32732(gp)
  804248:	103ee83a 	callr	r2
  80424c:	00000106 	br	804254 <alt_get_errno+0x28>
  804250:	d0a72d04 	addi	r2,gp,-25420
}
  804254:	e037883a 	mov	sp,fp
  804258:	dfc00117 	ldw	ra,4(sp)
  80425c:	df000017 	ldw	fp,0(sp)
  804260:	dec00204 	addi	sp,sp,8
  804264:	f800283a 	ret

00804268 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  804268:	defff904 	addi	sp,sp,-28
  80426c:	dfc00615 	stw	ra,24(sp)
  804270:	df000515 	stw	fp,20(sp)
  804274:	df000504 	addi	fp,sp,20
  804278:	e13ffd15 	stw	r4,-12(fp)
  80427c:	e17ffe15 	stw	r5,-8(fp)
  804280:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  804284:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804288:	e0bffd17 	ldw	r2,-12(fp)
  80428c:	10000616 	blt	r2,zero,8042a8 <lseek+0x40>
  804290:	e0bffd17 	ldw	r2,-12(fp)
  804294:	10c00324 	muli	r3,r2,12
  804298:	00802074 	movhi	r2,129
  80429c:	10a28504 	addi	r2,r2,-30188
  8042a0:	1885883a 	add	r2,r3,r2
  8042a4:	00000106 	br	8042ac <lseek+0x44>
  8042a8:	0005883a 	mov	r2,zero
  8042ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8042b0:	e0bffc17 	ldw	r2,-16(fp)
  8042b4:	10001026 	beq	r2,zero,8042f8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8042b8:	e0bffc17 	ldw	r2,-16(fp)
  8042bc:	10800017 	ldw	r2,0(r2)
  8042c0:	10800717 	ldw	r2,28(r2)
  8042c4:	10000926 	beq	r2,zero,8042ec <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8042c8:	e0bffc17 	ldw	r2,-16(fp)
  8042cc:	10800017 	ldw	r2,0(r2)
  8042d0:	10800717 	ldw	r2,28(r2)
  8042d4:	e1bfff17 	ldw	r6,-4(fp)
  8042d8:	e17ffe17 	ldw	r5,-8(fp)
  8042dc:	e13ffc17 	ldw	r4,-16(fp)
  8042e0:	103ee83a 	callr	r2
  8042e4:	e0bffb15 	stw	r2,-20(fp)
  8042e8:	00000506 	br	804300 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8042ec:	00bfde84 	movi	r2,-134
  8042f0:	e0bffb15 	stw	r2,-20(fp)
  8042f4:	00000206 	br	804300 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  8042f8:	00bfebc4 	movi	r2,-81
  8042fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  804300:	e0bffb17 	ldw	r2,-20(fp)
  804304:	1000070e 	bge	r2,zero,804324 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  804308:	080422c0 	call	80422c <alt_get_errno>
  80430c:	1007883a 	mov	r3,r2
  804310:	e0bffb17 	ldw	r2,-20(fp)
  804314:	0085c83a 	sub	r2,zero,r2
  804318:	18800015 	stw	r2,0(r3)
    rc = -1;
  80431c:	00bfffc4 	movi	r2,-1
  804320:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  804324:	e0bffb17 	ldw	r2,-20(fp)
}
  804328:	e037883a 	mov	sp,fp
  80432c:	dfc00117 	ldw	ra,4(sp)
  804330:	df000017 	ldw	fp,0(sp)
  804334:	dec00204 	addi	sp,sp,8
  804338:	f800283a 	ret

0080433c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80433c:	defffd04 	addi	sp,sp,-12
  804340:	dfc00215 	stw	ra,8(sp)
  804344:	df000115 	stw	fp,4(sp)
  804348:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80434c:	0009883a 	mov	r4,zero
  804350:	08049580 	call	804958 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  804354:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  804358:	08049900 	call	804990 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80435c:	01802034 	movhi	r6,128
  804360:	319fc204 	addi	r6,r6,32520
  804364:	01402034 	movhi	r5,128
  804368:	295fc204 	addi	r5,r5,32520
  80436c:	01002034 	movhi	r4,128
  804370:	211fc204 	addi	r4,r4,32520
  804374:	08072b80 	call	8072b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  804378:	0806e600 	call	806e60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80437c:	01002034 	movhi	r4,128
  804380:	211bb004 	addi	r4,r4,28352
  804384:	0807a9c0 	call	807a9c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  804388:	d0a72f17 	ldw	r2,-25412(gp)
  80438c:	d0e73017 	ldw	r3,-25408(gp)
  804390:	d1273117 	ldw	r4,-25404(gp)
  804394:	200d883a 	mov	r6,r4
  804398:	180b883a 	mov	r5,r3
  80439c:	1009883a 	mov	r4,r2
  8043a0:	080053c0 	call	80053c <main>
  8043a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8043a8:	01000044 	movi	r4,1
  8043ac:	0803cf80 	call	803cf8 <close>
  exit (result);
  8043b0:	e13fff17 	ldw	r4,-4(fp)
  8043b4:	0807ab00 	call	807ab0 <exit>

008043b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8043b8:	defffe04 	addi	sp,sp,-8
  8043bc:	df000115 	stw	fp,4(sp)
  8043c0:	df000104 	addi	fp,sp,4
  8043c4:	e13fff15 	stw	r4,-4(fp)
}
  8043c8:	0001883a 	nop
  8043cc:	e037883a 	mov	sp,fp
  8043d0:	df000017 	ldw	fp,0(sp)
  8043d4:	dec00104 	addi	sp,sp,4
  8043d8:	f800283a 	ret

008043dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8043dc:	defffe04 	addi	sp,sp,-8
  8043e0:	df000115 	stw	fp,4(sp)
  8043e4:	df000104 	addi	fp,sp,4
  8043e8:	e13fff15 	stw	r4,-4(fp)
}
  8043ec:	0001883a 	nop
  8043f0:	e037883a 	mov	sp,fp
  8043f4:	df000017 	ldw	fp,0(sp)
  8043f8:	dec00104 	addi	sp,sp,4
  8043fc:	f800283a 	ret

00804400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804400:	defffe04 	addi	sp,sp,-8
  804404:	dfc00115 	stw	ra,4(sp)
  804408:	df000015 	stw	fp,0(sp)
  80440c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804410:	d0a00917 	ldw	r2,-32732(gp)
  804414:	10000326 	beq	r2,zero,804424 <alt_get_errno+0x24>
  804418:	d0a00917 	ldw	r2,-32732(gp)
  80441c:	103ee83a 	callr	r2
  804420:	00000106 	br	804428 <alt_get_errno+0x28>
  804424:	d0a72d04 	addi	r2,gp,-25420
}
  804428:	e037883a 	mov	sp,fp
  80442c:	dfc00117 	ldw	ra,4(sp)
  804430:	df000017 	ldw	fp,0(sp)
  804434:	dec00204 	addi	sp,sp,8
  804438:	f800283a 	ret

0080443c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80443c:	defff904 	addi	sp,sp,-28
  804440:	dfc00615 	stw	ra,24(sp)
  804444:	df000515 	stw	fp,20(sp)
  804448:	df000504 	addi	fp,sp,20
  80444c:	e13ffd15 	stw	r4,-12(fp)
  804450:	e17ffe15 	stw	r5,-8(fp)
  804454:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804458:	e0bffd17 	ldw	r2,-12(fp)
  80445c:	10000616 	blt	r2,zero,804478 <read+0x3c>
  804460:	e0bffd17 	ldw	r2,-12(fp)
  804464:	10c00324 	muli	r3,r2,12
  804468:	00802074 	movhi	r2,129
  80446c:	10a28504 	addi	r2,r2,-30188
  804470:	1885883a 	add	r2,r3,r2
  804474:	00000106 	br	80447c <read+0x40>
  804478:	0005883a 	mov	r2,zero
  80447c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  804480:	e0bffb17 	ldw	r2,-20(fp)
  804484:	10002226 	beq	r2,zero,804510 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  804488:	e0bffb17 	ldw	r2,-20(fp)
  80448c:	10800217 	ldw	r2,8(r2)
  804490:	108000cc 	andi	r2,r2,3
  804494:	10800060 	cmpeqi	r2,r2,1
  804498:	1000181e 	bne	r2,zero,8044fc <read+0xc0>
        (fd->dev->read))
  80449c:	e0bffb17 	ldw	r2,-20(fp)
  8044a0:	10800017 	ldw	r2,0(r2)
  8044a4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8044a8:	10001426 	beq	r2,zero,8044fc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8044ac:	e0bffb17 	ldw	r2,-20(fp)
  8044b0:	10800017 	ldw	r2,0(r2)
  8044b4:	10800517 	ldw	r2,20(r2)
  8044b8:	e0ffff17 	ldw	r3,-4(fp)
  8044bc:	180d883a 	mov	r6,r3
  8044c0:	e17ffe17 	ldw	r5,-8(fp)
  8044c4:	e13ffb17 	ldw	r4,-20(fp)
  8044c8:	103ee83a 	callr	r2
  8044cc:	e0bffc15 	stw	r2,-16(fp)
  8044d0:	e0bffc17 	ldw	r2,-16(fp)
  8044d4:	1000070e 	bge	r2,zero,8044f4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  8044d8:	08044000 	call	804400 <alt_get_errno>
  8044dc:	1007883a 	mov	r3,r2
  8044e0:	e0bffc17 	ldw	r2,-16(fp)
  8044e4:	0085c83a 	sub	r2,zero,r2
  8044e8:	18800015 	stw	r2,0(r3)
          return -1;
  8044ec:	00bfffc4 	movi	r2,-1
  8044f0:	00000c06 	br	804524 <read+0xe8>
        }
        return rval;
  8044f4:	e0bffc17 	ldw	r2,-16(fp)
  8044f8:	00000a06 	br	804524 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8044fc:	08044000 	call	804400 <alt_get_errno>
  804500:	1007883a 	mov	r3,r2
  804504:	00800344 	movi	r2,13
  804508:	18800015 	stw	r2,0(r3)
  80450c:	00000406 	br	804520 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  804510:	08044000 	call	804400 <alt_get_errno>
  804514:	1007883a 	mov	r3,r2
  804518:	00801444 	movi	r2,81
  80451c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  804520:	00bfffc4 	movi	r2,-1
}
  804524:	e037883a 	mov	sp,fp
  804528:	dfc00117 	ldw	ra,4(sp)
  80452c:	df000017 	ldw	fp,0(sp)
  804530:	dec00204 	addi	sp,sp,8
  804534:	f800283a 	ret

00804538 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  804538:	defffe04 	addi	sp,sp,-8
  80453c:	df000115 	stw	fp,4(sp)
  804540:	df000104 	addi	fp,sp,4
  804544:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  804548:	e0bfff17 	ldw	r2,-4(fp)
  80454c:	108000d0 	cmplti	r2,r2,3
  804550:	10000d1e 	bne	r2,zero,804588 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  804554:	00802074 	movhi	r2,129
  804558:	10a28504 	addi	r2,r2,-30188
  80455c:	e0ffff17 	ldw	r3,-4(fp)
  804560:	18c00324 	muli	r3,r3,12
  804564:	10c5883a 	add	r2,r2,r3
  804568:	10800204 	addi	r2,r2,8
  80456c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  804570:	00802074 	movhi	r2,129
  804574:	10a28504 	addi	r2,r2,-30188
  804578:	e0ffff17 	ldw	r3,-4(fp)
  80457c:	18c00324 	muli	r3,r3,12
  804580:	10c5883a 	add	r2,r2,r3
  804584:	10000015 	stw	zero,0(r2)
  }
}
  804588:	0001883a 	nop
  80458c:	e037883a 	mov	sp,fp
  804590:	df000017 	ldw	fp,0(sp)
  804594:	dec00104 	addi	sp,sp,4
  804598:	f800283a 	ret

0080459c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80459c:	defff904 	addi	sp,sp,-28
  8045a0:	df000615 	stw	fp,24(sp)
  8045a4:	df000604 	addi	fp,sp,24
  8045a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8045ac:	0005303a 	rdctl	r2,status
  8045b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8045b4:	e0fffe17 	ldw	r3,-8(fp)
  8045b8:	00bfff84 	movi	r2,-2
  8045bc:	1884703a 	and	r2,r3,r2
  8045c0:	1001703a 	wrctl	status,r2
  
  return context;
  8045c4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8045c8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8045cc:	d0a00b17 	ldw	r2,-32724(gp)
  8045d0:	10c000c4 	addi	r3,r2,3
  8045d4:	00bfff04 	movi	r2,-4
  8045d8:	1884703a 	and	r2,r3,r2
  8045dc:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8045e0:	d0e00b17 	ldw	r3,-32724(gp)
  8045e4:	e0bfff17 	ldw	r2,-4(fp)
  8045e8:	1887883a 	add	r3,r3,r2
  8045ec:	00804034 	movhi	r2,256
  8045f0:	10800004 	addi	r2,r2,0
  8045f4:	10c0062e 	bgeu	r2,r3,804610 <sbrk+0x74>
  8045f8:	e0bffb17 	ldw	r2,-20(fp)
  8045fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804600:	e0bffa17 	ldw	r2,-24(fp)
  804604:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  804608:	00bfffc4 	movi	r2,-1
  80460c:	00000b06 	br	80463c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  804610:	d0a00b17 	ldw	r2,-32724(gp)
  804614:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  804618:	d0e00b17 	ldw	r3,-32724(gp)
  80461c:	e0bfff17 	ldw	r2,-4(fp)
  804620:	1885883a 	add	r2,r3,r2
  804624:	d0a00b15 	stw	r2,-32724(gp)
  804628:	e0bffb17 	ldw	r2,-20(fp)
  80462c:	e0bffc15 	stw	r2,-16(fp)
  804630:	e0bffc17 	ldw	r2,-16(fp)
  804634:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  804638:	e0bffd17 	ldw	r2,-12(fp)
} 
  80463c:	e037883a 	mov	sp,fp
  804640:	df000017 	ldw	fp,0(sp)
  804644:	dec00104 	addi	sp,sp,4
  804648:	f800283a 	ret

0080464c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80464c:	defffa04 	addi	sp,sp,-24
  804650:	df000515 	stw	fp,20(sp)
  804654:	df000504 	addi	fp,sp,20
  804658:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80465c:	0005303a 	rdctl	r2,status
  804660:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804664:	e0fffc17 	ldw	r3,-16(fp)
  804668:	00bfff84 	movi	r2,-2
  80466c:	1884703a 	and	r2,r3,r2
  804670:	1001703a 	wrctl	status,r2
  
  return context;
  804674:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  804678:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80467c:	e0bfff17 	ldw	r2,-4(fp)
  804680:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  804684:	e0bffd17 	ldw	r2,-12(fp)
  804688:	10800017 	ldw	r2,0(r2)
  80468c:	e0fffd17 	ldw	r3,-12(fp)
  804690:	18c00117 	ldw	r3,4(r3)
  804694:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  804698:	e0bffd17 	ldw	r2,-12(fp)
  80469c:	10800117 	ldw	r2,4(r2)
  8046a0:	e0fffd17 	ldw	r3,-12(fp)
  8046a4:	18c00017 	ldw	r3,0(r3)
  8046a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8046ac:	e0bffd17 	ldw	r2,-12(fp)
  8046b0:	e0fffd17 	ldw	r3,-12(fp)
  8046b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8046b8:	e0bffd17 	ldw	r2,-12(fp)
  8046bc:	e0fffd17 	ldw	r3,-12(fp)
  8046c0:	10c00015 	stw	r3,0(r2)
  8046c4:	e0bffb17 	ldw	r2,-20(fp)
  8046c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8046cc:	e0bffe17 	ldw	r2,-8(fp)
  8046d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8046d4:	0001883a 	nop
  8046d8:	e037883a 	mov	sp,fp
  8046dc:	df000017 	ldw	fp,0(sp)
  8046e0:	dec00104 	addi	sp,sp,4
  8046e4:	f800283a 	ret

008046e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8046e8:	defffb04 	addi	sp,sp,-20
  8046ec:	dfc00415 	stw	ra,16(sp)
  8046f0:	df000315 	stw	fp,12(sp)
  8046f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8046f8:	d0a00c17 	ldw	r2,-32720(gp)
  8046fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  804700:	d0a73317 	ldw	r2,-25396(gp)
  804704:	10800044 	addi	r2,r2,1
  804708:	d0a73315 	stw	r2,-25396(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80470c:	00002e06 	br	8047c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  804710:	e0bffd17 	ldw	r2,-12(fp)
  804714:	10800017 	ldw	r2,0(r2)
  804718:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80471c:	e0bffd17 	ldw	r2,-12(fp)
  804720:	10800403 	ldbu	r2,16(r2)
  804724:	10803fcc 	andi	r2,r2,255
  804728:	10000426 	beq	r2,zero,80473c <alt_tick+0x54>
  80472c:	d0a73317 	ldw	r2,-25396(gp)
  804730:	1000021e 	bne	r2,zero,80473c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  804734:	e0bffd17 	ldw	r2,-12(fp)
  804738:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80473c:	e0bffd17 	ldw	r2,-12(fp)
  804740:	10800217 	ldw	r2,8(r2)
  804744:	d0e73317 	ldw	r3,-25396(gp)
  804748:	18801d36 	bltu	r3,r2,8047c0 <alt_tick+0xd8>
  80474c:	e0bffd17 	ldw	r2,-12(fp)
  804750:	10800403 	ldbu	r2,16(r2)
  804754:	10803fcc 	andi	r2,r2,255
  804758:	1000191e 	bne	r2,zero,8047c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80475c:	e0bffd17 	ldw	r2,-12(fp)
  804760:	10800317 	ldw	r2,12(r2)
  804764:	e0fffd17 	ldw	r3,-12(fp)
  804768:	18c00517 	ldw	r3,20(r3)
  80476c:	1809883a 	mov	r4,r3
  804770:	103ee83a 	callr	r2
  804774:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  804778:	e0bfff17 	ldw	r2,-4(fp)
  80477c:	1000031e 	bne	r2,zero,80478c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  804780:	e13ffd17 	ldw	r4,-12(fp)
  804784:	080464c0 	call	80464c <alt_alarm_stop>
  804788:	00000d06 	br	8047c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80478c:	e0bffd17 	ldw	r2,-12(fp)
  804790:	10c00217 	ldw	r3,8(r2)
  804794:	e0bfff17 	ldw	r2,-4(fp)
  804798:	1887883a 	add	r3,r3,r2
  80479c:	e0bffd17 	ldw	r2,-12(fp)
  8047a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8047a4:	e0bffd17 	ldw	r2,-12(fp)
  8047a8:	10c00217 	ldw	r3,8(r2)
  8047ac:	d0a73317 	ldw	r2,-25396(gp)
  8047b0:	1880032e 	bgeu	r3,r2,8047c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8047b4:	e0bffd17 	ldw	r2,-12(fp)
  8047b8:	00c00044 	movi	r3,1
  8047bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8047c0:	e0bffe17 	ldw	r2,-8(fp)
  8047c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8047c8:	e0fffd17 	ldw	r3,-12(fp)
  8047cc:	d0a00c04 	addi	r2,gp,-32720
  8047d0:	18bfcf1e 	bne	r3,r2,804710 <__alt_mem_onchip_mem+0xff7fc710>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8047d4:	0001883a 	nop
}
  8047d8:	0001883a 	nop
  8047dc:	e037883a 	mov	sp,fp
  8047e0:	dfc00117 	ldw	ra,4(sp)
  8047e4:	df000017 	ldw	fp,0(sp)
  8047e8:	dec00204 	addi	sp,sp,8
  8047ec:	f800283a 	ret

008047f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8047f0:	defffe04 	addi	sp,sp,-8
  8047f4:	dfc00115 	stw	ra,4(sp)
  8047f8:	df000015 	stw	fp,0(sp)
  8047fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804800:	d0a00917 	ldw	r2,-32732(gp)
  804804:	10000326 	beq	r2,zero,804814 <alt_get_errno+0x24>
  804808:	d0a00917 	ldw	r2,-32732(gp)
  80480c:	103ee83a 	callr	r2
  804810:	00000106 	br	804818 <alt_get_errno+0x28>
  804814:	d0a72d04 	addi	r2,gp,-25420
}
  804818:	e037883a 	mov	sp,fp
  80481c:	dfc00117 	ldw	ra,4(sp)
  804820:	df000017 	ldw	fp,0(sp)
  804824:	dec00204 	addi	sp,sp,8
  804828:	f800283a 	ret

0080482c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80482c:	defff904 	addi	sp,sp,-28
  804830:	dfc00615 	stw	ra,24(sp)
  804834:	df000515 	stw	fp,20(sp)
  804838:	df000504 	addi	fp,sp,20
  80483c:	e13ffd15 	stw	r4,-12(fp)
  804840:	e17ffe15 	stw	r5,-8(fp)
  804844:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804848:	e0bffd17 	ldw	r2,-12(fp)
  80484c:	10000616 	blt	r2,zero,804868 <write+0x3c>
  804850:	e0bffd17 	ldw	r2,-12(fp)
  804854:	10c00324 	muli	r3,r2,12
  804858:	00802074 	movhi	r2,129
  80485c:	10a28504 	addi	r2,r2,-30188
  804860:	1885883a 	add	r2,r3,r2
  804864:	00000106 	br	80486c <write+0x40>
  804868:	0005883a 	mov	r2,zero
  80486c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  804870:	e0bffb17 	ldw	r2,-20(fp)
  804874:	10002126 	beq	r2,zero,8048fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  804878:	e0bffb17 	ldw	r2,-20(fp)
  80487c:	10800217 	ldw	r2,8(r2)
  804880:	108000cc 	andi	r2,r2,3
  804884:	10001826 	beq	r2,zero,8048e8 <write+0xbc>
  804888:	e0bffb17 	ldw	r2,-20(fp)
  80488c:	10800017 	ldw	r2,0(r2)
  804890:	10800617 	ldw	r2,24(r2)
  804894:	10001426 	beq	r2,zero,8048e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  804898:	e0bffb17 	ldw	r2,-20(fp)
  80489c:	10800017 	ldw	r2,0(r2)
  8048a0:	10800617 	ldw	r2,24(r2)
  8048a4:	e0ffff17 	ldw	r3,-4(fp)
  8048a8:	180d883a 	mov	r6,r3
  8048ac:	e17ffe17 	ldw	r5,-8(fp)
  8048b0:	e13ffb17 	ldw	r4,-20(fp)
  8048b4:	103ee83a 	callr	r2
  8048b8:	e0bffc15 	stw	r2,-16(fp)
  8048bc:	e0bffc17 	ldw	r2,-16(fp)
  8048c0:	1000070e 	bge	r2,zero,8048e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8048c4:	08047f00 	call	8047f0 <alt_get_errno>
  8048c8:	1007883a 	mov	r3,r2
  8048cc:	e0bffc17 	ldw	r2,-16(fp)
  8048d0:	0085c83a 	sub	r2,zero,r2
  8048d4:	18800015 	stw	r2,0(r3)
        return -1;
  8048d8:	00bfffc4 	movi	r2,-1
  8048dc:	00000c06 	br	804910 <write+0xe4>
      }
      return rval;
  8048e0:	e0bffc17 	ldw	r2,-16(fp)
  8048e4:	00000a06 	br	804910 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8048e8:	08047f00 	call	8047f0 <alt_get_errno>
  8048ec:	1007883a 	mov	r3,r2
  8048f0:	00800344 	movi	r2,13
  8048f4:	18800015 	stw	r2,0(r3)
  8048f8:	00000406 	br	80490c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8048fc:	08047f00 	call	8047f0 <alt_get_errno>
  804900:	1007883a 	mov	r3,r2
  804904:	00801444 	movi	r2,81
  804908:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80490c:	00bfffc4 	movi	r2,-1
}
  804910:	e037883a 	mov	sp,fp
  804914:	dfc00117 	ldw	ra,4(sp)
  804918:	df000017 	ldw	fp,0(sp)
  80491c:	dec00204 	addi	sp,sp,8
  804920:	f800283a 	ret

00804924 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  804924:	defffd04 	addi	sp,sp,-12
  804928:	dfc00215 	stw	ra,8(sp)
  80492c:	df000115 	stw	fp,4(sp)
  804930:	df000104 	addi	fp,sp,4
  804934:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  804938:	d1600604 	addi	r5,gp,-32744
  80493c:	e13fff17 	ldw	r4,-4(fp)
  804940:	0806dbc0 	call	806dbc <alt_dev_llist_insert>
}
  804944:	e037883a 	mov	sp,fp
  804948:	dfc00117 	ldw	ra,4(sp)
  80494c:	df000017 	ldw	fp,0(sp)
  804950:	dec00204 	addi	sp,sp,8
  804954:	f800283a 	ret

00804958 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  804958:	defffd04 	addi	sp,sp,-12
  80495c:	dfc00215 	stw	ra,8(sp)
  804960:	df000115 	stw	fp,4(sp)
  804964:	df000104 	addi	fp,sp,4
  804968:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80496c:	08075b80 	call	8075b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  804970:	00800044 	movi	r2,1
  804974:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  804978:	0001883a 	nop
  80497c:	e037883a 	mov	sp,fp
  804980:	dfc00117 	ldw	ra,4(sp)
  804984:	df000017 	ldw	fp,0(sp)
  804988:	dec00204 	addi	sp,sp,8
  80498c:	f800283a 	ret

00804990 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  804990:	defffe04 	addi	sp,sp,-8
  804994:	dfc00115 	stw	ra,4(sp)
  804998:	df000015 	stw	fp,0(sp)
  80499c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8049a0:	01c0fa04 	movi	r7,1000
  8049a4:	01800084 	movi	r6,2
  8049a8:	000b883a 	mov	r5,zero
  8049ac:	01004074 	movhi	r4,257
  8049b0:	21040804 	addi	r4,r4,4128
  8049b4:	08063e40 	call	8063e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8049b8:	01800044 	movi	r6,1
  8049bc:	000b883a 	mov	r5,zero
  8049c0:	01002074 	movhi	r4,129
  8049c4:	2122ef04 	addi	r4,r4,-29764
  8049c8:	0804b8c0 	call	804b8c <altera_avalon_jtag_uart_init>
  8049cc:	01002074 	movhi	r4,129
  8049d0:	2122e504 	addi	r4,r4,-29804
  8049d4:	08049240 	call	804924 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8049d8:	01002074 	movhi	r4,129
  8049dc:	21270704 	addi	r4,r4,-25572
  8049e0:	08061d80 	call	8061d8 <altera_avalon_lcd_16207_init>
  8049e4:	01002074 	movhi	r4,129
  8049e8:	2126fd04 	addi	r4,r4,-25612
  8049ec:	08049240 	call	804924 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8049f0:	000d883a 	mov	r6,zero
  8049f4:	000b883a 	mov	r5,zero
  8049f8:	01002074 	movhi	r4,129
  8049fc:	21274f04 	addi	r4,r4,-25284
  804a00:	08065700 	call	806570 <altera_avalon_uart_init>
  804a04:	01002074 	movhi	r4,129
  804a08:	21274504 	addi	r4,r4,-25324
  804a0c:	08049240 	call	804924 <alt_dev_reg>
}
  804a10:	0001883a 	nop
  804a14:	e037883a 	mov	sp,fp
  804a18:	dfc00117 	ldw	ra,4(sp)
  804a1c:	df000017 	ldw	fp,0(sp)
  804a20:	dec00204 	addi	sp,sp,8
  804a24:	f800283a 	ret

00804a28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  804a28:	defffa04 	addi	sp,sp,-24
  804a2c:	dfc00515 	stw	ra,20(sp)
  804a30:	df000415 	stw	fp,16(sp)
  804a34:	df000404 	addi	fp,sp,16
  804a38:	e13ffd15 	stw	r4,-12(fp)
  804a3c:	e17ffe15 	stw	r5,-8(fp)
  804a40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804a44:	e0bffd17 	ldw	r2,-12(fp)
  804a48:	10800017 	ldw	r2,0(r2)
  804a4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  804a50:	e0bffc17 	ldw	r2,-16(fp)
  804a54:	10c00a04 	addi	r3,r2,40
  804a58:	e0bffd17 	ldw	r2,-12(fp)
  804a5c:	10800217 	ldw	r2,8(r2)
  804a60:	100f883a 	mov	r7,r2
  804a64:	e1bfff17 	ldw	r6,-4(fp)
  804a68:	e17ffe17 	ldw	r5,-8(fp)
  804a6c:	1809883a 	mov	r4,r3
  804a70:	08050500 	call	805050 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  804a74:	e037883a 	mov	sp,fp
  804a78:	dfc00117 	ldw	ra,4(sp)
  804a7c:	df000017 	ldw	fp,0(sp)
  804a80:	dec00204 	addi	sp,sp,8
  804a84:	f800283a 	ret

00804a88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  804a88:	defffa04 	addi	sp,sp,-24
  804a8c:	dfc00515 	stw	ra,20(sp)
  804a90:	df000415 	stw	fp,16(sp)
  804a94:	df000404 	addi	fp,sp,16
  804a98:	e13ffd15 	stw	r4,-12(fp)
  804a9c:	e17ffe15 	stw	r5,-8(fp)
  804aa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804aa4:	e0bffd17 	ldw	r2,-12(fp)
  804aa8:	10800017 	ldw	r2,0(r2)
  804aac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  804ab0:	e0bffc17 	ldw	r2,-16(fp)
  804ab4:	10c00a04 	addi	r3,r2,40
  804ab8:	e0bffd17 	ldw	r2,-12(fp)
  804abc:	10800217 	ldw	r2,8(r2)
  804ac0:	100f883a 	mov	r7,r2
  804ac4:	e1bfff17 	ldw	r6,-4(fp)
  804ac8:	e17ffe17 	ldw	r5,-8(fp)
  804acc:	1809883a 	mov	r4,r3
  804ad0:	080526c0 	call	80526c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  804ad4:	e037883a 	mov	sp,fp
  804ad8:	dfc00117 	ldw	ra,4(sp)
  804adc:	df000017 	ldw	fp,0(sp)
  804ae0:	dec00204 	addi	sp,sp,8
  804ae4:	f800283a 	ret

00804ae8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  804ae8:	defffc04 	addi	sp,sp,-16
  804aec:	dfc00315 	stw	ra,12(sp)
  804af0:	df000215 	stw	fp,8(sp)
  804af4:	df000204 	addi	fp,sp,8
  804af8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804afc:	e0bfff17 	ldw	r2,-4(fp)
  804b00:	10800017 	ldw	r2,0(r2)
  804b04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  804b08:	e0bffe17 	ldw	r2,-8(fp)
  804b0c:	10c00a04 	addi	r3,r2,40
  804b10:	e0bfff17 	ldw	r2,-4(fp)
  804b14:	10800217 	ldw	r2,8(r2)
  804b18:	100b883a 	mov	r5,r2
  804b1c:	1809883a 	mov	r4,r3
  804b20:	0804ef80 	call	804ef8 <altera_avalon_jtag_uart_close>
}
  804b24:	e037883a 	mov	sp,fp
  804b28:	dfc00117 	ldw	ra,4(sp)
  804b2c:	df000017 	ldw	fp,0(sp)
  804b30:	dec00204 	addi	sp,sp,8
  804b34:	f800283a 	ret

00804b38 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  804b38:	defffa04 	addi	sp,sp,-24
  804b3c:	dfc00515 	stw	ra,20(sp)
  804b40:	df000415 	stw	fp,16(sp)
  804b44:	df000404 	addi	fp,sp,16
  804b48:	e13ffd15 	stw	r4,-12(fp)
  804b4c:	e17ffe15 	stw	r5,-8(fp)
  804b50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  804b54:	e0bffd17 	ldw	r2,-12(fp)
  804b58:	10800017 	ldw	r2,0(r2)
  804b5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  804b60:	e0bffc17 	ldw	r2,-16(fp)
  804b64:	10800a04 	addi	r2,r2,40
  804b68:	e1bfff17 	ldw	r6,-4(fp)
  804b6c:	e17ffe17 	ldw	r5,-8(fp)
  804b70:	1009883a 	mov	r4,r2
  804b74:	0804f600 	call	804f60 <altera_avalon_jtag_uart_ioctl>
}
  804b78:	e037883a 	mov	sp,fp
  804b7c:	dfc00117 	ldw	ra,4(sp)
  804b80:	df000017 	ldw	fp,0(sp)
  804b84:	dec00204 	addi	sp,sp,8
  804b88:	f800283a 	ret

00804b8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  804b8c:	defffa04 	addi	sp,sp,-24
  804b90:	dfc00515 	stw	ra,20(sp)
  804b94:	df000415 	stw	fp,16(sp)
  804b98:	df000404 	addi	fp,sp,16
  804b9c:	e13ffd15 	stw	r4,-12(fp)
  804ba0:	e17ffe15 	stw	r5,-8(fp)
  804ba4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804ba8:	e0bffd17 	ldw	r2,-12(fp)
  804bac:	00c00044 	movi	r3,1
  804bb0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  804bb4:	e0bffd17 	ldw	r2,-12(fp)
  804bb8:	10800017 	ldw	r2,0(r2)
  804bbc:	10800104 	addi	r2,r2,4
  804bc0:	1007883a 	mov	r3,r2
  804bc4:	e0bffd17 	ldw	r2,-12(fp)
  804bc8:	10800817 	ldw	r2,32(r2)
  804bcc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  804bd0:	e0bffe17 	ldw	r2,-8(fp)
  804bd4:	e0ffff17 	ldw	r3,-4(fp)
  804bd8:	d8000015 	stw	zero,0(sp)
  804bdc:	e1fffd17 	ldw	r7,-12(fp)
  804be0:	01802034 	movhi	r6,128
  804be4:	31931304 	addi	r6,r6,19532
  804be8:	180b883a 	mov	r5,r3
  804bec:	1009883a 	mov	r4,r2
  804bf0:	0806f540 	call	806f54 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  804bf4:	e0bffd17 	ldw	r2,-12(fp)
  804bf8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  804bfc:	e0bffd17 	ldw	r2,-12(fp)
  804c00:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804c04:	d0e73217 	ldw	r3,-25400(gp)
  804c08:	e1fffd17 	ldw	r7,-12(fp)
  804c0c:	01802034 	movhi	r6,128
  804c10:	31939604 	addi	r6,r6,20056
  804c14:	180b883a 	mov	r5,r3
  804c18:	1009883a 	mov	r4,r2
  804c1c:	0803b900 	call	803b90 <alt_alarm_start>
  804c20:	1000040e 	bge	r2,zero,804c34 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  804c24:	e0fffd17 	ldw	r3,-12(fp)
  804c28:	00a00034 	movhi	r2,32768
  804c2c:	10bfffc4 	addi	r2,r2,-1
  804c30:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  804c34:	0001883a 	nop
  804c38:	e037883a 	mov	sp,fp
  804c3c:	dfc00117 	ldw	ra,4(sp)
  804c40:	df000017 	ldw	fp,0(sp)
  804c44:	dec00204 	addi	sp,sp,8
  804c48:	f800283a 	ret

00804c4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  804c4c:	defff804 	addi	sp,sp,-32
  804c50:	df000715 	stw	fp,28(sp)
  804c54:	df000704 	addi	fp,sp,28
  804c58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  804c5c:	e0bfff17 	ldw	r2,-4(fp)
  804c60:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  804c64:	e0bffb17 	ldw	r2,-20(fp)
  804c68:	10800017 	ldw	r2,0(r2)
  804c6c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804c70:	e0bffc17 	ldw	r2,-16(fp)
  804c74:	10800104 	addi	r2,r2,4
  804c78:	10800037 	ldwio	r2,0(r2)
  804c7c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  804c80:	e0bffd17 	ldw	r2,-12(fp)
  804c84:	1080c00c 	andi	r2,r2,768
  804c88:	10006d26 	beq	r2,zero,804e40 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  804c8c:	e0bffd17 	ldw	r2,-12(fp)
  804c90:	1080400c 	andi	r2,r2,256
  804c94:	10003526 	beq	r2,zero,804d6c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  804c98:	00800074 	movhi	r2,1
  804c9c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804ca0:	e0bffb17 	ldw	r2,-20(fp)
  804ca4:	10800a17 	ldw	r2,40(r2)
  804ca8:	10800044 	addi	r2,r2,1
  804cac:	1081ffcc 	andi	r2,r2,2047
  804cb0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  804cb4:	e0bffb17 	ldw	r2,-20(fp)
  804cb8:	10c00b17 	ldw	r3,44(r2)
  804cbc:	e0bffe17 	ldw	r2,-8(fp)
  804cc0:	18801526 	beq	r3,r2,804d18 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804cc4:	e0bffc17 	ldw	r2,-16(fp)
  804cc8:	10800037 	ldwio	r2,0(r2)
  804ccc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  804cd0:	e0bff917 	ldw	r2,-28(fp)
  804cd4:	10a0000c 	andi	r2,r2,32768
  804cd8:	10001126 	beq	r2,zero,804d20 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804cdc:	e0bffb17 	ldw	r2,-20(fp)
  804ce0:	10800a17 	ldw	r2,40(r2)
  804ce4:	e0fff917 	ldw	r3,-28(fp)
  804ce8:	1809883a 	mov	r4,r3
  804cec:	e0fffb17 	ldw	r3,-20(fp)
  804cf0:	1885883a 	add	r2,r3,r2
  804cf4:	10800e04 	addi	r2,r2,56
  804cf8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804cfc:	e0bffb17 	ldw	r2,-20(fp)
  804d00:	10800a17 	ldw	r2,40(r2)
  804d04:	10800044 	addi	r2,r2,1
  804d08:	10c1ffcc 	andi	r3,r2,2047
  804d0c:	e0bffb17 	ldw	r2,-20(fp)
  804d10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  804d14:	003fe206 	br	804ca0 <__alt_mem_onchip_mem+0xff7fcca0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  804d18:	0001883a 	nop
  804d1c:	00000106 	br	804d24 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  804d20:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  804d24:	e0bff917 	ldw	r2,-28(fp)
  804d28:	10bfffec 	andhi	r2,r2,65535
  804d2c:	10000f26 	beq	r2,zero,804d6c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804d30:	e0bffb17 	ldw	r2,-20(fp)
  804d34:	10c00817 	ldw	r3,32(r2)
  804d38:	00bfff84 	movi	r2,-2
  804d3c:	1886703a 	and	r3,r3,r2
  804d40:	e0bffb17 	ldw	r2,-20(fp)
  804d44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  804d48:	e0bffc17 	ldw	r2,-16(fp)
  804d4c:	10800104 	addi	r2,r2,4
  804d50:	1007883a 	mov	r3,r2
  804d54:	e0bffb17 	ldw	r2,-20(fp)
  804d58:	10800817 	ldw	r2,32(r2)
  804d5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804d60:	e0bffc17 	ldw	r2,-16(fp)
  804d64:	10800104 	addi	r2,r2,4
  804d68:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  804d6c:	e0bffd17 	ldw	r2,-12(fp)
  804d70:	1080800c 	andi	r2,r2,512
  804d74:	103fbe26 	beq	r2,zero,804c70 <__alt_mem_onchip_mem+0xff7fcc70>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  804d78:	e0bffd17 	ldw	r2,-12(fp)
  804d7c:	1004d43a 	srli	r2,r2,16
  804d80:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  804d84:	00001406 	br	804dd8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  804d88:	e0bffc17 	ldw	r2,-16(fp)
  804d8c:	e0fffb17 	ldw	r3,-20(fp)
  804d90:	18c00d17 	ldw	r3,52(r3)
  804d94:	e13ffb17 	ldw	r4,-20(fp)
  804d98:	20c7883a 	add	r3,r4,r3
  804d9c:	18c20e04 	addi	r3,r3,2104
  804da0:	18c00003 	ldbu	r3,0(r3)
  804da4:	18c03fcc 	andi	r3,r3,255
  804da8:	18c0201c 	xori	r3,r3,128
  804dac:	18ffe004 	addi	r3,r3,-128
  804db0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804db4:	e0bffb17 	ldw	r2,-20(fp)
  804db8:	10800d17 	ldw	r2,52(r2)
  804dbc:	10800044 	addi	r2,r2,1
  804dc0:	10c1ffcc 	andi	r3,r2,2047
  804dc4:	e0bffb17 	ldw	r2,-20(fp)
  804dc8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  804dcc:	e0bffa17 	ldw	r2,-24(fp)
  804dd0:	10bfffc4 	addi	r2,r2,-1
  804dd4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  804dd8:	e0bffa17 	ldw	r2,-24(fp)
  804ddc:	10000526 	beq	r2,zero,804df4 <altera_avalon_jtag_uart_irq+0x1a8>
  804de0:	e0bffb17 	ldw	r2,-20(fp)
  804de4:	10c00d17 	ldw	r3,52(r2)
  804de8:	e0bffb17 	ldw	r2,-20(fp)
  804dec:	10800c17 	ldw	r2,48(r2)
  804df0:	18bfe51e 	bne	r3,r2,804d88 <__alt_mem_onchip_mem+0xff7fcd88>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  804df4:	e0bffa17 	ldw	r2,-24(fp)
  804df8:	103f9d26 	beq	r2,zero,804c70 <__alt_mem_onchip_mem+0xff7fcc70>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804dfc:	e0bffb17 	ldw	r2,-20(fp)
  804e00:	10c00817 	ldw	r3,32(r2)
  804e04:	00bfff44 	movi	r2,-3
  804e08:	1886703a 	and	r3,r3,r2
  804e0c:	e0bffb17 	ldw	r2,-20(fp)
  804e10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804e14:	e0bffb17 	ldw	r2,-20(fp)
  804e18:	10800017 	ldw	r2,0(r2)
  804e1c:	10800104 	addi	r2,r2,4
  804e20:	1007883a 	mov	r3,r2
  804e24:	e0bffb17 	ldw	r2,-20(fp)
  804e28:	10800817 	ldw	r2,32(r2)
  804e2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804e30:	e0bffc17 	ldw	r2,-16(fp)
  804e34:	10800104 	addi	r2,r2,4
  804e38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  804e3c:	003f8c06 	br	804c70 <__alt_mem_onchip_mem+0xff7fcc70>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  804e40:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  804e44:	0001883a 	nop
  804e48:	e037883a 	mov	sp,fp
  804e4c:	df000017 	ldw	fp,0(sp)
  804e50:	dec00104 	addi	sp,sp,4
  804e54:	f800283a 	ret

00804e58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  804e58:	defff804 	addi	sp,sp,-32
  804e5c:	df000715 	stw	fp,28(sp)
  804e60:	df000704 	addi	fp,sp,28
  804e64:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  804e68:	e0bffb17 	ldw	r2,-20(fp)
  804e6c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  804e70:	e0bff917 	ldw	r2,-28(fp)
  804e74:	10800017 	ldw	r2,0(r2)
  804e78:	10800104 	addi	r2,r2,4
  804e7c:	10800037 	ldwio	r2,0(r2)
  804e80:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  804e84:	e0bffa17 	ldw	r2,-24(fp)
  804e88:	1081000c 	andi	r2,r2,1024
  804e8c:	10000b26 	beq	r2,zero,804ebc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  804e90:	e0bff917 	ldw	r2,-28(fp)
  804e94:	10800017 	ldw	r2,0(r2)
  804e98:	10800104 	addi	r2,r2,4
  804e9c:	1007883a 	mov	r3,r2
  804ea0:	e0bff917 	ldw	r2,-28(fp)
  804ea4:	10800817 	ldw	r2,32(r2)
  804ea8:	10810014 	ori	r2,r2,1024
  804eac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  804eb0:	e0bff917 	ldw	r2,-28(fp)
  804eb4:	10000915 	stw	zero,36(r2)
  804eb8:	00000a06 	br	804ee4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  804ebc:	e0bff917 	ldw	r2,-28(fp)
  804ec0:	10c00917 	ldw	r3,36(r2)
  804ec4:	00a00034 	movhi	r2,32768
  804ec8:	10bfff04 	addi	r2,r2,-4
  804ecc:	10c00536 	bltu	r2,r3,804ee4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  804ed0:	e0bff917 	ldw	r2,-28(fp)
  804ed4:	10800917 	ldw	r2,36(r2)
  804ed8:	10c00044 	addi	r3,r2,1
  804edc:	e0bff917 	ldw	r2,-28(fp)
  804ee0:	10c00915 	stw	r3,36(r2)
  804ee4:	d0a73217 	ldw	r2,-25400(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  804ee8:	e037883a 	mov	sp,fp
  804eec:	df000017 	ldw	fp,0(sp)
  804ef0:	dec00104 	addi	sp,sp,4
  804ef4:	f800283a 	ret

00804ef8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  804ef8:	defffd04 	addi	sp,sp,-12
  804efc:	df000215 	stw	fp,8(sp)
  804f00:	df000204 	addi	fp,sp,8
  804f04:	e13ffe15 	stw	r4,-8(fp)
  804f08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804f0c:	00000506 	br	804f24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  804f10:	e0bfff17 	ldw	r2,-4(fp)
  804f14:	1090000c 	andi	r2,r2,16384
  804f18:	10000226 	beq	r2,zero,804f24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  804f1c:	00bffd44 	movi	r2,-11
  804f20:	00000b06 	br	804f50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804f24:	e0bffe17 	ldw	r2,-8(fp)
  804f28:	10c00d17 	ldw	r3,52(r2)
  804f2c:	e0bffe17 	ldw	r2,-8(fp)
  804f30:	10800c17 	ldw	r2,48(r2)
  804f34:	18800526 	beq	r3,r2,804f4c <altera_avalon_jtag_uart_close+0x54>
  804f38:	e0bffe17 	ldw	r2,-8(fp)
  804f3c:	10c00917 	ldw	r3,36(r2)
  804f40:	e0bffe17 	ldw	r2,-8(fp)
  804f44:	10800117 	ldw	r2,4(r2)
  804f48:	18bff136 	bltu	r3,r2,804f10 <__alt_mem_onchip_mem+0xff7fcf10>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  804f4c:	0005883a 	mov	r2,zero
}
  804f50:	e037883a 	mov	sp,fp
  804f54:	df000017 	ldw	fp,0(sp)
  804f58:	dec00104 	addi	sp,sp,4
  804f5c:	f800283a 	ret

00804f60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  804f60:	defffa04 	addi	sp,sp,-24
  804f64:	df000515 	stw	fp,20(sp)
  804f68:	df000504 	addi	fp,sp,20
  804f6c:	e13ffd15 	stw	r4,-12(fp)
  804f70:	e17ffe15 	stw	r5,-8(fp)
  804f74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  804f78:	00bff9c4 	movi	r2,-25
  804f7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  804f80:	e0bffe17 	ldw	r2,-8(fp)
  804f84:	10da8060 	cmpeqi	r3,r2,27137
  804f88:	1800031e 	bne	r3,zero,804f98 <altera_avalon_jtag_uart_ioctl+0x38>
  804f8c:	109a80a0 	cmpeqi	r2,r2,27138
  804f90:	1000181e 	bne	r2,zero,804ff4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  804f94:	00002906 	br	80503c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  804f98:	e0bffd17 	ldw	r2,-12(fp)
  804f9c:	10c00117 	ldw	r3,4(r2)
  804fa0:	00a00034 	movhi	r2,32768
  804fa4:	10bfffc4 	addi	r2,r2,-1
  804fa8:	18802126 	beq	r3,r2,805030 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  804fac:	e0bfff17 	ldw	r2,-4(fp)
  804fb0:	10800017 	ldw	r2,0(r2)
  804fb4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  804fb8:	e0bffc17 	ldw	r2,-16(fp)
  804fbc:	10800090 	cmplti	r2,r2,2
  804fc0:	1000061e 	bne	r2,zero,804fdc <altera_avalon_jtag_uart_ioctl+0x7c>
  804fc4:	e0fffc17 	ldw	r3,-16(fp)
  804fc8:	00a00034 	movhi	r2,32768
  804fcc:	10bfffc4 	addi	r2,r2,-1
  804fd0:	18800226 	beq	r3,r2,804fdc <altera_avalon_jtag_uart_ioctl+0x7c>
  804fd4:	e0bffc17 	ldw	r2,-16(fp)
  804fd8:	00000206 	br	804fe4 <altera_avalon_jtag_uart_ioctl+0x84>
  804fdc:	00a00034 	movhi	r2,32768
  804fe0:	10bfff84 	addi	r2,r2,-2
  804fe4:	e0fffd17 	ldw	r3,-12(fp)
  804fe8:	18800115 	stw	r2,4(r3)
      rc = 0;
  804fec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  804ff0:	00000f06 	br	805030 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  804ff4:	e0bffd17 	ldw	r2,-12(fp)
  804ff8:	10c00117 	ldw	r3,4(r2)
  804ffc:	00a00034 	movhi	r2,32768
  805000:	10bfffc4 	addi	r2,r2,-1
  805004:	18800c26 	beq	r3,r2,805038 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  805008:	e0bffd17 	ldw	r2,-12(fp)
  80500c:	10c00917 	ldw	r3,36(r2)
  805010:	e0bffd17 	ldw	r2,-12(fp)
  805014:	10800117 	ldw	r2,4(r2)
  805018:	1885803a 	cmpltu	r2,r3,r2
  80501c:	10c03fcc 	andi	r3,r2,255
  805020:	e0bfff17 	ldw	r2,-4(fp)
  805024:	10c00015 	stw	r3,0(r2)
      rc = 0;
  805028:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80502c:	00000206 	br	805038 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  805030:	0001883a 	nop
  805034:	00000106 	br	80503c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  805038:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80503c:	e0bffb17 	ldw	r2,-20(fp)
}
  805040:	e037883a 	mov	sp,fp
  805044:	df000017 	ldw	fp,0(sp)
  805048:	dec00104 	addi	sp,sp,4
  80504c:	f800283a 	ret

00805050 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  805050:	defff304 	addi	sp,sp,-52
  805054:	dfc00c15 	stw	ra,48(sp)
  805058:	df000b15 	stw	fp,44(sp)
  80505c:	df000b04 	addi	fp,sp,44
  805060:	e13ffc15 	stw	r4,-16(fp)
  805064:	e17ffd15 	stw	r5,-12(fp)
  805068:	e1bffe15 	stw	r6,-8(fp)
  80506c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  805070:	e0bffd17 	ldw	r2,-12(fp)
  805074:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  805078:	00004706 	br	805198 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80507c:	e0bffc17 	ldw	r2,-16(fp)
  805080:	10800a17 	ldw	r2,40(r2)
  805084:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  805088:	e0bffc17 	ldw	r2,-16(fp)
  80508c:	10800b17 	ldw	r2,44(r2)
  805090:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  805094:	e0fff717 	ldw	r3,-36(fp)
  805098:	e0bff817 	ldw	r2,-32(fp)
  80509c:	18800536 	bltu	r3,r2,8050b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8050a0:	e0fff717 	ldw	r3,-36(fp)
  8050a4:	e0bff817 	ldw	r2,-32(fp)
  8050a8:	1885c83a 	sub	r2,r3,r2
  8050ac:	e0bff615 	stw	r2,-40(fp)
  8050b0:	00000406 	br	8050c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8050b4:	00c20004 	movi	r3,2048
  8050b8:	e0bff817 	ldw	r2,-32(fp)
  8050bc:	1885c83a 	sub	r2,r3,r2
  8050c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8050c4:	e0bff617 	ldw	r2,-40(fp)
  8050c8:	10001e26 	beq	r2,zero,805144 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8050cc:	e0fffe17 	ldw	r3,-8(fp)
  8050d0:	e0bff617 	ldw	r2,-40(fp)
  8050d4:	1880022e 	bgeu	r3,r2,8050e0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8050d8:	e0bffe17 	ldw	r2,-8(fp)
  8050dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8050e0:	e0bffc17 	ldw	r2,-16(fp)
  8050e4:	10c00e04 	addi	r3,r2,56
  8050e8:	e0bff817 	ldw	r2,-32(fp)
  8050ec:	1885883a 	add	r2,r3,r2
  8050f0:	e1bff617 	ldw	r6,-40(fp)
  8050f4:	100b883a 	mov	r5,r2
  8050f8:	e13ff517 	ldw	r4,-44(fp)
  8050fc:	08022080 	call	802208 <memcpy>
      ptr   += n;
  805100:	e0fff517 	ldw	r3,-44(fp)
  805104:	e0bff617 	ldw	r2,-40(fp)
  805108:	1885883a 	add	r2,r3,r2
  80510c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  805110:	e0fffe17 	ldw	r3,-8(fp)
  805114:	e0bff617 	ldw	r2,-40(fp)
  805118:	1885c83a 	sub	r2,r3,r2
  80511c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805120:	e0fff817 	ldw	r3,-32(fp)
  805124:	e0bff617 	ldw	r2,-40(fp)
  805128:	1885883a 	add	r2,r3,r2
  80512c:	10c1ffcc 	andi	r3,r2,2047
  805130:	e0bffc17 	ldw	r2,-16(fp)
  805134:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  805138:	e0bffe17 	ldw	r2,-8(fp)
  80513c:	00bfcf16 	blt	zero,r2,80507c <__alt_mem_onchip_mem+0xff7fd07c>
  805140:	00000106 	br	805148 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  805144:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  805148:	e0fff517 	ldw	r3,-44(fp)
  80514c:	e0bffd17 	ldw	r2,-12(fp)
  805150:	1880141e 	bne	r3,r2,8051a4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  805154:	e0bfff17 	ldw	r2,-4(fp)
  805158:	1090000c 	andi	r2,r2,16384
  80515c:	1000131e 	bne	r2,zero,8051ac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  805160:	0001883a 	nop
  805164:	e0bffc17 	ldw	r2,-16(fp)
  805168:	10c00a17 	ldw	r3,40(r2)
  80516c:	e0bff717 	ldw	r2,-36(fp)
  805170:	1880051e 	bne	r3,r2,805188 <altera_avalon_jtag_uart_read+0x138>
  805174:	e0bffc17 	ldw	r2,-16(fp)
  805178:	10c00917 	ldw	r3,36(r2)
  80517c:	e0bffc17 	ldw	r2,-16(fp)
  805180:	10800117 	ldw	r2,4(r2)
  805184:	18bff736 	bltu	r3,r2,805164 <__alt_mem_onchip_mem+0xff7fd164>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  805188:	e0bffc17 	ldw	r2,-16(fp)
  80518c:	10c00a17 	ldw	r3,40(r2)
  805190:	e0bff717 	ldw	r2,-36(fp)
  805194:	18800726 	beq	r3,r2,8051b4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  805198:	e0bffe17 	ldw	r2,-8(fp)
  80519c:	00bfb716 	blt	zero,r2,80507c <__alt_mem_onchip_mem+0xff7fd07c>
  8051a0:	00000506 	br	8051b8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8051a4:	0001883a 	nop
  8051a8:	00000306 	br	8051b8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8051ac:	0001883a 	nop
  8051b0:	00000106 	br	8051b8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8051b4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8051b8:	e0fff517 	ldw	r3,-44(fp)
  8051bc:	e0bffd17 	ldw	r2,-12(fp)
  8051c0:	18801826 	beq	r3,r2,805224 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8051c4:	0005303a 	rdctl	r2,status
  8051c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8051cc:	e0fffb17 	ldw	r3,-20(fp)
  8051d0:	00bfff84 	movi	r2,-2
  8051d4:	1884703a 	and	r2,r3,r2
  8051d8:	1001703a 	wrctl	status,r2
  
  return context;
  8051dc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8051e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8051e4:	e0bffc17 	ldw	r2,-16(fp)
  8051e8:	10800817 	ldw	r2,32(r2)
  8051ec:	10c00054 	ori	r3,r2,1
  8051f0:	e0bffc17 	ldw	r2,-16(fp)
  8051f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8051f8:	e0bffc17 	ldw	r2,-16(fp)
  8051fc:	10800017 	ldw	r2,0(r2)
  805200:	10800104 	addi	r2,r2,4
  805204:	1007883a 	mov	r3,r2
  805208:	e0bffc17 	ldw	r2,-16(fp)
  80520c:	10800817 	ldw	r2,32(r2)
  805210:	18800035 	stwio	r2,0(r3)
  805214:	e0bffa17 	ldw	r2,-24(fp)
  805218:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80521c:	e0bff917 	ldw	r2,-28(fp)
  805220:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  805224:	e0fff517 	ldw	r3,-44(fp)
  805228:	e0bffd17 	ldw	r2,-12(fp)
  80522c:	18800426 	beq	r3,r2,805240 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  805230:	e0fff517 	ldw	r3,-44(fp)
  805234:	e0bffd17 	ldw	r2,-12(fp)
  805238:	1885c83a 	sub	r2,r3,r2
  80523c:	00000606 	br	805258 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  805240:	e0bfff17 	ldw	r2,-4(fp)
  805244:	1090000c 	andi	r2,r2,16384
  805248:	10000226 	beq	r2,zero,805254 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80524c:	00bffd44 	movi	r2,-11
  805250:	00000106 	br	805258 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  805254:	00bffec4 	movi	r2,-5
}
  805258:	e037883a 	mov	sp,fp
  80525c:	dfc00117 	ldw	ra,4(sp)
  805260:	df000017 	ldw	fp,0(sp)
  805264:	dec00204 	addi	sp,sp,8
  805268:	f800283a 	ret

0080526c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80526c:	defff304 	addi	sp,sp,-52
  805270:	dfc00c15 	stw	ra,48(sp)
  805274:	df000b15 	stw	fp,44(sp)
  805278:	df000b04 	addi	fp,sp,44
  80527c:	e13ffc15 	stw	r4,-16(fp)
  805280:	e17ffd15 	stw	r5,-12(fp)
  805284:	e1bffe15 	stw	r6,-8(fp)
  805288:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80528c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  805290:	e0bffd17 	ldw	r2,-12(fp)
  805294:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805298:	00003706 	br	805378 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80529c:	e0bffc17 	ldw	r2,-16(fp)
  8052a0:	10800c17 	ldw	r2,48(r2)
  8052a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8052a8:	e0bffc17 	ldw	r2,-16(fp)
  8052ac:	10800d17 	ldw	r2,52(r2)
  8052b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8052b4:	e0fff917 	ldw	r3,-28(fp)
  8052b8:	e0bff517 	ldw	r2,-44(fp)
  8052bc:	1880062e 	bgeu	r3,r2,8052d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8052c0:	e0fff517 	ldw	r3,-44(fp)
  8052c4:	e0bff917 	ldw	r2,-28(fp)
  8052c8:	1885c83a 	sub	r2,r3,r2
  8052cc:	10bfffc4 	addi	r2,r2,-1
  8052d0:	e0bff615 	stw	r2,-40(fp)
  8052d4:	00000b06 	br	805304 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8052d8:	e0bff517 	ldw	r2,-44(fp)
  8052dc:	10000526 	beq	r2,zero,8052f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8052e0:	00c20004 	movi	r3,2048
  8052e4:	e0bff917 	ldw	r2,-28(fp)
  8052e8:	1885c83a 	sub	r2,r3,r2
  8052ec:	e0bff615 	stw	r2,-40(fp)
  8052f0:	00000406 	br	805304 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8052f4:	00c1ffc4 	movi	r3,2047
  8052f8:	e0bff917 	ldw	r2,-28(fp)
  8052fc:	1885c83a 	sub	r2,r3,r2
  805300:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  805304:	e0bff617 	ldw	r2,-40(fp)
  805308:	10001e26 	beq	r2,zero,805384 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80530c:	e0fffe17 	ldw	r3,-8(fp)
  805310:	e0bff617 	ldw	r2,-40(fp)
  805314:	1880022e 	bgeu	r3,r2,805320 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  805318:	e0bffe17 	ldw	r2,-8(fp)
  80531c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  805320:	e0bffc17 	ldw	r2,-16(fp)
  805324:	10c20e04 	addi	r3,r2,2104
  805328:	e0bff917 	ldw	r2,-28(fp)
  80532c:	1885883a 	add	r2,r3,r2
  805330:	e1bff617 	ldw	r6,-40(fp)
  805334:	e17ffd17 	ldw	r5,-12(fp)
  805338:	1009883a 	mov	r4,r2
  80533c:	08022080 	call	802208 <memcpy>
      ptr   += n;
  805340:	e0fffd17 	ldw	r3,-12(fp)
  805344:	e0bff617 	ldw	r2,-40(fp)
  805348:	1885883a 	add	r2,r3,r2
  80534c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  805350:	e0fffe17 	ldw	r3,-8(fp)
  805354:	e0bff617 	ldw	r2,-40(fp)
  805358:	1885c83a 	sub	r2,r3,r2
  80535c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805360:	e0fff917 	ldw	r3,-28(fp)
  805364:	e0bff617 	ldw	r2,-40(fp)
  805368:	1885883a 	add	r2,r3,r2
  80536c:	10c1ffcc 	andi	r3,r2,2047
  805370:	e0bffc17 	ldw	r2,-16(fp)
  805374:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805378:	e0bffe17 	ldw	r2,-8(fp)
  80537c:	00bfc716 	blt	zero,r2,80529c <__alt_mem_onchip_mem+0xff7fd29c>
  805380:	00000106 	br	805388 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  805384:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805388:	0005303a 	rdctl	r2,status
  80538c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805390:	e0fffb17 	ldw	r3,-20(fp)
  805394:	00bfff84 	movi	r2,-2
  805398:	1884703a 	and	r2,r3,r2
  80539c:	1001703a 	wrctl	status,r2
  
  return context;
  8053a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8053a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8053a8:	e0bffc17 	ldw	r2,-16(fp)
  8053ac:	10800817 	ldw	r2,32(r2)
  8053b0:	10c00094 	ori	r3,r2,2
  8053b4:	e0bffc17 	ldw	r2,-16(fp)
  8053b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8053bc:	e0bffc17 	ldw	r2,-16(fp)
  8053c0:	10800017 	ldw	r2,0(r2)
  8053c4:	10800104 	addi	r2,r2,4
  8053c8:	1007883a 	mov	r3,r2
  8053cc:	e0bffc17 	ldw	r2,-16(fp)
  8053d0:	10800817 	ldw	r2,32(r2)
  8053d4:	18800035 	stwio	r2,0(r3)
  8053d8:	e0bffa17 	ldw	r2,-24(fp)
  8053dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8053e0:	e0bff817 	ldw	r2,-32(fp)
  8053e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8053e8:	e0bffe17 	ldw	r2,-8(fp)
  8053ec:	0080100e 	bge	zero,r2,805430 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8053f0:	e0bfff17 	ldw	r2,-4(fp)
  8053f4:	1090000c 	andi	r2,r2,16384
  8053f8:	1000101e 	bne	r2,zero,80543c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8053fc:	0001883a 	nop
  805400:	e0bffc17 	ldw	r2,-16(fp)
  805404:	10c00d17 	ldw	r3,52(r2)
  805408:	e0bff517 	ldw	r2,-44(fp)
  80540c:	1880051e 	bne	r3,r2,805424 <altera_avalon_jtag_uart_write+0x1b8>
  805410:	e0bffc17 	ldw	r2,-16(fp)
  805414:	10c00917 	ldw	r3,36(r2)
  805418:	e0bffc17 	ldw	r2,-16(fp)
  80541c:	10800117 	ldw	r2,4(r2)
  805420:	18bff736 	bltu	r3,r2,805400 <__alt_mem_onchip_mem+0xff7fd400>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  805424:	e0bffc17 	ldw	r2,-16(fp)
  805428:	10800917 	ldw	r2,36(r2)
  80542c:	1000051e 	bne	r2,zero,805444 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  805430:	e0bffe17 	ldw	r2,-8(fp)
  805434:	00bfd016 	blt	zero,r2,805378 <__alt_mem_onchip_mem+0xff7fd378>
  805438:	00000306 	br	805448 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80543c:	0001883a 	nop
  805440:	00000106 	br	805448 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  805444:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  805448:	e0fffd17 	ldw	r3,-12(fp)
  80544c:	e0bff717 	ldw	r2,-36(fp)
  805450:	18800426 	beq	r3,r2,805464 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  805454:	e0fffd17 	ldw	r3,-12(fp)
  805458:	e0bff717 	ldw	r2,-36(fp)
  80545c:	1885c83a 	sub	r2,r3,r2
  805460:	00000606 	br	80547c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  805464:	e0bfff17 	ldw	r2,-4(fp)
  805468:	1090000c 	andi	r2,r2,16384
  80546c:	10000226 	beq	r2,zero,805478 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  805470:	00bffd44 	movi	r2,-11
  805474:	00000106 	br	80547c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  805478:	00bffec4 	movi	r2,-5
}
  80547c:	e037883a 	mov	sp,fp
  805480:	dfc00117 	ldw	ra,4(sp)
  805484:	df000017 	ldw	fp,0(sp)
  805488:	dec00204 	addi	sp,sp,8
  80548c:	f800283a 	ret

00805490 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  805490:	defffa04 	addi	sp,sp,-24
  805494:	dfc00515 	stw	ra,20(sp)
  805498:	df000415 	stw	fp,16(sp)
  80549c:	df000404 	addi	fp,sp,16
  8054a0:	e13ffe15 	stw	r4,-8(fp)
  8054a4:	2805883a 	mov	r2,r5
  8054a8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8054ac:	e0bffe17 	ldw	r2,-8(fp)
  8054b0:	10800017 	ldw	r2,0(r2)
  8054b4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8054b8:	008003f4 	movhi	r2,15
  8054bc:	10909004 	addi	r2,r2,16960
  8054c0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8054c4:	e0bffe17 	ldw	r2,-8(fp)
  8054c8:	10800803 	ldbu	r2,32(r2)
  8054cc:	10803fcc 	andi	r2,r2,255
  8054d0:	1080201c 	xori	r2,r2,128
  8054d4:	10bfe004 	addi	r2,r2,-128
  8054d8:	1000151e 	bne	r2,zero,805530 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8054dc:	00000906 	br	805504 <lcd_write_command+0x74>
    if (--i == 0)
  8054e0:	e0bffc17 	ldw	r2,-16(fp)
  8054e4:	10bfffc4 	addi	r2,r2,-1
  8054e8:	e0bffc15 	stw	r2,-16(fp)
  8054ec:	e0bffc17 	ldw	r2,-16(fp)
  8054f0:	1000041e 	bne	r2,zero,805504 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8054f4:	e0bffe17 	ldw	r2,-8(fp)
  8054f8:	00c00044 	movi	r3,1
  8054fc:	10c00805 	stb	r3,32(r2)
      return;
  805500:	00000c06 	br	805534 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  805504:	e0bffd17 	ldw	r2,-12(fp)
  805508:	10800104 	addi	r2,r2,4
  80550c:	10800037 	ldwio	r2,0(r2)
  805510:	1080200c 	andi	r2,r2,128
  805514:	103ff21e 	bne	r2,zero,8054e0 <__alt_mem_onchip_mem+0xff7fd4e0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  805518:	01001904 	movi	r4,100
  80551c:	08075880 	call	807588 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  805520:	e0bffd17 	ldw	r2,-12(fp)
  805524:	e0ffff03 	ldbu	r3,-4(fp)
  805528:	10c00035 	stwio	r3,0(r2)
  80552c:	00000106 	br	805534 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  805530:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  805534:	e037883a 	mov	sp,fp
  805538:	dfc00117 	ldw	ra,4(sp)
  80553c:	df000017 	ldw	fp,0(sp)
  805540:	dec00204 	addi	sp,sp,8
  805544:	f800283a 	ret

00805548 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  805548:	defffa04 	addi	sp,sp,-24
  80554c:	dfc00515 	stw	ra,20(sp)
  805550:	df000415 	stw	fp,16(sp)
  805554:	df000404 	addi	fp,sp,16
  805558:	e13ffe15 	stw	r4,-8(fp)
  80555c:	2805883a 	mov	r2,r5
  805560:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  805564:	e0bffe17 	ldw	r2,-8(fp)
  805568:	10800017 	ldw	r2,0(r2)
  80556c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  805570:	008003f4 	movhi	r2,15
  805574:	10909004 	addi	r2,r2,16960
  805578:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80557c:	e0bffe17 	ldw	r2,-8(fp)
  805580:	10800803 	ldbu	r2,32(r2)
  805584:	10803fcc 	andi	r2,r2,255
  805588:	1080201c 	xori	r2,r2,128
  80558c:	10bfe004 	addi	r2,r2,-128
  805590:	10001d1e 	bne	r2,zero,805608 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  805594:	00000906 	br	8055bc <lcd_write_data+0x74>
    if (--i == 0)
  805598:	e0bffc17 	ldw	r2,-16(fp)
  80559c:	10bfffc4 	addi	r2,r2,-1
  8055a0:	e0bffc15 	stw	r2,-16(fp)
  8055a4:	e0bffc17 	ldw	r2,-16(fp)
  8055a8:	1000041e 	bne	r2,zero,8055bc <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8055ac:	e0bffe17 	ldw	r2,-8(fp)
  8055b0:	00c00044 	movi	r3,1
  8055b4:	10c00805 	stb	r3,32(r2)
      return;
  8055b8:	00001406 	br	80560c <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8055bc:	e0bffd17 	ldw	r2,-12(fp)
  8055c0:	10800104 	addi	r2,r2,4
  8055c4:	10800037 	ldwio	r2,0(r2)
  8055c8:	1080200c 	andi	r2,r2,128
  8055cc:	103ff21e 	bne	r2,zero,805598 <__alt_mem_onchip_mem+0xff7fd598>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8055d0:	01001904 	movi	r4,100
  8055d4:	08075880 	call	807588 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8055d8:	e0bffd17 	ldw	r2,-12(fp)
  8055dc:	10800204 	addi	r2,r2,8
  8055e0:	1007883a 	mov	r3,r2
  8055e4:	e0bfff03 	ldbu	r2,-4(fp)
  8055e8:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8055ec:	e0bffe17 	ldw	r2,-8(fp)
  8055f0:	108008c3 	ldbu	r2,35(r2)
  8055f4:	10800044 	addi	r2,r2,1
  8055f8:	1007883a 	mov	r3,r2
  8055fc:	e0bffe17 	ldw	r2,-8(fp)
  805600:	10c008c5 	stb	r3,35(r2)
  805604:	00000106 	br	80560c <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  805608:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80560c:	e037883a 	mov	sp,fp
  805610:	dfc00117 	ldw	ra,4(sp)
  805614:	df000017 	ldw	fp,0(sp)
  805618:	dec00204 	addi	sp,sp,8
  80561c:	f800283a 	ret

00805620 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  805620:	defffc04 	addi	sp,sp,-16
  805624:	dfc00315 	stw	ra,12(sp)
  805628:	df000215 	stw	fp,8(sp)
  80562c:	df000204 	addi	fp,sp,8
  805630:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  805634:	01400044 	movi	r5,1
  805638:	e13fff17 	ldw	r4,-4(fp)
  80563c:	08054900 	call	805490 <lcd_write_command>

  sp->x = 0;
  805640:	e0bfff17 	ldw	r2,-4(fp)
  805644:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  805648:	e0bfff17 	ldw	r2,-4(fp)
  80564c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  805650:	e0bfff17 	ldw	r2,-4(fp)
  805654:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805658:	e03ffe15 	stw	zero,-8(fp)
  80565c:	00001b06 	br	8056cc <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  805660:	e0bffe17 	ldw	r2,-8(fp)
  805664:	108018e4 	muli	r2,r2,99
  805668:	10801004 	addi	r2,r2,64
  80566c:	e0ffff17 	ldw	r3,-4(fp)
  805670:	1885883a 	add	r2,r3,r2
  805674:	01801444 	movi	r6,81
  805678:	01400804 	movi	r5,32
  80567c:	1009883a 	mov	r4,r2
  805680:	08024ac0 	call	8024ac <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  805684:	e0bffe17 	ldw	r2,-8(fp)
  805688:	108018e4 	muli	r2,r2,99
  80568c:	10800c04 	addi	r2,r2,48
  805690:	e0ffff17 	ldw	r3,-4(fp)
  805694:	1885883a 	add	r2,r3,r2
  805698:	01800404 	movi	r6,16
  80569c:	01400804 	movi	r5,32
  8056a0:	1009883a 	mov	r4,r2
  8056a4:	08024ac0 	call	8024ac <memset>
    sp->line[y].width = 0;
  8056a8:	e0ffff17 	ldw	r3,-4(fp)
  8056ac:	e0bffe17 	ldw	r2,-8(fp)
  8056b0:	108018e4 	muli	r2,r2,99
  8056b4:	1885883a 	add	r2,r3,r2
  8056b8:	10802444 	addi	r2,r2,145
  8056bc:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8056c0:	e0bffe17 	ldw	r2,-8(fp)
  8056c4:	10800044 	addi	r2,r2,1
  8056c8:	e0bffe15 	stw	r2,-8(fp)
  8056cc:	e0bffe17 	ldw	r2,-8(fp)
  8056d0:	10800090 	cmplti	r2,r2,2
  8056d4:	103fe21e 	bne	r2,zero,805660 <__alt_mem_onchip_mem+0xff7fd660>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8056d8:	0001883a 	nop
  8056dc:	e037883a 	mov	sp,fp
  8056e0:	dfc00117 	ldw	ra,4(sp)
  8056e4:	df000017 	ldw	fp,0(sp)
  8056e8:	dec00204 	addi	sp,sp,8
  8056ec:	f800283a 	ret

008056f0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8056f0:	defff704 	addi	sp,sp,-36
  8056f4:	dfc00815 	stw	ra,32(sp)
  8056f8:	df000715 	stw	fp,28(sp)
  8056fc:	df000704 	addi	fp,sp,28
  805700:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  805704:	e0bfff17 	ldw	r2,-4(fp)
  805708:	10800943 	ldbu	r2,37(r2)
  80570c:	10803fcc 	andi	r2,r2,255
  805710:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805714:	e03ff915 	stw	zero,-28(fp)
  805718:	00006706 	br	8058b8 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80571c:	e0ffff17 	ldw	r3,-4(fp)
  805720:	e0bff917 	ldw	r2,-28(fp)
  805724:	108018e4 	muli	r2,r2,99
  805728:	1885883a 	add	r2,r3,r2
  80572c:	10802444 	addi	r2,r2,145
  805730:	10800003 	ldbu	r2,0(r2)
  805734:	10803fcc 	andi	r2,r2,255
  805738:	1080201c 	xori	r2,r2,128
  80573c:	10bfe004 	addi	r2,r2,-128
  805740:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  805744:	e0ffff17 	ldw	r3,-4(fp)
  805748:	e0bff917 	ldw	r2,-28(fp)
  80574c:	108018e4 	muli	r2,r2,99
  805750:	1885883a 	add	r2,r3,r2
  805754:	10802484 	addi	r2,r2,146
  805758:	10800003 	ldbu	r2,0(r2)
  80575c:	10c03fcc 	andi	r3,r2,255
  805760:	e0bffc17 	ldw	r2,-16(fp)
  805764:	1885383a 	mul	r2,r3,r2
  805768:	1005d23a 	srai	r2,r2,8
  80576c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  805770:	e0fffb17 	ldw	r3,-20(fp)
  805774:	e0bffd17 	ldw	r2,-12(fp)
  805778:	18800116 	blt	r3,r2,805780 <lcd_repaint_screen+0x90>
      offset = 0;
  80577c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  805780:	e03ffa15 	stw	zero,-24(fp)
  805784:	00004606 	br	8058a0 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  805788:	e0fffa17 	ldw	r3,-24(fp)
  80578c:	e0bffb17 	ldw	r2,-20(fp)
  805790:	1885883a 	add	r2,r3,r2
  805794:	e17ffd17 	ldw	r5,-12(fp)
  805798:	1009883a 	mov	r4,r2
  80579c:	0803a600 	call	803a60 <__modsi3>
  8057a0:	1009883a 	mov	r4,r2
  8057a4:	e0ffff17 	ldw	r3,-4(fp)
  8057a8:	e0bff917 	ldw	r2,-28(fp)
  8057ac:	108018e4 	muli	r2,r2,99
  8057b0:	1885883a 	add	r2,r3,r2
  8057b4:	1105883a 	add	r2,r2,r4
  8057b8:	10801004 	addi	r2,r2,64
  8057bc:	10800003 	ldbu	r2,0(r2)
  8057c0:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8057c4:	e0ffff17 	ldw	r3,-4(fp)
  8057c8:	e0bff917 	ldw	r2,-28(fp)
  8057cc:	108018e4 	muli	r2,r2,99
  8057d0:	1887883a 	add	r3,r3,r2
  8057d4:	e0bffa17 	ldw	r2,-24(fp)
  8057d8:	1885883a 	add	r2,r3,r2
  8057dc:	10800c04 	addi	r2,r2,48
  8057e0:	10800003 	ldbu	r2,0(r2)
  8057e4:	10c03fcc 	andi	r3,r2,255
  8057e8:	18c0201c 	xori	r3,r3,128
  8057ec:	18ffe004 	addi	r3,r3,-128
  8057f0:	e0bffe07 	ldb	r2,-8(fp)
  8057f4:	18802726 	beq	r3,r2,805894 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8057f8:	e0fff917 	ldw	r3,-28(fp)
  8057fc:	d0a00e04 	addi	r2,gp,-32712
  805800:	1885883a 	add	r2,r3,r2
  805804:	10800003 	ldbu	r2,0(r2)
  805808:	1007883a 	mov	r3,r2
  80580c:	e0bffa17 	ldw	r2,-24(fp)
  805810:	1885883a 	add	r2,r3,r2
  805814:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  805818:	e0fffe43 	ldbu	r3,-7(fp)
  80581c:	e0bfff17 	ldw	r2,-4(fp)
  805820:	108008c3 	ldbu	r2,35(r2)
  805824:	10803fcc 	andi	r2,r2,255
  805828:	1080201c 	xori	r2,r2,128
  80582c:	10bfe004 	addi	r2,r2,-128
  805830:	18800a26 	beq	r3,r2,80585c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  805834:	e0fffe43 	ldbu	r3,-7(fp)
  805838:	00bfe004 	movi	r2,-128
  80583c:	1884b03a 	or	r2,r3,r2
  805840:	10803fcc 	andi	r2,r2,255
  805844:	100b883a 	mov	r5,r2
  805848:	e13fff17 	ldw	r4,-4(fp)
  80584c:	08054900 	call	805490 <lcd_write_command>
          sp->address = address;
  805850:	e0fffe43 	ldbu	r3,-7(fp)
  805854:	e0bfff17 	ldw	r2,-4(fp)
  805858:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80585c:	e0bffe03 	ldbu	r2,-8(fp)
  805860:	10803fcc 	andi	r2,r2,255
  805864:	100b883a 	mov	r5,r2
  805868:	e13fff17 	ldw	r4,-4(fp)
  80586c:	08055480 	call	805548 <lcd_write_data>
        sp->line[y].visible[x] = c;
  805870:	e0ffff17 	ldw	r3,-4(fp)
  805874:	e0bff917 	ldw	r2,-28(fp)
  805878:	108018e4 	muli	r2,r2,99
  80587c:	1887883a 	add	r3,r3,r2
  805880:	e0bffa17 	ldw	r2,-24(fp)
  805884:	1885883a 	add	r2,r3,r2
  805888:	10800c04 	addi	r2,r2,48
  80588c:	e0fffe03 	ldbu	r3,-8(fp)
  805890:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  805894:	e0bffa17 	ldw	r2,-24(fp)
  805898:	10800044 	addi	r2,r2,1
  80589c:	e0bffa15 	stw	r2,-24(fp)
  8058a0:	e0bffa17 	ldw	r2,-24(fp)
  8058a4:	10800410 	cmplti	r2,r2,16
  8058a8:	103fb71e 	bne	r2,zero,805788 <__alt_mem_onchip_mem+0xff7fd788>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8058ac:	e0bff917 	ldw	r2,-28(fp)
  8058b0:	10800044 	addi	r2,r2,1
  8058b4:	e0bff915 	stw	r2,-28(fp)
  8058b8:	e0bff917 	ldw	r2,-28(fp)
  8058bc:	10800090 	cmplti	r2,r2,2
  8058c0:	103f961e 	bne	r2,zero,80571c <__alt_mem_onchip_mem+0xff7fd71c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8058c4:	0001883a 	nop
  8058c8:	e037883a 	mov	sp,fp
  8058cc:	dfc00117 	ldw	ra,4(sp)
  8058d0:	df000017 	ldw	fp,0(sp)
  8058d4:	dec00204 	addi	sp,sp,8
  8058d8:	f800283a 	ret

008058dc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8058dc:	defffc04 	addi	sp,sp,-16
  8058e0:	dfc00315 	stw	ra,12(sp)
  8058e4:	df000215 	stw	fp,8(sp)
  8058e8:	df000204 	addi	fp,sp,8
  8058ec:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8058f0:	e03ffe15 	stw	zero,-8(fp)
  8058f4:	00001d06 	br	80596c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8058f8:	e0bffe17 	ldw	r2,-8(fp)
  8058fc:	00800f16 	blt	zero,r2,80593c <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  805900:	e0bffe17 	ldw	r2,-8(fp)
  805904:	108018e4 	muli	r2,r2,99
  805908:	10801004 	addi	r2,r2,64
  80590c:	e0ffff17 	ldw	r3,-4(fp)
  805910:	1889883a 	add	r4,r3,r2
  805914:	e0bffe17 	ldw	r2,-8(fp)
  805918:	10800044 	addi	r2,r2,1
  80591c:	108018e4 	muli	r2,r2,99
  805920:	10801004 	addi	r2,r2,64
  805924:	e0ffff17 	ldw	r3,-4(fp)
  805928:	1885883a 	add	r2,r3,r2
  80592c:	01801404 	movi	r6,80
  805930:	100b883a 	mov	r5,r2
  805934:	08022080 	call	802208 <memcpy>
  805938:	00000906 	br	805960 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80593c:	e0bffe17 	ldw	r2,-8(fp)
  805940:	108018e4 	muli	r2,r2,99
  805944:	10801004 	addi	r2,r2,64
  805948:	e0ffff17 	ldw	r3,-4(fp)
  80594c:	1885883a 	add	r2,r3,r2
  805950:	01801404 	movi	r6,80
  805954:	01400804 	movi	r5,32
  805958:	1009883a 	mov	r4,r2
  80595c:	08024ac0 	call	8024ac <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805960:	e0bffe17 	ldw	r2,-8(fp)
  805964:	10800044 	addi	r2,r2,1
  805968:	e0bffe15 	stw	r2,-8(fp)
  80596c:	e0bffe17 	ldw	r2,-8(fp)
  805970:	10800090 	cmplti	r2,r2,2
  805974:	103fe01e 	bne	r2,zero,8058f8 <__alt_mem_onchip_mem+0xff7fd8f8>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  805978:	e0bfff17 	ldw	r2,-4(fp)
  80597c:	10800883 	ldbu	r2,34(r2)
  805980:	10bfffc4 	addi	r2,r2,-1
  805984:	1007883a 	mov	r3,r2
  805988:	e0bfff17 	ldw	r2,-4(fp)
  80598c:	10c00885 	stb	r3,34(r2)
}
  805990:	0001883a 	nop
  805994:	e037883a 	mov	sp,fp
  805998:	dfc00117 	ldw	ra,4(sp)
  80599c:	df000017 	ldw	fp,0(sp)
  8059a0:	dec00204 	addi	sp,sp,8
  8059a4:	f800283a 	ret

008059a8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8059a8:	defff904 	addi	sp,sp,-28
  8059ac:	dfc00615 	stw	ra,24(sp)
  8059b0:	df000515 	stw	fp,20(sp)
  8059b4:	df000504 	addi	fp,sp,20
  8059b8:	e13ffe15 	stw	r4,-8(fp)
  8059bc:	2805883a 	mov	r2,r5
  8059c0:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8059c4:	e03ffb15 	stw	zero,-20(fp)
  8059c8:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8059cc:	e0bffe17 	ldw	r2,-8(fp)
  8059d0:	10800a03 	ldbu	r2,40(r2)
  8059d4:	10803fcc 	andi	r2,r2,255
  8059d8:	1080201c 	xori	r2,r2,128
  8059dc:	10bfe004 	addi	r2,r2,-128
  8059e0:	108016d8 	cmpnei	r2,r2,91
  8059e4:	1000411e 	bne	r2,zero,805aec <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  8059e8:	e0bffe17 	ldw	r2,-8(fp)
  8059ec:	10800a04 	addi	r2,r2,40
  8059f0:	10800044 	addi	r2,r2,1
  8059f4:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  8059f8:	00000c06 	br	805a2c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8059fc:	e0bffb17 	ldw	r2,-20(fp)
  805a00:	10c002a4 	muli	r3,r2,10
  805a04:	e0bffd17 	ldw	r2,-12(fp)
  805a08:	11000044 	addi	r4,r2,1
  805a0c:	e13ffd15 	stw	r4,-12(fp)
  805a10:	10800003 	ldbu	r2,0(r2)
  805a14:	10803fcc 	andi	r2,r2,255
  805a18:	1080201c 	xori	r2,r2,128
  805a1c:	10bfe004 	addi	r2,r2,-128
  805a20:	10bff404 	addi	r2,r2,-48
  805a24:	1885883a 	add	r2,r3,r2
  805a28:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  805a2c:	d0e00f17 	ldw	r3,-32708(gp)
  805a30:	e0bffd17 	ldw	r2,-12(fp)
  805a34:	10800003 	ldbu	r2,0(r2)
  805a38:	10803fcc 	andi	r2,r2,255
  805a3c:	1080201c 	xori	r2,r2,128
  805a40:	10bfe004 	addi	r2,r2,-128
  805a44:	10800044 	addi	r2,r2,1
  805a48:	1885883a 	add	r2,r3,r2
  805a4c:	10800003 	ldbu	r2,0(r2)
  805a50:	10803fcc 	andi	r2,r2,255
  805a54:	1080010c 	andi	r2,r2,4
  805a58:	103fe81e 	bne	r2,zero,8059fc <__alt_mem_onchip_mem+0xff7fd9fc>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  805a5c:	e0bffd17 	ldw	r2,-12(fp)
  805a60:	10800003 	ldbu	r2,0(r2)
  805a64:	10803fcc 	andi	r2,r2,255
  805a68:	1080201c 	xori	r2,r2,128
  805a6c:	10bfe004 	addi	r2,r2,-128
  805a70:	10800ed8 	cmpnei	r2,r2,59
  805a74:	10001f1e 	bne	r2,zero,805af4 <lcd_handle_escape+0x14c>
    {
      ptr++;
  805a78:	e0bffd17 	ldw	r2,-12(fp)
  805a7c:	10800044 	addi	r2,r2,1
  805a80:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  805a84:	00000c06 	br	805ab8 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  805a88:	e0bffc17 	ldw	r2,-16(fp)
  805a8c:	10c002a4 	muli	r3,r2,10
  805a90:	e0bffd17 	ldw	r2,-12(fp)
  805a94:	11000044 	addi	r4,r2,1
  805a98:	e13ffd15 	stw	r4,-12(fp)
  805a9c:	10800003 	ldbu	r2,0(r2)
  805aa0:	10803fcc 	andi	r2,r2,255
  805aa4:	1080201c 	xori	r2,r2,128
  805aa8:	10bfe004 	addi	r2,r2,-128
  805aac:	10bff404 	addi	r2,r2,-48
  805ab0:	1885883a 	add	r2,r3,r2
  805ab4:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  805ab8:	d0e00f17 	ldw	r3,-32708(gp)
  805abc:	e0bffd17 	ldw	r2,-12(fp)
  805ac0:	10800003 	ldbu	r2,0(r2)
  805ac4:	10803fcc 	andi	r2,r2,255
  805ac8:	1080201c 	xori	r2,r2,128
  805acc:	10bfe004 	addi	r2,r2,-128
  805ad0:	10800044 	addi	r2,r2,1
  805ad4:	1885883a 	add	r2,r3,r2
  805ad8:	10800003 	ldbu	r2,0(r2)
  805adc:	10803fcc 	andi	r2,r2,255
  805ae0:	1080010c 	andi	r2,r2,4
  805ae4:	103fe81e 	bne	r2,zero,805a88 <__alt_mem_onchip_mem+0xff7fda88>
  805ae8:	00000206 	br	805af4 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  805aec:	00bfffc4 	movi	r2,-1
  805af0:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  805af4:	e0bfff07 	ldb	r2,-4(fp)
  805af8:	10c012a0 	cmpeqi	r3,r2,74
  805afc:	1800291e 	bne	r3,zero,805ba4 <lcd_handle_escape+0x1fc>
  805b00:	10c012c8 	cmpgei	r3,r2,75
  805b04:	1800031e 	bne	r3,zero,805b14 <lcd_handle_escape+0x16c>
  805b08:	10801220 	cmpeqi	r2,r2,72
  805b0c:	1000061e 	bne	r2,zero,805b28 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  805b10:	00004a06 	br	805c3c <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  805b14:	10c012e0 	cmpeqi	r3,r2,75
  805b18:	1800281e 	bne	r3,zero,805bbc <lcd_handle_escape+0x214>
  805b1c:	108019a0 	cmpeqi	r2,r2,102
  805b20:	1000011e 	bne	r2,zero,805b28 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  805b24:	00004506 	br	805c3c <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  805b28:	e0bffc17 	ldw	r2,-16(fp)
  805b2c:	0080050e 	bge	zero,r2,805b44 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  805b30:	e0bffc17 	ldw	r2,-16(fp)
  805b34:	10bfffc4 	addi	r2,r2,-1
  805b38:	1007883a 	mov	r3,r2
  805b3c:	e0bffe17 	ldw	r2,-8(fp)
  805b40:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  805b44:	e0bffb17 	ldw	r2,-20(fp)
  805b48:	0080370e 	bge	zero,r2,805c28 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  805b4c:	e0bffb17 	ldw	r2,-20(fp)
  805b50:	10bfffc4 	addi	r2,r2,-1
  805b54:	1007883a 	mov	r3,r2
  805b58:	e0bffe17 	ldw	r2,-8(fp)
  805b5c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  805b60:	e0bffe17 	ldw	r2,-8(fp)
  805b64:	10800883 	ldbu	r2,34(r2)
  805b68:	10803fcc 	andi	r2,r2,255
  805b6c:	10800170 	cmpltui	r2,r2,5
  805b70:	1000061e 	bne	r2,zero,805b8c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  805b74:	e0bffe17 	ldw	r2,-8(fp)
  805b78:	00c00104 	movi	r3,4
  805b7c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  805b80:	00000206 	br	805b8c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  805b84:	e13ffe17 	ldw	r4,-8(fp)
  805b88:	08058dc0 	call	8058dc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  805b8c:	e0bffe17 	ldw	r2,-8(fp)
  805b90:	10800883 	ldbu	r2,34(r2)
  805b94:	10803fcc 	andi	r2,r2,255
  805b98:	108000e8 	cmpgeui	r2,r2,3
  805b9c:	103ff91e 	bne	r2,zero,805b84 <__alt_mem_onchip_mem+0xff7fdb84>
        lcd_scroll_up(sp);
    }
    break;
  805ba0:	00002106 	br	805c28 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  805ba4:	e0bffb17 	ldw	r2,-20(fp)
  805ba8:	10800098 	cmpnei	r2,r2,2
  805bac:	1000201e 	bne	r2,zero,805c30 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  805bb0:	e13ffe17 	ldw	r4,-8(fp)
  805bb4:	08056200 	call	805620 <lcd_clear_screen>
    break;
  805bb8:	00001d06 	br	805c30 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  805bbc:	e0bffb17 	ldw	r2,-20(fp)
  805bc0:	00801d16 	blt	zero,r2,805c38 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  805bc4:	e0bffe17 	ldw	r2,-8(fp)
  805bc8:	10800843 	ldbu	r2,33(r2)
  805bcc:	10803fcc 	andi	r2,r2,255
  805bd0:	10801428 	cmpgeui	r2,r2,80
  805bd4:	1000181e 	bne	r2,zero,805c38 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  805bd8:	e0bffe17 	ldw	r2,-8(fp)
  805bdc:	10800883 	ldbu	r2,34(r2)
  805be0:	10803fcc 	andi	r2,r2,255
  805be4:	108018e4 	muli	r2,r2,99
  805be8:	10801004 	addi	r2,r2,64
  805bec:	e0fffe17 	ldw	r3,-8(fp)
  805bf0:	1887883a 	add	r3,r3,r2
  805bf4:	e0bffe17 	ldw	r2,-8(fp)
  805bf8:	10800843 	ldbu	r2,33(r2)
  805bfc:	10803fcc 	andi	r2,r2,255
  805c00:	1889883a 	add	r4,r3,r2
  805c04:	e0bffe17 	ldw	r2,-8(fp)
  805c08:	10800843 	ldbu	r2,33(r2)
  805c0c:	10803fcc 	andi	r2,r2,255
  805c10:	00c01404 	movi	r3,80
  805c14:	1885c83a 	sub	r2,r3,r2
  805c18:	100d883a 	mov	r6,r2
  805c1c:	01400804 	movi	r5,32
  805c20:	08024ac0 	call	8024ac <memset>
    }
    break;
  805c24:	00000406 	br	805c38 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  805c28:	0001883a 	nop
  805c2c:	00000306 	br	805c3c <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  805c30:	0001883a 	nop
  805c34:	00000106 	br	805c3c <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  805c38:	0001883a 	nop
  }
}
  805c3c:	0001883a 	nop
  805c40:	e037883a 	mov	sp,fp
  805c44:	dfc00117 	ldw	ra,4(sp)
  805c48:	df000017 	ldw	fp,0(sp)
  805c4c:	dec00204 	addi	sp,sp,8
  805c50:	f800283a 	ret

00805c54 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  805c54:	defff304 	addi	sp,sp,-52
  805c58:	dfc00c15 	stw	ra,48(sp)
  805c5c:	df000b15 	stw	fp,44(sp)
  805c60:	df000b04 	addi	fp,sp,44
  805c64:	e13ffc15 	stw	r4,-16(fp)
  805c68:	e17ffd15 	stw	r5,-12(fp)
  805c6c:	e1bffe15 	stw	r6,-8(fp)
  805c70:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  805c74:	e0bffe17 	ldw	r2,-8(fp)
  805c78:	e0fffd17 	ldw	r3,-12(fp)
  805c7c:	1885883a 	add	r2,r3,r2
  805c80:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  805c84:	e0bffc17 	ldw	r2,-16(fp)
  805c88:	00c00044 	movi	r3,1
  805c8c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  805c90:	00009906 	br	805ef8 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  805c94:	e0bffd17 	ldw	r2,-12(fp)
  805c98:	10800003 	ldbu	r2,0(r2)
  805c9c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  805ca0:	e0bffc17 	ldw	r2,-16(fp)
  805ca4:	10800903 	ldbu	r2,36(r2)
  805ca8:	10803fcc 	andi	r2,r2,255
  805cac:	1080201c 	xori	r2,r2,128
  805cb0:	10bfe004 	addi	r2,r2,-128
  805cb4:	10003716 	blt	r2,zero,805d94 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  805cb8:	e0bffc17 	ldw	r2,-16(fp)
  805cbc:	10800903 	ldbu	r2,36(r2)
  805cc0:	10803fcc 	andi	r2,r2,255
  805cc4:	1080201c 	xori	r2,r2,128
  805cc8:	10bfe004 	addi	r2,r2,-128
  805ccc:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  805cd0:	e0bffa17 	ldw	r2,-24(fp)
  805cd4:	1000031e 	bne	r2,zero,805ce4 <altera_avalon_lcd_16207_write+0x90>
  805cd8:	e0bff907 	ldb	r2,-28(fp)
  805cdc:	108016d8 	cmpnei	r2,r2,91
  805ce0:	10000d1e 	bne	r2,zero,805d18 <altera_avalon_lcd_16207_write+0xc4>
  805ce4:	e0bffa17 	ldw	r2,-24(fp)
  805ce8:	10001826 	beq	r2,zero,805d4c <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  805cec:	d0e00f17 	ldw	r3,-32708(gp)
  805cf0:	e0bff907 	ldb	r2,-28(fp)
  805cf4:	10800044 	addi	r2,r2,1
  805cf8:	1885883a 	add	r2,r3,r2
  805cfc:	10800003 	ldbu	r2,0(r2)
  805d00:	10803fcc 	andi	r2,r2,255
  805d04:	1080010c 	andi	r2,r2,4
  805d08:	1000101e 	bne	r2,zero,805d4c <altera_avalon_lcd_16207_write+0xf8>
  805d0c:	e0bff907 	ldb	r2,-28(fp)
  805d10:	10800ee0 	cmpeqi	r2,r2,59
  805d14:	10000d1e 	bne	r2,zero,805d4c <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  805d18:	e0fffc17 	ldw	r3,-16(fp)
  805d1c:	e0bffa17 	ldw	r2,-24(fp)
  805d20:	1885883a 	add	r2,r3,r2
  805d24:	10800a04 	addi	r2,r2,40
  805d28:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  805d2c:	e0bff907 	ldb	r2,-28(fp)
  805d30:	100b883a 	mov	r5,r2
  805d34:	e13ffc17 	ldw	r4,-16(fp)
  805d38:	08059a80 	call	8059a8 <lcd_handle_escape>

        sp->esccount = -1;
  805d3c:	e0bffc17 	ldw	r2,-16(fp)
  805d40:	00ffffc4 	movi	r3,-1
  805d44:	10c00905 	stb	r3,36(r2)
  805d48:	00006806 	br	805eec <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  805d4c:	e0bffc17 	ldw	r2,-16(fp)
  805d50:	10800903 	ldbu	r2,36(r2)
  805d54:	10803fcc 	andi	r2,r2,255
  805d58:	108001e8 	cmpgeui	r2,r2,7
  805d5c:	1000631e 	bne	r2,zero,805eec <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  805d60:	e0fffc17 	ldw	r3,-16(fp)
  805d64:	e0bffa17 	ldw	r2,-24(fp)
  805d68:	1885883a 	add	r2,r3,r2
  805d6c:	10800a04 	addi	r2,r2,40
  805d70:	e0fff903 	ldbu	r3,-28(fp)
  805d74:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  805d78:	e0bffc17 	ldw	r2,-16(fp)
  805d7c:	10800903 	ldbu	r2,36(r2)
  805d80:	10800044 	addi	r2,r2,1
  805d84:	1007883a 	mov	r3,r2
  805d88:	e0bffc17 	ldw	r2,-16(fp)
  805d8c:	10c00905 	stb	r3,36(r2)
  805d90:	00005606 	br	805eec <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  805d94:	e0bff907 	ldb	r2,-28(fp)
  805d98:	108006d8 	cmpnei	r2,r2,27
  805d9c:	1000031e 	bne	r2,zero,805dac <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  805da0:	e0bffc17 	ldw	r2,-16(fp)
  805da4:	10000905 	stb	zero,36(r2)
  805da8:	00005006 	br	805eec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  805dac:	e0bff907 	ldb	r2,-28(fp)
  805db0:	10800358 	cmpnei	r2,r2,13
  805db4:	1000031e 	bne	r2,zero,805dc4 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  805db8:	e0bffc17 	ldw	r2,-16(fp)
  805dbc:	10000845 	stb	zero,33(r2)
  805dc0:	00004a06 	br	805eec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  805dc4:	e0bff907 	ldb	r2,-28(fp)
  805dc8:	10800298 	cmpnei	r2,r2,10
  805dcc:	1000101e 	bne	r2,zero,805e10 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  805dd0:	e0bffc17 	ldw	r2,-16(fp)
  805dd4:	10000845 	stb	zero,33(r2)
      sp->y++;
  805dd8:	e0bffc17 	ldw	r2,-16(fp)
  805ddc:	10800883 	ldbu	r2,34(r2)
  805de0:	10800044 	addi	r2,r2,1
  805de4:	1007883a 	mov	r3,r2
  805de8:	e0bffc17 	ldw	r2,-16(fp)
  805dec:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  805df0:	e0bffc17 	ldw	r2,-16(fp)
  805df4:	10800883 	ldbu	r2,34(r2)
  805df8:	10803fcc 	andi	r2,r2,255
  805dfc:	108000f0 	cmpltui	r2,r2,3
  805e00:	10003a1e 	bne	r2,zero,805eec <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  805e04:	e13ffc17 	ldw	r4,-16(fp)
  805e08:	08058dc0 	call	8058dc <lcd_scroll_up>
  805e0c:	00003706 	br	805eec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  805e10:	e0bff907 	ldb	r2,-28(fp)
  805e14:	10800218 	cmpnei	r2,r2,8
  805e18:	10000b1e 	bne	r2,zero,805e48 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  805e1c:	e0bffc17 	ldw	r2,-16(fp)
  805e20:	10800843 	ldbu	r2,33(r2)
  805e24:	10803fcc 	andi	r2,r2,255
  805e28:	10003026 	beq	r2,zero,805eec <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  805e2c:	e0bffc17 	ldw	r2,-16(fp)
  805e30:	10800843 	ldbu	r2,33(r2)
  805e34:	10bfffc4 	addi	r2,r2,-1
  805e38:	1007883a 	mov	r3,r2
  805e3c:	e0bffc17 	ldw	r2,-16(fp)
  805e40:	10c00845 	stb	r3,33(r2)
  805e44:	00002906 	br	805eec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  805e48:	d0e00f17 	ldw	r3,-32708(gp)
  805e4c:	e0bff907 	ldb	r2,-28(fp)
  805e50:	10800044 	addi	r2,r2,1
  805e54:	1885883a 	add	r2,r3,r2
  805e58:	10800003 	ldbu	r2,0(r2)
  805e5c:	10803fcc 	andi	r2,r2,255
  805e60:	1080201c 	xori	r2,r2,128
  805e64:	10bfe004 	addi	r2,r2,-128
  805e68:	108025cc 	andi	r2,r2,151
  805e6c:	10001f26 	beq	r2,zero,805eec <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  805e70:	e0bffc17 	ldw	r2,-16(fp)
  805e74:	10800883 	ldbu	r2,34(r2)
  805e78:	10803fcc 	andi	r2,r2,255
  805e7c:	108000b0 	cmpltui	r2,r2,2
  805e80:	1000021e 	bne	r2,zero,805e8c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  805e84:	e13ffc17 	ldw	r4,-16(fp)
  805e88:	08058dc0 	call	8058dc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  805e8c:	e0bffc17 	ldw	r2,-16(fp)
  805e90:	10800843 	ldbu	r2,33(r2)
  805e94:	10803fcc 	andi	r2,r2,255
  805e98:	10801428 	cmpgeui	r2,r2,80
  805e9c:	10000d1e 	bne	r2,zero,805ed4 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  805ea0:	e0bffc17 	ldw	r2,-16(fp)
  805ea4:	10800883 	ldbu	r2,34(r2)
  805ea8:	10c03fcc 	andi	r3,r2,255
  805eac:	e0bffc17 	ldw	r2,-16(fp)
  805eb0:	10800843 	ldbu	r2,33(r2)
  805eb4:	10803fcc 	andi	r2,r2,255
  805eb8:	e13ffc17 	ldw	r4,-16(fp)
  805ebc:	18c018e4 	muli	r3,r3,99
  805ec0:	20c7883a 	add	r3,r4,r3
  805ec4:	1885883a 	add	r2,r3,r2
  805ec8:	10801004 	addi	r2,r2,64
  805ecc:	e0fff903 	ldbu	r3,-28(fp)
  805ed0:	10c00005 	stb	r3,0(r2)

      sp->x++;
  805ed4:	e0bffc17 	ldw	r2,-16(fp)
  805ed8:	10800843 	ldbu	r2,33(r2)
  805edc:	10800044 	addi	r2,r2,1
  805ee0:	1007883a 	mov	r3,r2
  805ee4:	e0bffc17 	ldw	r2,-16(fp)
  805ee8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  805eec:	e0bffd17 	ldw	r2,-12(fp)
  805ef0:	10800044 	addi	r2,r2,1
  805ef4:	e0bffd15 	stw	r2,-12(fp)
  805ef8:	e0fffd17 	ldw	r3,-12(fp)
  805efc:	e0bff817 	ldw	r2,-32(fp)
  805f00:	18bf6436 	bltu	r3,r2,805c94 <__alt_mem_onchip_mem+0xff7fdc94>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  805f04:	00800404 	movi	r2,16
  805f08:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805f0c:	e03ff515 	stw	zero,-44(fp)
  805f10:	00003706 	br	805ff0 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  805f14:	00801404 	movi	r2,80
  805f18:	e0bff715 	stw	r2,-36(fp)
  805f1c:	00001106 	br	805f64 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  805f20:	e0bff717 	ldw	r2,-36(fp)
  805f24:	10bfffc4 	addi	r2,r2,-1
  805f28:	e13ffc17 	ldw	r4,-16(fp)
  805f2c:	e0fff517 	ldw	r3,-44(fp)
  805f30:	18c018e4 	muli	r3,r3,99
  805f34:	20c7883a 	add	r3,r4,r3
  805f38:	1885883a 	add	r2,r3,r2
  805f3c:	10801004 	addi	r2,r2,64
  805f40:	10800003 	ldbu	r2,0(r2)
  805f44:	10803fcc 	andi	r2,r2,255
  805f48:	1080201c 	xori	r2,r2,128
  805f4c:	10bfe004 	addi	r2,r2,-128
  805f50:	10800820 	cmpeqi	r2,r2,32
  805f54:	10000626 	beq	r2,zero,805f70 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  805f58:	e0bff717 	ldw	r2,-36(fp)
  805f5c:	10bfffc4 	addi	r2,r2,-1
  805f60:	e0bff715 	stw	r2,-36(fp)
  805f64:	e0bff717 	ldw	r2,-36(fp)
  805f68:	00bfed16 	blt	zero,r2,805f20 <__alt_mem_onchip_mem+0xff7fdf20>
  805f6c:	00000106 	br	805f74 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  805f70:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  805f74:	e0bff717 	ldw	r2,-36(fp)
  805f78:	10800448 	cmpgei	r2,r2,17
  805f7c:	1000031e 	bne	r2,zero,805f8c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  805f80:	00800404 	movi	r2,16
  805f84:	e0bff715 	stw	r2,-36(fp)
  805f88:	00000306 	br	805f98 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  805f8c:	e0bff717 	ldw	r2,-36(fp)
  805f90:	10800044 	addi	r2,r2,1
  805f94:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  805f98:	e0bff717 	ldw	r2,-36(fp)
  805f9c:	1009883a 	mov	r4,r2
  805fa0:	e0fffc17 	ldw	r3,-16(fp)
  805fa4:	e0bff517 	ldw	r2,-44(fp)
  805fa8:	108018e4 	muli	r2,r2,99
  805fac:	1885883a 	add	r2,r3,r2
  805fb0:	10802444 	addi	r2,r2,145
  805fb4:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  805fb8:	e0fff617 	ldw	r3,-40(fp)
  805fbc:	e0bff717 	ldw	r2,-36(fp)
  805fc0:	1880020e 	bge	r3,r2,805fcc <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  805fc4:	e0bff717 	ldw	r2,-36(fp)
  805fc8:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  805fcc:	e0fffc17 	ldw	r3,-16(fp)
  805fd0:	e0bff517 	ldw	r2,-44(fp)
  805fd4:	108018e4 	muli	r2,r2,99
  805fd8:	1885883a 	add	r2,r3,r2
  805fdc:	10802484 	addi	r2,r2,146
  805fe0:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805fe4:	e0bff517 	ldw	r2,-44(fp)
  805fe8:	10800044 	addi	r2,r2,1
  805fec:	e0bff515 	stw	r2,-44(fp)
  805ff0:	e0bff517 	ldw	r2,-44(fp)
  805ff4:	10800090 	cmplti	r2,r2,2
  805ff8:	103fc61e 	bne	r2,zero,805f14 <__alt_mem_onchip_mem+0xff7fdf14>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  805ffc:	e0bff617 	ldw	r2,-40(fp)
  806000:	10800448 	cmpgei	r2,r2,17
  806004:	1000031e 	bne	r2,zero,806014 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  806008:	e0bffc17 	ldw	r2,-16(fp)
  80600c:	10000985 	stb	zero,38(r2)
  806010:	00002e06 	br	8060cc <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  806014:	e0bff617 	ldw	r2,-40(fp)
  806018:	1085883a 	add	r2,r2,r2
  80601c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  806020:	e0bff617 	ldw	r2,-40(fp)
  806024:	1007883a 	mov	r3,r2
  806028:	e0bffc17 	ldw	r2,-16(fp)
  80602c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806030:	e03ff515 	stw	zero,-44(fp)
  806034:	00002206 	br	8060c0 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  806038:	e0fffc17 	ldw	r3,-16(fp)
  80603c:	e0bff517 	ldw	r2,-44(fp)
  806040:	108018e4 	muli	r2,r2,99
  806044:	1885883a 	add	r2,r3,r2
  806048:	10802444 	addi	r2,r2,145
  80604c:	10800003 	ldbu	r2,0(r2)
  806050:	10803fcc 	andi	r2,r2,255
  806054:	1080201c 	xori	r2,r2,128
  806058:	10bfe004 	addi	r2,r2,-128
  80605c:	10800450 	cmplti	r2,r2,17
  806060:	1000141e 	bne	r2,zero,8060b4 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  806064:	e0fffc17 	ldw	r3,-16(fp)
  806068:	e0bff517 	ldw	r2,-44(fp)
  80606c:	108018e4 	muli	r2,r2,99
  806070:	1885883a 	add	r2,r3,r2
  806074:	10802444 	addi	r2,r2,145
  806078:	10800003 	ldbu	r2,0(r2)
  80607c:	10803fcc 	andi	r2,r2,255
  806080:	1080201c 	xori	r2,r2,128
  806084:	10bfe004 	addi	r2,r2,-128
  806088:	1004923a 	slli	r2,r2,8
  80608c:	e17ff617 	ldw	r5,-40(fp)
  806090:	1009883a 	mov	r4,r2
  806094:	08039dc0 	call	8039dc <__divsi3>
  806098:	1009883a 	mov	r4,r2
  80609c:	e0fffc17 	ldw	r3,-16(fp)
  8060a0:	e0bff517 	ldw	r2,-44(fp)
  8060a4:	108018e4 	muli	r2,r2,99
  8060a8:	1885883a 	add	r2,r3,r2
  8060ac:	10802484 	addi	r2,r2,146
  8060b0:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8060b4:	e0bff517 	ldw	r2,-44(fp)
  8060b8:	10800044 	addi	r2,r2,1
  8060bc:	e0bff515 	stw	r2,-44(fp)
  8060c0:	e0bff517 	ldw	r2,-44(fp)
  8060c4:	10800090 	cmplti	r2,r2,2
  8060c8:	103fdb1e 	bne	r2,zero,806038 <__alt_mem_onchip_mem+0xff7fe038>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8060cc:	e0bffc17 	ldw	r2,-16(fp)
  8060d0:	10800943 	ldbu	r2,37(r2)
  8060d4:	10803fcc 	andi	r2,r2,255
  8060d8:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8060dc:	e13ffc17 	ldw	r4,-16(fp)
  8060e0:	08056f00 	call	8056f0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8060e4:	e0bffc17 	ldw	r2,-16(fp)
  8060e8:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8060ec:	e0bffc17 	ldw	r2,-16(fp)
  8060f0:	10800943 	ldbu	r2,37(r2)
  8060f4:	10c03fcc 	andi	r3,r2,255
  8060f8:	e0bffb17 	ldw	r2,-20(fp)
  8060fc:	18800426 	beq	r3,r2,806110 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  806100:	e0bffc17 	ldw	r2,-16(fp)
  806104:	00c00044 	movi	r3,1
  806108:	10c009c5 	stb	r3,39(r2)
  }
  80610c:	003fef06 	br	8060cc <__alt_mem_onchip_mem+0xff7fe0cc>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  806110:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  806114:	e0bffe17 	ldw	r2,-8(fp)
}
  806118:	e037883a 	mov	sp,fp
  80611c:	dfc00117 	ldw	ra,4(sp)
  806120:	df000017 	ldw	fp,0(sp)
  806124:	dec00204 	addi	sp,sp,8
  806128:	f800283a 	ret

0080612c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80612c:	defffc04 	addi	sp,sp,-16
  806130:	dfc00315 	stw	ra,12(sp)
  806134:	df000215 	stw	fp,8(sp)
  806138:	df000204 	addi	fp,sp,8
  80613c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  806140:	e0bfff17 	ldw	r2,-4(fp)
  806144:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  806148:	e0bffe17 	ldw	r2,-8(fp)
  80614c:	10800943 	ldbu	r2,37(r2)
  806150:	10803fcc 	andi	r2,r2,255
  806154:	10c00044 	addi	r3,r2,1
  806158:	e0bffe17 	ldw	r2,-8(fp)
  80615c:	10800983 	ldbu	r2,38(r2)
  806160:	10803fcc 	andi	r2,r2,255
  806164:	18800316 	blt	r3,r2,806174 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  806168:	e0bffe17 	ldw	r2,-8(fp)
  80616c:	10000945 	stb	zero,37(r2)
  806170:	00000606 	br	80618c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  806174:	e0bffe17 	ldw	r2,-8(fp)
  806178:	10800943 	ldbu	r2,37(r2)
  80617c:	10800044 	addi	r2,r2,1
  806180:	1007883a 	mov	r3,r2
  806184:	e0bffe17 	ldw	r2,-8(fp)
  806188:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80618c:	e0bffe17 	ldw	r2,-8(fp)
  806190:	10800983 	ldbu	r2,38(r2)
  806194:	10803fcc 	andi	r2,r2,255
  806198:	10000826 	beq	r2,zero,8061bc <alt_lcd_16207_timeout+0x90>
  80619c:	e0bffe17 	ldw	r2,-8(fp)
  8061a0:	108009c3 	ldbu	r2,39(r2)
  8061a4:	10803fcc 	andi	r2,r2,255
  8061a8:	1080201c 	xori	r2,r2,128
  8061ac:	10bfe004 	addi	r2,r2,-128
  8061b0:	1000021e 	bne	r2,zero,8061bc <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8061b4:	e13ffe17 	ldw	r4,-8(fp)
  8061b8:	08056f00 	call	8056f0 <lcd_repaint_screen>

  return sp->period;
  8061bc:	e0bffe17 	ldw	r2,-8(fp)
  8061c0:	10800717 	ldw	r2,28(r2)
}
  8061c4:	e037883a 	mov	sp,fp
  8061c8:	dfc00117 	ldw	ra,4(sp)
  8061cc:	df000017 	ldw	fp,0(sp)
  8061d0:	dec00204 	addi	sp,sp,8
  8061d4:	f800283a 	ret

008061d8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8061d8:	defffc04 	addi	sp,sp,-16
  8061dc:	dfc00315 	stw	ra,12(sp)
  8061e0:	df000215 	stw	fp,8(sp)
  8061e4:	df000204 	addi	fp,sp,8
  8061e8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8061ec:	e0bfff17 	ldw	r2,-4(fp)
  8061f0:	10800017 	ldw	r2,0(r2)
  8061f4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8061f8:	e0bfff17 	ldw	r2,-4(fp)
  8061fc:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  806200:	010ea604 	movi	r4,15000
  806204:	08075880 	call	807588 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806208:	e0bffe17 	ldw	r2,-8(fp)
  80620c:	00c00c04 	movi	r3,48
  806210:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  806214:	01040104 	movi	r4,4100
  806218:	08075880 	call	807588 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80621c:	e0bffe17 	ldw	r2,-8(fp)
  806220:	00c00c04 	movi	r3,48
  806224:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  806228:	0100fa04 	movi	r4,1000
  80622c:	08075880 	call	807588 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806230:	e0bffe17 	ldw	r2,-8(fp)
  806234:	00c00c04 	movi	r3,48
  806238:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80623c:	01400e04 	movi	r5,56
  806240:	e13fff17 	ldw	r4,-4(fp)
  806244:	08054900 	call	805490 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  806248:	01400204 	movi	r5,8
  80624c:	e13fff17 	ldw	r4,-4(fp)
  806250:	08054900 	call	805490 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  806254:	e13fff17 	ldw	r4,-4(fp)
  806258:	08056200 	call	805620 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80625c:	01400184 	movi	r5,6
  806260:	e13fff17 	ldw	r4,-4(fp)
  806264:	08054900 	call	805490 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  806268:	01400304 	movi	r5,12
  80626c:	e13fff17 	ldw	r4,-4(fp)
  806270:	08054900 	call	805490 <lcd_write_command>

  sp->esccount = -1;
  806274:	e0bfff17 	ldw	r2,-4(fp)
  806278:	00ffffc4 	movi	r3,-1
  80627c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  806280:	e0bfff17 	ldw	r2,-4(fp)
  806284:	10800a04 	addi	r2,r2,40
  806288:	01800204 	movi	r6,8
  80628c:	000b883a 	mov	r5,zero
  806290:	1009883a 	mov	r4,r2
  806294:	08024ac0 	call	8024ac <memset>

  sp->scrollpos = 0;
  806298:	e0bfff17 	ldw	r2,-4(fp)
  80629c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8062a0:	e0bfff17 	ldw	r2,-4(fp)
  8062a4:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8062a8:	e0bfff17 	ldw	r2,-4(fp)
  8062ac:	100009c5 	stb	zero,39(r2)
  8062b0:	d0a73217 	ldw	r2,-25400(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8062b4:	01400284 	movi	r5,10
  8062b8:	1009883a 	mov	r4,r2
  8062bc:	0803ad40 	call	803ad4 <__udivsi3>
  8062c0:	1007883a 	mov	r3,r2
  8062c4:	e0bfff17 	ldw	r2,-4(fp)
  8062c8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8062cc:	e0bfff17 	ldw	r2,-4(fp)
  8062d0:	10c00104 	addi	r3,r2,4
  8062d4:	e0bfff17 	ldw	r2,-4(fp)
  8062d8:	10800717 	ldw	r2,28(r2)
  8062dc:	e1ffff17 	ldw	r7,-4(fp)
  8062e0:	01802034 	movhi	r6,128
  8062e4:	31984b04 	addi	r6,r6,24876
  8062e8:	100b883a 	mov	r5,r2
  8062ec:	1809883a 	mov	r4,r3
  8062f0:	0803b900 	call	803b90 <alt_alarm_start>
}
  8062f4:	0001883a 	nop
  8062f8:	e037883a 	mov	sp,fp
  8062fc:	dfc00117 	ldw	ra,4(sp)
  806300:	df000017 	ldw	fp,0(sp)
  806304:	dec00204 	addi	sp,sp,8
  806308:	f800283a 	ret

0080630c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80630c:	defffa04 	addi	sp,sp,-24
  806310:	dfc00515 	stw	ra,20(sp)
  806314:	df000415 	stw	fp,16(sp)
  806318:	df000404 	addi	fp,sp,16
  80631c:	e13ffd15 	stw	r4,-12(fp)
  806320:	e17ffe15 	stw	r5,-8(fp)
  806324:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  806328:	e0bffd17 	ldw	r2,-12(fp)
  80632c:	10800017 	ldw	r2,0(r2)
  806330:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  806334:	e0bffc17 	ldw	r2,-16(fp)
  806338:	10c00a04 	addi	r3,r2,40
  80633c:	e0bffd17 	ldw	r2,-12(fp)
  806340:	10800217 	ldw	r2,8(r2)
  806344:	100f883a 	mov	r7,r2
  806348:	e1bfff17 	ldw	r6,-4(fp)
  80634c:	e17ffe17 	ldw	r5,-8(fp)
  806350:	1809883a 	mov	r4,r3
  806354:	0805c540 	call	805c54 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  806358:	e037883a 	mov	sp,fp
  80635c:	dfc00117 	ldw	ra,4(sp)
  806360:	df000017 	ldw	fp,0(sp)
  806364:	dec00204 	addi	sp,sp,8
  806368:	f800283a 	ret

0080636c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80636c:	defffa04 	addi	sp,sp,-24
  806370:	dfc00515 	stw	ra,20(sp)
  806374:	df000415 	stw	fp,16(sp)
  806378:	df000404 	addi	fp,sp,16
  80637c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  806380:	0007883a 	mov	r3,zero
  806384:	e0bfff17 	ldw	r2,-4(fp)
  806388:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80638c:	e0bfff17 	ldw	r2,-4(fp)
  806390:	10800104 	addi	r2,r2,4
  806394:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806398:	0005303a 	rdctl	r2,status
  80639c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8063a0:	e0fffd17 	ldw	r3,-12(fp)
  8063a4:	00bfff84 	movi	r2,-2
  8063a8:	1884703a 	and	r2,r3,r2
  8063ac:	1001703a 	wrctl	status,r2
  
  return context;
  8063b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8063b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8063b8:	08046e80 	call	8046e8 <alt_tick>
  8063bc:	e0bffc17 	ldw	r2,-16(fp)
  8063c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8063c4:	e0bffe17 	ldw	r2,-8(fp)
  8063c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8063cc:	0001883a 	nop
  8063d0:	e037883a 	mov	sp,fp
  8063d4:	dfc00117 	ldw	ra,4(sp)
  8063d8:	df000017 	ldw	fp,0(sp)
  8063dc:	dec00204 	addi	sp,sp,8
  8063e0:	f800283a 	ret

008063e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8063e4:	defff804 	addi	sp,sp,-32
  8063e8:	dfc00715 	stw	ra,28(sp)
  8063ec:	df000615 	stw	fp,24(sp)
  8063f0:	df000604 	addi	fp,sp,24
  8063f4:	e13ffc15 	stw	r4,-16(fp)
  8063f8:	e17ffd15 	stw	r5,-12(fp)
  8063fc:	e1bffe15 	stw	r6,-8(fp)
  806400:	e1ffff15 	stw	r7,-4(fp)
  806404:	e0bfff17 	ldw	r2,-4(fp)
  806408:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80640c:	d0a73217 	ldw	r2,-25400(gp)
  806410:	1000021e 	bne	r2,zero,80641c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  806414:	e0bffb17 	ldw	r2,-20(fp)
  806418:	d0a73215 	stw	r2,-25400(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80641c:	e0bffc17 	ldw	r2,-16(fp)
  806420:	10800104 	addi	r2,r2,4
  806424:	00c001c4 	movi	r3,7
  806428:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80642c:	d8000015 	stw	zero,0(sp)
  806430:	e1fffc17 	ldw	r7,-16(fp)
  806434:	01802034 	movhi	r6,128
  806438:	3198db04 	addi	r6,r6,25452
  80643c:	e17ffe17 	ldw	r5,-8(fp)
  806440:	e13ffd17 	ldw	r4,-12(fp)
  806444:	0806f540 	call	806f54 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  806448:	0001883a 	nop
  80644c:	e037883a 	mov	sp,fp
  806450:	dfc00117 	ldw	ra,4(sp)
  806454:	df000017 	ldw	fp,0(sp)
  806458:	dec00204 	addi	sp,sp,8
  80645c:	f800283a 	ret

00806460 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  806460:	defffa04 	addi	sp,sp,-24
  806464:	dfc00515 	stw	ra,20(sp)
  806468:	df000415 	stw	fp,16(sp)
  80646c:	df000404 	addi	fp,sp,16
  806470:	e13ffd15 	stw	r4,-12(fp)
  806474:	e17ffe15 	stw	r5,-8(fp)
  806478:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80647c:	e0bffd17 	ldw	r2,-12(fp)
  806480:	10800017 	ldw	r2,0(r2)
  806484:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  806488:	e0bffc17 	ldw	r2,-16(fp)
  80648c:	10c00a04 	addi	r3,r2,40
  806490:	e0bffd17 	ldw	r2,-12(fp)
  806494:	10800217 	ldw	r2,8(r2)
  806498:	100f883a 	mov	r7,r2
  80649c:	e1bfff17 	ldw	r6,-4(fp)
  8064a0:	e17ffe17 	ldw	r5,-8(fp)
  8064a4:	1809883a 	mov	r4,r3
  8064a8:	08069740 	call	806974 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8064ac:	e037883a 	mov	sp,fp
  8064b0:	dfc00117 	ldw	ra,4(sp)
  8064b4:	df000017 	ldw	fp,0(sp)
  8064b8:	dec00204 	addi	sp,sp,8
  8064bc:	f800283a 	ret

008064c0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8064c0:	defffa04 	addi	sp,sp,-24
  8064c4:	dfc00515 	stw	ra,20(sp)
  8064c8:	df000415 	stw	fp,16(sp)
  8064cc:	df000404 	addi	fp,sp,16
  8064d0:	e13ffd15 	stw	r4,-12(fp)
  8064d4:	e17ffe15 	stw	r5,-8(fp)
  8064d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8064dc:	e0bffd17 	ldw	r2,-12(fp)
  8064e0:	10800017 	ldw	r2,0(r2)
  8064e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8064e8:	e0bffc17 	ldw	r2,-16(fp)
  8064ec:	10c00a04 	addi	r3,r2,40
  8064f0:	e0bffd17 	ldw	r2,-12(fp)
  8064f4:	10800217 	ldw	r2,8(r2)
  8064f8:	100f883a 	mov	r7,r2
  8064fc:	e1bfff17 	ldw	r6,-4(fp)
  806500:	e17ffe17 	ldw	r5,-8(fp)
  806504:	1809883a 	mov	r4,r3
  806508:	0806b8c0 	call	806b8c <altera_avalon_uart_write>
      fd->fd_flags);
}
  80650c:	e037883a 	mov	sp,fp
  806510:	dfc00117 	ldw	ra,4(sp)
  806514:	df000017 	ldw	fp,0(sp)
  806518:	dec00204 	addi	sp,sp,8
  80651c:	f800283a 	ret

00806520 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  806520:	defffc04 	addi	sp,sp,-16
  806524:	dfc00315 	stw	ra,12(sp)
  806528:	df000215 	stw	fp,8(sp)
  80652c:	df000204 	addi	fp,sp,8
  806530:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  806534:	e0bfff17 	ldw	r2,-4(fp)
  806538:	10800017 	ldw	r2,0(r2)
  80653c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  806540:	e0bffe17 	ldw	r2,-8(fp)
  806544:	10c00a04 	addi	r3,r2,40
  806548:	e0bfff17 	ldw	r2,-4(fp)
  80654c:	10800217 	ldw	r2,8(r2)
  806550:	100b883a 	mov	r5,r2
  806554:	1809883a 	mov	r4,r3
  806558:	08068e40 	call	8068e4 <altera_avalon_uart_close>
}
  80655c:	e037883a 	mov	sp,fp
  806560:	dfc00117 	ldw	ra,4(sp)
  806564:	df000017 	ldw	fp,0(sp)
  806568:	dec00204 	addi	sp,sp,8
  80656c:	f800283a 	ret

00806570 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  806570:	defff804 	addi	sp,sp,-32
  806574:	dfc00715 	stw	ra,28(sp)
  806578:	df000615 	stw	fp,24(sp)
  80657c:	df000604 	addi	fp,sp,24
  806580:	e13ffd15 	stw	r4,-12(fp)
  806584:	e17ffe15 	stw	r5,-8(fp)
  806588:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80658c:	e0bffd17 	ldw	r2,-12(fp)
  806590:	10800017 	ldw	r2,0(r2)
  806594:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  806598:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80659c:	1000041e 	bne	r2,zero,8065b0 <altera_avalon_uart_init+0x40>
  8065a0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8065a4:	1000021e 	bne	r2,zero,8065b0 <altera_avalon_uart_init+0x40>
  8065a8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8065ac:	10000226 	beq	r2,zero,8065b8 <altera_avalon_uart_init+0x48>
  8065b0:	00800044 	movi	r2,1
  8065b4:	00000106 	br	8065bc <altera_avalon_uart_init+0x4c>
  8065b8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8065bc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8065c0:	e0bffc17 	ldw	r2,-16(fp)
  8065c4:	10000f1e 	bne	r2,zero,806604 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8065c8:	e0bffd17 	ldw	r2,-12(fp)
  8065cc:	00c32004 	movi	r3,3200
  8065d0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8065d4:	e0bffb17 	ldw	r2,-20(fp)
  8065d8:	10800304 	addi	r2,r2,12
  8065dc:	e0fffd17 	ldw	r3,-12(fp)
  8065e0:	18c00117 	ldw	r3,4(r3)
  8065e4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8065e8:	d8000015 	stw	zero,0(sp)
  8065ec:	e1fffd17 	ldw	r7,-12(fp)
  8065f0:	01802034 	movhi	r6,128
  8065f4:	31998704 	addi	r6,r6,26140
  8065f8:	e17fff17 	ldw	r5,-4(fp)
  8065fc:	e13ffe17 	ldw	r4,-8(fp)
  806600:	0806f540 	call	806f54 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  806604:	0001883a 	nop
  806608:	e037883a 	mov	sp,fp
  80660c:	dfc00117 	ldw	ra,4(sp)
  806610:	df000017 	ldw	fp,0(sp)
  806614:	dec00204 	addi	sp,sp,8
  806618:	f800283a 	ret

0080661c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80661c:	defffa04 	addi	sp,sp,-24
  806620:	dfc00515 	stw	ra,20(sp)
  806624:	df000415 	stw	fp,16(sp)
  806628:	df000404 	addi	fp,sp,16
  80662c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  806630:	e0bfff17 	ldw	r2,-4(fp)
  806634:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  806638:	e0bffc17 	ldw	r2,-16(fp)
  80663c:	10800017 	ldw	r2,0(r2)
  806640:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  806644:	e0bffd17 	ldw	r2,-12(fp)
  806648:	10800204 	addi	r2,r2,8
  80664c:	10800037 	ldwio	r2,0(r2)
  806650:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  806654:	e0bffd17 	ldw	r2,-12(fp)
  806658:	10800204 	addi	r2,r2,8
  80665c:	0007883a 	mov	r3,zero
  806660:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  806664:	e0bffd17 	ldw	r2,-12(fp)
  806668:	10800204 	addi	r2,r2,8
  80666c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  806670:	e0bffe17 	ldw	r2,-8(fp)
  806674:	1080200c 	andi	r2,r2,128
  806678:	10000326 	beq	r2,zero,806688 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80667c:	e17ffe17 	ldw	r5,-8(fp)
  806680:	e13ffc17 	ldw	r4,-16(fp)
  806684:	08066b80 	call	8066b8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  806688:	e0bffe17 	ldw	r2,-8(fp)
  80668c:	1081100c 	andi	r2,r2,1088
  806690:	10000326 	beq	r2,zero,8066a0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  806694:	e17ffe17 	ldw	r5,-8(fp)
  806698:	e13ffc17 	ldw	r4,-16(fp)
  80669c:	080679c0 	call	80679c <altera_avalon_uart_txirq>
  }
  

}
  8066a0:	0001883a 	nop
  8066a4:	e037883a 	mov	sp,fp
  8066a8:	dfc00117 	ldw	ra,4(sp)
  8066ac:	df000017 	ldw	fp,0(sp)
  8066b0:	dec00204 	addi	sp,sp,8
  8066b4:	f800283a 	ret

008066b8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8066b8:	defffc04 	addi	sp,sp,-16
  8066bc:	df000315 	stw	fp,12(sp)
  8066c0:	df000304 	addi	fp,sp,12
  8066c4:	e13ffe15 	stw	r4,-8(fp)
  8066c8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8066cc:	e0bfff17 	ldw	r2,-4(fp)
  8066d0:	108000cc 	andi	r2,r2,3
  8066d4:	10002c1e 	bne	r2,zero,806788 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8066d8:	e0bffe17 	ldw	r2,-8(fp)
  8066dc:	10800317 	ldw	r2,12(r2)
  8066e0:	e0bffe17 	ldw	r2,-8(fp)
  8066e4:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8066e8:	e0bffe17 	ldw	r2,-8(fp)
  8066ec:	10800317 	ldw	r2,12(r2)
  8066f0:	10800044 	addi	r2,r2,1
  8066f4:	10800fcc 	andi	r2,r2,63
  8066f8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8066fc:	e0bffe17 	ldw	r2,-8(fp)
  806700:	10800317 	ldw	r2,12(r2)
  806704:	e0fffe17 	ldw	r3,-8(fp)
  806708:	18c00017 	ldw	r3,0(r3)
  80670c:	18c00037 	ldwio	r3,0(r3)
  806710:	1809883a 	mov	r4,r3
  806714:	e0fffe17 	ldw	r3,-8(fp)
  806718:	1885883a 	add	r2,r3,r2
  80671c:	10800704 	addi	r2,r2,28
  806720:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  806724:	e0bffe17 	ldw	r2,-8(fp)
  806728:	e0fffd17 	ldw	r3,-12(fp)
  80672c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  806730:	e0bffe17 	ldw	r2,-8(fp)
  806734:	10800317 	ldw	r2,12(r2)
  806738:	10800044 	addi	r2,r2,1
  80673c:	10800fcc 	andi	r2,r2,63
  806740:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  806744:	e0bffe17 	ldw	r2,-8(fp)
  806748:	10c00217 	ldw	r3,8(r2)
  80674c:	e0bffd17 	ldw	r2,-12(fp)
  806750:	18800e1e 	bne	r3,r2,80678c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  806754:	e0bffe17 	ldw	r2,-8(fp)
  806758:	10c00117 	ldw	r3,4(r2)
  80675c:	00bfdfc4 	movi	r2,-129
  806760:	1886703a 	and	r3,r3,r2
  806764:	e0bffe17 	ldw	r2,-8(fp)
  806768:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80676c:	e0bffe17 	ldw	r2,-8(fp)
  806770:	10800017 	ldw	r2,0(r2)
  806774:	10800304 	addi	r2,r2,12
  806778:	e0fffe17 	ldw	r3,-8(fp)
  80677c:	18c00117 	ldw	r3,4(r3)
  806780:	10c00035 	stwio	r3,0(r2)
  806784:	00000106 	br	80678c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  806788:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80678c:	e037883a 	mov	sp,fp
  806790:	df000017 	ldw	fp,0(sp)
  806794:	dec00104 	addi	sp,sp,4
  806798:	f800283a 	ret

0080679c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80679c:	defffb04 	addi	sp,sp,-20
  8067a0:	df000415 	stw	fp,16(sp)
  8067a4:	df000404 	addi	fp,sp,16
  8067a8:	e13ffc15 	stw	r4,-16(fp)
  8067ac:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8067b0:	e0bffc17 	ldw	r2,-16(fp)
  8067b4:	10c00417 	ldw	r3,16(r2)
  8067b8:	e0bffc17 	ldw	r2,-16(fp)
  8067bc:	10800517 	ldw	r2,20(r2)
  8067c0:	18803226 	beq	r3,r2,80688c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8067c4:	e0bffc17 	ldw	r2,-16(fp)
  8067c8:	10800617 	ldw	r2,24(r2)
  8067cc:	1080008c 	andi	r2,r2,2
  8067d0:	10000326 	beq	r2,zero,8067e0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8067d4:	e0bffd17 	ldw	r2,-12(fp)
  8067d8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8067dc:	10001d26 	beq	r2,zero,806854 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8067e0:	e0bffc17 	ldw	r2,-16(fp)
  8067e4:	10800417 	ldw	r2,16(r2)
  8067e8:	e0bffc17 	ldw	r2,-16(fp)
  8067ec:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8067f0:	e0bffc17 	ldw	r2,-16(fp)
  8067f4:	10800017 	ldw	r2,0(r2)
  8067f8:	10800104 	addi	r2,r2,4
  8067fc:	e0fffc17 	ldw	r3,-16(fp)
  806800:	18c00417 	ldw	r3,16(r3)
  806804:	e13ffc17 	ldw	r4,-16(fp)
  806808:	20c7883a 	add	r3,r4,r3
  80680c:	18c01704 	addi	r3,r3,92
  806810:	18c00003 	ldbu	r3,0(r3)
  806814:	18c03fcc 	andi	r3,r3,255
  806818:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80681c:	e0bffc17 	ldw	r2,-16(fp)
  806820:	10800417 	ldw	r2,16(r2)
  806824:	10800044 	addi	r2,r2,1
  806828:	e0fffc17 	ldw	r3,-16(fp)
  80682c:	18800415 	stw	r2,16(r3)
  806830:	10c00fcc 	andi	r3,r2,63
  806834:	e0bffc17 	ldw	r2,-16(fp)
  806838:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80683c:	e0bffc17 	ldw	r2,-16(fp)
  806840:	10800117 	ldw	r2,4(r2)
  806844:	10c01014 	ori	r3,r2,64
  806848:	e0bffc17 	ldw	r2,-16(fp)
  80684c:	10c00115 	stw	r3,4(r2)
  806850:	00000e06 	br	80688c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  806854:	e0bffc17 	ldw	r2,-16(fp)
  806858:	10800017 	ldw	r2,0(r2)
  80685c:	10800204 	addi	r2,r2,8
  806860:	10800037 	ldwio	r2,0(r2)
  806864:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  806868:	e0bffd17 	ldw	r2,-12(fp)
  80686c:	1082000c 	andi	r2,r2,2048
  806870:	1000061e 	bne	r2,zero,80688c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  806874:	e0bffc17 	ldw	r2,-16(fp)
  806878:	10c00117 	ldw	r3,4(r2)
  80687c:	00bfefc4 	movi	r2,-65
  806880:	1886703a 	and	r3,r3,r2
  806884:	e0bffc17 	ldw	r2,-16(fp)
  806888:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80688c:	e0bffc17 	ldw	r2,-16(fp)
  806890:	10c00417 	ldw	r3,16(r2)
  806894:	e0bffc17 	ldw	r2,-16(fp)
  806898:	10800517 	ldw	r2,20(r2)
  80689c:	1880061e 	bne	r3,r2,8068b8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8068a0:	e0bffc17 	ldw	r2,-16(fp)
  8068a4:	10c00117 	ldw	r3,4(r2)
  8068a8:	00beefc4 	movi	r2,-1089
  8068ac:	1886703a 	and	r3,r3,r2
  8068b0:	e0bffc17 	ldw	r2,-16(fp)
  8068b4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8068b8:	e0bffc17 	ldw	r2,-16(fp)
  8068bc:	10800017 	ldw	r2,0(r2)
  8068c0:	10800304 	addi	r2,r2,12
  8068c4:	e0fffc17 	ldw	r3,-16(fp)
  8068c8:	18c00117 	ldw	r3,4(r3)
  8068cc:	10c00035 	stwio	r3,0(r2)
}
  8068d0:	0001883a 	nop
  8068d4:	e037883a 	mov	sp,fp
  8068d8:	df000017 	ldw	fp,0(sp)
  8068dc:	dec00104 	addi	sp,sp,4
  8068e0:	f800283a 	ret

008068e4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8068e4:	defffd04 	addi	sp,sp,-12
  8068e8:	df000215 	stw	fp,8(sp)
  8068ec:	df000204 	addi	fp,sp,8
  8068f0:	e13ffe15 	stw	r4,-8(fp)
  8068f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8068f8:	00000506 	br	806910 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8068fc:	e0bfff17 	ldw	r2,-4(fp)
  806900:	1090000c 	andi	r2,r2,16384
  806904:	10000226 	beq	r2,zero,806910 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  806908:	00bffd44 	movi	r2,-11
  80690c:	00000606 	br	806928 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  806910:	e0bffe17 	ldw	r2,-8(fp)
  806914:	10c00417 	ldw	r3,16(r2)
  806918:	e0bffe17 	ldw	r2,-8(fp)
  80691c:	10800517 	ldw	r2,20(r2)
  806920:	18bff61e 	bne	r3,r2,8068fc <__alt_mem_onchip_mem+0xff7fe8fc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  806924:	0005883a 	mov	r2,zero
}
  806928:	e037883a 	mov	sp,fp
  80692c:	df000017 	ldw	fp,0(sp)
  806930:	dec00104 	addi	sp,sp,4
  806934:	f800283a 	ret

00806938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806938:	defffe04 	addi	sp,sp,-8
  80693c:	dfc00115 	stw	ra,4(sp)
  806940:	df000015 	stw	fp,0(sp)
  806944:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806948:	d0a00917 	ldw	r2,-32732(gp)
  80694c:	10000326 	beq	r2,zero,80695c <alt_get_errno+0x24>
  806950:	d0a00917 	ldw	r2,-32732(gp)
  806954:	103ee83a 	callr	r2
  806958:	00000106 	br	806960 <alt_get_errno+0x28>
  80695c:	d0a72d04 	addi	r2,gp,-25420
}
  806960:	e037883a 	mov	sp,fp
  806964:	dfc00117 	ldw	ra,4(sp)
  806968:	df000017 	ldw	fp,0(sp)
  80696c:	dec00204 	addi	sp,sp,8
  806970:	f800283a 	ret

00806974 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  806974:	defff204 	addi	sp,sp,-56
  806978:	dfc00d15 	stw	ra,52(sp)
  80697c:	df000c15 	stw	fp,48(sp)
  806980:	df000c04 	addi	fp,sp,48
  806984:	e13ffc15 	stw	r4,-16(fp)
  806988:	e17ffd15 	stw	r5,-12(fp)
  80698c:	e1bffe15 	stw	r6,-8(fp)
  806990:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  806994:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  806998:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80699c:	e0bfff17 	ldw	r2,-4(fp)
  8069a0:	1090000c 	andi	r2,r2,16384
  8069a4:	1005003a 	cmpeq	r2,r2,zero
  8069a8:	10803fcc 	andi	r2,r2,255
  8069ac:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8069b0:	00001306 	br	806a00 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8069b4:	e0bff517 	ldw	r2,-44(fp)
  8069b8:	10800044 	addi	r2,r2,1
  8069bc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8069c0:	e0bffd17 	ldw	r2,-12(fp)
  8069c4:	10c00044 	addi	r3,r2,1
  8069c8:	e0fffd15 	stw	r3,-12(fp)
  8069cc:	e0fffc17 	ldw	r3,-16(fp)
  8069d0:	18c00217 	ldw	r3,8(r3)
  8069d4:	e13ffc17 	ldw	r4,-16(fp)
  8069d8:	20c7883a 	add	r3,r4,r3
  8069dc:	18c00704 	addi	r3,r3,28
  8069e0:	18c00003 	ldbu	r3,0(r3)
  8069e4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  8069e8:	e0bffc17 	ldw	r2,-16(fp)
  8069ec:	10800217 	ldw	r2,8(r2)
  8069f0:	10800044 	addi	r2,r2,1
  8069f4:	10c00fcc 	andi	r3,r2,63
  8069f8:	e0bffc17 	ldw	r2,-16(fp)
  8069fc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  806a00:	e0fff517 	ldw	r3,-44(fp)
  806a04:	e0bffe17 	ldw	r2,-8(fp)
  806a08:	1880050e 	bge	r3,r2,806a20 <altera_avalon_uart_read+0xac>
  806a0c:	e0bffc17 	ldw	r2,-16(fp)
  806a10:	10c00217 	ldw	r3,8(r2)
  806a14:	e0bffc17 	ldw	r2,-16(fp)
  806a18:	10800317 	ldw	r2,12(r2)
  806a1c:	18bfe51e 	bne	r3,r2,8069b4 <__alt_mem_onchip_mem+0xff7fe9b4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  806a20:	e0bff517 	ldw	r2,-44(fp)
  806a24:	1000251e 	bne	r2,zero,806abc <altera_avalon_uart_read+0x148>
  806a28:	e0bffc17 	ldw	r2,-16(fp)
  806a2c:	10c00217 	ldw	r3,8(r2)
  806a30:	e0bffc17 	ldw	r2,-16(fp)
  806a34:	10800317 	ldw	r2,12(r2)
  806a38:	1880201e 	bne	r3,r2,806abc <altera_avalon_uart_read+0x148>
    {
      if (!block)
  806a3c:	e0bff617 	ldw	r2,-40(fp)
  806a40:	1000071e 	bne	r2,zero,806a60 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  806a44:	08069380 	call	806938 <alt_get_errno>
  806a48:	1007883a 	mov	r3,r2
  806a4c:	008002c4 	movi	r2,11
  806a50:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  806a54:	00800044 	movi	r2,1
  806a58:	e0bff405 	stb	r2,-48(fp)
        break;
  806a5c:	00001b06 	br	806acc <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806a60:	0005303a 	rdctl	r2,status
  806a64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806a68:	e0fff917 	ldw	r3,-28(fp)
  806a6c:	00bfff84 	movi	r2,-2
  806a70:	1884703a 	and	r2,r3,r2
  806a74:	1001703a 	wrctl	status,r2
  
  return context;
  806a78:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  806a7c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  806a80:	e0bffc17 	ldw	r2,-16(fp)
  806a84:	10800117 	ldw	r2,4(r2)
  806a88:	10c02014 	ori	r3,r2,128
  806a8c:	e0bffc17 	ldw	r2,-16(fp)
  806a90:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  806a94:	e0bffc17 	ldw	r2,-16(fp)
  806a98:	10800017 	ldw	r2,0(r2)
  806a9c:	10800304 	addi	r2,r2,12
  806aa0:	e0fffc17 	ldw	r3,-16(fp)
  806aa4:	18c00117 	ldw	r3,4(r3)
  806aa8:	10c00035 	stwio	r3,0(r2)
  806aac:	e0bff817 	ldw	r2,-32(fp)
  806ab0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806ab4:	e0bffa17 	ldw	r2,-24(fp)
  806ab8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  806abc:	e0bff517 	ldw	r2,-44(fp)
  806ac0:	1000021e 	bne	r2,zero,806acc <altera_avalon_uart_read+0x158>
  806ac4:	e0bffe17 	ldw	r2,-8(fp)
  806ac8:	103fcd1e 	bne	r2,zero,806a00 <__alt_mem_onchip_mem+0xff7fea00>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806acc:	0005303a 	rdctl	r2,status
  806ad0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806ad4:	e0fffb17 	ldw	r3,-20(fp)
  806ad8:	00bfff84 	movi	r2,-2
  806adc:	1884703a 	and	r2,r3,r2
  806ae0:	1001703a 	wrctl	status,r2
  
  return context;
  806ae4:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  806ae8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  806aec:	e0bffc17 	ldw	r2,-16(fp)
  806af0:	10800117 	ldw	r2,4(r2)
  806af4:	10c02014 	ori	r3,r2,128
  806af8:	e0bffc17 	ldw	r2,-16(fp)
  806afc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  806b00:	e0bffc17 	ldw	r2,-16(fp)
  806b04:	10800017 	ldw	r2,0(r2)
  806b08:	10800304 	addi	r2,r2,12
  806b0c:	e0fffc17 	ldw	r3,-16(fp)
  806b10:	18c00117 	ldw	r3,4(r3)
  806b14:	10c00035 	stwio	r3,0(r2)
  806b18:	e0bff817 	ldw	r2,-32(fp)
  806b1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806b20:	e0bff717 	ldw	r2,-36(fp)
  806b24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  806b28:	e0bff403 	ldbu	r2,-48(fp)
  806b2c:	10000226 	beq	r2,zero,806b38 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  806b30:	00bffd44 	movi	r2,-11
  806b34:	00000106 	br	806b3c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  806b38:	e0bff517 	ldw	r2,-44(fp)
  }
}
  806b3c:	e037883a 	mov	sp,fp
  806b40:	dfc00117 	ldw	ra,4(sp)
  806b44:	df000017 	ldw	fp,0(sp)
  806b48:	dec00204 	addi	sp,sp,8
  806b4c:	f800283a 	ret

00806b50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806b50:	defffe04 	addi	sp,sp,-8
  806b54:	dfc00115 	stw	ra,4(sp)
  806b58:	df000015 	stw	fp,0(sp)
  806b5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806b60:	d0a00917 	ldw	r2,-32732(gp)
  806b64:	10000326 	beq	r2,zero,806b74 <alt_get_errno+0x24>
  806b68:	d0a00917 	ldw	r2,-32732(gp)
  806b6c:	103ee83a 	callr	r2
  806b70:	00000106 	br	806b78 <alt_get_errno+0x28>
  806b74:	d0a72d04 	addi	r2,gp,-25420
}
  806b78:	e037883a 	mov	sp,fp
  806b7c:	dfc00117 	ldw	ra,4(sp)
  806b80:	df000017 	ldw	fp,0(sp)
  806b84:	dec00204 	addi	sp,sp,8
  806b88:	f800283a 	ret

00806b8c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  806b8c:	defff204 	addi	sp,sp,-56
  806b90:	dfc00d15 	stw	ra,52(sp)
  806b94:	df000c15 	stw	fp,48(sp)
  806b98:	df000c04 	addi	fp,sp,48
  806b9c:	e13ffc15 	stw	r4,-16(fp)
  806ba0:	e17ffd15 	stw	r5,-12(fp)
  806ba4:	e1bffe15 	stw	r6,-8(fp)
  806ba8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  806bac:	e0bffe17 	ldw	r2,-8(fp)
  806bb0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  806bb4:	e0bfff17 	ldw	r2,-4(fp)
  806bb8:	1090000c 	andi	r2,r2,16384
  806bbc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  806bc0:	00003c06 	br	806cb4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  806bc4:	e0bffc17 	ldw	r2,-16(fp)
  806bc8:	10800517 	ldw	r2,20(r2)
  806bcc:	10800044 	addi	r2,r2,1
  806bd0:	10800fcc 	andi	r2,r2,63
  806bd4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  806bd8:	e0bffc17 	ldw	r2,-16(fp)
  806bdc:	10c00417 	ldw	r3,16(r2)
  806be0:	e0bff717 	ldw	r2,-36(fp)
  806be4:	1880221e 	bne	r3,r2,806c70 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  806be8:	e0bff517 	ldw	r2,-44(fp)
  806bec:	10000526 	beq	r2,zero,806c04 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  806bf0:	0806b500 	call	806b50 <alt_get_errno>
  806bf4:	1007883a 	mov	r3,r2
  806bf8:	008002c4 	movi	r2,11
  806bfc:	18800015 	stw	r2,0(r3)
        break;
  806c00:	00002e06 	br	806cbc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806c04:	0005303a 	rdctl	r2,status
  806c08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806c0c:	e0fff917 	ldw	r3,-28(fp)
  806c10:	00bfff84 	movi	r2,-2
  806c14:	1884703a 	and	r2,r3,r2
  806c18:	1001703a 	wrctl	status,r2
  
  return context;
  806c1c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  806c20:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  806c24:	e0bffc17 	ldw	r2,-16(fp)
  806c28:	10800117 	ldw	r2,4(r2)
  806c2c:	10c11014 	ori	r3,r2,1088
  806c30:	e0bffc17 	ldw	r2,-16(fp)
  806c34:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  806c38:	e0bffc17 	ldw	r2,-16(fp)
  806c3c:	10800017 	ldw	r2,0(r2)
  806c40:	10800304 	addi	r2,r2,12
  806c44:	e0fffc17 	ldw	r3,-16(fp)
  806c48:	18c00117 	ldw	r3,4(r3)
  806c4c:	10c00035 	stwio	r3,0(r2)
  806c50:	e0bff817 	ldw	r2,-32(fp)
  806c54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806c58:	e0bff617 	ldw	r2,-40(fp)
  806c5c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  806c60:	e0bffc17 	ldw	r2,-16(fp)
  806c64:	10c00417 	ldw	r3,16(r2)
  806c68:	e0bff717 	ldw	r2,-36(fp)
  806c6c:	18bffc26 	beq	r3,r2,806c60 <__alt_mem_onchip_mem+0xff7fec60>
      }
    }

    count--;
  806c70:	e0bff417 	ldw	r2,-48(fp)
  806c74:	10bfffc4 	addi	r2,r2,-1
  806c78:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  806c7c:	e0bffc17 	ldw	r2,-16(fp)
  806c80:	10c00517 	ldw	r3,20(r2)
  806c84:	e0bffd17 	ldw	r2,-12(fp)
  806c88:	11000044 	addi	r4,r2,1
  806c8c:	e13ffd15 	stw	r4,-12(fp)
  806c90:	10800003 	ldbu	r2,0(r2)
  806c94:	1009883a 	mov	r4,r2
  806c98:	e0bffc17 	ldw	r2,-16(fp)
  806c9c:	10c5883a 	add	r2,r2,r3
  806ca0:	10801704 	addi	r2,r2,92
  806ca4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  806ca8:	e0bffc17 	ldw	r2,-16(fp)
  806cac:	e0fff717 	ldw	r3,-36(fp)
  806cb0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  806cb4:	e0bff417 	ldw	r2,-48(fp)
  806cb8:	103fc21e 	bne	r2,zero,806bc4 <__alt_mem_onchip_mem+0xff7febc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806cbc:	0005303a 	rdctl	r2,status
  806cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806cc4:	e0fffb17 	ldw	r3,-20(fp)
  806cc8:	00bfff84 	movi	r2,-2
  806ccc:	1884703a 	and	r2,r3,r2
  806cd0:	1001703a 	wrctl	status,r2
  
  return context;
  806cd4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  806cd8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  806cdc:	e0bffc17 	ldw	r2,-16(fp)
  806ce0:	10800117 	ldw	r2,4(r2)
  806ce4:	10c11014 	ori	r3,r2,1088
  806ce8:	e0bffc17 	ldw	r2,-16(fp)
  806cec:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  806cf0:	e0bffc17 	ldw	r2,-16(fp)
  806cf4:	10800017 	ldw	r2,0(r2)
  806cf8:	10800304 	addi	r2,r2,12
  806cfc:	e0fffc17 	ldw	r3,-16(fp)
  806d00:	18c00117 	ldw	r3,4(r3)
  806d04:	10c00035 	stwio	r3,0(r2)
  806d08:	e0bff817 	ldw	r2,-32(fp)
  806d0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806d10:	e0bffa17 	ldw	r2,-24(fp)
  806d14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  806d18:	e0fffe17 	ldw	r3,-8(fp)
  806d1c:	e0bff417 	ldw	r2,-48(fp)
  806d20:	1885c83a 	sub	r2,r3,r2
}
  806d24:	e037883a 	mov	sp,fp
  806d28:	dfc00117 	ldw	ra,4(sp)
  806d2c:	df000017 	ldw	fp,0(sp)
  806d30:	dec00204 	addi	sp,sp,8
  806d34:	f800283a 	ret

00806d38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  806d38:	defffe04 	addi	sp,sp,-8
  806d3c:	df000115 	stw	fp,4(sp)
  806d40:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  806d44:	e03fff15 	stw	zero,-4(fp)
  806d48:	00000506 	br	806d60 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  806d4c:	e0bfff17 	ldw	r2,-4(fp)
  806d50:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  806d54:	e0bfff17 	ldw	r2,-4(fp)
  806d58:	10800804 	addi	r2,r2,32
  806d5c:	e0bfff15 	stw	r2,-4(fp)
  806d60:	e0bfff17 	ldw	r2,-4(fp)
  806d64:	10820030 	cmpltui	r2,r2,2048
  806d68:	103ff81e 	bne	r2,zero,806d4c <__alt_mem_onchip_mem+0xff7fed4c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  806d6c:	0001883a 	nop
  806d70:	e037883a 	mov	sp,fp
  806d74:	df000017 	ldw	fp,0(sp)
  806d78:	dec00104 	addi	sp,sp,4
  806d7c:	f800283a 	ret

00806d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806d80:	defffe04 	addi	sp,sp,-8
  806d84:	dfc00115 	stw	ra,4(sp)
  806d88:	df000015 	stw	fp,0(sp)
  806d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806d90:	d0a00917 	ldw	r2,-32732(gp)
  806d94:	10000326 	beq	r2,zero,806da4 <alt_get_errno+0x24>
  806d98:	d0a00917 	ldw	r2,-32732(gp)
  806d9c:	103ee83a 	callr	r2
  806da0:	00000106 	br	806da8 <alt_get_errno+0x28>
  806da4:	d0a72d04 	addi	r2,gp,-25420
}
  806da8:	e037883a 	mov	sp,fp
  806dac:	dfc00117 	ldw	ra,4(sp)
  806db0:	df000017 	ldw	fp,0(sp)
  806db4:	dec00204 	addi	sp,sp,8
  806db8:	f800283a 	ret

00806dbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  806dbc:	defffa04 	addi	sp,sp,-24
  806dc0:	dfc00515 	stw	ra,20(sp)
  806dc4:	df000415 	stw	fp,16(sp)
  806dc8:	df000404 	addi	fp,sp,16
  806dcc:	e13ffe15 	stw	r4,-8(fp)
  806dd0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  806dd4:	e0bffe17 	ldw	r2,-8(fp)
  806dd8:	10000326 	beq	r2,zero,806de8 <alt_dev_llist_insert+0x2c>
  806ddc:	e0bffe17 	ldw	r2,-8(fp)
  806de0:	10800217 	ldw	r2,8(r2)
  806de4:	1000061e 	bne	r2,zero,806e00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  806de8:	0806d800 	call	806d80 <alt_get_errno>
  806dec:	1007883a 	mov	r3,r2
  806df0:	00800584 	movi	r2,22
  806df4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  806df8:	00bffa84 	movi	r2,-22
  806dfc:	00001306 	br	806e4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  806e00:	e0bffe17 	ldw	r2,-8(fp)
  806e04:	e0ffff17 	ldw	r3,-4(fp)
  806e08:	e0fffc15 	stw	r3,-16(fp)
  806e0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  806e10:	e0bffd17 	ldw	r2,-12(fp)
  806e14:	e0fffc17 	ldw	r3,-16(fp)
  806e18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  806e1c:	e0bffc17 	ldw	r2,-16(fp)
  806e20:	10c00017 	ldw	r3,0(r2)
  806e24:	e0bffd17 	ldw	r2,-12(fp)
  806e28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  806e2c:	e0bffc17 	ldw	r2,-16(fp)
  806e30:	10800017 	ldw	r2,0(r2)
  806e34:	e0fffd17 	ldw	r3,-12(fp)
  806e38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  806e3c:	e0bffc17 	ldw	r2,-16(fp)
  806e40:	e0fffd17 	ldw	r3,-12(fp)
  806e44:	10c00015 	stw	r3,0(r2)

  return 0;  
  806e48:	0005883a 	mov	r2,zero
}
  806e4c:	e037883a 	mov	sp,fp
  806e50:	dfc00117 	ldw	ra,4(sp)
  806e54:	df000017 	ldw	fp,0(sp)
  806e58:	dec00204 	addi	sp,sp,8
  806e5c:	f800283a 	ret

00806e60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  806e60:	defffd04 	addi	sp,sp,-12
  806e64:	dfc00215 	stw	ra,8(sp)
  806e68:	df000115 	stw	fp,4(sp)
  806e6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  806e70:	00802034 	movhi	r2,128
  806e74:	109f8b04 	addi	r2,r2,32300
  806e78:	e0bfff15 	stw	r2,-4(fp)
  806e7c:	00000606 	br	806e98 <_do_ctors+0x38>
        (*ctor) (); 
  806e80:	e0bfff17 	ldw	r2,-4(fp)
  806e84:	10800017 	ldw	r2,0(r2)
  806e88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  806e8c:	e0bfff17 	ldw	r2,-4(fp)
  806e90:	10bfff04 	addi	r2,r2,-4
  806e94:	e0bfff15 	stw	r2,-4(fp)
  806e98:	e0ffff17 	ldw	r3,-4(fp)
  806e9c:	00802034 	movhi	r2,128
  806ea0:	109f8c04 	addi	r2,r2,32304
  806ea4:	18bff62e 	bgeu	r3,r2,806e80 <__alt_mem_onchip_mem+0xff7fee80>
        (*ctor) (); 
}
  806ea8:	0001883a 	nop
  806eac:	e037883a 	mov	sp,fp
  806eb0:	dfc00117 	ldw	ra,4(sp)
  806eb4:	df000017 	ldw	fp,0(sp)
  806eb8:	dec00204 	addi	sp,sp,8
  806ebc:	f800283a 	ret

00806ec0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  806ec0:	defffd04 	addi	sp,sp,-12
  806ec4:	dfc00215 	stw	ra,8(sp)
  806ec8:	df000115 	stw	fp,4(sp)
  806ecc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  806ed0:	00802034 	movhi	r2,128
  806ed4:	109f8b04 	addi	r2,r2,32300
  806ed8:	e0bfff15 	stw	r2,-4(fp)
  806edc:	00000606 	br	806ef8 <_do_dtors+0x38>
        (*dtor) (); 
  806ee0:	e0bfff17 	ldw	r2,-4(fp)
  806ee4:	10800017 	ldw	r2,0(r2)
  806ee8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  806eec:	e0bfff17 	ldw	r2,-4(fp)
  806ef0:	10bfff04 	addi	r2,r2,-4
  806ef4:	e0bfff15 	stw	r2,-4(fp)
  806ef8:	e0ffff17 	ldw	r3,-4(fp)
  806efc:	00802034 	movhi	r2,128
  806f00:	109f8c04 	addi	r2,r2,32304
  806f04:	18bff62e 	bgeu	r3,r2,806ee0 <__alt_mem_onchip_mem+0xff7feee0>
        (*dtor) (); 
}
  806f08:	0001883a 	nop
  806f0c:	e037883a 	mov	sp,fp
  806f10:	dfc00117 	ldw	ra,4(sp)
  806f14:	df000017 	ldw	fp,0(sp)
  806f18:	dec00204 	addi	sp,sp,8
  806f1c:	f800283a 	ret

00806f20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  806f20:	defffe04 	addi	sp,sp,-8
  806f24:	dfc00115 	stw	ra,4(sp)
  806f28:	df000015 	stw	fp,0(sp)
  806f2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  806f30:	01440004 	movi	r5,4096
  806f34:	0009883a 	mov	r4,zero
  806f38:	08079700 	call	807970 <alt_icache_flush>
#endif
}
  806f3c:	0001883a 	nop
  806f40:	e037883a 	mov	sp,fp
  806f44:	dfc00117 	ldw	ra,4(sp)
  806f48:	df000017 	ldw	fp,0(sp)
  806f4c:	dec00204 	addi	sp,sp,8
  806f50:	f800283a 	ret

00806f54 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  806f54:	defff904 	addi	sp,sp,-28
  806f58:	dfc00615 	stw	ra,24(sp)
  806f5c:	df000515 	stw	fp,20(sp)
  806f60:	df000504 	addi	fp,sp,20
  806f64:	e13ffc15 	stw	r4,-16(fp)
  806f68:	e17ffd15 	stw	r5,-12(fp)
  806f6c:	e1bffe15 	stw	r6,-8(fp)
  806f70:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  806f74:	e0800217 	ldw	r2,8(fp)
  806f78:	d8800015 	stw	r2,0(sp)
  806f7c:	e1ffff17 	ldw	r7,-4(fp)
  806f80:	e1bffe17 	ldw	r6,-8(fp)
  806f84:	e17ffd17 	ldw	r5,-12(fp)
  806f88:	e13ffc17 	ldw	r4,-16(fp)
  806f8c:	08071040 	call	807104 <alt_iic_isr_register>
}  
  806f90:	e037883a 	mov	sp,fp
  806f94:	dfc00117 	ldw	ra,4(sp)
  806f98:	df000017 	ldw	fp,0(sp)
  806f9c:	dec00204 	addi	sp,sp,8
  806fa0:	f800283a 	ret

00806fa4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  806fa4:	defff904 	addi	sp,sp,-28
  806fa8:	df000615 	stw	fp,24(sp)
  806fac:	df000604 	addi	fp,sp,24
  806fb0:	e13ffe15 	stw	r4,-8(fp)
  806fb4:	e17fff15 	stw	r5,-4(fp)
  806fb8:	e0bfff17 	ldw	r2,-4(fp)
  806fbc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806fc0:	0005303a 	rdctl	r2,status
  806fc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806fc8:	e0fffb17 	ldw	r3,-20(fp)
  806fcc:	00bfff84 	movi	r2,-2
  806fd0:	1884703a 	and	r2,r3,r2
  806fd4:	1001703a 	wrctl	status,r2
  
  return context;
  806fd8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  806fdc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  806fe0:	00c00044 	movi	r3,1
  806fe4:	e0bffa17 	ldw	r2,-24(fp)
  806fe8:	1884983a 	sll	r2,r3,r2
  806fec:	1007883a 	mov	r3,r2
  806ff0:	d0a72e17 	ldw	r2,-25416(gp)
  806ff4:	1884b03a 	or	r2,r3,r2
  806ff8:	d0a72e15 	stw	r2,-25416(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  806ffc:	d0a72e17 	ldw	r2,-25416(gp)
  807000:	100170fa 	wrctl	ienable,r2
  807004:	e0bffc17 	ldw	r2,-16(fp)
  807008:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80700c:	e0bffd17 	ldw	r2,-12(fp)
  807010:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807014:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  807018:	0001883a 	nop
}
  80701c:	e037883a 	mov	sp,fp
  807020:	df000017 	ldw	fp,0(sp)
  807024:	dec00104 	addi	sp,sp,4
  807028:	f800283a 	ret

0080702c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80702c:	defff904 	addi	sp,sp,-28
  807030:	df000615 	stw	fp,24(sp)
  807034:	df000604 	addi	fp,sp,24
  807038:	e13ffe15 	stw	r4,-8(fp)
  80703c:	e17fff15 	stw	r5,-4(fp)
  807040:	e0bfff17 	ldw	r2,-4(fp)
  807044:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807048:	0005303a 	rdctl	r2,status
  80704c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807050:	e0fffb17 	ldw	r3,-20(fp)
  807054:	00bfff84 	movi	r2,-2
  807058:	1884703a 	and	r2,r3,r2
  80705c:	1001703a 	wrctl	status,r2
  
  return context;
  807060:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807064:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  807068:	00c00044 	movi	r3,1
  80706c:	e0bffa17 	ldw	r2,-24(fp)
  807070:	1884983a 	sll	r2,r3,r2
  807074:	0084303a 	nor	r2,zero,r2
  807078:	1007883a 	mov	r3,r2
  80707c:	d0a72e17 	ldw	r2,-25416(gp)
  807080:	1884703a 	and	r2,r3,r2
  807084:	d0a72e15 	stw	r2,-25416(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807088:	d0a72e17 	ldw	r2,-25416(gp)
  80708c:	100170fa 	wrctl	ienable,r2
  807090:	e0bffc17 	ldw	r2,-16(fp)
  807094:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807098:	e0bffd17 	ldw	r2,-12(fp)
  80709c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8070a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8070a4:	0001883a 	nop
}
  8070a8:	e037883a 	mov	sp,fp
  8070ac:	df000017 	ldw	fp,0(sp)
  8070b0:	dec00104 	addi	sp,sp,4
  8070b4:	f800283a 	ret

008070b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8070b8:	defffc04 	addi	sp,sp,-16
  8070bc:	df000315 	stw	fp,12(sp)
  8070c0:	df000304 	addi	fp,sp,12
  8070c4:	e13ffe15 	stw	r4,-8(fp)
  8070c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8070cc:	000530fa 	rdctl	r2,ienable
  8070d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8070d4:	00c00044 	movi	r3,1
  8070d8:	e0bfff17 	ldw	r2,-4(fp)
  8070dc:	1884983a 	sll	r2,r3,r2
  8070e0:	1007883a 	mov	r3,r2
  8070e4:	e0bffd17 	ldw	r2,-12(fp)
  8070e8:	1884703a 	and	r2,r3,r2
  8070ec:	1004c03a 	cmpne	r2,r2,zero
  8070f0:	10803fcc 	andi	r2,r2,255
}
  8070f4:	e037883a 	mov	sp,fp
  8070f8:	df000017 	ldw	fp,0(sp)
  8070fc:	dec00104 	addi	sp,sp,4
  807100:	f800283a 	ret

00807104 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807104:	defff504 	addi	sp,sp,-44
  807108:	dfc00a15 	stw	ra,40(sp)
  80710c:	df000915 	stw	fp,36(sp)
  807110:	df000904 	addi	fp,sp,36
  807114:	e13ffc15 	stw	r4,-16(fp)
  807118:	e17ffd15 	stw	r5,-12(fp)
  80711c:	e1bffe15 	stw	r6,-8(fp)
  807120:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  807124:	00bffa84 	movi	r2,-22
  807128:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80712c:	e0bffd17 	ldw	r2,-12(fp)
  807130:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807134:	e0bff817 	ldw	r2,-32(fp)
  807138:	10800808 	cmpgei	r2,r2,32
  80713c:	1000271e 	bne	r2,zero,8071dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807140:	0005303a 	rdctl	r2,status
  807144:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807148:	e0fffb17 	ldw	r3,-20(fp)
  80714c:	00bfff84 	movi	r2,-2
  807150:	1884703a 	and	r2,r3,r2
  807154:	1001703a 	wrctl	status,r2
  
  return context;
  807158:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80715c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  807160:	00802074 	movhi	r2,129
  807164:	10aeb504 	addi	r2,r2,-17708
  807168:	e0fff817 	ldw	r3,-32(fp)
  80716c:	180690fa 	slli	r3,r3,3
  807170:	10c5883a 	add	r2,r2,r3
  807174:	e0fffe17 	ldw	r3,-8(fp)
  807178:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80717c:	00802074 	movhi	r2,129
  807180:	10aeb504 	addi	r2,r2,-17708
  807184:	e0fff817 	ldw	r3,-32(fp)
  807188:	180690fa 	slli	r3,r3,3
  80718c:	10c5883a 	add	r2,r2,r3
  807190:	10800104 	addi	r2,r2,4
  807194:	e0ffff17 	ldw	r3,-4(fp)
  807198:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80719c:	e0bffe17 	ldw	r2,-8(fp)
  8071a0:	10000526 	beq	r2,zero,8071b8 <alt_iic_isr_register+0xb4>
  8071a4:	e0bff817 	ldw	r2,-32(fp)
  8071a8:	100b883a 	mov	r5,r2
  8071ac:	e13ffc17 	ldw	r4,-16(fp)
  8071b0:	0806fa40 	call	806fa4 <alt_ic_irq_enable>
  8071b4:	00000406 	br	8071c8 <alt_iic_isr_register+0xc4>
  8071b8:	e0bff817 	ldw	r2,-32(fp)
  8071bc:	100b883a 	mov	r5,r2
  8071c0:	e13ffc17 	ldw	r4,-16(fp)
  8071c4:	080702c0 	call	80702c <alt_ic_irq_disable>
  8071c8:	e0bff715 	stw	r2,-36(fp)
  8071cc:	e0bffa17 	ldw	r2,-24(fp)
  8071d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8071d4:	e0bff917 	ldw	r2,-28(fp)
  8071d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8071dc:	e0bff717 	ldw	r2,-36(fp)
}
  8071e0:	e037883a 	mov	sp,fp
  8071e4:	dfc00117 	ldw	ra,4(sp)
  8071e8:	df000017 	ldw	fp,0(sp)
  8071ec:	dec00204 	addi	sp,sp,8
  8071f0:	f800283a 	ret

008071f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8071f4:	defff904 	addi	sp,sp,-28
  8071f8:	dfc00615 	stw	ra,24(sp)
  8071fc:	df000515 	stw	fp,20(sp)
  807200:	df000504 	addi	fp,sp,20
  807204:	e13ffc15 	stw	r4,-16(fp)
  807208:	e17ffd15 	stw	r5,-12(fp)
  80720c:	e1bffe15 	stw	r6,-8(fp)
  807210:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  807214:	e1bfff17 	ldw	r6,-4(fp)
  807218:	e17ffe17 	ldw	r5,-8(fp)
  80721c:	e13ffd17 	ldw	r4,-12(fp)
  807220:	08074340 	call	807434 <open>
  807224:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  807228:	e0bffb17 	ldw	r2,-20(fp)
  80722c:	10001c16 	blt	r2,zero,8072a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  807230:	00802074 	movhi	r2,129
  807234:	10a28504 	addi	r2,r2,-30188
  807238:	e0fffb17 	ldw	r3,-20(fp)
  80723c:	18c00324 	muli	r3,r3,12
  807240:	10c5883a 	add	r2,r2,r3
  807244:	10c00017 	ldw	r3,0(r2)
  807248:	e0bffc17 	ldw	r2,-16(fp)
  80724c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  807250:	00802074 	movhi	r2,129
  807254:	10a28504 	addi	r2,r2,-30188
  807258:	e0fffb17 	ldw	r3,-20(fp)
  80725c:	18c00324 	muli	r3,r3,12
  807260:	10c5883a 	add	r2,r2,r3
  807264:	10800104 	addi	r2,r2,4
  807268:	10c00017 	ldw	r3,0(r2)
  80726c:	e0bffc17 	ldw	r2,-16(fp)
  807270:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807274:	00802074 	movhi	r2,129
  807278:	10a28504 	addi	r2,r2,-30188
  80727c:	e0fffb17 	ldw	r3,-20(fp)
  807280:	18c00324 	muli	r3,r3,12
  807284:	10c5883a 	add	r2,r2,r3
  807288:	10800204 	addi	r2,r2,8
  80728c:	10c00017 	ldw	r3,0(r2)
  807290:	e0bffc17 	ldw	r2,-16(fp)
  807294:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  807298:	e13ffb17 	ldw	r4,-20(fp)
  80729c:	08045380 	call	804538 <alt_release_fd>
  }
} 
  8072a0:	0001883a 	nop
  8072a4:	e037883a 	mov	sp,fp
  8072a8:	dfc00117 	ldw	ra,4(sp)
  8072ac:	df000017 	ldw	fp,0(sp)
  8072b0:	dec00204 	addi	sp,sp,8
  8072b4:	f800283a 	ret

008072b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8072b8:	defffb04 	addi	sp,sp,-20
  8072bc:	dfc00415 	stw	ra,16(sp)
  8072c0:	df000315 	stw	fp,12(sp)
  8072c4:	df000304 	addi	fp,sp,12
  8072c8:	e13ffd15 	stw	r4,-12(fp)
  8072cc:	e17ffe15 	stw	r5,-8(fp)
  8072d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8072d4:	01c07fc4 	movi	r7,511
  8072d8:	01800044 	movi	r6,1
  8072dc:	e17ffd17 	ldw	r5,-12(fp)
  8072e0:	01002074 	movhi	r4,129
  8072e4:	21228804 	addi	r4,r4,-30176
  8072e8:	08071f40 	call	8071f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8072ec:	01c07fc4 	movi	r7,511
  8072f0:	000d883a 	mov	r6,zero
  8072f4:	e17ffe17 	ldw	r5,-8(fp)
  8072f8:	01002074 	movhi	r4,129
  8072fc:	21228504 	addi	r4,r4,-30188
  807300:	08071f40 	call	8071f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  807304:	01c07fc4 	movi	r7,511
  807308:	01800044 	movi	r6,1
  80730c:	e17fff17 	ldw	r5,-4(fp)
  807310:	01002074 	movhi	r4,129
  807314:	21228b04 	addi	r4,r4,-30164
  807318:	08071f40 	call	8071f4 <alt_open_fd>
}  
  80731c:	0001883a 	nop
  807320:	e037883a 	mov	sp,fp
  807324:	dfc00117 	ldw	ra,4(sp)
  807328:	df000017 	ldw	fp,0(sp)
  80732c:	dec00204 	addi	sp,sp,8
  807330:	f800283a 	ret

00807334 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807334:	defffe04 	addi	sp,sp,-8
  807338:	dfc00115 	stw	ra,4(sp)
  80733c:	df000015 	stw	fp,0(sp)
  807340:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  807344:	d0a00917 	ldw	r2,-32732(gp)
  807348:	10000326 	beq	r2,zero,807358 <alt_get_errno+0x24>
  80734c:	d0a00917 	ldw	r2,-32732(gp)
  807350:	103ee83a 	callr	r2
  807354:	00000106 	br	80735c <alt_get_errno+0x28>
  807358:	d0a72d04 	addi	r2,gp,-25420
}
  80735c:	e037883a 	mov	sp,fp
  807360:	dfc00117 	ldw	ra,4(sp)
  807364:	df000017 	ldw	fp,0(sp)
  807368:	dec00204 	addi	sp,sp,8
  80736c:	f800283a 	ret

00807370 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  807370:	defffd04 	addi	sp,sp,-12
  807374:	df000215 	stw	fp,8(sp)
  807378:	df000204 	addi	fp,sp,8
  80737c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  807380:	e0bfff17 	ldw	r2,-4(fp)
  807384:	10800217 	ldw	r2,8(r2)
  807388:	10d00034 	orhi	r3,r2,16384
  80738c:	e0bfff17 	ldw	r2,-4(fp)
  807390:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  807394:	e03ffe15 	stw	zero,-8(fp)
  807398:	00001d06 	br	807410 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80739c:	00802074 	movhi	r2,129
  8073a0:	10a28504 	addi	r2,r2,-30188
  8073a4:	e0fffe17 	ldw	r3,-8(fp)
  8073a8:	18c00324 	muli	r3,r3,12
  8073ac:	10c5883a 	add	r2,r2,r3
  8073b0:	10c00017 	ldw	r3,0(r2)
  8073b4:	e0bfff17 	ldw	r2,-4(fp)
  8073b8:	10800017 	ldw	r2,0(r2)
  8073bc:	1880111e 	bne	r3,r2,807404 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8073c0:	00802074 	movhi	r2,129
  8073c4:	10a28504 	addi	r2,r2,-30188
  8073c8:	e0fffe17 	ldw	r3,-8(fp)
  8073cc:	18c00324 	muli	r3,r3,12
  8073d0:	10c5883a 	add	r2,r2,r3
  8073d4:	10800204 	addi	r2,r2,8
  8073d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8073dc:	1000090e 	bge	r2,zero,807404 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8073e0:	e0bffe17 	ldw	r2,-8(fp)
  8073e4:	10c00324 	muli	r3,r2,12
  8073e8:	00802074 	movhi	r2,129
  8073ec:	10a28504 	addi	r2,r2,-30188
  8073f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8073f4:	e0bfff17 	ldw	r2,-4(fp)
  8073f8:	18800226 	beq	r3,r2,807404 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8073fc:	00bffcc4 	movi	r2,-13
  807400:	00000806 	br	807424 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  807404:	e0bffe17 	ldw	r2,-8(fp)
  807408:	10800044 	addi	r2,r2,1
  80740c:	e0bffe15 	stw	r2,-8(fp)
  807410:	d0a00817 	ldw	r2,-32736(gp)
  807414:	1007883a 	mov	r3,r2
  807418:	e0bffe17 	ldw	r2,-8(fp)
  80741c:	18bfdf2e 	bgeu	r3,r2,80739c <__alt_mem_onchip_mem+0xff7ff39c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  807420:	0005883a 	mov	r2,zero
}
  807424:	e037883a 	mov	sp,fp
  807428:	df000017 	ldw	fp,0(sp)
  80742c:	dec00104 	addi	sp,sp,4
  807430:	f800283a 	ret

00807434 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  807434:	defff604 	addi	sp,sp,-40
  807438:	dfc00915 	stw	ra,36(sp)
  80743c:	df000815 	stw	fp,32(sp)
  807440:	df000804 	addi	fp,sp,32
  807444:	e13ffd15 	stw	r4,-12(fp)
  807448:	e17ffe15 	stw	r5,-8(fp)
  80744c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  807450:	00bfffc4 	movi	r2,-1
  807454:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  807458:	00bffb44 	movi	r2,-19
  80745c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  807460:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  807464:	d1600604 	addi	r5,gp,-32744
  807468:	e13ffd17 	ldw	r4,-12(fp)
  80746c:	08077340 	call	807734 <alt_find_dev>
  807470:	e0bff815 	stw	r2,-32(fp)
  807474:	e0bff817 	ldw	r2,-32(fp)
  807478:	1000051e 	bne	r2,zero,807490 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80747c:	e13ffd17 	ldw	r4,-12(fp)
  807480:	08077c40 	call	8077c4 <alt_find_file>
  807484:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  807488:	00800044 	movi	r2,1
  80748c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  807490:	e0bff817 	ldw	r2,-32(fp)
  807494:	10002926 	beq	r2,zero,80753c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  807498:	e13ff817 	ldw	r4,-32(fp)
  80749c:	08078cc0 	call	8078cc <alt_get_fd>
  8074a0:	e0bff915 	stw	r2,-28(fp)
  8074a4:	e0bff917 	ldw	r2,-28(fp)
  8074a8:	1000030e 	bge	r2,zero,8074b8 <open+0x84>
    {
      status = index;
  8074ac:	e0bff917 	ldw	r2,-28(fp)
  8074b0:	e0bffa15 	stw	r2,-24(fp)
  8074b4:	00002306 	br	807544 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  8074b8:	e0bff917 	ldw	r2,-28(fp)
  8074bc:	10c00324 	muli	r3,r2,12
  8074c0:	00802074 	movhi	r2,129
  8074c4:	10a28504 	addi	r2,r2,-30188
  8074c8:	1885883a 	add	r2,r3,r2
  8074cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8074d0:	e0fffe17 	ldw	r3,-8(fp)
  8074d4:	00900034 	movhi	r2,16384
  8074d8:	10bfffc4 	addi	r2,r2,-1
  8074dc:	1886703a 	and	r3,r3,r2
  8074e0:	e0bffc17 	ldw	r2,-16(fp)
  8074e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8074e8:	e0bffb17 	ldw	r2,-20(fp)
  8074ec:	1000051e 	bne	r2,zero,807504 <open+0xd0>
  8074f0:	e13ffc17 	ldw	r4,-16(fp)
  8074f4:	08073700 	call	807370 <alt_file_locked>
  8074f8:	e0bffa15 	stw	r2,-24(fp)
  8074fc:	e0bffa17 	ldw	r2,-24(fp)
  807500:	10001016 	blt	r2,zero,807544 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  807504:	e0bff817 	ldw	r2,-32(fp)
  807508:	10800317 	ldw	r2,12(r2)
  80750c:	10000826 	beq	r2,zero,807530 <open+0xfc>
  807510:	e0bff817 	ldw	r2,-32(fp)
  807514:	10800317 	ldw	r2,12(r2)
  807518:	e1ffff17 	ldw	r7,-4(fp)
  80751c:	e1bffe17 	ldw	r6,-8(fp)
  807520:	e17ffd17 	ldw	r5,-12(fp)
  807524:	e13ffc17 	ldw	r4,-16(fp)
  807528:	103ee83a 	callr	r2
  80752c:	00000106 	br	807534 <open+0x100>
  807530:	0005883a 	mov	r2,zero
  807534:	e0bffa15 	stw	r2,-24(fp)
  807538:	00000206 	br	807544 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80753c:	00bffb44 	movi	r2,-19
  807540:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  807544:	e0bffa17 	ldw	r2,-24(fp)
  807548:	1000090e 	bge	r2,zero,807570 <open+0x13c>
  {
    alt_release_fd (index);  
  80754c:	e13ff917 	ldw	r4,-28(fp)
  807550:	08045380 	call	804538 <alt_release_fd>
    ALT_ERRNO = -status;
  807554:	08073340 	call	807334 <alt_get_errno>
  807558:	1007883a 	mov	r3,r2
  80755c:	e0bffa17 	ldw	r2,-24(fp)
  807560:	0085c83a 	sub	r2,zero,r2
  807564:	18800015 	stw	r2,0(r3)
    return -1;
  807568:	00bfffc4 	movi	r2,-1
  80756c:	00000106 	br	807574 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  807570:	e0bff917 	ldw	r2,-28(fp)
}
  807574:	e037883a 	mov	sp,fp
  807578:	dfc00117 	ldw	ra,4(sp)
  80757c:	df000017 	ldw	fp,0(sp)
  807580:	dec00204 	addi	sp,sp,8
  807584:	f800283a 	ret

00807588 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  807588:	defffd04 	addi	sp,sp,-12
  80758c:	dfc00215 	stw	ra,8(sp)
  807590:	df000115 	stw	fp,4(sp)
  807594:	df000104 	addi	fp,sp,4
  807598:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80759c:	e13fff17 	ldw	r4,-4(fp)
  8075a0:	08075dc0 	call	8075dc <alt_busy_sleep>
}
  8075a4:	e037883a 	mov	sp,fp
  8075a8:	dfc00117 	ldw	ra,4(sp)
  8075ac:	df000017 	ldw	fp,0(sp)
  8075b0:	dec00204 	addi	sp,sp,8
  8075b4:	f800283a 	ret

008075b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8075b8:	deffff04 	addi	sp,sp,-4
  8075bc:	df000015 	stw	fp,0(sp)
  8075c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8075c4:	000170fa 	wrctl	ienable,zero
}
  8075c8:	0001883a 	nop
  8075cc:	e037883a 	mov	sp,fp
  8075d0:	df000017 	ldw	fp,0(sp)
  8075d4:	dec00104 	addi	sp,sp,4
  8075d8:	f800283a 	ret

008075dc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8075dc:	defffa04 	addi	sp,sp,-24
  8075e0:	dfc00515 	stw	ra,20(sp)
  8075e4:	df000415 	stw	fp,16(sp)
  8075e8:	df000404 	addi	fp,sp,16
  8075ec:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8075f0:	008000c4 	movi	r2,3
  8075f4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8075f8:	e0fffd17 	ldw	r3,-12(fp)
  8075fc:	008003f4 	movhi	r2,15
  807600:	10909004 	addi	r2,r2,16960
  807604:	1885383a 	mul	r2,r3,r2
  807608:	100b883a 	mov	r5,r2
  80760c:	0100bef4 	movhi	r4,763
  807610:	213c2004 	addi	r4,r4,-3968
  807614:	0803ad40 	call	803ad4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  807618:	100b883a 	mov	r5,r2
  80761c:	01200034 	movhi	r4,32768
  807620:	213fffc4 	addi	r4,r4,-1
  807624:	0803ad40 	call	803ad4 <__udivsi3>
  807628:	100b883a 	mov	r5,r2
  80762c:	e13fff17 	ldw	r4,-4(fp)
  807630:	0803ad40 	call	803ad4 <__udivsi3>
  807634:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  807638:	e0bffe17 	ldw	r2,-8(fp)
  80763c:	10002a26 	beq	r2,zero,8076e8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  807640:	e03ffc15 	stw	zero,-16(fp)
  807644:	00001706 	br	8076a4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  807648:	00a00034 	movhi	r2,32768
  80764c:	10bfffc4 	addi	r2,r2,-1
  807650:	10bfffc4 	addi	r2,r2,-1
  807654:	103ffe1e 	bne	r2,zero,807650 <__alt_mem_onchip_mem+0xff7ff650>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  807658:	e0fffd17 	ldw	r3,-12(fp)
  80765c:	008003f4 	movhi	r2,15
  807660:	10909004 	addi	r2,r2,16960
  807664:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  807668:	100b883a 	mov	r5,r2
  80766c:	0100bef4 	movhi	r4,763
  807670:	213c2004 	addi	r4,r4,-3968
  807674:	0803ad40 	call	803ad4 <__udivsi3>
  807678:	100b883a 	mov	r5,r2
  80767c:	01200034 	movhi	r4,32768
  807680:	213fffc4 	addi	r4,r4,-1
  807684:	0803ad40 	call	803ad4 <__udivsi3>
  807688:	1007883a 	mov	r3,r2
  80768c:	e0bfff17 	ldw	r2,-4(fp)
  807690:	10c5c83a 	sub	r2,r2,r3
  807694:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  807698:	e0bffc17 	ldw	r2,-16(fp)
  80769c:	10800044 	addi	r2,r2,1
  8076a0:	e0bffc15 	stw	r2,-16(fp)
  8076a4:	e0fffc17 	ldw	r3,-16(fp)
  8076a8:	e0bffe17 	ldw	r2,-8(fp)
  8076ac:	18bfe616 	blt	r3,r2,807648 <__alt_mem_onchip_mem+0xff7ff648>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8076b0:	e0fffd17 	ldw	r3,-12(fp)
  8076b4:	008003f4 	movhi	r2,15
  8076b8:	10909004 	addi	r2,r2,16960
  8076bc:	1885383a 	mul	r2,r3,r2
  8076c0:	100b883a 	mov	r5,r2
  8076c4:	0100bef4 	movhi	r4,763
  8076c8:	213c2004 	addi	r4,r4,-3968
  8076cc:	0803ad40 	call	803ad4 <__udivsi3>
  8076d0:	1007883a 	mov	r3,r2
  8076d4:	e0bfff17 	ldw	r2,-4(fp)
  8076d8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8076dc:	10bfffc4 	addi	r2,r2,-1
  8076e0:	103ffe1e 	bne	r2,zero,8076dc <__alt_mem_onchip_mem+0xff7ff6dc>
  8076e4:	00000d06 	br	80771c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8076e8:	e0fffd17 	ldw	r3,-12(fp)
  8076ec:	008003f4 	movhi	r2,15
  8076f0:	10909004 	addi	r2,r2,16960
  8076f4:	1885383a 	mul	r2,r3,r2
  8076f8:	100b883a 	mov	r5,r2
  8076fc:	0100bef4 	movhi	r4,763
  807700:	213c2004 	addi	r4,r4,-3968
  807704:	0803ad40 	call	803ad4 <__udivsi3>
  807708:	1007883a 	mov	r3,r2
  80770c:	e0bfff17 	ldw	r2,-4(fp)
  807710:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  807714:	10bfffc4 	addi	r2,r2,-1
  807718:	00bffe16 	blt	zero,r2,807714 <__alt_mem_onchip_mem+0xff7ff714>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80771c:	0005883a 	mov	r2,zero
}
  807720:	e037883a 	mov	sp,fp
  807724:	dfc00117 	ldw	ra,4(sp)
  807728:	df000017 	ldw	fp,0(sp)
  80772c:	dec00204 	addi	sp,sp,8
  807730:	f800283a 	ret

00807734 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  807734:	defffa04 	addi	sp,sp,-24
  807738:	dfc00515 	stw	ra,20(sp)
  80773c:	df000415 	stw	fp,16(sp)
  807740:	df000404 	addi	fp,sp,16
  807744:	e13ffe15 	stw	r4,-8(fp)
  807748:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80774c:	e0bfff17 	ldw	r2,-4(fp)
  807750:	10800017 	ldw	r2,0(r2)
  807754:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  807758:	e13ffe17 	ldw	r4,-8(fp)
  80775c:	0800e9c0 	call	800e9c <strlen>
  807760:	10800044 	addi	r2,r2,1
  807764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807768:	00000d06 	br	8077a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80776c:	e0bffc17 	ldw	r2,-16(fp)
  807770:	10800217 	ldw	r2,8(r2)
  807774:	e0fffd17 	ldw	r3,-12(fp)
  807778:	180d883a 	mov	r6,r3
  80777c:	e17ffe17 	ldw	r5,-8(fp)
  807780:	1009883a 	mov	r4,r2
  807784:	0807ae80 	call	807ae8 <memcmp>
  807788:	1000021e 	bne	r2,zero,807794 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80778c:	e0bffc17 	ldw	r2,-16(fp)
  807790:	00000706 	br	8077b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  807794:	e0bffc17 	ldw	r2,-16(fp)
  807798:	10800017 	ldw	r2,0(r2)
  80779c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8077a0:	e0fffc17 	ldw	r3,-16(fp)
  8077a4:	e0bfff17 	ldw	r2,-4(fp)
  8077a8:	18bff01e 	bne	r3,r2,80776c <__alt_mem_onchip_mem+0xff7ff76c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8077ac:	0005883a 	mov	r2,zero
}
  8077b0:	e037883a 	mov	sp,fp
  8077b4:	dfc00117 	ldw	ra,4(sp)
  8077b8:	df000017 	ldw	fp,0(sp)
  8077bc:	dec00204 	addi	sp,sp,8
  8077c0:	f800283a 	ret

008077c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8077c4:	defffb04 	addi	sp,sp,-20
  8077c8:	dfc00415 	stw	ra,16(sp)
  8077cc:	df000315 	stw	fp,12(sp)
  8077d0:	df000304 	addi	fp,sp,12
  8077d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8077d8:	d0a00417 	ldw	r2,-32752(gp)
  8077dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8077e0:	00003106 	br	8078a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  8077e4:	e0bffd17 	ldw	r2,-12(fp)
  8077e8:	10800217 	ldw	r2,8(r2)
  8077ec:	1009883a 	mov	r4,r2
  8077f0:	0800e9c0 	call	800e9c <strlen>
  8077f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8077f8:	e0bffd17 	ldw	r2,-12(fp)
  8077fc:	10c00217 	ldw	r3,8(r2)
  807800:	e0bffe17 	ldw	r2,-8(fp)
  807804:	10bfffc4 	addi	r2,r2,-1
  807808:	1885883a 	add	r2,r3,r2
  80780c:	10800003 	ldbu	r2,0(r2)
  807810:	10803fcc 	andi	r2,r2,255
  807814:	1080201c 	xori	r2,r2,128
  807818:	10bfe004 	addi	r2,r2,-128
  80781c:	10800bd8 	cmpnei	r2,r2,47
  807820:	1000031e 	bne	r2,zero,807830 <alt_find_file+0x6c>
    {
      len -= 1;
  807824:	e0bffe17 	ldw	r2,-8(fp)
  807828:	10bfffc4 	addi	r2,r2,-1
  80782c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807830:	e0bffe17 	ldw	r2,-8(fp)
  807834:	e0ffff17 	ldw	r3,-4(fp)
  807838:	1885883a 	add	r2,r3,r2
  80783c:	10800003 	ldbu	r2,0(r2)
  807840:	10803fcc 	andi	r2,r2,255
  807844:	1080201c 	xori	r2,r2,128
  807848:	10bfe004 	addi	r2,r2,-128
  80784c:	10800be0 	cmpeqi	r2,r2,47
  807850:	1000081e 	bne	r2,zero,807874 <alt_find_file+0xb0>
  807854:	e0bffe17 	ldw	r2,-8(fp)
  807858:	e0ffff17 	ldw	r3,-4(fp)
  80785c:	1885883a 	add	r2,r3,r2
  807860:	10800003 	ldbu	r2,0(r2)
  807864:	10803fcc 	andi	r2,r2,255
  807868:	1080201c 	xori	r2,r2,128
  80786c:	10bfe004 	addi	r2,r2,-128
  807870:	10000a1e 	bne	r2,zero,80789c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  807874:	e0bffd17 	ldw	r2,-12(fp)
  807878:	10800217 	ldw	r2,8(r2)
  80787c:	e0fffe17 	ldw	r3,-8(fp)
  807880:	180d883a 	mov	r6,r3
  807884:	e17fff17 	ldw	r5,-4(fp)
  807888:	1009883a 	mov	r4,r2
  80788c:	0807ae80 	call	807ae8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807890:	1000021e 	bne	r2,zero,80789c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  807894:	e0bffd17 	ldw	r2,-12(fp)
  807898:	00000706 	br	8078b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80789c:	e0bffd17 	ldw	r2,-12(fp)
  8078a0:	10800017 	ldw	r2,0(r2)
  8078a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8078a8:	e0fffd17 	ldw	r3,-12(fp)
  8078ac:	d0a00404 	addi	r2,gp,-32752
  8078b0:	18bfcc1e 	bne	r3,r2,8077e4 <__alt_mem_onchip_mem+0xff7ff7e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8078b4:	0005883a 	mov	r2,zero
}
  8078b8:	e037883a 	mov	sp,fp
  8078bc:	dfc00117 	ldw	ra,4(sp)
  8078c0:	df000017 	ldw	fp,0(sp)
  8078c4:	dec00204 	addi	sp,sp,8
  8078c8:	f800283a 	ret

008078cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8078cc:	defffc04 	addi	sp,sp,-16
  8078d0:	df000315 	stw	fp,12(sp)
  8078d4:	df000304 	addi	fp,sp,12
  8078d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8078dc:	00bffa04 	movi	r2,-24
  8078e0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8078e4:	e03ffd15 	stw	zero,-12(fp)
  8078e8:	00001906 	br	807950 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  8078ec:	00802074 	movhi	r2,129
  8078f0:	10a28504 	addi	r2,r2,-30188
  8078f4:	e0fffd17 	ldw	r3,-12(fp)
  8078f8:	18c00324 	muli	r3,r3,12
  8078fc:	10c5883a 	add	r2,r2,r3
  807900:	10800017 	ldw	r2,0(r2)
  807904:	10000f1e 	bne	r2,zero,807944 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  807908:	00802074 	movhi	r2,129
  80790c:	10a28504 	addi	r2,r2,-30188
  807910:	e0fffd17 	ldw	r3,-12(fp)
  807914:	18c00324 	muli	r3,r3,12
  807918:	10c5883a 	add	r2,r2,r3
  80791c:	e0ffff17 	ldw	r3,-4(fp)
  807920:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  807924:	d0e00817 	ldw	r3,-32736(gp)
  807928:	e0bffd17 	ldw	r2,-12(fp)
  80792c:	1880020e 	bge	r3,r2,807938 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  807930:	e0bffd17 	ldw	r2,-12(fp)
  807934:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  807938:	e0bffd17 	ldw	r2,-12(fp)
  80793c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  807940:	00000606 	br	80795c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807944:	e0bffd17 	ldw	r2,-12(fp)
  807948:	10800044 	addi	r2,r2,1
  80794c:	e0bffd15 	stw	r2,-12(fp)
  807950:	e0bffd17 	ldw	r2,-12(fp)
  807954:	10800810 	cmplti	r2,r2,32
  807958:	103fe41e 	bne	r2,zero,8078ec <__alt_mem_onchip_mem+0xff7ff8ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80795c:	e0bffe17 	ldw	r2,-8(fp)
}
  807960:	e037883a 	mov	sp,fp
  807964:	df000017 	ldw	fp,0(sp)
  807968:	dec00104 	addi	sp,sp,4
  80796c:	f800283a 	ret

00807970 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  807970:	defffb04 	addi	sp,sp,-20
  807974:	df000415 	stw	fp,16(sp)
  807978:	df000404 	addi	fp,sp,16
  80797c:	e13ffe15 	stw	r4,-8(fp)
  807980:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  807984:	e0bfff17 	ldw	r2,-4(fp)
  807988:	10840070 	cmpltui	r2,r2,4097
  80798c:	1000021e 	bne	r2,zero,807998 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  807990:	00840004 	movi	r2,4096
  807994:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  807998:	e0fffe17 	ldw	r3,-8(fp)
  80799c:	e0bfff17 	ldw	r2,-4(fp)
  8079a0:	1885883a 	add	r2,r3,r2
  8079a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8079a8:	e0bffe17 	ldw	r2,-8(fp)
  8079ac:	e0bffc15 	stw	r2,-16(fp)
  8079b0:	00000506 	br	8079c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8079b4:	e0bffc17 	ldw	r2,-16(fp)
  8079b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8079bc:	e0bffc17 	ldw	r2,-16(fp)
  8079c0:	10800804 	addi	r2,r2,32
  8079c4:	e0bffc15 	stw	r2,-16(fp)
  8079c8:	e0fffc17 	ldw	r3,-16(fp)
  8079cc:	e0bffd17 	ldw	r2,-12(fp)
  8079d0:	18bff836 	bltu	r3,r2,8079b4 <__alt_mem_onchip_mem+0xff7ff9b4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8079d4:	e0bffe17 	ldw	r2,-8(fp)
  8079d8:	108007cc 	andi	r2,r2,31
  8079dc:	10000226 	beq	r2,zero,8079e8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8079e0:	e0bffc17 	ldw	r2,-16(fp)
  8079e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8079e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8079ec:	0001883a 	nop
  8079f0:	e037883a 	mov	sp,fp
  8079f4:	df000017 	ldw	fp,0(sp)
  8079f8:	dec00104 	addi	sp,sp,4
  8079fc:	f800283a 	ret

00807a00 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  807a00:	defffe04 	addi	sp,sp,-8
  807a04:	df000115 	stw	fp,4(sp)
  807a08:	df000104 	addi	fp,sp,4
  807a0c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  807a10:	e0bfff17 	ldw	r2,-4(fp)
  807a14:	10bffe84 	addi	r2,r2,-6
  807a18:	10c00428 	cmpgeui	r3,r2,16
  807a1c:	18001a1e 	bne	r3,zero,807a88 <alt_exception_cause_generated_bad_addr+0x88>
  807a20:	100690ba 	slli	r3,r2,2
  807a24:	00802034 	movhi	r2,128
  807a28:	109e8e04 	addi	r2,r2,31288
  807a2c:	1885883a 	add	r2,r3,r2
  807a30:	10800017 	ldw	r2,0(r2)
  807a34:	1000683a 	jmp	r2
  807a38:	00807a78 	rdprs	r2,zero,489
  807a3c:	00807a78 	rdprs	r2,zero,489
  807a40:	00807a88 	cmpgei	r2,zero,490
  807a44:	00807a88 	cmpgei	r2,zero,490
  807a48:	00807a88 	cmpgei	r2,zero,490
  807a4c:	00807a78 	rdprs	r2,zero,489
  807a50:	00807a80 	call	807a8 <__alt_mem_sdram-0x77f858>
  807a54:	00807a88 	cmpgei	r2,zero,490
  807a58:	00807a78 	rdprs	r2,zero,489
  807a5c:	00807a78 	rdprs	r2,zero,489
  807a60:	00807a88 	cmpgei	r2,zero,490
  807a64:	00807a78 	rdprs	r2,zero,489
  807a68:	00807a80 	call	807a8 <__alt_mem_sdram-0x77f858>
  807a6c:	00807a88 	cmpgei	r2,zero,490
  807a70:	00807a88 	cmpgei	r2,zero,490
  807a74:	00807a78 	rdprs	r2,zero,489
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  807a78:	00800044 	movi	r2,1
  807a7c:	00000306 	br	807a8c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  807a80:	0005883a 	mov	r2,zero
  807a84:	00000106 	br	807a8c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  807a88:	0005883a 	mov	r2,zero
  }
}
  807a8c:	e037883a 	mov	sp,fp
  807a90:	df000017 	ldw	fp,0(sp)
  807a94:	dec00104 	addi	sp,sp,4
  807a98:	f800283a 	ret

00807a9c <atexit>:
  807a9c:	200b883a 	mov	r5,r4
  807aa0:	000f883a 	mov	r7,zero
  807aa4:	000d883a 	mov	r6,zero
  807aa8:	0009883a 	mov	r4,zero
  807aac:	0807b641 	jmpi	807b64 <__register_exitproc>

00807ab0 <exit>:
  807ab0:	defffe04 	addi	sp,sp,-8
  807ab4:	000b883a 	mov	r5,zero
  807ab8:	dc000015 	stw	r16,0(sp)
  807abc:	dfc00115 	stw	ra,4(sp)
  807ac0:	2021883a 	mov	r16,r4
  807ac4:	0807c7c0 	call	807c7c <__call_exitprocs>
  807ac8:	00802074 	movhi	r2,129
  807acc:	10a77604 	addi	r2,r2,-25128
  807ad0:	11000017 	ldw	r4,0(r2)
  807ad4:	20800f17 	ldw	r2,60(r4)
  807ad8:	10000126 	beq	r2,zero,807ae0 <exit+0x30>
  807adc:	103ee83a 	callr	r2
  807ae0:	8009883a 	mov	r4,r16
  807ae4:	0807dfc0 	call	807dfc <_exit>

00807ae8 <memcmp>:
  807ae8:	01c000c4 	movi	r7,3
  807aec:	3980192e 	bgeu	r7,r6,807b54 <memcmp+0x6c>
  807af0:	2144b03a 	or	r2,r4,r5
  807af4:	11c4703a 	and	r2,r2,r7
  807af8:	10000f26 	beq	r2,zero,807b38 <memcmp+0x50>
  807afc:	20800003 	ldbu	r2,0(r4)
  807b00:	28c00003 	ldbu	r3,0(r5)
  807b04:	10c0151e 	bne	r2,r3,807b5c <memcmp+0x74>
  807b08:	31bfff84 	addi	r6,r6,-2
  807b0c:	01ffffc4 	movi	r7,-1
  807b10:	00000406 	br	807b24 <memcmp+0x3c>
  807b14:	20800003 	ldbu	r2,0(r4)
  807b18:	28c00003 	ldbu	r3,0(r5)
  807b1c:	31bfffc4 	addi	r6,r6,-1
  807b20:	10c00e1e 	bne	r2,r3,807b5c <memcmp+0x74>
  807b24:	21000044 	addi	r4,r4,1
  807b28:	29400044 	addi	r5,r5,1
  807b2c:	31fff91e 	bne	r6,r7,807b14 <__alt_mem_onchip_mem+0xff7ffb14>
  807b30:	0005883a 	mov	r2,zero
  807b34:	f800283a 	ret
  807b38:	20c00017 	ldw	r3,0(r4)
  807b3c:	28800017 	ldw	r2,0(r5)
  807b40:	18bfee1e 	bne	r3,r2,807afc <__alt_mem_onchip_mem+0xff7ffafc>
  807b44:	31bfff04 	addi	r6,r6,-4
  807b48:	21000104 	addi	r4,r4,4
  807b4c:	29400104 	addi	r5,r5,4
  807b50:	39bff936 	bltu	r7,r6,807b38 <__alt_mem_onchip_mem+0xff7ffb38>
  807b54:	303fe91e 	bne	r6,zero,807afc <__alt_mem_onchip_mem+0xff7ffafc>
  807b58:	003ff506 	br	807b30 <__alt_mem_onchip_mem+0xff7ffb30>
  807b5c:	10c5c83a 	sub	r2,r2,r3
  807b60:	f800283a 	ret

00807b64 <__register_exitproc>:
  807b64:	defffa04 	addi	sp,sp,-24
  807b68:	dc000315 	stw	r16,12(sp)
  807b6c:	04002074 	movhi	r16,129
  807b70:	84277604 	addi	r16,r16,-25128
  807b74:	80c00017 	ldw	r3,0(r16)
  807b78:	dc400415 	stw	r17,16(sp)
  807b7c:	dfc00515 	stw	ra,20(sp)
  807b80:	18805217 	ldw	r2,328(r3)
  807b84:	2023883a 	mov	r17,r4
  807b88:	10003726 	beq	r2,zero,807c68 <__register_exitproc+0x104>
  807b8c:	10c00117 	ldw	r3,4(r2)
  807b90:	010007c4 	movi	r4,31
  807b94:	20c00e16 	blt	r4,r3,807bd0 <__register_exitproc+0x6c>
  807b98:	1a000044 	addi	r8,r3,1
  807b9c:	8800221e 	bne	r17,zero,807c28 <__register_exitproc+0xc4>
  807ba0:	18c00084 	addi	r3,r3,2
  807ba4:	18c7883a 	add	r3,r3,r3
  807ba8:	18c7883a 	add	r3,r3,r3
  807bac:	12000115 	stw	r8,4(r2)
  807bb0:	10c7883a 	add	r3,r2,r3
  807bb4:	19400015 	stw	r5,0(r3)
  807bb8:	0005883a 	mov	r2,zero
  807bbc:	dfc00517 	ldw	ra,20(sp)
  807bc0:	dc400417 	ldw	r17,16(sp)
  807bc4:	dc000317 	ldw	r16,12(sp)
  807bc8:	dec00604 	addi	sp,sp,24
  807bcc:	f800283a 	ret
  807bd0:	00800034 	movhi	r2,0
  807bd4:	10800004 	addi	r2,r2,0
  807bd8:	10002626 	beq	r2,zero,807c74 <__register_exitproc+0x110>
  807bdc:	01006404 	movi	r4,400
  807be0:	d9400015 	stw	r5,0(sp)
  807be4:	d9800115 	stw	r6,4(sp)
  807be8:	d9c00215 	stw	r7,8(sp)
  807bec:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  807bf0:	d9400017 	ldw	r5,0(sp)
  807bf4:	d9800117 	ldw	r6,4(sp)
  807bf8:	d9c00217 	ldw	r7,8(sp)
  807bfc:	10001d26 	beq	r2,zero,807c74 <__register_exitproc+0x110>
  807c00:	81000017 	ldw	r4,0(r16)
  807c04:	10000115 	stw	zero,4(r2)
  807c08:	02000044 	movi	r8,1
  807c0c:	22405217 	ldw	r9,328(r4)
  807c10:	0007883a 	mov	r3,zero
  807c14:	12400015 	stw	r9,0(r2)
  807c18:	20805215 	stw	r2,328(r4)
  807c1c:	10006215 	stw	zero,392(r2)
  807c20:	10006315 	stw	zero,396(r2)
  807c24:	883fde26 	beq	r17,zero,807ba0 <__alt_mem_onchip_mem+0xff7ffba0>
  807c28:	18c9883a 	add	r4,r3,r3
  807c2c:	2109883a 	add	r4,r4,r4
  807c30:	1109883a 	add	r4,r2,r4
  807c34:	21802215 	stw	r6,136(r4)
  807c38:	01800044 	movi	r6,1
  807c3c:	12406217 	ldw	r9,392(r2)
  807c40:	30cc983a 	sll	r6,r6,r3
  807c44:	4992b03a 	or	r9,r9,r6
  807c48:	12406215 	stw	r9,392(r2)
  807c4c:	21c04215 	stw	r7,264(r4)
  807c50:	01000084 	movi	r4,2
  807c54:	893fd21e 	bne	r17,r4,807ba0 <__alt_mem_onchip_mem+0xff7ffba0>
  807c58:	11006317 	ldw	r4,396(r2)
  807c5c:	218cb03a 	or	r6,r4,r6
  807c60:	11806315 	stw	r6,396(r2)
  807c64:	003fce06 	br	807ba0 <__alt_mem_onchip_mem+0xff7ffba0>
  807c68:	18805304 	addi	r2,r3,332
  807c6c:	18805215 	stw	r2,328(r3)
  807c70:	003fc606 	br	807b8c <__alt_mem_onchip_mem+0xff7ffb8c>
  807c74:	00bfffc4 	movi	r2,-1
  807c78:	003fd006 	br	807bbc <__alt_mem_onchip_mem+0xff7ffbbc>

00807c7c <__call_exitprocs>:
  807c7c:	defff504 	addi	sp,sp,-44
  807c80:	df000915 	stw	fp,36(sp)
  807c84:	dd400615 	stw	r21,24(sp)
  807c88:	dc800315 	stw	r18,12(sp)
  807c8c:	dfc00a15 	stw	ra,40(sp)
  807c90:	ddc00815 	stw	r23,32(sp)
  807c94:	dd800715 	stw	r22,28(sp)
  807c98:	dd000515 	stw	r20,20(sp)
  807c9c:	dcc00415 	stw	r19,16(sp)
  807ca0:	dc400215 	stw	r17,8(sp)
  807ca4:	dc000115 	stw	r16,4(sp)
  807ca8:	d9000015 	stw	r4,0(sp)
  807cac:	2839883a 	mov	fp,r5
  807cb0:	04800044 	movi	r18,1
  807cb4:	057fffc4 	movi	r21,-1
  807cb8:	00802074 	movhi	r2,129
  807cbc:	10a77604 	addi	r2,r2,-25128
  807cc0:	12000017 	ldw	r8,0(r2)
  807cc4:	45005217 	ldw	r20,328(r8)
  807cc8:	44c05204 	addi	r19,r8,328
  807ccc:	a0001c26 	beq	r20,zero,807d40 <__call_exitprocs+0xc4>
  807cd0:	a0800117 	ldw	r2,4(r20)
  807cd4:	15ffffc4 	addi	r23,r2,-1
  807cd8:	b8000d16 	blt	r23,zero,807d10 <__call_exitprocs+0x94>
  807cdc:	14000044 	addi	r16,r2,1
  807ce0:	8421883a 	add	r16,r16,r16
  807ce4:	8421883a 	add	r16,r16,r16
  807ce8:	84402004 	addi	r17,r16,128
  807cec:	a463883a 	add	r17,r20,r17
  807cf0:	a421883a 	add	r16,r20,r16
  807cf4:	e0001e26 	beq	fp,zero,807d70 <__call_exitprocs+0xf4>
  807cf8:	80804017 	ldw	r2,256(r16)
  807cfc:	e0801c26 	beq	fp,r2,807d70 <__call_exitprocs+0xf4>
  807d00:	bdffffc4 	addi	r23,r23,-1
  807d04:	843fff04 	addi	r16,r16,-4
  807d08:	8c7fff04 	addi	r17,r17,-4
  807d0c:	bd7ff91e 	bne	r23,r21,807cf4 <__alt_mem_onchip_mem+0xff7ffcf4>
  807d10:	00800034 	movhi	r2,0
  807d14:	10800004 	addi	r2,r2,0
  807d18:	10000926 	beq	r2,zero,807d40 <__call_exitprocs+0xc4>
  807d1c:	a0800117 	ldw	r2,4(r20)
  807d20:	1000301e 	bne	r2,zero,807de4 <__call_exitprocs+0x168>
  807d24:	a0800017 	ldw	r2,0(r20)
  807d28:	10003226 	beq	r2,zero,807df4 <__call_exitprocs+0x178>
  807d2c:	a009883a 	mov	r4,r20
  807d30:	98800015 	stw	r2,0(r19)
  807d34:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  807d38:	9d000017 	ldw	r20,0(r19)
  807d3c:	a03fe41e 	bne	r20,zero,807cd0 <__alt_mem_onchip_mem+0xff7ffcd0>
  807d40:	dfc00a17 	ldw	ra,40(sp)
  807d44:	df000917 	ldw	fp,36(sp)
  807d48:	ddc00817 	ldw	r23,32(sp)
  807d4c:	dd800717 	ldw	r22,28(sp)
  807d50:	dd400617 	ldw	r21,24(sp)
  807d54:	dd000517 	ldw	r20,20(sp)
  807d58:	dcc00417 	ldw	r19,16(sp)
  807d5c:	dc800317 	ldw	r18,12(sp)
  807d60:	dc400217 	ldw	r17,8(sp)
  807d64:	dc000117 	ldw	r16,4(sp)
  807d68:	dec00b04 	addi	sp,sp,44
  807d6c:	f800283a 	ret
  807d70:	a0800117 	ldw	r2,4(r20)
  807d74:	80c00017 	ldw	r3,0(r16)
  807d78:	10bfffc4 	addi	r2,r2,-1
  807d7c:	15c01426 	beq	r2,r23,807dd0 <__call_exitprocs+0x154>
  807d80:	80000015 	stw	zero,0(r16)
  807d84:	183fde26 	beq	r3,zero,807d00 <__alt_mem_onchip_mem+0xff7ffd00>
  807d88:	95c8983a 	sll	r4,r18,r23
  807d8c:	a0806217 	ldw	r2,392(r20)
  807d90:	a5800117 	ldw	r22,4(r20)
  807d94:	2084703a 	and	r2,r4,r2
  807d98:	10000b26 	beq	r2,zero,807dc8 <__call_exitprocs+0x14c>
  807d9c:	a0806317 	ldw	r2,396(r20)
  807da0:	2088703a 	and	r4,r4,r2
  807da4:	20000c1e 	bne	r4,zero,807dd8 <__call_exitprocs+0x15c>
  807da8:	89400017 	ldw	r5,0(r17)
  807dac:	d9000017 	ldw	r4,0(sp)
  807db0:	183ee83a 	callr	r3
  807db4:	a0800117 	ldw	r2,4(r20)
  807db8:	15bfbf1e 	bne	r2,r22,807cb8 <__alt_mem_onchip_mem+0xff7ffcb8>
  807dbc:	98800017 	ldw	r2,0(r19)
  807dc0:	153fcf26 	beq	r2,r20,807d00 <__alt_mem_onchip_mem+0xff7ffd00>
  807dc4:	003fbc06 	br	807cb8 <__alt_mem_onchip_mem+0xff7ffcb8>
  807dc8:	183ee83a 	callr	r3
  807dcc:	003ff906 	br	807db4 <__alt_mem_onchip_mem+0xff7ffdb4>
  807dd0:	a5c00115 	stw	r23,4(r20)
  807dd4:	003feb06 	br	807d84 <__alt_mem_onchip_mem+0xff7ffd84>
  807dd8:	89000017 	ldw	r4,0(r17)
  807ddc:	183ee83a 	callr	r3
  807de0:	003ff406 	br	807db4 <__alt_mem_onchip_mem+0xff7ffdb4>
  807de4:	a0800017 	ldw	r2,0(r20)
  807de8:	a027883a 	mov	r19,r20
  807dec:	1029883a 	mov	r20,r2
  807df0:	003fb606 	br	807ccc <__alt_mem_onchip_mem+0xff7ffccc>
  807df4:	0005883a 	mov	r2,zero
  807df8:	003ffb06 	br	807de8 <__alt_mem_onchip_mem+0xff7ffde8>

00807dfc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  807dfc:	defffd04 	addi	sp,sp,-12
  807e00:	df000215 	stw	fp,8(sp)
  807e04:	df000204 	addi	fp,sp,8
  807e08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  807e0c:	0001883a 	nop
  807e10:	e0bfff17 	ldw	r2,-4(fp)
  807e14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  807e18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  807e1c:	10000226 	beq	r2,zero,807e28 <_exit+0x2c>
    ALT_SIM_FAIL();
  807e20:	002af070 	cmpltui	zero,zero,43969
  807e24:	00000106 	br	807e2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  807e28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  807e2c:	003fff06 	br	807e2c <__alt_mem_onchip_mem+0xff7ffe2c>
