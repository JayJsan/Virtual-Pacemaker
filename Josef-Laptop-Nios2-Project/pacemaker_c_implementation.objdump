
pacemaker_c_implementation.elf:     file format elf32-littlenios2
pacemaker_c_implementation.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00017198 memsz 0x00017198 flags r-x
    LOAD off    0x000181b8 vaddr 0x008171b8 paddr 0x00818e94 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x0001ab70 vaddr 0x0081ab70 paddr 0x0081ab70 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016930  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000644  00816b74  00816b74  00017b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  008171b8  00818e94  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  0081ab70  0081ab70  0001ab70  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081acf0  0081acf0  00019e94  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00019e94  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00019e94  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001158  00000000  00000000  00019eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002c930  00000000  00000000  0001b010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b0c0  00000000  00000000  00047940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e927  00000000  00000000  00052a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002a98  00000000  00000000  00061328  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004a1b  00000000  00000000  00063dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000184ee  00000000  00000000  000687db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00080ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019d0  00000000  00000000  00080d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00086649  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0008664c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008664f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00086650  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00086651  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0008665a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00086663  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0008666c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000030  00000000  00000000  00086678  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  000866a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00816b74 l    d  .rodata	00000000 .rodata
008171b8 l    d  .rwdata	00000000 .rwdata
0081ab70 l    d  .bss	00000000 .bss
0081acf0 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Projects/University/303-Assignment/pacemaker_c_implementation_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lcd_control.c
00000000 l    df *ABS*	00000000 led_control.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
008171b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00807f04 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00816d72 l     O .rodata	00000010 zeroes.4404
0080a530 l     F .text	000000bc __sbprintf
00816d82 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0080a7f4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080c324 l     F .text	00000008 __fp_unlock
0080c338 l     F .text	0000019c __sinit.part.1
0080c4d4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00817a04 l     O .rwdata	00000020 lc_ctype_charset
008179e4 l     O .rwdata	00000020 lc_message_charset
00817a24 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00816db0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080ee10 l     F .text	000000fc __sprint_r.part.0
00816ee4 l     O .rodata	00000010 blanks.4348
00816ed4 l     O .rodata	00000010 zeroes.4349
0081039c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00812a00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00812b0c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00812b38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00812da4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00812e84 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00812f70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00813144 l     F .text	0000003c alt_get_errno
00813180 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00813398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00818e80 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00813788 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008138bc l     F .text	00000034 alt_dev_reg
00817c04 l     O .rwdata	00001060 jtag_uart
00818c64 l     O .rwdata	00000120 lcd
00818d84 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00813be4 l     F .text	0000020c altera_avalon_jtag_uart_irq
00813df0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00818e8c l     O .rwdata	00000004 colstart
00814428 l     F .text	000000b8 lcd_write_command
008144e0 l     F .text	000000d8 lcd_write_data
008145b8 l     F .text	000000d0 lcd_clear_screen
00814688 l     F .text	000001ec lcd_repaint_screen
00814874 l     F .text	000000cc lcd_scroll_up
00814940 l     F .text	000002ac lcd_handle_escape
008150c4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00815304 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008155b4 l     F .text	0000009c altera_avalon_uart_irq
00815650 l     F .text	000000e4 altera_avalon_uart_rxirq
00815734 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008158d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00815ae8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00815d18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008163c8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00817037 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081abc4 g     O .bss	00000004 alt_instruction_exception_handler
0081ab7e g     O .bss	00000001 a_pace_led_timer_already_started
0080e584 g     F .text	00000074 _mprec_log10
0080e670 g     F .text	0000008c __any_on
0080d1e8 g     F .text	00000054 _isatty_r
00816dbc g     O .rodata	00000028 __mprec_tinytens
00813080 g     F .text	0000007c alt_main
00807e30 g     F .text	000000c0 _puts_r
0081abf0 g     O .bss	00000100 alt_irq
0080d318 g     F .text	00000060 _lseek_r
00818e94 g       *ABS*	00000000 __flash_rwdata_start
0080c6c4 g     F .text	000000ac __sflags
008120b4 g     F .text	00000088 .hidden __eqdf2
0081acf0 g       *ABS*	00000000 __alt_heap_start
00810980 g     F .text	0000009c _wcrtomb_r
00808220 g     F .text	0000005c __sseek
0080c674 g     F .text	00000010 __sinit
00810828 g     F .text	00000140 __swbuf_r
0080d23c g     F .text	0000007c _setlocale_r
0080c4dc g     F .text	00000068 __sfmoreglue
00813120 g     F .text	00000024 __malloc_unlock
0081ab88 g     O .bss	00000004 a_timer_count
00801108 g     F .text	00000068 clear_sense_led_events
0080d5a4 g     F .text	0000015c memmove
0080c65c g     F .text	00000018 _cleanup
0080d700 g     F .text	000000a8 _Balloc
008006b0 g     F .text	000000a0 buttons_interrupts_function
00805ef8 g     F .text	000000dc .hidden __gtdf2
00816538 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
0081ab79 g     O .bss	00000001 ventricular_sense_paced
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807184 g     F .text	0000005c _fstat_r
0081ab90 g     O .bss	00000004 errno
0080819c g     F .text	00000008 __seofread
0081abb4 g     O .bss	00000004 alt_argv
00820e48 g       *ABS*	00000000 _gp
00816508 g     F .text	00000030 usleep
00805300 g     F .text	000001c0 reset
00817a84 g     O .rwdata	00000180 alt_fd_list
00800778 g     F .text	00000028 v_pace_led_timer_isr_function
00815eb8 g     F .text	00000090 alt_find_dev
0080d45c g     F .text	00000148 memcpy
0080c32c g     F .text	0000000c _cleanup_r
008069c4 g     F .text	000000dc .hidden __floatsidf
0081648c g     F .text	0000007c alt_io_redirect
00805fd4 g     F .text	000000f4 .hidden __ltdf2
00816b74 g       *ABS*	00000000 __DTOR_END__
00807ef0 g     F .text	00000014 puts
00816744 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080ecc0 g     F .text	00000074 __fpclassifyd
0080e4e0 g     F .text	000000a4 __ratio
00810380 g     F .text	0000001c __vfiprintf_internal
00813fe8 g     F .text	0000021c altera_avalon_jtag_uart_read
00811710 g     F .text	00000064 .hidden __udivsi3
00812de0 g     F .text	000000a4 isatty
00816e0c g     O .rodata	000000c8 __mprec_tens
0080d2b8 g     F .text	0000000c __locale_charset
008166b4 g     F .text	00000090 alt_icache_flush
008008a8 g     F .text	00000040 v_events_timer_isr_function
0081ab9c g     O .bss	00000004 __malloc_top_pad
00801170 g     F .text	000000c4 c_mode_pacemaker
00818e5c g     O .rwdata	00000004 __mb_cur_max
0081ab77 g     O .bss	00000001 ventricular_sense
0080d2e8 g     F .text	0000000c _localeconv_r
0080db0c g     F .text	0000003c __i2b
0080cba4 g     F .text	000004bc __sfvwrite_r
008080f4 g     F .text	00000054 _sbrk_r
00800750 g     F .text	00000028 a_pace_led_timer_isr_function
0080e6fc g     F .text	00000060 _read_r
00818e74 g     O .rwdata	00000004 alt_max_fd
0081051c g     F .text	000000f0 _fclose_r
0080c2f4 g     F .text	00000030 fflush
0081ab98 g     O .bss	00000004 __malloc_max_sbrked_mem
00812c24 g     F .text	00000180 alt_irq_register
0080564c g     F .text	000008ac .hidden __adddf3
0080e288 g     F .text	0000010c __b2d
008110e0 g     F .text	00000538 .hidden __umoddi3
00812fac g     F .text	000000d4 lseek
008007c8 g     F .text	00000028 v_sense_led_timer_isr_function
00818e4c g     O .rwdata	00000004 _global_impure_ptr
0080e75c g     F .text	00000564 _realloc_r
0081acf0 g       *ABS*	00000000 __bss_end
008162d8 g     F .text	000000f0 alt_iic_isr_register
00801234 g     F .text	00000084 set_pulse_mode_on_switch
00813680 g     F .text	00000108 alt_tick
00810b68 g     F .text	00000578 .hidden __udivdi3
00810784 g     F .text	00000024 _fputwc_r
00816de4 g     O .rodata	00000028 __mprec_bigtens
0080d8f0 g     F .text	00000104 __s2b
00806aa0 g     F .text	000000a8 .hidden __floatunsidf
0080dfc8 g     F .text	00000060 __mcmp
00815508 g     F .text	000000ac altera_avalon_uart_init
0080c694 g     F .text	00000018 __fp_lock_all
0081628c g     F .text	0000004c alt_ic_irq_enabled
008135e4 g     F .text	0000009c alt_alarm_stop
00800380 g     F .text	0000008c clear_red_leds_x_to_x
0081ab78 g     O .bss	00000001 atrial_sense_paced
0081abac g     O .bss	00000004 alt_irq_active
0081ab71 g     O .bss	00000001 implementation_mode
00806d24 g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00817a5c g     O .rwdata	00000028 alt_dev_null
00815cd0 g     F .text	00000048 alt_dcache_flush_all
0080d9f4 g     F .text	00000068 __hi0bits
00812854 g     F .text	00000080 .hidden __fixdfsi
0081ab76 g     O .bss	00000001 atrial_sense
00818e94 g       *ABS*	00000000 __ram_rwdata_end
00818e6c g     O .rwdata	00000008 alt_dev_list
008137c4 g     F .text	000000f8 write
008171b8 g       *ABS*	00000000 __ram_rodata_end
00812b74 g     F .text	000000b0 fstat
00806ce0 g     F .text	00000024 fprintf
0080062c g     F .text	00000084 set_half_green_leds_x_to_x
00805fd4 g     F .text	000000f4 .hidden __ledf2
008007a0 g     F .text	00000028 a_sense_led_timer_isr_function
0080dd40 g     F .text	00000140 __pow5mult
00818e48 g     O .rwdata	00000001 implementation_switched_flag
0080ef24 g     F .text	0000145c ___vfiprintf_internal_r
0081aba8 g     O .bss	00000004 __nlocale_changed
00811774 g     F .text	00000058 .hidden __umodsi3
0081acf0 g       *ABS*	00000000 end
00814bec g     F .text	000004d8 altera_avalon_lcd_16207_write
00807168 g     F .text	0000001c fseeko
00801040 g     F .text	00000060 send_ventricular_event
00815b24 g     F .text	000001ac altera_avalon_uart_write
00806d08 g     F .text	0000001c fseek
00813b24 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00816b74 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081ab70 g     O .bss	00000001 pulse_mode
0081537c g     F .text	0000007c alt_avalon_timer_sc_init
00815458 g     F .text	00000060 altera_avalon_uart_write_fd
00806b48 g     F .text	00000064 .hidden __clzsi2
008154b8 g     F .text	00000050 altera_avalon_uart_close_fd
00814204 g     F .text	00000224 altera_avalon_jtag_uart_write
0080c684 g     F .text	00000004 __sfp_lock_acquire
0080d378 g     F .text	000000e4 memchr
0080831c g     F .text	000021f8 ___vfprintf_internal_r
0080c894 g     F .text	00000310 _free_r
0081ab8c g     O .bss	00000004 v_timer_count
0080d2c4 g     F .text	00000010 __locale_mb_cur_max
008169c0 g     F .text	00000180 __call_exitprocs
0081aba4 g     O .bss	00000004 __mlocale_changed
00818e54 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00800868 g     F .text	00000040 a_events_timer_isr_function
0081abbc g     O .bss	00000004 _alt_tick_rate
0080de80 g     F .text	00000148 __lshift
0081abc0 g     O .bss	00000004 _alt_nticks
008133d4 g     F .text	000000fc read
00813928 g     F .text	00000098 alt_sys_init
008010a0 g     F .text	00000068 clear_pace_led_events
00807dd0 g     F .text	00000060 _open_r
008168a8 g     F .text	00000118 __register_exitproc
0081ab75 g     O .bss	00000001 v_is_paced
0080db48 g     F .text	000001f8 __multiply
00813e90 g     F .text	00000068 altera_avalon_jtag_uart_close
008171b8 g       *ABS*	00000000 __ram_rwdata_start
00816b74 g       *ABS*	00000000 __ram_rodata_start
0081abc8 g     O .bss	00000028 __malloc_current_mallinfo
0080e394 g     F .text	0000014c __d2b
008139c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00816050 g     F .text	000000a4 alt_get_fd
0081655c g     F .text	00000158 alt_busy_sleep
0080a7a0 g     F .text	00000054 _close_r
0081682c g     F .text	0000007c memcmp
00813a80 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081acf0 g       *ABS*	00000000 __alt_stack_base
00813ad0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008071e0 g     F .text	000000cc _fwrite_r
0080a64c g     F .text	00000154 __swsetup_r
008054c0 g     F .text	0000018c tick
008117cc g     F .text	000008e8 .hidden __divdf3
0080c544 g     F .text	00000118 __sfp
0080e5f8 g     F .text	00000078 __copybits
008175dc g     O .rwdata	00000408 __malloc_av_
0080c690 g     F .text	00000004 __sinit_lock_release
0081213c g     F .text	00000718 .hidden __muldf3
00808148 g     F .text	00000054 __sread
0081ab82 g     O .bss	00000001 print_flag
00815f48 g     F .text	00000108 alt_find_file
008005a4 g     F .text	00000088 set_green_leds_x_to_x
00815d54 g     F .text	000000a4 alt_dev_llist_insert
008130fc g     F .text	00000024 __malloc_lock
00806cb8 g     F .text	00000028 _fprintf_r
00813534 g     F .text	000000b0 sbrk
0080c298 g     F .text	0000005c _fflush_r
00810458 g     F .text	000000c4 _calloc_r
00806ca0 g     F .text	00000018 fopen
0081ab72 g     O .bss	00000001 atrial_event
0081ab70 g       *ABS*	00000000 __bss_start
00807ca8 g     F .text	00000128 memset
00800928 g     F .text	000006b8 main
0081abb8 g     O .bss	00000004 alt_envp
0081ab94 g     O .bss	00000004 __malloc_max_total_mem
00813a20 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00810968 g     F .text	00000018 __swbuf
00815170 g     F .text	00000134 altera_avalon_lcd_16207_init
0080827c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0081060c g     F .text	00000014 fclose
0080a9f4 g     F .text	00001688 _dtoa_r
0080749c g     F .text	0000080c _malloc_r
00810adc g     F .text	00000030 __ascii_wctomb
00818e78 g     O .rwdata	00000004 alt_errno
0080d060 g     F .text	000000c4 _fwalk
008007f0 g     F .text	00000078 uart_read_isr_function
00811618 g     F .text	00000084 .hidden __divsi3
0080c770 g     F .text	00000124 _malloc_trim_r
00816b74 g       *ABS*	00000000 __CTOR_END__
0081ab7d g     O .bss	00000001 led_sense_ventricular_event
0080ed34 g     F .text	000000dc strcmp
00816b74 g       *ABS*	00000000 __flash_rodata_start
00816b74 g       *ABS*	00000000 __DTOR_LIST__
008120b4 g     F .text	00000088 .hidden __nedf2
008138f0 g     F .text	00000038 alt_irq_init
008134d0 g     F .text	00000064 alt_release_fd
00816c27 g     O .rodata	00000100 .hidden __clz_tab
0081aba0 g     O .bss	00000004 _PathLocale
0080040c g     F .text	0000008c clear_green_leds_x_to_x
008167e0 g     F .text	00000014 atexit
0080a5ec g     F .text	00000060 _write_r
0080d2f4 g     F .text	00000018 setlocale
00800290 g     F .text	000000f0 print_modes_to_lcd
00818e50 g     O .rwdata	00000004 _impure_ptr
0081abb0 g     O .bss	00000004 alt_argc
0080c07c g     F .text	0000021c __sflush_r
00815e58 g     F .text	00000060 _do_dtors
0080d2e0 g     F .text	00000008 __locale_cjk_lang
00806d04 g     F .text	00000004 _fseek_r
008008e8 g     F .text	00000040 system_timer_isr_function
00807f20 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
0080e224 g     F .text	00000064 __ulp
0080c6ac g     F .text	00000018 __fp_unlock_all
008152a4 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00818e64 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080d30c g     F .text	0000000c localeconv
00816128 g     F .text	00000050 alt_ic_isr_register
008072ac g     F .text	00000034 fwrite
00818e94 g       *ABS*	00000000 _edata
008153f8 g     F .text	00000060 altera_avalon_uart_read_fd
0081ab74 g     O .bss	00000001 ventricular_event
0081acf0 g       *ABS*	00000000 _end
0081ab84 g     O .bss	00000004 current_event
00810620 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00813ef8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00816200 g     F .text	0000008c alt_ic_irq_disable
008081a4 g     F .text	0000007c __swrite
00818e58 g     O .rwdata	00000004 __malloc_trim_threshold
0080d2d4 g     F .text	0000000c __locale_msgcharset
008167f4 g     F .text	00000038 exit
0081ab7a g     O .bss	00000001 led_pace_atrial_event
0080d124 g     F .text	000000c4 _fwalk_reent
0080e028 g     F .text	000001fc __mdiff
0081169c g     F .text	00000074 .hidden __modsi3
008012b8 g     F .text	00004048 logic
00818e90 g     O .rwdata	00000004 __ctype_ptr__
0081ab7c g     O .bss	00000001 led_sense_atrial_event
00800520 g     F .text	00000084 set_half_red_leds_x_to_x
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080c688 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00816f36 g     O .rodata	00000101 _ctype_
0081ab73 g     O .bss	00000001 a_is_paced
0081587c g     F .text	00000054 altera_avalon_uart_close
00806bac g     F .text	000000f4 _fopen_r
00816b40 g     F .text	00000034 _exit
008128d4 g     F .text	0000012c alt_alarm_start
008072e0 g     F .text	000001bc __smakebuf_r
00808284 g     F .text	00000098 strlen
00813244 g     F .text	00000154 open
00805ef8 g     F .text	000000dc .hidden __gedf2
0081ab80 g     O .bss	00000001 a_sense_led_timer_already_started
00818e60 g     O .rwdata	00000004 __wctomb
0080ef0c g     F .text	00000018 __sprint_r
008160f4 g     F .text	00000034 alt_icache_flush_all
00818e7c g     O .rwdata	00000004 alt_priority_mask
0081ab83 g     O .bss	00000001 pulse_switched_flag
00816178 g     F .text	00000088 alt_ic_irq_enable
0080a514 g     F .text	0000001c __vfprintf_internal
0081ab81 g     O .bss	00000001 v_sense_led_timer_already_started
0081590c g     F .text	000001dc altera_avalon_uart_read
00810b0c g     F .text	0000005c _wctomb_r
0081ab7b g     O .bss	00000001 led_pace_ventricular_event
008060c8 g     F .text	000008fc .hidden __subdf3
0081ab7f g     O .bss	00000001 v_pace_led_timer_already_started
0080da5c g     F .text	000000b0 __lo0bits
00800498 g     F .text	00000088 set_red_leds_x_to_x
00800fe0 g     F .text	00000060 send_atrial_event
00818e84 g     O .rwdata	00000008 alt_alarm_list
00815df8 g     F .text	00000060 _do_ctors
00810a1c g     F .text	000000c0 wcrtomb
00812a3c g     F .text	000000d0 close
00812eec g     F .text	00000084 alt_load
008107a8 g     F .text	00000080 fputwc
0080c68c g     F .text	00000004 __sinit_lock_acquire
0080d7d0 g     F .text	00000120 __multadd
0080d7a8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10aafc04 	addi	r2,r2,-21520
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10aafc04 	addi	r2,r2,-21520
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a75f17 	ldw	r2,-25220(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a75f17 	ldw	r2,-25220(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d6839214 	ori	gp,gp,3656
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10aadc14 	ori	r2,r2,43888

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18eb3c14 	ori	r3,r3,44272

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	0812eec0 	call	812eec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08130800 	call	813080 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <print_modes_to_lcd>:
#include <altera_avalon_pio_regs.h> // Used for PIO functions

/**
 * Prints the current implementation mode and pulse mode to the LCD
 */
void print_modes_to_lcd(FILE* lcd, bool impl_mode, bool pulse_mode) {
  800290:	defffb04 	addi	sp,sp,-20
  800294:	dfc00415 	stw	ra,16(sp)
  800298:	df000315 	stw	fp,12(sp)
  80029c:	df000304 	addi	fp,sp,12
  8002a0:	e13ffd15 	stw	r4,-12(fp)
  8002a4:	2807883a 	mov	r3,r5
  8002a8:	3005883a 	mov	r2,r6
  8002ac:	e0fffe05 	stb	r3,-8(fp)
  8002b0:	e0bfff05 	stb	r2,-4(fp)
	#define ESC 27
	#define CLEAR_LCD_STRING "[2J"
	// Clear previous LCD prints before setting it again.

	fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  8002b4:	01c02074 	movhi	r7,129
  8002b8:	39dadd04 	addi	r7,r7,27508
  8002bc:	018006c4 	movi	r6,27
  8002c0:	01402074 	movhi	r5,129
  8002c4:	295ade04 	addi	r5,r5,27512
  8002c8:	e13ffd17 	ldw	r4,-12(fp)
  8002cc:	0806ce00 	call	806ce0 <fprintf>
	if (impl_mode == C_MODE) {
  8002d0:	e0bffe03 	ldbu	r2,-8(fp)
  8002d4:	1080005c 	xori	r2,r2,1
  8002d8:	10803fcc 	andi	r2,r2,255
  8002dc:	10000726 	beq	r2,zero,8002fc <print_modes_to_lcd+0x6c>
		fprintf(lcd, "IMPL MODE: C\n");
  8002e0:	e1fffd17 	ldw	r7,-12(fp)
  8002e4:	01800344 	movi	r6,13
  8002e8:	01400044 	movi	r5,1
  8002ec:	01002074 	movhi	r4,129
  8002f0:	211ae004 	addi	r4,r4,27520
  8002f4:	08072ac0 	call	8072ac <fwrite>
  8002f8:	00000806 	br	80031c <print_modes_to_lcd+0x8c>
	}
	else if (impl_mode == SCCHARTS_MODE) {
  8002fc:	e0bffe03 	ldbu	r2,-8(fp)
  800300:	10000626 	beq	r2,zero,80031c <print_modes_to_lcd+0x8c>
		fprintf(lcd, "IMPL MODE: SCCHARTS\n");
  800304:	e1fffd17 	ldw	r7,-12(fp)
  800308:	01800504 	movi	r6,20
  80030c:	01400044 	movi	r5,1
  800310:	01002074 	movhi	r4,129
  800314:	211ae404 	addi	r4,r4,27536
  800318:	08072ac0 	call	8072ac <fwrite>
	}

	if (pulse_mode == UART_MODE) {
  80031c:	e0bfff03 	ldbu	r2,-4(fp)
  800320:	1080005c 	xori	r2,r2,1
  800324:	10803fcc 	andi	r2,r2,255
  800328:	10000726 	beq	r2,zero,800348 <print_modes_to_lcd+0xb8>
		fprintf(lcd, "PULSE MODE: UART\n");
  80032c:	e1fffd17 	ldw	r7,-12(fp)
  800330:	01800444 	movi	r6,17
  800334:	01400044 	movi	r5,1
  800338:	01002074 	movhi	r4,129
  80033c:	211aea04 	addi	r4,r4,27560
  800340:	08072ac0 	call	8072ac <fwrite>
	}
	else if (pulse_mode == BUTTON_MODE) {
		fprintf(lcd, "PULSE MODE: BUTTON\n");
	}
}
  800344:	00000806 	br	800368 <print_modes_to_lcd+0xd8>
	}

	if (pulse_mode == UART_MODE) {
		fprintf(lcd, "PULSE MODE: UART\n");
	}
	else if (pulse_mode == BUTTON_MODE) {
  800348:	e0bfff03 	ldbu	r2,-4(fp)
  80034c:	10000626 	beq	r2,zero,800368 <print_modes_to_lcd+0xd8>
		fprintf(lcd, "PULSE MODE: BUTTON\n");
  800350:	e1fffd17 	ldw	r7,-12(fp)
  800354:	018004c4 	movi	r6,19
  800358:	01400044 	movi	r5,1
  80035c:	01002074 	movhi	r4,129
  800360:	211aef04 	addi	r4,r4,27580
  800364:	08072ac0 	call	8072ac <fwrite>
	}
}
  800368:	0001883a 	nop
  80036c:	e037883a 	mov	sp,fp
  800370:	dfc00117 	ldw	ra,4(sp)
  800374:	df000017 	ldw	fp,0(sp)
  800378:	dec00204 	addi	sp,sp,8
  80037c:	f800283a 	ret

00800380 <clear_red_leds_x_to_x>:
#include "defines.h"

/**
 * Clears the RED LEDs from LEDRX1 to LEDRX2
 */
void clear_red_leds_x_to_x(int LEDRX1, int LEDRX2) {
  800380:	defffb04 	addi	sp,sp,-20
  800384:	df000415 	stw	fp,16(sp)
  800388:	df000404 	addi	fp,sp,16
  80038c:	e13ffe15 	stw	r4,-8(fp)
  800390:	e17fff15 	stw	r5,-4(fp)
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800394:	00804074 	movhi	r2,257
  800398:	10842004 	addi	r2,r2,4224
  80039c:	10800037 	ldwio	r2,0(r2)
  8003a0:	e0bffc15 	stw	r2,-16(fp)
	// CLEAR ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = LEDRX1; i < LEDRX2 + 1; i++) {
  8003a4:	e0bffe17 	ldw	r2,-8(fp)
  8003a8:	e0bffd15 	stw	r2,-12(fp)
  8003ac:	00000a06 	br	8003d8 <clear_red_leds_x_to_x+0x58>
		led_value = led_value &= ~(1<<i);
  8003b0:	00c00044 	movi	r3,1
  8003b4:	e0bffd17 	ldw	r2,-12(fp)
  8003b8:	1884983a 	sll	r2,r3,r2
  8003bc:	0084303a 	nor	r2,zero,r2
  8003c0:	e0fffc17 	ldw	r3,-16(fp)
  8003c4:	1884703a 	and	r2,r3,r2
  8003c8:	e0bffc15 	stw	r2,-16(fp)
 * Clears the RED LEDs from LEDRX1 to LEDRX2
 */
void clear_red_leds_x_to_x(int LEDRX1, int LEDRX2) {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
	// CLEAR ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = LEDRX1; i < LEDRX2 + 1; i++) {
  8003cc:	e0bffd17 	ldw	r2,-12(fp)
  8003d0:	10800044 	addi	r2,r2,1
  8003d4:	e0bffd15 	stw	r2,-12(fp)
  8003d8:	e0bfff17 	ldw	r2,-4(fp)
  8003dc:	10800044 	addi	r2,r2,1
  8003e0:	e0fffd17 	ldw	r3,-12(fp)
  8003e4:	18bff216 	blt	r3,r2,8003b0 <__alt_mem_onchip_mem+0xff7f83b0>
		led_value = led_value &= ~(1<<i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  8003e8:	00804074 	movhi	r2,257
  8003ec:	10842004 	addi	r2,r2,4224
  8003f0:	e0fffc17 	ldw	r3,-16(fp)
  8003f4:	10c00035 	stwio	r3,0(r2)
}
  8003f8:	0001883a 	nop
  8003fc:	e037883a 	mov	sp,fp
  800400:	df000017 	ldw	fp,0(sp)
  800404:	dec00104 	addi	sp,sp,4
  800408:	f800283a 	ret

0080040c <clear_green_leds_x_to_x>:

/**
 * Clears the GREEN LEDs from LEDGX1 to LEDGX2
 */
void clear_green_leds_x_to_x(int LEDGX1, int LEDGX2) {
  80040c:	defffb04 	addi	sp,sp,-20
  800410:	df000415 	stw	fp,16(sp)
  800414:	df000404 	addi	fp,sp,16
  800418:	e13ffe15 	stw	r4,-8(fp)
  80041c:	e17fff15 	stw	r5,-4(fp)
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800420:	00804074 	movhi	r2,257
  800424:	10841c04 	addi	r2,r2,4208
  800428:	10800037 	ldwio	r2,0(r2)
  80042c:	e0bffc15 	stw	r2,-16(fp)
	// CLEAR ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = LEDGX1; i < LEDGX2 + 1; i++) {
  800430:	e0bffe17 	ldw	r2,-8(fp)
  800434:	e0bffd15 	stw	r2,-12(fp)
  800438:	00000a06 	br	800464 <clear_green_leds_x_to_x+0x58>
		led_value = led_value &= ~(1<<i);
  80043c:	00c00044 	movi	r3,1
  800440:	e0bffd17 	ldw	r2,-12(fp)
  800444:	1884983a 	sll	r2,r3,r2
  800448:	0084303a 	nor	r2,zero,r2
  80044c:	e0fffc17 	ldw	r3,-16(fp)
  800450:	1884703a 	and	r2,r3,r2
  800454:	e0bffc15 	stw	r2,-16(fp)
 * Clears the GREEN LEDs from LEDGX1 to LEDGX2
 */
void clear_green_leds_x_to_x(int LEDGX1, int LEDGX2) {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
	// CLEAR ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = LEDGX1; i < LEDGX2 + 1; i++) {
  800458:	e0bffd17 	ldw	r2,-12(fp)
  80045c:	10800044 	addi	r2,r2,1
  800460:	e0bffd15 	stw	r2,-12(fp)
  800464:	e0bfff17 	ldw	r2,-4(fp)
  800468:	10800044 	addi	r2,r2,1
  80046c:	e0fffd17 	ldw	r3,-12(fp)
  800470:	18bff216 	blt	r3,r2,80043c <__alt_mem_onchip_mem+0xff7f843c>
		led_value = led_value &= ~(1<<i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800474:	00804074 	movhi	r2,257
  800478:	10841c04 	addi	r2,r2,4208
  80047c:	e0fffc17 	ldw	r3,-16(fp)
  800480:	10c00035 	stwio	r3,0(r2)
}
  800484:	0001883a 	nop
  800488:	e037883a 	mov	sp,fp
  80048c:	df000017 	ldw	fp,0(sp)
  800490:	dec00104 	addi	sp,sp,4
  800494:	f800283a 	ret

00800498 <set_red_leds_x_to_x>:


/**
 * Sets the RED LEDs from LEDR0 to LEDR8 to HIGH
 */
void set_red_leds_x_to_x(int LEDRX1, int LEDRX2) {
  800498:	defffb04 	addi	sp,sp,-20
  80049c:	df000415 	stw	fp,16(sp)
  8004a0:	df000404 	addi	fp,sp,16
  8004a4:	e13ffe15 	stw	r4,-8(fp)
  8004a8:	e17fff15 	stw	r5,-4(fp)
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  8004ac:	00804074 	movhi	r2,257
  8004b0:	10842004 	addi	r2,r2,4224
  8004b4:	10800037 	ldwio	r2,0(r2)
  8004b8:	e0bffc15 	stw	r2,-16(fp)
	// SET ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = LEDRX1; i < LEDRX2 + 1; i++) {
  8004bc:	e0bffe17 	ldw	r2,-8(fp)
  8004c0:	e0bffd15 	stw	r2,-12(fp)
  8004c4:	00000906 	br	8004ec <set_red_leds_x_to_x+0x54>
		led_value = led_value |= (1<<i);
  8004c8:	00c00044 	movi	r3,1
  8004cc:	e0bffd17 	ldw	r2,-12(fp)
  8004d0:	1884983a 	sll	r2,r3,r2
  8004d4:	e0fffc17 	ldw	r3,-16(fp)
  8004d8:	1884b03a 	or	r2,r3,r2
  8004dc:	e0bffc15 	stw	r2,-16(fp)
 * Sets the RED LEDs from LEDR0 to LEDR8 to HIGH
 */
void set_red_leds_x_to_x(int LEDRX1, int LEDRX2) {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
	// SET ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = LEDRX1; i < LEDRX2 + 1; i++) {
  8004e0:	e0bffd17 	ldw	r2,-12(fp)
  8004e4:	10800044 	addi	r2,r2,1
  8004e8:	e0bffd15 	stw	r2,-12(fp)
  8004ec:	e0bfff17 	ldw	r2,-4(fp)
  8004f0:	10800044 	addi	r2,r2,1
  8004f4:	e0fffd17 	ldw	r3,-12(fp)
  8004f8:	18bff316 	blt	r3,r2,8004c8 <__alt_mem_onchip_mem+0xff7f84c8>
		led_value = led_value |= (1<<i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  8004fc:	00804074 	movhi	r2,257
  800500:	10842004 	addi	r2,r2,4224
  800504:	e0fffc17 	ldw	r3,-16(fp)
  800508:	10c00035 	stwio	r3,0(r2)
}
  80050c:	0001883a 	nop
  800510:	e037883a 	mov	sp,fp
  800514:	df000017 	ldw	fp,0(sp)
  800518:	dec00104 	addi	sp,sp,4
  80051c:	f800283a 	ret

00800520 <set_half_red_leds_x_to_x>:

/**
 * Sets every second RED LEDs from LEDR0 to LEDR8 to HIGH
 */
void set_half_red_leds_x_to_x(int LEDRX1, int LEDRX2) {
  800520:	defffb04 	addi	sp,sp,-20
  800524:	df000415 	stw	fp,16(sp)
  800528:	df000404 	addi	fp,sp,16
  80052c:	e13ffe15 	stw	r4,-8(fp)
  800530:	e17fff15 	stw	r5,-4(fp)
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800534:	00804074 	movhi	r2,257
  800538:	10842004 	addi	r2,r2,4224
  80053c:	10800037 	ldwio	r2,0(r2)
  800540:	e0bffc15 	stw	r2,-16(fp)
	// SET EVERY SECOND BIT UP FROM LEDR0 TO LEDR8
	for (int i = LEDRX1; i < LEDRX2; i += 2) {
  800544:	e0bffe17 	ldw	r2,-8(fp)
  800548:	e0bffd15 	stw	r2,-12(fp)
  80054c:	00000906 	br	800574 <set_half_red_leds_x_to_x+0x54>
		led_value = led_value |= (1<<i);
  800550:	00c00044 	movi	r3,1
  800554:	e0bffd17 	ldw	r2,-12(fp)
  800558:	1884983a 	sll	r2,r3,r2
  80055c:	e0fffc17 	ldw	r3,-16(fp)
  800560:	1884b03a 	or	r2,r3,r2
  800564:	e0bffc15 	stw	r2,-16(fp)
 * Sets every second RED LEDs from LEDR0 to LEDR8 to HIGH
 */
void set_half_red_leds_x_to_x(int LEDRX1, int LEDRX2) {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
	// SET EVERY SECOND BIT UP FROM LEDR0 TO LEDR8
	for (int i = LEDRX1; i < LEDRX2; i += 2) {
  800568:	e0bffd17 	ldw	r2,-12(fp)
  80056c:	10800084 	addi	r2,r2,2
  800570:	e0bffd15 	stw	r2,-12(fp)
  800574:	e0fffd17 	ldw	r3,-12(fp)
  800578:	e0bfff17 	ldw	r2,-4(fp)
  80057c:	18bff416 	blt	r3,r2,800550 <__alt_mem_onchip_mem+0xff7f8550>
		led_value = led_value |= (1<<i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_value);
  800580:	00804074 	movhi	r2,257
  800584:	10842004 	addi	r2,r2,4224
  800588:	e0fffc17 	ldw	r3,-16(fp)
  80058c:	10c00035 	stwio	r3,0(r2)
}
  800590:	0001883a 	nop
  800594:	e037883a 	mov	sp,fp
  800598:	df000017 	ldw	fp,0(sp)
  80059c:	dec00104 	addi	sp,sp,4
  8005a0:	f800283a 	ret

008005a4 <set_green_leds_x_to_x>:

/**
 * Sets the GREEN LEDs from LEDR0 to LEDR8 to HIGH
 */
void set_green_leds_x_to_x(int LEDGX1, int LEDGX2) {
  8005a4:	defffb04 	addi	sp,sp,-20
  8005a8:	df000415 	stw	fp,16(sp)
  8005ac:	df000404 	addi	fp,sp,16
  8005b0:	e13ffe15 	stw	r4,-8(fp)
  8005b4:	e17fff15 	stw	r5,-4(fp)
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  8005b8:	00804074 	movhi	r2,257
  8005bc:	10841c04 	addi	r2,r2,4208
  8005c0:	10800037 	ldwio	r2,0(r2)
  8005c4:	e0bffc15 	stw	r2,-16(fp)
	// SET ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = LEDGX1; i < LEDGX2 + 1; i++) {
  8005c8:	e0bffe17 	ldw	r2,-8(fp)
  8005cc:	e0bffd15 	stw	r2,-12(fp)
  8005d0:	00000906 	br	8005f8 <set_green_leds_x_to_x+0x54>
		led_value = led_value |= (1<<i);
  8005d4:	00c00044 	movi	r3,1
  8005d8:	e0bffd17 	ldw	r2,-12(fp)
  8005dc:	1884983a 	sll	r2,r3,r2
  8005e0:	e0fffc17 	ldw	r3,-16(fp)
  8005e4:	1884b03a 	or	r2,r3,r2
  8005e8:	e0bffc15 	stw	r2,-16(fp)
 * Sets the GREEN LEDs from LEDR0 to LEDR8 to HIGH
 */
void set_green_leds_x_to_x(int LEDGX1, int LEDGX2) {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
	// SET ALL BITS UP FROM LEDR0 TO LEDR8
	for (int i = LEDGX1; i < LEDGX2 + 1; i++) {
  8005ec:	e0bffd17 	ldw	r2,-12(fp)
  8005f0:	10800044 	addi	r2,r2,1
  8005f4:	e0bffd15 	stw	r2,-12(fp)
  8005f8:	e0bfff17 	ldw	r2,-4(fp)
  8005fc:	10800044 	addi	r2,r2,1
  800600:	e0fffd17 	ldw	r3,-12(fp)
  800604:	18bff316 	blt	r3,r2,8005d4 <__alt_mem_onchip_mem+0xff7f85d4>
		led_value = led_value |= (1<<i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  800608:	00804074 	movhi	r2,257
  80060c:	10841c04 	addi	r2,r2,4208
  800610:	e0fffc17 	ldw	r3,-16(fp)
  800614:	10c00035 	stwio	r3,0(r2)
}
  800618:	0001883a 	nop
  80061c:	e037883a 	mov	sp,fp
  800620:	df000017 	ldw	fp,0(sp)
  800624:	dec00104 	addi	sp,sp,4
  800628:	f800283a 	ret

0080062c <set_half_green_leds_x_to_x>:

/**
 * Sets every second RED LEDs from LEDR0 to LEDR8 to HIGH
 */
void set_half_green_leds_x_to_x(int LEDGX1, int LEDGX2) {
  80062c:	defffb04 	addi	sp,sp,-20
  800630:	df000415 	stw	fp,16(sp)
  800634:	df000404 	addi	fp,sp,16
  800638:	e13ffe15 	stw	r4,-8(fp)
  80063c:	e17fff15 	stw	r5,-4(fp)
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800640:	00804074 	movhi	r2,257
  800644:	10841c04 	addi	r2,r2,4208
  800648:	10800037 	ldwio	r2,0(r2)
  80064c:	e0bffc15 	stw	r2,-16(fp)
	// SET EVERY SECOND BIT UP FROM LEDR0 TO LEDR8
	for (int i = LEDGX1; i < LEDGX2; i += 2) {
  800650:	e0bffe17 	ldw	r2,-8(fp)
  800654:	e0bffd15 	stw	r2,-12(fp)
  800658:	00000906 	br	800680 <set_half_green_leds_x_to_x+0x54>
		led_value = led_value |= (1<<i);
  80065c:	00c00044 	movi	r3,1
  800660:	e0bffd17 	ldw	r2,-12(fp)
  800664:	1884983a 	sll	r2,r3,r2
  800668:	e0fffc17 	ldw	r3,-16(fp)
  80066c:	1884b03a 	or	r2,r3,r2
  800670:	e0bffc15 	stw	r2,-16(fp)
 * Sets every second RED LEDs from LEDR0 to LEDR8 to HIGH
 */
void set_half_green_leds_x_to_x(int LEDGX1, int LEDGX2) {
	int led_value = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
	// SET EVERY SECOND BIT UP FROM LEDR0 TO LEDR8
	for (int i = LEDGX1; i < LEDGX2; i += 2) {
  800674:	e0bffd17 	ldw	r2,-12(fp)
  800678:	10800084 	addi	r2,r2,2
  80067c:	e0bffd15 	stw	r2,-12(fp)
  800680:	e0fffd17 	ldw	r3,-12(fp)
  800684:	e0bfff17 	ldw	r2,-4(fp)
  800688:	18bff416 	blt	r3,r2,80065c <__alt_mem_onchip_mem+0xff7f865c>
		led_value = led_value |= (1<<i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_value);
  80068c:	00804074 	movhi	r2,257
  800690:	10841c04 	addi	r2,r2,4208
  800694:	e0fffc17 	ldw	r3,-16(fp)
  800698:	10c00035 	stwio	r3,0(r2)
}
  80069c:	0001883a 	nop
  8006a0:	e037883a 	mov	sp,fp
  8006a4:	df000017 	ldw	fp,0(sp)
  8006a8:	dec00104 	addi	sp,sp,4
  8006ac:	f800283a 	ret

008006b0 <buttons_interrupts_function>:

int a_timer_count = 0;
int v_timer_count = 0;

void buttons_interrupts_function(void* context, alt_u32 id)
{
  8006b0:	defffb04 	addi	sp,sp,-20
  8006b4:	dfc00415 	stw	ra,16(sp)
  8006b8:	df000315 	stw	fp,12(sp)
  8006bc:	df000304 	addi	fp,sp,12
  8006c0:	e13ffe15 	stw	r4,-8(fp)
  8006c4:	e17fff15 	stw	r5,-4(fp)

	int* temp_button_value = (int*) context; // Cast the context before using it
  8006c8:	e0bffe17 	ldw	r2,-8(fp)
  8006cc:	e0bffd15 	stw	r2,-12(fp)
	(*temp_button_value) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8006d0:	00804074 	movhi	r2,257
  8006d4:	10842b04 	addi	r2,r2,4268
  8006d8:	10c00037 	ldwio	r3,0(r2)
  8006dc:	e0bffd17 	ldw	r2,-12(fp)
  8006e0:	10c00015 	stw	r3,0(r2)

	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8006e4:	0007883a 	mov	r3,zero
  8006e8:	00804074 	movhi	r2,257
  8006ec:	10842b04 	addi	r2,r2,4268
  8006f0:	10c00035 	stwio	r3,0(r2)

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
  8006f4:	d0a74a03 	ldbu	r2,-25304(gp)
  8006f8:	1080005c 	xori	r2,r2,1
  8006fc:	10803fcc 	andi	r2,r2,255
  800700:	10000d1e 	bne	r2,zero,800738 <buttons_interrupts_function+0x88>
		return;
	}


	if ((*temp_button_value & (1 << KEY1))) {
  800704:	e0bffd17 	ldw	r2,-12(fp)
  800708:	10800017 	ldw	r2,0(r2)
  80070c:	1080008c 	andi	r2,r2,2
  800710:	10000226 	beq	r2,zero,80071c <buttons_interrupts_function+0x6c>
		send_atrial_event(false);
  800714:	0009883a 	mov	r4,zero
  800718:	0800fe00 	call	800fe0 <send_atrial_event>
		//printf("Atrium Manually Sent!\n"); -- DEBUGGING PURPOSES
	}

	if ((*temp_button_value & (1 << KEY0))) {
  80071c:	e0bffd17 	ldw	r2,-12(fp)
  800720:	10800017 	ldw	r2,0(r2)
  800724:	1080004c 	andi	r2,r2,1
  800728:	10000426 	beq	r2,zero,80073c <buttons_interrupts_function+0x8c>
		send_ventricular_event(false);
  80072c:	0009883a 	mov	r4,zero
  800730:	08010400 	call	801040 <send_ventricular_event>
  800734:	00000106 	br	80073c <buttons_interrupts_function+0x8c>
	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);

	// If we are NOT in button mode, we exit early.
	if (pulse_mode == UART_MODE) {
		return;
  800738:	0001883a 	nop
		atrial_event = false;
		ventricular_event = false;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
	}
	*/
}
  80073c:	e037883a 	mov	sp,fp
  800740:	dfc00117 	ldw	ra,4(sp)
  800744:	df000017 	ldw	fp,0(sp)
  800748:	dec00204 	addi	sp,sp,8
  80074c:	f800283a 	ret

00800750 <a_pace_led_timer_isr_function>:

alt_u32 a_pace_led_timer_isr_function(void* context) {
  800750:	defffe04 	addi	sp,sp,-8
  800754:	df000115 	stw	fp,4(sp)
  800758:	df000104 	addi	fp,sp,4
  80075c:	e13fff15 	stw	r4,-4(fp)
	led_pace_atrial_event = false;
  800760:	d0274c85 	stb	zero,-25294(gp)
	return LED_ON_MILLISECONDS;
  800764:	00800644 	movi	r2,25
}
  800768:	e037883a 	mov	sp,fp
  80076c:	df000017 	ldw	fp,0(sp)
  800770:	dec00104 	addi	sp,sp,4
  800774:	f800283a 	ret

00800778 <v_pace_led_timer_isr_function>:

alt_u32 v_pace_led_timer_isr_function(void* context) {
  800778:	defffe04 	addi	sp,sp,-8
  80077c:	df000115 	stw	fp,4(sp)
  800780:	df000104 	addi	fp,sp,4
  800784:	e13fff15 	stw	r4,-4(fp)
	led_pace_ventricular_event = false;
  800788:	d0274cc5 	stb	zero,-25293(gp)
	return LED_ON_MILLISECONDS;
  80078c:	00800644 	movi	r2,25
}
  800790:	e037883a 	mov	sp,fp
  800794:	df000017 	ldw	fp,0(sp)
  800798:	dec00104 	addi	sp,sp,4
  80079c:	f800283a 	ret

008007a0 <a_sense_led_timer_isr_function>:

alt_u32 a_sense_led_timer_isr_function(void* context) {
  8007a0:	defffe04 	addi	sp,sp,-8
  8007a4:	df000115 	stw	fp,4(sp)
  8007a8:	df000104 	addi	fp,sp,4
  8007ac:	e13fff15 	stw	r4,-4(fp)
	led_sense_atrial_event = false;
  8007b0:	d0274d05 	stb	zero,-25292(gp)
	return LED_ON_MILLISECONDS;
  8007b4:	00800644 	movi	r2,25
}
  8007b8:	e037883a 	mov	sp,fp
  8007bc:	df000017 	ldw	fp,0(sp)
  8007c0:	dec00104 	addi	sp,sp,4
  8007c4:	f800283a 	ret

008007c8 <v_sense_led_timer_isr_function>:

alt_u32 v_sense_led_timer_isr_function(void* context) {
  8007c8:	defffe04 	addi	sp,sp,-8
  8007cc:	df000115 	stw	fp,4(sp)
  8007d0:	df000104 	addi	fp,sp,4
  8007d4:	e13fff15 	stw	r4,-4(fp)
	led_sense_ventricular_event = false;
  8007d8:	d0274d45 	stb	zero,-25291(gp)
	return LED_ON_MILLISECONDS;
  8007dc:	00800644 	movi	r2,25
}
  8007e0:	e037883a 	mov	sp,fp
  8007e4:	df000017 	ldw	fp,0(sp)
  8007e8:	dec00104 	addi	sp,sp,4
  8007ec:	f800283a 	ret

008007f0 <uart_read_isr_function>:

void uart_read_isr_function(void* context, alt_u32 id)
{
  8007f0:	defffb04 	addi	sp,sp,-20
  8007f4:	dfc00415 	stw	ra,16(sp)
  8007f8:	df000315 	stw	fp,12(sp)
  8007fc:	df000304 	addi	fp,sp,12
  800800:	e13ffe15 	stw	r4,-8(fp)
  800804:	e17fff15 	stw	r5,-4(fp)
	char temp;
	temp = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
  800808:	00804074 	movhi	r2,257
  80080c:	10841004 	addi	r2,r2,4160
  800810:	10800037 	ldwio	r2,0(r2)
  800814:	e0bffd05 	stb	r2,-12(fp)

	// if we are NOT in UART MODE then exit early;
	if (pulse_mode == BUTTON_MODE) {
  800818:	d0a74a03 	ldbu	r2,-25304(gp)
  80081c:	10803fcc 	andi	r2,r2,255
  800820:	10000b1e 	bne	r2,zero,800850 <uart_read_isr_function+0x60>
			//printf("Ventricular Transmitted to UART!\n"); -- DEBUGGING PURPOSES
		}
		return;
	}

	if (temp == 'A') {
  800824:	e0bffd07 	ldb	r2,-12(fp)
  800828:	10801058 	cmpnei	r2,r2,65
  80082c:	1000021e 	bne	r2,zero,800838 <uart_read_isr_function+0x48>
		send_atrial_event(false);
  800830:	0009883a 	mov	r4,zero
  800834:	0800fe00 	call	800fe0 <send_atrial_event>
	}
	if (temp == 'V') {
  800838:	e0bffd07 	ldb	r2,-12(fp)
  80083c:	10801598 	cmpnei	r2,r2,86
  800840:	1000041e 	bne	r2,zero,800854 <uart_read_isr_function+0x64>
		send_ventricular_event(false);
  800844:	0009883a 	mov	r4,zero
  800848:	08010400 	call	801040 <send_ventricular_event>
  80084c:	00000106 	br	800854 <uart_read_isr_function+0x64>
		}

		if (ventricular_event) {
			//printf("Ventricular Transmitted to UART!\n"); -- DEBUGGING PURPOSES
		}
		return;
  800850:	0001883a 	nop
		send_atrial_event(false);
	}
	if (temp == 'V') {
		send_ventricular_event(false);
	}
}
  800854:	e037883a 	mov	sp,fp
  800858:	dfc00117 	ldw	ra,4(sp)
  80085c:	df000017 	ldw	fp,0(sp)
  800860:	dec00204 	addi	sp,sp,8
  800864:	f800283a 	ret

00800868 <a_events_timer_isr_function>:

alt_u32 a_events_timer_isr_function(void* context) {
  800868:	defffd04 	addi	sp,sp,-12
  80086c:	df000215 	stw	fp,8(sp)
  800870:	df000204 	addi	fp,sp,8
  800874:	e13fff15 	stw	r4,-4(fp)
	int *a_timer_count =(int*) context;
  800878:	e0bfff17 	ldw	r2,-4(fp)
  80087c:	e0bffe15 	stw	r2,-8(fp)
	(*a_timer_count)++;
  800880:	e0bffe17 	ldw	r2,-8(fp)
  800884:	10800017 	ldw	r2,0(r2)
  800888:	10c00044 	addi	r3,r2,1
  80088c:	e0bffe17 	ldw	r2,-8(fp)
  800890:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  800894:	00800044 	movi	r2,1
}
  800898:	e037883a 	mov	sp,fp
  80089c:	df000017 	ldw	fp,0(sp)
  8008a0:	dec00104 	addi	sp,sp,4
  8008a4:	f800283a 	ret

008008a8 <v_events_timer_isr_function>:

alt_u32 v_events_timer_isr_function(void* context) {
  8008a8:	defffd04 	addi	sp,sp,-12
  8008ac:	df000215 	stw	fp,8(sp)
  8008b0:	df000204 	addi	fp,sp,8
  8008b4:	e13fff15 	stw	r4,-4(fp)
	int *v_timer_count =(int*) context;
  8008b8:	e0bfff17 	ldw	r2,-4(fp)
  8008bc:	e0bffe15 	stw	r2,-8(fp)
	(*v_timer_count)++;
  8008c0:	e0bffe17 	ldw	r2,-8(fp)
  8008c4:	10800017 	ldw	r2,0(r2)
  8008c8:	10c00044 	addi	r3,r2,1
  8008cc:	e0bffe17 	ldw	r2,-8(fp)
  8008d0:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  8008d4:	00800044 	movi	r2,1
}
  8008d8:	e037883a 	mov	sp,fp
  8008dc:	df000017 	ldw	fp,0(sp)
  8008e0:	dec00104 	addi	sp,sp,4
  8008e4:	f800283a 	ret

008008e8 <system_timer_isr_function>:

alt_u32 system_timer_isr_function(void* context) {
  8008e8:	defffd04 	addi	sp,sp,-12
  8008ec:	df000215 	stw	fp,8(sp)
  8008f0:	df000204 	addi	fp,sp,8
  8008f4:	e13fff15 	stw	r4,-4(fp)
	int *system_timer_count = (int* ) context;
  8008f8:	e0bfff17 	ldw	r2,-4(fp)
  8008fc:	e0bffe15 	stw	r2,-8(fp)
	(*system_timer_count)++;
  800900:	e0bffe17 	ldw	r2,-8(fp)
  800904:	10800017 	ldw	r2,0(r2)
  800908:	10c00044 	addi	r3,r2,1
  80090c:	e0bffe17 	ldw	r2,-8(fp)
  800910:	10c00015 	stw	r3,0(r2)
	return 1; // return 1 millisecond
  800914:	00800044 	movi	r2,1
}
  800918:	e037883a 	mov	sp,fp
  80091c:	df000017 	ldw	fp,0(sp)
  800920:	dec00104 	addi	sp,sp,4
  800924:	f800283a 	ret

00800928 <main>:

int main(void)
{
  800928:	deff8304 	addi	sp,sp,-500
  80092c:	dfc07c15 	stw	ra,496(sp)
  800930:	df007b15 	stw	fp,492(sp)
  800934:	df007b04 	addi	fp,sp,492
	printf("Starting.\n");
  800938:	01002074 	movhi	r4,129
  80093c:	211af404 	addi	r4,r4,27600
  800940:	0807ef00 	call	807ef0 <puts>

	unsigned int switch_value = 0;
  800944:	e03f8615 	stw	zero,-488(fp)
	int button_value = 1;
  800948:	00800044 	movi	r2,1
  80094c:	e0bf8f15 	stw	r2,-452(fp)
	void* button_context = (void*) &button_value; // Cast before passing context to isr
  800950:	e0bf8f04 	addi	r2,fp,-452
  800954:	e0bf8715 	stw	r2,-484(fp)

	unsigned int system_time = 0;
  800958:	e03f8515 	stw	zero,-492(fp)
	unsigned int previous_system_time = 0;
  80095c:	e03f8815 	stw	zero,-480(fp)
	TickData data;
	reset(&data);
  800960:	e0bf9004 	addi	r2,fp,-448
  800964:	1009883a 	mov	r4,r2
  800968:	08053000 	call	805300 <reset>

	// LCD
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
  80096c:	01402074 	movhi	r5,129
  800970:	295af704 	addi	r5,r5,27612
  800974:	01002074 	movhi	r4,129
  800978:	211af804 	addi	r4,r4,27616
  80097c:	0806ca00 	call	806ca0 <fopen>
  800980:	e0bf8915 	stw	r2,-476(fp)

	//========= 	  INTERRUPTS  	   =========

	// Clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  800984:	0007883a 	mov	r3,zero
  800988:	00804074 	movhi	r2,257
  80098c:	10842b04 	addi	r2,r2,4268
  800990:	10c00035 	stwio	r3,0(r2)

	// Enable interrupts
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  800994:	00c001c4 	movi	r3,7
  800998:	00804074 	movhi	r2,257
  80099c:	10842a04 	addi	r2,r2,4264
  8009a0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(UART_BASE, 0x0080);
  8009a4:	00c02004 	movi	r3,128
  8009a8:	00804074 	movhi	r2,257
  8009ac:	10841204 	addi	r2,r2,4168
  8009b0:	10c00035 	stwio	r3,0(r2)

	// Register the isr
	alt_irq_register(KEYS_IRQ, button_context, buttons_interrupts_function);
  8009b4:	01802034 	movhi	r6,128
  8009b8:	3181ac04 	addi	r6,r6,1712
  8009bc:	e17f8717 	ldw	r5,-484(fp)
  8009c0:	01000104 	movi	r4,4
  8009c4:	0812c240 	call	812c24 <alt_irq_register>
	alt_irq_register(UART_IRQ, NULL, uart_read_isr_function);
  8009c8:	01802034 	movhi	r6,128
  8009cc:	3181fc04 	addi	r6,r6,2032
  8009d0:	000b883a 	mov	r5,zero
  8009d4:	0009883a 	mov	r4,zero
  8009d8:	0812c240 	call	812c24 <alt_irq_register>

	printf("Interrupts Initialised.\n");
  8009dc:	01002074 	movhi	r4,129
  8009e0:	211afb04 	addi	r4,r4,27628
  8009e4:	0807ef00 	call	807ef0 <puts>
	//========= 	  INTERRUPTS  	   =========
	//========= 	    TIMERS  	   =========
	// Lets LEDs stay on for 500 seconds.
	alt_alarm a_pace_led_timer;
	alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  8009e8:	e0bfd504 	addi	r2,fp,-172
  8009ec:	000f883a 	mov	r7,zero
  8009f0:	01802034 	movhi	r6,128
  8009f4:	3181d404 	addi	r6,r6,1872
  8009f8:	01400644 	movi	r5,25
  8009fc:	1009883a 	mov	r4,r2
  800a00:	08128d40 	call	8128d4 <alt_alarm_start>

	alt_alarm v_pace_led_timer;
	alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  800a04:	e0bfdb04 	addi	r2,fp,-148
  800a08:	000f883a 	mov	r7,zero
  800a0c:	01802034 	movhi	r6,128
  800a10:	3181de04 	addi	r6,r6,1912
  800a14:	01400644 	movi	r5,25
  800a18:	1009883a 	mov	r4,r2
  800a1c:	08128d40 	call	8128d4 <alt_alarm_start>

	alt_alarm a_sense_led_timer;
	alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  800a20:	e0bfe104 	addi	r2,fp,-124
  800a24:	000f883a 	mov	r7,zero
  800a28:	01802034 	movhi	r6,128
  800a2c:	3181e804 	addi	r6,r6,1952
  800a30:	01400644 	movi	r5,25
  800a34:	1009883a 	mov	r4,r2
  800a38:	08128d40 	call	8128d4 <alt_alarm_start>

	alt_alarm v_sense_led_timer;
	alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  800a3c:	e0bfe704 	addi	r2,fp,-100
  800a40:	000f883a 	mov	r7,zero
  800a44:	01802034 	movhi	r6,128
  800a48:	3181f204 	addi	r6,r6,1992
  800a4c:	01400644 	movi	r5,25
  800a50:	1009883a 	mov	r4,r2
  800a54:	08128d40 	call	8128d4 <alt_alarm_start>

	alt_alarm system_timer;
	int system_timer_count = 0;
  800a58:	e03ff315 	stw	zero,-52(fp)
	void *system_timer_context = (void*) &system_timer_count;
  800a5c:	e0bff304 	addi	r2,fp,-52
  800a60:	e0bf8a15 	stw	r2,-472(fp)
	alt_alarm_start(&system_timer, 1, system_timer_isr_function, system_timer_context);
  800a64:	e0bfed04 	addi	r2,fp,-76
  800a68:	e1ff8a17 	ldw	r7,-472(fp)
  800a6c:	01802034 	movhi	r6,128
  800a70:	31823a04 	addi	r6,r6,2280
  800a74:	01400044 	movi	r5,1
  800a78:	1009883a 	mov	r4,r2
  800a7c:	08128d40 	call	8128d4 <alt_alarm_start>

	alt_alarm a_events_timer;
	// a_timer_count = 0;
	void *a_events_timer_context = (void*) &a_timer_count;
  800a80:	d0a75004 	addi	r2,gp,-25280
  800a84:	e0bf8b15 	stw	r2,-468(fp)
	alt_alarm_start(&a_events_timer, 1, a_events_timer_isr_function, a_events_timer_context);
  800a88:	e0bff404 	addi	r2,fp,-48
  800a8c:	e1ff8b17 	ldw	r7,-468(fp)
  800a90:	01802034 	movhi	r6,128
  800a94:	31821a04 	addi	r6,r6,2152
  800a98:	01400044 	movi	r5,1
  800a9c:	1009883a 	mov	r4,r2
  800aa0:	08128d40 	call	8128d4 <alt_alarm_start>

	alt_alarm v_events_timer;
	//int v_timer_count = 0;
	void *v_events_timer_context = (void*) &v_timer_count;
  800aa4:	d0a75104 	addi	r2,gp,-25276
  800aa8:	e0bf8c15 	stw	r2,-464(fp)
	alt_alarm_start(&v_events_timer, 1, v_events_timer_isr_function, v_events_timer_context);
  800aac:	e0bffa04 	addi	r2,fp,-24
  800ab0:	e1ff8c17 	ldw	r7,-464(fp)
  800ab4:	01802034 	movhi	r6,128
  800ab8:	31822a04 	addi	r6,r6,2216
  800abc:	01400044 	movi	r5,1
  800ac0:	1009883a 	mov	r4,r2
  800ac4:	08128d40 	call	8128d4 <alt_alarm_start>


	//========= 	    TIMERS  	   =========
	printf("Timers Initialised.\n");
  800ac8:	01002074 	movhi	r4,129
  800acc:	211b0104 	addi	r4,r4,27652
  800ad0:	0807ef00 	call	807ef0 <puts>

	printf("Entering Loop.\n");
  800ad4:	01002074 	movhi	r4,129
  800ad8:	211b0604 	addi	r4,r4,27672
  800adc:	0807ef00 	call	807ef0 <puts>
	while(1) {
		previous_system_time = system_time;
  800ae0:	e0bf8517 	ldw	r2,-492(fp)
  800ae4:	e0bf8815 	stw	r2,-480(fp)
		system_time = system_timer_count;
  800ae8:	e0bff317 	ldw	r2,-52(fp)
  800aec:	e0bf8515 	stw	r2,-492(fp)
		data.AS = 0;
  800af0:	e03fad05 	stb	zero,-332(fp)
		data.VS = 0;
  800af4:	e03fad45 	stb	zero,-331(fp)
		data.deltaT = system_time - previous_system_time;
  800af8:	e0ff8517 	ldw	r3,-492(fp)
  800afc:	e0bf8817 	ldw	r2,-480(fp)
  800b00:	1885c83a 	sub	r2,r3,r2
  800b04:	1009883a 	mov	r4,r2
  800b08:	0806aa00 	call	806aa0 <__floatunsidf>
  800b0c:	1009883a 	mov	r4,r2
  800b10:	180b883a 	mov	r5,r3
  800b14:	e13fa915 	stw	r4,-348(fp)
  800b18:	e17faa15 	stw	r5,-344(fp)
		//tick(&data);

		// Get switch state from switch peripheral (returns a binary)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800b1c:	00804074 	movhi	r2,257
  800b20:	10842404 	addi	r2,r2,4240
  800b24:	10800037 	ldwio	r2,0(r2)
  800b28:	e0bf8615 	stw	r2,-488(fp)

		// CHECK FOR PULSE MODE == CHECK FOR PULSE MODE == CHECK FOR PULSE MODE ==
		// CHECK FOR PULSE MODE == CHECK FOR PULSE MODE == CHECK FOR PULSE MODE ==
		set_pulse_mode_on_switch(switch_value);
  800b2c:	e13f8617 	ldw	r4,-488(fp)
  800b30:	08012340 	call	801234 <set_pulse_mode_on_switch>
		// CHECK FOR PULSE MODE == CHECK FOR PULSE MODE == CHECK FOR PULSE MODE ==
		// CHECK FOR PULSE MODE == CHECK FOR PULSE MODE == CHECK FOR PULSE MODE ==

		// CHECK FOR IMPLEMENTATION MODE == CHECK FOR IMPLEMENTATION MODE ==
		// CHECK FOR IMPLEMENTATION MODE == CHECK FOR IMPLEMENTATION MODE ==
		if (switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH)) {
  800b34:	e0bf8617 	ldw	r2,-488(fp)
  800b38:	1080008c 	andi	r2,r2,2
  800b3c:	10000b26 	beq	r2,zero,800b6c <main+0x244>
			// Set switched flag for printing to LCD
			if (!implementation_switched_flag) {
  800b40:	d0a00003 	ldbu	r2,-32768(gp)
  800b44:	1080005c 	xori	r2,r2,1
  800b48:	10803fcc 	andi	r2,r2,255
  800b4c:	10000426 	beq	r2,zero,800b60 <main+0x238>
				implementation_switched_flag = true;
  800b50:	00800044 	movi	r2,1
  800b54:	d0a00005 	stb	r2,-32768(gp)
				print_flag = true;
  800b58:	00800044 	movi	r2,1
  800b5c:	d0a74e85 	stb	r2,-25286(gp)
			}
			// SW1 is ON
			implementation_mode = SCCHARTS_MODE;
  800b60:	00800044 	movi	r2,1
  800b64:	d0a74a45 	stb	r2,-25303(gp)
  800b68:	00000a06 	br	800b94 <main+0x26c>
		} else if (!(switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH))) {
  800b6c:	e0bf8617 	ldw	r2,-488(fp)
  800b70:	1080008c 	andi	r2,r2,2
  800b74:	1000071e 	bne	r2,zero,800b94 <main+0x26c>
			// Set switched flag for printing to LCD
			if (implementation_switched_flag) {
  800b78:	d0a00003 	ldbu	r2,-32768(gp)
  800b7c:	10803fcc 	andi	r2,r2,255
  800b80:	10000326 	beq	r2,zero,800b90 <main+0x268>
				implementation_switched_flag = false;
  800b84:	d0200005 	stb	zero,-32768(gp)
				print_flag = true;
  800b88:	00800044 	movi	r2,1
  800b8c:	d0a74e85 	stb	r2,-25286(gp)
			}
			// SW1 is OFF
			implementation_mode = C_MODE;
  800b90:	d0274a45 	stb	zero,-25303(gp)
		// CHECK FOR IMPLEMENTATION MODE == CHECK FOR IMPLEMENTATION MODE ==
		// CHECK FOR IMPLEMENTATION MODE == CHECK FOR IMPLEMENTATION MODE ==

		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS == CHECK FOR ATRIAL AND VENTRICULAR EVENTS ==
		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS == CHECK FOR ATRIAL AND VENTRICULAR EVENTS ==
		if (atrial_event) {
  800b94:	d0a74a83 	ldbu	r2,-25302(gp)
  800b98:	10803fcc 	andi	r2,r2,255
  800b9c:	10002826 	beq	r2,zero,800c40 <main+0x318>
			atrial_event = false; // COULD BE A PROBLEM?
  800ba0:	d0274a85 	stb	zero,-25302(gp)
			// Reset timer if atrial event is sensed after PVARP
			// Atrial sense is when a valid atrial event happens
			// (happening after PVARP and last event as an ventricular event)
			if (implementation_mode == C_MODE) {
  800ba4:	d0a74a43 	ldbu	r2,-25303(gp)
  800ba8:	1080005c 	xori	r2,r2,1
  800bac:	10803fcc 	andi	r2,r2,255
  800bb0:	10000c26 	beq	r2,zero,800be4 <main+0x2bc>
				if (v_timer_count >= PVARP_VALUE && current_event == VENTRICULAR_EVENT) {
  800bb4:	d0a75117 	ldw	r2,-25276(gp)
  800bb8:	10800c90 	cmplti	r2,r2,50
  800bbc:	1000141e 	bne	r2,zero,800c10 <main+0x2e8>
  800bc0:	d0a74f17 	ldw	r2,-25284(gp)
  800bc4:	10800058 	cmpnei	r2,r2,1
  800bc8:	1000111e 	bne	r2,zero,800c10 <main+0x2e8>
					current_event = ATRIAL_EVENT;
  800bcc:	d0274f15 	stw	zero,-25284(gp)
					atrial_sense = true;
  800bd0:	00800044 	movi	r2,1
  800bd4:	d0a74b85 	stb	r2,-25298(gp)
					ventricular_sense = false;
  800bd8:	d0274bc5 	stb	zero,-25297(gp)
					a_timer_count = 0;
  800bdc:	d0275015 	stw	zero,-25280(gp)
  800be0:	00000b06 	br	800c10 <main+0x2e8>
				}
			} else if (implementation_mode == SCCHARTS_MODE) {
  800be4:	d0a74a43 	ldbu	r2,-25303(gp)
  800be8:	10803fcc 	andi	r2,r2,255
  800bec:	10000826 	beq	r2,zero,800c10 <main+0x2e8>
				if (!a_is_paced) {
  800bf0:	d0a74ac3 	ldbu	r2,-25301(gp)
  800bf4:	1080005c 	xori	r2,r2,1
  800bf8:	10803fcc 	andi	r2,r2,255
  800bfc:	10000326 	beq	r2,zero,800c0c <main+0x2e4>
					data.AS = 1;
  800c00:	00800044 	movi	r2,1
  800c04:	e0bfad05 	stb	r2,-332(fp)
  800c08:	00000106 	br	800c10 <main+0x2e8>
				} else {
					data.AS = 0;
  800c0c:	e03fad05 	stb	zero,-332(fp)
				}
			}
			if (a_is_paced) {
  800c10:	d0a74ac3 	ldbu	r2,-25301(gp)
  800c14:	10803fcc 	andi	r2,r2,255
  800c18:	10000526 	beq	r2,zero,800c30 <main+0x308>
				led_pace_atrial_event = true;
  800c1c:	00800044 	movi	r2,1
  800c20:	d0a74c85 	stb	r2,-25294(gp)
				atrial_sense_paced = true;
  800c24:	00800044 	movi	r2,1
  800c28:	d0a74c05 	stb	r2,-25296(gp)
  800c2c:	00000306 	br	800c3c <main+0x314>
				//printf("Atrial Sensed! - Paced!\n"); -- DEBUGGING
			} else {
				led_sense_atrial_event = true;
  800c30:	00800044 	movi	r2,1
  800c34:	d0a74d05 	stb	r2,-25292(gp)
				atrial_sense_paced = false;
  800c38:	d0274c05 	stb	zero,-25296(gp)
				//printf("Atrial Sensed! - Not Paced\n"); -- DEBUGGING
			}
			a_is_paced = false;
  800c3c:	d0274ac5 	stb	zero,-25301(gp)
		}
		if (ventricular_event) {
  800c40:	d0a74b03 	ldbu	r2,-25300(gp)
  800c44:	10803fcc 	andi	r2,r2,255
  800c48:	10002e26 	beq	r2,zero,800d04 <main+0x3dc>
			ventricular_event = false;
  800c4c:	d0274b05 	stb	zero,-25300(gp)
			if (implementation_mode == C_MODE) {
  800c50:	d0a74a43 	ldbu	r2,-25303(gp)
  800c54:	1080005c 	xori	r2,r2,1
  800c58:	10803fcc 	andi	r2,r2,255
  800c5c:	10000c26 	beq	r2,zero,800c90 <main+0x368>
				// Reset timer if ventricular event is sensed after VRP
				// Ventricular sense is when a valid ventricular event happens
				// (happening after VRP and last event as an atrial event)
				if (v_timer_count >= VRP_VALUE && current_event == ATRIAL_EVENT) {
  800c60:	d0a75117 	ldw	r2,-25276(gp)
  800c64:	10802590 	cmplti	r2,r2,150
  800c68:	1000141e 	bne	r2,zero,800cbc <main+0x394>
  800c6c:	d0a74f17 	ldw	r2,-25284(gp)
  800c70:	1000121e 	bne	r2,zero,800cbc <main+0x394>
					//printf("Valid Ventricle Sense!\n"); - DEBUGGING
					current_event = VENTRICULAR_EVENT;
  800c74:	00800044 	movi	r2,1
  800c78:	d0a74f15 	stw	r2,-25284(gp)
					ventricular_sense = true;
  800c7c:	00800044 	movi	r2,1
  800c80:	d0a74bc5 	stb	r2,-25297(gp)
					atrial_sense = false;
  800c84:	d0274b85 	stb	zero,-25298(gp)
					v_timer_count = 0;
  800c88:	d0275115 	stw	zero,-25276(gp)
  800c8c:	00000b06 	br	800cbc <main+0x394>
				}

			} else if (implementation_mode == SCCHARTS_MODE) {
  800c90:	d0a74a43 	ldbu	r2,-25303(gp)
  800c94:	10803fcc 	andi	r2,r2,255
  800c98:	10000826 	beq	r2,zero,800cbc <main+0x394>
				if (!v_is_paced) {
  800c9c:	d0a74b43 	ldbu	r2,-25299(gp)
  800ca0:	1080005c 	xori	r2,r2,1
  800ca4:	10803fcc 	andi	r2,r2,255
  800ca8:	10000326 	beq	r2,zero,800cb8 <main+0x390>
					data.VS = 1;
  800cac:	00800044 	movi	r2,1
  800cb0:	e0bfad45 	stb	r2,-331(fp)
  800cb4:	00000106 	br	800cbc <main+0x394>
				}
				else {
					data.VS = 0;
  800cb8:	e03fad45 	stb	zero,-331(fp)
				}
			}
			if (v_is_paced) {
  800cbc:	d0a74b43 	ldbu	r2,-25299(gp)
  800cc0:	10803fcc 	andi	r2,r2,255
  800cc4:	10000526 	beq	r2,zero,800cdc <main+0x3b4>
				led_pace_ventricular_event = true;
  800cc8:	00800044 	movi	r2,1
  800ccc:	d0a74cc5 	stb	r2,-25293(gp)
				ventricular_sense_paced = true;
  800cd0:	00800044 	movi	r2,1
  800cd4:	d0a74c45 	stb	r2,-25295(gp)
  800cd8:	00000306 	br	800ce8 <main+0x3c0>
				//printf("Ventricle Sensed! -- Paced\n"); -- DEBUGGING PURPOSES
			} else {
				led_sense_ventricular_event = true;
  800cdc:	00800044 	movi	r2,1
  800ce0:	d0a74d45 	stb	r2,-25291(gp)
				ventricular_sense_paced = false;
  800ce4:	d0274c45 	stb	zero,-25295(gp)
				//printf("Ventricle Sensed! -- Not Paced\n"); -- DEBUGGING PURPOSES
			}
			if (!ventricular_sense) {
  800ce8:	d0a74bc3 	ldbu	r2,-25297(gp)
  800cec:	1080005c 	xori	r2,r2,1
  800cf0:	10803fcc 	andi	r2,r2,255
  800cf4:	10000226 	beq	r2,zero,800d00 <main+0x3d8>
				led_pace_ventricular_event = false;
  800cf8:	d0274cc5 	stb	zero,-25293(gp)
				led_sense_ventricular_event = false;
  800cfc:	d0274d45 	stb	zero,-25291(gp)
			}
			v_is_paced = false;
  800d00:	d0274b45 	stb	zero,-25299(gp)
		// CHECK FOR ATRIAL AND VENTRICULAR EVENTS == CHECK FOR ATRIAL AND VENTRICULAR EVENTS ==

		// IMPLEMENTATION MODE == IMPLEMENTATION MODE == IMPLEMENTATION MODE ==
		// IMPLEMENTATION MODE == IMPLEMENTATION MODE == IMPLEMENTATION MODE ==
		// Execute respective pacemaker timing depending on current implementation mode
		if (implementation_mode == C_MODE) {
  800d04:	d0a74a43 	ldbu	r2,-25303(gp)
  800d08:	1080005c 	xori	r2,r2,1
  800d0c:	10803fcc 	andi	r2,r2,255
  800d10:	10000626 	beq	r2,zero,800d2c <main+0x404>
			c_mode_pacemaker(a_timer_count, v_timer_count);
  800d14:	d0a75017 	ldw	r2,-25280(gp)
  800d18:	d0e75117 	ldw	r3,-25276(gp)
  800d1c:	180b883a 	mov	r5,r3
  800d20:	1009883a 	mov	r4,r2
  800d24:	08011700 	call	801170 <c_mode_pacemaker>
  800d28:	00001806 	br	800d8c <main+0x464>
		} else if (implementation_mode == SCCHARTS_MODE) {
  800d2c:	d0a74a43 	ldbu	r2,-25303(gp)
  800d30:	10803fcc 	andi	r2,r2,255
  800d34:	10001526 	beq	r2,zero,800d8c <main+0x464>
			tick(&data);
  800d38:	e0bf9004 	addi	r2,fp,-448
  800d3c:	1009883a 	mov	r4,r2
  800d40:	08054c00 	call	8054c0 <tick>

			int a_test = data.AP;
  800d44:	e0bfad83 	ldbu	r2,-330(fp)
  800d48:	10803fcc 	andi	r2,r2,255
  800d4c:	1080201c 	xori	r2,r2,128
  800d50:	10bfe004 	addi	r2,r2,-128
  800d54:	e0bf8d15 	stw	r2,-460(fp)
			int v_test = data.VP;
  800d58:	e0bfadc3 	ldbu	r2,-329(fp)
  800d5c:	10803fcc 	andi	r2,r2,255
  800d60:	1080201c 	xori	r2,r2,128
  800d64:	10bfe004 	addi	r2,r2,-128
  800d68:	e0bf8e15 	stw	r2,-456(fp)

			// Send respective pace events if AP or VP are true
			if (a_test) {
  800d6c:	e0bf8d17 	ldw	r2,-460(fp)
  800d70:	10000226 	beq	r2,zero,800d7c <main+0x454>
				send_atrial_event(true);
  800d74:	01000044 	movi	r4,1
  800d78:	0800fe00 	call	800fe0 <send_atrial_event>
			}
			if (v_test) {
  800d7c:	e0bf8e17 	ldw	r2,-456(fp)
  800d80:	10000226 	beq	r2,zero,800d8c <main+0x464>
				send_ventricular_event(true);
  800d84:	01000044 	movi	r4,1
  800d88:	08010400 	call	801040 <send_ventricular_event>
		// IMPLEMENTATION MODE == IMPLEMENTATION MODE == IMPLEMENTATION MODE ==

		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// PACE LEDS == PACE LEDS == PACE LEDS == PACE LEDS ==
		// Set left side of GREEN LEDs on atrial pace event
		if (led_pace_atrial_event) {
  800d8c:	d0a74c83 	ldbu	r2,-25294(gp)
  800d90:	10803fcc 	andi	r2,r2,255
  800d94:	10001e26 	beq	r2,zero,800e10 <main+0x4e8>
			// LEDs active delay logic
			if (!a_pace_led_timer_already_started) {
  800d98:	d0a74d83 	ldbu	r2,-25290(gp)
  800d9c:	1080005c 	xori	r2,r2,1
  800da0:	10803fcc 	andi	r2,r2,255
  800da4:	10000c26 	beq	r2,zero,800dd8 <main+0x4b0>
				alt_alarm_stop(&a_pace_led_timer);
  800da8:	e0bfd504 	addi	r2,fp,-172
  800dac:	1009883a 	mov	r4,r2
  800db0:	08135e40 	call	8135e4 <alt_alarm_stop>
				alt_alarm_start(&a_pace_led_timer, LED_ON_MILLISECONDS, a_pace_led_timer_isr_function, NULL);
  800db4:	e0bfd504 	addi	r2,fp,-172
  800db8:	000f883a 	mov	r7,zero
  800dbc:	01802034 	movhi	r6,128
  800dc0:	3181d404 	addi	r6,r6,1872
  800dc4:	01400644 	movi	r5,25
  800dc8:	1009883a 	mov	r4,r2
  800dcc:	08128d40 	call	8128d4 <alt_alarm_start>
				a_pace_led_timer_already_started = true;
  800dd0:	00800044 	movi	r2,1
  800dd4:	d0a74d85 	stb	r2,-25290(gp)
			}
			// Sets GREEN PACE LEDs depending on implementation mode
			if (implementation_mode == C_MODE) {
  800dd8:	d0a74a43 	ldbu	r2,-25303(gp)
  800ddc:	1080005c 	xori	r2,r2,1
  800de0:	10803fcc 	andi	r2,r2,255
  800de4:	10000426 	beq	r2,zero,800df8 <main+0x4d0>
				set_green_leds_x_to_x(LEDG4, LEDG7);
  800de8:	014001c4 	movi	r5,7
  800dec:	01000104 	movi	r4,4
  800df0:	08005a40 	call	8005a4 <set_green_leds_x_to_x>
  800df4:	00000606 	br	800e10 <main+0x4e8>
			} else if (implementation_mode == SCCHARTS_MODE) {
  800df8:	d0a74a43 	ldbu	r2,-25303(gp)
  800dfc:	10803fcc 	andi	r2,r2,255
  800e00:	10000326 	beq	r2,zero,800e10 <main+0x4e8>
				set_half_green_leds_x_to_x(LEDG4, LEDG7);
  800e04:	014001c4 	movi	r5,7
  800e08:	01000104 	movi	r4,4
  800e0c:	080062c0 	call	80062c <set_half_green_leds_x_to_x>
			}
		}
		// Set right side of GREEN LEDs on ventricular pace event
		if (led_pace_ventricular_event) {
  800e10:	d0a74cc3 	ldbu	r2,-25293(gp)
  800e14:	10803fcc 	andi	r2,r2,255
  800e18:	10001e26 	beq	r2,zero,800e94 <main+0x56c>
			if (!v_pace_led_timer_already_started) {
  800e1c:	d0a74dc3 	ldbu	r2,-25289(gp)
  800e20:	1080005c 	xori	r2,r2,1
  800e24:	10803fcc 	andi	r2,r2,255
  800e28:	10000c26 	beq	r2,zero,800e5c <main+0x534>
				// LEDs active delay logic
				alt_alarm_stop(&v_pace_led_timer);
  800e2c:	e0bfdb04 	addi	r2,fp,-148
  800e30:	1009883a 	mov	r4,r2
  800e34:	08135e40 	call	8135e4 <alt_alarm_stop>
				alt_alarm_start(&v_pace_led_timer, LED_ON_MILLISECONDS, v_pace_led_timer_isr_function, NULL);
  800e38:	e0bfdb04 	addi	r2,fp,-148
  800e3c:	000f883a 	mov	r7,zero
  800e40:	01802034 	movhi	r6,128
  800e44:	3181de04 	addi	r6,r6,1912
  800e48:	01400644 	movi	r5,25
  800e4c:	1009883a 	mov	r4,r2
  800e50:	08128d40 	call	8128d4 <alt_alarm_start>
				v_pace_led_timer_already_started = true;
  800e54:	00800044 	movi	r2,1
  800e58:	d0a74dc5 	stb	r2,-25289(gp)
			}
			// Sets GREEN PACE LEDs depending on implementation mode
			if (implementation_mode == C_MODE) {
  800e5c:	d0a74a43 	ldbu	r2,-25303(gp)
  800e60:	1080005c 	xori	r2,r2,1
  800e64:	10803fcc 	andi	r2,r2,255
  800e68:	10000426 	beq	r2,zero,800e7c <main+0x554>
				set_green_leds_x_to_x(LEDG0, LEDG3);
  800e6c:	014000c4 	movi	r5,3
  800e70:	0009883a 	mov	r4,zero
  800e74:	08005a40 	call	8005a4 <set_green_leds_x_to_x>
  800e78:	00000606 	br	800e94 <main+0x56c>
			} else if (implementation_mode == SCCHARTS_MODE) {
  800e7c:	d0a74a43 	ldbu	r2,-25303(gp)
  800e80:	10803fcc 	andi	r2,r2,255
  800e84:	10000326 	beq	r2,zero,800e94 <main+0x56c>
				set_half_green_leds_x_to_x(LEDG0, LEDG3);
  800e88:	014000c4 	movi	r5,3
  800e8c:	0009883a 	mov	r4,zero
  800e90:	080062c0 	call	80062c <set_half_green_leds_x_to_x>
		// PACE GREEN LEDS == PACE GREEN LEDS == PACE GREEN LEDS == PACE GREEN LEDS == PACE GREEN LEDS ==

		// SENSE RED LED IMPLENENTATION == SENSE RED LED IMPLENENTATION ==SENSE RED LED IMPLENENTATION ==
		// SENSE RED LED IMPLENENTATION == SENSE RED LED IMPLENENTATION ==SENSE RED LED IMPLENENTATION ==
		// Set left side of RED LEDs when atrial event is sensed
		if (led_sense_atrial_event) {
  800e94:	d0a74d03 	ldbu	r2,-25292(gp)
  800e98:	10803fcc 	andi	r2,r2,255
  800e9c:	10001e26 	beq	r2,zero,800f18 <main+0x5f0>
			// LEDs active delay logic
			if (!a_sense_led_timer_already_started) {
  800ea0:	d0a74e03 	ldbu	r2,-25288(gp)
  800ea4:	1080005c 	xori	r2,r2,1
  800ea8:	10803fcc 	andi	r2,r2,255
  800eac:	10000c26 	beq	r2,zero,800ee0 <main+0x5b8>
				alt_alarm_stop(&a_sense_led_timer);
  800eb0:	e0bfe104 	addi	r2,fp,-124
  800eb4:	1009883a 	mov	r4,r2
  800eb8:	08135e40 	call	8135e4 <alt_alarm_stop>
				alt_alarm_start(&a_sense_led_timer, LED_ON_MILLISECONDS, a_sense_led_timer_isr_function, NULL);
  800ebc:	e0bfe104 	addi	r2,fp,-124
  800ec0:	000f883a 	mov	r7,zero
  800ec4:	01802034 	movhi	r6,128
  800ec8:	3181e804 	addi	r6,r6,1952
  800ecc:	01400644 	movi	r5,25
  800ed0:	1009883a 	mov	r4,r2
  800ed4:	08128d40 	call	8128d4 <alt_alarm_start>
				a_sense_led_timer_already_started = true;
  800ed8:	00800044 	movi	r2,1
  800edc:	d0a74e05 	stb	r2,-25288(gp)
			}
			// Sets RED SENSE LEDs depending on implementation mode
			if (implementation_mode == C_MODE) {
  800ee0:	d0a74a43 	ldbu	r2,-25303(gp)
  800ee4:	1080005c 	xori	r2,r2,1
  800ee8:	10803fcc 	andi	r2,r2,255
  800eec:	10000426 	beq	r2,zero,800f00 <main+0x5d8>
				set_red_leds_x_to_x(LEDR9, LEDR17);
  800ef0:	01400444 	movi	r5,17
  800ef4:	01000244 	movi	r4,9
  800ef8:	08004980 	call	800498 <set_red_leds_x_to_x>
  800efc:	00000606 	br	800f18 <main+0x5f0>
			} else if (implementation_mode == SCCHARTS_MODE) {
  800f00:	d0a74a43 	ldbu	r2,-25303(gp)
  800f04:	10803fcc 	andi	r2,r2,255
  800f08:	10000326 	beq	r2,zero,800f18 <main+0x5f0>
				set_half_red_leds_x_to_x(LEDR9, LEDR17);
  800f0c:	01400444 	movi	r5,17
  800f10:	01000244 	movi	r4,9
  800f14:	08005200 	call	800520 <set_half_red_leds_x_to_x>
			}
		}
		// Set right side of RED LEDs when ventricular event is sensed
		if (led_sense_ventricular_event) {
  800f18:	d0a74d43 	ldbu	r2,-25291(gp)
  800f1c:	10803fcc 	andi	r2,r2,255
  800f20:	10001e26 	beq	r2,zero,800f9c <main+0x674>
			// LEDs active delay logic
			if (!v_sense_led_timer_already_started) {
  800f24:	d0a74e43 	ldbu	r2,-25287(gp)
  800f28:	1080005c 	xori	r2,r2,1
  800f2c:	10803fcc 	andi	r2,r2,255
  800f30:	10000c26 	beq	r2,zero,800f64 <main+0x63c>
				alt_alarm_stop(&v_sense_led_timer);
  800f34:	e0bfe704 	addi	r2,fp,-100
  800f38:	1009883a 	mov	r4,r2
  800f3c:	08135e40 	call	8135e4 <alt_alarm_stop>
				alt_alarm_start(&v_sense_led_timer, LED_ON_MILLISECONDS, v_sense_led_timer_isr_function, NULL);
  800f40:	e0bfe704 	addi	r2,fp,-100
  800f44:	000f883a 	mov	r7,zero
  800f48:	01802034 	movhi	r6,128
  800f4c:	3181f204 	addi	r6,r6,1992
  800f50:	01400644 	movi	r5,25
  800f54:	1009883a 	mov	r4,r2
  800f58:	08128d40 	call	8128d4 <alt_alarm_start>
				v_sense_led_timer_already_started = true;
  800f5c:	00800044 	movi	r2,1
  800f60:	d0a74e45 	stb	r2,-25287(gp)
			}
			// Sets RED SENSE LEDs depending on implementation mode
			if (implementation_mode == C_MODE) {
  800f64:	d0a74a43 	ldbu	r2,-25303(gp)
  800f68:	1080005c 	xori	r2,r2,1
  800f6c:	10803fcc 	andi	r2,r2,255
  800f70:	10000426 	beq	r2,zero,800f84 <main+0x65c>
				set_red_leds_x_to_x(LEDR0, LEDR8);
  800f74:	01400204 	movi	r5,8
  800f78:	0009883a 	mov	r4,zero
  800f7c:	08004980 	call	800498 <set_red_leds_x_to_x>
  800f80:	00000606 	br	800f9c <main+0x674>
			} else if (implementation_mode == SCCHARTS_MODE) {
  800f84:	d0a74a43 	ldbu	r2,-25303(gp)
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	10000326 	beq	r2,zero,800f9c <main+0x674>
				set_half_red_leds_x_to_x(LEDR0, LEDR8);
  800f90:	01400204 	movi	r5,8
  800f94:	0009883a 	mov	r4,zero
  800f98:	08005200 	call	800520 <set_half_red_leds_x_to_x>
		// SENSE RED LED IMPLENENTATION == SENSE RED LED IMPLENENTATION ==SENSE RED LED IMPLENENTATION ==
		// SENSE RED LED IMPLENENTATION == SENSE RED LED IMPLENENTATION ==SENSE RED LED IMPLENENTATION ==

		// LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION ==
		// LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION ==
		if (lcd != NULL) {
  800f9c:	e0bf8917 	ldw	r2,-476(fp)
  800fa0:	10000c26 	beq	r2,zero,800fd4 <main+0x6ac>
			// Print flag used to print once every time either mode changes
			// instead of every while iteration
			if (print_flag) {
  800fa4:	d0a74e83 	ldbu	r2,-25286(gp)
  800fa8:	10803fcc 	andi	r2,r2,255
  800fac:	10000926 	beq	r2,zero,800fd4 <main+0x6ac>
				print_flag = false;
  800fb0:	d0274e85 	stb	zero,-25286(gp)
				// Call print to LCD function from lcd_control.c
				print_modes_to_lcd(lcd, implementation_mode, pulse_mode);
  800fb4:	d0a74a43 	ldbu	r2,-25303(gp)
  800fb8:	10803fcc 	andi	r2,r2,255
  800fbc:	d0e74a03 	ldbu	r3,-25304(gp)
  800fc0:	18c03fcc 	andi	r3,r3,255
  800fc4:	180d883a 	mov	r6,r3
  800fc8:	100b883a 	mov	r5,r2
  800fcc:	e13f8917 	ldw	r4,-476(fp)
  800fd0:	08002900 	call	800290 <print_modes_to_lcd>
		// LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION ==
		// LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION == LCD IMPLEMENTATION ==

		// CALL CLEAR LED FUNCTIONS
		// -- Only clears when the relevant flags are set.
		clear_pace_led_events();
  800fd4:	08010a00 	call	8010a0 <clear_pace_led_events>
		clear_sense_led_events();
  800fd8:	08011080 	call	801108 <clear_sense_led_events>
	}
  800fdc:	003ec006 	br	800ae0 <__alt_mem_onchip_mem+0xff7f8ae0>

00800fe0 <send_atrial_event>:
/**
 * Sets the atrial event flag to true when ANY atrial event is sensed
 *
 * bool isThisEventPaced - Sets the a_is_paced flag to true if this event is paced
 */
void send_atrial_event(bool isThisEventPaced) {
  800fe0:	defffd04 	addi	sp,sp,-12
  800fe4:	df000215 	stw	fp,8(sp)
  800fe8:	df000204 	addi	fp,sp,8
  800fec:	2005883a 	mov	r2,r4
  800ff0:	e0bfff05 	stb	r2,-4(fp)
	// Ventricular event == true when ANY sort of event happens
	if (isThisEventPaced) {
  800ff4:	e0bfff03 	ldbu	r2,-4(fp)
  800ff8:	10000926 	beq	r2,zero,801020 <send_atrial_event+0x40>
		a_is_paced = true;
  800ffc:	00800044 	movi	r2,1
  801000:	d0a74ac5 	stb	r2,-25301(gp)
		char atrial_char = 'A';
  801004:	00801044 	movi	r2,65
  801008:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, atrial_char);
  80100c:	e0fffe07 	ldb	r3,-8(fp)
  801010:	00804074 	movhi	r2,257
  801014:	10841104 	addi	r2,r2,4164
  801018:	10c00035 	stwio	r3,0(r2)
  80101c:	00000106 	br	801024 <send_atrial_event+0x44>
	} else {
		a_is_paced = false;
  801020:	d0274ac5 	stb	zero,-25301(gp)
	}
	atrial_event = true;
  801024:	00800044 	movi	r2,1
  801028:	d0a74a85 	stb	r2,-25302(gp)
	//printf("Atrial Event Flagged!\n"); -- DEBUGGINGS PURPOSES
}
  80102c:	0001883a 	nop
  801030:	e037883a 	mov	sp,fp
  801034:	df000017 	ldw	fp,0(sp)
  801038:	dec00104 	addi	sp,sp,4
  80103c:	f800283a 	ret

00801040 <send_ventricular_event>:
/**
 * Sets the ventricular event flag to true when ANY ventricular event is sensed
 *
 * bool isThisEventPaced - Sets the v_is_paced flag to true if this event is paced
 */
void send_ventricular_event(bool isThisEventPaced) {
  801040:	defffd04 	addi	sp,sp,-12
  801044:	df000215 	stw	fp,8(sp)
  801048:	df000204 	addi	fp,sp,8
  80104c:	2005883a 	mov	r2,r4
  801050:	e0bfff05 	stb	r2,-4(fp)
	if (isThisEventPaced) {
  801054:	e0bfff03 	ldbu	r2,-4(fp)
  801058:	10000926 	beq	r2,zero,801080 <send_ventricular_event+0x40>
		v_is_paced = true;
  80105c:	00800044 	movi	r2,1
  801060:	d0a74b45 	stb	r2,-25299(gp)
		char ventricular_char = 'V';
  801064:	00801584 	movi	r2,86
  801068:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, ventricular_char);
  80106c:	e0fffe07 	ldb	r3,-8(fp)
  801070:	00804074 	movhi	r2,257
  801074:	10841104 	addi	r2,r2,4164
  801078:	10c00035 	stwio	r3,0(r2)
  80107c:	00000106 	br	801084 <send_ventricular_event+0x44>
	} else {
		v_is_paced = false;
  801080:	d0274b45 	stb	zero,-25299(gp)
	}
	ventricular_event = true;
  801084:	00800044 	movi	r2,1
  801088:	d0a74b05 	stb	r2,-25300(gp)
	//printf("Ventricular Event Flagged!\n"); -- DEBUGGINGS PURPOSES
}
  80108c:	0001883a 	nop
  801090:	e037883a 	mov	sp,fp
  801094:	df000017 	ldw	fp,0(sp)
  801098:	dec00104 	addi	sp,sp,4
  80109c:	f800283a 	ret

008010a0 <clear_pace_led_events>:

/**
 * Clears the atrium/ventricle pace green LEDs
 */
void clear_pace_led_events() {
  8010a0:	defffe04 	addi	sp,sp,-8
  8010a4:	dfc00115 	stw	ra,4(sp)
  8010a8:	df000015 	stw	fp,0(sp)
  8010ac:	d839883a 	mov	fp,sp
	// If LED flag for atrial pace is no longer on, clear LEDs
	if (!led_pace_atrial_event) {
  8010b0:	d0a74c83 	ldbu	r2,-25294(gp)
  8010b4:	1080005c 	xori	r2,r2,1
  8010b8:	10803fcc 	andi	r2,r2,255
  8010bc:	10000426 	beq	r2,zero,8010d0 <clear_pace_led_events+0x30>
		a_pace_led_timer_already_started = false;
  8010c0:	d0274d85 	stb	zero,-25290(gp)
		// Call clear relevant green LEDs function from led_control.c
		clear_green_leds_x_to_x(LEDG4, LEDG7);
  8010c4:	014001c4 	movi	r5,7
  8010c8:	01000104 	movi	r4,4
  8010cc:	080040c0 	call	80040c <clear_green_leds_x_to_x>
	}
	// If LED flag for atrial pace is no longer on, clear LEDs
	if (!led_pace_ventricular_event) {
  8010d0:	d0a74cc3 	ldbu	r2,-25293(gp)
  8010d4:	1080005c 	xori	r2,r2,1
  8010d8:	10803fcc 	andi	r2,r2,255
  8010dc:	10000426 	beq	r2,zero,8010f0 <clear_pace_led_events+0x50>
		v_pace_led_timer_already_started = false;
  8010e0:	d0274dc5 	stb	zero,-25289(gp)
		// Call clear relevant green LEDs function from led_control.c
		clear_green_leds_x_to_x(LEDG0, LEDG3);
  8010e4:	014000c4 	movi	r5,3
  8010e8:	0009883a 	mov	r4,zero
  8010ec:	080040c0 	call	80040c <clear_green_leds_x_to_x>
	}
}
  8010f0:	0001883a 	nop
  8010f4:	e037883a 	mov	sp,fp
  8010f8:	dfc00117 	ldw	ra,4(sp)
  8010fc:	df000017 	ldw	fp,0(sp)
  801100:	dec00204 	addi	sp,sp,8
  801104:	f800283a 	ret

00801108 <clear_sense_led_events>:

/**
 * Clears the atrium/ventricle sense red LEDs
 */
void clear_sense_led_events() {
  801108:	defffe04 	addi	sp,sp,-8
  80110c:	dfc00115 	stw	ra,4(sp)
  801110:	df000015 	stw	fp,0(sp)
  801114:	d839883a 	mov	fp,sp
	// If LED flag for atrial sense is no longer on, clear LEDs
	if (!led_sense_atrial_event) {
  801118:	d0a74d03 	ldbu	r2,-25292(gp)
  80111c:	1080005c 	xori	r2,r2,1
  801120:	10803fcc 	andi	r2,r2,255
  801124:	10000426 	beq	r2,zero,801138 <clear_sense_led_events+0x30>
		a_sense_led_timer_already_started = false;
  801128:	d0274e05 	stb	zero,-25288(gp)
		// Call clear relevant red LEDs function from led_control.c
		clear_red_leds_x_to_x(LEDR9, LEDR17);
  80112c:	01400444 	movi	r5,17
  801130:	01000244 	movi	r4,9
  801134:	08003800 	call	800380 <clear_red_leds_x_to_x>
	}
	// If LED flag for ventricular sense is no longer on, clear LEDs
	if (!led_sense_ventricular_event) {
  801138:	d0a74d43 	ldbu	r2,-25291(gp)
  80113c:	1080005c 	xori	r2,r2,1
  801140:	10803fcc 	andi	r2,r2,255
  801144:	10000426 	beq	r2,zero,801158 <clear_sense_led_events+0x50>
		v_sense_led_timer_already_started = false;
  801148:	d0274e45 	stb	zero,-25287(gp)
		// Call clear relevant red LEDs function from led_control.c
		clear_red_leds_x_to_x(LEDR0, LEDR8);
  80114c:	01400204 	movi	r5,8
  801150:	0009883a 	mov	r4,zero
  801154:	08003800 	call	800380 <clear_red_leds_x_to_x>
	}
}
  801158:	0001883a 	nop
  80115c:	e037883a 	mov	sp,fp
  801160:	dfc00117 	ldw	ra,4(sp)
  801164:	df000017 	ldw	fp,0(sp)
  801168:	dec00204 	addi	sp,sp,8
  80116c:	f800283a 	ret

00801170 <c_mode_pacemaker>:
 * conditions and current events of the pacemaker
 *
 * int a_timer_count - the count from an atrium alt_alarm
 * int v_timer_count - the count from a ventricle alt_alarm
 */
void c_mode_pacemaker(int a_timer_count, int v_timer_count) {
  801170:	defffc04 	addi	sp,sp,-16
  801174:	dfc00315 	stw	ra,12(sp)
  801178:	df000215 	stw	fp,8(sp)
  80117c:	df000204 	addi	fp,sp,8
  801180:	e13ffe15 	stw	r4,-8(fp)
  801184:	e17fff15 	stw	r5,-4(fp)
	// Pace atrium if ventricular timer count is above AEI value, atrial event hasn't been hit yet, and
	// the last event was a ventricular event.
	if (v_timer_count >= AEI_VALUE && !atrial_sense && current_event == VENTRICULAR_EVENT) {
  801188:	e0bfff17 	ldw	r2,-4(fp)
  80118c:	1080c810 	cmplti	r2,r2,800
  801190:	1000091e 	bne	r2,zero,8011b8 <c_mode_pacemaker+0x48>
  801194:	d0a74b83 	ldbu	r2,-25298(gp)
  801198:	1080005c 	xori	r2,r2,1
  80119c:	10803fcc 	andi	r2,r2,255
  8011a0:	10000526 	beq	r2,zero,8011b8 <c_mode_pacemaker+0x48>
  8011a4:	d0a74f17 	ldw	r2,-25284(gp)
  8011a8:	10800058 	cmpnei	r2,r2,1
  8011ac:	1000021e 	bne	r2,zero,8011b8 <c_mode_pacemaker+0x48>
		send_atrial_event(true);
  8011b0:	01000044 	movi	r4,1
  8011b4:	0800fe00 	call	800fe0 <send_atrial_event>
	}
	// Do not pace ventricle until ventricular timer count is above URI
	if (v_timer_count >= URI_VALUE) {
  8011b8:	e0bfff17 	ldw	r2,-4(fp)
  8011bc:	1080e110 	cmplti	r2,r2,900
  8011c0:	1000161e 	bne	r2,zero,80121c <c_mode_pacemaker+0xac>
		// Pace ventricle if timer count is above AVI, venetricular event hasn't happened and
		// the last event was an atrial event
		if (a_timer_count >= AVI_VALUE && !ventricular_sense && current_event == ATRIAL_EVENT) {
  8011c4:	e0bffe17 	ldw	r2,-8(fp)
  8011c8:	10804b10 	cmplti	r2,r2,300
  8011cc:	1000081e 	bne	r2,zero,8011f0 <c_mode_pacemaker+0x80>
  8011d0:	d0a74bc3 	ldbu	r2,-25297(gp)
  8011d4:	1080005c 	xori	r2,r2,1
  8011d8:	10803fcc 	andi	r2,r2,255
  8011dc:	10000426 	beq	r2,zero,8011f0 <c_mode_pacemaker+0x80>
  8011e0:	d0a74f17 	ldw	r2,-25284(gp)
  8011e4:	1000021e 	bne	r2,zero,8011f0 <c_mode_pacemaker+0x80>
			send_ventricular_event(true);
  8011e8:	01000044 	movi	r4,1
  8011ec:	08010400 	call	801040 <send_ventricular_event>
		}
		// Pace ventricle if timer count is above LRI, ventricular event hasn't happened and
		// the last event was an atrial event
		if (v_timer_count >= LRI_VALUE && !ventricular_sense && current_event == ATRIAL_EVENT) {
  8011f0:	e0bfff17 	ldw	r2,-4(fp)
  8011f4:	1080ed90 	cmplti	r2,r2,950
  8011f8:	1000081e 	bne	r2,zero,80121c <c_mode_pacemaker+0xac>
  8011fc:	d0a74bc3 	ldbu	r2,-25297(gp)
  801200:	1080005c 	xori	r2,r2,1
  801204:	10803fcc 	andi	r2,r2,255
  801208:	10000426 	beq	r2,zero,80121c <c_mode_pacemaker+0xac>
  80120c:	d0a74f17 	ldw	r2,-25284(gp)
  801210:	1000021e 	bne	r2,zero,80121c <c_mode_pacemaker+0xac>
			send_ventricular_event(true);
  801214:	01000044 	movi	r4,1
  801218:	08010400 	call	801040 <send_ventricular_event>
		}
	}
}
  80121c:	0001883a 	nop
  801220:	e037883a 	mov	sp,fp
  801224:	dfc00117 	ldw	ra,4(sp)
  801228:	df000017 	ldw	fp,0(sp)
  80122c:	dec00204 	addi	sp,sp,8
  801230:	f800283a 	ret

00801234 <set_pulse_mode_on_switch>:

void set_pulse_mode_on_switch(int switch_value) {
  801234:	defffe04 	addi	sp,sp,-8
  801238:	df000115 	stw	fp,4(sp)
  80123c:	df000104 	addi	fp,sp,4
  801240:	e13fff15 	stw	r4,-4(fp)
	if (switch_value & (1 << PULSE_MODE_SWITCH)) {
  801244:	e0bfff17 	ldw	r2,-4(fp)
  801248:	1080004c 	andi	r2,r2,1
  80124c:	10000b26 	beq	r2,zero,80127c <set_pulse_mode_on_switch+0x48>
		// Set print flag when swtiched
		if (!pulse_switched_flag) {
  801250:	d0a74ec3 	ldbu	r2,-25285(gp)
  801254:	1080005c 	xori	r2,r2,1
  801258:	10803fcc 	andi	r2,r2,255
  80125c:	10000426 	beq	r2,zero,801270 <set_pulse_mode_on_switch+0x3c>
			pulse_switched_flag = true;
  801260:	00800044 	movi	r2,1
  801264:	d0a74ec5 	stb	r2,-25285(gp)
			print_flag = true;
  801268:	00800044 	movi	r2,1
  80126c:	d0a74e85 	stb	r2,-25286(gp)
		}
		// SW0 is ON
		pulse_mode = BUTTON_MODE;
  801270:	00800044 	movi	r2,1
  801274:	d0a74a05 	stb	r2,-25304(gp)
			print_flag = true;
		}
		// SW0 is OFF
		pulse_mode = UART_MODE;
	}
}
  801278:	00000a06 	br	8012a4 <set_pulse_mode_on_switch+0x70>
			pulse_switched_flag = true;
			print_flag = true;
		}
		// SW0 is ON
		pulse_mode = BUTTON_MODE;
	} else if (!(switch_value & (1 << PULSE_MODE_SWITCH))) {
  80127c:	e0bfff17 	ldw	r2,-4(fp)
  801280:	1080004c 	andi	r2,r2,1
  801284:	1000071e 	bne	r2,zero,8012a4 <set_pulse_mode_on_switch+0x70>
		// Set print flag when switched
		if (pulse_switched_flag) {
  801288:	d0a74ec3 	ldbu	r2,-25285(gp)
  80128c:	10803fcc 	andi	r2,r2,255
  801290:	10000326 	beq	r2,zero,8012a0 <set_pulse_mode_on_switch+0x6c>
			pulse_switched_flag = false;
  801294:	d0274ec5 	stb	zero,-25285(gp)
			print_flag = true;
  801298:	00800044 	movi	r2,1
  80129c:	d0a74e85 	stb	r2,-25286(gp)
		}
		// SW0 is OFF
		pulse_mode = UART_MODE;
  8012a0:	d0274a05 	stb	zero,-25304(gp)
	}
}
  8012a4:	0001883a 	nop
  8012a8:	e037883a 	mov	sp,fp
  8012ac:	df000017 	ldw	fp,0(sp)
  8012b0:	dec00104 	addi	sp,sp,4
  8012b4:	f800283a 	ret

008012b8 <logic>:

#include "timing.h"

#include "sccharts.h"

void logic(TickData* d) {
  8012b8:	defffa04 	addi	sp,sp,-24
  8012bc:	dfc00515 	stw	ra,20(sp)
  8012c0:	df000415 	stw	fp,16(sp)
  8012c4:	dc800315 	stw	r18,12(sp)
  8012c8:	dc400215 	stw	r17,8(sp)
  8012cc:	dc000115 	stw	r16,4(sp)
  8012d0:	df000404 	addi	fp,sp,16
  8012d4:	e13ffc15 	stw	r4,-16(fp)
  d->_g127 = d->_pg66;
  8012d8:	e0bffc17 	ldw	r2,-16(fp)
  8012dc:	10c03f83 	ldbu	r3,254(r2)
  8012e0:	e0bffc17 	ldw	r2,-16(fp)
  8012e4:	10c03105 	stb	r3,196(r2)
  if (d->_g127) {
  8012e8:	e0bffc17 	ldw	r2,-16(fp)
  8012ec:	10803103 	ldbu	r2,196(r2)
  8012f0:	10803fcc 	andi	r2,r2,255
  8012f4:	1080201c 	xori	r2,r2,128
  8012f8:	10bfe004 	addi	r2,r2,-128
  8012fc:	10001226 	beq	r2,zero,801348 <logic+0x90>
    d->AVI_Clock += d->deltaT;
  801300:	e13ffc17 	ldw	r4,-16(fp)
  801304:	20801017 	ldw	r2,64(r4)
  801308:	20c01117 	ldw	r3,68(r4)
  80130c:	e1bffc17 	ldw	r6,-16(fp)
  801310:	31001917 	ldw	r4,100(r6)
  801314:	31401a17 	ldw	r5,104(r6)
  801318:	200d883a 	mov	r6,r4
  80131c:	280f883a 	mov	r7,r5
  801320:	1009883a 	mov	r4,r2
  801324:	180b883a 	mov	r5,r3
  801328:	080564c0 	call	80564c <__adddf3>
  80132c:	1009883a 	mov	r4,r2
  801330:	180b883a 	mov	r5,r3
  801334:	2005883a 	mov	r2,r4
  801338:	2807883a 	mov	r3,r5
  80133c:	e13ffc17 	ldw	r4,-16(fp)
  801340:	20801015 	stw	r2,64(r4)
  801344:	20c01115 	stw	r3,68(r4)
  }
  d->_g70 = d->_pg44;
  801348:	e0bffc17 	ldw	r2,-16(fp)
  80134c:	10c03fc3 	ldbu	r3,255(r2)
  801350:	e0bffc17 	ldw	r2,-16(fp)
  801354:	10c02b45 	stb	r3,173(r2)
  d->_g64 = d->_pg38;
  801358:	e0bffc17 	ldw	r2,-16(fp)
  80135c:	10c04003 	ldbu	r3,256(r2)
  801360:	e0bffc17 	ldw	r2,-16(fp)
  801364:	10c02a45 	stb	r3,169(r2)
  d->_g67_e1 = !(d->_g70 || d->_g64);
  801368:	e0bffc17 	ldw	r2,-16(fp)
  80136c:	10802b43 	ldbu	r2,173(r2)
  801370:	10803fcc 	andi	r2,r2,255
  801374:	1080201c 	xori	r2,r2,128
  801378:	10bfe004 	addi	r2,r2,-128
  80137c:	1000081e 	bne	r2,zero,8013a0 <logic+0xe8>
  801380:	e0bffc17 	ldw	r2,-16(fp)
  801384:	10802a43 	ldbu	r2,169(r2)
  801388:	10803fcc 	andi	r2,r2,255
  80138c:	1080201c 	xori	r2,r2,128
  801390:	10bfe004 	addi	r2,r2,-128
  801394:	1000021e 	bne	r2,zero,8013a0 <logic+0xe8>
  801398:	00800044 	movi	r2,1
  80139c:	00000106 	br	8013a4 <logic+0xec>
  8013a0:	0005883a 	mov	r2,zero
  8013a4:	1007883a 	mov	r3,r2
  8013a8:	e0bffc17 	ldw	r2,-16(fp)
  8013ac:	10c03e85 	stb	r3,250(r2)
  d->_g123 = d->_pg96;
  8013b0:	e0bffc17 	ldw	r2,-16(fp)
  8013b4:	10c04043 	ldbu	r3,257(r2)
  8013b8:	e0bffc17 	ldw	r2,-16(fp)
  8013bc:	10c030c5 	stb	r3,195(r2)
  if (d->_g123) {
  8013c0:	e0bffc17 	ldw	r2,-16(fp)
  8013c4:	108030c3 	ldbu	r2,195(r2)
  8013c8:	10803fcc 	andi	r2,r2,255
  8013cc:	1080201c 	xori	r2,r2,128
  8013d0:	10bfe004 	addi	r2,r2,-128
  8013d4:	10001226 	beq	r2,zero,801420 <logic+0x168>
    d->PVARP_Clock += d->deltaT;
  8013d8:	e13ffc17 	ldw	r4,-16(fp)
  8013dc:	20800e17 	ldw	r2,56(r4)
  8013e0:	20c00f17 	ldw	r3,60(r4)
  8013e4:	e1bffc17 	ldw	r6,-16(fp)
  8013e8:	31001917 	ldw	r4,100(r6)
  8013ec:	31401a17 	ldw	r5,104(r6)
  8013f0:	200d883a 	mov	r6,r4
  8013f4:	280f883a 	mov	r7,r5
  8013f8:	1009883a 	mov	r4,r2
  8013fc:	180b883a 	mov	r5,r3
  801400:	080564c0 	call	80564c <__adddf3>
  801404:	1009883a 	mov	r4,r2
  801408:	180b883a 	mov	r5,r3
  80140c:	2005883a 	mov	r2,r4
  801410:	2807883a 	mov	r3,r5
  801414:	e13ffc17 	ldw	r4,-16(fp)
  801418:	20800e15 	stw	r2,56(r4)
  80141c:	20c00f15 	stw	r3,60(r4)
  }
  d->_g85 = d->_pg97;
  801420:	e0bffc17 	ldw	r2,-16(fp)
  801424:	10c04083 	ldbu	r3,258(r2)
  801428:	e0bffc17 	ldw	r2,-16(fp)
  80142c:	10c02c85 	stb	r3,178(r2)
  d->_cg85 = d->AS == 1 && d->PVARP_Clock >= d->PVARP;
  801430:	e0bffc17 	ldw	r2,-16(fp)
  801434:	10801d03 	ldbu	r2,116(r2)
  801438:	10803fcc 	andi	r2,r2,255
  80143c:	1080201c 	xori	r2,r2,128
  801440:	10bfe004 	addi	r2,r2,-128
  801444:	10800058 	cmpnei	r2,r2,1
  801448:	1000111e 	bne	r2,zero,801490 <logic+0x1d8>
  80144c:	e0bffc17 	ldw	r2,-16(fp)
  801450:	14000e17 	ldw	r16,56(r2)
  801454:	14400f17 	ldw	r17,60(r2)
  801458:	e0bffc17 	ldw	r2,-16(fp)
  80145c:	10800217 	ldw	r2,8(r2)
  801460:	1009883a 	mov	r4,r2
  801464:	08069c40 	call	8069c4 <__floatsidf>
  801468:	1009883a 	mov	r4,r2
  80146c:	180b883a 	mov	r5,r3
  801470:	200d883a 	mov	r6,r4
  801474:	280f883a 	mov	r7,r5
  801478:	8009883a 	mov	r4,r16
  80147c:	880b883a 	mov	r5,r17
  801480:	0805ef80 	call	805ef8 <__gedf2>
  801484:	10000216 	blt	r2,zero,801490 <logic+0x1d8>
  801488:	00800044 	movi	r2,1
  80148c:	00000106 	br	801494 <logic+0x1dc>
  801490:	0005883a 	mov	r2,zero
  801494:	1007883a 	mov	r3,r2
  801498:	e0bffc17 	ldw	r2,-16(fp)
  80149c:	10c03c05 	stb	r3,240(r2)
  d->_g86 = d->_g85 && d->_cg85;
  8014a0:	e0bffc17 	ldw	r2,-16(fp)
  8014a4:	10802c83 	ldbu	r2,178(r2)
  8014a8:	10803fcc 	andi	r2,r2,255
  8014ac:	1080201c 	xori	r2,r2,128
  8014b0:	10bfe004 	addi	r2,r2,-128
  8014b4:	10000826 	beq	r2,zero,8014d8 <logic+0x220>
  8014b8:	e0bffc17 	ldw	r2,-16(fp)
  8014bc:	10803c03 	ldbu	r2,240(r2)
  8014c0:	10803fcc 	andi	r2,r2,255
  8014c4:	1080201c 	xori	r2,r2,128
  8014c8:	10bfe004 	addi	r2,r2,-128
  8014cc:	10000226 	beq	r2,zero,8014d8 <logic+0x220>
  8014d0:	00800044 	movi	r2,1
  8014d4:	00000106 	br	8014dc <logic+0x224>
  8014d8:	0005883a 	mov	r2,zero
  8014dc:	1007883a 	mov	r3,r2
  8014e0:	e0bffc17 	ldw	r2,-16(fp)
  8014e4:	10c02cc5 	stb	r3,179(r2)
  if (d->_g86) {
  8014e8:	e0bffc17 	ldw	r2,-16(fp)
  8014ec:	10802cc3 	ldbu	r2,179(r2)
  8014f0:	10803fcc 	andi	r2,r2,255
  8014f4:	1080201c 	xori	r2,r2,128
  8014f8:	10bfe004 	addi	r2,r2,-128
  8014fc:	10000326 	beq	r2,zero,80150c <logic+0x254>
    d->_Pacemaker_local__Atrig = 1;
  801500:	e0bffc17 	ldw	r2,-16(fp)
  801504:	00c00044 	movi	r3,1
  801508:	10c01e05 	stb	r3,120(r2)
  }
  d->_g111 = d->_pg58;
  80150c:	e0bffc17 	ldw	r2,-16(fp)
  801510:	10c040c3 	ldbu	r3,259(r2)
  801514:	e0bffc17 	ldw	r2,-16(fp)
  801518:	10c03045 	stb	r3,193(r2)
  if (d->_g111) {
  80151c:	e0bffc17 	ldw	r2,-16(fp)
  801520:	10803043 	ldbu	r2,193(r2)
  801524:	10803fcc 	andi	r2,r2,255
  801528:	1080201c 	xori	r2,r2,128
  80152c:	10bfe004 	addi	r2,r2,-128
  801530:	10001226 	beq	r2,zero,80157c <logic+0x2c4>
    d->AEI_Clock += d->deltaT;
  801534:	e13ffc17 	ldw	r4,-16(fp)
  801538:	20800817 	ldw	r2,32(r4)
  80153c:	20c00917 	ldw	r3,36(r4)
  801540:	e1bffc17 	ldw	r6,-16(fp)
  801544:	31001917 	ldw	r4,100(r6)
  801548:	31401a17 	ldw	r5,104(r6)
  80154c:	200d883a 	mov	r6,r4
  801550:	280f883a 	mov	r7,r5
  801554:	1009883a 	mov	r4,r2
  801558:	180b883a 	mov	r5,r3
  80155c:	080564c0 	call	80564c <__adddf3>
  801560:	1009883a 	mov	r4,r2
  801564:	180b883a 	mov	r5,r3
  801568:	2005883a 	mov	r2,r4
  80156c:	2807883a 	mov	r3,r5
  801570:	e13ffc17 	ldw	r4,-16(fp)
  801574:	20800815 	stw	r2,32(r4)
  801578:	20c00915 	stw	r3,36(r4)
  }
  d->_g88 = d->_g85 && !d->_cg85;
  80157c:	e0bffc17 	ldw	r2,-16(fp)
  801580:	10802c83 	ldbu	r2,178(r2)
  801584:	10803fcc 	andi	r2,r2,255
  801588:	1080201c 	xori	r2,r2,128
  80158c:	10bfe004 	addi	r2,r2,-128
  801590:	10000826 	beq	r2,zero,8015b4 <logic+0x2fc>
  801594:	e0bffc17 	ldw	r2,-16(fp)
  801598:	10803c03 	ldbu	r2,240(r2)
  80159c:	10803fcc 	andi	r2,r2,255
  8015a0:	1080201c 	xori	r2,r2,128
  8015a4:	10bfe004 	addi	r2,r2,-128
  8015a8:	1000021e 	bne	r2,zero,8015b4 <logic+0x2fc>
  8015ac:	00800044 	movi	r2,1
  8015b0:	00000106 	br	8015b8 <logic+0x300>
  8015b4:	0005883a 	mov	r2,zero
  8015b8:	1007883a 	mov	r3,r2
  8015bc:	e0bffc17 	ldw	r2,-16(fp)
  8015c0:	10c02d45 	stb	r3,181(r2)
  d->_cg88 = d->AS == 0 && d->AEI_Clock >= d->AEI;
  8015c4:	e0bffc17 	ldw	r2,-16(fp)
  8015c8:	10801d03 	ldbu	r2,116(r2)
  8015cc:	10803fcc 	andi	r2,r2,255
  8015d0:	1080201c 	xori	r2,r2,128
  8015d4:	10bfe004 	addi	r2,r2,-128
  8015d8:	1000111e 	bne	r2,zero,801620 <logic+0x368>
  8015dc:	e0bffc17 	ldw	r2,-16(fp)
  8015e0:	14000817 	ldw	r16,32(r2)
  8015e4:	14400917 	ldw	r17,36(r2)
  8015e8:	e0bffc17 	ldw	r2,-16(fp)
  8015ec:	10800117 	ldw	r2,4(r2)
  8015f0:	1009883a 	mov	r4,r2
  8015f4:	08069c40 	call	8069c4 <__floatsidf>
  8015f8:	1009883a 	mov	r4,r2
  8015fc:	180b883a 	mov	r5,r3
  801600:	200d883a 	mov	r6,r4
  801604:	280f883a 	mov	r7,r5
  801608:	8009883a 	mov	r4,r16
  80160c:	880b883a 	mov	r5,r17
  801610:	0805ef80 	call	805ef8 <__gedf2>
  801614:	10000216 	blt	r2,zero,801620 <logic+0x368>
  801618:	00800044 	movi	r2,1
  80161c:	00000106 	br	801624 <logic+0x36c>
  801620:	0005883a 	mov	r2,zero
  801624:	1007883a 	mov	r3,r2
  801628:	e0bffc17 	ldw	r2,-16(fp)
  80162c:	10c03c45 	stb	r3,241(r2)
  d->_g89 = d->_g88 && d->_cg88;
  801630:	e0bffc17 	ldw	r2,-16(fp)
  801634:	10802d43 	ldbu	r2,181(r2)
  801638:	10803fcc 	andi	r2,r2,255
  80163c:	1080201c 	xori	r2,r2,128
  801640:	10bfe004 	addi	r2,r2,-128
  801644:	10000826 	beq	r2,zero,801668 <logic+0x3b0>
  801648:	e0bffc17 	ldw	r2,-16(fp)
  80164c:	10803c43 	ldbu	r2,241(r2)
  801650:	10803fcc 	andi	r2,r2,255
  801654:	1080201c 	xori	r2,r2,128
  801658:	10bfe004 	addi	r2,r2,-128
  80165c:	10000226 	beq	r2,zero,801668 <logic+0x3b0>
  801660:	00800044 	movi	r2,1
  801664:	00000106 	br	80166c <logic+0x3b4>
  801668:	0005883a 	mov	r2,zero
  80166c:	1007883a 	mov	r3,r2
  801670:	e0bffc17 	ldw	r2,-16(fp)
  801674:	10c02d85 	stb	r3,182(r2)
  if (d->_g89) {
  801678:	e0bffc17 	ldw	r2,-16(fp)
  80167c:	10802d83 	ldbu	r2,182(r2)
  801680:	10803fcc 	andi	r2,r2,255
  801684:	1080201c 	xori	r2,r2,128
  801688:	10bfe004 	addi	r2,r2,-128
  80168c:	10000326 	beq	r2,zero,80169c <logic+0x3e4>
    d->_Pacemaker_local__Atrig1 = 1;
  801690:	e0bffc17 	ldw	r2,-16(fp)
  801694:	00c00044 	movi	r3,1
  801698:	10c01e45 	stb	r3,121(r2)
  }
  d->_g88 = d->_g88 && !d->_cg88;
  80169c:	e0bffc17 	ldw	r2,-16(fp)
  8016a0:	10802d43 	ldbu	r2,181(r2)
  8016a4:	10803fcc 	andi	r2,r2,255
  8016a8:	1080201c 	xori	r2,r2,128
  8016ac:	10bfe004 	addi	r2,r2,-128
  8016b0:	10000826 	beq	r2,zero,8016d4 <logic+0x41c>
  8016b4:	e0bffc17 	ldw	r2,-16(fp)
  8016b8:	10803c43 	ldbu	r2,241(r2)
  8016bc:	10803fcc 	andi	r2,r2,255
  8016c0:	1080201c 	xori	r2,r2,128
  8016c4:	10bfe004 	addi	r2,r2,-128
  8016c8:	1000021e 	bne	r2,zero,8016d4 <logic+0x41c>
  8016cc:	00800044 	movi	r2,1
  8016d0:	00000106 	br	8016d8 <logic+0x420>
  8016d4:	0005883a 	mov	r2,zero
  8016d8:	1007883a 	mov	r3,r2
  8016dc:	e0bffc17 	ldw	r2,-16(fp)
  8016e0:	10c02d45 	stb	r3,181(r2)
  d->_cg90 = d->AS == 1;
  8016e4:	e0bffc17 	ldw	r2,-16(fp)
  8016e8:	10801d03 	ldbu	r2,116(r2)
  8016ec:	10803fcc 	andi	r2,r2,255
  8016f0:	1080201c 	xori	r2,r2,128
  8016f4:	10bfe004 	addi	r2,r2,-128
  8016f8:	10800060 	cmpeqi	r2,r2,1
  8016fc:	1007883a 	mov	r3,r2
  801700:	e0bffc17 	ldw	r2,-16(fp)
  801704:	10c03bc5 	stb	r3,239(r2)
  d->_g91 = d->_g88 && d->_cg90;
  801708:	e0bffc17 	ldw	r2,-16(fp)
  80170c:	10802d43 	ldbu	r2,181(r2)
  801710:	10803fcc 	andi	r2,r2,255
  801714:	1080201c 	xori	r2,r2,128
  801718:	10bfe004 	addi	r2,r2,-128
  80171c:	10000826 	beq	r2,zero,801740 <logic+0x488>
  801720:	e0bffc17 	ldw	r2,-16(fp)
  801724:	10803bc3 	ldbu	r2,239(r2)
  801728:	10803fcc 	andi	r2,r2,255
  80172c:	1080201c 	xori	r2,r2,128
  801730:	10bfe004 	addi	r2,r2,-128
  801734:	10000226 	beq	r2,zero,801740 <logic+0x488>
  801738:	00800044 	movi	r2,1
  80173c:	00000106 	br	801744 <logic+0x48c>
  801740:	0005883a 	mov	r2,zero
  801744:	1007883a 	mov	r3,r2
  801748:	e0bffc17 	ldw	r2,-16(fp)
  80174c:	10c02dc5 	stb	r3,183(r2)
  if (d->_g91) {
  801750:	e0bffc17 	ldw	r2,-16(fp)
  801754:	10802dc3 	ldbu	r2,183(r2)
  801758:	10803fcc 	andi	r2,r2,255
  80175c:	1080201c 	xori	r2,r2,128
  801760:	10bfe004 	addi	r2,r2,-128
  801764:	10000326 	beq	r2,zero,801774 <logic+0x4bc>
    d->_Pacemaker_local__Atrig2 = 1;
  801768:	e0bffc17 	ldw	r2,-16(fp)
  80176c:	00c00044 	movi	r3,1
  801770:	10c01e85 	stb	r3,122(r2)
  }
  d->sleepT = 1000.0;
  801774:	e0fffc17 	ldw	r3,-16(fp)
  801778:	18001b15 	stw	zero,108(r3)
  80177c:	009023f4 	movhi	r2,16527
  801780:	10900004 	addi	r2,r2,16384
  801784:	18801c15 	stw	r2,112(r3)
  d->_g70 = d->_g64 || d->_g70;
  801788:	e0bffc17 	ldw	r2,-16(fp)
  80178c:	10802a43 	ldbu	r2,169(r2)
  801790:	10803fcc 	andi	r2,r2,255
  801794:	1080201c 	xori	r2,r2,128
  801798:	10bfe004 	addi	r2,r2,-128
  80179c:	1000061e 	bne	r2,zero,8017b8 <logic+0x500>
  8017a0:	e0bffc17 	ldw	r2,-16(fp)
  8017a4:	10802b43 	ldbu	r2,173(r2)
  8017a8:	10803fcc 	andi	r2,r2,255
  8017ac:	1080201c 	xori	r2,r2,128
  8017b0:	10bfe004 	addi	r2,r2,-128
  8017b4:	10000226 	beq	r2,zero,8017c0 <logic+0x508>
  8017b8:	00800044 	movi	r2,1
  8017bc:	00000106 	br	8017c4 <logic+0x50c>
  8017c0:	0005883a 	mov	r2,zero
  8017c4:	1007883a 	mov	r3,r2
  8017c8:	e0bffc17 	ldw	r2,-16(fp)
  8017cc:	10c02b45 	stb	r3,173(r2)
  d->_cg65 = d->AEI_Clock < d->AEI;
  8017d0:	e0bffc17 	ldw	r2,-16(fp)
  8017d4:	14000817 	ldw	r16,32(r2)
  8017d8:	14400917 	ldw	r17,36(r2)
  8017dc:	e0bffc17 	ldw	r2,-16(fp)
  8017e0:	10800117 	ldw	r2,4(r2)
  8017e4:	1009883a 	mov	r4,r2
  8017e8:	08069c40 	call	8069c4 <__floatsidf>
  8017ec:	1009883a 	mov	r4,r2
  8017f0:	180b883a 	mov	r5,r3
  8017f4:	04800044 	movi	r18,1
  8017f8:	200d883a 	mov	r6,r4
  8017fc:	280f883a 	mov	r7,r5
  801800:	8009883a 	mov	r4,r16
  801804:	880b883a 	mov	r5,r17
  801808:	0805fd40 	call	805fd4 <__ledf2>
  80180c:	10000116 	blt	r2,zero,801814 <logic+0x55c>
  801810:	0025883a 	mov	r18,zero
  801814:	9007883a 	mov	r3,r18
  801818:	e0bffc17 	ldw	r2,-16(fp)
  80181c:	10c03985 	stb	r3,230(r2)
  d->_g64 = d->_g70 && d->_cg65;
  801820:	e0bffc17 	ldw	r2,-16(fp)
  801824:	10802b43 	ldbu	r2,173(r2)
  801828:	10803fcc 	andi	r2,r2,255
  80182c:	1080201c 	xori	r2,r2,128
  801830:	10bfe004 	addi	r2,r2,-128
  801834:	10000826 	beq	r2,zero,801858 <logic+0x5a0>
  801838:	e0bffc17 	ldw	r2,-16(fp)
  80183c:	10803983 	ldbu	r2,230(r2)
  801840:	10803fcc 	andi	r2,r2,255
  801844:	1080201c 	xori	r2,r2,128
  801848:	10bfe004 	addi	r2,r2,-128
  80184c:	10000226 	beq	r2,zero,801858 <logic+0x5a0>
  801850:	00800044 	movi	r2,1
  801854:	00000106 	br	80185c <logic+0x5a4>
  801858:	0005883a 	mov	r2,zero
  80185c:	1007883a 	mov	r3,r2
  801860:	e0bffc17 	ldw	r2,-16(fp)
  801864:	10c02a45 	stb	r3,169(r2)
  if (d->_g64) {
  801868:	e0bffc17 	ldw	r2,-16(fp)
  80186c:	10802a43 	ldbu	r2,169(r2)
  801870:	10803fcc 	andi	r2,r2,255
  801874:	1080201c 	xori	r2,r2,128
  801878:	10bfe004 	addi	r2,r2,-128
  80187c:	10003426 	beq	r2,zero,801950 <logic+0x698>
    d->sleepT = (d->sleepT < (d->AEI - d->AEI_Clock)) ? d->sleepT : (d->AEI - d->AEI_Clock);
  801880:	e0bffc17 	ldw	r2,-16(fp)
  801884:	14001b17 	ldw	r16,108(r2)
  801888:	14401c17 	ldw	r17,112(r2)
  80188c:	e0bffc17 	ldw	r2,-16(fp)
  801890:	10800117 	ldw	r2,4(r2)
  801894:	1009883a 	mov	r4,r2
  801898:	08069c40 	call	8069c4 <__floatsidf>
  80189c:	1011883a 	mov	r8,r2
  8018a0:	1813883a 	mov	r9,r3
  8018a4:	e13ffc17 	ldw	r4,-16(fp)
  8018a8:	20800817 	ldw	r2,32(r4)
  8018ac:	20c00917 	ldw	r3,36(r4)
  8018b0:	100d883a 	mov	r6,r2
  8018b4:	180f883a 	mov	r7,r3
  8018b8:	4009883a 	mov	r4,r8
  8018bc:	480b883a 	mov	r5,r9
  8018c0:	08060c80 	call	8060c8 <__subdf3>
  8018c4:	1009883a 	mov	r4,r2
  8018c8:	180b883a 	mov	r5,r3
  8018cc:	2005883a 	mov	r2,r4
  8018d0:	2807883a 	mov	r3,r5
  8018d4:	100d883a 	mov	r6,r2
  8018d8:	180f883a 	mov	r7,r3
  8018dc:	8009883a 	mov	r4,r16
  8018e0:	880b883a 	mov	r5,r17
  8018e4:	0805fd40 	call	805fd4 <__ledf2>
  8018e8:	1000040e 	bge	r2,zero,8018fc <logic+0x644>
  8018ec:	e13ffc17 	ldw	r4,-16(fp)
  8018f0:	20801b17 	ldw	r2,108(r4)
  8018f4:	20c01c17 	ldw	r3,112(r4)
  8018f8:	00001206 	br	801944 <logic+0x68c>
  8018fc:	e0bffc17 	ldw	r2,-16(fp)
  801900:	10800117 	ldw	r2,4(r2)
  801904:	1009883a 	mov	r4,r2
  801908:	08069c40 	call	8069c4 <__floatsidf>
  80190c:	1011883a 	mov	r8,r2
  801910:	1813883a 	mov	r9,r3
  801914:	e13ffc17 	ldw	r4,-16(fp)
  801918:	20800817 	ldw	r2,32(r4)
  80191c:	20c00917 	ldw	r3,36(r4)
  801920:	100d883a 	mov	r6,r2
  801924:	180f883a 	mov	r7,r3
  801928:	4009883a 	mov	r4,r8
  80192c:	480b883a 	mov	r5,r9
  801930:	08060c80 	call	8060c8 <__subdf3>
  801934:	1009883a 	mov	r4,r2
  801938:	180b883a 	mov	r5,r3
  80193c:	2005883a 	mov	r2,r4
  801940:	2807883a 	mov	r3,r5
  801944:	e13ffc17 	ldw	r4,-16(fp)
  801948:	20801b15 	stw	r2,108(r4)
  80194c:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg66 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801950:	e0bffc17 	ldw	r2,-16(fp)
  801954:	10801e03 	ldbu	r2,120(r2)
  801958:	10803fcc 	andi	r2,r2,255
  80195c:	1080201c 	xori	r2,r2,128
  801960:	10bfe004 	addi	r2,r2,-128
  801964:	10000c1e 	bne	r2,zero,801998 <logic+0x6e0>
  801968:	e0bffc17 	ldw	r2,-16(fp)
  80196c:	10801e43 	ldbu	r2,121(r2)
  801970:	10803fcc 	andi	r2,r2,255
  801974:	1080201c 	xori	r2,r2,128
  801978:	10bfe004 	addi	r2,r2,-128
  80197c:	1000061e 	bne	r2,zero,801998 <logic+0x6e0>
  801980:	e0bffc17 	ldw	r2,-16(fp)
  801984:	10801e83 	ldbu	r2,122(r2)
  801988:	10803fcc 	andi	r2,r2,255
  80198c:	1080201c 	xori	r2,r2,128
  801990:	10bfe004 	addi	r2,r2,-128
  801994:	10000226 	beq	r2,zero,8019a0 <logic+0x6e8>
  801998:	00800044 	movi	r2,1
  80199c:	00000106 	br	8019a4 <logic+0x6ec>
  8019a0:	0005883a 	mov	r2,zero
  8019a4:	1007883a 	mov	r3,r2
  8019a8:	e0bffc17 	ldw	r2,-16(fp)
  8019ac:	10c03945 	stb	r3,229(r2)
  d->_g65 = d->_g70 && !d->_cg65;
  8019b0:	e0bffc17 	ldw	r2,-16(fp)
  8019b4:	10802b43 	ldbu	r2,173(r2)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	1080201c 	xori	r2,r2,128
  8019c0:	10bfe004 	addi	r2,r2,-128
  8019c4:	10000826 	beq	r2,zero,8019e8 <logic+0x730>
  8019c8:	e0bffc17 	ldw	r2,-16(fp)
  8019cc:	10803983 	ldbu	r2,230(r2)
  8019d0:	10803fcc 	andi	r2,r2,255
  8019d4:	1080201c 	xori	r2,r2,128
  8019d8:	10bfe004 	addi	r2,r2,-128
  8019dc:	1000021e 	bne	r2,zero,8019e8 <logic+0x730>
  8019e0:	00800044 	movi	r2,1
  8019e4:	00000106 	br	8019ec <logic+0x734>
  8019e8:	0005883a 	mov	r2,zero
  8019ec:	1007883a 	mov	r3,r2
  8019f0:	e0bffc17 	ldw	r2,-16(fp)
  8019f4:	10c02a85 	stb	r3,170(r2)
  d->_cg68 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  8019f8:	e0bffc17 	ldw	r2,-16(fp)
  8019fc:	10801e03 	ldbu	r2,120(r2)
  801a00:	10803fcc 	andi	r2,r2,255
  801a04:	1080201c 	xori	r2,r2,128
  801a08:	10bfe004 	addi	r2,r2,-128
  801a0c:	10000c1e 	bne	r2,zero,801a40 <logic+0x788>
  801a10:	e0bffc17 	ldw	r2,-16(fp)
  801a14:	10801e43 	ldbu	r2,121(r2)
  801a18:	10803fcc 	andi	r2,r2,255
  801a1c:	1080201c 	xori	r2,r2,128
  801a20:	10bfe004 	addi	r2,r2,-128
  801a24:	1000061e 	bne	r2,zero,801a40 <logic+0x788>
  801a28:	e0bffc17 	ldw	r2,-16(fp)
  801a2c:	10801e83 	ldbu	r2,122(r2)
  801a30:	10803fcc 	andi	r2,r2,255
  801a34:	1080201c 	xori	r2,r2,128
  801a38:	10bfe004 	addi	r2,r2,-128
  801a3c:	10000226 	beq	r2,zero,801a48 <logic+0x790>
  801a40:	00800044 	movi	r2,1
  801a44:	00000106 	br	801a4c <logic+0x794>
  801a48:	0005883a 	mov	r2,zero
  801a4c:	1007883a 	mov	r3,r2
  801a50:	e0bffc17 	ldw	r2,-16(fp)
  801a54:	10c039c5 	stb	r3,231(r2)
  d->_g67 = d->_g64 && d->_cg66 || d->_g65 && d->_cg68;
  801a58:	e0bffc17 	ldw	r2,-16(fp)
  801a5c:	10802a43 	ldbu	r2,169(r2)
  801a60:	10803fcc 	andi	r2,r2,255
  801a64:	1080201c 	xori	r2,r2,128
  801a68:	10bfe004 	addi	r2,r2,-128
  801a6c:	10000626 	beq	r2,zero,801a88 <logic+0x7d0>
  801a70:	e0bffc17 	ldw	r2,-16(fp)
  801a74:	10803943 	ldbu	r2,229(r2)
  801a78:	10803fcc 	andi	r2,r2,255
  801a7c:	1080201c 	xori	r2,r2,128
  801a80:	10bfe004 	addi	r2,r2,-128
  801a84:	10000c1e 	bne	r2,zero,801ab8 <logic+0x800>
  801a88:	e0bffc17 	ldw	r2,-16(fp)
  801a8c:	10802a83 	ldbu	r2,170(r2)
  801a90:	10803fcc 	andi	r2,r2,255
  801a94:	1080201c 	xori	r2,r2,128
  801a98:	10bfe004 	addi	r2,r2,-128
  801a9c:	10000826 	beq	r2,zero,801ac0 <logic+0x808>
  801aa0:	e0bffc17 	ldw	r2,-16(fp)
  801aa4:	108039c3 	ldbu	r2,231(r2)
  801aa8:	10803fcc 	andi	r2,r2,255
  801aac:	1080201c 	xori	r2,r2,128
  801ab0:	10bfe004 	addi	r2,r2,-128
  801ab4:	10000226 	beq	r2,zero,801ac0 <logic+0x808>
  801ab8:	00800044 	movi	r2,1
  801abc:	00000106 	br	801ac4 <logic+0x80c>
  801ac0:	0005883a 	mov	r2,zero
  801ac4:	1007883a 	mov	r3,r2
  801ac8:	e0bffc17 	ldw	r2,-16(fp)
  801acc:	10c02b05 	stb	r3,172(r2)
  d->_g81 = d->_pg57;
  801ad0:	e0bffc17 	ldw	r2,-16(fp)
  801ad4:	10c04103 	ldbu	r3,260(r2)
  801ad8:	e0bffc17 	ldw	r2,-16(fp)
  801adc:	10c02c45 	stb	r3,177(r2)
  d->_g75 = d->_pg55;
  801ae0:	e0bffc17 	ldw	r2,-16(fp)
  801ae4:	10c04143 	ldbu	r3,261(r2)
  801ae8:	e0bffc17 	ldw	r2,-16(fp)
  801aec:	10c02b85 	stb	r3,174(r2)
  d->_g78_e2 = !(d->_g81 || d->_g75);
  801af0:	e0bffc17 	ldw	r2,-16(fp)
  801af4:	10802c43 	ldbu	r2,177(r2)
  801af8:	10803fcc 	andi	r2,r2,255
  801afc:	1080201c 	xori	r2,r2,128
  801b00:	10bfe004 	addi	r2,r2,-128
  801b04:	1000081e 	bne	r2,zero,801b28 <logic+0x870>
  801b08:	e0bffc17 	ldw	r2,-16(fp)
  801b0c:	10802b83 	ldbu	r2,174(r2)
  801b10:	10803fcc 	andi	r2,r2,255
  801b14:	1080201c 	xori	r2,r2,128
  801b18:	10bfe004 	addi	r2,r2,-128
  801b1c:	1000021e 	bne	r2,zero,801b28 <logic+0x870>
  801b20:	00800044 	movi	r2,1
  801b24:	00000106 	br	801b2c <logic+0x874>
  801b28:	0005883a 	mov	r2,zero
  801b2c:	1007883a 	mov	r3,r2
  801b30:	e0bffc17 	ldw	r2,-16(fp)
  801b34:	10c03ec5 	stb	r3,251(r2)
  d->_g81 = d->_g75 || d->_g81;
  801b38:	e0bffc17 	ldw	r2,-16(fp)
  801b3c:	10802b83 	ldbu	r2,174(r2)
  801b40:	10803fcc 	andi	r2,r2,255
  801b44:	1080201c 	xori	r2,r2,128
  801b48:	10bfe004 	addi	r2,r2,-128
  801b4c:	1000061e 	bne	r2,zero,801b68 <logic+0x8b0>
  801b50:	e0bffc17 	ldw	r2,-16(fp)
  801b54:	10802c43 	ldbu	r2,177(r2)
  801b58:	10803fcc 	andi	r2,r2,255
  801b5c:	1080201c 	xori	r2,r2,128
  801b60:	10bfe004 	addi	r2,r2,-128
  801b64:	10000226 	beq	r2,zero,801b70 <logic+0x8b8>
  801b68:	00800044 	movi	r2,1
  801b6c:	00000106 	br	801b74 <logic+0x8bc>
  801b70:	0005883a 	mov	r2,zero
  801b74:	1007883a 	mov	r3,r2
  801b78:	e0bffc17 	ldw	r2,-16(fp)
  801b7c:	10c02c45 	stb	r3,177(r2)
  d->_cg76 = d->PVARP_Clock < d->PVARP;
  801b80:	e0bffc17 	ldw	r2,-16(fp)
  801b84:	14000e17 	ldw	r16,56(r2)
  801b88:	14400f17 	ldw	r17,60(r2)
  801b8c:	e0bffc17 	ldw	r2,-16(fp)
  801b90:	10800217 	ldw	r2,8(r2)
  801b94:	1009883a 	mov	r4,r2
  801b98:	08069c40 	call	8069c4 <__floatsidf>
  801b9c:	1009883a 	mov	r4,r2
  801ba0:	180b883a 	mov	r5,r3
  801ba4:	04800044 	movi	r18,1
  801ba8:	200d883a 	mov	r6,r4
  801bac:	280f883a 	mov	r7,r5
  801bb0:	8009883a 	mov	r4,r16
  801bb4:	880b883a 	mov	r5,r17
  801bb8:	0805fd40 	call	805fd4 <__ledf2>
  801bbc:	10000116 	blt	r2,zero,801bc4 <logic+0x90c>
  801bc0:	0025883a 	mov	r18,zero
  801bc4:	9007883a 	mov	r3,r18
  801bc8:	e0bffc17 	ldw	r2,-16(fp)
  801bcc:	10c03b05 	stb	r3,236(r2)
  d->_g75 = d->_g81 && d->_cg76;
  801bd0:	e0bffc17 	ldw	r2,-16(fp)
  801bd4:	10802c43 	ldbu	r2,177(r2)
  801bd8:	10803fcc 	andi	r2,r2,255
  801bdc:	1080201c 	xori	r2,r2,128
  801be0:	10bfe004 	addi	r2,r2,-128
  801be4:	10000826 	beq	r2,zero,801c08 <logic+0x950>
  801be8:	e0bffc17 	ldw	r2,-16(fp)
  801bec:	10803b03 	ldbu	r2,236(r2)
  801bf0:	10803fcc 	andi	r2,r2,255
  801bf4:	1080201c 	xori	r2,r2,128
  801bf8:	10bfe004 	addi	r2,r2,-128
  801bfc:	10000226 	beq	r2,zero,801c08 <logic+0x950>
  801c00:	00800044 	movi	r2,1
  801c04:	00000106 	br	801c0c <logic+0x954>
  801c08:	0005883a 	mov	r2,zero
  801c0c:	1007883a 	mov	r3,r2
  801c10:	e0bffc17 	ldw	r2,-16(fp)
  801c14:	10c02b85 	stb	r3,174(r2)
  if (d->_g75) {
  801c18:	e0bffc17 	ldw	r2,-16(fp)
  801c1c:	10802b83 	ldbu	r2,174(r2)
  801c20:	10803fcc 	andi	r2,r2,255
  801c24:	1080201c 	xori	r2,r2,128
  801c28:	10bfe004 	addi	r2,r2,-128
  801c2c:	10003426 	beq	r2,zero,801d00 <logic+0xa48>
    d->sleepT = (d->sleepT < (d->PVARP - d->PVARP_Clock)) ? d->sleepT : (d->PVARP - d->PVARP_Clock);
  801c30:	e0bffc17 	ldw	r2,-16(fp)
  801c34:	14001b17 	ldw	r16,108(r2)
  801c38:	14401c17 	ldw	r17,112(r2)
  801c3c:	e0bffc17 	ldw	r2,-16(fp)
  801c40:	10800217 	ldw	r2,8(r2)
  801c44:	1009883a 	mov	r4,r2
  801c48:	08069c40 	call	8069c4 <__floatsidf>
  801c4c:	1011883a 	mov	r8,r2
  801c50:	1813883a 	mov	r9,r3
  801c54:	e13ffc17 	ldw	r4,-16(fp)
  801c58:	20800e17 	ldw	r2,56(r4)
  801c5c:	20c00f17 	ldw	r3,60(r4)
  801c60:	100d883a 	mov	r6,r2
  801c64:	180f883a 	mov	r7,r3
  801c68:	4009883a 	mov	r4,r8
  801c6c:	480b883a 	mov	r5,r9
  801c70:	08060c80 	call	8060c8 <__subdf3>
  801c74:	1009883a 	mov	r4,r2
  801c78:	180b883a 	mov	r5,r3
  801c7c:	2005883a 	mov	r2,r4
  801c80:	2807883a 	mov	r3,r5
  801c84:	100d883a 	mov	r6,r2
  801c88:	180f883a 	mov	r7,r3
  801c8c:	8009883a 	mov	r4,r16
  801c90:	880b883a 	mov	r5,r17
  801c94:	0805fd40 	call	805fd4 <__ledf2>
  801c98:	1000040e 	bge	r2,zero,801cac <logic+0x9f4>
  801c9c:	e13ffc17 	ldw	r4,-16(fp)
  801ca0:	20801b17 	ldw	r2,108(r4)
  801ca4:	20c01c17 	ldw	r3,112(r4)
  801ca8:	00001206 	br	801cf4 <logic+0xa3c>
  801cac:	e0bffc17 	ldw	r2,-16(fp)
  801cb0:	10800217 	ldw	r2,8(r2)
  801cb4:	1009883a 	mov	r4,r2
  801cb8:	08069c40 	call	8069c4 <__floatsidf>
  801cbc:	1011883a 	mov	r8,r2
  801cc0:	1813883a 	mov	r9,r3
  801cc4:	e13ffc17 	ldw	r4,-16(fp)
  801cc8:	20800e17 	ldw	r2,56(r4)
  801ccc:	20c00f17 	ldw	r3,60(r4)
  801cd0:	100d883a 	mov	r6,r2
  801cd4:	180f883a 	mov	r7,r3
  801cd8:	4009883a 	mov	r4,r8
  801cdc:	480b883a 	mov	r5,r9
  801ce0:	08060c80 	call	8060c8 <__subdf3>
  801ce4:	1009883a 	mov	r4,r2
  801ce8:	180b883a 	mov	r5,r3
  801cec:	2005883a 	mov	r2,r4
  801cf0:	2807883a 	mov	r3,r5
  801cf4:	e13ffc17 	ldw	r4,-16(fp)
  801cf8:	20801b15 	stw	r2,108(r4)
  801cfc:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg77 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801d00:	e0bffc17 	ldw	r2,-16(fp)
  801d04:	10801e03 	ldbu	r2,120(r2)
  801d08:	10803fcc 	andi	r2,r2,255
  801d0c:	1080201c 	xori	r2,r2,128
  801d10:	10bfe004 	addi	r2,r2,-128
  801d14:	10000c1e 	bne	r2,zero,801d48 <logic+0xa90>
  801d18:	e0bffc17 	ldw	r2,-16(fp)
  801d1c:	10801e43 	ldbu	r2,121(r2)
  801d20:	10803fcc 	andi	r2,r2,255
  801d24:	1080201c 	xori	r2,r2,128
  801d28:	10bfe004 	addi	r2,r2,-128
  801d2c:	1000061e 	bne	r2,zero,801d48 <logic+0xa90>
  801d30:	e0bffc17 	ldw	r2,-16(fp)
  801d34:	10801e83 	ldbu	r2,122(r2)
  801d38:	10803fcc 	andi	r2,r2,255
  801d3c:	1080201c 	xori	r2,r2,128
  801d40:	10bfe004 	addi	r2,r2,-128
  801d44:	10000226 	beq	r2,zero,801d50 <logic+0xa98>
  801d48:	00800044 	movi	r2,1
  801d4c:	00000106 	br	801d54 <logic+0xa9c>
  801d50:	0005883a 	mov	r2,zero
  801d54:	1007883a 	mov	r3,r2
  801d58:	e0bffc17 	ldw	r2,-16(fp)
  801d5c:	10c03ac5 	stb	r3,235(r2)
  d->_g76 = d->_g81 && !d->_cg76;
  801d60:	e0bffc17 	ldw	r2,-16(fp)
  801d64:	10802c43 	ldbu	r2,177(r2)
  801d68:	10803fcc 	andi	r2,r2,255
  801d6c:	1080201c 	xori	r2,r2,128
  801d70:	10bfe004 	addi	r2,r2,-128
  801d74:	10000826 	beq	r2,zero,801d98 <logic+0xae0>
  801d78:	e0bffc17 	ldw	r2,-16(fp)
  801d7c:	10803b03 	ldbu	r2,236(r2)
  801d80:	10803fcc 	andi	r2,r2,255
  801d84:	1080201c 	xori	r2,r2,128
  801d88:	10bfe004 	addi	r2,r2,-128
  801d8c:	1000021e 	bne	r2,zero,801d98 <logic+0xae0>
  801d90:	00800044 	movi	r2,1
  801d94:	00000106 	br	801d9c <logic+0xae4>
  801d98:	0005883a 	mov	r2,zero
  801d9c:	1007883a 	mov	r3,r2
  801da0:	e0bffc17 	ldw	r2,-16(fp)
  801da4:	10c02bc5 	stb	r3,175(r2)
  d->_cg79 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  801da8:	e0bffc17 	ldw	r2,-16(fp)
  801dac:	10801e03 	ldbu	r2,120(r2)
  801db0:	10803fcc 	andi	r2,r2,255
  801db4:	1080201c 	xori	r2,r2,128
  801db8:	10bfe004 	addi	r2,r2,-128
  801dbc:	10000c1e 	bne	r2,zero,801df0 <logic+0xb38>
  801dc0:	e0bffc17 	ldw	r2,-16(fp)
  801dc4:	10801e43 	ldbu	r2,121(r2)
  801dc8:	10803fcc 	andi	r2,r2,255
  801dcc:	1080201c 	xori	r2,r2,128
  801dd0:	10bfe004 	addi	r2,r2,-128
  801dd4:	1000061e 	bne	r2,zero,801df0 <logic+0xb38>
  801dd8:	e0bffc17 	ldw	r2,-16(fp)
  801ddc:	10801e83 	ldbu	r2,122(r2)
  801de0:	10803fcc 	andi	r2,r2,255
  801de4:	1080201c 	xori	r2,r2,128
  801de8:	10bfe004 	addi	r2,r2,-128
  801dec:	10000226 	beq	r2,zero,801df8 <logic+0xb40>
  801df0:	00800044 	movi	r2,1
  801df4:	00000106 	br	801dfc <logic+0xb44>
  801df8:	0005883a 	mov	r2,zero
  801dfc:	1007883a 	mov	r3,r2
  801e00:	e0bffc17 	ldw	r2,-16(fp)
  801e04:	10c03b45 	stb	r3,237(r2)
  d->_g78 = d->_g75 && d->_cg77 || d->_g76 && d->_cg79;
  801e08:	e0bffc17 	ldw	r2,-16(fp)
  801e0c:	10802b83 	ldbu	r2,174(r2)
  801e10:	10803fcc 	andi	r2,r2,255
  801e14:	1080201c 	xori	r2,r2,128
  801e18:	10bfe004 	addi	r2,r2,-128
  801e1c:	10000626 	beq	r2,zero,801e38 <logic+0xb80>
  801e20:	e0bffc17 	ldw	r2,-16(fp)
  801e24:	10803ac3 	ldbu	r2,235(r2)
  801e28:	10803fcc 	andi	r2,r2,255
  801e2c:	1080201c 	xori	r2,r2,128
  801e30:	10bfe004 	addi	r2,r2,-128
  801e34:	10000c1e 	bne	r2,zero,801e68 <logic+0xbb0>
  801e38:	e0bffc17 	ldw	r2,-16(fp)
  801e3c:	10802bc3 	ldbu	r2,175(r2)
  801e40:	10803fcc 	andi	r2,r2,255
  801e44:	1080201c 	xori	r2,r2,128
  801e48:	10bfe004 	addi	r2,r2,-128
  801e4c:	10000826 	beq	r2,zero,801e70 <logic+0xbb8>
  801e50:	e0bffc17 	ldw	r2,-16(fp)
  801e54:	10803b43 	ldbu	r2,237(r2)
  801e58:	10803fcc 	andi	r2,r2,255
  801e5c:	1080201c 	xori	r2,r2,128
  801e60:	10bfe004 	addi	r2,r2,-128
  801e64:	10000226 	beq	r2,zero,801e70 <logic+0xbb8>
  801e68:	00800044 	movi	r2,1
  801e6c:	00000106 	br	801e74 <logic+0xbbc>
  801e70:	0005883a 	mov	r2,zero
  801e74:	1007883a 	mov	r3,r2
  801e78:	e0bffc17 	ldw	r2,-16(fp)
  801e7c:	10c02c05 	stb	r3,176(r2)
  d->_g85 = !d->_g85;
  801e80:	e0bffc17 	ldw	r2,-16(fp)
  801e84:	10802c83 	ldbu	r2,178(r2)
  801e88:	10803fcc 	andi	r2,r2,255
  801e8c:	1080201c 	xori	r2,r2,128
  801e90:	10bfe004 	addi	r2,r2,-128
  801e94:	1005003a 	cmpeq	r2,r2,zero
  801e98:	1007883a 	mov	r3,r2
  801e9c:	e0bffc17 	ldw	r2,-16(fp)
  801ea0:	10c02c85 	stb	r3,178(r2)
  d->_g91 = d->_g86 || d->_g89 || d->_g91;
  801ea4:	e0bffc17 	ldw	r2,-16(fp)
  801ea8:	10802cc3 	ldbu	r2,179(r2)
  801eac:	10803fcc 	andi	r2,r2,255
  801eb0:	1080201c 	xori	r2,r2,128
  801eb4:	10bfe004 	addi	r2,r2,-128
  801eb8:	10000c1e 	bne	r2,zero,801eec <logic+0xc34>
  801ebc:	e0bffc17 	ldw	r2,-16(fp)
  801ec0:	10802d83 	ldbu	r2,182(r2)
  801ec4:	10803fcc 	andi	r2,r2,255
  801ec8:	1080201c 	xori	r2,r2,128
  801ecc:	10bfe004 	addi	r2,r2,-128
  801ed0:	1000061e 	bne	r2,zero,801eec <logic+0xc34>
  801ed4:	e0bffc17 	ldw	r2,-16(fp)
  801ed8:	10802dc3 	ldbu	r2,183(r2)
  801edc:	10803fcc 	andi	r2,r2,255
  801ee0:	1080201c 	xori	r2,r2,128
  801ee4:	10bfe004 	addi	r2,r2,-128
  801ee8:	10000226 	beq	r2,zero,801ef4 <logic+0xc3c>
  801eec:	00800044 	movi	r2,1
  801ef0:	00000106 	br	801ef8 <logic+0xc40>
  801ef4:	0005883a 	mov	r2,zero
  801ef8:	1007883a 	mov	r3,r2
  801efc:	e0bffc17 	ldw	r2,-16(fp)
  801f00:	10c02dc5 	stb	r3,183(r2)
  d->_g89 = (d->_g67_e1 || d->_g67) && (d->_g78_e2 || d->_g78) && (d->_g85 || d->_g91) && (d->_g67 || d->_g78 || d->_g91);
  801f04:	e0bffc17 	ldw	r2,-16(fp)
  801f08:	10803e83 	ldbu	r2,250(r2)
  801f0c:	10803fcc 	andi	r2,r2,255
  801f10:	1080201c 	xori	r2,r2,128
  801f14:	10bfe004 	addi	r2,r2,-128
  801f18:	1000061e 	bne	r2,zero,801f34 <logic+0xc7c>
  801f1c:	e0bffc17 	ldw	r2,-16(fp)
  801f20:	10802b03 	ldbu	r2,172(r2)
  801f24:	10803fcc 	andi	r2,r2,255
  801f28:	1080201c 	xori	r2,r2,128
  801f2c:	10bfe004 	addi	r2,r2,-128
  801f30:	10002c26 	beq	r2,zero,801fe4 <logic+0xd2c>
  801f34:	e0bffc17 	ldw	r2,-16(fp)
  801f38:	10803ec3 	ldbu	r2,251(r2)
  801f3c:	10803fcc 	andi	r2,r2,255
  801f40:	1080201c 	xori	r2,r2,128
  801f44:	10bfe004 	addi	r2,r2,-128
  801f48:	1000061e 	bne	r2,zero,801f64 <logic+0xcac>
  801f4c:	e0bffc17 	ldw	r2,-16(fp)
  801f50:	10802c03 	ldbu	r2,176(r2)
  801f54:	10803fcc 	andi	r2,r2,255
  801f58:	1080201c 	xori	r2,r2,128
  801f5c:	10bfe004 	addi	r2,r2,-128
  801f60:	10002026 	beq	r2,zero,801fe4 <logic+0xd2c>
  801f64:	e0bffc17 	ldw	r2,-16(fp)
  801f68:	10802c83 	ldbu	r2,178(r2)
  801f6c:	10803fcc 	andi	r2,r2,255
  801f70:	1080201c 	xori	r2,r2,128
  801f74:	10bfe004 	addi	r2,r2,-128
  801f78:	1000061e 	bne	r2,zero,801f94 <logic+0xcdc>
  801f7c:	e0bffc17 	ldw	r2,-16(fp)
  801f80:	10802dc3 	ldbu	r2,183(r2)
  801f84:	10803fcc 	andi	r2,r2,255
  801f88:	1080201c 	xori	r2,r2,128
  801f8c:	10bfe004 	addi	r2,r2,-128
  801f90:	10001426 	beq	r2,zero,801fe4 <logic+0xd2c>
  801f94:	e0bffc17 	ldw	r2,-16(fp)
  801f98:	10802b03 	ldbu	r2,172(r2)
  801f9c:	10803fcc 	andi	r2,r2,255
  801fa0:	1080201c 	xori	r2,r2,128
  801fa4:	10bfe004 	addi	r2,r2,-128
  801fa8:	10000c1e 	bne	r2,zero,801fdc <logic+0xd24>
  801fac:	e0bffc17 	ldw	r2,-16(fp)
  801fb0:	10802c03 	ldbu	r2,176(r2)
  801fb4:	10803fcc 	andi	r2,r2,255
  801fb8:	1080201c 	xori	r2,r2,128
  801fbc:	10bfe004 	addi	r2,r2,-128
  801fc0:	1000061e 	bne	r2,zero,801fdc <logic+0xd24>
  801fc4:	e0bffc17 	ldw	r2,-16(fp)
  801fc8:	10802dc3 	ldbu	r2,183(r2)
  801fcc:	10803fcc 	andi	r2,r2,255
  801fd0:	1080201c 	xori	r2,r2,128
  801fd4:	10bfe004 	addi	r2,r2,-128
  801fd8:	10000226 	beq	r2,zero,801fe4 <logic+0xd2c>
  801fdc:	00800044 	movi	r2,1
  801fe0:	00000106 	br	801fe8 <logic+0xd30>
  801fe4:	0005883a 	mov	r2,zero
  801fe8:	1007883a 	mov	r3,r2
  801fec:	e0bffc17 	ldw	r2,-16(fp)
  801ff0:	10c02d85 	stb	r3,182(r2)
  d->_cg92 = d->_Pacemaker_local__Atrig;
  801ff4:	e0bffc17 	ldw	r2,-16(fp)
  801ff8:	10c01e03 	ldbu	r3,120(r2)
  801ffc:	e0bffc17 	ldw	r2,-16(fp)
  802000:	10c03c85 	stb	r3,242(r2)
  d->_g86 = d->_g89 && d->_cg92;
  802004:	e0bffc17 	ldw	r2,-16(fp)
  802008:	10802d83 	ldbu	r2,182(r2)
  80200c:	10803fcc 	andi	r2,r2,255
  802010:	1080201c 	xori	r2,r2,128
  802014:	10bfe004 	addi	r2,r2,-128
  802018:	10000826 	beq	r2,zero,80203c <logic+0xd84>
  80201c:	e0bffc17 	ldw	r2,-16(fp)
  802020:	10803c83 	ldbu	r2,242(r2)
  802024:	10803fcc 	andi	r2,r2,255
  802028:	1080201c 	xori	r2,r2,128
  80202c:	10bfe004 	addi	r2,r2,-128
  802030:	10000226 	beq	r2,zero,80203c <logic+0xd84>
  802034:	00800044 	movi	r2,1
  802038:	00000106 	br	802040 <logic+0xd88>
  80203c:	0005883a 	mov	r2,zero
  802040:	1007883a 	mov	r3,r2
  802044:	e0bffc17 	ldw	r2,-16(fp)
  802048:	10c02cc5 	stb	r3,179(r2)
  if (d->_g86) {
  80204c:	e0bffc17 	ldw	r2,-16(fp)
  802050:	10802cc3 	ldbu	r2,179(r2)
  802054:	10803fcc 	andi	r2,r2,255
  802058:	1080201c 	xori	r2,r2,128
  80205c:	10bfe004 	addi	r2,r2,-128
  802060:	10000526 	beq	r2,zero,802078 <logic+0xdc0>
    d->_taken_transitions[0] += 1;
  802064:	e0bffc17 	ldw	r2,-16(fp)
  802068:	10801217 	ldw	r2,72(r2)
  80206c:	10c00044 	addi	r3,r2,1
  802070:	e0bffc17 	ldw	r2,-16(fp)
  802074:	10c01215 	stw	r3,72(r2)
  }
  d->_g87 = d->_pg67_e1;
  802078:	e0bffc17 	ldw	r2,-16(fp)
  80207c:	10c04183 	ldbu	r3,262(r2)
  802080:	e0bffc17 	ldw	r2,-16(fp)
  802084:	10c02d05 	stb	r3,180(r2)
  d->_g67_e1 = d->_GO || d->_g87;
  802088:	e0bffc17 	ldw	r2,-16(fp)
  80208c:	10803183 	ldbu	r2,198(r2)
  802090:	10803fcc 	andi	r2,r2,255
  802094:	1080201c 	xori	r2,r2,128
  802098:	10bfe004 	addi	r2,r2,-128
  80209c:	1000061e 	bne	r2,zero,8020b8 <logic+0xe00>
  8020a0:	e0bffc17 	ldw	r2,-16(fp)
  8020a4:	10802d03 	ldbu	r2,180(r2)
  8020a8:	10803fcc 	andi	r2,r2,255
  8020ac:	1080201c 	xori	r2,r2,128
  8020b0:	10bfe004 	addi	r2,r2,-128
  8020b4:	10000226 	beq	r2,zero,8020c0 <logic+0xe08>
  8020b8:	00800044 	movi	r2,1
  8020bc:	00000106 	br	8020c4 <logic+0xe0c>
  8020c0:	0005883a 	mov	r2,zero
  8020c4:	1007883a 	mov	r3,r2
  8020c8:	e0bffc17 	ldw	r2,-16(fp)
  8020cc:	10c03e85 	stb	r3,250(r2)
  if (d->_g67_e1) {
  8020d0:	e0bffc17 	ldw	r2,-16(fp)
  8020d4:	10803e83 	ldbu	r2,250(r2)
  8020d8:	10803fcc 	andi	r2,r2,255
  8020dc:	1080201c 	xori	r2,r2,128
  8020e0:	10bfe004 	addi	r2,r2,-128
  8020e4:	10000426 	beq	r2,zero,8020f8 <logic+0xe40>
    d->AP = 0;
  8020e8:	e0bffc17 	ldw	r2,-16(fp)
  8020ec:	10001d85 	stb	zero,118(r2)
    d->VP = 0;
  8020f0:	e0bffc17 	ldw	r2,-16(fp)
  8020f4:	10001dc5 	stb	zero,119(r2)
  }
  d->_g87_e3 = d->_g89 && !d->_cg92;
  8020f8:	e0bffc17 	ldw	r2,-16(fp)
  8020fc:	10802d83 	ldbu	r2,182(r2)
  802100:	10803fcc 	andi	r2,r2,255
  802104:	1080201c 	xori	r2,r2,128
  802108:	10bfe004 	addi	r2,r2,-128
  80210c:	10000826 	beq	r2,zero,802130 <logic+0xe78>
  802110:	e0bffc17 	ldw	r2,-16(fp)
  802114:	10803c83 	ldbu	r2,242(r2)
  802118:	10803fcc 	andi	r2,r2,255
  80211c:	1080201c 	xori	r2,r2,128
  802120:	10bfe004 	addi	r2,r2,-128
  802124:	1000021e 	bne	r2,zero,802130 <logic+0xe78>
  802128:	00800044 	movi	r2,1
  80212c:	00000106 	br	802134 <logic+0xe7c>
  802130:	0005883a 	mov	r2,zero
  802134:	1007883a 	mov	r3,r2
  802138:	e0bffc17 	ldw	r2,-16(fp)
  80213c:	10c03f05 	stb	r3,252(r2)
  d->_cg94 = d->_Pacemaker_local__Atrig1;
  802140:	e0bffc17 	ldw	r2,-16(fp)
  802144:	10c01e43 	ldbu	r3,121(r2)
  802148:	e0bffc17 	ldw	r2,-16(fp)
  80214c:	10c03cc5 	stb	r3,243(r2)
  d->_g67 = d->_g87_e3 && d->_cg94;
  802150:	e0bffc17 	ldw	r2,-16(fp)
  802154:	10803f03 	ldbu	r2,252(r2)
  802158:	10803fcc 	andi	r2,r2,255
  80215c:	1080201c 	xori	r2,r2,128
  802160:	10bfe004 	addi	r2,r2,-128
  802164:	10000826 	beq	r2,zero,802188 <logic+0xed0>
  802168:	e0bffc17 	ldw	r2,-16(fp)
  80216c:	10803cc3 	ldbu	r2,243(r2)
  802170:	10803fcc 	andi	r2,r2,255
  802174:	1080201c 	xori	r2,r2,128
  802178:	10bfe004 	addi	r2,r2,-128
  80217c:	10000226 	beq	r2,zero,802188 <logic+0xed0>
  802180:	00800044 	movi	r2,1
  802184:	00000106 	br	80218c <logic+0xed4>
  802188:	0005883a 	mov	r2,zero
  80218c:	1007883a 	mov	r3,r2
  802190:	e0bffc17 	ldw	r2,-16(fp)
  802194:	10c02b05 	stb	r3,172(r2)
  if (d->_g67) {
  802198:	e0bffc17 	ldw	r2,-16(fp)
  80219c:	10802b03 	ldbu	r2,172(r2)
  8021a0:	10803fcc 	andi	r2,r2,255
  8021a4:	1080201c 	xori	r2,r2,128
  8021a8:	10bfe004 	addi	r2,r2,-128
  8021ac:	10000b26 	beq	r2,zero,8021dc <logic+0xf24>
    d->AP |= 1;
  8021b0:	e0bffc17 	ldw	r2,-16(fp)
  8021b4:	10801d83 	ldbu	r2,118(r2)
  8021b8:	10800054 	ori	r2,r2,1
  8021bc:	1007883a 	mov	r3,r2
  8021c0:	e0bffc17 	ldw	r2,-16(fp)
  8021c4:	10c01d85 	stb	r3,118(r2)
    d->_taken_transitions[1] += 1;
  8021c8:	e0bffc17 	ldw	r2,-16(fp)
  8021cc:	10801317 	ldw	r2,76(r2)
  8021d0:	10c00044 	addi	r3,r2,1
  8021d4:	e0bffc17 	ldw	r2,-16(fp)
  8021d8:	10c01315 	stw	r3,76(r2)
  }
  d->_g78 = d->_pg32;
  8021dc:	e0bffc17 	ldw	r2,-16(fp)
  8021e0:	10c041c3 	ldbu	r3,263(r2)
  8021e4:	e0bffc17 	ldw	r2,-16(fp)
  8021e8:	10c02c05 	stb	r3,176(r2)
  d->_g78_e2 = d->_pg10;
  8021ec:	e0bffc17 	ldw	r2,-16(fp)
  8021f0:	10c04203 	ldbu	r3,264(r2)
  8021f4:	e0bffc17 	ldw	r2,-16(fp)
  8021f8:	10c03ec5 	stb	r3,251(r2)
  d->_g135 = !(d->_g78 || d->_g78_e2);
  8021fc:	e0bffc17 	ldw	r2,-16(fp)
  802200:	10802c03 	ldbu	r2,176(r2)
  802204:	10803fcc 	andi	r2,r2,255
  802208:	1080201c 	xori	r2,r2,128
  80220c:	10bfe004 	addi	r2,r2,-128
  802210:	1000081e 	bne	r2,zero,802234 <logic+0xf7c>
  802214:	e0bffc17 	ldw	r2,-16(fp)
  802218:	10803ec3 	ldbu	r2,251(r2)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	1080201c 	xori	r2,r2,128
  802224:	10bfe004 	addi	r2,r2,-128
  802228:	1000021e 	bne	r2,zero,802234 <logic+0xf7c>
  80222c:	00800044 	movi	r2,1
  802230:	00000106 	br	802238 <logic+0xf80>
  802234:	0005883a 	mov	r2,zero
  802238:	1007883a 	mov	r3,r2
  80223c:	e0bffc17 	ldw	r2,-16(fp)
  802240:	10c03145 	stb	r3,197(r2)
  d->_g92 = d->_pg59;
  802244:	e0bffc17 	ldw	r2,-16(fp)
  802248:	10c04243 	ldbu	r3,265(r2)
  80224c:	e0bffc17 	ldw	r2,-16(fp)
  802250:	10c02e05 	stb	r3,184(r2)
  if (d->_g92) {
  802254:	e0bffc17 	ldw	r2,-16(fp)
  802258:	10802e03 	ldbu	r2,184(r2)
  80225c:	10803fcc 	andi	r2,r2,255
  802260:	1080201c 	xori	r2,r2,128
  802264:	10bfe004 	addi	r2,r2,-128
  802268:	10001226 	beq	r2,zero,8022b4 <logic+0xffc>
    d->URI_Clock += d->deltaT;
  80226c:	e13ffc17 	ldw	r4,-16(fp)
  802270:	20800c17 	ldw	r2,48(r4)
  802274:	20c00d17 	ldw	r3,52(r4)
  802278:	e1bffc17 	ldw	r6,-16(fp)
  80227c:	31001917 	ldw	r4,100(r6)
  802280:	31401a17 	ldw	r5,104(r6)
  802284:	200d883a 	mov	r6,r4
  802288:	280f883a 	mov	r7,r5
  80228c:	1009883a 	mov	r4,r2
  802290:	180b883a 	mov	r5,r3
  802294:	080564c0 	call	80564c <__adddf3>
  802298:	1009883a 	mov	r4,r2
  80229c:	180b883a 	mov	r5,r3
  8022a0:	2005883a 	mov	r2,r4
  8022a4:	2807883a 	mov	r3,r5
  8022a8:	e13ffc17 	ldw	r4,-16(fp)
  8022ac:	20800c15 	stw	r2,48(r4)
  8022b0:	20c00d15 	stw	r3,52(r4)
  }
  d->_g50 = d->_pg20;
  8022b4:	e0bffc17 	ldw	r2,-16(fp)
  8022b8:	10c04283 	ldbu	r3,266(r2)
  8022bc:	e0bffc17 	ldw	r2,-16(fp)
  8022c0:	10c027c5 	stb	r3,159(r2)
  d->_cg50 = d->VS == 0 && d->AVI_Clock >= d->AVI && d->URI_Clock >= d->URI;
  8022c4:	e0bffc17 	ldw	r2,-16(fp)
  8022c8:	10801d43 	ldbu	r2,117(r2)
  8022cc:	10803fcc 	andi	r2,r2,255
  8022d0:	1080201c 	xori	r2,r2,128
  8022d4:	10bfe004 	addi	r2,r2,-128
  8022d8:	1000201e 	bne	r2,zero,80235c <logic+0x10a4>
  8022dc:	e0bffc17 	ldw	r2,-16(fp)
  8022e0:	14001017 	ldw	r16,64(r2)
  8022e4:	14401117 	ldw	r17,68(r2)
  8022e8:	e0bffc17 	ldw	r2,-16(fp)
  8022ec:	10800017 	ldw	r2,0(r2)
  8022f0:	1009883a 	mov	r4,r2
  8022f4:	08069c40 	call	8069c4 <__floatsidf>
  8022f8:	1009883a 	mov	r4,r2
  8022fc:	180b883a 	mov	r5,r3
  802300:	200d883a 	mov	r6,r4
  802304:	280f883a 	mov	r7,r5
  802308:	8009883a 	mov	r4,r16
  80230c:	880b883a 	mov	r5,r17
  802310:	0805ef80 	call	805ef8 <__gedf2>
  802314:	10001116 	blt	r2,zero,80235c <logic+0x10a4>
  802318:	e0bffc17 	ldw	r2,-16(fp)
  80231c:	14000c17 	ldw	r16,48(r2)
  802320:	14400d17 	ldw	r17,52(r2)
  802324:	e0bffc17 	ldw	r2,-16(fp)
  802328:	10800517 	ldw	r2,20(r2)
  80232c:	1009883a 	mov	r4,r2
  802330:	08069c40 	call	8069c4 <__floatsidf>
  802334:	1009883a 	mov	r4,r2
  802338:	180b883a 	mov	r5,r3
  80233c:	200d883a 	mov	r6,r4
  802340:	280f883a 	mov	r7,r5
  802344:	8009883a 	mov	r4,r16
  802348:	880b883a 	mov	r5,r17
  80234c:	0805ef80 	call	805ef8 <__gedf2>
  802350:	10000216 	blt	r2,zero,80235c <logic+0x10a4>
  802354:	00800044 	movi	r2,1
  802358:	00000106 	br	802360 <logic+0x10a8>
  80235c:	0005883a 	mov	r2,zero
  802360:	1007883a 	mov	r3,r2
  802364:	e0bffc17 	ldw	r2,-16(fp)
  802368:	10c03805 	stb	r3,224(r2)
  d->_g51 = d->_g50 && d->_cg50;
  80236c:	e0bffc17 	ldw	r2,-16(fp)
  802370:	108027c3 	ldbu	r2,159(r2)
  802374:	10803fcc 	andi	r2,r2,255
  802378:	1080201c 	xori	r2,r2,128
  80237c:	10bfe004 	addi	r2,r2,-128
  802380:	10000826 	beq	r2,zero,8023a4 <logic+0x10ec>
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	10803803 	ldbu	r2,224(r2)
  80238c:	10803fcc 	andi	r2,r2,255
  802390:	1080201c 	xori	r2,r2,128
  802394:	10bfe004 	addi	r2,r2,-128
  802398:	10000226 	beq	r2,zero,8023a4 <logic+0x10ec>
  80239c:	00800044 	movi	r2,1
  8023a0:	00000106 	br	8023a8 <logic+0x10f0>
  8023a4:	0005883a 	mov	r2,zero
  8023a8:	1007883a 	mov	r3,r2
  8023ac:	e0bffc17 	ldw	r2,-16(fp)
  8023b0:	10c02805 	stb	r3,160(r2)
  if (d->_g51) {
  8023b4:	e0bffc17 	ldw	r2,-16(fp)
  8023b8:	10802803 	ldbu	r2,160(r2)
  8023bc:	10803fcc 	andi	r2,r2,255
  8023c0:	1080201c 	xori	r2,r2,128
  8023c4:	10bfe004 	addi	r2,r2,-128
  8023c8:	10000326 	beq	r2,zero,8023d8 <logic+0x1120>
    d->_Pacemaker_local__Atrig3 = 1;
  8023cc:	e0bffc17 	ldw	r2,-16(fp)
  8023d0:	00c00044 	movi	r3,1
  8023d4:	10c01ec5 	stb	r3,123(r2)
  }
  d->_g107 = d->_pg99;
  8023d8:	e0bffc17 	ldw	r2,-16(fp)
  8023dc:	10c042c3 	ldbu	r3,267(r2)
  8023e0:	e0bffc17 	ldw	r2,-16(fp)
  8023e4:	10c03005 	stb	r3,192(r2)
  if (d->_g107) {
  8023e8:	e0bffc17 	ldw	r2,-16(fp)
  8023ec:	10803003 	ldbu	r2,192(r2)
  8023f0:	10803fcc 	andi	r2,r2,255
  8023f4:	1080201c 	xori	r2,r2,128
  8023f8:	10bfe004 	addi	r2,r2,-128
  8023fc:	10001226 	beq	r2,zero,802448 <logic+0x1190>
    d->VRP_Clock += d->deltaT;
  802400:	e13ffc17 	ldw	r4,-16(fp)
  802404:	20800617 	ldw	r2,24(r4)
  802408:	20c00717 	ldw	r3,28(r4)
  80240c:	e1bffc17 	ldw	r6,-16(fp)
  802410:	31001917 	ldw	r4,100(r6)
  802414:	31401a17 	ldw	r5,104(r6)
  802418:	200d883a 	mov	r6,r4
  80241c:	280f883a 	mov	r7,r5
  802420:	1009883a 	mov	r4,r2
  802424:	180b883a 	mov	r5,r3
  802428:	080564c0 	call	80564c <__adddf3>
  80242c:	1009883a 	mov	r4,r2
  802430:	180b883a 	mov	r5,r3
  802434:	2005883a 	mov	r2,r4
  802438:	2807883a 	mov	r3,r5
  80243c:	e13ffc17 	ldw	r4,-16(fp)
  802440:	20800615 	stw	r2,24(r4)
  802444:	20c00715 	stw	r3,28(r4)
  }
  d->_g53 = d->_g50 && !d->_cg50;
  802448:	e0bffc17 	ldw	r2,-16(fp)
  80244c:	108027c3 	ldbu	r2,159(r2)
  802450:	10803fcc 	andi	r2,r2,255
  802454:	1080201c 	xori	r2,r2,128
  802458:	10bfe004 	addi	r2,r2,-128
  80245c:	10000826 	beq	r2,zero,802480 <logic+0x11c8>
  802460:	e0bffc17 	ldw	r2,-16(fp)
  802464:	10803803 	ldbu	r2,224(r2)
  802468:	10803fcc 	andi	r2,r2,255
  80246c:	1080201c 	xori	r2,r2,128
  802470:	10bfe004 	addi	r2,r2,-128
  802474:	1000021e 	bne	r2,zero,802480 <logic+0x11c8>
  802478:	00800044 	movi	r2,1
  80247c:	00000106 	br	802484 <logic+0x11cc>
  802480:	0005883a 	mov	r2,zero
  802484:	1007883a 	mov	r3,r2
  802488:	e0bffc17 	ldw	r2,-16(fp)
  80248c:	10c02885 	stb	r3,162(r2)
  d->_cg53 = d->VS == 1 && d->VRP_Clock >= d->VRP;
  802490:	e0bffc17 	ldw	r2,-16(fp)
  802494:	10801d43 	ldbu	r2,117(r2)
  802498:	10803fcc 	andi	r2,r2,255
  80249c:	1080201c 	xori	r2,r2,128
  8024a0:	10bfe004 	addi	r2,r2,-128
  8024a4:	10800058 	cmpnei	r2,r2,1
  8024a8:	1000111e 	bne	r2,zero,8024f0 <logic+0x1238>
  8024ac:	e0bffc17 	ldw	r2,-16(fp)
  8024b0:	14000617 	ldw	r16,24(r2)
  8024b4:	14400717 	ldw	r17,28(r2)
  8024b8:	e0bffc17 	ldw	r2,-16(fp)
  8024bc:	10800317 	ldw	r2,12(r2)
  8024c0:	1009883a 	mov	r4,r2
  8024c4:	08069c40 	call	8069c4 <__floatsidf>
  8024c8:	1009883a 	mov	r4,r2
  8024cc:	180b883a 	mov	r5,r3
  8024d0:	200d883a 	mov	r6,r4
  8024d4:	280f883a 	mov	r7,r5
  8024d8:	8009883a 	mov	r4,r16
  8024dc:	880b883a 	mov	r5,r17
  8024e0:	0805ef80 	call	805ef8 <__gedf2>
  8024e4:	10000216 	blt	r2,zero,8024f0 <logic+0x1238>
  8024e8:	00800044 	movi	r2,1
  8024ec:	00000106 	br	8024f4 <logic+0x123c>
  8024f0:	0005883a 	mov	r2,zero
  8024f4:	1007883a 	mov	r3,r2
  8024f8:	e0bffc17 	ldw	r2,-16(fp)
  8024fc:	10c03845 	stb	r3,225(r2)
  d->_g54 = d->_g53 && d->_cg53;
  802500:	e0bffc17 	ldw	r2,-16(fp)
  802504:	10802883 	ldbu	r2,162(r2)
  802508:	10803fcc 	andi	r2,r2,255
  80250c:	1080201c 	xori	r2,r2,128
  802510:	10bfe004 	addi	r2,r2,-128
  802514:	10000826 	beq	r2,zero,802538 <logic+0x1280>
  802518:	e0bffc17 	ldw	r2,-16(fp)
  80251c:	10803843 	ldbu	r2,225(r2)
  802520:	10803fcc 	andi	r2,r2,255
  802524:	1080201c 	xori	r2,r2,128
  802528:	10bfe004 	addi	r2,r2,-128
  80252c:	10000226 	beq	r2,zero,802538 <logic+0x1280>
  802530:	00800044 	movi	r2,1
  802534:	00000106 	br	80253c <logic+0x1284>
  802538:	0005883a 	mov	r2,zero
  80253c:	1007883a 	mov	r3,r2
  802540:	e0bffc17 	ldw	r2,-16(fp)
  802544:	10c028c5 	stb	r3,163(r2)
  if (d->_g54) {
  802548:	e0bffc17 	ldw	r2,-16(fp)
  80254c:	108028c3 	ldbu	r2,163(r2)
  802550:	10803fcc 	andi	r2,r2,255
  802554:	1080201c 	xori	r2,r2,128
  802558:	10bfe004 	addi	r2,r2,-128
  80255c:	10000326 	beq	r2,zero,80256c <logic+0x12b4>
    d->_Pacemaker_local__Atrig4 = 1;
  802560:	e0bffc17 	ldw	r2,-16(fp)
  802564:	00c00044 	movi	r3,1
  802568:	10c01f05 	stb	r3,124(r2)
  }
  d->_g115 = d->_pg94;
  80256c:	e0bffc17 	ldw	r2,-16(fp)
  802570:	10c04303 	ldbu	r3,268(r2)
  802574:	e0bffc17 	ldw	r2,-16(fp)
  802578:	10c03085 	stb	r3,194(r2)
  if (d->_g115) {
  80257c:	e0bffc17 	ldw	r2,-16(fp)
  802580:	10803083 	ldbu	r2,194(r2)
  802584:	10803fcc 	andi	r2,r2,255
  802588:	1080201c 	xori	r2,r2,128
  80258c:	10bfe004 	addi	r2,r2,-128
  802590:	10001226 	beq	r2,zero,8025dc <logic+0x1324>
    d->LRI_Clock += d->deltaT;
  802594:	e13ffc17 	ldw	r4,-16(fp)
  802598:	20800a17 	ldw	r2,40(r4)
  80259c:	20c00b17 	ldw	r3,44(r4)
  8025a0:	e1bffc17 	ldw	r6,-16(fp)
  8025a4:	31001917 	ldw	r4,100(r6)
  8025a8:	31401a17 	ldw	r5,104(r6)
  8025ac:	200d883a 	mov	r6,r4
  8025b0:	280f883a 	mov	r7,r5
  8025b4:	1009883a 	mov	r4,r2
  8025b8:	180b883a 	mov	r5,r3
  8025bc:	080564c0 	call	80564c <__adddf3>
  8025c0:	1009883a 	mov	r4,r2
  8025c4:	180b883a 	mov	r5,r3
  8025c8:	2005883a 	mov	r2,r4
  8025cc:	2807883a 	mov	r3,r5
  8025d0:	e13ffc17 	ldw	r4,-16(fp)
  8025d4:	20800a15 	stw	r2,40(r4)
  8025d8:	20c00b15 	stw	r3,44(r4)
  }
  d->_g53 = d->_g53 && !d->_cg53;
  8025dc:	e0bffc17 	ldw	r2,-16(fp)
  8025e0:	10802883 	ldbu	r2,162(r2)
  8025e4:	10803fcc 	andi	r2,r2,255
  8025e8:	1080201c 	xori	r2,r2,128
  8025ec:	10bfe004 	addi	r2,r2,-128
  8025f0:	10000826 	beq	r2,zero,802614 <logic+0x135c>
  8025f4:	e0bffc17 	ldw	r2,-16(fp)
  8025f8:	10803843 	ldbu	r2,225(r2)
  8025fc:	10803fcc 	andi	r2,r2,255
  802600:	1080201c 	xori	r2,r2,128
  802604:	10bfe004 	addi	r2,r2,-128
  802608:	1000021e 	bne	r2,zero,802614 <logic+0x135c>
  80260c:	00800044 	movi	r2,1
  802610:	00000106 	br	802618 <logic+0x1360>
  802614:	0005883a 	mov	r2,zero
  802618:	1007883a 	mov	r3,r2
  80261c:	e0bffc17 	ldw	r2,-16(fp)
  802620:	10c02885 	stb	r3,162(r2)
  d->_cg55 = d->VS == 0 && d->LRI_Clock >= d->LRI;
  802624:	e0bffc17 	ldw	r2,-16(fp)
  802628:	10801d43 	ldbu	r2,117(r2)
  80262c:	10803fcc 	andi	r2,r2,255
  802630:	1080201c 	xori	r2,r2,128
  802634:	10bfe004 	addi	r2,r2,-128
  802638:	1000111e 	bne	r2,zero,802680 <logic+0x13c8>
  80263c:	e0bffc17 	ldw	r2,-16(fp)
  802640:	14000a17 	ldw	r16,40(r2)
  802644:	14400b17 	ldw	r17,44(r2)
  802648:	e0bffc17 	ldw	r2,-16(fp)
  80264c:	10800417 	ldw	r2,16(r2)
  802650:	1009883a 	mov	r4,r2
  802654:	08069c40 	call	8069c4 <__floatsidf>
  802658:	1009883a 	mov	r4,r2
  80265c:	180b883a 	mov	r5,r3
  802660:	200d883a 	mov	r6,r4
  802664:	280f883a 	mov	r7,r5
  802668:	8009883a 	mov	r4,r16
  80266c:	880b883a 	mov	r5,r17
  802670:	0805ef80 	call	805ef8 <__gedf2>
  802674:	10000216 	blt	r2,zero,802680 <logic+0x13c8>
  802678:	00800044 	movi	r2,1
  80267c:	00000106 	br	802684 <logic+0x13cc>
  802680:	0005883a 	mov	r2,zero
  802684:	1007883a 	mov	r3,r2
  802688:	e0bffc17 	ldw	r2,-16(fp)
  80268c:	10c037c5 	stb	r3,223(r2)
  d->_g56 = d->_g53 && d->_cg55;
  802690:	e0bffc17 	ldw	r2,-16(fp)
  802694:	10802883 	ldbu	r2,162(r2)
  802698:	10803fcc 	andi	r2,r2,255
  80269c:	1080201c 	xori	r2,r2,128
  8026a0:	10bfe004 	addi	r2,r2,-128
  8026a4:	10000826 	beq	r2,zero,8026c8 <logic+0x1410>
  8026a8:	e0bffc17 	ldw	r2,-16(fp)
  8026ac:	108037c3 	ldbu	r2,223(r2)
  8026b0:	10803fcc 	andi	r2,r2,255
  8026b4:	1080201c 	xori	r2,r2,128
  8026b8:	10bfe004 	addi	r2,r2,-128
  8026bc:	10000226 	beq	r2,zero,8026c8 <logic+0x1410>
  8026c0:	00800044 	movi	r2,1
  8026c4:	00000106 	br	8026cc <logic+0x1414>
  8026c8:	0005883a 	mov	r2,zero
  8026cc:	1007883a 	mov	r3,r2
  8026d0:	e0bffc17 	ldw	r2,-16(fp)
  8026d4:	10c02945 	stb	r3,165(r2)
  if (d->_g56) {
  8026d8:	e0bffc17 	ldw	r2,-16(fp)
  8026dc:	10802943 	ldbu	r2,165(r2)
  8026e0:	10803fcc 	andi	r2,r2,255
  8026e4:	1080201c 	xori	r2,r2,128
  8026e8:	10bfe004 	addi	r2,r2,-128
  8026ec:	10000326 	beq	r2,zero,8026fc <logic+0x1444>
    d->_Pacemaker_local__Atrig5 = 1;
  8026f0:	e0bffc17 	ldw	r2,-16(fp)
  8026f4:	00c00044 	movi	r3,1
  8026f8:	10c01f45 	stb	r3,125(r2)
  }
  d->_g13 = d->_g78_e2 || d->_g78;
  8026fc:	e0bffc17 	ldw	r2,-16(fp)
  802700:	10803ec3 	ldbu	r2,251(r2)
  802704:	10803fcc 	andi	r2,r2,255
  802708:	1080201c 	xori	r2,r2,128
  80270c:	10bfe004 	addi	r2,r2,-128
  802710:	1000061e 	bne	r2,zero,80272c <logic+0x1474>
  802714:	e0bffc17 	ldw	r2,-16(fp)
  802718:	10802c03 	ldbu	r2,176(r2)
  80271c:	10803fcc 	andi	r2,r2,255
  802720:	1080201c 	xori	r2,r2,128
  802724:	10bfe004 	addi	r2,r2,-128
  802728:	10000226 	beq	r2,zero,802734 <logic+0x147c>
  80272c:	00800044 	movi	r2,1
  802730:	00000106 	br	802738 <logic+0x1480>
  802734:	0005883a 	mov	r2,zero
  802738:	1007883a 	mov	r3,r2
  80273c:	e0bffc17 	ldw	r2,-16(fp)
  802740:	10c02145 	stb	r3,133(r2)
  d->_cg8 = d->VRP_Clock < d->VRP;
  802744:	e0bffc17 	ldw	r2,-16(fp)
  802748:	14000617 	ldw	r16,24(r2)
  80274c:	14400717 	ldw	r17,28(r2)
  802750:	e0bffc17 	ldw	r2,-16(fp)
  802754:	10800317 	ldw	r2,12(r2)
  802758:	1009883a 	mov	r4,r2
  80275c:	08069c40 	call	8069c4 <__floatsidf>
  802760:	1009883a 	mov	r4,r2
  802764:	180b883a 	mov	r5,r3
  802768:	04800044 	movi	r18,1
  80276c:	200d883a 	mov	r6,r4
  802770:	280f883a 	mov	r7,r5
  802774:	8009883a 	mov	r4,r16
  802778:	880b883a 	mov	r5,r17
  80277c:	0805fd40 	call	805fd4 <__ledf2>
  802780:	10000116 	blt	r2,zero,802788 <logic+0x14d0>
  802784:	0025883a 	mov	r18,zero
  802788:	9007883a 	mov	r3,r18
  80278c:	e0bffc17 	ldw	r2,-16(fp)
  802790:	10c03285 	stb	r3,202(r2)
  d->_g7 = d->_g13 && d->_cg8;
  802794:	e0bffc17 	ldw	r2,-16(fp)
  802798:	10802143 	ldbu	r2,133(r2)
  80279c:	10803fcc 	andi	r2,r2,255
  8027a0:	1080201c 	xori	r2,r2,128
  8027a4:	10bfe004 	addi	r2,r2,-128
  8027a8:	10000826 	beq	r2,zero,8027cc <logic+0x1514>
  8027ac:	e0bffc17 	ldw	r2,-16(fp)
  8027b0:	10803283 	ldbu	r2,202(r2)
  8027b4:	10803fcc 	andi	r2,r2,255
  8027b8:	1080201c 	xori	r2,r2,128
  8027bc:	10bfe004 	addi	r2,r2,-128
  8027c0:	10000226 	beq	r2,zero,8027cc <logic+0x1514>
  8027c4:	00800044 	movi	r2,1
  8027c8:	00000106 	br	8027d0 <logic+0x1518>
  8027cc:	0005883a 	mov	r2,zero
  8027d0:	1007883a 	mov	r3,r2
  8027d4:	e0bffc17 	ldw	r2,-16(fp)
  8027d8:	10c02005 	stb	r3,128(r2)
  if (d->_g7) {
  8027dc:	e0bffc17 	ldw	r2,-16(fp)
  8027e0:	10802003 	ldbu	r2,128(r2)
  8027e4:	10803fcc 	andi	r2,r2,255
  8027e8:	1080201c 	xori	r2,r2,128
  8027ec:	10bfe004 	addi	r2,r2,-128
  8027f0:	10003426 	beq	r2,zero,8028c4 <logic+0x160c>
    d->sleepT = (d->sleepT < (d->VRP - d->VRP_Clock)) ? d->sleepT : (d->VRP - d->VRP_Clock);
  8027f4:	e0bffc17 	ldw	r2,-16(fp)
  8027f8:	14001b17 	ldw	r16,108(r2)
  8027fc:	14401c17 	ldw	r17,112(r2)
  802800:	e0bffc17 	ldw	r2,-16(fp)
  802804:	10800317 	ldw	r2,12(r2)
  802808:	1009883a 	mov	r4,r2
  80280c:	08069c40 	call	8069c4 <__floatsidf>
  802810:	1011883a 	mov	r8,r2
  802814:	1813883a 	mov	r9,r3
  802818:	e13ffc17 	ldw	r4,-16(fp)
  80281c:	20800617 	ldw	r2,24(r4)
  802820:	20c00717 	ldw	r3,28(r4)
  802824:	100d883a 	mov	r6,r2
  802828:	180f883a 	mov	r7,r3
  80282c:	4009883a 	mov	r4,r8
  802830:	480b883a 	mov	r5,r9
  802834:	08060c80 	call	8060c8 <__subdf3>
  802838:	1009883a 	mov	r4,r2
  80283c:	180b883a 	mov	r5,r3
  802840:	2005883a 	mov	r2,r4
  802844:	2807883a 	mov	r3,r5
  802848:	100d883a 	mov	r6,r2
  80284c:	180f883a 	mov	r7,r3
  802850:	8009883a 	mov	r4,r16
  802854:	880b883a 	mov	r5,r17
  802858:	0805fd40 	call	805fd4 <__ledf2>
  80285c:	1000040e 	bge	r2,zero,802870 <logic+0x15b8>
  802860:	e13ffc17 	ldw	r4,-16(fp)
  802864:	20801b17 	ldw	r2,108(r4)
  802868:	20c01c17 	ldw	r3,112(r4)
  80286c:	00001206 	br	8028b8 <logic+0x1600>
  802870:	e0bffc17 	ldw	r2,-16(fp)
  802874:	10800317 	ldw	r2,12(r2)
  802878:	1009883a 	mov	r4,r2
  80287c:	08069c40 	call	8069c4 <__floatsidf>
  802880:	1011883a 	mov	r8,r2
  802884:	1813883a 	mov	r9,r3
  802888:	e13ffc17 	ldw	r4,-16(fp)
  80288c:	20800617 	ldw	r2,24(r4)
  802890:	20c00717 	ldw	r3,28(r4)
  802894:	100d883a 	mov	r6,r2
  802898:	180f883a 	mov	r7,r3
  80289c:	4009883a 	mov	r4,r8
  8028a0:	480b883a 	mov	r5,r9
  8028a4:	08060c80 	call	8060c8 <__subdf3>
  8028a8:	1009883a 	mov	r4,r2
  8028ac:	180b883a 	mov	r5,r3
  8028b0:	2005883a 	mov	r2,r4
  8028b4:	2807883a 	mov	r3,r5
  8028b8:	e13ffc17 	ldw	r4,-16(fp)
  8028bc:	20801b15 	stw	r2,108(r4)
  8028c0:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg9 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8028c4:	e0bffc17 	ldw	r2,-16(fp)
  8028c8:	10801ec3 	ldbu	r2,123(r2)
  8028cc:	10803fcc 	andi	r2,r2,255
  8028d0:	1080201c 	xori	r2,r2,128
  8028d4:	10bfe004 	addi	r2,r2,-128
  8028d8:	10000c1e 	bne	r2,zero,80290c <logic+0x1654>
  8028dc:	e0bffc17 	ldw	r2,-16(fp)
  8028e0:	10801f03 	ldbu	r2,124(r2)
  8028e4:	10803fcc 	andi	r2,r2,255
  8028e8:	1080201c 	xori	r2,r2,128
  8028ec:	10bfe004 	addi	r2,r2,-128
  8028f0:	1000061e 	bne	r2,zero,80290c <logic+0x1654>
  8028f4:	e0bffc17 	ldw	r2,-16(fp)
  8028f8:	10801f43 	ldbu	r2,125(r2)
  8028fc:	10803fcc 	andi	r2,r2,255
  802900:	1080201c 	xori	r2,r2,128
  802904:	10bfe004 	addi	r2,r2,-128
  802908:	10000226 	beq	r2,zero,802914 <logic+0x165c>
  80290c:	00800044 	movi	r2,1
  802910:	00000106 	br	802918 <logic+0x1660>
  802914:	0005883a 	mov	r2,zero
  802918:	1007883a 	mov	r3,r2
  80291c:	e0bffc17 	ldw	r2,-16(fp)
  802920:	10c03245 	stb	r3,201(r2)
  d->_g8 = d->_g13 && !d->_cg8;
  802924:	e0bffc17 	ldw	r2,-16(fp)
  802928:	10802143 	ldbu	r2,133(r2)
  80292c:	10803fcc 	andi	r2,r2,255
  802930:	1080201c 	xori	r2,r2,128
  802934:	10bfe004 	addi	r2,r2,-128
  802938:	10000826 	beq	r2,zero,80295c <logic+0x16a4>
  80293c:	e0bffc17 	ldw	r2,-16(fp)
  802940:	10803283 	ldbu	r2,202(r2)
  802944:	10803fcc 	andi	r2,r2,255
  802948:	1080201c 	xori	r2,r2,128
  80294c:	10bfe004 	addi	r2,r2,-128
  802950:	1000021e 	bne	r2,zero,80295c <logic+0x16a4>
  802954:	00800044 	movi	r2,1
  802958:	00000106 	br	802960 <logic+0x16a8>
  80295c:	0005883a 	mov	r2,zero
  802960:	1007883a 	mov	r3,r2
  802964:	e0bffc17 	ldw	r2,-16(fp)
  802968:	10c02045 	stb	r3,129(r2)
  d->_cg11 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  80296c:	e0bffc17 	ldw	r2,-16(fp)
  802970:	10801ec3 	ldbu	r2,123(r2)
  802974:	10803fcc 	andi	r2,r2,255
  802978:	1080201c 	xori	r2,r2,128
  80297c:	10bfe004 	addi	r2,r2,-128
  802980:	10000c1e 	bne	r2,zero,8029b4 <logic+0x16fc>
  802984:	e0bffc17 	ldw	r2,-16(fp)
  802988:	10801f03 	ldbu	r2,124(r2)
  80298c:	10803fcc 	andi	r2,r2,255
  802990:	1080201c 	xori	r2,r2,128
  802994:	10bfe004 	addi	r2,r2,-128
  802998:	1000061e 	bne	r2,zero,8029b4 <logic+0x16fc>
  80299c:	e0bffc17 	ldw	r2,-16(fp)
  8029a0:	10801f43 	ldbu	r2,125(r2)
  8029a4:	10803fcc 	andi	r2,r2,255
  8029a8:	1080201c 	xori	r2,r2,128
  8029ac:	10bfe004 	addi	r2,r2,-128
  8029b0:	10000226 	beq	r2,zero,8029bc <logic+0x1704>
  8029b4:	00800044 	movi	r2,1
  8029b8:	00000106 	br	8029c0 <logic+0x1708>
  8029bc:	0005883a 	mov	r2,zero
  8029c0:	1007883a 	mov	r3,r2
  8029c4:	e0bffc17 	ldw	r2,-16(fp)
  8029c8:	10c032c5 	stb	r3,203(r2)
  d->_g10 = d->_g7 && d->_cg9 || d->_g8 && d->_cg11;
  8029cc:	e0bffc17 	ldw	r2,-16(fp)
  8029d0:	10802003 	ldbu	r2,128(r2)
  8029d4:	10803fcc 	andi	r2,r2,255
  8029d8:	1080201c 	xori	r2,r2,128
  8029dc:	10bfe004 	addi	r2,r2,-128
  8029e0:	10000626 	beq	r2,zero,8029fc <logic+0x1744>
  8029e4:	e0bffc17 	ldw	r2,-16(fp)
  8029e8:	10803243 	ldbu	r2,201(r2)
  8029ec:	10803fcc 	andi	r2,r2,255
  8029f0:	1080201c 	xori	r2,r2,128
  8029f4:	10bfe004 	addi	r2,r2,-128
  8029f8:	10000c1e 	bne	r2,zero,802a2c <logic+0x1774>
  8029fc:	e0bffc17 	ldw	r2,-16(fp)
  802a00:	10802043 	ldbu	r2,129(r2)
  802a04:	10803fcc 	andi	r2,r2,255
  802a08:	1080201c 	xori	r2,r2,128
  802a0c:	10bfe004 	addi	r2,r2,-128
  802a10:	10000826 	beq	r2,zero,802a34 <logic+0x177c>
  802a14:	e0bffc17 	ldw	r2,-16(fp)
  802a18:	108032c3 	ldbu	r2,203(r2)
  802a1c:	10803fcc 	andi	r2,r2,255
  802a20:	1080201c 	xori	r2,r2,128
  802a24:	10bfe004 	addi	r2,r2,-128
  802a28:	10000226 	beq	r2,zero,802a34 <logic+0x177c>
  802a2c:	00800044 	movi	r2,1
  802a30:	00000106 	br	802a38 <logic+0x1780>
  802a34:	0005883a 	mov	r2,zero
  802a38:	1007883a 	mov	r3,r2
  802a3c:	e0bffc17 	ldw	r2,-16(fp)
  802a40:	10c020c5 	stb	r3,131(r2)
  d->_g24 = d->_pg32_e3;
  802a44:	e0bffc17 	ldw	r2,-16(fp)
  802a48:	10c04343 	ldbu	r3,269(r2)
  802a4c:	e0bffc17 	ldw	r2,-16(fp)
  802a50:	10c02345 	stb	r3,141(r2)
  d->_g18 = d->_pg21_e2;
  802a54:	e0bffc17 	ldw	r2,-16(fp)
  802a58:	10c04383 	ldbu	r3,270(r2)
  802a5c:	e0bffc17 	ldw	r2,-16(fp)
  802a60:	10c02205 	stb	r3,136(r2)
  d->_g21_e2 = !(d->_g24 || d->_g18);
  802a64:	e0bffc17 	ldw	r2,-16(fp)
  802a68:	10802343 	ldbu	r2,141(r2)
  802a6c:	10803fcc 	andi	r2,r2,255
  802a70:	1080201c 	xori	r2,r2,128
  802a74:	10bfe004 	addi	r2,r2,-128
  802a78:	1000081e 	bne	r2,zero,802a9c <logic+0x17e4>
  802a7c:	e0bffc17 	ldw	r2,-16(fp)
  802a80:	10802203 	ldbu	r2,136(r2)
  802a84:	10803fcc 	andi	r2,r2,255
  802a88:	1080201c 	xori	r2,r2,128
  802a8c:	10bfe004 	addi	r2,r2,-128
  802a90:	1000021e 	bne	r2,zero,802a9c <logic+0x17e4>
  802a94:	00800044 	movi	r2,1
  802a98:	00000106 	br	802aa0 <logic+0x17e8>
  802a9c:	0005883a 	mov	r2,zero
  802aa0:	1007883a 	mov	r3,r2
  802aa4:	e0bffc17 	ldw	r2,-16(fp)
  802aa8:	10c03d85 	stb	r3,246(r2)
  d->_g24 = d->_g18 || d->_g24;
  802aac:	e0bffc17 	ldw	r2,-16(fp)
  802ab0:	10802203 	ldbu	r2,136(r2)
  802ab4:	10803fcc 	andi	r2,r2,255
  802ab8:	1080201c 	xori	r2,r2,128
  802abc:	10bfe004 	addi	r2,r2,-128
  802ac0:	1000061e 	bne	r2,zero,802adc <logic+0x1824>
  802ac4:	e0bffc17 	ldw	r2,-16(fp)
  802ac8:	10802343 	ldbu	r2,141(r2)
  802acc:	10803fcc 	andi	r2,r2,255
  802ad0:	1080201c 	xori	r2,r2,128
  802ad4:	10bfe004 	addi	r2,r2,-128
  802ad8:	10000226 	beq	r2,zero,802ae4 <logic+0x182c>
  802adc:	00800044 	movi	r2,1
  802ae0:	00000106 	br	802ae8 <logic+0x1830>
  802ae4:	0005883a 	mov	r2,zero
  802ae8:	1007883a 	mov	r3,r2
  802aec:	e0bffc17 	ldw	r2,-16(fp)
  802af0:	10c02345 	stb	r3,141(r2)
  d->_cg19 = d->LRI_Clock < d->LRI;
  802af4:	e0bffc17 	ldw	r2,-16(fp)
  802af8:	14000a17 	ldw	r16,40(r2)
  802afc:	14400b17 	ldw	r17,44(r2)
  802b00:	e0bffc17 	ldw	r2,-16(fp)
  802b04:	10800417 	ldw	r2,16(r2)
  802b08:	1009883a 	mov	r4,r2
  802b0c:	08069c40 	call	8069c4 <__floatsidf>
  802b10:	1009883a 	mov	r4,r2
  802b14:	180b883a 	mov	r5,r3
  802b18:	04800044 	movi	r18,1
  802b1c:	200d883a 	mov	r6,r4
  802b20:	280f883a 	mov	r7,r5
  802b24:	8009883a 	mov	r4,r16
  802b28:	880b883a 	mov	r5,r17
  802b2c:	0805fd40 	call	805fd4 <__ledf2>
  802b30:	10000116 	blt	r2,zero,802b38 <logic+0x1880>
  802b34:	0025883a 	mov	r18,zero
  802b38:	9007883a 	mov	r3,r18
  802b3c:	e0bffc17 	ldw	r2,-16(fp)
  802b40:	10c03405 	stb	r3,208(r2)
  d->_g18 = d->_g24 && d->_cg19;
  802b44:	e0bffc17 	ldw	r2,-16(fp)
  802b48:	10802343 	ldbu	r2,141(r2)
  802b4c:	10803fcc 	andi	r2,r2,255
  802b50:	1080201c 	xori	r2,r2,128
  802b54:	10bfe004 	addi	r2,r2,-128
  802b58:	10000826 	beq	r2,zero,802b7c <logic+0x18c4>
  802b5c:	e0bffc17 	ldw	r2,-16(fp)
  802b60:	10803403 	ldbu	r2,208(r2)
  802b64:	10803fcc 	andi	r2,r2,255
  802b68:	1080201c 	xori	r2,r2,128
  802b6c:	10bfe004 	addi	r2,r2,-128
  802b70:	10000226 	beq	r2,zero,802b7c <logic+0x18c4>
  802b74:	00800044 	movi	r2,1
  802b78:	00000106 	br	802b80 <logic+0x18c8>
  802b7c:	0005883a 	mov	r2,zero
  802b80:	1007883a 	mov	r3,r2
  802b84:	e0bffc17 	ldw	r2,-16(fp)
  802b88:	10c02205 	stb	r3,136(r2)
  if (d->_g18) {
  802b8c:	e0bffc17 	ldw	r2,-16(fp)
  802b90:	10802203 	ldbu	r2,136(r2)
  802b94:	10803fcc 	andi	r2,r2,255
  802b98:	1080201c 	xori	r2,r2,128
  802b9c:	10bfe004 	addi	r2,r2,-128
  802ba0:	10003426 	beq	r2,zero,802c74 <logic+0x19bc>
    d->sleepT = (d->sleepT < (d->LRI - d->LRI_Clock)) ? d->sleepT : (d->LRI - d->LRI_Clock);
  802ba4:	e0bffc17 	ldw	r2,-16(fp)
  802ba8:	14001b17 	ldw	r16,108(r2)
  802bac:	14401c17 	ldw	r17,112(r2)
  802bb0:	e0bffc17 	ldw	r2,-16(fp)
  802bb4:	10800417 	ldw	r2,16(r2)
  802bb8:	1009883a 	mov	r4,r2
  802bbc:	08069c40 	call	8069c4 <__floatsidf>
  802bc0:	1011883a 	mov	r8,r2
  802bc4:	1813883a 	mov	r9,r3
  802bc8:	e13ffc17 	ldw	r4,-16(fp)
  802bcc:	20800a17 	ldw	r2,40(r4)
  802bd0:	20c00b17 	ldw	r3,44(r4)
  802bd4:	100d883a 	mov	r6,r2
  802bd8:	180f883a 	mov	r7,r3
  802bdc:	4009883a 	mov	r4,r8
  802be0:	480b883a 	mov	r5,r9
  802be4:	08060c80 	call	8060c8 <__subdf3>
  802be8:	1009883a 	mov	r4,r2
  802bec:	180b883a 	mov	r5,r3
  802bf0:	2005883a 	mov	r2,r4
  802bf4:	2807883a 	mov	r3,r5
  802bf8:	100d883a 	mov	r6,r2
  802bfc:	180f883a 	mov	r7,r3
  802c00:	8009883a 	mov	r4,r16
  802c04:	880b883a 	mov	r5,r17
  802c08:	0805fd40 	call	805fd4 <__ledf2>
  802c0c:	1000040e 	bge	r2,zero,802c20 <logic+0x1968>
  802c10:	e13ffc17 	ldw	r4,-16(fp)
  802c14:	20801b17 	ldw	r2,108(r4)
  802c18:	20c01c17 	ldw	r3,112(r4)
  802c1c:	00001206 	br	802c68 <logic+0x19b0>
  802c20:	e0bffc17 	ldw	r2,-16(fp)
  802c24:	10800417 	ldw	r2,16(r2)
  802c28:	1009883a 	mov	r4,r2
  802c2c:	08069c40 	call	8069c4 <__floatsidf>
  802c30:	1011883a 	mov	r8,r2
  802c34:	1813883a 	mov	r9,r3
  802c38:	e13ffc17 	ldw	r4,-16(fp)
  802c3c:	20800a17 	ldw	r2,40(r4)
  802c40:	20c00b17 	ldw	r3,44(r4)
  802c44:	100d883a 	mov	r6,r2
  802c48:	180f883a 	mov	r7,r3
  802c4c:	4009883a 	mov	r4,r8
  802c50:	480b883a 	mov	r5,r9
  802c54:	08060c80 	call	8060c8 <__subdf3>
  802c58:	1009883a 	mov	r4,r2
  802c5c:	180b883a 	mov	r5,r3
  802c60:	2005883a 	mov	r2,r4
  802c64:	2807883a 	mov	r3,r5
  802c68:	e13ffc17 	ldw	r4,-16(fp)
  802c6c:	20801b15 	stw	r2,108(r4)
  802c70:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg20 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802c74:	e0bffc17 	ldw	r2,-16(fp)
  802c78:	10801ec3 	ldbu	r2,123(r2)
  802c7c:	10803fcc 	andi	r2,r2,255
  802c80:	1080201c 	xori	r2,r2,128
  802c84:	10bfe004 	addi	r2,r2,-128
  802c88:	10000c1e 	bne	r2,zero,802cbc <logic+0x1a04>
  802c8c:	e0bffc17 	ldw	r2,-16(fp)
  802c90:	10801f03 	ldbu	r2,124(r2)
  802c94:	10803fcc 	andi	r2,r2,255
  802c98:	1080201c 	xori	r2,r2,128
  802c9c:	10bfe004 	addi	r2,r2,-128
  802ca0:	1000061e 	bne	r2,zero,802cbc <logic+0x1a04>
  802ca4:	e0bffc17 	ldw	r2,-16(fp)
  802ca8:	10801f43 	ldbu	r2,125(r2)
  802cac:	10803fcc 	andi	r2,r2,255
  802cb0:	1080201c 	xori	r2,r2,128
  802cb4:	10bfe004 	addi	r2,r2,-128
  802cb8:	10000226 	beq	r2,zero,802cc4 <logic+0x1a0c>
  802cbc:	00800044 	movi	r2,1
  802cc0:	00000106 	br	802cc8 <logic+0x1a10>
  802cc4:	0005883a 	mov	r2,zero
  802cc8:	1007883a 	mov	r3,r2
  802ccc:	e0bffc17 	ldw	r2,-16(fp)
  802cd0:	10c033c5 	stb	r3,207(r2)
  d->_g19 = d->_g24 && !d->_cg19;
  802cd4:	e0bffc17 	ldw	r2,-16(fp)
  802cd8:	10802343 	ldbu	r2,141(r2)
  802cdc:	10803fcc 	andi	r2,r2,255
  802ce0:	1080201c 	xori	r2,r2,128
  802ce4:	10bfe004 	addi	r2,r2,-128
  802ce8:	10000826 	beq	r2,zero,802d0c <logic+0x1a54>
  802cec:	e0bffc17 	ldw	r2,-16(fp)
  802cf0:	10803403 	ldbu	r2,208(r2)
  802cf4:	10803fcc 	andi	r2,r2,255
  802cf8:	1080201c 	xori	r2,r2,128
  802cfc:	10bfe004 	addi	r2,r2,-128
  802d00:	1000021e 	bne	r2,zero,802d0c <logic+0x1a54>
  802d04:	00800044 	movi	r2,1
  802d08:	00000106 	br	802d10 <logic+0x1a58>
  802d0c:	0005883a 	mov	r2,zero
  802d10:	1007883a 	mov	r3,r2
  802d14:	e0bffc17 	ldw	r2,-16(fp)
  802d18:	10c02245 	stb	r3,137(r2)
  d->_cg22 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802d1c:	e0bffc17 	ldw	r2,-16(fp)
  802d20:	10801ec3 	ldbu	r2,123(r2)
  802d24:	10803fcc 	andi	r2,r2,255
  802d28:	1080201c 	xori	r2,r2,128
  802d2c:	10bfe004 	addi	r2,r2,-128
  802d30:	10000c1e 	bne	r2,zero,802d64 <logic+0x1aac>
  802d34:	e0bffc17 	ldw	r2,-16(fp)
  802d38:	10801f03 	ldbu	r2,124(r2)
  802d3c:	10803fcc 	andi	r2,r2,255
  802d40:	1080201c 	xori	r2,r2,128
  802d44:	10bfe004 	addi	r2,r2,-128
  802d48:	1000061e 	bne	r2,zero,802d64 <logic+0x1aac>
  802d4c:	e0bffc17 	ldw	r2,-16(fp)
  802d50:	10801f43 	ldbu	r2,125(r2)
  802d54:	10803fcc 	andi	r2,r2,255
  802d58:	1080201c 	xori	r2,r2,128
  802d5c:	10bfe004 	addi	r2,r2,-128
  802d60:	10000226 	beq	r2,zero,802d6c <logic+0x1ab4>
  802d64:	00800044 	movi	r2,1
  802d68:	00000106 	br	802d70 <logic+0x1ab8>
  802d6c:	0005883a 	mov	r2,zero
  802d70:	1007883a 	mov	r3,r2
  802d74:	e0bffc17 	ldw	r2,-16(fp)
  802d78:	10c03445 	stb	r3,209(r2)
  d->_g21 = d->_g18 && d->_cg20 || d->_g19 && d->_cg22;
  802d7c:	e0bffc17 	ldw	r2,-16(fp)
  802d80:	10802203 	ldbu	r2,136(r2)
  802d84:	10803fcc 	andi	r2,r2,255
  802d88:	1080201c 	xori	r2,r2,128
  802d8c:	10bfe004 	addi	r2,r2,-128
  802d90:	10000626 	beq	r2,zero,802dac <logic+0x1af4>
  802d94:	e0bffc17 	ldw	r2,-16(fp)
  802d98:	108033c3 	ldbu	r2,207(r2)
  802d9c:	10803fcc 	andi	r2,r2,255
  802da0:	1080201c 	xori	r2,r2,128
  802da4:	10bfe004 	addi	r2,r2,-128
  802da8:	10000c1e 	bne	r2,zero,802ddc <logic+0x1b24>
  802dac:	e0bffc17 	ldw	r2,-16(fp)
  802db0:	10802243 	ldbu	r2,137(r2)
  802db4:	10803fcc 	andi	r2,r2,255
  802db8:	1080201c 	xori	r2,r2,128
  802dbc:	10bfe004 	addi	r2,r2,-128
  802dc0:	10000826 	beq	r2,zero,802de4 <logic+0x1b2c>
  802dc4:	e0bffc17 	ldw	r2,-16(fp)
  802dc8:	10803443 	ldbu	r2,209(r2)
  802dcc:	10803fcc 	andi	r2,r2,255
  802dd0:	1080201c 	xori	r2,r2,128
  802dd4:	10bfe004 	addi	r2,r2,-128
  802dd8:	10000226 	beq	r2,zero,802de4 <logic+0x1b2c>
  802ddc:	00800044 	movi	r2,1
  802de0:	00000106 	br	802de8 <logic+0x1b30>
  802de4:	0005883a 	mov	r2,zero
  802de8:	1007883a 	mov	r3,r2
  802dec:	e0bffc17 	ldw	r2,-16(fp)
  802df0:	10c022c5 	stb	r3,139(r2)
  d->_g35 = d->_pg5;
  802df4:	e0bffc17 	ldw	r2,-16(fp)
  802df8:	10c043c3 	ldbu	r3,271(r2)
  802dfc:	e0bffc17 	ldw	r2,-16(fp)
  802e00:	10c02545 	stb	r3,149(r2)
  d->_g29 = d->_pg93;
  802e04:	e0bffc17 	ldw	r2,-16(fp)
  802e08:	10c04403 	ldbu	r3,272(r2)
  802e0c:	e0bffc17 	ldw	r2,-16(fp)
  802e10:	10c02405 	stb	r3,144(r2)
  d->_g32_e3 = !(d->_g35 || d->_g29);
  802e14:	e0bffc17 	ldw	r2,-16(fp)
  802e18:	10802543 	ldbu	r2,149(r2)
  802e1c:	10803fcc 	andi	r2,r2,255
  802e20:	1080201c 	xori	r2,r2,128
  802e24:	10bfe004 	addi	r2,r2,-128
  802e28:	1000081e 	bne	r2,zero,802e4c <logic+0x1b94>
  802e2c:	e0bffc17 	ldw	r2,-16(fp)
  802e30:	10802403 	ldbu	r2,144(r2)
  802e34:	10803fcc 	andi	r2,r2,255
  802e38:	1080201c 	xori	r2,r2,128
  802e3c:	10bfe004 	addi	r2,r2,-128
  802e40:	1000021e 	bne	r2,zero,802e4c <logic+0x1b94>
  802e44:	00800044 	movi	r2,1
  802e48:	00000106 	br	802e50 <logic+0x1b98>
  802e4c:	0005883a 	mov	r2,zero
  802e50:	1007883a 	mov	r3,r2
  802e54:	e0bffc17 	ldw	r2,-16(fp)
  802e58:	10c03dc5 	stb	r3,247(r2)
  d->_g35 = d->_g29 || d->_g35;
  802e5c:	e0bffc17 	ldw	r2,-16(fp)
  802e60:	10802403 	ldbu	r2,144(r2)
  802e64:	10803fcc 	andi	r2,r2,255
  802e68:	1080201c 	xori	r2,r2,128
  802e6c:	10bfe004 	addi	r2,r2,-128
  802e70:	1000061e 	bne	r2,zero,802e8c <logic+0x1bd4>
  802e74:	e0bffc17 	ldw	r2,-16(fp)
  802e78:	10802543 	ldbu	r2,149(r2)
  802e7c:	10803fcc 	andi	r2,r2,255
  802e80:	1080201c 	xori	r2,r2,128
  802e84:	10bfe004 	addi	r2,r2,-128
  802e88:	10000226 	beq	r2,zero,802e94 <logic+0x1bdc>
  802e8c:	00800044 	movi	r2,1
  802e90:	00000106 	br	802e98 <logic+0x1be0>
  802e94:	0005883a 	mov	r2,zero
  802e98:	1007883a 	mov	r3,r2
  802e9c:	e0bffc17 	ldw	r2,-16(fp)
  802ea0:	10c02545 	stb	r3,149(r2)
  d->_cg30 = d->URI_Clock < d->URI;
  802ea4:	e0bffc17 	ldw	r2,-16(fp)
  802ea8:	14000c17 	ldw	r16,48(r2)
  802eac:	14400d17 	ldw	r17,52(r2)
  802eb0:	e0bffc17 	ldw	r2,-16(fp)
  802eb4:	10800517 	ldw	r2,20(r2)
  802eb8:	1009883a 	mov	r4,r2
  802ebc:	08069c40 	call	8069c4 <__floatsidf>
  802ec0:	1009883a 	mov	r4,r2
  802ec4:	180b883a 	mov	r5,r3
  802ec8:	04800044 	movi	r18,1
  802ecc:	200d883a 	mov	r6,r4
  802ed0:	280f883a 	mov	r7,r5
  802ed4:	8009883a 	mov	r4,r16
  802ed8:	880b883a 	mov	r5,r17
  802edc:	0805fd40 	call	805fd4 <__ledf2>
  802ee0:	10000116 	blt	r2,zero,802ee8 <logic+0x1c30>
  802ee4:	0025883a 	mov	r18,zero
  802ee8:	9007883a 	mov	r3,r18
  802eec:	e0bffc17 	ldw	r2,-16(fp)
  802ef0:	10c03585 	stb	r3,214(r2)
  d->_g29 = d->_g35 && d->_cg30;
  802ef4:	e0bffc17 	ldw	r2,-16(fp)
  802ef8:	10802543 	ldbu	r2,149(r2)
  802efc:	10803fcc 	andi	r2,r2,255
  802f00:	1080201c 	xori	r2,r2,128
  802f04:	10bfe004 	addi	r2,r2,-128
  802f08:	10000826 	beq	r2,zero,802f2c <logic+0x1c74>
  802f0c:	e0bffc17 	ldw	r2,-16(fp)
  802f10:	10803583 	ldbu	r2,214(r2)
  802f14:	10803fcc 	andi	r2,r2,255
  802f18:	1080201c 	xori	r2,r2,128
  802f1c:	10bfe004 	addi	r2,r2,-128
  802f20:	10000226 	beq	r2,zero,802f2c <logic+0x1c74>
  802f24:	00800044 	movi	r2,1
  802f28:	00000106 	br	802f30 <logic+0x1c78>
  802f2c:	0005883a 	mov	r2,zero
  802f30:	1007883a 	mov	r3,r2
  802f34:	e0bffc17 	ldw	r2,-16(fp)
  802f38:	10c02405 	stb	r3,144(r2)
  if (d->_g29) {
  802f3c:	e0bffc17 	ldw	r2,-16(fp)
  802f40:	10802403 	ldbu	r2,144(r2)
  802f44:	10803fcc 	andi	r2,r2,255
  802f48:	1080201c 	xori	r2,r2,128
  802f4c:	10bfe004 	addi	r2,r2,-128
  802f50:	10003426 	beq	r2,zero,803024 <logic+0x1d6c>
    d->sleepT = (d->sleepT < (d->URI - d->URI_Clock)) ? d->sleepT : (d->URI - d->URI_Clock);
  802f54:	e0bffc17 	ldw	r2,-16(fp)
  802f58:	14001b17 	ldw	r16,108(r2)
  802f5c:	14401c17 	ldw	r17,112(r2)
  802f60:	e0bffc17 	ldw	r2,-16(fp)
  802f64:	10800517 	ldw	r2,20(r2)
  802f68:	1009883a 	mov	r4,r2
  802f6c:	08069c40 	call	8069c4 <__floatsidf>
  802f70:	1011883a 	mov	r8,r2
  802f74:	1813883a 	mov	r9,r3
  802f78:	e13ffc17 	ldw	r4,-16(fp)
  802f7c:	20800c17 	ldw	r2,48(r4)
  802f80:	20c00d17 	ldw	r3,52(r4)
  802f84:	100d883a 	mov	r6,r2
  802f88:	180f883a 	mov	r7,r3
  802f8c:	4009883a 	mov	r4,r8
  802f90:	480b883a 	mov	r5,r9
  802f94:	08060c80 	call	8060c8 <__subdf3>
  802f98:	1009883a 	mov	r4,r2
  802f9c:	180b883a 	mov	r5,r3
  802fa0:	2005883a 	mov	r2,r4
  802fa4:	2807883a 	mov	r3,r5
  802fa8:	100d883a 	mov	r6,r2
  802fac:	180f883a 	mov	r7,r3
  802fb0:	8009883a 	mov	r4,r16
  802fb4:	880b883a 	mov	r5,r17
  802fb8:	0805fd40 	call	805fd4 <__ledf2>
  802fbc:	1000040e 	bge	r2,zero,802fd0 <logic+0x1d18>
  802fc0:	e13ffc17 	ldw	r4,-16(fp)
  802fc4:	20801b17 	ldw	r2,108(r4)
  802fc8:	20c01c17 	ldw	r3,112(r4)
  802fcc:	00001206 	br	803018 <logic+0x1d60>
  802fd0:	e0bffc17 	ldw	r2,-16(fp)
  802fd4:	10800517 	ldw	r2,20(r2)
  802fd8:	1009883a 	mov	r4,r2
  802fdc:	08069c40 	call	8069c4 <__floatsidf>
  802fe0:	1011883a 	mov	r8,r2
  802fe4:	1813883a 	mov	r9,r3
  802fe8:	e13ffc17 	ldw	r4,-16(fp)
  802fec:	20800c17 	ldw	r2,48(r4)
  802ff0:	20c00d17 	ldw	r3,52(r4)
  802ff4:	100d883a 	mov	r6,r2
  802ff8:	180f883a 	mov	r7,r3
  802ffc:	4009883a 	mov	r4,r8
  803000:	480b883a 	mov	r5,r9
  803004:	08060c80 	call	8060c8 <__subdf3>
  803008:	1009883a 	mov	r4,r2
  80300c:	180b883a 	mov	r5,r3
  803010:	2005883a 	mov	r2,r4
  803014:	2807883a 	mov	r3,r5
  803018:	e13ffc17 	ldw	r4,-16(fp)
  80301c:	20801b15 	stw	r2,108(r4)
  803020:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg31 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803024:	e0bffc17 	ldw	r2,-16(fp)
  803028:	10801ec3 	ldbu	r2,123(r2)
  80302c:	10803fcc 	andi	r2,r2,255
  803030:	1080201c 	xori	r2,r2,128
  803034:	10bfe004 	addi	r2,r2,-128
  803038:	10000c1e 	bne	r2,zero,80306c <logic+0x1db4>
  80303c:	e0bffc17 	ldw	r2,-16(fp)
  803040:	10801f03 	ldbu	r2,124(r2)
  803044:	10803fcc 	andi	r2,r2,255
  803048:	1080201c 	xori	r2,r2,128
  80304c:	10bfe004 	addi	r2,r2,-128
  803050:	1000061e 	bne	r2,zero,80306c <logic+0x1db4>
  803054:	e0bffc17 	ldw	r2,-16(fp)
  803058:	10801f43 	ldbu	r2,125(r2)
  80305c:	10803fcc 	andi	r2,r2,255
  803060:	1080201c 	xori	r2,r2,128
  803064:	10bfe004 	addi	r2,r2,-128
  803068:	10000226 	beq	r2,zero,803074 <logic+0x1dbc>
  80306c:	00800044 	movi	r2,1
  803070:	00000106 	br	803078 <logic+0x1dc0>
  803074:	0005883a 	mov	r2,zero
  803078:	1007883a 	mov	r3,r2
  80307c:	e0bffc17 	ldw	r2,-16(fp)
  803080:	10c03545 	stb	r3,213(r2)
  d->_g30 = d->_g35 && !d->_cg30;
  803084:	e0bffc17 	ldw	r2,-16(fp)
  803088:	10802543 	ldbu	r2,149(r2)
  80308c:	10803fcc 	andi	r2,r2,255
  803090:	1080201c 	xori	r2,r2,128
  803094:	10bfe004 	addi	r2,r2,-128
  803098:	10000826 	beq	r2,zero,8030bc <logic+0x1e04>
  80309c:	e0bffc17 	ldw	r2,-16(fp)
  8030a0:	10803583 	ldbu	r2,214(r2)
  8030a4:	10803fcc 	andi	r2,r2,255
  8030a8:	1080201c 	xori	r2,r2,128
  8030ac:	10bfe004 	addi	r2,r2,-128
  8030b0:	1000021e 	bne	r2,zero,8030bc <logic+0x1e04>
  8030b4:	00800044 	movi	r2,1
  8030b8:	00000106 	br	8030c0 <logic+0x1e08>
  8030bc:	0005883a 	mov	r2,zero
  8030c0:	1007883a 	mov	r3,r2
  8030c4:	e0bffc17 	ldw	r2,-16(fp)
  8030c8:	10c02445 	stb	r3,145(r2)
  d->_cg33 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8030cc:	e0bffc17 	ldw	r2,-16(fp)
  8030d0:	10801ec3 	ldbu	r2,123(r2)
  8030d4:	10803fcc 	andi	r2,r2,255
  8030d8:	1080201c 	xori	r2,r2,128
  8030dc:	10bfe004 	addi	r2,r2,-128
  8030e0:	10000c1e 	bne	r2,zero,803114 <logic+0x1e5c>
  8030e4:	e0bffc17 	ldw	r2,-16(fp)
  8030e8:	10801f03 	ldbu	r2,124(r2)
  8030ec:	10803fcc 	andi	r2,r2,255
  8030f0:	1080201c 	xori	r2,r2,128
  8030f4:	10bfe004 	addi	r2,r2,-128
  8030f8:	1000061e 	bne	r2,zero,803114 <logic+0x1e5c>
  8030fc:	e0bffc17 	ldw	r2,-16(fp)
  803100:	10801f43 	ldbu	r2,125(r2)
  803104:	10803fcc 	andi	r2,r2,255
  803108:	1080201c 	xori	r2,r2,128
  80310c:	10bfe004 	addi	r2,r2,-128
  803110:	10000226 	beq	r2,zero,80311c <logic+0x1e64>
  803114:	00800044 	movi	r2,1
  803118:	00000106 	br	803120 <logic+0x1e68>
  80311c:	0005883a 	mov	r2,zero
  803120:	1007883a 	mov	r3,r2
  803124:	e0bffc17 	ldw	r2,-16(fp)
  803128:	10c035c5 	stb	r3,215(r2)
  d->_g32 = d->_g29 && d->_cg31 || d->_g30 && d->_cg33;
  80312c:	e0bffc17 	ldw	r2,-16(fp)
  803130:	10802403 	ldbu	r2,144(r2)
  803134:	10803fcc 	andi	r2,r2,255
  803138:	1080201c 	xori	r2,r2,128
  80313c:	10bfe004 	addi	r2,r2,-128
  803140:	10000626 	beq	r2,zero,80315c <logic+0x1ea4>
  803144:	e0bffc17 	ldw	r2,-16(fp)
  803148:	10803543 	ldbu	r2,213(r2)
  80314c:	10803fcc 	andi	r2,r2,255
  803150:	1080201c 	xori	r2,r2,128
  803154:	10bfe004 	addi	r2,r2,-128
  803158:	10000c1e 	bne	r2,zero,80318c <logic+0x1ed4>
  80315c:	e0bffc17 	ldw	r2,-16(fp)
  803160:	10802443 	ldbu	r2,145(r2)
  803164:	10803fcc 	andi	r2,r2,255
  803168:	1080201c 	xori	r2,r2,128
  80316c:	10bfe004 	addi	r2,r2,-128
  803170:	10000826 	beq	r2,zero,803194 <logic+0x1edc>
  803174:	e0bffc17 	ldw	r2,-16(fp)
  803178:	108035c3 	ldbu	r2,215(r2)
  80317c:	10803fcc 	andi	r2,r2,255
  803180:	1080201c 	xori	r2,r2,128
  803184:	10bfe004 	addi	r2,r2,-128
  803188:	10000226 	beq	r2,zero,803194 <logic+0x1edc>
  80318c:	00800044 	movi	r2,1
  803190:	00000106 	br	803198 <logic+0x1ee0>
  803194:	0005883a 	mov	r2,zero
  803198:	1007883a 	mov	r3,r2
  80319c:	e0bffc17 	ldw	r2,-16(fp)
  8031a0:	10c024c5 	stb	r3,147(r2)
  d->_g46 = d->_pg16;
  8031a4:	e0bffc17 	ldw	r2,-16(fp)
  8031a8:	10c04443 	ldbu	r3,273(r2)
  8031ac:	e0bffc17 	ldw	r2,-16(fp)
  8031b0:	10c02745 	stb	r3,157(r2)
  d->_g40 = d->_pg11;
  8031b4:	e0bffc17 	ldw	r2,-16(fp)
  8031b8:	10c04483 	ldbu	r3,274(r2)
  8031bc:	e0bffc17 	ldw	r2,-16(fp)
  8031c0:	10c02605 	stb	r3,152(r2)
  d->_g43_e4 = !(d->_g46 || d->_g40);
  8031c4:	e0bffc17 	ldw	r2,-16(fp)
  8031c8:	10802743 	ldbu	r2,157(r2)
  8031cc:	10803fcc 	andi	r2,r2,255
  8031d0:	1080201c 	xori	r2,r2,128
  8031d4:	10bfe004 	addi	r2,r2,-128
  8031d8:	1000081e 	bne	r2,zero,8031fc <logic+0x1f44>
  8031dc:	e0bffc17 	ldw	r2,-16(fp)
  8031e0:	10802603 	ldbu	r2,152(r2)
  8031e4:	10803fcc 	andi	r2,r2,255
  8031e8:	1080201c 	xori	r2,r2,128
  8031ec:	10bfe004 	addi	r2,r2,-128
  8031f0:	1000021e 	bne	r2,zero,8031fc <logic+0x1f44>
  8031f4:	00800044 	movi	r2,1
  8031f8:	00000106 	br	803200 <logic+0x1f48>
  8031fc:	0005883a 	mov	r2,zero
  803200:	1007883a 	mov	r3,r2
  803204:	e0bffc17 	ldw	r2,-16(fp)
  803208:	10c03e05 	stb	r3,248(r2)
  d->_g40 = d->_g40 || d->_g46;
  80320c:	e0bffc17 	ldw	r2,-16(fp)
  803210:	10802603 	ldbu	r2,152(r2)
  803214:	10803fcc 	andi	r2,r2,255
  803218:	1080201c 	xori	r2,r2,128
  80321c:	10bfe004 	addi	r2,r2,-128
  803220:	1000061e 	bne	r2,zero,80323c <logic+0x1f84>
  803224:	e0bffc17 	ldw	r2,-16(fp)
  803228:	10802743 	ldbu	r2,157(r2)
  80322c:	10803fcc 	andi	r2,r2,255
  803230:	1080201c 	xori	r2,r2,128
  803234:	10bfe004 	addi	r2,r2,-128
  803238:	10000226 	beq	r2,zero,803244 <logic+0x1f8c>
  80323c:	00800044 	movi	r2,1
  803240:	00000106 	br	803248 <logic+0x1f90>
  803244:	0005883a 	mov	r2,zero
  803248:	1007883a 	mov	r3,r2
  80324c:	e0bffc17 	ldw	r2,-16(fp)
  803250:	10c02605 	stb	r3,152(r2)
  d->_cg41 = d->AVI_Clock < d->AVI;
  803254:	e0bffc17 	ldw	r2,-16(fp)
  803258:	14001017 	ldw	r16,64(r2)
  80325c:	14401117 	ldw	r17,68(r2)
  803260:	e0bffc17 	ldw	r2,-16(fp)
  803264:	10800017 	ldw	r2,0(r2)
  803268:	1009883a 	mov	r4,r2
  80326c:	08069c40 	call	8069c4 <__floatsidf>
  803270:	1009883a 	mov	r4,r2
  803274:	180b883a 	mov	r5,r3
  803278:	04800044 	movi	r18,1
  80327c:	200d883a 	mov	r6,r4
  803280:	280f883a 	mov	r7,r5
  803284:	8009883a 	mov	r4,r16
  803288:	880b883a 	mov	r5,r17
  80328c:	0805fd40 	call	805fd4 <__ledf2>
  803290:	10000116 	blt	r2,zero,803298 <logic+0x1fe0>
  803294:	0025883a 	mov	r18,zero
  803298:	9007883a 	mov	r3,r18
  80329c:	e0bffc17 	ldw	r2,-16(fp)
  8032a0:	10c03705 	stb	r3,220(r2)
  d->_g46 = d->_g40 && d->_cg41;
  8032a4:	e0bffc17 	ldw	r2,-16(fp)
  8032a8:	10802603 	ldbu	r2,152(r2)
  8032ac:	10803fcc 	andi	r2,r2,255
  8032b0:	1080201c 	xori	r2,r2,128
  8032b4:	10bfe004 	addi	r2,r2,-128
  8032b8:	10000826 	beq	r2,zero,8032dc <logic+0x2024>
  8032bc:	e0bffc17 	ldw	r2,-16(fp)
  8032c0:	10803703 	ldbu	r2,220(r2)
  8032c4:	10803fcc 	andi	r2,r2,255
  8032c8:	1080201c 	xori	r2,r2,128
  8032cc:	10bfe004 	addi	r2,r2,-128
  8032d0:	10000226 	beq	r2,zero,8032dc <logic+0x2024>
  8032d4:	00800044 	movi	r2,1
  8032d8:	00000106 	br	8032e0 <logic+0x2028>
  8032dc:	0005883a 	mov	r2,zero
  8032e0:	1007883a 	mov	r3,r2
  8032e4:	e0bffc17 	ldw	r2,-16(fp)
  8032e8:	10c02745 	stb	r3,157(r2)
  if (d->_g46) {
  8032ec:	e0bffc17 	ldw	r2,-16(fp)
  8032f0:	10802743 	ldbu	r2,157(r2)
  8032f4:	10803fcc 	andi	r2,r2,255
  8032f8:	1080201c 	xori	r2,r2,128
  8032fc:	10bfe004 	addi	r2,r2,-128
  803300:	10003426 	beq	r2,zero,8033d4 <logic+0x211c>
    d->sleepT = (d->sleepT < (d->AVI - d->AVI_Clock)) ? d->sleepT : (d->AVI - d->AVI_Clock);
  803304:	e0bffc17 	ldw	r2,-16(fp)
  803308:	14001b17 	ldw	r16,108(r2)
  80330c:	14401c17 	ldw	r17,112(r2)
  803310:	e0bffc17 	ldw	r2,-16(fp)
  803314:	10800017 	ldw	r2,0(r2)
  803318:	1009883a 	mov	r4,r2
  80331c:	08069c40 	call	8069c4 <__floatsidf>
  803320:	1011883a 	mov	r8,r2
  803324:	1813883a 	mov	r9,r3
  803328:	e13ffc17 	ldw	r4,-16(fp)
  80332c:	20801017 	ldw	r2,64(r4)
  803330:	20c01117 	ldw	r3,68(r4)
  803334:	100d883a 	mov	r6,r2
  803338:	180f883a 	mov	r7,r3
  80333c:	4009883a 	mov	r4,r8
  803340:	480b883a 	mov	r5,r9
  803344:	08060c80 	call	8060c8 <__subdf3>
  803348:	1009883a 	mov	r4,r2
  80334c:	180b883a 	mov	r5,r3
  803350:	2005883a 	mov	r2,r4
  803354:	2807883a 	mov	r3,r5
  803358:	100d883a 	mov	r6,r2
  80335c:	180f883a 	mov	r7,r3
  803360:	8009883a 	mov	r4,r16
  803364:	880b883a 	mov	r5,r17
  803368:	0805fd40 	call	805fd4 <__ledf2>
  80336c:	1000040e 	bge	r2,zero,803380 <logic+0x20c8>
  803370:	e13ffc17 	ldw	r4,-16(fp)
  803374:	20801b17 	ldw	r2,108(r4)
  803378:	20c01c17 	ldw	r3,112(r4)
  80337c:	00001206 	br	8033c8 <logic+0x2110>
  803380:	e0bffc17 	ldw	r2,-16(fp)
  803384:	10800017 	ldw	r2,0(r2)
  803388:	1009883a 	mov	r4,r2
  80338c:	08069c40 	call	8069c4 <__floatsidf>
  803390:	1011883a 	mov	r8,r2
  803394:	1813883a 	mov	r9,r3
  803398:	e13ffc17 	ldw	r4,-16(fp)
  80339c:	20801017 	ldw	r2,64(r4)
  8033a0:	20c01117 	ldw	r3,68(r4)
  8033a4:	100d883a 	mov	r6,r2
  8033a8:	180f883a 	mov	r7,r3
  8033ac:	4009883a 	mov	r4,r8
  8033b0:	480b883a 	mov	r5,r9
  8033b4:	08060c80 	call	8060c8 <__subdf3>
  8033b8:	1009883a 	mov	r4,r2
  8033bc:	180b883a 	mov	r5,r3
  8033c0:	2005883a 	mov	r2,r4
  8033c4:	2807883a 	mov	r3,r5
  8033c8:	e13ffc17 	ldw	r4,-16(fp)
  8033cc:	20801b15 	stw	r2,108(r4)
  8033d0:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg42 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8033d4:	e0bffc17 	ldw	r2,-16(fp)
  8033d8:	10801ec3 	ldbu	r2,123(r2)
  8033dc:	10803fcc 	andi	r2,r2,255
  8033e0:	1080201c 	xori	r2,r2,128
  8033e4:	10bfe004 	addi	r2,r2,-128
  8033e8:	10000c1e 	bne	r2,zero,80341c <logic+0x2164>
  8033ec:	e0bffc17 	ldw	r2,-16(fp)
  8033f0:	10801f03 	ldbu	r2,124(r2)
  8033f4:	10803fcc 	andi	r2,r2,255
  8033f8:	1080201c 	xori	r2,r2,128
  8033fc:	10bfe004 	addi	r2,r2,-128
  803400:	1000061e 	bne	r2,zero,80341c <logic+0x2164>
  803404:	e0bffc17 	ldw	r2,-16(fp)
  803408:	10801f43 	ldbu	r2,125(r2)
  80340c:	10803fcc 	andi	r2,r2,255
  803410:	1080201c 	xori	r2,r2,128
  803414:	10bfe004 	addi	r2,r2,-128
  803418:	10000226 	beq	r2,zero,803424 <logic+0x216c>
  80341c:	00800044 	movi	r2,1
  803420:	00000106 	br	803428 <logic+0x2170>
  803424:	0005883a 	mov	r2,zero
  803428:	1007883a 	mov	r3,r2
  80342c:	e0bffc17 	ldw	r2,-16(fp)
  803430:	10c036c5 	stb	r3,219(r2)
  d->_g41 = d->_g40 && !d->_cg41;
  803434:	e0bffc17 	ldw	r2,-16(fp)
  803438:	10802603 	ldbu	r2,152(r2)
  80343c:	10803fcc 	andi	r2,r2,255
  803440:	1080201c 	xori	r2,r2,128
  803444:	10bfe004 	addi	r2,r2,-128
  803448:	10000826 	beq	r2,zero,80346c <logic+0x21b4>
  80344c:	e0bffc17 	ldw	r2,-16(fp)
  803450:	10803703 	ldbu	r2,220(r2)
  803454:	10803fcc 	andi	r2,r2,255
  803458:	1080201c 	xori	r2,r2,128
  80345c:	10bfe004 	addi	r2,r2,-128
  803460:	1000021e 	bne	r2,zero,80346c <logic+0x21b4>
  803464:	00800044 	movi	r2,1
  803468:	00000106 	br	803470 <logic+0x21b8>
  80346c:	0005883a 	mov	r2,zero
  803470:	1007883a 	mov	r3,r2
  803474:	e0bffc17 	ldw	r2,-16(fp)
  803478:	10c02645 	stb	r3,153(r2)
  d->_cg44 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  80347c:	e0bffc17 	ldw	r2,-16(fp)
  803480:	10801ec3 	ldbu	r2,123(r2)
  803484:	10803fcc 	andi	r2,r2,255
  803488:	1080201c 	xori	r2,r2,128
  80348c:	10bfe004 	addi	r2,r2,-128
  803490:	10000c1e 	bne	r2,zero,8034c4 <logic+0x220c>
  803494:	e0bffc17 	ldw	r2,-16(fp)
  803498:	10801f03 	ldbu	r2,124(r2)
  80349c:	10803fcc 	andi	r2,r2,255
  8034a0:	1080201c 	xori	r2,r2,128
  8034a4:	10bfe004 	addi	r2,r2,-128
  8034a8:	1000061e 	bne	r2,zero,8034c4 <logic+0x220c>
  8034ac:	e0bffc17 	ldw	r2,-16(fp)
  8034b0:	10801f43 	ldbu	r2,125(r2)
  8034b4:	10803fcc 	andi	r2,r2,255
  8034b8:	1080201c 	xori	r2,r2,128
  8034bc:	10bfe004 	addi	r2,r2,-128
  8034c0:	10000226 	beq	r2,zero,8034cc <logic+0x2214>
  8034c4:	00800044 	movi	r2,1
  8034c8:	00000106 	br	8034d0 <logic+0x2218>
  8034cc:	0005883a 	mov	r2,zero
  8034d0:	1007883a 	mov	r3,r2
  8034d4:	e0bffc17 	ldw	r2,-16(fp)
  8034d8:	10c03745 	stb	r3,221(r2)
  d->_g43 = d->_g46 && d->_cg42 || d->_g41 && d->_cg44;
  8034dc:	e0bffc17 	ldw	r2,-16(fp)
  8034e0:	10802743 	ldbu	r2,157(r2)
  8034e4:	10803fcc 	andi	r2,r2,255
  8034e8:	1080201c 	xori	r2,r2,128
  8034ec:	10bfe004 	addi	r2,r2,-128
  8034f0:	10000626 	beq	r2,zero,80350c <logic+0x2254>
  8034f4:	e0bffc17 	ldw	r2,-16(fp)
  8034f8:	108036c3 	ldbu	r2,219(r2)
  8034fc:	10803fcc 	andi	r2,r2,255
  803500:	1080201c 	xori	r2,r2,128
  803504:	10bfe004 	addi	r2,r2,-128
  803508:	10000c1e 	bne	r2,zero,80353c <logic+0x2284>
  80350c:	e0bffc17 	ldw	r2,-16(fp)
  803510:	10802643 	ldbu	r2,153(r2)
  803514:	10803fcc 	andi	r2,r2,255
  803518:	1080201c 	xori	r2,r2,128
  80351c:	10bfe004 	addi	r2,r2,-128
  803520:	10000826 	beq	r2,zero,803544 <logic+0x228c>
  803524:	e0bffc17 	ldw	r2,-16(fp)
  803528:	10803743 	ldbu	r2,221(r2)
  80352c:	10803fcc 	andi	r2,r2,255
  803530:	1080201c 	xori	r2,r2,128
  803534:	10bfe004 	addi	r2,r2,-128
  803538:	10000226 	beq	r2,zero,803544 <logic+0x228c>
  80353c:	00800044 	movi	r2,1
  803540:	00000106 	br	803548 <logic+0x2290>
  803544:	0005883a 	mov	r2,zero
  803548:	1007883a 	mov	r3,r2
  80354c:	e0bffc17 	ldw	r2,-16(fp)
  803550:	10c026c5 	stb	r3,155(r2)
  d->_g50 = !d->_g50;
  803554:	e0bffc17 	ldw	r2,-16(fp)
  803558:	108027c3 	ldbu	r2,159(r2)
  80355c:	10803fcc 	andi	r2,r2,255
  803560:	1080201c 	xori	r2,r2,128
  803564:	10bfe004 	addi	r2,r2,-128
  803568:	1005003a 	cmpeq	r2,r2,zero
  80356c:	1007883a 	mov	r3,r2
  803570:	e0bffc17 	ldw	r2,-16(fp)
  803574:	10c027c5 	stb	r3,159(r2)
  d->_g51 = d->_g51 || d->_g54 || d->_g56;
  803578:	e0bffc17 	ldw	r2,-16(fp)
  80357c:	10802803 	ldbu	r2,160(r2)
  803580:	10803fcc 	andi	r2,r2,255
  803584:	1080201c 	xori	r2,r2,128
  803588:	10bfe004 	addi	r2,r2,-128
  80358c:	10000c1e 	bne	r2,zero,8035c0 <logic+0x2308>
  803590:	e0bffc17 	ldw	r2,-16(fp)
  803594:	108028c3 	ldbu	r2,163(r2)
  803598:	10803fcc 	andi	r2,r2,255
  80359c:	1080201c 	xori	r2,r2,128
  8035a0:	10bfe004 	addi	r2,r2,-128
  8035a4:	1000061e 	bne	r2,zero,8035c0 <logic+0x2308>
  8035a8:	e0bffc17 	ldw	r2,-16(fp)
  8035ac:	10802943 	ldbu	r2,165(r2)
  8035b0:	10803fcc 	andi	r2,r2,255
  8035b4:	1080201c 	xori	r2,r2,128
  8035b8:	10bfe004 	addi	r2,r2,-128
  8035bc:	10000226 	beq	r2,zero,8035c8 <logic+0x2310>
  8035c0:	00800044 	movi	r2,1
  8035c4:	00000106 	br	8035cc <logic+0x2314>
  8035c8:	0005883a 	mov	r2,zero
  8035cc:	1007883a 	mov	r3,r2
  8035d0:	e0bffc17 	ldw	r2,-16(fp)
  8035d4:	10c02805 	stb	r3,160(r2)
  d->_g56 = (d->_g135 || d->_g10) && (d->_g21_e2 || d->_g21) && (d->_g32_e3 || d->_g32) && (d->_g43_e4 || d->_g43) && (d->_g50 || d->_g51) && (d->_g10 || d->_g21 || d->_g32 || d->_g43 || d->_g51);
  8035d8:	e0bffc17 	ldw	r2,-16(fp)
  8035dc:	10803143 	ldbu	r2,197(r2)
  8035e0:	10803fcc 	andi	r2,r2,255
  8035e4:	1080201c 	xori	r2,r2,128
  8035e8:	10bfe004 	addi	r2,r2,-128
  8035ec:	1000061e 	bne	r2,zero,803608 <logic+0x2350>
  8035f0:	e0bffc17 	ldw	r2,-16(fp)
  8035f4:	108020c3 	ldbu	r2,131(r2)
  8035f8:	10803fcc 	andi	r2,r2,255
  8035fc:	1080201c 	xori	r2,r2,128
  803600:	10bfe004 	addi	r2,r2,-128
  803604:	10005026 	beq	r2,zero,803748 <logic+0x2490>
  803608:	e0bffc17 	ldw	r2,-16(fp)
  80360c:	10803d83 	ldbu	r2,246(r2)
  803610:	10803fcc 	andi	r2,r2,255
  803614:	1080201c 	xori	r2,r2,128
  803618:	10bfe004 	addi	r2,r2,-128
  80361c:	1000061e 	bne	r2,zero,803638 <logic+0x2380>
  803620:	e0bffc17 	ldw	r2,-16(fp)
  803624:	108022c3 	ldbu	r2,139(r2)
  803628:	10803fcc 	andi	r2,r2,255
  80362c:	1080201c 	xori	r2,r2,128
  803630:	10bfe004 	addi	r2,r2,-128
  803634:	10004426 	beq	r2,zero,803748 <logic+0x2490>
  803638:	e0bffc17 	ldw	r2,-16(fp)
  80363c:	10803dc3 	ldbu	r2,247(r2)
  803640:	10803fcc 	andi	r2,r2,255
  803644:	1080201c 	xori	r2,r2,128
  803648:	10bfe004 	addi	r2,r2,-128
  80364c:	1000061e 	bne	r2,zero,803668 <logic+0x23b0>
  803650:	e0bffc17 	ldw	r2,-16(fp)
  803654:	108024c3 	ldbu	r2,147(r2)
  803658:	10803fcc 	andi	r2,r2,255
  80365c:	1080201c 	xori	r2,r2,128
  803660:	10bfe004 	addi	r2,r2,-128
  803664:	10003826 	beq	r2,zero,803748 <logic+0x2490>
  803668:	e0bffc17 	ldw	r2,-16(fp)
  80366c:	10803e03 	ldbu	r2,248(r2)
  803670:	10803fcc 	andi	r2,r2,255
  803674:	1080201c 	xori	r2,r2,128
  803678:	10bfe004 	addi	r2,r2,-128
  80367c:	1000061e 	bne	r2,zero,803698 <logic+0x23e0>
  803680:	e0bffc17 	ldw	r2,-16(fp)
  803684:	108026c3 	ldbu	r2,155(r2)
  803688:	10803fcc 	andi	r2,r2,255
  80368c:	1080201c 	xori	r2,r2,128
  803690:	10bfe004 	addi	r2,r2,-128
  803694:	10002c26 	beq	r2,zero,803748 <logic+0x2490>
  803698:	e0bffc17 	ldw	r2,-16(fp)
  80369c:	108027c3 	ldbu	r2,159(r2)
  8036a0:	10803fcc 	andi	r2,r2,255
  8036a4:	1080201c 	xori	r2,r2,128
  8036a8:	10bfe004 	addi	r2,r2,-128
  8036ac:	1000061e 	bne	r2,zero,8036c8 <logic+0x2410>
  8036b0:	e0bffc17 	ldw	r2,-16(fp)
  8036b4:	10802803 	ldbu	r2,160(r2)
  8036b8:	10803fcc 	andi	r2,r2,255
  8036bc:	1080201c 	xori	r2,r2,128
  8036c0:	10bfe004 	addi	r2,r2,-128
  8036c4:	10002026 	beq	r2,zero,803748 <logic+0x2490>
  8036c8:	e0bffc17 	ldw	r2,-16(fp)
  8036cc:	108020c3 	ldbu	r2,131(r2)
  8036d0:	10803fcc 	andi	r2,r2,255
  8036d4:	1080201c 	xori	r2,r2,128
  8036d8:	10bfe004 	addi	r2,r2,-128
  8036dc:	1000181e 	bne	r2,zero,803740 <logic+0x2488>
  8036e0:	e0bffc17 	ldw	r2,-16(fp)
  8036e4:	108022c3 	ldbu	r2,139(r2)
  8036e8:	10803fcc 	andi	r2,r2,255
  8036ec:	1080201c 	xori	r2,r2,128
  8036f0:	10bfe004 	addi	r2,r2,-128
  8036f4:	1000121e 	bne	r2,zero,803740 <logic+0x2488>
  8036f8:	e0bffc17 	ldw	r2,-16(fp)
  8036fc:	108024c3 	ldbu	r2,147(r2)
  803700:	10803fcc 	andi	r2,r2,255
  803704:	1080201c 	xori	r2,r2,128
  803708:	10bfe004 	addi	r2,r2,-128
  80370c:	10000c1e 	bne	r2,zero,803740 <logic+0x2488>
  803710:	e0bffc17 	ldw	r2,-16(fp)
  803714:	108026c3 	ldbu	r2,155(r2)
  803718:	10803fcc 	andi	r2,r2,255
  80371c:	1080201c 	xori	r2,r2,128
  803720:	10bfe004 	addi	r2,r2,-128
  803724:	1000061e 	bne	r2,zero,803740 <logic+0x2488>
  803728:	e0bffc17 	ldw	r2,-16(fp)
  80372c:	10802803 	ldbu	r2,160(r2)
  803730:	10803fcc 	andi	r2,r2,255
  803734:	1080201c 	xori	r2,r2,128
  803738:	10bfe004 	addi	r2,r2,-128
  80373c:	10000226 	beq	r2,zero,803748 <logic+0x2490>
  803740:	00800044 	movi	r2,1
  803744:	00000106 	br	80374c <logic+0x2494>
  803748:	0005883a 	mov	r2,zero
  80374c:	1007883a 	mov	r3,r2
  803750:	e0bffc17 	ldw	r2,-16(fp)
  803754:	10c02945 	stb	r3,165(r2)
  d->_cg57 = d->_Pacemaker_local__Atrig3;
  803758:	e0bffc17 	ldw	r2,-16(fp)
  80375c:	10c01ec3 	ldbu	r3,123(r2)
  803760:	e0bffc17 	ldw	r2,-16(fp)
  803764:	10c03885 	stb	r3,226(r2)
  d->_g54 = d->_g56 && !d->_cg57;
  803768:	e0bffc17 	ldw	r2,-16(fp)
  80376c:	10802943 	ldbu	r2,165(r2)
  803770:	10803fcc 	andi	r2,r2,255
  803774:	1080201c 	xori	r2,r2,128
  803778:	10bfe004 	addi	r2,r2,-128
  80377c:	10000826 	beq	r2,zero,8037a0 <logic+0x24e8>
  803780:	e0bffc17 	ldw	r2,-16(fp)
  803784:	10803883 	ldbu	r2,226(r2)
  803788:	10803fcc 	andi	r2,r2,255
  80378c:	1080201c 	xori	r2,r2,128
  803790:	10bfe004 	addi	r2,r2,-128
  803794:	1000021e 	bne	r2,zero,8037a0 <logic+0x24e8>
  803798:	00800044 	movi	r2,1
  80379c:	00000106 	br	8037a4 <logic+0x24ec>
  8037a0:	0005883a 	mov	r2,zero
  8037a4:	1007883a 	mov	r3,r2
  8037a8:	e0bffc17 	ldw	r2,-16(fp)
  8037ac:	10c028c5 	stb	r3,163(r2)
  d->_cg97 = d->_Pacemaker_local__Atrig4;
  8037b0:	e0bffc17 	ldw	r2,-16(fp)
  8037b4:	10c01f03 	ldbu	r3,124(r2)
  8037b8:	e0bffc17 	ldw	r2,-16(fp)
  8037bc:	10c03d05 	stb	r3,244(r2)
  d->_g10_e1 = d->_g54 && d->_cg97;
  8037c0:	e0bffc17 	ldw	r2,-16(fp)
  8037c4:	108028c3 	ldbu	r2,163(r2)
  8037c8:	10803fcc 	andi	r2,r2,255
  8037cc:	1080201c 	xori	r2,r2,128
  8037d0:	10bfe004 	addi	r2,r2,-128
  8037d4:	10000826 	beq	r2,zero,8037f8 <logic+0x2540>
  8037d8:	e0bffc17 	ldw	r2,-16(fp)
  8037dc:	10803d03 	ldbu	r2,244(r2)
  8037e0:	10803fcc 	andi	r2,r2,255
  8037e4:	1080201c 	xori	r2,r2,128
  8037e8:	10bfe004 	addi	r2,r2,-128
  8037ec:	10000226 	beq	r2,zero,8037f8 <logic+0x2540>
  8037f0:	00800044 	movi	r2,1
  8037f4:	00000106 	br	8037fc <logic+0x2544>
  8037f8:	0005883a 	mov	r2,zero
  8037fc:	1007883a 	mov	r3,r2
  803800:	e0bffc17 	ldw	r2,-16(fp)
  803804:	10c03d45 	stb	r3,245(r2)
  if (d->_g10_e1) {
  803808:	e0bffc17 	ldw	r2,-16(fp)
  80380c:	10803d43 	ldbu	r2,245(r2)
  803810:	10803fcc 	andi	r2,r2,255
  803814:	1080201c 	xori	r2,r2,128
  803818:	10bfe004 	addi	r2,r2,-128
  80381c:	10000526 	beq	r2,zero,803834 <logic+0x257c>
    d->_taken_transitions[5] += 1;
  803820:	e0bffc17 	ldw	r2,-16(fp)
  803824:	10801717 	ldw	r2,92(r2)
  803828:	10c00044 	addi	r3,r2,1
  80382c:	e0bffc17 	ldw	r2,-16(fp)
  803830:	10c01715 	stw	r3,92(r2)
  }
  d->_g52 = d->_GO || d->_g86 || d->_g67 || d->_g10_e1;
  803834:	e0bffc17 	ldw	r2,-16(fp)
  803838:	10803183 	ldbu	r2,198(r2)
  80383c:	10803fcc 	andi	r2,r2,255
  803840:	1080201c 	xori	r2,r2,128
  803844:	10bfe004 	addi	r2,r2,-128
  803848:	1000121e 	bne	r2,zero,803894 <logic+0x25dc>
  80384c:	e0bffc17 	ldw	r2,-16(fp)
  803850:	10802cc3 	ldbu	r2,179(r2)
  803854:	10803fcc 	andi	r2,r2,255
  803858:	1080201c 	xori	r2,r2,128
  80385c:	10bfe004 	addi	r2,r2,-128
  803860:	10000c1e 	bne	r2,zero,803894 <logic+0x25dc>
  803864:	e0bffc17 	ldw	r2,-16(fp)
  803868:	10802b03 	ldbu	r2,172(r2)
  80386c:	10803fcc 	andi	r2,r2,255
  803870:	1080201c 	xori	r2,r2,128
  803874:	10bfe004 	addi	r2,r2,-128
  803878:	1000061e 	bne	r2,zero,803894 <logic+0x25dc>
  80387c:	e0bffc17 	ldw	r2,-16(fp)
  803880:	10803d43 	ldbu	r2,245(r2)
  803884:	10803fcc 	andi	r2,r2,255
  803888:	1080201c 	xori	r2,r2,128
  80388c:	10bfe004 	addi	r2,r2,-128
  803890:	10000226 	beq	r2,zero,80389c <logic+0x25e4>
  803894:	00800044 	movi	r2,1
  803898:	00000106 	br	8038a0 <logic+0x25e8>
  80389c:	0005883a 	mov	r2,zero
  8038a0:	1007883a 	mov	r3,r2
  8038a4:	e0bffc17 	ldw	r2,-16(fp)
  8038a8:	10c02845 	stb	r3,161(r2)
  if (d->_g52) {
  8038ac:	e0bffc17 	ldw	r2,-16(fp)
  8038b0:	10802843 	ldbu	r2,161(r2)
  8038b4:	10803fcc 	andi	r2,r2,255
  8038b8:	1080201c 	xori	r2,r2,128
  8038bc:	10bfe004 	addi	r2,r2,-128
  8038c0:	10000926 	beq	r2,zero,8038e8 <logic+0x2630>
    d->AVI_Clock = 0;
  8038c4:	e0bffc17 	ldw	r2,-16(fp)
  8038c8:	10001015 	stw	zero,64(r2)
  8038cc:	10001115 	stw	zero,68(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  8038d0:	e0bffc17 	ldw	r2,-16(fp)
  8038d4:	10001ec5 	stb	zero,123(r2)
    d->_Pacemaker_local__Atrig4 = 0;
  8038d8:	e0bffc17 	ldw	r2,-16(fp)
  8038dc:	10001f05 	stb	zero,124(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  8038e0:	e0bffc17 	ldw	r2,-16(fp)
  8038e4:	10001f45 	stb	zero,125(r2)
  }
  d->_cg4 = d->VRP_Clock < d->VRP;
  8038e8:	e0bffc17 	ldw	r2,-16(fp)
  8038ec:	14000617 	ldw	r16,24(r2)
  8038f0:	14400717 	ldw	r17,28(r2)
  8038f4:	e0bffc17 	ldw	r2,-16(fp)
  8038f8:	10800317 	ldw	r2,12(r2)
  8038fc:	1009883a 	mov	r4,r2
  803900:	08069c40 	call	8069c4 <__floatsidf>
  803904:	1009883a 	mov	r4,r2
  803908:	180b883a 	mov	r5,r3
  80390c:	04800044 	movi	r18,1
  803910:	200d883a 	mov	r6,r4
  803914:	280f883a 	mov	r7,r5
  803918:	8009883a 	mov	r4,r16
  80391c:	880b883a 	mov	r5,r17
  803920:	0805fd40 	call	805fd4 <__ledf2>
  803924:	10000116 	blt	r2,zero,80392c <logic+0x2674>
  803928:	0025883a 	mov	r18,zero
  80392c:	9007883a 	mov	r3,r18
  803930:	e0bffc17 	ldw	r2,-16(fp)
  803934:	10c031c5 	stb	r3,199(r2)
  d->_g21 = d->_g52 && d->_cg4;
  803938:	e0bffc17 	ldw	r2,-16(fp)
  80393c:	10802843 	ldbu	r2,161(r2)
  803940:	10803fcc 	andi	r2,r2,255
  803944:	1080201c 	xori	r2,r2,128
  803948:	10bfe004 	addi	r2,r2,-128
  80394c:	10000826 	beq	r2,zero,803970 <logic+0x26b8>
  803950:	e0bffc17 	ldw	r2,-16(fp)
  803954:	108031c3 	ldbu	r2,199(r2)
  803958:	10803fcc 	andi	r2,r2,255
  80395c:	1080201c 	xori	r2,r2,128
  803960:	10bfe004 	addi	r2,r2,-128
  803964:	10000226 	beq	r2,zero,803970 <logic+0x26b8>
  803968:	00800044 	movi	r2,1
  80396c:	00000106 	br	803974 <logic+0x26bc>
  803970:	0005883a 	mov	r2,zero
  803974:	1007883a 	mov	r3,r2
  803978:	e0bffc17 	ldw	r2,-16(fp)
  80397c:	10c022c5 	stb	r3,139(r2)
  if (d->_g21) {
  803980:	e0bffc17 	ldw	r2,-16(fp)
  803984:	108022c3 	ldbu	r2,139(r2)
  803988:	10803fcc 	andi	r2,r2,255
  80398c:	1080201c 	xori	r2,r2,128
  803990:	10bfe004 	addi	r2,r2,-128
  803994:	10003426 	beq	r2,zero,803a68 <logic+0x27b0>
    d->sleepT = (d->sleepT < (d->VRP - d->VRP_Clock)) ? d->sleepT : (d->VRP - d->VRP_Clock);
  803998:	e0bffc17 	ldw	r2,-16(fp)
  80399c:	14001b17 	ldw	r16,108(r2)
  8039a0:	14401c17 	ldw	r17,112(r2)
  8039a4:	e0bffc17 	ldw	r2,-16(fp)
  8039a8:	10800317 	ldw	r2,12(r2)
  8039ac:	1009883a 	mov	r4,r2
  8039b0:	08069c40 	call	8069c4 <__floatsidf>
  8039b4:	1011883a 	mov	r8,r2
  8039b8:	1813883a 	mov	r9,r3
  8039bc:	e13ffc17 	ldw	r4,-16(fp)
  8039c0:	20800617 	ldw	r2,24(r4)
  8039c4:	20c00717 	ldw	r3,28(r4)
  8039c8:	100d883a 	mov	r6,r2
  8039cc:	180f883a 	mov	r7,r3
  8039d0:	4009883a 	mov	r4,r8
  8039d4:	480b883a 	mov	r5,r9
  8039d8:	08060c80 	call	8060c8 <__subdf3>
  8039dc:	1009883a 	mov	r4,r2
  8039e0:	180b883a 	mov	r5,r3
  8039e4:	2005883a 	mov	r2,r4
  8039e8:	2807883a 	mov	r3,r5
  8039ec:	100d883a 	mov	r6,r2
  8039f0:	180f883a 	mov	r7,r3
  8039f4:	8009883a 	mov	r4,r16
  8039f8:	880b883a 	mov	r5,r17
  8039fc:	0805fd40 	call	805fd4 <__ledf2>
  803a00:	1000040e 	bge	r2,zero,803a14 <logic+0x275c>
  803a04:	e13ffc17 	ldw	r4,-16(fp)
  803a08:	20801b17 	ldw	r2,108(r4)
  803a0c:	20c01c17 	ldw	r3,112(r4)
  803a10:	00001206 	br	803a5c <logic+0x27a4>
  803a14:	e0bffc17 	ldw	r2,-16(fp)
  803a18:	10800317 	ldw	r2,12(r2)
  803a1c:	1009883a 	mov	r4,r2
  803a20:	08069c40 	call	8069c4 <__floatsidf>
  803a24:	1011883a 	mov	r8,r2
  803a28:	1813883a 	mov	r9,r3
  803a2c:	e13ffc17 	ldw	r4,-16(fp)
  803a30:	20800617 	ldw	r2,24(r4)
  803a34:	20c00717 	ldw	r3,28(r4)
  803a38:	100d883a 	mov	r6,r2
  803a3c:	180f883a 	mov	r7,r3
  803a40:	4009883a 	mov	r4,r8
  803a44:	480b883a 	mov	r5,r9
  803a48:	08060c80 	call	8060c8 <__subdf3>
  803a4c:	1009883a 	mov	r4,r2
  803a50:	180b883a 	mov	r5,r3
  803a54:	2005883a 	mov	r2,r4
  803a58:	2807883a 	mov	r3,r5
  803a5c:	e13ffc17 	ldw	r4,-16(fp)
  803a60:	20801b15 	stw	r2,108(r4)
  803a64:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg5 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803a68:	e0bffc17 	ldw	r2,-16(fp)
  803a6c:	10801ec3 	ldbu	r2,123(r2)
  803a70:	10803fcc 	andi	r2,r2,255
  803a74:	1080201c 	xori	r2,r2,128
  803a78:	10bfe004 	addi	r2,r2,-128
  803a7c:	10000c1e 	bne	r2,zero,803ab0 <logic+0x27f8>
  803a80:	e0bffc17 	ldw	r2,-16(fp)
  803a84:	10801f03 	ldbu	r2,124(r2)
  803a88:	10803fcc 	andi	r2,r2,255
  803a8c:	1080201c 	xori	r2,r2,128
  803a90:	10bfe004 	addi	r2,r2,-128
  803a94:	1000061e 	bne	r2,zero,803ab0 <logic+0x27f8>
  803a98:	e0bffc17 	ldw	r2,-16(fp)
  803a9c:	10801f43 	ldbu	r2,125(r2)
  803aa0:	10803fcc 	andi	r2,r2,255
  803aa4:	1080201c 	xori	r2,r2,128
  803aa8:	10bfe004 	addi	r2,r2,-128
  803aac:	10000226 	beq	r2,zero,803ab8 <logic+0x2800>
  803ab0:	00800044 	movi	r2,1
  803ab4:	00000106 	br	803abc <logic+0x2804>
  803ab8:	0005883a 	mov	r2,zero
  803abc:	1007883a 	mov	r3,r2
  803ac0:	e0bffc17 	ldw	r2,-16(fp)
  803ac4:	10c03205 	stb	r3,200(r2)
  d->_g10 = d->_g21 && !d->_cg5 || d->_g7 && !d->_cg9;
  803ac8:	e0bffc17 	ldw	r2,-16(fp)
  803acc:	108022c3 	ldbu	r2,139(r2)
  803ad0:	10803fcc 	andi	r2,r2,255
  803ad4:	1080201c 	xori	r2,r2,128
  803ad8:	10bfe004 	addi	r2,r2,-128
  803adc:	10000626 	beq	r2,zero,803af8 <logic+0x2840>
  803ae0:	e0bffc17 	ldw	r2,-16(fp)
  803ae4:	10803203 	ldbu	r2,200(r2)
  803ae8:	10803fcc 	andi	r2,r2,255
  803aec:	1080201c 	xori	r2,r2,128
  803af0:	10bfe004 	addi	r2,r2,-128
  803af4:	10000c26 	beq	r2,zero,803b28 <logic+0x2870>
  803af8:	e0bffc17 	ldw	r2,-16(fp)
  803afc:	10802003 	ldbu	r2,128(r2)
  803b00:	10803fcc 	andi	r2,r2,255
  803b04:	1080201c 	xori	r2,r2,128
  803b08:	10bfe004 	addi	r2,r2,-128
  803b0c:	10000826 	beq	r2,zero,803b30 <logic+0x2878>
  803b10:	e0bffc17 	ldw	r2,-16(fp)
  803b14:	10803243 	ldbu	r2,201(r2)
  803b18:	10803fcc 	andi	r2,r2,255
  803b1c:	1080201c 	xori	r2,r2,128
  803b20:	10bfe004 	addi	r2,r2,-128
  803b24:	1000021e 	bne	r2,zero,803b30 <logic+0x2878>
  803b28:	00800044 	movi	r2,1
  803b2c:	00000106 	br	803b34 <logic+0x287c>
  803b30:	0005883a 	mov	r2,zero
  803b34:	1007883a 	mov	r3,r2
  803b38:	e0bffc17 	ldw	r2,-16(fp)
  803b3c:	10c020c5 	stb	r3,131(r2)
  d->_g43 = d->_g52 && !d->_cg4;
  803b40:	e0bffc17 	ldw	r2,-16(fp)
  803b44:	10802843 	ldbu	r2,161(r2)
  803b48:	10803fcc 	andi	r2,r2,255
  803b4c:	1080201c 	xori	r2,r2,128
  803b50:	10bfe004 	addi	r2,r2,-128
  803b54:	10000826 	beq	r2,zero,803b78 <logic+0x28c0>
  803b58:	e0bffc17 	ldw	r2,-16(fp)
  803b5c:	108031c3 	ldbu	r2,199(r2)
  803b60:	10803fcc 	andi	r2,r2,255
  803b64:	1080201c 	xori	r2,r2,128
  803b68:	10bfe004 	addi	r2,r2,-128
  803b6c:	1000021e 	bne	r2,zero,803b78 <logic+0x28c0>
  803b70:	00800044 	movi	r2,1
  803b74:	00000106 	br	803b7c <logic+0x28c4>
  803b78:	0005883a 	mov	r2,zero
  803b7c:	1007883a 	mov	r3,r2
  803b80:	e0bffc17 	ldw	r2,-16(fp)
  803b84:	10c026c5 	stb	r3,155(r2)
  d->_cg14 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803b88:	e0bffc17 	ldw	r2,-16(fp)
  803b8c:	10801ec3 	ldbu	r2,123(r2)
  803b90:	10803fcc 	andi	r2,r2,255
  803b94:	1080201c 	xori	r2,r2,128
  803b98:	10bfe004 	addi	r2,r2,-128
  803b9c:	10000c1e 	bne	r2,zero,803bd0 <logic+0x2918>
  803ba0:	e0bffc17 	ldw	r2,-16(fp)
  803ba4:	10801f03 	ldbu	r2,124(r2)
  803ba8:	10803fcc 	andi	r2,r2,255
  803bac:	1080201c 	xori	r2,r2,128
  803bb0:	10bfe004 	addi	r2,r2,-128
  803bb4:	1000061e 	bne	r2,zero,803bd0 <logic+0x2918>
  803bb8:	e0bffc17 	ldw	r2,-16(fp)
  803bbc:	10801f43 	ldbu	r2,125(r2)
  803bc0:	10803fcc 	andi	r2,r2,255
  803bc4:	1080201c 	xori	r2,r2,128
  803bc8:	10bfe004 	addi	r2,r2,-128
  803bcc:	10000226 	beq	r2,zero,803bd8 <logic+0x2920>
  803bd0:	00800044 	movi	r2,1
  803bd4:	00000106 	br	803bdc <logic+0x2924>
  803bd8:	0005883a 	mov	r2,zero
  803bdc:	1007883a 	mov	r3,r2
  803be0:	e0bffc17 	ldw	r2,-16(fp)
  803be4:	10c03305 	stb	r3,204(r2)
  d->_g32 = d->_g8 && !d->_cg11 || d->_g43 && !d->_cg14;
  803be8:	e0bffc17 	ldw	r2,-16(fp)
  803bec:	10802043 	ldbu	r2,129(r2)
  803bf0:	10803fcc 	andi	r2,r2,255
  803bf4:	1080201c 	xori	r2,r2,128
  803bf8:	10bfe004 	addi	r2,r2,-128
  803bfc:	10000626 	beq	r2,zero,803c18 <logic+0x2960>
  803c00:	e0bffc17 	ldw	r2,-16(fp)
  803c04:	108032c3 	ldbu	r2,203(r2)
  803c08:	10803fcc 	andi	r2,r2,255
  803c0c:	1080201c 	xori	r2,r2,128
  803c10:	10bfe004 	addi	r2,r2,-128
  803c14:	10000c26 	beq	r2,zero,803c48 <logic+0x2990>
  803c18:	e0bffc17 	ldw	r2,-16(fp)
  803c1c:	108026c3 	ldbu	r2,155(r2)
  803c20:	10803fcc 	andi	r2,r2,255
  803c24:	1080201c 	xori	r2,r2,128
  803c28:	10bfe004 	addi	r2,r2,-128
  803c2c:	10000826 	beq	r2,zero,803c50 <logic+0x2998>
  803c30:	e0bffc17 	ldw	r2,-16(fp)
  803c34:	10803303 	ldbu	r2,204(r2)
  803c38:	10803fcc 	andi	r2,r2,255
  803c3c:	1080201c 	xori	r2,r2,128
  803c40:	10bfe004 	addi	r2,r2,-128
  803c44:	1000021e 	bne	r2,zero,803c50 <logic+0x2998>
  803c48:	00800044 	movi	r2,1
  803c4c:	00000106 	br	803c54 <logic+0x299c>
  803c50:	0005883a 	mov	r2,zero
  803c54:	1007883a 	mov	r3,r2
  803c58:	e0bffc17 	ldw	r2,-16(fp)
  803c5c:	10c024c5 	stb	r3,147(r2)
  d->_cg15 = d->LRI_Clock < d->LRI;
  803c60:	e0bffc17 	ldw	r2,-16(fp)
  803c64:	14000a17 	ldw	r16,40(r2)
  803c68:	14400b17 	ldw	r17,44(r2)
  803c6c:	e0bffc17 	ldw	r2,-16(fp)
  803c70:	10800417 	ldw	r2,16(r2)
  803c74:	1009883a 	mov	r4,r2
  803c78:	08069c40 	call	8069c4 <__floatsidf>
  803c7c:	1009883a 	mov	r4,r2
  803c80:	180b883a 	mov	r5,r3
  803c84:	04800044 	movi	r18,1
  803c88:	200d883a 	mov	r6,r4
  803c8c:	280f883a 	mov	r7,r5
  803c90:	8009883a 	mov	r4,r16
  803c94:	880b883a 	mov	r5,r17
  803c98:	0805fd40 	call	805fd4 <__ledf2>
  803c9c:	10000116 	blt	r2,zero,803ca4 <logic+0x29ec>
  803ca0:	0025883a 	mov	r18,zero
  803ca4:	9007883a 	mov	r3,r18
  803ca8:	e0bffc17 	ldw	r2,-16(fp)
  803cac:	10c03345 	stb	r3,205(r2)
  d->_g52_e5 = d->_g52 && d->_cg15;
  803cb0:	e0bffc17 	ldw	r2,-16(fp)
  803cb4:	10802843 	ldbu	r2,161(r2)
  803cb8:	10803fcc 	andi	r2,r2,255
  803cbc:	1080201c 	xori	r2,r2,128
  803cc0:	10bfe004 	addi	r2,r2,-128
  803cc4:	10000826 	beq	r2,zero,803ce8 <logic+0x2a30>
  803cc8:	e0bffc17 	ldw	r2,-16(fp)
  803ccc:	10803343 	ldbu	r2,205(r2)
  803cd0:	10803fcc 	andi	r2,r2,255
  803cd4:	1080201c 	xori	r2,r2,128
  803cd8:	10bfe004 	addi	r2,r2,-128
  803cdc:	10000226 	beq	r2,zero,803ce8 <logic+0x2a30>
  803ce0:	00800044 	movi	r2,1
  803ce4:	00000106 	br	803cec <logic+0x2a34>
  803ce8:	0005883a 	mov	r2,zero
  803cec:	1007883a 	mov	r3,r2
  803cf0:	e0bffc17 	ldw	r2,-16(fp)
  803cf4:	10c03e45 	stb	r3,249(r2)
  if (d->_g52_e5) {
  803cf8:	e0bffc17 	ldw	r2,-16(fp)
  803cfc:	10803e43 	ldbu	r2,249(r2)
  803d00:	10803fcc 	andi	r2,r2,255
  803d04:	1080201c 	xori	r2,r2,128
  803d08:	10bfe004 	addi	r2,r2,-128
  803d0c:	10003426 	beq	r2,zero,803de0 <logic+0x2b28>
    d->sleepT = (d->sleepT < (d->LRI - d->LRI_Clock)) ? d->sleepT : (d->LRI - d->LRI_Clock);
  803d10:	e0bffc17 	ldw	r2,-16(fp)
  803d14:	14001b17 	ldw	r16,108(r2)
  803d18:	14401c17 	ldw	r17,112(r2)
  803d1c:	e0bffc17 	ldw	r2,-16(fp)
  803d20:	10800417 	ldw	r2,16(r2)
  803d24:	1009883a 	mov	r4,r2
  803d28:	08069c40 	call	8069c4 <__floatsidf>
  803d2c:	1011883a 	mov	r8,r2
  803d30:	1813883a 	mov	r9,r3
  803d34:	e13ffc17 	ldw	r4,-16(fp)
  803d38:	20800a17 	ldw	r2,40(r4)
  803d3c:	20c00b17 	ldw	r3,44(r4)
  803d40:	100d883a 	mov	r6,r2
  803d44:	180f883a 	mov	r7,r3
  803d48:	4009883a 	mov	r4,r8
  803d4c:	480b883a 	mov	r5,r9
  803d50:	08060c80 	call	8060c8 <__subdf3>
  803d54:	1009883a 	mov	r4,r2
  803d58:	180b883a 	mov	r5,r3
  803d5c:	2005883a 	mov	r2,r4
  803d60:	2807883a 	mov	r3,r5
  803d64:	100d883a 	mov	r6,r2
  803d68:	180f883a 	mov	r7,r3
  803d6c:	8009883a 	mov	r4,r16
  803d70:	880b883a 	mov	r5,r17
  803d74:	0805fd40 	call	805fd4 <__ledf2>
  803d78:	1000040e 	bge	r2,zero,803d8c <logic+0x2ad4>
  803d7c:	e13ffc17 	ldw	r4,-16(fp)
  803d80:	20801b17 	ldw	r2,108(r4)
  803d84:	20c01c17 	ldw	r3,112(r4)
  803d88:	00001206 	br	803dd4 <logic+0x2b1c>
  803d8c:	e0bffc17 	ldw	r2,-16(fp)
  803d90:	10800417 	ldw	r2,16(r2)
  803d94:	1009883a 	mov	r4,r2
  803d98:	08069c40 	call	8069c4 <__floatsidf>
  803d9c:	1011883a 	mov	r8,r2
  803da0:	1813883a 	mov	r9,r3
  803da4:	e13ffc17 	ldw	r4,-16(fp)
  803da8:	20800a17 	ldw	r2,40(r4)
  803dac:	20c00b17 	ldw	r3,44(r4)
  803db0:	100d883a 	mov	r6,r2
  803db4:	180f883a 	mov	r7,r3
  803db8:	4009883a 	mov	r4,r8
  803dbc:	480b883a 	mov	r5,r9
  803dc0:	08060c80 	call	8060c8 <__subdf3>
  803dc4:	1009883a 	mov	r4,r2
  803dc8:	180b883a 	mov	r5,r3
  803dcc:	2005883a 	mov	r2,r4
  803dd0:	2807883a 	mov	r3,r5
  803dd4:	e13ffc17 	ldw	r4,-16(fp)
  803dd8:	20801b15 	stw	r2,108(r4)
  803ddc:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg16 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803de0:	e0bffc17 	ldw	r2,-16(fp)
  803de4:	10801ec3 	ldbu	r2,123(r2)
  803de8:	10803fcc 	andi	r2,r2,255
  803dec:	1080201c 	xori	r2,r2,128
  803df0:	10bfe004 	addi	r2,r2,-128
  803df4:	10000c1e 	bne	r2,zero,803e28 <logic+0x2b70>
  803df8:	e0bffc17 	ldw	r2,-16(fp)
  803dfc:	10801f03 	ldbu	r2,124(r2)
  803e00:	10803fcc 	andi	r2,r2,255
  803e04:	1080201c 	xori	r2,r2,128
  803e08:	10bfe004 	addi	r2,r2,-128
  803e0c:	1000061e 	bne	r2,zero,803e28 <logic+0x2b70>
  803e10:	e0bffc17 	ldw	r2,-16(fp)
  803e14:	10801f43 	ldbu	r2,125(r2)
  803e18:	10803fcc 	andi	r2,r2,255
  803e1c:	1080201c 	xori	r2,r2,128
  803e20:	10bfe004 	addi	r2,r2,-128
  803e24:	10000226 	beq	r2,zero,803e30 <logic+0x2b78>
  803e28:	00800044 	movi	r2,1
  803e2c:	00000106 	br	803e34 <logic+0x2b7c>
  803e30:	0005883a 	mov	r2,zero
  803e34:	1007883a 	mov	r3,r2
  803e38:	e0bffc17 	ldw	r2,-16(fp)
  803e3c:	10c03385 	stb	r3,206(r2)
  d->_g21_e2 = d->_g52_e5 && !d->_cg16 || d->_g18 && !d->_cg20;
  803e40:	e0bffc17 	ldw	r2,-16(fp)
  803e44:	10803e43 	ldbu	r2,249(r2)
  803e48:	10803fcc 	andi	r2,r2,255
  803e4c:	1080201c 	xori	r2,r2,128
  803e50:	10bfe004 	addi	r2,r2,-128
  803e54:	10000626 	beq	r2,zero,803e70 <logic+0x2bb8>
  803e58:	e0bffc17 	ldw	r2,-16(fp)
  803e5c:	10803383 	ldbu	r2,206(r2)
  803e60:	10803fcc 	andi	r2,r2,255
  803e64:	1080201c 	xori	r2,r2,128
  803e68:	10bfe004 	addi	r2,r2,-128
  803e6c:	10000c26 	beq	r2,zero,803ea0 <logic+0x2be8>
  803e70:	e0bffc17 	ldw	r2,-16(fp)
  803e74:	10802203 	ldbu	r2,136(r2)
  803e78:	10803fcc 	andi	r2,r2,255
  803e7c:	1080201c 	xori	r2,r2,128
  803e80:	10bfe004 	addi	r2,r2,-128
  803e84:	10000826 	beq	r2,zero,803ea8 <logic+0x2bf0>
  803e88:	e0bffc17 	ldw	r2,-16(fp)
  803e8c:	108033c3 	ldbu	r2,207(r2)
  803e90:	10803fcc 	andi	r2,r2,255
  803e94:	1080201c 	xori	r2,r2,128
  803e98:	10bfe004 	addi	r2,r2,-128
  803e9c:	1000021e 	bne	r2,zero,803ea8 <logic+0x2bf0>
  803ea0:	00800044 	movi	r2,1
  803ea4:	00000106 	br	803eac <logic+0x2bf4>
  803ea8:	0005883a 	mov	r2,zero
  803eac:	1007883a 	mov	r3,r2
  803eb0:	e0bffc17 	ldw	r2,-16(fp)
  803eb4:	10c03d85 	stb	r3,246(r2)
  d->_g43_e4 = d->_g52 && !d->_cg15;
  803eb8:	e0bffc17 	ldw	r2,-16(fp)
  803ebc:	10802843 	ldbu	r2,161(r2)
  803ec0:	10803fcc 	andi	r2,r2,255
  803ec4:	1080201c 	xori	r2,r2,128
  803ec8:	10bfe004 	addi	r2,r2,-128
  803ecc:	10000826 	beq	r2,zero,803ef0 <logic+0x2c38>
  803ed0:	e0bffc17 	ldw	r2,-16(fp)
  803ed4:	10803343 	ldbu	r2,205(r2)
  803ed8:	10803fcc 	andi	r2,r2,255
  803edc:	1080201c 	xori	r2,r2,128
  803ee0:	10bfe004 	addi	r2,r2,-128
  803ee4:	1000021e 	bne	r2,zero,803ef0 <logic+0x2c38>
  803ee8:	00800044 	movi	r2,1
  803eec:	00000106 	br	803ef4 <logic+0x2c3c>
  803ef0:	0005883a 	mov	r2,zero
  803ef4:	1007883a 	mov	r3,r2
  803ef8:	e0bffc17 	ldw	r2,-16(fp)
  803efc:	10c03e05 	stb	r3,248(r2)
  d->_cg25 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803f00:	e0bffc17 	ldw	r2,-16(fp)
  803f04:	10801ec3 	ldbu	r2,123(r2)
  803f08:	10803fcc 	andi	r2,r2,255
  803f0c:	1080201c 	xori	r2,r2,128
  803f10:	10bfe004 	addi	r2,r2,-128
  803f14:	10000c1e 	bne	r2,zero,803f48 <logic+0x2c90>
  803f18:	e0bffc17 	ldw	r2,-16(fp)
  803f1c:	10801f03 	ldbu	r2,124(r2)
  803f20:	10803fcc 	andi	r2,r2,255
  803f24:	1080201c 	xori	r2,r2,128
  803f28:	10bfe004 	addi	r2,r2,-128
  803f2c:	1000061e 	bne	r2,zero,803f48 <logic+0x2c90>
  803f30:	e0bffc17 	ldw	r2,-16(fp)
  803f34:	10801f43 	ldbu	r2,125(r2)
  803f38:	10803fcc 	andi	r2,r2,255
  803f3c:	1080201c 	xori	r2,r2,128
  803f40:	10bfe004 	addi	r2,r2,-128
  803f44:	10000226 	beq	r2,zero,803f50 <logic+0x2c98>
  803f48:	00800044 	movi	r2,1
  803f4c:	00000106 	br	803f54 <logic+0x2c9c>
  803f50:	0005883a 	mov	r2,zero
  803f54:	1007883a 	mov	r3,r2
  803f58:	e0bffc17 	ldw	r2,-16(fp)
  803f5c:	10c03485 	stb	r3,210(r2)
  d->_g32_e3 = d->_g19 && !d->_cg22 || d->_g43_e4 && !d->_cg25;
  803f60:	e0bffc17 	ldw	r2,-16(fp)
  803f64:	10802243 	ldbu	r2,137(r2)
  803f68:	10803fcc 	andi	r2,r2,255
  803f6c:	1080201c 	xori	r2,r2,128
  803f70:	10bfe004 	addi	r2,r2,-128
  803f74:	10000626 	beq	r2,zero,803f90 <logic+0x2cd8>
  803f78:	e0bffc17 	ldw	r2,-16(fp)
  803f7c:	10803443 	ldbu	r2,209(r2)
  803f80:	10803fcc 	andi	r2,r2,255
  803f84:	1080201c 	xori	r2,r2,128
  803f88:	10bfe004 	addi	r2,r2,-128
  803f8c:	10000c26 	beq	r2,zero,803fc0 <logic+0x2d08>
  803f90:	e0bffc17 	ldw	r2,-16(fp)
  803f94:	10803e03 	ldbu	r2,248(r2)
  803f98:	10803fcc 	andi	r2,r2,255
  803f9c:	1080201c 	xori	r2,r2,128
  803fa0:	10bfe004 	addi	r2,r2,-128
  803fa4:	10000826 	beq	r2,zero,803fc8 <logic+0x2d10>
  803fa8:	e0bffc17 	ldw	r2,-16(fp)
  803fac:	10803483 	ldbu	r2,210(r2)
  803fb0:	10803fcc 	andi	r2,r2,255
  803fb4:	1080201c 	xori	r2,r2,128
  803fb8:	10bfe004 	addi	r2,r2,-128
  803fbc:	1000021e 	bne	r2,zero,803fc8 <logic+0x2d10>
  803fc0:	00800044 	movi	r2,1
  803fc4:	00000106 	br	803fcc <logic+0x2d14>
  803fc8:	0005883a 	mov	r2,zero
  803fcc:	1007883a 	mov	r3,r2
  803fd0:	e0bffc17 	ldw	r2,-16(fp)
  803fd4:	10c03dc5 	stb	r3,247(r2)
  d->_cg26 = d->URI_Clock < d->URI;
  803fd8:	e0bffc17 	ldw	r2,-16(fp)
  803fdc:	14000c17 	ldw	r16,48(r2)
  803fe0:	14400d17 	ldw	r17,52(r2)
  803fe4:	e0bffc17 	ldw	r2,-16(fp)
  803fe8:	10800517 	ldw	r2,20(r2)
  803fec:	1009883a 	mov	r4,r2
  803ff0:	08069c40 	call	8069c4 <__floatsidf>
  803ff4:	1009883a 	mov	r4,r2
  803ff8:	180b883a 	mov	r5,r3
  803ffc:	04800044 	movi	r18,1
  804000:	200d883a 	mov	r6,r4
  804004:	280f883a 	mov	r7,r5
  804008:	8009883a 	mov	r4,r16
  80400c:	880b883a 	mov	r5,r17
  804010:	0805fd40 	call	805fd4 <__ledf2>
  804014:	10000116 	blt	r2,zero,80401c <logic+0x2d64>
  804018:	0025883a 	mov	r18,zero
  80401c:	9007883a 	mov	r3,r18
  804020:	e0bffc17 	ldw	r2,-16(fp)
  804024:	10c034c5 	stb	r3,211(r2)
  d->_g95 = d->_g52 && d->_cg26;
  804028:	e0bffc17 	ldw	r2,-16(fp)
  80402c:	10802843 	ldbu	r2,161(r2)
  804030:	10803fcc 	andi	r2,r2,255
  804034:	1080201c 	xori	r2,r2,128
  804038:	10bfe004 	addi	r2,r2,-128
  80403c:	10000826 	beq	r2,zero,804060 <logic+0x2da8>
  804040:	e0bffc17 	ldw	r2,-16(fp)
  804044:	108034c3 	ldbu	r2,211(r2)
  804048:	10803fcc 	andi	r2,r2,255
  80404c:	1080201c 	xori	r2,r2,128
  804050:	10bfe004 	addi	r2,r2,-128
  804054:	10000226 	beq	r2,zero,804060 <logic+0x2da8>
  804058:	00800044 	movi	r2,1
  80405c:	00000106 	br	804064 <logic+0x2dac>
  804060:	0005883a 	mov	r2,zero
  804064:	1007883a 	mov	r3,r2
  804068:	e0bffc17 	ldw	r2,-16(fp)
  80406c:	10c02ec5 	stb	r3,187(r2)
  if (d->_g95) {
  804070:	e0bffc17 	ldw	r2,-16(fp)
  804074:	10802ec3 	ldbu	r2,187(r2)
  804078:	10803fcc 	andi	r2,r2,255
  80407c:	1080201c 	xori	r2,r2,128
  804080:	10bfe004 	addi	r2,r2,-128
  804084:	10003426 	beq	r2,zero,804158 <logic+0x2ea0>
    d->sleepT = (d->sleepT < (d->URI - d->URI_Clock)) ? d->sleepT : (d->URI - d->URI_Clock);
  804088:	e0bffc17 	ldw	r2,-16(fp)
  80408c:	14001b17 	ldw	r16,108(r2)
  804090:	14401c17 	ldw	r17,112(r2)
  804094:	e0bffc17 	ldw	r2,-16(fp)
  804098:	10800517 	ldw	r2,20(r2)
  80409c:	1009883a 	mov	r4,r2
  8040a0:	08069c40 	call	8069c4 <__floatsidf>
  8040a4:	1011883a 	mov	r8,r2
  8040a8:	1813883a 	mov	r9,r3
  8040ac:	e13ffc17 	ldw	r4,-16(fp)
  8040b0:	20800c17 	ldw	r2,48(r4)
  8040b4:	20c00d17 	ldw	r3,52(r4)
  8040b8:	100d883a 	mov	r6,r2
  8040bc:	180f883a 	mov	r7,r3
  8040c0:	4009883a 	mov	r4,r8
  8040c4:	480b883a 	mov	r5,r9
  8040c8:	08060c80 	call	8060c8 <__subdf3>
  8040cc:	1009883a 	mov	r4,r2
  8040d0:	180b883a 	mov	r5,r3
  8040d4:	2005883a 	mov	r2,r4
  8040d8:	2807883a 	mov	r3,r5
  8040dc:	100d883a 	mov	r6,r2
  8040e0:	180f883a 	mov	r7,r3
  8040e4:	8009883a 	mov	r4,r16
  8040e8:	880b883a 	mov	r5,r17
  8040ec:	0805fd40 	call	805fd4 <__ledf2>
  8040f0:	1000040e 	bge	r2,zero,804104 <logic+0x2e4c>
  8040f4:	e13ffc17 	ldw	r4,-16(fp)
  8040f8:	20801b17 	ldw	r2,108(r4)
  8040fc:	20c01c17 	ldw	r3,112(r4)
  804100:	00001206 	br	80414c <logic+0x2e94>
  804104:	e0bffc17 	ldw	r2,-16(fp)
  804108:	10800517 	ldw	r2,20(r2)
  80410c:	1009883a 	mov	r4,r2
  804110:	08069c40 	call	8069c4 <__floatsidf>
  804114:	1011883a 	mov	r8,r2
  804118:	1813883a 	mov	r9,r3
  80411c:	e13ffc17 	ldw	r4,-16(fp)
  804120:	20800c17 	ldw	r2,48(r4)
  804124:	20c00d17 	ldw	r3,52(r4)
  804128:	100d883a 	mov	r6,r2
  80412c:	180f883a 	mov	r7,r3
  804130:	4009883a 	mov	r4,r8
  804134:	480b883a 	mov	r5,r9
  804138:	08060c80 	call	8060c8 <__subdf3>
  80413c:	1009883a 	mov	r4,r2
  804140:	180b883a 	mov	r5,r3
  804144:	2005883a 	mov	r2,r4
  804148:	2807883a 	mov	r3,r5
  80414c:	e13ffc17 	ldw	r4,-16(fp)
  804150:	20801b15 	stw	r2,108(r4)
  804154:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg27 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804158:	e0bffc17 	ldw	r2,-16(fp)
  80415c:	10801ec3 	ldbu	r2,123(r2)
  804160:	10803fcc 	andi	r2,r2,255
  804164:	1080201c 	xori	r2,r2,128
  804168:	10bfe004 	addi	r2,r2,-128
  80416c:	10000c1e 	bne	r2,zero,8041a0 <logic+0x2ee8>
  804170:	e0bffc17 	ldw	r2,-16(fp)
  804174:	10801f03 	ldbu	r2,124(r2)
  804178:	10803fcc 	andi	r2,r2,255
  80417c:	1080201c 	xori	r2,r2,128
  804180:	10bfe004 	addi	r2,r2,-128
  804184:	1000061e 	bne	r2,zero,8041a0 <logic+0x2ee8>
  804188:	e0bffc17 	ldw	r2,-16(fp)
  80418c:	10801f43 	ldbu	r2,125(r2)
  804190:	10803fcc 	andi	r2,r2,255
  804194:	1080201c 	xori	r2,r2,128
  804198:	10bfe004 	addi	r2,r2,-128
  80419c:	10000226 	beq	r2,zero,8041a8 <logic+0x2ef0>
  8041a0:	00800044 	movi	r2,1
  8041a4:	00000106 	br	8041ac <logic+0x2ef4>
  8041a8:	0005883a 	mov	r2,zero
  8041ac:	1007883a 	mov	r3,r2
  8041b0:	e0bffc17 	ldw	r2,-16(fp)
  8041b4:	10c03505 	stb	r3,212(r2)
  d->_g93 = d->_g95 && !d->_cg27 || d->_g29 && !d->_cg31;
  8041b8:	e0bffc17 	ldw	r2,-16(fp)
  8041bc:	10802ec3 	ldbu	r2,187(r2)
  8041c0:	10803fcc 	andi	r2,r2,255
  8041c4:	1080201c 	xori	r2,r2,128
  8041c8:	10bfe004 	addi	r2,r2,-128
  8041cc:	10000626 	beq	r2,zero,8041e8 <logic+0x2f30>
  8041d0:	e0bffc17 	ldw	r2,-16(fp)
  8041d4:	10803503 	ldbu	r2,212(r2)
  8041d8:	10803fcc 	andi	r2,r2,255
  8041dc:	1080201c 	xori	r2,r2,128
  8041e0:	10bfe004 	addi	r2,r2,-128
  8041e4:	10000c26 	beq	r2,zero,804218 <logic+0x2f60>
  8041e8:	e0bffc17 	ldw	r2,-16(fp)
  8041ec:	10802403 	ldbu	r2,144(r2)
  8041f0:	10803fcc 	andi	r2,r2,255
  8041f4:	1080201c 	xori	r2,r2,128
  8041f8:	10bfe004 	addi	r2,r2,-128
  8041fc:	10000826 	beq	r2,zero,804220 <logic+0x2f68>
  804200:	e0bffc17 	ldw	r2,-16(fp)
  804204:	10803543 	ldbu	r2,213(r2)
  804208:	10803fcc 	andi	r2,r2,255
  80420c:	1080201c 	xori	r2,r2,128
  804210:	10bfe004 	addi	r2,r2,-128
  804214:	1000021e 	bne	r2,zero,804220 <logic+0x2f68>
  804218:	00800044 	movi	r2,1
  80421c:	00000106 	br	804224 <logic+0x2f6c>
  804220:	0005883a 	mov	r2,zero
  804224:	1007883a 	mov	r3,r2
  804228:	e0bffc17 	ldw	r2,-16(fp)
  80422c:	10c02e45 	stb	r3,185(r2)
  d->_g98 = d->_g52 && !d->_cg26;
  804230:	e0bffc17 	ldw	r2,-16(fp)
  804234:	10802843 	ldbu	r2,161(r2)
  804238:	10803fcc 	andi	r2,r2,255
  80423c:	1080201c 	xori	r2,r2,128
  804240:	10bfe004 	addi	r2,r2,-128
  804244:	10000826 	beq	r2,zero,804268 <logic+0x2fb0>
  804248:	e0bffc17 	ldw	r2,-16(fp)
  80424c:	108034c3 	ldbu	r2,211(r2)
  804250:	10803fcc 	andi	r2,r2,255
  804254:	1080201c 	xori	r2,r2,128
  804258:	10bfe004 	addi	r2,r2,-128
  80425c:	1000021e 	bne	r2,zero,804268 <logic+0x2fb0>
  804260:	00800044 	movi	r2,1
  804264:	00000106 	br	80426c <logic+0x2fb4>
  804268:	0005883a 	mov	r2,zero
  80426c:	1007883a 	mov	r3,r2
  804270:	e0bffc17 	ldw	r2,-16(fp)
  804274:	10c02f85 	stb	r3,190(r2)
  d->_cg36 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804278:	e0bffc17 	ldw	r2,-16(fp)
  80427c:	10801ec3 	ldbu	r2,123(r2)
  804280:	10803fcc 	andi	r2,r2,255
  804284:	1080201c 	xori	r2,r2,128
  804288:	10bfe004 	addi	r2,r2,-128
  80428c:	10000c1e 	bne	r2,zero,8042c0 <logic+0x3008>
  804290:	e0bffc17 	ldw	r2,-16(fp)
  804294:	10801f03 	ldbu	r2,124(r2)
  804298:	10803fcc 	andi	r2,r2,255
  80429c:	1080201c 	xori	r2,r2,128
  8042a0:	10bfe004 	addi	r2,r2,-128
  8042a4:	1000061e 	bne	r2,zero,8042c0 <logic+0x3008>
  8042a8:	e0bffc17 	ldw	r2,-16(fp)
  8042ac:	10801f43 	ldbu	r2,125(r2)
  8042b0:	10803fcc 	andi	r2,r2,255
  8042b4:	1080201c 	xori	r2,r2,128
  8042b8:	10bfe004 	addi	r2,r2,-128
  8042bc:	10000226 	beq	r2,zero,8042c8 <logic+0x3010>
  8042c0:	00800044 	movi	r2,1
  8042c4:	00000106 	br	8042cc <logic+0x3014>
  8042c8:	0005883a 	mov	r2,zero
  8042cc:	1007883a 	mov	r3,r2
  8042d0:	e0bffc17 	ldw	r2,-16(fp)
  8042d4:	10c03605 	stb	r3,216(r2)
  d->_g5 = d->_g30 && !d->_cg33 || d->_g98 && !d->_cg36;
  8042d8:	e0bffc17 	ldw	r2,-16(fp)
  8042dc:	10802443 	ldbu	r2,145(r2)
  8042e0:	10803fcc 	andi	r2,r2,255
  8042e4:	1080201c 	xori	r2,r2,128
  8042e8:	10bfe004 	addi	r2,r2,-128
  8042ec:	10000626 	beq	r2,zero,804308 <logic+0x3050>
  8042f0:	e0bffc17 	ldw	r2,-16(fp)
  8042f4:	108035c3 	ldbu	r2,215(r2)
  8042f8:	10803fcc 	andi	r2,r2,255
  8042fc:	1080201c 	xori	r2,r2,128
  804300:	10bfe004 	addi	r2,r2,-128
  804304:	10000c26 	beq	r2,zero,804338 <logic+0x3080>
  804308:	e0bffc17 	ldw	r2,-16(fp)
  80430c:	10802f83 	ldbu	r2,190(r2)
  804310:	10803fcc 	andi	r2,r2,255
  804314:	1080201c 	xori	r2,r2,128
  804318:	10bfe004 	addi	r2,r2,-128
  80431c:	10000826 	beq	r2,zero,804340 <logic+0x3088>
  804320:	e0bffc17 	ldw	r2,-16(fp)
  804324:	10803603 	ldbu	r2,216(r2)
  804328:	10803fcc 	andi	r2,r2,255
  80432c:	1080201c 	xori	r2,r2,128
  804330:	10bfe004 	addi	r2,r2,-128
  804334:	1000021e 	bne	r2,zero,804340 <logic+0x3088>
  804338:	00800044 	movi	r2,1
  80433c:	00000106 	br	804344 <logic+0x308c>
  804340:	0005883a 	mov	r2,zero
  804344:	1007883a 	mov	r3,r2
  804348:	e0bffc17 	ldw	r2,-16(fp)
  80434c:	10c01fc5 	stb	r3,127(r2)
  d->_cg37 = d->AVI_Clock < d->AVI;
  804350:	e0bffc17 	ldw	r2,-16(fp)
  804354:	14001017 	ldw	r16,64(r2)
  804358:	14401117 	ldw	r17,68(r2)
  80435c:	e0bffc17 	ldw	r2,-16(fp)
  804360:	10800017 	ldw	r2,0(r2)
  804364:	1009883a 	mov	r4,r2
  804368:	08069c40 	call	8069c4 <__floatsidf>
  80436c:	1009883a 	mov	r4,r2
  804370:	180b883a 	mov	r5,r3
  804374:	04800044 	movi	r18,1
  804378:	200d883a 	mov	r6,r4
  80437c:	280f883a 	mov	r7,r5
  804380:	8009883a 	mov	r4,r16
  804384:	880b883a 	mov	r5,r17
  804388:	0805fd40 	call	805fd4 <__ledf2>
  80438c:	10000116 	blt	r2,zero,804394 <logic+0x30dc>
  804390:	0025883a 	mov	r18,zero
  804394:	9007883a 	mov	r3,r18
  804398:	e0bffc17 	ldw	r2,-16(fp)
  80439c:	10c03645 	stb	r3,217(r2)
  d->_g9 = d->_g52 && d->_cg37;
  8043a0:	e0bffc17 	ldw	r2,-16(fp)
  8043a4:	10802843 	ldbu	r2,161(r2)
  8043a8:	10803fcc 	andi	r2,r2,255
  8043ac:	1080201c 	xori	r2,r2,128
  8043b0:	10bfe004 	addi	r2,r2,-128
  8043b4:	10000826 	beq	r2,zero,8043d8 <logic+0x3120>
  8043b8:	e0bffc17 	ldw	r2,-16(fp)
  8043bc:	10803643 	ldbu	r2,217(r2)
  8043c0:	10803fcc 	andi	r2,r2,255
  8043c4:	1080201c 	xori	r2,r2,128
  8043c8:	10bfe004 	addi	r2,r2,-128
  8043cc:	10000226 	beq	r2,zero,8043d8 <logic+0x3120>
  8043d0:	00800044 	movi	r2,1
  8043d4:	00000106 	br	8043dc <logic+0x3124>
  8043d8:	0005883a 	mov	r2,zero
  8043dc:	1007883a 	mov	r3,r2
  8043e0:	e0bffc17 	ldw	r2,-16(fp)
  8043e4:	10c02085 	stb	r3,130(r2)
  if (d->_g9) {
  8043e8:	e0bffc17 	ldw	r2,-16(fp)
  8043ec:	10802083 	ldbu	r2,130(r2)
  8043f0:	10803fcc 	andi	r2,r2,255
  8043f4:	1080201c 	xori	r2,r2,128
  8043f8:	10bfe004 	addi	r2,r2,-128
  8043fc:	10003426 	beq	r2,zero,8044d0 <logic+0x3218>
    d->sleepT = (d->sleepT < (d->AVI - d->AVI_Clock)) ? d->sleepT : (d->AVI - d->AVI_Clock);
  804400:	e0bffc17 	ldw	r2,-16(fp)
  804404:	14001b17 	ldw	r16,108(r2)
  804408:	14401c17 	ldw	r17,112(r2)
  80440c:	e0bffc17 	ldw	r2,-16(fp)
  804410:	10800017 	ldw	r2,0(r2)
  804414:	1009883a 	mov	r4,r2
  804418:	08069c40 	call	8069c4 <__floatsidf>
  80441c:	1011883a 	mov	r8,r2
  804420:	1813883a 	mov	r9,r3
  804424:	e13ffc17 	ldw	r4,-16(fp)
  804428:	20801017 	ldw	r2,64(r4)
  80442c:	20c01117 	ldw	r3,68(r4)
  804430:	100d883a 	mov	r6,r2
  804434:	180f883a 	mov	r7,r3
  804438:	4009883a 	mov	r4,r8
  80443c:	480b883a 	mov	r5,r9
  804440:	08060c80 	call	8060c8 <__subdf3>
  804444:	1009883a 	mov	r4,r2
  804448:	180b883a 	mov	r5,r3
  80444c:	2005883a 	mov	r2,r4
  804450:	2807883a 	mov	r3,r5
  804454:	100d883a 	mov	r6,r2
  804458:	180f883a 	mov	r7,r3
  80445c:	8009883a 	mov	r4,r16
  804460:	880b883a 	mov	r5,r17
  804464:	0805fd40 	call	805fd4 <__ledf2>
  804468:	1000040e 	bge	r2,zero,80447c <logic+0x31c4>
  80446c:	e13ffc17 	ldw	r4,-16(fp)
  804470:	20801b17 	ldw	r2,108(r4)
  804474:	20c01c17 	ldw	r3,112(r4)
  804478:	00001206 	br	8044c4 <logic+0x320c>
  80447c:	e0bffc17 	ldw	r2,-16(fp)
  804480:	10800017 	ldw	r2,0(r2)
  804484:	1009883a 	mov	r4,r2
  804488:	08069c40 	call	8069c4 <__floatsidf>
  80448c:	1011883a 	mov	r8,r2
  804490:	1813883a 	mov	r9,r3
  804494:	e13ffc17 	ldw	r4,-16(fp)
  804498:	20801017 	ldw	r2,64(r4)
  80449c:	20c01117 	ldw	r3,68(r4)
  8044a0:	100d883a 	mov	r6,r2
  8044a4:	180f883a 	mov	r7,r3
  8044a8:	4009883a 	mov	r4,r8
  8044ac:	480b883a 	mov	r5,r9
  8044b0:	08060c80 	call	8060c8 <__subdf3>
  8044b4:	1009883a 	mov	r4,r2
  8044b8:	180b883a 	mov	r5,r3
  8044bc:	2005883a 	mov	r2,r4
  8044c0:	2807883a 	mov	r3,r5
  8044c4:	e13ffc17 	ldw	r4,-16(fp)
  8044c8:	20801b15 	stw	r2,108(r4)
  8044cc:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg38 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8044d0:	e0bffc17 	ldw	r2,-16(fp)
  8044d4:	10801ec3 	ldbu	r2,123(r2)
  8044d8:	10803fcc 	andi	r2,r2,255
  8044dc:	1080201c 	xori	r2,r2,128
  8044e0:	10bfe004 	addi	r2,r2,-128
  8044e4:	10000c1e 	bne	r2,zero,804518 <logic+0x3260>
  8044e8:	e0bffc17 	ldw	r2,-16(fp)
  8044ec:	10801f03 	ldbu	r2,124(r2)
  8044f0:	10803fcc 	andi	r2,r2,255
  8044f4:	1080201c 	xori	r2,r2,128
  8044f8:	10bfe004 	addi	r2,r2,-128
  8044fc:	1000061e 	bne	r2,zero,804518 <logic+0x3260>
  804500:	e0bffc17 	ldw	r2,-16(fp)
  804504:	10801f43 	ldbu	r2,125(r2)
  804508:	10803fcc 	andi	r2,r2,255
  80450c:	1080201c 	xori	r2,r2,128
  804510:	10bfe004 	addi	r2,r2,-128
  804514:	10000226 	beq	r2,zero,804520 <logic+0x3268>
  804518:	00800044 	movi	r2,1
  80451c:	00000106 	br	804524 <logic+0x326c>
  804520:	0005883a 	mov	r2,zero
  804524:	1007883a 	mov	r3,r2
  804528:	e0bffc17 	ldw	r2,-16(fp)
  80452c:	10c03685 	stb	r3,218(r2)
  d->_g11 = d->_g9 && !d->_cg38 || d->_g46 && !d->_cg42;
  804530:	e0bffc17 	ldw	r2,-16(fp)
  804534:	10802083 	ldbu	r2,130(r2)
  804538:	10803fcc 	andi	r2,r2,255
  80453c:	1080201c 	xori	r2,r2,128
  804540:	10bfe004 	addi	r2,r2,-128
  804544:	10000626 	beq	r2,zero,804560 <logic+0x32a8>
  804548:	e0bffc17 	ldw	r2,-16(fp)
  80454c:	10803683 	ldbu	r2,218(r2)
  804550:	10803fcc 	andi	r2,r2,255
  804554:	1080201c 	xori	r2,r2,128
  804558:	10bfe004 	addi	r2,r2,-128
  80455c:	10000c26 	beq	r2,zero,804590 <logic+0x32d8>
  804560:	e0bffc17 	ldw	r2,-16(fp)
  804564:	10802743 	ldbu	r2,157(r2)
  804568:	10803fcc 	andi	r2,r2,255
  80456c:	1080201c 	xori	r2,r2,128
  804570:	10bfe004 	addi	r2,r2,-128
  804574:	10000826 	beq	r2,zero,804598 <logic+0x32e0>
  804578:	e0bffc17 	ldw	r2,-16(fp)
  80457c:	108036c3 	ldbu	r2,219(r2)
  804580:	10803fcc 	andi	r2,r2,255
  804584:	1080201c 	xori	r2,r2,128
  804588:	10bfe004 	addi	r2,r2,-128
  80458c:	1000021e 	bne	r2,zero,804598 <logic+0x32e0>
  804590:	00800044 	movi	r2,1
  804594:	00000106 	br	80459c <logic+0x32e4>
  804598:	0005883a 	mov	r2,zero
  80459c:	1007883a 	mov	r3,r2
  8045a0:	e0bffc17 	ldw	r2,-16(fp)
  8045a4:	10c02105 	stb	r3,132(r2)
  d->_g14 = d->_g52 && !d->_cg37;
  8045a8:	e0bffc17 	ldw	r2,-16(fp)
  8045ac:	10802843 	ldbu	r2,161(r2)
  8045b0:	10803fcc 	andi	r2,r2,255
  8045b4:	1080201c 	xori	r2,r2,128
  8045b8:	10bfe004 	addi	r2,r2,-128
  8045bc:	10000826 	beq	r2,zero,8045e0 <logic+0x3328>
  8045c0:	e0bffc17 	ldw	r2,-16(fp)
  8045c4:	10803643 	ldbu	r2,217(r2)
  8045c8:	10803fcc 	andi	r2,r2,255
  8045cc:	1080201c 	xori	r2,r2,128
  8045d0:	10bfe004 	addi	r2,r2,-128
  8045d4:	1000021e 	bne	r2,zero,8045e0 <logic+0x3328>
  8045d8:	00800044 	movi	r2,1
  8045dc:	00000106 	br	8045e4 <logic+0x332c>
  8045e0:	0005883a 	mov	r2,zero
  8045e4:	1007883a 	mov	r3,r2
  8045e8:	e0bffc17 	ldw	r2,-16(fp)
  8045ec:	10c02185 	stb	r3,134(r2)
  d->_cg47 = d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8045f0:	e0bffc17 	ldw	r2,-16(fp)
  8045f4:	10801ec3 	ldbu	r2,123(r2)
  8045f8:	10803fcc 	andi	r2,r2,255
  8045fc:	1080201c 	xori	r2,r2,128
  804600:	10bfe004 	addi	r2,r2,-128
  804604:	10000c1e 	bne	r2,zero,804638 <logic+0x3380>
  804608:	e0bffc17 	ldw	r2,-16(fp)
  80460c:	10801f03 	ldbu	r2,124(r2)
  804610:	10803fcc 	andi	r2,r2,255
  804614:	1080201c 	xori	r2,r2,128
  804618:	10bfe004 	addi	r2,r2,-128
  80461c:	1000061e 	bne	r2,zero,804638 <logic+0x3380>
  804620:	e0bffc17 	ldw	r2,-16(fp)
  804624:	10801f43 	ldbu	r2,125(r2)
  804628:	10803fcc 	andi	r2,r2,255
  80462c:	1080201c 	xori	r2,r2,128
  804630:	10bfe004 	addi	r2,r2,-128
  804634:	10000226 	beq	r2,zero,804640 <logic+0x3388>
  804638:	00800044 	movi	r2,1
  80463c:	00000106 	br	804644 <logic+0x338c>
  804640:	0005883a 	mov	r2,zero
  804644:	1007883a 	mov	r3,r2
  804648:	e0bffc17 	ldw	r2,-16(fp)
  80464c:	10c03785 	stb	r3,222(r2)
  d->_g16 = d->_g41 && !d->_cg44 || d->_g14 && !d->_cg47;
  804650:	e0bffc17 	ldw	r2,-16(fp)
  804654:	10802643 	ldbu	r2,153(r2)
  804658:	10803fcc 	andi	r2,r2,255
  80465c:	1080201c 	xori	r2,r2,128
  804660:	10bfe004 	addi	r2,r2,-128
  804664:	10000626 	beq	r2,zero,804680 <logic+0x33c8>
  804668:	e0bffc17 	ldw	r2,-16(fp)
  80466c:	10803743 	ldbu	r2,221(r2)
  804670:	10803fcc 	andi	r2,r2,255
  804674:	1080201c 	xori	r2,r2,128
  804678:	10bfe004 	addi	r2,r2,-128
  80467c:	10000c26 	beq	r2,zero,8046b0 <logic+0x33f8>
  804680:	e0bffc17 	ldw	r2,-16(fp)
  804684:	10802183 	ldbu	r2,134(r2)
  804688:	10803fcc 	andi	r2,r2,255
  80468c:	1080201c 	xori	r2,r2,128
  804690:	10bfe004 	addi	r2,r2,-128
  804694:	10000826 	beq	r2,zero,8046b8 <logic+0x3400>
  804698:	e0bffc17 	ldw	r2,-16(fp)
  80469c:	10803783 	ldbu	r2,222(r2)
  8046a0:	10803fcc 	andi	r2,r2,255
  8046a4:	1080201c 	xori	r2,r2,128
  8046a8:	10bfe004 	addi	r2,r2,-128
  8046ac:	1000021e 	bne	r2,zero,8046b8 <logic+0x3400>
  8046b0:	00800044 	movi	r2,1
  8046b4:	00000106 	br	8046bc <logic+0x3404>
  8046b8:	0005883a 	mov	r2,zero
  8046bc:	1007883a 	mov	r3,r2
  8046c0:	e0bffc17 	ldw	r2,-16(fp)
  8046c4:	10c021c5 	stb	r3,135(r2)
  d->_g20 = d->_g52 || d->_g53 && !d->_cg55;
  8046c8:	e0bffc17 	ldw	r2,-16(fp)
  8046cc:	10802843 	ldbu	r2,161(r2)
  8046d0:	10803fcc 	andi	r2,r2,255
  8046d4:	1080201c 	xori	r2,r2,128
  8046d8:	10bfe004 	addi	r2,r2,-128
  8046dc:	10000c1e 	bne	r2,zero,804710 <logic+0x3458>
  8046e0:	e0bffc17 	ldw	r2,-16(fp)
  8046e4:	10802883 	ldbu	r2,162(r2)
  8046e8:	10803fcc 	andi	r2,r2,255
  8046ec:	1080201c 	xori	r2,r2,128
  8046f0:	10bfe004 	addi	r2,r2,-128
  8046f4:	10000826 	beq	r2,zero,804718 <logic+0x3460>
  8046f8:	e0bffc17 	ldw	r2,-16(fp)
  8046fc:	108037c3 	ldbu	r2,223(r2)
  804700:	10803fcc 	andi	r2,r2,255
  804704:	1080201c 	xori	r2,r2,128
  804708:	10bfe004 	addi	r2,r2,-128
  80470c:	1000021e 	bne	r2,zero,804718 <logic+0x3460>
  804710:	00800044 	movi	r2,1
  804714:	00000106 	br	80471c <logic+0x3464>
  804718:	0005883a 	mov	r2,zero
  80471c:	1007883a 	mov	r3,r2
  804720:	e0bffc17 	ldw	r2,-16(fp)
  804724:	10c02285 	stb	r3,138(r2)
  d->_g22 = d->_g56 && d->_cg57;
  804728:	e0bffc17 	ldw	r2,-16(fp)
  80472c:	10802943 	ldbu	r2,165(r2)
  804730:	10803fcc 	andi	r2,r2,255
  804734:	1080201c 	xori	r2,r2,128
  804738:	10bfe004 	addi	r2,r2,-128
  80473c:	10000826 	beq	r2,zero,804760 <logic+0x34a8>
  804740:	e0bffc17 	ldw	r2,-16(fp)
  804744:	10803883 	ldbu	r2,226(r2)
  804748:	10803fcc 	andi	r2,r2,255
  80474c:	1080201c 	xori	r2,r2,128
  804750:	10bfe004 	addi	r2,r2,-128
  804754:	10000226 	beq	r2,zero,804760 <logic+0x34a8>
  804758:	00800044 	movi	r2,1
  80475c:	00000106 	br	804764 <logic+0x34ac>
  804760:	0005883a 	mov	r2,zero
  804764:	1007883a 	mov	r3,r2
  804768:	e0bffc17 	ldw	r2,-16(fp)
  80476c:	10c02305 	stb	r3,140(r2)
  if (d->_g22) {
  804770:	e0bffc17 	ldw	r2,-16(fp)
  804774:	10802303 	ldbu	r2,140(r2)
  804778:	10803fcc 	andi	r2,r2,255
  80477c:	1080201c 	xori	r2,r2,128
  804780:	10bfe004 	addi	r2,r2,-128
  804784:	10000b26 	beq	r2,zero,8047b4 <logic+0x34fc>
    d->VP |= 1;
  804788:	e0bffc17 	ldw	r2,-16(fp)
  80478c:	10801dc3 	ldbu	r2,119(r2)
  804790:	10800054 	ori	r2,r2,1
  804794:	1007883a 	mov	r3,r2
  804798:	e0bffc17 	ldw	r2,-16(fp)
  80479c:	10c01dc5 	stb	r3,119(r2)
    d->_taken_transitions[4] += 1;
  8047a0:	e0bffc17 	ldw	r2,-16(fp)
  8047a4:	10801617 	ldw	r2,88(r2)
  8047a8:	10c00044 	addi	r3,r2,1
  8047ac:	e0bffc17 	ldw	r2,-16(fp)
  8047b0:	10c01615 	stw	r3,88(r2)
  }
  d->_g25 = d->_g54 && !d->_cg97;
  8047b4:	e0bffc17 	ldw	r2,-16(fp)
  8047b8:	108028c3 	ldbu	r2,163(r2)
  8047bc:	10803fcc 	andi	r2,r2,255
  8047c0:	1080201c 	xori	r2,r2,128
  8047c4:	10bfe004 	addi	r2,r2,-128
  8047c8:	10000826 	beq	r2,zero,8047ec <logic+0x3534>
  8047cc:	e0bffc17 	ldw	r2,-16(fp)
  8047d0:	10803d03 	ldbu	r2,244(r2)
  8047d4:	10803fcc 	andi	r2,r2,255
  8047d8:	1080201c 	xori	r2,r2,128
  8047dc:	10bfe004 	addi	r2,r2,-128
  8047e0:	1000021e 	bne	r2,zero,8047ec <logic+0x3534>
  8047e4:	00800044 	movi	r2,1
  8047e8:	00000106 	br	8047f0 <logic+0x3538>
  8047ec:	0005883a 	mov	r2,zero
  8047f0:	1007883a 	mov	r3,r2
  8047f4:	e0bffc17 	ldw	r2,-16(fp)
  8047f8:	10c02385 	stb	r3,142(r2)
  if (d->_g25) {
  8047fc:	e0bffc17 	ldw	r2,-16(fp)
  804800:	10802383 	ldbu	r2,142(r2)
  804804:	10803fcc 	andi	r2,r2,255
  804808:	1080201c 	xori	r2,r2,128
  80480c:	10bfe004 	addi	r2,r2,-128
  804810:	10000b26 	beq	r2,zero,804840 <logic+0x3588>
    d->VP |= 1;
  804814:	e0bffc17 	ldw	r2,-16(fp)
  804818:	10801dc3 	ldbu	r2,119(r2)
  80481c:	10800054 	ori	r2,r2,1
  804820:	1007883a 	mov	r3,r2
  804824:	e0bffc17 	ldw	r2,-16(fp)
  804828:	10c01dc5 	stb	r3,119(r2)
    d->_taken_transitions[6] += 1;
  80482c:	e0bffc17 	ldw	r2,-16(fp)
  804830:	10801817 	ldw	r2,96(r2)
  804834:	10c00044 	addi	r3,r2,1
  804838:	e0bffc17 	ldw	r2,-16(fp)
  80483c:	10c01815 	stw	r3,96(r2)
  }
  d->_g27 = d->_g22 || d->_g25;
  804840:	e0bffc17 	ldw	r2,-16(fp)
  804844:	10802303 	ldbu	r2,140(r2)
  804848:	10803fcc 	andi	r2,r2,255
  80484c:	1080201c 	xori	r2,r2,128
  804850:	10bfe004 	addi	r2,r2,-128
  804854:	1000061e 	bne	r2,zero,804870 <logic+0x35b8>
  804858:	e0bffc17 	ldw	r2,-16(fp)
  80485c:	10802383 	ldbu	r2,142(r2)
  804860:	10803fcc 	andi	r2,r2,255
  804864:	1080201c 	xori	r2,r2,128
  804868:	10bfe004 	addi	r2,r2,-128
  80486c:	10000226 	beq	r2,zero,804878 <logic+0x35c0>
  804870:	00800044 	movi	r2,1
  804874:	00000106 	br	80487c <logic+0x35c4>
  804878:	0005883a 	mov	r2,zero
  80487c:	1007883a 	mov	r3,r2
  804880:	e0bffc17 	ldw	r2,-16(fp)
  804884:	10c023c5 	stb	r3,143(r2)
  if (d->_g27) {
  804888:	e0bffc17 	ldw	r2,-16(fp)
  80488c:	108023c3 	ldbu	r2,143(r2)
  804890:	10803fcc 	andi	r2,r2,255
  804894:	1080201c 	xori	r2,r2,128
  804898:	10bfe004 	addi	r2,r2,-128
  80489c:	10001426 	beq	r2,zero,8048f0 <logic+0x3638>
    d->PVARP_Clock = 0;
  8048a0:	e0bffc17 	ldw	r2,-16(fp)
  8048a4:	10000e15 	stw	zero,56(r2)
  8048a8:	10000f15 	stw	zero,60(r2)
    d->VRP_Clock = 0;
  8048ac:	e0bffc17 	ldw	r2,-16(fp)
  8048b0:	10000615 	stw	zero,24(r2)
  8048b4:	10000715 	stw	zero,28(r2)
    d->AEI_Clock = 0;
  8048b8:	e0bffc17 	ldw	r2,-16(fp)
  8048bc:	10000815 	stw	zero,32(r2)
  8048c0:	10000915 	stw	zero,36(r2)
    d->URI_Clock = 0;
  8048c4:	e0bffc17 	ldw	r2,-16(fp)
  8048c8:	10000c15 	stw	zero,48(r2)
  8048cc:	10000d15 	stw	zero,52(r2)
    d->LRI_Clock = 0;
  8048d0:	e0bffc17 	ldw	r2,-16(fp)
  8048d4:	10000a15 	stw	zero,40(r2)
  8048d8:	10000b15 	stw	zero,44(r2)
    d->_taken_transitions[3] += 1;
  8048dc:	e0bffc17 	ldw	r2,-16(fp)
  8048e0:	10801517 	ldw	r2,84(r2)
  8048e4:	10c00044 	addi	r3,r2,1
  8048e8:	e0bffc17 	ldw	r2,-16(fp)
  8048ec:	10c01515 	stw	r3,84(r2)
  }
  d->_g31 = d->_g87_e3 && !d->_cg94;
  8048f0:	e0bffc17 	ldw	r2,-16(fp)
  8048f4:	10803f03 	ldbu	r2,252(r2)
  8048f8:	10803fcc 	andi	r2,r2,255
  8048fc:	1080201c 	xori	r2,r2,128
  804900:	10bfe004 	addi	r2,r2,-128
  804904:	10000826 	beq	r2,zero,804928 <logic+0x3670>
  804908:	e0bffc17 	ldw	r2,-16(fp)
  80490c:	10803cc3 	ldbu	r2,243(r2)
  804910:	10803fcc 	andi	r2,r2,255
  804914:	1080201c 	xori	r2,r2,128
  804918:	10bfe004 	addi	r2,r2,-128
  80491c:	1000021e 	bne	r2,zero,804928 <logic+0x3670>
  804920:	00800044 	movi	r2,1
  804924:	00000106 	br	80492c <logic+0x3674>
  804928:	0005883a 	mov	r2,zero
  80492c:	1007883a 	mov	r3,r2
  804930:	e0bffc17 	ldw	r2,-16(fp)
  804934:	10c02485 	stb	r3,146(r2)
  if (d->_g31) {
  804938:	e0bffc17 	ldw	r2,-16(fp)
  80493c:	10802483 	ldbu	r2,146(r2)
  804940:	10803fcc 	andi	r2,r2,255
  804944:	1080201c 	xori	r2,r2,128
  804948:	10bfe004 	addi	r2,r2,-128
  80494c:	10000526 	beq	r2,zero,804964 <logic+0x36ac>
    d->_taken_transitions[2] += 1;
  804950:	e0bffc17 	ldw	r2,-16(fp)
  804954:	10801417 	ldw	r2,80(r2)
  804958:	10c00044 	addi	r3,r2,1
  80495c:	e0bffc17 	ldw	r2,-16(fp)
  804960:	10c01415 	stw	r3,80(r2)
  }
  d->_g33 = d->_g27 || d->_g31;
  804964:	e0bffc17 	ldw	r2,-16(fp)
  804968:	108023c3 	ldbu	r2,143(r2)
  80496c:	10803fcc 	andi	r2,r2,255
  804970:	1080201c 	xori	r2,r2,128
  804974:	10bfe004 	addi	r2,r2,-128
  804978:	1000061e 	bne	r2,zero,804994 <logic+0x36dc>
  80497c:	e0bffc17 	ldw	r2,-16(fp)
  804980:	10802483 	ldbu	r2,146(r2)
  804984:	10803fcc 	andi	r2,r2,255
  804988:	1080201c 	xori	r2,r2,128
  80498c:	10bfe004 	addi	r2,r2,-128
  804990:	10000226 	beq	r2,zero,80499c <logic+0x36e4>
  804994:	00800044 	movi	r2,1
  804998:	00000106 	br	8049a0 <logic+0x36e8>
  80499c:	0005883a 	mov	r2,zero
  8049a0:	1007883a 	mov	r3,r2
  8049a4:	e0bffc17 	ldw	r2,-16(fp)
  8049a8:	10c02505 	stb	r3,148(r2)
  if (d->_g33) {
  8049ac:	e0bffc17 	ldw	r2,-16(fp)
  8049b0:	10802503 	ldbu	r2,148(r2)
  8049b4:	10803fcc 	andi	r2,r2,255
  8049b8:	1080201c 	xori	r2,r2,128
  8049bc:	10bfe004 	addi	r2,r2,-128
  8049c0:	10000626 	beq	r2,zero,8049dc <logic+0x3724>
    d->_Pacemaker_local__Atrig = 0;
  8049c4:	e0bffc17 	ldw	r2,-16(fp)
  8049c8:	10001e05 	stb	zero,120(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  8049cc:	e0bffc17 	ldw	r2,-16(fp)
  8049d0:	10001e45 	stb	zero,121(r2)
    d->_Pacemaker_local__Atrig2 = 0;
  8049d4:	e0bffc17 	ldw	r2,-16(fp)
  8049d8:	10001e85 	stb	zero,122(r2)
  }
  d->_cg61 = d->AEI_Clock < d->AEI;
  8049dc:	e0bffc17 	ldw	r2,-16(fp)
  8049e0:	14000817 	ldw	r16,32(r2)
  8049e4:	14400917 	ldw	r17,36(r2)
  8049e8:	e0bffc17 	ldw	r2,-16(fp)
  8049ec:	10800117 	ldw	r2,4(r2)
  8049f0:	1009883a 	mov	r4,r2
  8049f4:	08069c40 	call	8069c4 <__floatsidf>
  8049f8:	1009883a 	mov	r4,r2
  8049fc:	180b883a 	mov	r5,r3
  804a00:	04800044 	movi	r18,1
  804a04:	200d883a 	mov	r6,r4
  804a08:	280f883a 	mov	r7,r5
  804a0c:	8009883a 	mov	r4,r16
  804a10:	880b883a 	mov	r5,r17
  804a14:	0805fd40 	call	805fd4 <__ledf2>
  804a18:	10000116 	blt	r2,zero,804a20 <logic+0x3768>
  804a1c:	0025883a 	mov	r18,zero
  804a20:	9007883a 	mov	r3,r18
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	10c038c5 	stb	r3,227(r2)
  d->_g36 = d->_g33 && d->_cg61;
  804a2c:	e0bffc17 	ldw	r2,-16(fp)
  804a30:	10802503 	ldbu	r2,148(r2)
  804a34:	10803fcc 	andi	r2,r2,255
  804a38:	1080201c 	xori	r2,r2,128
  804a3c:	10bfe004 	addi	r2,r2,-128
  804a40:	10000826 	beq	r2,zero,804a64 <logic+0x37ac>
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	108038c3 	ldbu	r2,227(r2)
  804a4c:	10803fcc 	andi	r2,r2,255
  804a50:	1080201c 	xori	r2,r2,128
  804a54:	10bfe004 	addi	r2,r2,-128
  804a58:	10000226 	beq	r2,zero,804a64 <logic+0x37ac>
  804a5c:	00800044 	movi	r2,1
  804a60:	00000106 	br	804a68 <logic+0x37b0>
  804a64:	0005883a 	mov	r2,zero
  804a68:	1007883a 	mov	r3,r2
  804a6c:	e0bffc17 	ldw	r2,-16(fp)
  804a70:	10c02585 	stb	r3,150(r2)
  if (d->_g36) {
  804a74:	e0bffc17 	ldw	r2,-16(fp)
  804a78:	10802583 	ldbu	r2,150(r2)
  804a7c:	10803fcc 	andi	r2,r2,255
  804a80:	1080201c 	xori	r2,r2,128
  804a84:	10bfe004 	addi	r2,r2,-128
  804a88:	10003426 	beq	r2,zero,804b5c <logic+0x38a4>
    d->sleepT = (d->sleepT < (d->AEI - d->AEI_Clock)) ? d->sleepT : (d->AEI - d->AEI_Clock);
  804a8c:	e0bffc17 	ldw	r2,-16(fp)
  804a90:	14001b17 	ldw	r16,108(r2)
  804a94:	14401c17 	ldw	r17,112(r2)
  804a98:	e0bffc17 	ldw	r2,-16(fp)
  804a9c:	10800117 	ldw	r2,4(r2)
  804aa0:	1009883a 	mov	r4,r2
  804aa4:	08069c40 	call	8069c4 <__floatsidf>
  804aa8:	1011883a 	mov	r8,r2
  804aac:	1813883a 	mov	r9,r3
  804ab0:	e13ffc17 	ldw	r4,-16(fp)
  804ab4:	20800817 	ldw	r2,32(r4)
  804ab8:	20c00917 	ldw	r3,36(r4)
  804abc:	100d883a 	mov	r6,r2
  804ac0:	180f883a 	mov	r7,r3
  804ac4:	4009883a 	mov	r4,r8
  804ac8:	480b883a 	mov	r5,r9
  804acc:	08060c80 	call	8060c8 <__subdf3>
  804ad0:	1009883a 	mov	r4,r2
  804ad4:	180b883a 	mov	r5,r3
  804ad8:	2005883a 	mov	r2,r4
  804adc:	2807883a 	mov	r3,r5
  804ae0:	100d883a 	mov	r6,r2
  804ae4:	180f883a 	mov	r7,r3
  804ae8:	8009883a 	mov	r4,r16
  804aec:	880b883a 	mov	r5,r17
  804af0:	0805fd40 	call	805fd4 <__ledf2>
  804af4:	1000040e 	bge	r2,zero,804b08 <logic+0x3850>
  804af8:	e13ffc17 	ldw	r4,-16(fp)
  804afc:	20801b17 	ldw	r2,108(r4)
  804b00:	20c01c17 	ldw	r3,112(r4)
  804b04:	00001206 	br	804b50 <logic+0x3898>
  804b08:	e0bffc17 	ldw	r2,-16(fp)
  804b0c:	10800117 	ldw	r2,4(r2)
  804b10:	1009883a 	mov	r4,r2
  804b14:	08069c40 	call	8069c4 <__floatsidf>
  804b18:	1011883a 	mov	r8,r2
  804b1c:	1813883a 	mov	r9,r3
  804b20:	e13ffc17 	ldw	r4,-16(fp)
  804b24:	20800817 	ldw	r2,32(r4)
  804b28:	20c00917 	ldw	r3,36(r4)
  804b2c:	100d883a 	mov	r6,r2
  804b30:	180f883a 	mov	r7,r3
  804b34:	4009883a 	mov	r4,r8
  804b38:	480b883a 	mov	r5,r9
  804b3c:	08060c80 	call	8060c8 <__subdf3>
  804b40:	1009883a 	mov	r4,r2
  804b44:	180b883a 	mov	r5,r3
  804b48:	2005883a 	mov	r2,r4
  804b4c:	2807883a 	mov	r3,r5
  804b50:	e13ffc17 	ldw	r4,-16(fp)
  804b54:	20801b15 	stw	r2,108(r4)
  804b58:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg62 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804b5c:	e0bffc17 	ldw	r2,-16(fp)
  804b60:	10801e03 	ldbu	r2,120(r2)
  804b64:	10803fcc 	andi	r2,r2,255
  804b68:	1080201c 	xori	r2,r2,128
  804b6c:	10bfe004 	addi	r2,r2,-128
  804b70:	10000c1e 	bne	r2,zero,804ba4 <logic+0x38ec>
  804b74:	e0bffc17 	ldw	r2,-16(fp)
  804b78:	10801e43 	ldbu	r2,121(r2)
  804b7c:	10803fcc 	andi	r2,r2,255
  804b80:	1080201c 	xori	r2,r2,128
  804b84:	10bfe004 	addi	r2,r2,-128
  804b88:	1000061e 	bne	r2,zero,804ba4 <logic+0x38ec>
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10801e83 	ldbu	r2,122(r2)
  804b94:	10803fcc 	andi	r2,r2,255
  804b98:	1080201c 	xori	r2,r2,128
  804b9c:	10bfe004 	addi	r2,r2,-128
  804ba0:	10000226 	beq	r2,zero,804bac <logic+0x38f4>
  804ba4:	00800044 	movi	r2,1
  804ba8:	00000106 	br	804bb0 <logic+0x38f8>
  804bac:	0005883a 	mov	r2,zero
  804bb0:	1007883a 	mov	r3,r2
  804bb4:	e0bffc17 	ldw	r2,-16(fp)
  804bb8:	10c03905 	stb	r3,228(r2)
  d->_g38 = d->_g36 && !d->_cg62 || d->_g64 && !d->_cg66;
  804bbc:	e0bffc17 	ldw	r2,-16(fp)
  804bc0:	10802583 	ldbu	r2,150(r2)
  804bc4:	10803fcc 	andi	r2,r2,255
  804bc8:	1080201c 	xori	r2,r2,128
  804bcc:	10bfe004 	addi	r2,r2,-128
  804bd0:	10000626 	beq	r2,zero,804bec <logic+0x3934>
  804bd4:	e0bffc17 	ldw	r2,-16(fp)
  804bd8:	10803903 	ldbu	r2,228(r2)
  804bdc:	10803fcc 	andi	r2,r2,255
  804be0:	1080201c 	xori	r2,r2,128
  804be4:	10bfe004 	addi	r2,r2,-128
  804be8:	10000c26 	beq	r2,zero,804c1c <logic+0x3964>
  804bec:	e0bffc17 	ldw	r2,-16(fp)
  804bf0:	10802a43 	ldbu	r2,169(r2)
  804bf4:	10803fcc 	andi	r2,r2,255
  804bf8:	1080201c 	xori	r2,r2,128
  804bfc:	10bfe004 	addi	r2,r2,-128
  804c00:	10000826 	beq	r2,zero,804c24 <logic+0x396c>
  804c04:	e0bffc17 	ldw	r2,-16(fp)
  804c08:	10803943 	ldbu	r2,229(r2)
  804c0c:	10803fcc 	andi	r2,r2,255
  804c10:	1080201c 	xori	r2,r2,128
  804c14:	10bfe004 	addi	r2,r2,-128
  804c18:	1000021e 	bne	r2,zero,804c24 <logic+0x396c>
  804c1c:	00800044 	movi	r2,1
  804c20:	00000106 	br	804c28 <logic+0x3970>
  804c24:	0005883a 	mov	r2,zero
  804c28:	1007883a 	mov	r3,r2
  804c2c:	e0bffc17 	ldw	r2,-16(fp)
  804c30:	10c025c5 	stb	r3,151(r2)
  d->_g42 = d->_g33 && !d->_cg61;
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10802503 	ldbu	r2,148(r2)
  804c3c:	10803fcc 	andi	r2,r2,255
  804c40:	1080201c 	xori	r2,r2,128
  804c44:	10bfe004 	addi	r2,r2,-128
  804c48:	10000826 	beq	r2,zero,804c6c <logic+0x39b4>
  804c4c:	e0bffc17 	ldw	r2,-16(fp)
  804c50:	108038c3 	ldbu	r2,227(r2)
  804c54:	10803fcc 	andi	r2,r2,255
  804c58:	1080201c 	xori	r2,r2,128
  804c5c:	10bfe004 	addi	r2,r2,-128
  804c60:	1000021e 	bne	r2,zero,804c6c <logic+0x39b4>
  804c64:	00800044 	movi	r2,1
  804c68:	00000106 	br	804c70 <logic+0x39b8>
  804c6c:	0005883a 	mov	r2,zero
  804c70:	1007883a 	mov	r3,r2
  804c74:	e0bffc17 	ldw	r2,-16(fp)
  804c78:	10c02685 	stb	r3,154(r2)
  d->_cg71 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804c7c:	e0bffc17 	ldw	r2,-16(fp)
  804c80:	10801e03 	ldbu	r2,120(r2)
  804c84:	10803fcc 	andi	r2,r2,255
  804c88:	1080201c 	xori	r2,r2,128
  804c8c:	10bfe004 	addi	r2,r2,-128
  804c90:	10000c1e 	bne	r2,zero,804cc4 <logic+0x3a0c>
  804c94:	e0bffc17 	ldw	r2,-16(fp)
  804c98:	10801e43 	ldbu	r2,121(r2)
  804c9c:	10803fcc 	andi	r2,r2,255
  804ca0:	1080201c 	xori	r2,r2,128
  804ca4:	10bfe004 	addi	r2,r2,-128
  804ca8:	1000061e 	bne	r2,zero,804cc4 <logic+0x3a0c>
  804cac:	e0bffc17 	ldw	r2,-16(fp)
  804cb0:	10801e83 	ldbu	r2,122(r2)
  804cb4:	10803fcc 	andi	r2,r2,255
  804cb8:	1080201c 	xori	r2,r2,128
  804cbc:	10bfe004 	addi	r2,r2,-128
  804cc0:	10000226 	beq	r2,zero,804ccc <logic+0x3a14>
  804cc4:	00800044 	movi	r2,1
  804cc8:	00000106 	br	804cd0 <logic+0x3a18>
  804ccc:	0005883a 	mov	r2,zero
  804cd0:	1007883a 	mov	r3,r2
  804cd4:	e0bffc17 	ldw	r2,-16(fp)
  804cd8:	10c03a05 	stb	r3,232(r2)
  d->_g44 = d->_g65 && !d->_cg68 || d->_g42 && !d->_cg71;
  804cdc:	e0bffc17 	ldw	r2,-16(fp)
  804ce0:	10802a83 	ldbu	r2,170(r2)
  804ce4:	10803fcc 	andi	r2,r2,255
  804ce8:	1080201c 	xori	r2,r2,128
  804cec:	10bfe004 	addi	r2,r2,-128
  804cf0:	10000626 	beq	r2,zero,804d0c <logic+0x3a54>
  804cf4:	e0bffc17 	ldw	r2,-16(fp)
  804cf8:	108039c3 	ldbu	r2,231(r2)
  804cfc:	10803fcc 	andi	r2,r2,255
  804d00:	1080201c 	xori	r2,r2,128
  804d04:	10bfe004 	addi	r2,r2,-128
  804d08:	10000c26 	beq	r2,zero,804d3c <logic+0x3a84>
  804d0c:	e0bffc17 	ldw	r2,-16(fp)
  804d10:	10802683 	ldbu	r2,154(r2)
  804d14:	10803fcc 	andi	r2,r2,255
  804d18:	1080201c 	xori	r2,r2,128
  804d1c:	10bfe004 	addi	r2,r2,-128
  804d20:	10000826 	beq	r2,zero,804d44 <logic+0x3a8c>
  804d24:	e0bffc17 	ldw	r2,-16(fp)
  804d28:	10803a03 	ldbu	r2,232(r2)
  804d2c:	10803fcc 	andi	r2,r2,255
  804d30:	1080201c 	xori	r2,r2,128
  804d34:	10bfe004 	addi	r2,r2,-128
  804d38:	1000021e 	bne	r2,zero,804d44 <logic+0x3a8c>
  804d3c:	00800044 	movi	r2,1
  804d40:	00000106 	br	804d48 <logic+0x3a90>
  804d44:	0005883a 	mov	r2,zero
  804d48:	1007883a 	mov	r3,r2
  804d4c:	e0bffc17 	ldw	r2,-16(fp)
  804d50:	10c02705 	stb	r3,156(r2)
  d->_cg72 = d->PVARP_Clock < d->PVARP;
  804d54:	e0bffc17 	ldw	r2,-16(fp)
  804d58:	14000e17 	ldw	r16,56(r2)
  804d5c:	14400f17 	ldw	r17,60(r2)
  804d60:	e0bffc17 	ldw	r2,-16(fp)
  804d64:	10800217 	ldw	r2,8(r2)
  804d68:	1009883a 	mov	r4,r2
  804d6c:	08069c40 	call	8069c4 <__floatsidf>
  804d70:	1009883a 	mov	r4,r2
  804d74:	180b883a 	mov	r5,r3
  804d78:	04800044 	movi	r18,1
  804d7c:	200d883a 	mov	r6,r4
  804d80:	280f883a 	mov	r7,r5
  804d84:	8009883a 	mov	r4,r16
  804d88:	880b883a 	mov	r5,r17
  804d8c:	0805fd40 	call	805fd4 <__ledf2>
  804d90:	10000116 	blt	r2,zero,804d98 <logic+0x3ae0>
  804d94:	0025883a 	mov	r18,zero
  804d98:	9007883a 	mov	r3,r18
  804d9c:	e0bffc17 	ldw	r2,-16(fp)
  804da0:	10c03a45 	stb	r3,233(r2)
  d->_g47 = d->_g33 && d->_cg72;
  804da4:	e0bffc17 	ldw	r2,-16(fp)
  804da8:	10802503 	ldbu	r2,148(r2)
  804dac:	10803fcc 	andi	r2,r2,255
  804db0:	1080201c 	xori	r2,r2,128
  804db4:	10bfe004 	addi	r2,r2,-128
  804db8:	10000826 	beq	r2,zero,804ddc <logic+0x3b24>
  804dbc:	e0bffc17 	ldw	r2,-16(fp)
  804dc0:	10803a43 	ldbu	r2,233(r2)
  804dc4:	10803fcc 	andi	r2,r2,255
  804dc8:	1080201c 	xori	r2,r2,128
  804dcc:	10bfe004 	addi	r2,r2,-128
  804dd0:	10000226 	beq	r2,zero,804ddc <logic+0x3b24>
  804dd4:	00800044 	movi	r2,1
  804dd8:	00000106 	br	804de0 <logic+0x3b28>
  804ddc:	0005883a 	mov	r2,zero
  804de0:	1007883a 	mov	r3,r2
  804de4:	e0bffc17 	ldw	r2,-16(fp)
  804de8:	10c02785 	stb	r3,158(r2)
  if (d->_g47) {
  804dec:	e0bffc17 	ldw	r2,-16(fp)
  804df0:	10802783 	ldbu	r2,158(r2)
  804df4:	10803fcc 	andi	r2,r2,255
  804df8:	1080201c 	xori	r2,r2,128
  804dfc:	10bfe004 	addi	r2,r2,-128
  804e00:	10003426 	beq	r2,zero,804ed4 <logic+0x3c1c>
    d->sleepT = (d->sleepT < (d->PVARP - d->PVARP_Clock)) ? d->sleepT : (d->PVARP - d->PVARP_Clock);
  804e04:	e0bffc17 	ldw	r2,-16(fp)
  804e08:	14001b17 	ldw	r16,108(r2)
  804e0c:	14401c17 	ldw	r17,112(r2)
  804e10:	e0bffc17 	ldw	r2,-16(fp)
  804e14:	10800217 	ldw	r2,8(r2)
  804e18:	1009883a 	mov	r4,r2
  804e1c:	08069c40 	call	8069c4 <__floatsidf>
  804e20:	1011883a 	mov	r8,r2
  804e24:	1813883a 	mov	r9,r3
  804e28:	e13ffc17 	ldw	r4,-16(fp)
  804e2c:	20800e17 	ldw	r2,56(r4)
  804e30:	20c00f17 	ldw	r3,60(r4)
  804e34:	100d883a 	mov	r6,r2
  804e38:	180f883a 	mov	r7,r3
  804e3c:	4009883a 	mov	r4,r8
  804e40:	480b883a 	mov	r5,r9
  804e44:	08060c80 	call	8060c8 <__subdf3>
  804e48:	1009883a 	mov	r4,r2
  804e4c:	180b883a 	mov	r5,r3
  804e50:	2005883a 	mov	r2,r4
  804e54:	2807883a 	mov	r3,r5
  804e58:	100d883a 	mov	r6,r2
  804e5c:	180f883a 	mov	r7,r3
  804e60:	8009883a 	mov	r4,r16
  804e64:	880b883a 	mov	r5,r17
  804e68:	0805fd40 	call	805fd4 <__ledf2>
  804e6c:	1000040e 	bge	r2,zero,804e80 <logic+0x3bc8>
  804e70:	e13ffc17 	ldw	r4,-16(fp)
  804e74:	20801b17 	ldw	r2,108(r4)
  804e78:	20c01c17 	ldw	r3,112(r4)
  804e7c:	00001206 	br	804ec8 <logic+0x3c10>
  804e80:	e0bffc17 	ldw	r2,-16(fp)
  804e84:	10800217 	ldw	r2,8(r2)
  804e88:	1009883a 	mov	r4,r2
  804e8c:	08069c40 	call	8069c4 <__floatsidf>
  804e90:	1011883a 	mov	r8,r2
  804e94:	1813883a 	mov	r9,r3
  804e98:	e13ffc17 	ldw	r4,-16(fp)
  804e9c:	20800e17 	ldw	r2,56(r4)
  804ea0:	20c00f17 	ldw	r3,60(r4)
  804ea4:	100d883a 	mov	r6,r2
  804ea8:	180f883a 	mov	r7,r3
  804eac:	4009883a 	mov	r4,r8
  804eb0:	480b883a 	mov	r5,r9
  804eb4:	08060c80 	call	8060c8 <__subdf3>
  804eb8:	1009883a 	mov	r4,r2
  804ebc:	180b883a 	mov	r5,r3
  804ec0:	2005883a 	mov	r2,r4
  804ec4:	2807883a 	mov	r3,r5
  804ec8:	e13ffc17 	ldw	r4,-16(fp)
  804ecc:	20801b15 	stw	r2,108(r4)
  804ed0:	20c01c15 	stw	r3,112(r4)
  }
  d->_cg73 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804ed4:	e0bffc17 	ldw	r2,-16(fp)
  804ed8:	10801e03 	ldbu	r2,120(r2)
  804edc:	10803fcc 	andi	r2,r2,255
  804ee0:	1080201c 	xori	r2,r2,128
  804ee4:	10bfe004 	addi	r2,r2,-128
  804ee8:	10000c1e 	bne	r2,zero,804f1c <logic+0x3c64>
  804eec:	e0bffc17 	ldw	r2,-16(fp)
  804ef0:	10801e43 	ldbu	r2,121(r2)
  804ef4:	10803fcc 	andi	r2,r2,255
  804ef8:	1080201c 	xori	r2,r2,128
  804efc:	10bfe004 	addi	r2,r2,-128
  804f00:	1000061e 	bne	r2,zero,804f1c <logic+0x3c64>
  804f04:	e0bffc17 	ldw	r2,-16(fp)
  804f08:	10801e83 	ldbu	r2,122(r2)
  804f0c:	10803fcc 	andi	r2,r2,255
  804f10:	1080201c 	xori	r2,r2,128
  804f14:	10bfe004 	addi	r2,r2,-128
  804f18:	10000226 	beq	r2,zero,804f24 <logic+0x3c6c>
  804f1c:	00800044 	movi	r2,1
  804f20:	00000106 	br	804f28 <logic+0x3c70>
  804f24:	0005883a 	mov	r2,zero
  804f28:	1007883a 	mov	r3,r2
  804f2c:	e0bffc17 	ldw	r2,-16(fp)
  804f30:	10c03a85 	stb	r3,234(r2)
  d->_g55 = d->_g47 && !d->_cg73 || d->_g75 && !d->_cg77;
  804f34:	e0bffc17 	ldw	r2,-16(fp)
  804f38:	10802783 	ldbu	r2,158(r2)
  804f3c:	10803fcc 	andi	r2,r2,255
  804f40:	1080201c 	xori	r2,r2,128
  804f44:	10bfe004 	addi	r2,r2,-128
  804f48:	10000626 	beq	r2,zero,804f64 <logic+0x3cac>
  804f4c:	e0bffc17 	ldw	r2,-16(fp)
  804f50:	10803a83 	ldbu	r2,234(r2)
  804f54:	10803fcc 	andi	r2,r2,255
  804f58:	1080201c 	xori	r2,r2,128
  804f5c:	10bfe004 	addi	r2,r2,-128
  804f60:	10000c26 	beq	r2,zero,804f94 <logic+0x3cdc>
  804f64:	e0bffc17 	ldw	r2,-16(fp)
  804f68:	10802b83 	ldbu	r2,174(r2)
  804f6c:	10803fcc 	andi	r2,r2,255
  804f70:	1080201c 	xori	r2,r2,128
  804f74:	10bfe004 	addi	r2,r2,-128
  804f78:	10000826 	beq	r2,zero,804f9c <logic+0x3ce4>
  804f7c:	e0bffc17 	ldw	r2,-16(fp)
  804f80:	10803ac3 	ldbu	r2,235(r2)
  804f84:	10803fcc 	andi	r2,r2,255
  804f88:	1080201c 	xori	r2,r2,128
  804f8c:	10bfe004 	addi	r2,r2,-128
  804f90:	1000021e 	bne	r2,zero,804f9c <logic+0x3ce4>
  804f94:	00800044 	movi	r2,1
  804f98:	00000106 	br	804fa0 <logic+0x3ce8>
  804f9c:	0005883a 	mov	r2,zero
  804fa0:	1007883a 	mov	r3,r2
  804fa4:	e0bffc17 	ldw	r2,-16(fp)
  804fa8:	10c02905 	stb	r3,164(r2)
  d->_g3 = d->_g33 && !d->_cg72;
  804fac:	e0bffc17 	ldw	r2,-16(fp)
  804fb0:	10802503 	ldbu	r2,148(r2)
  804fb4:	10803fcc 	andi	r2,r2,255
  804fb8:	1080201c 	xori	r2,r2,128
  804fbc:	10bfe004 	addi	r2,r2,-128
  804fc0:	10000826 	beq	r2,zero,804fe4 <logic+0x3d2c>
  804fc4:	e0bffc17 	ldw	r2,-16(fp)
  804fc8:	10803a43 	ldbu	r2,233(r2)
  804fcc:	10803fcc 	andi	r2,r2,255
  804fd0:	1080201c 	xori	r2,r2,128
  804fd4:	10bfe004 	addi	r2,r2,-128
  804fd8:	1000021e 	bne	r2,zero,804fe4 <logic+0x3d2c>
  804fdc:	00800044 	movi	r2,1
  804fe0:	00000106 	br	804fe8 <logic+0x3d30>
  804fe4:	0005883a 	mov	r2,zero
  804fe8:	1007883a 	mov	r3,r2
  804fec:	e0bffc17 	ldw	r2,-16(fp)
  804ff0:	10c01f85 	stb	r3,126(r2)
  d->_cg82 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1 || d->_Pacemaker_local__Atrig2;
  804ff4:	e0bffc17 	ldw	r2,-16(fp)
  804ff8:	10801e03 	ldbu	r2,120(r2)
  804ffc:	10803fcc 	andi	r2,r2,255
  805000:	1080201c 	xori	r2,r2,128
  805004:	10bfe004 	addi	r2,r2,-128
  805008:	10000c1e 	bne	r2,zero,80503c <logic+0x3d84>
  80500c:	e0bffc17 	ldw	r2,-16(fp)
  805010:	10801e43 	ldbu	r2,121(r2)
  805014:	10803fcc 	andi	r2,r2,255
  805018:	1080201c 	xori	r2,r2,128
  80501c:	10bfe004 	addi	r2,r2,-128
  805020:	1000061e 	bne	r2,zero,80503c <logic+0x3d84>
  805024:	e0bffc17 	ldw	r2,-16(fp)
  805028:	10801e83 	ldbu	r2,122(r2)
  80502c:	10803fcc 	andi	r2,r2,255
  805030:	1080201c 	xori	r2,r2,128
  805034:	10bfe004 	addi	r2,r2,-128
  805038:	10000226 	beq	r2,zero,805044 <logic+0x3d8c>
  80503c:	00800044 	movi	r2,1
  805040:	00000106 	br	805048 <logic+0x3d90>
  805044:	0005883a 	mov	r2,zero
  805048:	1007883a 	mov	r3,r2
  80504c:	e0bffc17 	ldw	r2,-16(fp)
  805050:	10c03b85 	stb	r3,238(r2)
  d->_g57 = d->_g76 && !d->_cg79 || d->_g3 && !d->_cg82;
  805054:	e0bffc17 	ldw	r2,-16(fp)
  805058:	10802bc3 	ldbu	r2,175(r2)
  80505c:	10803fcc 	andi	r2,r2,255
  805060:	1080201c 	xori	r2,r2,128
  805064:	10bfe004 	addi	r2,r2,-128
  805068:	10000626 	beq	r2,zero,805084 <logic+0x3dcc>
  80506c:	e0bffc17 	ldw	r2,-16(fp)
  805070:	10803b43 	ldbu	r2,237(r2)
  805074:	10803fcc 	andi	r2,r2,255
  805078:	1080201c 	xori	r2,r2,128
  80507c:	10bfe004 	addi	r2,r2,-128
  805080:	10000c26 	beq	r2,zero,8050b4 <logic+0x3dfc>
  805084:	e0bffc17 	ldw	r2,-16(fp)
  805088:	10801f83 	ldbu	r2,126(r2)
  80508c:	10803fcc 	andi	r2,r2,255
  805090:	1080201c 	xori	r2,r2,128
  805094:	10bfe004 	addi	r2,r2,-128
  805098:	10000826 	beq	r2,zero,8050bc <logic+0x3e04>
  80509c:	e0bffc17 	ldw	r2,-16(fp)
  8050a0:	10803b83 	ldbu	r2,238(r2)
  8050a4:	10803fcc 	andi	r2,r2,255
  8050a8:	1080201c 	xori	r2,r2,128
  8050ac:	10bfe004 	addi	r2,r2,-128
  8050b0:	1000021e 	bne	r2,zero,8050bc <logic+0x3e04>
  8050b4:	00800044 	movi	r2,1
  8050b8:	00000106 	br	8050c0 <logic+0x3e08>
  8050bc:	0005883a 	mov	r2,zero
  8050c0:	1007883a 	mov	r3,r2
  8050c4:	e0bffc17 	ldw	r2,-16(fp)
  8050c8:	10c02985 	stb	r3,166(r2)
  d->_g97 = d->_g33 || d->_g88 && !d->_cg90;
  8050cc:	e0bffc17 	ldw	r2,-16(fp)
  8050d0:	10802503 	ldbu	r2,148(r2)
  8050d4:	10803fcc 	andi	r2,r2,255
  8050d8:	1080201c 	xori	r2,r2,128
  8050dc:	10bfe004 	addi	r2,r2,-128
  8050e0:	10000c1e 	bne	r2,zero,805114 <logic+0x3e5c>
  8050e4:	e0bffc17 	ldw	r2,-16(fp)
  8050e8:	10802d43 	ldbu	r2,181(r2)
  8050ec:	10803fcc 	andi	r2,r2,255
  8050f0:	1080201c 	xori	r2,r2,128
  8050f4:	10bfe004 	addi	r2,r2,-128
  8050f8:	10000826 	beq	r2,zero,80511c <logic+0x3e64>
  8050fc:	e0bffc17 	ldw	r2,-16(fp)
  805100:	10803bc3 	ldbu	r2,239(r2)
  805104:	10803fcc 	andi	r2,r2,255
  805108:	1080201c 	xori	r2,r2,128
  80510c:	10bfe004 	addi	r2,r2,-128
  805110:	1000021e 	bne	r2,zero,80511c <logic+0x3e64>
  805114:	00800044 	movi	r2,1
  805118:	00000106 	br	805120 <logic+0x3e68>
  80511c:	0005883a 	mov	r2,zero
  805120:	1007883a 	mov	r3,r2
  805124:	e0bffc17 	ldw	r2,-16(fp)
  805128:	10c02f45 	stb	r3,189(r2)
  d->_g99 = d->_GO || d->_g107;
  80512c:	e0bffc17 	ldw	r2,-16(fp)
  805130:	10803183 	ldbu	r2,198(r2)
  805134:	10803fcc 	andi	r2,r2,255
  805138:	1080201c 	xori	r2,r2,128
  80513c:	10bfe004 	addi	r2,r2,-128
  805140:	1000061e 	bne	r2,zero,80515c <logic+0x3ea4>
  805144:	e0bffc17 	ldw	r2,-16(fp)
  805148:	10803003 	ldbu	r2,192(r2)
  80514c:	10803fcc 	andi	r2,r2,255
  805150:	1080201c 	xori	r2,r2,128
  805154:	10bfe004 	addi	r2,r2,-128
  805158:	10000226 	beq	r2,zero,805164 <logic+0x3eac>
  80515c:	00800044 	movi	r2,1
  805160:	00000106 	br	805168 <logic+0x3eb0>
  805164:	0005883a 	mov	r2,zero
  805168:	1007883a 	mov	r3,r2
  80516c:	e0bffc17 	ldw	r2,-16(fp)
  805170:	10c02fc5 	stb	r3,191(r2)
  d->_g58 = d->_GO || d->_g111;
  805174:	e0bffc17 	ldw	r2,-16(fp)
  805178:	10803183 	ldbu	r2,198(r2)
  80517c:	10803fcc 	andi	r2,r2,255
  805180:	1080201c 	xori	r2,r2,128
  805184:	10bfe004 	addi	r2,r2,-128
  805188:	1000061e 	bne	r2,zero,8051a4 <logic+0x3eec>
  80518c:	e0bffc17 	ldw	r2,-16(fp)
  805190:	10803043 	ldbu	r2,193(r2)
  805194:	10803fcc 	andi	r2,r2,255
  805198:	1080201c 	xori	r2,r2,128
  80519c:	10bfe004 	addi	r2,r2,-128
  8051a0:	10000226 	beq	r2,zero,8051ac <logic+0x3ef4>
  8051a4:	00800044 	movi	r2,1
  8051a8:	00000106 	br	8051b0 <logic+0x3ef8>
  8051ac:	0005883a 	mov	r2,zero
  8051b0:	1007883a 	mov	r3,r2
  8051b4:	e0bffc17 	ldw	r2,-16(fp)
  8051b8:	10c029c5 	stb	r3,167(r2)
  d->_g94 = d->_GO || d->_g115;
  8051bc:	e0bffc17 	ldw	r2,-16(fp)
  8051c0:	10803183 	ldbu	r2,198(r2)
  8051c4:	10803fcc 	andi	r2,r2,255
  8051c8:	1080201c 	xori	r2,r2,128
  8051cc:	10bfe004 	addi	r2,r2,-128
  8051d0:	1000061e 	bne	r2,zero,8051ec <logic+0x3f34>
  8051d4:	e0bffc17 	ldw	r2,-16(fp)
  8051d8:	10803083 	ldbu	r2,194(r2)
  8051dc:	10803fcc 	andi	r2,r2,255
  8051e0:	1080201c 	xori	r2,r2,128
  8051e4:	10bfe004 	addi	r2,r2,-128
  8051e8:	10000226 	beq	r2,zero,8051f4 <logic+0x3f3c>
  8051ec:	00800044 	movi	r2,1
  8051f0:	00000106 	br	8051f8 <logic+0x3f40>
  8051f4:	0005883a 	mov	r2,zero
  8051f8:	1007883a 	mov	r3,r2
  8051fc:	e0bffc17 	ldw	r2,-16(fp)
  805200:	10c02e85 	stb	r3,186(r2)
  d->_g59 = d->_GO || d->_g92;
  805204:	e0bffc17 	ldw	r2,-16(fp)
  805208:	10803183 	ldbu	r2,198(r2)
  80520c:	10803fcc 	andi	r2,r2,255
  805210:	1080201c 	xori	r2,r2,128
  805214:	10bfe004 	addi	r2,r2,-128
  805218:	1000061e 	bne	r2,zero,805234 <logic+0x3f7c>
  80521c:	e0bffc17 	ldw	r2,-16(fp)
  805220:	10802e03 	ldbu	r2,184(r2)
  805224:	10803fcc 	andi	r2,r2,255
  805228:	1080201c 	xori	r2,r2,128
  80522c:	10bfe004 	addi	r2,r2,-128
  805230:	10000226 	beq	r2,zero,80523c <logic+0x3f84>
  805234:	00800044 	movi	r2,1
  805238:	00000106 	br	805240 <logic+0x3f88>
  80523c:	0005883a 	mov	r2,zero
  805240:	1007883a 	mov	r3,r2
  805244:	e0bffc17 	ldw	r2,-16(fp)
  805248:	10c02a05 	stb	r3,168(r2)
  d->_g96 = d->_GO || d->_g123;
  80524c:	e0bffc17 	ldw	r2,-16(fp)
  805250:	10803183 	ldbu	r2,198(r2)
  805254:	10803fcc 	andi	r2,r2,255
  805258:	1080201c 	xori	r2,r2,128
  80525c:	10bfe004 	addi	r2,r2,-128
  805260:	1000061e 	bne	r2,zero,80527c <logic+0x3fc4>
  805264:	e0bffc17 	ldw	r2,-16(fp)
  805268:	108030c3 	ldbu	r2,195(r2)
  80526c:	10803fcc 	andi	r2,r2,255
  805270:	1080201c 	xori	r2,r2,128
  805274:	10bfe004 	addi	r2,r2,-128
  805278:	10000226 	beq	r2,zero,805284 <logic+0x3fcc>
  80527c:	00800044 	movi	r2,1
  805280:	00000106 	br	805288 <logic+0x3fd0>
  805284:	0005883a 	mov	r2,zero
  805288:	1007883a 	mov	r3,r2
  80528c:	e0bffc17 	ldw	r2,-16(fp)
  805290:	10c02f05 	stb	r3,188(r2)
  d->_g66 = d->_GO || d->_g127;
  805294:	e0bffc17 	ldw	r2,-16(fp)
  805298:	10803183 	ldbu	r2,198(r2)
  80529c:	10803fcc 	andi	r2,r2,255
  8052a0:	1080201c 	xori	r2,r2,128
  8052a4:	10bfe004 	addi	r2,r2,-128
  8052a8:	1000061e 	bne	r2,zero,8052c4 <logic+0x400c>
  8052ac:	e0bffc17 	ldw	r2,-16(fp)
  8052b0:	10803103 	ldbu	r2,196(r2)
  8052b4:	10803fcc 	andi	r2,r2,255
  8052b8:	1080201c 	xori	r2,r2,128
  8052bc:	10bfe004 	addi	r2,r2,-128
  8052c0:	10000226 	beq	r2,zero,8052cc <logic+0x4014>
  8052c4:	00800044 	movi	r2,1
  8052c8:	00000106 	br	8052d0 <logic+0x4018>
  8052cc:	0005883a 	mov	r2,zero
  8052d0:	1007883a 	mov	r3,r2
  8052d4:	e0bffc17 	ldw	r2,-16(fp)
  8052d8:	10c02ac5 	stb	r3,171(r2)
}
  8052dc:	0001883a 	nop
  8052e0:	e6fffd04 	addi	sp,fp,-12
  8052e4:	dfc00417 	ldw	ra,16(sp)
  8052e8:	df000317 	ldw	fp,12(sp)
  8052ec:	dc800217 	ldw	r18,8(sp)
  8052f0:	dc400117 	ldw	r17,4(sp)
  8052f4:	dc000017 	ldw	r16,0(sp)
  8052f8:	dec00504 	addi	sp,sp,20
  8052fc:	f800283a 	ret

00805300 <reset>:

void reset(TickData* d) {
  805300:	defffe04 	addi	sp,sp,-8
  805304:	df000115 	stw	fp,4(sp)
  805308:	df000104 	addi	fp,sp,4
  80530c:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  805310:	e0bfff17 	ldw	r2,-4(fp)
  805314:	00c00044 	movi	r3,1
  805318:	10c03185 	stb	r3,198(r2)
  d->_TERM = 0;
  80531c:	e0bfff17 	ldw	r2,-4(fp)
  805320:	10003f45 	stb	zero,253(r2)
  d->AVI = AVI_VALUE;
  805324:	e0bfff17 	ldw	r2,-4(fp)
  805328:	00c04b04 	movi	r3,300
  80532c:	10c00015 	stw	r3,0(r2)
  d->AEI = AEI_VALUE;
  805330:	e0bfff17 	ldw	r2,-4(fp)
  805334:	00c0c804 	movi	r3,800
  805338:	10c00115 	stw	r3,4(r2)
  d->PVARP = PVARP_VALUE;
  80533c:	e0bfff17 	ldw	r2,-4(fp)
  805340:	00c00c84 	movi	r3,50
  805344:	10c00215 	stw	r3,8(r2)
  d->VRP = VRP_VALUE;
  805348:	e0bfff17 	ldw	r2,-4(fp)
  80534c:	00c02584 	movi	r3,150
  805350:	10c00315 	stw	r3,12(r2)
  d->LRI = LRI_VALUE;
  805354:	e0bfff17 	ldw	r2,-4(fp)
  805358:	00c0ed84 	movi	r3,950
  80535c:	10c00415 	stw	r3,16(r2)
  d->URI = URI_VALUE;
  805360:	e0bfff17 	ldw	r2,-4(fp)
  805364:	00c0e104 	movi	r3,900
  805368:	10c00515 	stw	r3,20(r2)
  d->VRP_Clock = 0;
  80536c:	e0bfff17 	ldw	r2,-4(fp)
  805370:	10000615 	stw	zero,24(r2)
  805374:	10000715 	stw	zero,28(r2)
  d->AEI_Clock = 0;
  805378:	e0bfff17 	ldw	r2,-4(fp)
  80537c:	10000815 	stw	zero,32(r2)
  805380:	10000915 	stw	zero,36(r2)
  d->LRI_Clock = 0;
  805384:	e0bfff17 	ldw	r2,-4(fp)
  805388:	10000a15 	stw	zero,40(r2)
  80538c:	10000b15 	stw	zero,44(r2)
  d->URI_Clock = 0;
  805390:	e0bfff17 	ldw	r2,-4(fp)
  805394:	10000c15 	stw	zero,48(r2)
  805398:	10000d15 	stw	zero,52(r2)
  d->PVARP_Clock = 0;
  80539c:	e0bfff17 	ldw	r2,-4(fp)
  8053a0:	10000e15 	stw	zero,56(r2)
  8053a4:	10000f15 	stw	zero,60(r2)
  d->AVI_Clock = 0;
  8053a8:	e0bfff17 	ldw	r2,-4(fp)
  8053ac:	10001015 	stw	zero,64(r2)
  8053b0:	10001115 	stw	zero,68(r2)
  d->deltaT = 0.0;
  8053b4:	e0bfff17 	ldw	r2,-4(fp)
  8053b8:	10001915 	stw	zero,100(r2)
  8053bc:	10001a15 	stw	zero,104(r2)
  d->sleepT = 0.0;
  8053c0:	e0bfff17 	ldw	r2,-4(fp)
  8053c4:	10001b15 	stw	zero,108(r2)
  8053c8:	10001c15 	stw	zero,112(r2)
  d->_taken_transitions[0] = 0;
  8053cc:	e0bfff17 	ldw	r2,-4(fp)
  8053d0:	10001215 	stw	zero,72(r2)
  d->_taken_transitions[1] = 0;
  8053d4:	e0bfff17 	ldw	r2,-4(fp)
  8053d8:	10001315 	stw	zero,76(r2)
  d->_taken_transitions[2] = 0;
  8053dc:	e0bfff17 	ldw	r2,-4(fp)
  8053e0:	10001415 	stw	zero,80(r2)
  d->_taken_transitions[3] = 0;
  8053e4:	e0bfff17 	ldw	r2,-4(fp)
  8053e8:	10001515 	stw	zero,84(r2)
  d->_taken_transitions[4] = 0;
  8053ec:	e0bfff17 	ldw	r2,-4(fp)
  8053f0:	10001615 	stw	zero,88(r2)
  d->_taken_transitions[5] = 0;
  8053f4:	e0bfff17 	ldw	r2,-4(fp)
  8053f8:	10001715 	stw	zero,92(r2)
  d->_taken_transitions[6] = 0;
  8053fc:	e0bfff17 	ldw	r2,-4(fp)
  805400:	10001815 	stw	zero,96(r2)
  d->_pg66 = 0;
  805404:	e0bfff17 	ldw	r2,-4(fp)
  805408:	10003f85 	stb	zero,254(r2)
  d->_pg44 = 0;
  80540c:	e0bfff17 	ldw	r2,-4(fp)
  805410:	10003fc5 	stb	zero,255(r2)
  d->_pg38 = 0;
  805414:	e0bfff17 	ldw	r2,-4(fp)
  805418:	10004005 	stb	zero,256(r2)
  d->_pg96 = 0;
  80541c:	e0bfff17 	ldw	r2,-4(fp)
  805420:	10004045 	stb	zero,257(r2)
  d->_pg97 = 0;
  805424:	e0bfff17 	ldw	r2,-4(fp)
  805428:	10004085 	stb	zero,258(r2)
  d->_pg58 = 0;
  80542c:	e0bfff17 	ldw	r2,-4(fp)
  805430:	100040c5 	stb	zero,259(r2)
  d->_pg57 = 0;
  805434:	e0bfff17 	ldw	r2,-4(fp)
  805438:	10004105 	stb	zero,260(r2)
  d->_pg55 = 0;
  80543c:	e0bfff17 	ldw	r2,-4(fp)
  805440:	10004145 	stb	zero,261(r2)
  d->_pg67_e1 = 0;
  805444:	e0bfff17 	ldw	r2,-4(fp)
  805448:	10004185 	stb	zero,262(r2)
  d->_pg32 = 0;
  80544c:	e0bfff17 	ldw	r2,-4(fp)
  805450:	100041c5 	stb	zero,263(r2)
  d->_pg10 = 0;
  805454:	e0bfff17 	ldw	r2,-4(fp)
  805458:	10004205 	stb	zero,264(r2)
  d->_pg59 = 0;
  80545c:	e0bfff17 	ldw	r2,-4(fp)
  805460:	10004245 	stb	zero,265(r2)
  d->_pg20 = 0;
  805464:	e0bfff17 	ldw	r2,-4(fp)
  805468:	10004285 	stb	zero,266(r2)
  d->_pg99 = 0;
  80546c:	e0bfff17 	ldw	r2,-4(fp)
  805470:	100042c5 	stb	zero,267(r2)
  d->_pg94 = 0;
  805474:	e0bfff17 	ldw	r2,-4(fp)
  805478:	10004305 	stb	zero,268(r2)
  d->_pg32_e3 = 0;
  80547c:	e0bfff17 	ldw	r2,-4(fp)
  805480:	10004345 	stb	zero,269(r2)
  d->_pg21_e2 = 0;
  805484:	e0bfff17 	ldw	r2,-4(fp)
  805488:	10004385 	stb	zero,270(r2)
  d->_pg5 = 0;
  80548c:	e0bfff17 	ldw	r2,-4(fp)
  805490:	100043c5 	stb	zero,271(r2)
  d->_pg93 = 0;
  805494:	e0bfff17 	ldw	r2,-4(fp)
  805498:	10004405 	stb	zero,272(r2)
  d->_pg16 = 0;
  80549c:	e0bfff17 	ldw	r2,-4(fp)
  8054a0:	10004445 	stb	zero,273(r2)
  d->_pg11 = 0;
  8054a4:	e0bfff17 	ldw	r2,-4(fp)
  8054a8:	10004485 	stb	zero,274(r2)
}
  8054ac:	0001883a 	nop
  8054b0:	e037883a 	mov	sp,fp
  8054b4:	df000017 	ldw	fp,0(sp)
  8054b8:	dec00104 	addi	sp,sp,4
  8054bc:	f800283a 	ret

008054c0 <tick>:

void tick(TickData* d) {
  8054c0:	defffd04 	addi	sp,sp,-12
  8054c4:	dfc00215 	stw	ra,8(sp)
  8054c8:	df000115 	stw	fp,4(sp)
  8054cc:	df000104 	addi	fp,sp,4
  8054d0:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  8054d4:	e13fff17 	ldw	r4,-4(fp)
  8054d8:	08012b80 	call	8012b8 <logic>

  d->_pg66 = d->_g66;
  8054dc:	e0bfff17 	ldw	r2,-4(fp)
  8054e0:	10c02ac3 	ldbu	r3,171(r2)
  8054e4:	e0bfff17 	ldw	r2,-4(fp)
  8054e8:	10c03f85 	stb	r3,254(r2)
  d->_pg44 = d->_g44;
  8054ec:	e0bfff17 	ldw	r2,-4(fp)
  8054f0:	10c02703 	ldbu	r3,156(r2)
  8054f4:	e0bfff17 	ldw	r2,-4(fp)
  8054f8:	10c03fc5 	stb	r3,255(r2)
  d->_pg38 = d->_g38;
  8054fc:	e0bfff17 	ldw	r2,-4(fp)
  805500:	10c025c3 	ldbu	r3,151(r2)
  805504:	e0bfff17 	ldw	r2,-4(fp)
  805508:	10c04005 	stb	r3,256(r2)
  d->_pg96 = d->_g96;
  80550c:	e0bfff17 	ldw	r2,-4(fp)
  805510:	10c02f03 	ldbu	r3,188(r2)
  805514:	e0bfff17 	ldw	r2,-4(fp)
  805518:	10c04045 	stb	r3,257(r2)
  d->_pg97 = d->_g97;
  80551c:	e0bfff17 	ldw	r2,-4(fp)
  805520:	10c02f43 	ldbu	r3,189(r2)
  805524:	e0bfff17 	ldw	r2,-4(fp)
  805528:	10c04085 	stb	r3,258(r2)
  d->_pg58 = d->_g58;
  80552c:	e0bfff17 	ldw	r2,-4(fp)
  805530:	10c029c3 	ldbu	r3,167(r2)
  805534:	e0bfff17 	ldw	r2,-4(fp)
  805538:	10c040c5 	stb	r3,259(r2)
  d->_pg57 = d->_g57;
  80553c:	e0bfff17 	ldw	r2,-4(fp)
  805540:	10c02983 	ldbu	r3,166(r2)
  805544:	e0bfff17 	ldw	r2,-4(fp)
  805548:	10c04105 	stb	r3,260(r2)
  d->_pg55 = d->_g55;
  80554c:	e0bfff17 	ldw	r2,-4(fp)
  805550:	10c02903 	ldbu	r3,164(r2)
  805554:	e0bfff17 	ldw	r2,-4(fp)
  805558:	10c04145 	stb	r3,261(r2)
  d->_pg67_e1 = d->_g67_e1;
  80555c:	e0bfff17 	ldw	r2,-4(fp)
  805560:	10c03e83 	ldbu	r3,250(r2)
  805564:	e0bfff17 	ldw	r2,-4(fp)
  805568:	10c04185 	stb	r3,262(r2)
  d->_pg32 = d->_g32;
  80556c:	e0bfff17 	ldw	r2,-4(fp)
  805570:	10c024c3 	ldbu	r3,147(r2)
  805574:	e0bfff17 	ldw	r2,-4(fp)
  805578:	10c041c5 	stb	r3,263(r2)
  d->_pg10 = d->_g10;
  80557c:	e0bfff17 	ldw	r2,-4(fp)
  805580:	10c020c3 	ldbu	r3,131(r2)
  805584:	e0bfff17 	ldw	r2,-4(fp)
  805588:	10c04205 	stb	r3,264(r2)
  d->_pg59 = d->_g59;
  80558c:	e0bfff17 	ldw	r2,-4(fp)
  805590:	10c02a03 	ldbu	r3,168(r2)
  805594:	e0bfff17 	ldw	r2,-4(fp)
  805598:	10c04245 	stb	r3,265(r2)
  d->_pg20 = d->_g20;
  80559c:	e0bfff17 	ldw	r2,-4(fp)
  8055a0:	10c02283 	ldbu	r3,138(r2)
  8055a4:	e0bfff17 	ldw	r2,-4(fp)
  8055a8:	10c04285 	stb	r3,266(r2)
  d->_pg99 = d->_g99;
  8055ac:	e0bfff17 	ldw	r2,-4(fp)
  8055b0:	10c02fc3 	ldbu	r3,191(r2)
  8055b4:	e0bfff17 	ldw	r2,-4(fp)
  8055b8:	10c042c5 	stb	r3,267(r2)
  d->_pg94 = d->_g94;
  8055bc:	e0bfff17 	ldw	r2,-4(fp)
  8055c0:	10c02e83 	ldbu	r3,186(r2)
  8055c4:	e0bfff17 	ldw	r2,-4(fp)
  8055c8:	10c04305 	stb	r3,268(r2)
  d->_pg32_e3 = d->_g32_e3;
  8055cc:	e0bfff17 	ldw	r2,-4(fp)
  8055d0:	10c03dc3 	ldbu	r3,247(r2)
  8055d4:	e0bfff17 	ldw	r2,-4(fp)
  8055d8:	10c04345 	stb	r3,269(r2)
  d->_pg21_e2 = d->_g21_e2;
  8055dc:	e0bfff17 	ldw	r2,-4(fp)
  8055e0:	10c03d83 	ldbu	r3,246(r2)
  8055e4:	e0bfff17 	ldw	r2,-4(fp)
  8055e8:	10c04385 	stb	r3,270(r2)
  d->_pg5 = d->_g5;
  8055ec:	e0bfff17 	ldw	r2,-4(fp)
  8055f0:	10c01fc3 	ldbu	r3,127(r2)
  8055f4:	e0bfff17 	ldw	r2,-4(fp)
  8055f8:	10c043c5 	stb	r3,271(r2)
  d->_pg93 = d->_g93;
  8055fc:	e0bfff17 	ldw	r2,-4(fp)
  805600:	10c02e43 	ldbu	r3,185(r2)
  805604:	e0bfff17 	ldw	r2,-4(fp)
  805608:	10c04405 	stb	r3,272(r2)
  d->_pg16 = d->_g16;
  80560c:	e0bfff17 	ldw	r2,-4(fp)
  805610:	10c021c3 	ldbu	r3,135(r2)
  805614:	e0bfff17 	ldw	r2,-4(fp)
  805618:	10c04445 	stb	r3,273(r2)
  d->_pg11 = d->_g11;
  80561c:	e0bfff17 	ldw	r2,-4(fp)
  805620:	10c02103 	ldbu	r3,132(r2)
  805624:	e0bfff17 	ldw	r2,-4(fp)
  805628:	10c04485 	stb	r3,274(r2)
  d->_GO = 0;
  80562c:	e0bfff17 	ldw	r2,-4(fp)
  805630:	10003185 	stb	zero,198(r2)
}
  805634:	0001883a 	nop
  805638:	e037883a 	mov	sp,fp
  80563c:	dfc00117 	ldw	ra,4(sp)
  805640:	df000017 	ldw	fp,0(sp)
  805644:	dec00204 	addi	sp,sp,8
  805648:	f800283a 	ret

0080564c <__adddf3>:
  80564c:	02c00434 	movhi	r11,16
  805650:	5affffc4 	addi	r11,r11,-1
  805654:	2806d7fa 	srli	r3,r5,31
  805658:	2ad4703a 	and	r10,r5,r11
  80565c:	3ad2703a 	and	r9,r7,r11
  805660:	3804d53a 	srli	r2,r7,20
  805664:	3018d77a 	srli	r12,r6,29
  805668:	280ad53a 	srli	r5,r5,20
  80566c:	501490fa 	slli	r10,r10,3
  805670:	2010d77a 	srli	r8,r4,29
  805674:	481290fa 	slli	r9,r9,3
  805678:	380ed7fa 	srli	r7,r7,31
  80567c:	defffb04 	addi	sp,sp,-20
  805680:	dc800215 	stw	r18,8(sp)
  805684:	dc400115 	stw	r17,4(sp)
  805688:	dc000015 	stw	r16,0(sp)
  80568c:	dfc00415 	stw	ra,16(sp)
  805690:	dcc00315 	stw	r19,12(sp)
  805694:	1c803fcc 	andi	r18,r3,255
  805698:	2c01ffcc 	andi	r16,r5,2047
  80569c:	5210b03a 	or	r8,r10,r8
  8056a0:	202290fa 	slli	r17,r4,3
  8056a4:	1081ffcc 	andi	r2,r2,2047
  8056a8:	4b12b03a 	or	r9,r9,r12
  8056ac:	300c90fa 	slli	r6,r6,3
  8056b0:	91c07526 	beq	r18,r7,805888 <__adddf3+0x23c>
  8056b4:	8087c83a 	sub	r3,r16,r2
  8056b8:	00c0ab0e 	bge	zero,r3,805968 <__adddf3+0x31c>
  8056bc:	10002a1e 	bne	r2,zero,805768 <__adddf3+0x11c>
  8056c0:	4984b03a 	or	r2,r9,r6
  8056c4:	1000961e 	bne	r2,zero,805920 <__adddf3+0x2d4>
  8056c8:	888001cc 	andi	r2,r17,7
  8056cc:	10000726 	beq	r2,zero,8056ec <__adddf3+0xa0>
  8056d0:	888003cc 	andi	r2,r17,15
  8056d4:	00c00104 	movi	r3,4
  8056d8:	10c00426 	beq	r2,r3,8056ec <__adddf3+0xa0>
  8056dc:	88c7883a 	add	r3,r17,r3
  8056e0:	1c63803a 	cmpltu	r17,r3,r17
  8056e4:	4451883a 	add	r8,r8,r17
  8056e8:	1823883a 	mov	r17,r3
  8056ec:	4080202c 	andhi	r2,r8,128
  8056f0:	10005926 	beq	r2,zero,805858 <__adddf3+0x20c>
  8056f4:	84000044 	addi	r16,r16,1
  8056f8:	0081ffc4 	movi	r2,2047
  8056fc:	8080ba26 	beq	r16,r2,8059e8 <__adddf3+0x39c>
  805700:	00bfe034 	movhi	r2,65408
  805704:	10bfffc4 	addi	r2,r2,-1
  805708:	4090703a 	and	r8,r8,r2
  80570c:	4004977a 	slli	r2,r8,29
  805710:	4010927a 	slli	r8,r8,9
  805714:	8822d0fa 	srli	r17,r17,3
  805718:	8401ffcc 	andi	r16,r16,2047
  80571c:	4010d33a 	srli	r8,r8,12
  805720:	9007883a 	mov	r3,r18
  805724:	1444b03a 	or	r2,r2,r17
  805728:	8401ffcc 	andi	r16,r16,2047
  80572c:	8020953a 	slli	r16,r16,20
  805730:	18c03fcc 	andi	r3,r3,255
  805734:	01000434 	movhi	r4,16
  805738:	213fffc4 	addi	r4,r4,-1
  80573c:	180697fa 	slli	r3,r3,31
  805740:	4110703a 	and	r8,r8,r4
  805744:	4410b03a 	or	r8,r8,r16
  805748:	40c6b03a 	or	r3,r8,r3
  80574c:	dfc00417 	ldw	ra,16(sp)
  805750:	dcc00317 	ldw	r19,12(sp)
  805754:	dc800217 	ldw	r18,8(sp)
  805758:	dc400117 	ldw	r17,4(sp)
  80575c:	dc000017 	ldw	r16,0(sp)
  805760:	dec00504 	addi	sp,sp,20
  805764:	f800283a 	ret
  805768:	0081ffc4 	movi	r2,2047
  80576c:	80bfd626 	beq	r16,r2,8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805770:	4a402034 	orhi	r9,r9,128
  805774:	00800e04 	movi	r2,56
  805778:	10c09f16 	blt	r2,r3,8059f8 <__adddf3+0x3ac>
  80577c:	008007c4 	movi	r2,31
  805780:	10c0c216 	blt	r2,r3,805a8c <__adddf3+0x440>
  805784:	00800804 	movi	r2,32
  805788:	10c5c83a 	sub	r2,r2,r3
  80578c:	488a983a 	sll	r5,r9,r2
  805790:	30c8d83a 	srl	r4,r6,r3
  805794:	3084983a 	sll	r2,r6,r2
  805798:	48c6d83a 	srl	r3,r9,r3
  80579c:	290cb03a 	or	r6,r5,r4
  8057a0:	1004c03a 	cmpne	r2,r2,zero
  8057a4:	308cb03a 	or	r6,r6,r2
  8057a8:	898dc83a 	sub	r6,r17,r6
  8057ac:	89a3803a 	cmpltu	r17,r17,r6
  8057b0:	40d1c83a 	sub	r8,r8,r3
  8057b4:	4451c83a 	sub	r8,r8,r17
  8057b8:	3023883a 	mov	r17,r6
  8057bc:	4080202c 	andhi	r2,r8,128
  8057c0:	10002326 	beq	r2,zero,805850 <__adddf3+0x204>
  8057c4:	04c02034 	movhi	r19,128
  8057c8:	9cffffc4 	addi	r19,r19,-1
  8057cc:	44e6703a 	and	r19,r8,r19
  8057d0:	98007626 	beq	r19,zero,8059ac <__adddf3+0x360>
  8057d4:	9809883a 	mov	r4,r19
  8057d8:	0806b480 	call	806b48 <__clzsi2>
  8057dc:	10fffe04 	addi	r3,r2,-8
  8057e0:	010007c4 	movi	r4,31
  8057e4:	20c07716 	blt	r4,r3,8059c4 <__adddf3+0x378>
  8057e8:	00800804 	movi	r2,32
  8057ec:	10c5c83a 	sub	r2,r2,r3
  8057f0:	8884d83a 	srl	r2,r17,r2
  8057f4:	98d0983a 	sll	r8,r19,r3
  8057f8:	88e2983a 	sll	r17,r17,r3
  8057fc:	1204b03a 	or	r2,r2,r8
  805800:	1c007416 	blt	r3,r16,8059d4 <__adddf3+0x388>
  805804:	1c21c83a 	sub	r16,r3,r16
  805808:	82000044 	addi	r8,r16,1
  80580c:	00c007c4 	movi	r3,31
  805810:	1a009116 	blt	r3,r8,805a58 <__adddf3+0x40c>
  805814:	00c00804 	movi	r3,32
  805818:	1a07c83a 	sub	r3,r3,r8
  80581c:	8a08d83a 	srl	r4,r17,r8
  805820:	88e2983a 	sll	r17,r17,r3
  805824:	10c6983a 	sll	r3,r2,r3
  805828:	1210d83a 	srl	r8,r2,r8
  80582c:	8804c03a 	cmpne	r2,r17,zero
  805830:	1906b03a 	or	r3,r3,r4
  805834:	18a2b03a 	or	r17,r3,r2
  805838:	0021883a 	mov	r16,zero
  80583c:	003fa206 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805840:	1890b03a 	or	r8,r3,r2
  805844:	40017d26 	beq	r8,zero,805e3c <__adddf3+0x7f0>
  805848:	1011883a 	mov	r8,r2
  80584c:	1823883a 	mov	r17,r3
  805850:	888001cc 	andi	r2,r17,7
  805854:	103f9e1e 	bne	r2,zero,8056d0 <__alt_mem_onchip_mem+0xff7fd6d0>
  805858:	4004977a 	slli	r2,r8,29
  80585c:	8822d0fa 	srli	r17,r17,3
  805860:	4010d0fa 	srli	r8,r8,3
  805864:	9007883a 	mov	r3,r18
  805868:	1444b03a 	or	r2,r2,r17
  80586c:	0101ffc4 	movi	r4,2047
  805870:	81002426 	beq	r16,r4,805904 <__adddf3+0x2b8>
  805874:	8120703a 	and	r16,r16,r4
  805878:	01000434 	movhi	r4,16
  80587c:	213fffc4 	addi	r4,r4,-1
  805880:	4110703a 	and	r8,r8,r4
  805884:	003fa806 	br	805728 <__alt_mem_onchip_mem+0xff7fd728>
  805888:	8089c83a 	sub	r4,r16,r2
  80588c:	01005e0e 	bge	zero,r4,805a08 <__adddf3+0x3bc>
  805890:	10002b26 	beq	r2,zero,805940 <__adddf3+0x2f4>
  805894:	0081ffc4 	movi	r2,2047
  805898:	80bf8b26 	beq	r16,r2,8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  80589c:	4a402034 	orhi	r9,r9,128
  8058a0:	00800e04 	movi	r2,56
  8058a4:	1100a40e 	bge	r2,r4,805b38 <__adddf3+0x4ec>
  8058a8:	498cb03a 	or	r6,r9,r6
  8058ac:	300ac03a 	cmpne	r5,r6,zero
  8058b0:	0013883a 	mov	r9,zero
  8058b4:	2c4b883a 	add	r5,r5,r17
  8058b8:	2c63803a 	cmpltu	r17,r5,r17
  8058bc:	4a11883a 	add	r8,r9,r8
  8058c0:	8a11883a 	add	r8,r17,r8
  8058c4:	2823883a 	mov	r17,r5
  8058c8:	4080202c 	andhi	r2,r8,128
  8058cc:	103fe026 	beq	r2,zero,805850 <__alt_mem_onchip_mem+0xff7fd850>
  8058d0:	84000044 	addi	r16,r16,1
  8058d4:	0081ffc4 	movi	r2,2047
  8058d8:	8080d226 	beq	r16,r2,805c24 <__adddf3+0x5d8>
  8058dc:	00bfe034 	movhi	r2,65408
  8058e0:	10bfffc4 	addi	r2,r2,-1
  8058e4:	4090703a 	and	r8,r8,r2
  8058e8:	880ad07a 	srli	r5,r17,1
  8058ec:	400897fa 	slli	r4,r8,31
  8058f0:	88c0004c 	andi	r3,r17,1
  8058f4:	28e2b03a 	or	r17,r5,r3
  8058f8:	4010d07a 	srli	r8,r8,1
  8058fc:	2462b03a 	or	r17,r4,r17
  805900:	003f7106 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805904:	4088b03a 	or	r4,r8,r2
  805908:	20014526 	beq	r4,zero,805e20 <__adddf3+0x7d4>
  80590c:	01000434 	movhi	r4,16
  805910:	42000234 	orhi	r8,r8,8
  805914:	213fffc4 	addi	r4,r4,-1
  805918:	4110703a 	and	r8,r8,r4
  80591c:	003f8206 	br	805728 <__alt_mem_onchip_mem+0xff7fd728>
  805920:	18ffffc4 	addi	r3,r3,-1
  805924:	1800491e 	bne	r3,zero,805a4c <__adddf3+0x400>
  805928:	898bc83a 	sub	r5,r17,r6
  80592c:	8963803a 	cmpltu	r17,r17,r5
  805930:	4251c83a 	sub	r8,r8,r9
  805934:	4451c83a 	sub	r8,r8,r17
  805938:	2823883a 	mov	r17,r5
  80593c:	003f9f06 	br	8057bc <__alt_mem_onchip_mem+0xff7fd7bc>
  805940:	4984b03a 	or	r2,r9,r6
  805944:	103f6026 	beq	r2,zero,8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805948:	213fffc4 	addi	r4,r4,-1
  80594c:	2000931e 	bne	r4,zero,805b9c <__adddf3+0x550>
  805950:	898d883a 	add	r6,r17,r6
  805954:	3463803a 	cmpltu	r17,r6,r17
  805958:	4251883a 	add	r8,r8,r9
  80595c:	8a11883a 	add	r8,r17,r8
  805960:	3023883a 	mov	r17,r6
  805964:	003fd806 	br	8058c8 <__alt_mem_onchip_mem+0xff7fd8c8>
  805968:	1800541e 	bne	r3,zero,805abc <__adddf3+0x470>
  80596c:	80800044 	addi	r2,r16,1
  805970:	1081ffcc 	andi	r2,r2,2047
  805974:	00c00044 	movi	r3,1
  805978:	1880a00e 	bge	r3,r2,805bfc <__adddf3+0x5b0>
  80597c:	8989c83a 	sub	r4,r17,r6
  805980:	8905803a 	cmpltu	r2,r17,r4
  805984:	4267c83a 	sub	r19,r8,r9
  805988:	98a7c83a 	sub	r19,r19,r2
  80598c:	9880202c 	andhi	r2,r19,128
  805990:	10006326 	beq	r2,zero,805b20 <__adddf3+0x4d4>
  805994:	3463c83a 	sub	r17,r6,r17
  805998:	4a07c83a 	sub	r3,r9,r8
  80599c:	344d803a 	cmpltu	r6,r6,r17
  8059a0:	19a7c83a 	sub	r19,r3,r6
  8059a4:	3825883a 	mov	r18,r7
  8059a8:	983f8a1e 	bne	r19,zero,8057d4 <__alt_mem_onchip_mem+0xff7fd7d4>
  8059ac:	8809883a 	mov	r4,r17
  8059b0:	0806b480 	call	806b48 <__clzsi2>
  8059b4:	10800804 	addi	r2,r2,32
  8059b8:	10fffe04 	addi	r3,r2,-8
  8059bc:	010007c4 	movi	r4,31
  8059c0:	20ff890e 	bge	r4,r3,8057e8 <__alt_mem_onchip_mem+0xff7fd7e8>
  8059c4:	10bff604 	addi	r2,r2,-40
  8059c8:	8884983a 	sll	r2,r17,r2
  8059cc:	0023883a 	mov	r17,zero
  8059d0:	1c3f8c0e 	bge	r3,r16,805804 <__alt_mem_onchip_mem+0xff7fd804>
  8059d4:	023fe034 	movhi	r8,65408
  8059d8:	423fffc4 	addi	r8,r8,-1
  8059dc:	80e1c83a 	sub	r16,r16,r3
  8059e0:	1210703a 	and	r8,r2,r8
  8059e4:	003f3806 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  8059e8:	9007883a 	mov	r3,r18
  8059ec:	0011883a 	mov	r8,zero
  8059f0:	0005883a 	mov	r2,zero
  8059f4:	003f4c06 	br	805728 <__alt_mem_onchip_mem+0xff7fd728>
  8059f8:	498cb03a 	or	r6,r9,r6
  8059fc:	300cc03a 	cmpne	r6,r6,zero
  805a00:	0007883a 	mov	r3,zero
  805a04:	003f6806 	br	8057a8 <__alt_mem_onchip_mem+0xff7fd7a8>
  805a08:	20009c1e 	bne	r4,zero,805c7c <__adddf3+0x630>
  805a0c:	80800044 	addi	r2,r16,1
  805a10:	1141ffcc 	andi	r5,r2,2047
  805a14:	01000044 	movi	r4,1
  805a18:	2140670e 	bge	r4,r5,805bb8 <__adddf3+0x56c>
  805a1c:	0101ffc4 	movi	r4,2047
  805a20:	11007f26 	beq	r2,r4,805c20 <__adddf3+0x5d4>
  805a24:	898d883a 	add	r6,r17,r6
  805a28:	4247883a 	add	r3,r8,r9
  805a2c:	3451803a 	cmpltu	r8,r6,r17
  805a30:	40d1883a 	add	r8,r8,r3
  805a34:	402297fa 	slli	r17,r8,31
  805a38:	300cd07a 	srli	r6,r6,1
  805a3c:	4010d07a 	srli	r8,r8,1
  805a40:	1021883a 	mov	r16,r2
  805a44:	89a2b03a 	or	r17,r17,r6
  805a48:	003f1f06 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805a4c:	0081ffc4 	movi	r2,2047
  805a50:	80bf481e 	bne	r16,r2,805774 <__alt_mem_onchip_mem+0xff7fd774>
  805a54:	003f1c06 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805a58:	843ff844 	addi	r16,r16,-31
  805a5c:	01000804 	movi	r4,32
  805a60:	1406d83a 	srl	r3,r2,r16
  805a64:	41005026 	beq	r8,r4,805ba8 <__adddf3+0x55c>
  805a68:	01001004 	movi	r4,64
  805a6c:	2211c83a 	sub	r8,r4,r8
  805a70:	1204983a 	sll	r2,r2,r8
  805a74:	88a2b03a 	or	r17,r17,r2
  805a78:	8822c03a 	cmpne	r17,r17,zero
  805a7c:	1c62b03a 	or	r17,r3,r17
  805a80:	0011883a 	mov	r8,zero
  805a84:	0021883a 	mov	r16,zero
  805a88:	003f7106 	br	805850 <__alt_mem_onchip_mem+0xff7fd850>
  805a8c:	193ff804 	addi	r4,r3,-32
  805a90:	00800804 	movi	r2,32
  805a94:	4908d83a 	srl	r4,r9,r4
  805a98:	18804526 	beq	r3,r2,805bb0 <__adddf3+0x564>
  805a9c:	00801004 	movi	r2,64
  805aa0:	10c5c83a 	sub	r2,r2,r3
  805aa4:	4886983a 	sll	r3,r9,r2
  805aa8:	198cb03a 	or	r6,r3,r6
  805aac:	300cc03a 	cmpne	r6,r6,zero
  805ab0:	218cb03a 	or	r6,r4,r6
  805ab4:	0007883a 	mov	r3,zero
  805ab8:	003f3b06 	br	8057a8 <__alt_mem_onchip_mem+0xff7fd7a8>
  805abc:	80002a26 	beq	r16,zero,805b68 <__adddf3+0x51c>
  805ac0:	0101ffc4 	movi	r4,2047
  805ac4:	11006826 	beq	r2,r4,805c68 <__adddf3+0x61c>
  805ac8:	00c7c83a 	sub	r3,zero,r3
  805acc:	42002034 	orhi	r8,r8,128
  805ad0:	01000e04 	movi	r4,56
  805ad4:	20c07c16 	blt	r4,r3,805cc8 <__adddf3+0x67c>
  805ad8:	010007c4 	movi	r4,31
  805adc:	20c0da16 	blt	r4,r3,805e48 <__adddf3+0x7fc>
  805ae0:	01000804 	movi	r4,32
  805ae4:	20c9c83a 	sub	r4,r4,r3
  805ae8:	4114983a 	sll	r10,r8,r4
  805aec:	88cad83a 	srl	r5,r17,r3
  805af0:	8908983a 	sll	r4,r17,r4
  805af4:	40c6d83a 	srl	r3,r8,r3
  805af8:	5162b03a 	or	r17,r10,r5
  805afc:	2008c03a 	cmpne	r4,r4,zero
  805b00:	8922b03a 	or	r17,r17,r4
  805b04:	3463c83a 	sub	r17,r6,r17
  805b08:	48c7c83a 	sub	r3,r9,r3
  805b0c:	344d803a 	cmpltu	r6,r6,r17
  805b10:	1991c83a 	sub	r8,r3,r6
  805b14:	1021883a 	mov	r16,r2
  805b18:	3825883a 	mov	r18,r7
  805b1c:	003f2706 	br	8057bc <__alt_mem_onchip_mem+0xff7fd7bc>
  805b20:	24d0b03a 	or	r8,r4,r19
  805b24:	40001b1e 	bne	r8,zero,805b94 <__adddf3+0x548>
  805b28:	0005883a 	mov	r2,zero
  805b2c:	0007883a 	mov	r3,zero
  805b30:	0021883a 	mov	r16,zero
  805b34:	003f4d06 	br	80586c <__alt_mem_onchip_mem+0xff7fd86c>
  805b38:	008007c4 	movi	r2,31
  805b3c:	11003c16 	blt	r2,r4,805c30 <__adddf3+0x5e4>
  805b40:	00800804 	movi	r2,32
  805b44:	1105c83a 	sub	r2,r2,r4
  805b48:	488e983a 	sll	r7,r9,r2
  805b4c:	310ad83a 	srl	r5,r6,r4
  805b50:	3084983a 	sll	r2,r6,r2
  805b54:	4912d83a 	srl	r9,r9,r4
  805b58:	394ab03a 	or	r5,r7,r5
  805b5c:	1004c03a 	cmpne	r2,r2,zero
  805b60:	288ab03a 	or	r5,r5,r2
  805b64:	003f5306 	br	8058b4 <__alt_mem_onchip_mem+0xff7fd8b4>
  805b68:	4448b03a 	or	r4,r8,r17
  805b6c:	20003e26 	beq	r4,zero,805c68 <__adddf3+0x61c>
  805b70:	00c6303a 	nor	r3,zero,r3
  805b74:	18003a1e 	bne	r3,zero,805c60 <__adddf3+0x614>
  805b78:	3463c83a 	sub	r17,r6,r17
  805b7c:	4a07c83a 	sub	r3,r9,r8
  805b80:	344d803a 	cmpltu	r6,r6,r17
  805b84:	1991c83a 	sub	r8,r3,r6
  805b88:	1021883a 	mov	r16,r2
  805b8c:	3825883a 	mov	r18,r7
  805b90:	003f0a06 	br	8057bc <__alt_mem_onchip_mem+0xff7fd7bc>
  805b94:	2023883a 	mov	r17,r4
  805b98:	003f0d06 	br	8057d0 <__alt_mem_onchip_mem+0xff7fd7d0>
  805b9c:	0081ffc4 	movi	r2,2047
  805ba0:	80bf3f1e 	bne	r16,r2,8058a0 <__alt_mem_onchip_mem+0xff7fd8a0>
  805ba4:	003ec806 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805ba8:	0005883a 	mov	r2,zero
  805bac:	003fb106 	br	805a74 <__alt_mem_onchip_mem+0xff7fda74>
  805bb0:	0007883a 	mov	r3,zero
  805bb4:	003fbc06 	br	805aa8 <__alt_mem_onchip_mem+0xff7fdaa8>
  805bb8:	4444b03a 	or	r2,r8,r17
  805bbc:	8000871e 	bne	r16,zero,805ddc <__adddf3+0x790>
  805bc0:	1000ba26 	beq	r2,zero,805eac <__adddf3+0x860>
  805bc4:	4984b03a 	or	r2,r9,r6
  805bc8:	103ebf26 	beq	r2,zero,8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805bcc:	8985883a 	add	r2,r17,r6
  805bd0:	4247883a 	add	r3,r8,r9
  805bd4:	1451803a 	cmpltu	r8,r2,r17
  805bd8:	40d1883a 	add	r8,r8,r3
  805bdc:	40c0202c 	andhi	r3,r8,128
  805be0:	1023883a 	mov	r17,r2
  805be4:	183f1a26 	beq	r3,zero,805850 <__alt_mem_onchip_mem+0xff7fd850>
  805be8:	00bfe034 	movhi	r2,65408
  805bec:	10bfffc4 	addi	r2,r2,-1
  805bf0:	2021883a 	mov	r16,r4
  805bf4:	4090703a 	and	r8,r8,r2
  805bf8:	003eb306 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805bfc:	4444b03a 	or	r2,r8,r17
  805c00:	8000291e 	bne	r16,zero,805ca8 <__adddf3+0x65c>
  805c04:	10004b1e 	bne	r2,zero,805d34 <__adddf3+0x6e8>
  805c08:	4990b03a 	or	r8,r9,r6
  805c0c:	40008b26 	beq	r8,zero,805e3c <__adddf3+0x7f0>
  805c10:	4811883a 	mov	r8,r9
  805c14:	3023883a 	mov	r17,r6
  805c18:	3825883a 	mov	r18,r7
  805c1c:	003eaa06 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805c20:	1021883a 	mov	r16,r2
  805c24:	0011883a 	mov	r8,zero
  805c28:	0005883a 	mov	r2,zero
  805c2c:	003f0f06 	br	80586c <__alt_mem_onchip_mem+0xff7fd86c>
  805c30:	217ff804 	addi	r5,r4,-32
  805c34:	00800804 	movi	r2,32
  805c38:	494ad83a 	srl	r5,r9,r5
  805c3c:	20807d26 	beq	r4,r2,805e34 <__adddf3+0x7e8>
  805c40:	00801004 	movi	r2,64
  805c44:	1109c83a 	sub	r4,r2,r4
  805c48:	4912983a 	sll	r9,r9,r4
  805c4c:	498cb03a 	or	r6,r9,r6
  805c50:	300cc03a 	cmpne	r6,r6,zero
  805c54:	298ab03a 	or	r5,r5,r6
  805c58:	0013883a 	mov	r9,zero
  805c5c:	003f1506 	br	8058b4 <__alt_mem_onchip_mem+0xff7fd8b4>
  805c60:	0101ffc4 	movi	r4,2047
  805c64:	113f9a1e 	bne	r2,r4,805ad0 <__alt_mem_onchip_mem+0xff7fdad0>
  805c68:	4811883a 	mov	r8,r9
  805c6c:	3023883a 	mov	r17,r6
  805c70:	1021883a 	mov	r16,r2
  805c74:	3825883a 	mov	r18,r7
  805c78:	003e9306 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805c7c:	8000161e 	bne	r16,zero,805cd8 <__adddf3+0x68c>
  805c80:	444ab03a 	or	r5,r8,r17
  805c84:	28005126 	beq	r5,zero,805dcc <__adddf3+0x780>
  805c88:	0108303a 	nor	r4,zero,r4
  805c8c:	20004d1e 	bne	r4,zero,805dc4 <__adddf3+0x778>
  805c90:	89a3883a 	add	r17,r17,r6
  805c94:	4253883a 	add	r9,r8,r9
  805c98:	898d803a 	cmpltu	r6,r17,r6
  805c9c:	3251883a 	add	r8,r6,r9
  805ca0:	1021883a 	mov	r16,r2
  805ca4:	003f0806 	br	8058c8 <__alt_mem_onchip_mem+0xff7fd8c8>
  805ca8:	1000301e 	bne	r2,zero,805d6c <__adddf3+0x720>
  805cac:	4984b03a 	or	r2,r9,r6
  805cb0:	10007126 	beq	r2,zero,805e78 <__adddf3+0x82c>
  805cb4:	4811883a 	mov	r8,r9
  805cb8:	3023883a 	mov	r17,r6
  805cbc:	3825883a 	mov	r18,r7
  805cc0:	0401ffc4 	movi	r16,2047
  805cc4:	003e8006 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805cc8:	4462b03a 	or	r17,r8,r17
  805ccc:	8822c03a 	cmpne	r17,r17,zero
  805cd0:	0007883a 	mov	r3,zero
  805cd4:	003f8b06 	br	805b04 <__alt_mem_onchip_mem+0xff7fdb04>
  805cd8:	0141ffc4 	movi	r5,2047
  805cdc:	11403b26 	beq	r2,r5,805dcc <__adddf3+0x780>
  805ce0:	0109c83a 	sub	r4,zero,r4
  805ce4:	42002034 	orhi	r8,r8,128
  805ce8:	01400e04 	movi	r5,56
  805cec:	29006716 	blt	r5,r4,805e8c <__adddf3+0x840>
  805cf0:	014007c4 	movi	r5,31
  805cf4:	29007016 	blt	r5,r4,805eb8 <__adddf3+0x86c>
  805cf8:	01400804 	movi	r5,32
  805cfc:	290bc83a 	sub	r5,r5,r4
  805d00:	4154983a 	sll	r10,r8,r5
  805d04:	890ed83a 	srl	r7,r17,r4
  805d08:	894a983a 	sll	r5,r17,r5
  805d0c:	4108d83a 	srl	r4,r8,r4
  805d10:	51e2b03a 	or	r17,r10,r7
  805d14:	280ac03a 	cmpne	r5,r5,zero
  805d18:	8962b03a 	or	r17,r17,r5
  805d1c:	89a3883a 	add	r17,r17,r6
  805d20:	2253883a 	add	r9,r4,r9
  805d24:	898d803a 	cmpltu	r6,r17,r6
  805d28:	3251883a 	add	r8,r6,r9
  805d2c:	1021883a 	mov	r16,r2
  805d30:	003ee506 	br	8058c8 <__alt_mem_onchip_mem+0xff7fd8c8>
  805d34:	4984b03a 	or	r2,r9,r6
  805d38:	103e6326 	beq	r2,zero,8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805d3c:	8987c83a 	sub	r3,r17,r6
  805d40:	88c9803a 	cmpltu	r4,r17,r3
  805d44:	4245c83a 	sub	r2,r8,r9
  805d48:	1105c83a 	sub	r2,r2,r4
  805d4c:	1100202c 	andhi	r4,r2,128
  805d50:	203ebb26 	beq	r4,zero,805840 <__alt_mem_onchip_mem+0xff7fd840>
  805d54:	3463c83a 	sub	r17,r6,r17
  805d58:	4a07c83a 	sub	r3,r9,r8
  805d5c:	344d803a 	cmpltu	r6,r6,r17
  805d60:	1991c83a 	sub	r8,r3,r6
  805d64:	3825883a 	mov	r18,r7
  805d68:	003e5706 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805d6c:	4984b03a 	or	r2,r9,r6
  805d70:	10002e26 	beq	r2,zero,805e2c <__adddf3+0x7e0>
  805d74:	4004d0fa 	srli	r2,r8,3
  805d78:	8822d0fa 	srli	r17,r17,3
  805d7c:	4010977a 	slli	r8,r8,29
  805d80:	10c0022c 	andhi	r3,r2,8
  805d84:	4462b03a 	or	r17,r8,r17
  805d88:	18000826 	beq	r3,zero,805dac <__adddf3+0x760>
  805d8c:	4808d0fa 	srli	r4,r9,3
  805d90:	20c0022c 	andhi	r3,r4,8
  805d94:	1800051e 	bne	r3,zero,805dac <__adddf3+0x760>
  805d98:	300cd0fa 	srli	r6,r6,3
  805d9c:	4806977a 	slli	r3,r9,29
  805da0:	2005883a 	mov	r2,r4
  805da4:	3825883a 	mov	r18,r7
  805da8:	19a2b03a 	or	r17,r3,r6
  805dac:	8810d77a 	srli	r8,r17,29
  805db0:	100490fa 	slli	r2,r2,3
  805db4:	882290fa 	slli	r17,r17,3
  805db8:	0401ffc4 	movi	r16,2047
  805dbc:	4090b03a 	or	r8,r8,r2
  805dc0:	003e4106 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805dc4:	0141ffc4 	movi	r5,2047
  805dc8:	117fc71e 	bne	r2,r5,805ce8 <__alt_mem_onchip_mem+0xff7fdce8>
  805dcc:	4811883a 	mov	r8,r9
  805dd0:	3023883a 	mov	r17,r6
  805dd4:	1021883a 	mov	r16,r2
  805dd8:	003e3b06 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805ddc:	10002f26 	beq	r2,zero,805e9c <__adddf3+0x850>
  805de0:	4984b03a 	or	r2,r9,r6
  805de4:	10001126 	beq	r2,zero,805e2c <__adddf3+0x7e0>
  805de8:	4004d0fa 	srli	r2,r8,3
  805dec:	8822d0fa 	srli	r17,r17,3
  805df0:	4010977a 	slli	r8,r8,29
  805df4:	10c0022c 	andhi	r3,r2,8
  805df8:	4462b03a 	or	r17,r8,r17
  805dfc:	183feb26 	beq	r3,zero,805dac <__alt_mem_onchip_mem+0xff7fddac>
  805e00:	4808d0fa 	srli	r4,r9,3
  805e04:	20c0022c 	andhi	r3,r4,8
  805e08:	183fe81e 	bne	r3,zero,805dac <__alt_mem_onchip_mem+0xff7fddac>
  805e0c:	300cd0fa 	srli	r6,r6,3
  805e10:	4806977a 	slli	r3,r9,29
  805e14:	2005883a 	mov	r2,r4
  805e18:	19a2b03a 	or	r17,r3,r6
  805e1c:	003fe306 	br	805dac <__alt_mem_onchip_mem+0xff7fddac>
  805e20:	0011883a 	mov	r8,zero
  805e24:	0005883a 	mov	r2,zero
  805e28:	003e3f06 	br	805728 <__alt_mem_onchip_mem+0xff7fd728>
  805e2c:	0401ffc4 	movi	r16,2047
  805e30:	003e2506 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805e34:	0013883a 	mov	r9,zero
  805e38:	003f8406 	br	805c4c <__alt_mem_onchip_mem+0xff7fdc4c>
  805e3c:	0005883a 	mov	r2,zero
  805e40:	0007883a 	mov	r3,zero
  805e44:	003e8906 	br	80586c <__alt_mem_onchip_mem+0xff7fd86c>
  805e48:	197ff804 	addi	r5,r3,-32
  805e4c:	01000804 	movi	r4,32
  805e50:	414ad83a 	srl	r5,r8,r5
  805e54:	19002426 	beq	r3,r4,805ee8 <__adddf3+0x89c>
  805e58:	01001004 	movi	r4,64
  805e5c:	20c7c83a 	sub	r3,r4,r3
  805e60:	40c6983a 	sll	r3,r8,r3
  805e64:	1c46b03a 	or	r3,r3,r17
  805e68:	1806c03a 	cmpne	r3,r3,zero
  805e6c:	28e2b03a 	or	r17,r5,r3
  805e70:	0007883a 	mov	r3,zero
  805e74:	003f2306 	br	805b04 <__alt_mem_onchip_mem+0xff7fdb04>
  805e78:	0007883a 	mov	r3,zero
  805e7c:	5811883a 	mov	r8,r11
  805e80:	00bfffc4 	movi	r2,-1
  805e84:	0401ffc4 	movi	r16,2047
  805e88:	003e7806 	br	80586c <__alt_mem_onchip_mem+0xff7fd86c>
  805e8c:	4462b03a 	or	r17,r8,r17
  805e90:	8822c03a 	cmpne	r17,r17,zero
  805e94:	0009883a 	mov	r4,zero
  805e98:	003fa006 	br	805d1c <__alt_mem_onchip_mem+0xff7fdd1c>
  805e9c:	4811883a 	mov	r8,r9
  805ea0:	3023883a 	mov	r17,r6
  805ea4:	0401ffc4 	movi	r16,2047
  805ea8:	003e0706 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805eac:	4811883a 	mov	r8,r9
  805eb0:	3023883a 	mov	r17,r6
  805eb4:	003e0406 	br	8056c8 <__alt_mem_onchip_mem+0xff7fd6c8>
  805eb8:	21fff804 	addi	r7,r4,-32
  805ebc:	01400804 	movi	r5,32
  805ec0:	41ced83a 	srl	r7,r8,r7
  805ec4:	21400a26 	beq	r4,r5,805ef0 <__adddf3+0x8a4>
  805ec8:	01401004 	movi	r5,64
  805ecc:	2909c83a 	sub	r4,r5,r4
  805ed0:	4108983a 	sll	r4,r8,r4
  805ed4:	2448b03a 	or	r4,r4,r17
  805ed8:	2008c03a 	cmpne	r4,r4,zero
  805edc:	3922b03a 	or	r17,r7,r4
  805ee0:	0009883a 	mov	r4,zero
  805ee4:	003f8d06 	br	805d1c <__alt_mem_onchip_mem+0xff7fdd1c>
  805ee8:	0007883a 	mov	r3,zero
  805eec:	003fdd06 	br	805e64 <__alt_mem_onchip_mem+0xff7fde64>
  805ef0:	0009883a 	mov	r4,zero
  805ef4:	003ff706 	br	805ed4 <__alt_mem_onchip_mem+0xff7fded4>

00805ef8 <__gedf2>:
  805ef8:	2804d53a 	srli	r2,r5,20
  805efc:	3806d53a 	srli	r3,r7,20
  805f00:	02000434 	movhi	r8,16
  805f04:	423fffc4 	addi	r8,r8,-1
  805f08:	1081ffcc 	andi	r2,r2,2047
  805f0c:	0241ffc4 	movi	r9,2047
  805f10:	2a14703a 	and	r10,r5,r8
  805f14:	18c1ffcc 	andi	r3,r3,2047
  805f18:	3a10703a 	and	r8,r7,r8
  805f1c:	280ad7fa 	srli	r5,r5,31
  805f20:	380ed7fa 	srli	r7,r7,31
  805f24:	12401d26 	beq	r2,r9,805f9c <__gedf2+0xa4>
  805f28:	0241ffc4 	movi	r9,2047
  805f2c:	1a401226 	beq	r3,r9,805f78 <__gedf2+0x80>
  805f30:	1000081e 	bne	r2,zero,805f54 <__gedf2+0x5c>
  805f34:	2296b03a 	or	r11,r4,r10
  805f38:	5813003a 	cmpeq	r9,r11,zero
  805f3c:	1800091e 	bne	r3,zero,805f64 <__gedf2+0x6c>
  805f40:	3218b03a 	or	r12,r6,r8
  805f44:	6000071e 	bne	r12,zero,805f64 <__gedf2+0x6c>
  805f48:	0005883a 	mov	r2,zero
  805f4c:	5800101e 	bne	r11,zero,805f90 <__gedf2+0x98>
  805f50:	f800283a 	ret
  805f54:	18000c1e 	bne	r3,zero,805f88 <__gedf2+0x90>
  805f58:	3212b03a 	or	r9,r6,r8
  805f5c:	48000c26 	beq	r9,zero,805f90 <__gedf2+0x98>
  805f60:	0013883a 	mov	r9,zero
  805f64:	39c03fcc 	andi	r7,r7,255
  805f68:	48000826 	beq	r9,zero,805f8c <__gedf2+0x94>
  805f6c:	38000926 	beq	r7,zero,805f94 <__gedf2+0x9c>
  805f70:	00800044 	movi	r2,1
  805f74:	f800283a 	ret
  805f78:	3212b03a 	or	r9,r6,r8
  805f7c:	483fec26 	beq	r9,zero,805f30 <__alt_mem_onchip_mem+0xff7fdf30>
  805f80:	00bfff84 	movi	r2,-2
  805f84:	f800283a 	ret
  805f88:	39c03fcc 	andi	r7,r7,255
  805f8c:	29c00626 	beq	r5,r7,805fa8 <__gedf2+0xb0>
  805f90:	283ff726 	beq	r5,zero,805f70 <__alt_mem_onchip_mem+0xff7fdf70>
  805f94:	00bfffc4 	movi	r2,-1
  805f98:	f800283a 	ret
  805f9c:	2292b03a 	or	r9,r4,r10
  805fa0:	483fe126 	beq	r9,zero,805f28 <__alt_mem_onchip_mem+0xff7fdf28>
  805fa4:	003ff606 	br	805f80 <__alt_mem_onchip_mem+0xff7fdf80>
  805fa8:	18bff916 	blt	r3,r2,805f90 <__alt_mem_onchip_mem+0xff7fdf90>
  805fac:	10c00316 	blt	r2,r3,805fbc <__gedf2+0xc4>
  805fb0:	42bff736 	bltu	r8,r10,805f90 <__alt_mem_onchip_mem+0xff7fdf90>
  805fb4:	52000326 	beq	r10,r8,805fc4 <__gedf2+0xcc>
  805fb8:	5200042e 	bgeu	r10,r8,805fcc <__gedf2+0xd4>
  805fbc:	283fec1e 	bne	r5,zero,805f70 <__alt_mem_onchip_mem+0xff7fdf70>
  805fc0:	003ff406 	br	805f94 <__alt_mem_onchip_mem+0xff7fdf94>
  805fc4:	313ff236 	bltu	r6,r4,805f90 <__alt_mem_onchip_mem+0xff7fdf90>
  805fc8:	21bffc36 	bltu	r4,r6,805fbc <__alt_mem_onchip_mem+0xff7fdfbc>
  805fcc:	0005883a 	mov	r2,zero
  805fd0:	f800283a 	ret

00805fd4 <__ledf2>:
  805fd4:	2804d53a 	srli	r2,r5,20
  805fd8:	3810d53a 	srli	r8,r7,20
  805fdc:	00c00434 	movhi	r3,16
  805fe0:	18ffffc4 	addi	r3,r3,-1
  805fe4:	1081ffcc 	andi	r2,r2,2047
  805fe8:	0241ffc4 	movi	r9,2047
  805fec:	28d4703a 	and	r10,r5,r3
  805ff0:	4201ffcc 	andi	r8,r8,2047
  805ff4:	38c6703a 	and	r3,r7,r3
  805ff8:	280ad7fa 	srli	r5,r5,31
  805ffc:	380ed7fa 	srli	r7,r7,31
  806000:	12401f26 	beq	r2,r9,806080 <__ledf2+0xac>
  806004:	0241ffc4 	movi	r9,2047
  806008:	42401426 	beq	r8,r9,80605c <__ledf2+0x88>
  80600c:	1000091e 	bne	r2,zero,806034 <__ledf2+0x60>
  806010:	2296b03a 	or	r11,r4,r10
  806014:	5813003a 	cmpeq	r9,r11,zero
  806018:	29403fcc 	andi	r5,r5,255
  80601c:	40000a1e 	bne	r8,zero,806048 <__ledf2+0x74>
  806020:	30d8b03a 	or	r12,r6,r3
  806024:	6000081e 	bne	r12,zero,806048 <__ledf2+0x74>
  806028:	0005883a 	mov	r2,zero
  80602c:	5800111e 	bne	r11,zero,806074 <__ledf2+0xa0>
  806030:	f800283a 	ret
  806034:	29403fcc 	andi	r5,r5,255
  806038:	40000c1e 	bne	r8,zero,80606c <__ledf2+0x98>
  80603c:	30d2b03a 	or	r9,r6,r3
  806040:	48000c26 	beq	r9,zero,806074 <__ledf2+0xa0>
  806044:	0013883a 	mov	r9,zero
  806048:	39c03fcc 	andi	r7,r7,255
  80604c:	48000826 	beq	r9,zero,806070 <__ledf2+0x9c>
  806050:	38001126 	beq	r7,zero,806098 <__ledf2+0xc4>
  806054:	00800044 	movi	r2,1
  806058:	f800283a 	ret
  80605c:	30d2b03a 	or	r9,r6,r3
  806060:	483fea26 	beq	r9,zero,80600c <__alt_mem_onchip_mem+0xff7fe00c>
  806064:	00800084 	movi	r2,2
  806068:	f800283a 	ret
  80606c:	39c03fcc 	andi	r7,r7,255
  806070:	39400726 	beq	r7,r5,806090 <__ledf2+0xbc>
  806074:	2800081e 	bne	r5,zero,806098 <__ledf2+0xc4>
  806078:	00800044 	movi	r2,1
  80607c:	f800283a 	ret
  806080:	2292b03a 	or	r9,r4,r10
  806084:	483fdf26 	beq	r9,zero,806004 <__alt_mem_onchip_mem+0xff7fe004>
  806088:	00800084 	movi	r2,2
  80608c:	f800283a 	ret
  806090:	4080030e 	bge	r8,r2,8060a0 <__ledf2+0xcc>
  806094:	383fef26 	beq	r7,zero,806054 <__alt_mem_onchip_mem+0xff7fe054>
  806098:	00bfffc4 	movi	r2,-1
  80609c:	f800283a 	ret
  8060a0:	123feb16 	blt	r2,r8,806050 <__alt_mem_onchip_mem+0xff7fe050>
  8060a4:	1abff336 	bltu	r3,r10,806074 <__alt_mem_onchip_mem+0xff7fe074>
  8060a8:	50c00326 	beq	r10,r3,8060b8 <__ledf2+0xe4>
  8060ac:	50c0042e 	bgeu	r10,r3,8060c0 <__ledf2+0xec>
  8060b0:	283fe81e 	bne	r5,zero,806054 <__alt_mem_onchip_mem+0xff7fe054>
  8060b4:	003ff806 	br	806098 <__alt_mem_onchip_mem+0xff7fe098>
  8060b8:	313fee36 	bltu	r6,r4,806074 <__alt_mem_onchip_mem+0xff7fe074>
  8060bc:	21bffc36 	bltu	r4,r6,8060b0 <__alt_mem_onchip_mem+0xff7fe0b0>
  8060c0:	0005883a 	mov	r2,zero
  8060c4:	f800283a 	ret

008060c8 <__subdf3>:
  8060c8:	02000434 	movhi	r8,16
  8060cc:	423fffc4 	addi	r8,r8,-1
  8060d0:	defffb04 	addi	sp,sp,-20
  8060d4:	2a14703a 	and	r10,r5,r8
  8060d8:	3812d53a 	srli	r9,r7,20
  8060dc:	3a10703a 	and	r8,r7,r8
  8060e0:	2006d77a 	srli	r3,r4,29
  8060e4:	3004d77a 	srli	r2,r6,29
  8060e8:	dc000015 	stw	r16,0(sp)
  8060ec:	501490fa 	slli	r10,r10,3
  8060f0:	2820d53a 	srli	r16,r5,20
  8060f4:	401090fa 	slli	r8,r8,3
  8060f8:	dc800215 	stw	r18,8(sp)
  8060fc:	dc400115 	stw	r17,4(sp)
  806100:	dfc00415 	stw	ra,16(sp)
  806104:	202290fa 	slli	r17,r4,3
  806108:	dcc00315 	stw	r19,12(sp)
  80610c:	4a41ffcc 	andi	r9,r9,2047
  806110:	0101ffc4 	movi	r4,2047
  806114:	2824d7fa 	srli	r18,r5,31
  806118:	8401ffcc 	andi	r16,r16,2047
  80611c:	50c6b03a 	or	r3,r10,r3
  806120:	380ed7fa 	srli	r7,r7,31
  806124:	408ab03a 	or	r5,r8,r2
  806128:	300c90fa 	slli	r6,r6,3
  80612c:	49009626 	beq	r9,r4,806388 <__subdf3+0x2c0>
  806130:	39c0005c 	xori	r7,r7,1
  806134:	8245c83a 	sub	r2,r16,r9
  806138:	3c807426 	beq	r7,r18,80630c <__subdf3+0x244>
  80613c:	0080af0e 	bge	zero,r2,8063fc <__subdf3+0x334>
  806140:	48002a1e 	bne	r9,zero,8061ec <__subdf3+0x124>
  806144:	2988b03a 	or	r4,r5,r6
  806148:	20009a1e 	bne	r4,zero,8063b4 <__subdf3+0x2ec>
  80614c:	888001cc 	andi	r2,r17,7
  806150:	10000726 	beq	r2,zero,806170 <__subdf3+0xa8>
  806154:	888003cc 	andi	r2,r17,15
  806158:	01000104 	movi	r4,4
  80615c:	11000426 	beq	r2,r4,806170 <__subdf3+0xa8>
  806160:	890b883a 	add	r5,r17,r4
  806164:	2c63803a 	cmpltu	r17,r5,r17
  806168:	1c47883a 	add	r3,r3,r17
  80616c:	2823883a 	mov	r17,r5
  806170:	1880202c 	andhi	r2,r3,128
  806174:	10005926 	beq	r2,zero,8062dc <__subdf3+0x214>
  806178:	84000044 	addi	r16,r16,1
  80617c:	0081ffc4 	movi	r2,2047
  806180:	8080be26 	beq	r16,r2,80647c <__subdf3+0x3b4>
  806184:	017fe034 	movhi	r5,65408
  806188:	297fffc4 	addi	r5,r5,-1
  80618c:	1946703a 	and	r3,r3,r5
  806190:	1804977a 	slli	r2,r3,29
  806194:	1806927a 	slli	r3,r3,9
  806198:	8822d0fa 	srli	r17,r17,3
  80619c:	8401ffcc 	andi	r16,r16,2047
  8061a0:	180ad33a 	srli	r5,r3,12
  8061a4:	9100004c 	andi	r4,r18,1
  8061a8:	1444b03a 	or	r2,r2,r17
  8061ac:	80c1ffcc 	andi	r3,r16,2047
  8061b0:	1820953a 	slli	r16,r3,20
  8061b4:	20c03fcc 	andi	r3,r4,255
  8061b8:	180897fa 	slli	r4,r3,31
  8061bc:	00c00434 	movhi	r3,16
  8061c0:	18ffffc4 	addi	r3,r3,-1
  8061c4:	28c6703a 	and	r3,r5,r3
  8061c8:	1c06b03a 	or	r3,r3,r16
  8061cc:	1906b03a 	or	r3,r3,r4
  8061d0:	dfc00417 	ldw	ra,16(sp)
  8061d4:	dcc00317 	ldw	r19,12(sp)
  8061d8:	dc800217 	ldw	r18,8(sp)
  8061dc:	dc400117 	ldw	r17,4(sp)
  8061e0:	dc000017 	ldw	r16,0(sp)
  8061e4:	dec00504 	addi	sp,sp,20
  8061e8:	f800283a 	ret
  8061ec:	0101ffc4 	movi	r4,2047
  8061f0:	813fd626 	beq	r16,r4,80614c <__alt_mem_onchip_mem+0xff7fe14c>
  8061f4:	29402034 	orhi	r5,r5,128
  8061f8:	01000e04 	movi	r4,56
  8061fc:	2080a316 	blt	r4,r2,80648c <__subdf3+0x3c4>
  806200:	010007c4 	movi	r4,31
  806204:	2080c616 	blt	r4,r2,806520 <__subdf3+0x458>
  806208:	01000804 	movi	r4,32
  80620c:	2089c83a 	sub	r4,r4,r2
  806210:	2910983a 	sll	r8,r5,r4
  806214:	308ed83a 	srl	r7,r6,r2
  806218:	3108983a 	sll	r4,r6,r4
  80621c:	2884d83a 	srl	r2,r5,r2
  806220:	41ccb03a 	or	r6,r8,r7
  806224:	2008c03a 	cmpne	r4,r4,zero
  806228:	310cb03a 	or	r6,r6,r4
  80622c:	898dc83a 	sub	r6,r17,r6
  806230:	89a3803a 	cmpltu	r17,r17,r6
  806234:	1887c83a 	sub	r3,r3,r2
  806238:	1c47c83a 	sub	r3,r3,r17
  80623c:	3023883a 	mov	r17,r6
  806240:	1880202c 	andhi	r2,r3,128
  806244:	10002326 	beq	r2,zero,8062d4 <__subdf3+0x20c>
  806248:	04c02034 	movhi	r19,128
  80624c:	9cffffc4 	addi	r19,r19,-1
  806250:	1ce6703a 	and	r19,r3,r19
  806254:	98007a26 	beq	r19,zero,806440 <__subdf3+0x378>
  806258:	9809883a 	mov	r4,r19
  80625c:	0806b480 	call	806b48 <__clzsi2>
  806260:	113ffe04 	addi	r4,r2,-8
  806264:	00c007c4 	movi	r3,31
  806268:	19007b16 	blt	r3,r4,806458 <__subdf3+0x390>
  80626c:	00800804 	movi	r2,32
  806270:	1105c83a 	sub	r2,r2,r4
  806274:	8884d83a 	srl	r2,r17,r2
  806278:	9906983a 	sll	r3,r19,r4
  80627c:	8922983a 	sll	r17,r17,r4
  806280:	10c4b03a 	or	r2,r2,r3
  806284:	24007816 	blt	r4,r16,806468 <__subdf3+0x3a0>
  806288:	2421c83a 	sub	r16,r4,r16
  80628c:	80c00044 	addi	r3,r16,1
  806290:	010007c4 	movi	r4,31
  806294:	20c09516 	blt	r4,r3,8064ec <__subdf3+0x424>
  806298:	01400804 	movi	r5,32
  80629c:	28cbc83a 	sub	r5,r5,r3
  8062a0:	88c8d83a 	srl	r4,r17,r3
  8062a4:	8962983a 	sll	r17,r17,r5
  8062a8:	114a983a 	sll	r5,r2,r5
  8062ac:	10c6d83a 	srl	r3,r2,r3
  8062b0:	8804c03a 	cmpne	r2,r17,zero
  8062b4:	290ab03a 	or	r5,r5,r4
  8062b8:	28a2b03a 	or	r17,r5,r2
  8062bc:	0021883a 	mov	r16,zero
  8062c0:	003fa206 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  8062c4:	2090b03a 	or	r8,r4,r2
  8062c8:	40018e26 	beq	r8,zero,806904 <__subdf3+0x83c>
  8062cc:	1007883a 	mov	r3,r2
  8062d0:	2023883a 	mov	r17,r4
  8062d4:	888001cc 	andi	r2,r17,7
  8062d8:	103f9e1e 	bne	r2,zero,806154 <__alt_mem_onchip_mem+0xff7fe154>
  8062dc:	1804977a 	slli	r2,r3,29
  8062e0:	8822d0fa 	srli	r17,r17,3
  8062e4:	1810d0fa 	srli	r8,r3,3
  8062e8:	9100004c 	andi	r4,r18,1
  8062ec:	1444b03a 	or	r2,r2,r17
  8062f0:	00c1ffc4 	movi	r3,2047
  8062f4:	80c02826 	beq	r16,r3,806398 <__subdf3+0x2d0>
  8062f8:	01400434 	movhi	r5,16
  8062fc:	297fffc4 	addi	r5,r5,-1
  806300:	80e0703a 	and	r16,r16,r3
  806304:	414a703a 	and	r5,r8,r5
  806308:	003fa806 	br	8061ac <__alt_mem_onchip_mem+0xff7fe1ac>
  80630c:	0080630e 	bge	zero,r2,80649c <__subdf3+0x3d4>
  806310:	48003026 	beq	r9,zero,8063d4 <__subdf3+0x30c>
  806314:	0101ffc4 	movi	r4,2047
  806318:	813f8c26 	beq	r16,r4,80614c <__alt_mem_onchip_mem+0xff7fe14c>
  80631c:	29402034 	orhi	r5,r5,128
  806320:	01000e04 	movi	r4,56
  806324:	2080a90e 	bge	r4,r2,8065cc <__subdf3+0x504>
  806328:	298cb03a 	or	r6,r5,r6
  80632c:	3012c03a 	cmpne	r9,r6,zero
  806330:	0005883a 	mov	r2,zero
  806334:	4c53883a 	add	r9,r9,r17
  806338:	4c63803a 	cmpltu	r17,r9,r17
  80633c:	10c7883a 	add	r3,r2,r3
  806340:	88c7883a 	add	r3,r17,r3
  806344:	4823883a 	mov	r17,r9
  806348:	1880202c 	andhi	r2,r3,128
  80634c:	1000d026 	beq	r2,zero,806690 <__subdf3+0x5c8>
  806350:	84000044 	addi	r16,r16,1
  806354:	0081ffc4 	movi	r2,2047
  806358:	8080fe26 	beq	r16,r2,806754 <__subdf3+0x68c>
  80635c:	00bfe034 	movhi	r2,65408
  806360:	10bfffc4 	addi	r2,r2,-1
  806364:	1886703a 	and	r3,r3,r2
  806368:	880ad07a 	srli	r5,r17,1
  80636c:	180497fa 	slli	r2,r3,31
  806370:	8900004c 	andi	r4,r17,1
  806374:	2922b03a 	or	r17,r5,r4
  806378:	1806d07a 	srli	r3,r3,1
  80637c:	1462b03a 	or	r17,r2,r17
  806380:	3825883a 	mov	r18,r7
  806384:	003f7106 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  806388:	2984b03a 	or	r2,r5,r6
  80638c:	103f6826 	beq	r2,zero,806130 <__alt_mem_onchip_mem+0xff7fe130>
  806390:	39c03fcc 	andi	r7,r7,255
  806394:	003f6706 	br	806134 <__alt_mem_onchip_mem+0xff7fe134>
  806398:	4086b03a 	or	r3,r8,r2
  80639c:	18015226 	beq	r3,zero,8068e8 <__subdf3+0x820>
  8063a0:	00c00434 	movhi	r3,16
  8063a4:	41400234 	orhi	r5,r8,8
  8063a8:	18ffffc4 	addi	r3,r3,-1
  8063ac:	28ca703a 	and	r5,r5,r3
  8063b0:	003f7e06 	br	8061ac <__alt_mem_onchip_mem+0xff7fe1ac>
  8063b4:	10bfffc4 	addi	r2,r2,-1
  8063b8:	1000491e 	bne	r2,zero,8064e0 <__subdf3+0x418>
  8063bc:	898fc83a 	sub	r7,r17,r6
  8063c0:	89e3803a 	cmpltu	r17,r17,r7
  8063c4:	1947c83a 	sub	r3,r3,r5
  8063c8:	1c47c83a 	sub	r3,r3,r17
  8063cc:	3823883a 	mov	r17,r7
  8063d0:	003f9b06 	br	806240 <__alt_mem_onchip_mem+0xff7fe240>
  8063d4:	2988b03a 	or	r4,r5,r6
  8063d8:	203f5c26 	beq	r4,zero,80614c <__alt_mem_onchip_mem+0xff7fe14c>
  8063dc:	10bfffc4 	addi	r2,r2,-1
  8063e0:	1000931e 	bne	r2,zero,806630 <__subdf3+0x568>
  8063e4:	898d883a 	add	r6,r17,r6
  8063e8:	3463803a 	cmpltu	r17,r6,r17
  8063ec:	1947883a 	add	r3,r3,r5
  8063f0:	88c7883a 	add	r3,r17,r3
  8063f4:	3023883a 	mov	r17,r6
  8063f8:	003fd306 	br	806348 <__alt_mem_onchip_mem+0xff7fe348>
  8063fc:	1000541e 	bne	r2,zero,806550 <__subdf3+0x488>
  806400:	80800044 	addi	r2,r16,1
  806404:	1081ffcc 	andi	r2,r2,2047
  806408:	01000044 	movi	r4,1
  80640c:	2080a20e 	bge	r4,r2,806698 <__subdf3+0x5d0>
  806410:	8989c83a 	sub	r4,r17,r6
  806414:	8905803a 	cmpltu	r2,r17,r4
  806418:	1967c83a 	sub	r19,r3,r5
  80641c:	98a7c83a 	sub	r19,r19,r2
  806420:	9880202c 	andhi	r2,r19,128
  806424:	10006326 	beq	r2,zero,8065b4 <__subdf3+0x4ec>
  806428:	3463c83a 	sub	r17,r6,r17
  80642c:	28c7c83a 	sub	r3,r5,r3
  806430:	344d803a 	cmpltu	r6,r6,r17
  806434:	19a7c83a 	sub	r19,r3,r6
  806438:	3825883a 	mov	r18,r7
  80643c:	983f861e 	bne	r19,zero,806258 <__alt_mem_onchip_mem+0xff7fe258>
  806440:	8809883a 	mov	r4,r17
  806444:	0806b480 	call	806b48 <__clzsi2>
  806448:	10800804 	addi	r2,r2,32
  80644c:	113ffe04 	addi	r4,r2,-8
  806450:	00c007c4 	movi	r3,31
  806454:	193f850e 	bge	r3,r4,80626c <__alt_mem_onchip_mem+0xff7fe26c>
  806458:	10bff604 	addi	r2,r2,-40
  80645c:	8884983a 	sll	r2,r17,r2
  806460:	0023883a 	mov	r17,zero
  806464:	243f880e 	bge	r4,r16,806288 <__alt_mem_onchip_mem+0xff7fe288>
  806468:	00ffe034 	movhi	r3,65408
  80646c:	18ffffc4 	addi	r3,r3,-1
  806470:	8121c83a 	sub	r16,r16,r4
  806474:	10c6703a 	and	r3,r2,r3
  806478:	003f3406 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  80647c:	9100004c 	andi	r4,r18,1
  806480:	000b883a 	mov	r5,zero
  806484:	0005883a 	mov	r2,zero
  806488:	003f4806 	br	8061ac <__alt_mem_onchip_mem+0xff7fe1ac>
  80648c:	298cb03a 	or	r6,r5,r6
  806490:	300cc03a 	cmpne	r6,r6,zero
  806494:	0005883a 	mov	r2,zero
  806498:	003f6406 	br	80622c <__alt_mem_onchip_mem+0xff7fe22c>
  80649c:	10009a1e 	bne	r2,zero,806708 <__subdf3+0x640>
  8064a0:	82400044 	addi	r9,r16,1
  8064a4:	4881ffcc 	andi	r2,r9,2047
  8064a8:	02800044 	movi	r10,1
  8064ac:	5080670e 	bge	r10,r2,80664c <__subdf3+0x584>
  8064b0:	0081ffc4 	movi	r2,2047
  8064b4:	4880af26 	beq	r9,r2,806774 <__subdf3+0x6ac>
  8064b8:	898d883a 	add	r6,r17,r6
  8064bc:	1945883a 	add	r2,r3,r5
  8064c0:	3447803a 	cmpltu	r3,r6,r17
  8064c4:	1887883a 	add	r3,r3,r2
  8064c8:	182297fa 	slli	r17,r3,31
  8064cc:	300cd07a 	srli	r6,r6,1
  8064d0:	1806d07a 	srli	r3,r3,1
  8064d4:	4821883a 	mov	r16,r9
  8064d8:	89a2b03a 	or	r17,r17,r6
  8064dc:	003f1b06 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  8064e0:	0101ffc4 	movi	r4,2047
  8064e4:	813f441e 	bne	r16,r4,8061f8 <__alt_mem_onchip_mem+0xff7fe1f8>
  8064e8:	003f1806 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  8064ec:	843ff844 	addi	r16,r16,-31
  8064f0:	01400804 	movi	r5,32
  8064f4:	1408d83a 	srl	r4,r2,r16
  8064f8:	19405026 	beq	r3,r5,80663c <__subdf3+0x574>
  8064fc:	01401004 	movi	r5,64
  806500:	28c7c83a 	sub	r3,r5,r3
  806504:	10c4983a 	sll	r2,r2,r3
  806508:	88a2b03a 	or	r17,r17,r2
  80650c:	8822c03a 	cmpne	r17,r17,zero
  806510:	2462b03a 	or	r17,r4,r17
  806514:	0007883a 	mov	r3,zero
  806518:	0021883a 	mov	r16,zero
  80651c:	003f6d06 	br	8062d4 <__alt_mem_onchip_mem+0xff7fe2d4>
  806520:	11fff804 	addi	r7,r2,-32
  806524:	01000804 	movi	r4,32
  806528:	29ced83a 	srl	r7,r5,r7
  80652c:	11004526 	beq	r2,r4,806644 <__subdf3+0x57c>
  806530:	01001004 	movi	r4,64
  806534:	2089c83a 	sub	r4,r4,r2
  806538:	2904983a 	sll	r2,r5,r4
  80653c:	118cb03a 	or	r6,r2,r6
  806540:	300cc03a 	cmpne	r6,r6,zero
  806544:	398cb03a 	or	r6,r7,r6
  806548:	0005883a 	mov	r2,zero
  80654c:	003f3706 	br	80622c <__alt_mem_onchip_mem+0xff7fe22c>
  806550:	80002a26 	beq	r16,zero,8065fc <__subdf3+0x534>
  806554:	0101ffc4 	movi	r4,2047
  806558:	49006626 	beq	r9,r4,8066f4 <__subdf3+0x62c>
  80655c:	0085c83a 	sub	r2,zero,r2
  806560:	18c02034 	orhi	r3,r3,128
  806564:	01000e04 	movi	r4,56
  806568:	20807e16 	blt	r4,r2,806764 <__subdf3+0x69c>
  80656c:	010007c4 	movi	r4,31
  806570:	2080e716 	blt	r4,r2,806910 <__subdf3+0x848>
  806574:	01000804 	movi	r4,32
  806578:	2089c83a 	sub	r4,r4,r2
  80657c:	1914983a 	sll	r10,r3,r4
  806580:	8890d83a 	srl	r8,r17,r2
  806584:	8908983a 	sll	r4,r17,r4
  806588:	1884d83a 	srl	r2,r3,r2
  80658c:	5222b03a 	or	r17,r10,r8
  806590:	2006c03a 	cmpne	r3,r4,zero
  806594:	88e2b03a 	or	r17,r17,r3
  806598:	3463c83a 	sub	r17,r6,r17
  80659c:	2885c83a 	sub	r2,r5,r2
  8065a0:	344d803a 	cmpltu	r6,r6,r17
  8065a4:	1187c83a 	sub	r3,r2,r6
  8065a8:	4821883a 	mov	r16,r9
  8065ac:	3825883a 	mov	r18,r7
  8065b0:	003f2306 	br	806240 <__alt_mem_onchip_mem+0xff7fe240>
  8065b4:	24d0b03a 	or	r8,r4,r19
  8065b8:	40001b1e 	bne	r8,zero,806628 <__subdf3+0x560>
  8065bc:	0005883a 	mov	r2,zero
  8065c0:	0009883a 	mov	r4,zero
  8065c4:	0021883a 	mov	r16,zero
  8065c8:	003f4906 	br	8062f0 <__alt_mem_onchip_mem+0xff7fe2f0>
  8065cc:	010007c4 	movi	r4,31
  8065d0:	20803a16 	blt	r4,r2,8066bc <__subdf3+0x5f4>
  8065d4:	01000804 	movi	r4,32
  8065d8:	2089c83a 	sub	r4,r4,r2
  8065dc:	2912983a 	sll	r9,r5,r4
  8065e0:	3090d83a 	srl	r8,r6,r2
  8065e4:	3108983a 	sll	r4,r6,r4
  8065e8:	2884d83a 	srl	r2,r5,r2
  8065ec:	4a12b03a 	or	r9,r9,r8
  8065f0:	2008c03a 	cmpne	r4,r4,zero
  8065f4:	4912b03a 	or	r9,r9,r4
  8065f8:	003f4e06 	br	806334 <__alt_mem_onchip_mem+0xff7fe334>
  8065fc:	1c48b03a 	or	r4,r3,r17
  806600:	20003c26 	beq	r4,zero,8066f4 <__subdf3+0x62c>
  806604:	0084303a 	nor	r2,zero,r2
  806608:	1000381e 	bne	r2,zero,8066ec <__subdf3+0x624>
  80660c:	3463c83a 	sub	r17,r6,r17
  806610:	28c5c83a 	sub	r2,r5,r3
  806614:	344d803a 	cmpltu	r6,r6,r17
  806618:	1187c83a 	sub	r3,r2,r6
  80661c:	4821883a 	mov	r16,r9
  806620:	3825883a 	mov	r18,r7
  806624:	003f0606 	br	806240 <__alt_mem_onchip_mem+0xff7fe240>
  806628:	2023883a 	mov	r17,r4
  80662c:	003f0906 	br	806254 <__alt_mem_onchip_mem+0xff7fe254>
  806630:	0101ffc4 	movi	r4,2047
  806634:	813f3a1e 	bne	r16,r4,806320 <__alt_mem_onchip_mem+0xff7fe320>
  806638:	003ec406 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  80663c:	0005883a 	mov	r2,zero
  806640:	003fb106 	br	806508 <__alt_mem_onchip_mem+0xff7fe508>
  806644:	0005883a 	mov	r2,zero
  806648:	003fbc06 	br	80653c <__alt_mem_onchip_mem+0xff7fe53c>
  80664c:	1c44b03a 	or	r2,r3,r17
  806650:	80008e1e 	bne	r16,zero,80688c <__subdf3+0x7c4>
  806654:	1000c826 	beq	r2,zero,806978 <__subdf3+0x8b0>
  806658:	2984b03a 	or	r2,r5,r6
  80665c:	103ebb26 	beq	r2,zero,80614c <__alt_mem_onchip_mem+0xff7fe14c>
  806660:	8989883a 	add	r4,r17,r6
  806664:	1945883a 	add	r2,r3,r5
  806668:	2447803a 	cmpltu	r3,r4,r17
  80666c:	1887883a 	add	r3,r3,r2
  806670:	1880202c 	andhi	r2,r3,128
  806674:	2023883a 	mov	r17,r4
  806678:	103f1626 	beq	r2,zero,8062d4 <__alt_mem_onchip_mem+0xff7fe2d4>
  80667c:	00bfe034 	movhi	r2,65408
  806680:	10bfffc4 	addi	r2,r2,-1
  806684:	5021883a 	mov	r16,r10
  806688:	1886703a 	and	r3,r3,r2
  80668c:	003eaf06 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  806690:	3825883a 	mov	r18,r7
  806694:	003f0f06 	br	8062d4 <__alt_mem_onchip_mem+0xff7fe2d4>
  806698:	1c44b03a 	or	r2,r3,r17
  80669c:	8000251e 	bne	r16,zero,806734 <__subdf3+0x66c>
  8066a0:	1000661e 	bne	r2,zero,80683c <__subdf3+0x774>
  8066a4:	2990b03a 	or	r8,r5,r6
  8066a8:	40009626 	beq	r8,zero,806904 <__subdf3+0x83c>
  8066ac:	2807883a 	mov	r3,r5
  8066b0:	3023883a 	mov	r17,r6
  8066b4:	3825883a 	mov	r18,r7
  8066b8:	003ea406 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  8066bc:	127ff804 	addi	r9,r2,-32
  8066c0:	01000804 	movi	r4,32
  8066c4:	2a52d83a 	srl	r9,r5,r9
  8066c8:	11008c26 	beq	r2,r4,8068fc <__subdf3+0x834>
  8066cc:	01001004 	movi	r4,64
  8066d0:	2085c83a 	sub	r2,r4,r2
  8066d4:	2884983a 	sll	r2,r5,r2
  8066d8:	118cb03a 	or	r6,r2,r6
  8066dc:	300cc03a 	cmpne	r6,r6,zero
  8066e0:	4992b03a 	or	r9,r9,r6
  8066e4:	0005883a 	mov	r2,zero
  8066e8:	003f1206 	br	806334 <__alt_mem_onchip_mem+0xff7fe334>
  8066ec:	0101ffc4 	movi	r4,2047
  8066f0:	493f9c1e 	bne	r9,r4,806564 <__alt_mem_onchip_mem+0xff7fe564>
  8066f4:	2807883a 	mov	r3,r5
  8066f8:	3023883a 	mov	r17,r6
  8066fc:	4821883a 	mov	r16,r9
  806700:	3825883a 	mov	r18,r7
  806704:	003e9106 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  806708:	80001f1e 	bne	r16,zero,806788 <__subdf3+0x6c0>
  80670c:	1c48b03a 	or	r4,r3,r17
  806710:	20005a26 	beq	r4,zero,80687c <__subdf3+0x7b4>
  806714:	0084303a 	nor	r2,zero,r2
  806718:	1000561e 	bne	r2,zero,806874 <__subdf3+0x7ac>
  80671c:	89a3883a 	add	r17,r17,r6
  806720:	1945883a 	add	r2,r3,r5
  806724:	898d803a 	cmpltu	r6,r17,r6
  806728:	3087883a 	add	r3,r6,r2
  80672c:	4821883a 	mov	r16,r9
  806730:	003f0506 	br	806348 <__alt_mem_onchip_mem+0xff7fe348>
  806734:	10002b1e 	bne	r2,zero,8067e4 <__subdf3+0x71c>
  806738:	2984b03a 	or	r2,r5,r6
  80673c:	10008026 	beq	r2,zero,806940 <__subdf3+0x878>
  806740:	2807883a 	mov	r3,r5
  806744:	3023883a 	mov	r17,r6
  806748:	3825883a 	mov	r18,r7
  80674c:	0401ffc4 	movi	r16,2047
  806750:	003e7e06 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  806754:	3809883a 	mov	r4,r7
  806758:	0011883a 	mov	r8,zero
  80675c:	0005883a 	mov	r2,zero
  806760:	003ee306 	br	8062f0 <__alt_mem_onchip_mem+0xff7fe2f0>
  806764:	1c62b03a 	or	r17,r3,r17
  806768:	8822c03a 	cmpne	r17,r17,zero
  80676c:	0005883a 	mov	r2,zero
  806770:	003f8906 	br	806598 <__alt_mem_onchip_mem+0xff7fe598>
  806774:	3809883a 	mov	r4,r7
  806778:	4821883a 	mov	r16,r9
  80677c:	0011883a 	mov	r8,zero
  806780:	0005883a 	mov	r2,zero
  806784:	003eda06 	br	8062f0 <__alt_mem_onchip_mem+0xff7fe2f0>
  806788:	0101ffc4 	movi	r4,2047
  80678c:	49003b26 	beq	r9,r4,80687c <__subdf3+0x7b4>
  806790:	0085c83a 	sub	r2,zero,r2
  806794:	18c02034 	orhi	r3,r3,128
  806798:	01000e04 	movi	r4,56
  80679c:	20806e16 	blt	r4,r2,806958 <__subdf3+0x890>
  8067a0:	010007c4 	movi	r4,31
  8067a4:	20807716 	blt	r4,r2,806984 <__subdf3+0x8bc>
  8067a8:	01000804 	movi	r4,32
  8067ac:	2089c83a 	sub	r4,r4,r2
  8067b0:	1914983a 	sll	r10,r3,r4
  8067b4:	8890d83a 	srl	r8,r17,r2
  8067b8:	8908983a 	sll	r4,r17,r4
  8067bc:	1884d83a 	srl	r2,r3,r2
  8067c0:	5222b03a 	or	r17,r10,r8
  8067c4:	2006c03a 	cmpne	r3,r4,zero
  8067c8:	88e2b03a 	or	r17,r17,r3
  8067cc:	89a3883a 	add	r17,r17,r6
  8067d0:	1145883a 	add	r2,r2,r5
  8067d4:	898d803a 	cmpltu	r6,r17,r6
  8067d8:	3087883a 	add	r3,r6,r2
  8067dc:	4821883a 	mov	r16,r9
  8067e0:	003ed906 	br	806348 <__alt_mem_onchip_mem+0xff7fe348>
  8067e4:	2984b03a 	or	r2,r5,r6
  8067e8:	10004226 	beq	r2,zero,8068f4 <__subdf3+0x82c>
  8067ec:	1808d0fa 	srli	r4,r3,3
  8067f0:	8822d0fa 	srli	r17,r17,3
  8067f4:	1806977a 	slli	r3,r3,29
  8067f8:	2080022c 	andhi	r2,r4,8
  8067fc:	1c62b03a 	or	r17,r3,r17
  806800:	10000826 	beq	r2,zero,806824 <__subdf3+0x75c>
  806804:	2812d0fa 	srli	r9,r5,3
  806808:	4880022c 	andhi	r2,r9,8
  80680c:	1000051e 	bne	r2,zero,806824 <__subdf3+0x75c>
  806810:	300cd0fa 	srli	r6,r6,3
  806814:	2804977a 	slli	r2,r5,29
  806818:	4809883a 	mov	r4,r9
  80681c:	3825883a 	mov	r18,r7
  806820:	11a2b03a 	or	r17,r2,r6
  806824:	8806d77a 	srli	r3,r17,29
  806828:	200890fa 	slli	r4,r4,3
  80682c:	882290fa 	slli	r17,r17,3
  806830:	0401ffc4 	movi	r16,2047
  806834:	1906b03a 	or	r3,r3,r4
  806838:	003e4406 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  80683c:	2984b03a 	or	r2,r5,r6
  806840:	103e4226 	beq	r2,zero,80614c <__alt_mem_onchip_mem+0xff7fe14c>
  806844:	8989c83a 	sub	r4,r17,r6
  806848:	8911803a 	cmpltu	r8,r17,r4
  80684c:	1945c83a 	sub	r2,r3,r5
  806850:	1205c83a 	sub	r2,r2,r8
  806854:	1200202c 	andhi	r8,r2,128
  806858:	403e9a26 	beq	r8,zero,8062c4 <__alt_mem_onchip_mem+0xff7fe2c4>
  80685c:	3463c83a 	sub	r17,r6,r17
  806860:	28c5c83a 	sub	r2,r5,r3
  806864:	344d803a 	cmpltu	r6,r6,r17
  806868:	1187c83a 	sub	r3,r2,r6
  80686c:	3825883a 	mov	r18,r7
  806870:	003e3606 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  806874:	0101ffc4 	movi	r4,2047
  806878:	493fc71e 	bne	r9,r4,806798 <__alt_mem_onchip_mem+0xff7fe798>
  80687c:	2807883a 	mov	r3,r5
  806880:	3023883a 	mov	r17,r6
  806884:	4821883a 	mov	r16,r9
  806888:	003e3006 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  80688c:	10003626 	beq	r2,zero,806968 <__subdf3+0x8a0>
  806890:	2984b03a 	or	r2,r5,r6
  806894:	10001726 	beq	r2,zero,8068f4 <__subdf3+0x82c>
  806898:	1808d0fa 	srli	r4,r3,3
  80689c:	8822d0fa 	srli	r17,r17,3
  8068a0:	1806977a 	slli	r3,r3,29
  8068a4:	2080022c 	andhi	r2,r4,8
  8068a8:	1c62b03a 	or	r17,r3,r17
  8068ac:	10000726 	beq	r2,zero,8068cc <__subdf3+0x804>
  8068b0:	2812d0fa 	srli	r9,r5,3
  8068b4:	4880022c 	andhi	r2,r9,8
  8068b8:	1000041e 	bne	r2,zero,8068cc <__subdf3+0x804>
  8068bc:	300cd0fa 	srli	r6,r6,3
  8068c0:	2804977a 	slli	r2,r5,29
  8068c4:	4809883a 	mov	r4,r9
  8068c8:	11a2b03a 	or	r17,r2,r6
  8068cc:	8806d77a 	srli	r3,r17,29
  8068d0:	200890fa 	slli	r4,r4,3
  8068d4:	882290fa 	slli	r17,r17,3
  8068d8:	3825883a 	mov	r18,r7
  8068dc:	1906b03a 	or	r3,r3,r4
  8068e0:	0401ffc4 	movi	r16,2047
  8068e4:	003e1906 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  8068e8:	000b883a 	mov	r5,zero
  8068ec:	0005883a 	mov	r2,zero
  8068f0:	003e2e06 	br	8061ac <__alt_mem_onchip_mem+0xff7fe1ac>
  8068f4:	0401ffc4 	movi	r16,2047
  8068f8:	003e1406 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  8068fc:	0005883a 	mov	r2,zero
  806900:	003f7506 	br	8066d8 <__alt_mem_onchip_mem+0xff7fe6d8>
  806904:	0005883a 	mov	r2,zero
  806908:	0009883a 	mov	r4,zero
  80690c:	003e7806 	br	8062f0 <__alt_mem_onchip_mem+0xff7fe2f0>
  806910:	123ff804 	addi	r8,r2,-32
  806914:	01000804 	movi	r4,32
  806918:	1a10d83a 	srl	r8,r3,r8
  80691c:	11002526 	beq	r2,r4,8069b4 <__subdf3+0x8ec>
  806920:	01001004 	movi	r4,64
  806924:	2085c83a 	sub	r2,r4,r2
  806928:	1884983a 	sll	r2,r3,r2
  80692c:	1444b03a 	or	r2,r2,r17
  806930:	1004c03a 	cmpne	r2,r2,zero
  806934:	40a2b03a 	or	r17,r8,r2
  806938:	0005883a 	mov	r2,zero
  80693c:	003f1606 	br	806598 <__alt_mem_onchip_mem+0xff7fe598>
  806940:	02000434 	movhi	r8,16
  806944:	0009883a 	mov	r4,zero
  806948:	423fffc4 	addi	r8,r8,-1
  80694c:	00bfffc4 	movi	r2,-1
  806950:	0401ffc4 	movi	r16,2047
  806954:	003e6606 	br	8062f0 <__alt_mem_onchip_mem+0xff7fe2f0>
  806958:	1c62b03a 	or	r17,r3,r17
  80695c:	8822c03a 	cmpne	r17,r17,zero
  806960:	0005883a 	mov	r2,zero
  806964:	003f9906 	br	8067cc <__alt_mem_onchip_mem+0xff7fe7cc>
  806968:	2807883a 	mov	r3,r5
  80696c:	3023883a 	mov	r17,r6
  806970:	0401ffc4 	movi	r16,2047
  806974:	003df506 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  806978:	2807883a 	mov	r3,r5
  80697c:	3023883a 	mov	r17,r6
  806980:	003df206 	br	80614c <__alt_mem_onchip_mem+0xff7fe14c>
  806984:	123ff804 	addi	r8,r2,-32
  806988:	01000804 	movi	r4,32
  80698c:	1a10d83a 	srl	r8,r3,r8
  806990:	11000a26 	beq	r2,r4,8069bc <__subdf3+0x8f4>
  806994:	01001004 	movi	r4,64
  806998:	2085c83a 	sub	r2,r4,r2
  80699c:	1884983a 	sll	r2,r3,r2
  8069a0:	1444b03a 	or	r2,r2,r17
  8069a4:	1004c03a 	cmpne	r2,r2,zero
  8069a8:	40a2b03a 	or	r17,r8,r2
  8069ac:	0005883a 	mov	r2,zero
  8069b0:	003f8606 	br	8067cc <__alt_mem_onchip_mem+0xff7fe7cc>
  8069b4:	0005883a 	mov	r2,zero
  8069b8:	003fdc06 	br	80692c <__alt_mem_onchip_mem+0xff7fe92c>
  8069bc:	0005883a 	mov	r2,zero
  8069c0:	003ff706 	br	8069a0 <__alt_mem_onchip_mem+0xff7fe9a0>

008069c4 <__floatsidf>:
  8069c4:	defffd04 	addi	sp,sp,-12
  8069c8:	dfc00215 	stw	ra,8(sp)
  8069cc:	dc400115 	stw	r17,4(sp)
  8069d0:	dc000015 	stw	r16,0(sp)
  8069d4:	20002b26 	beq	r4,zero,806a84 <__floatsidf+0xc0>
  8069d8:	2023883a 	mov	r17,r4
  8069dc:	2020d7fa 	srli	r16,r4,31
  8069e0:	20002d16 	blt	r4,zero,806a98 <__floatsidf+0xd4>
  8069e4:	8809883a 	mov	r4,r17
  8069e8:	0806b480 	call	806b48 <__clzsi2>
  8069ec:	01410784 	movi	r5,1054
  8069f0:	288bc83a 	sub	r5,r5,r2
  8069f4:	01010cc4 	movi	r4,1075
  8069f8:	2149c83a 	sub	r4,r4,r5
  8069fc:	00c007c4 	movi	r3,31
  806a00:	1900160e 	bge	r3,r4,806a5c <__floatsidf+0x98>
  806a04:	00c104c4 	movi	r3,1043
  806a08:	1947c83a 	sub	r3,r3,r5
  806a0c:	88c6983a 	sll	r3,r17,r3
  806a10:	00800434 	movhi	r2,16
  806a14:	10bfffc4 	addi	r2,r2,-1
  806a18:	1886703a 	and	r3,r3,r2
  806a1c:	2941ffcc 	andi	r5,r5,2047
  806a20:	800d883a 	mov	r6,r16
  806a24:	0005883a 	mov	r2,zero
  806a28:	280a953a 	slli	r5,r5,20
  806a2c:	31803fcc 	andi	r6,r6,255
  806a30:	01000434 	movhi	r4,16
  806a34:	300c97fa 	slli	r6,r6,31
  806a38:	213fffc4 	addi	r4,r4,-1
  806a3c:	1906703a 	and	r3,r3,r4
  806a40:	1946b03a 	or	r3,r3,r5
  806a44:	1986b03a 	or	r3,r3,r6
  806a48:	dfc00217 	ldw	ra,8(sp)
  806a4c:	dc400117 	ldw	r17,4(sp)
  806a50:	dc000017 	ldw	r16,0(sp)
  806a54:	dec00304 	addi	sp,sp,12
  806a58:	f800283a 	ret
  806a5c:	00c002c4 	movi	r3,11
  806a60:	1887c83a 	sub	r3,r3,r2
  806a64:	88c6d83a 	srl	r3,r17,r3
  806a68:	8904983a 	sll	r2,r17,r4
  806a6c:	01000434 	movhi	r4,16
  806a70:	213fffc4 	addi	r4,r4,-1
  806a74:	2941ffcc 	andi	r5,r5,2047
  806a78:	1906703a 	and	r3,r3,r4
  806a7c:	800d883a 	mov	r6,r16
  806a80:	003fe906 	br	806a28 <__alt_mem_onchip_mem+0xff7fea28>
  806a84:	000d883a 	mov	r6,zero
  806a88:	000b883a 	mov	r5,zero
  806a8c:	0007883a 	mov	r3,zero
  806a90:	0005883a 	mov	r2,zero
  806a94:	003fe406 	br	806a28 <__alt_mem_onchip_mem+0xff7fea28>
  806a98:	0123c83a 	sub	r17,zero,r4
  806a9c:	003fd106 	br	8069e4 <__alt_mem_onchip_mem+0xff7fe9e4>

00806aa0 <__floatunsidf>:
  806aa0:	defffe04 	addi	sp,sp,-8
  806aa4:	dc000015 	stw	r16,0(sp)
  806aa8:	dfc00115 	stw	ra,4(sp)
  806aac:	2021883a 	mov	r16,r4
  806ab0:	20002226 	beq	r4,zero,806b3c <__floatunsidf+0x9c>
  806ab4:	0806b480 	call	806b48 <__clzsi2>
  806ab8:	01010784 	movi	r4,1054
  806abc:	2089c83a 	sub	r4,r4,r2
  806ac0:	01810cc4 	movi	r6,1075
  806ac4:	310dc83a 	sub	r6,r6,r4
  806ac8:	00c007c4 	movi	r3,31
  806acc:	1980120e 	bge	r3,r6,806b18 <__floatunsidf+0x78>
  806ad0:	00c104c4 	movi	r3,1043
  806ad4:	1907c83a 	sub	r3,r3,r4
  806ad8:	80ca983a 	sll	r5,r16,r3
  806adc:	00800434 	movhi	r2,16
  806ae0:	10bfffc4 	addi	r2,r2,-1
  806ae4:	2101ffcc 	andi	r4,r4,2047
  806ae8:	0021883a 	mov	r16,zero
  806aec:	288a703a 	and	r5,r5,r2
  806af0:	2008953a 	slli	r4,r4,20
  806af4:	00c00434 	movhi	r3,16
  806af8:	18ffffc4 	addi	r3,r3,-1
  806afc:	28c6703a 	and	r3,r5,r3
  806b00:	8005883a 	mov	r2,r16
  806b04:	1906b03a 	or	r3,r3,r4
  806b08:	dfc00117 	ldw	ra,4(sp)
  806b0c:	dc000017 	ldw	r16,0(sp)
  806b10:	dec00204 	addi	sp,sp,8
  806b14:	f800283a 	ret
  806b18:	00c002c4 	movi	r3,11
  806b1c:	188bc83a 	sub	r5,r3,r2
  806b20:	814ad83a 	srl	r5,r16,r5
  806b24:	00c00434 	movhi	r3,16
  806b28:	18ffffc4 	addi	r3,r3,-1
  806b2c:	81a0983a 	sll	r16,r16,r6
  806b30:	2101ffcc 	andi	r4,r4,2047
  806b34:	28ca703a 	and	r5,r5,r3
  806b38:	003fed06 	br	806af0 <__alt_mem_onchip_mem+0xff7feaf0>
  806b3c:	0009883a 	mov	r4,zero
  806b40:	000b883a 	mov	r5,zero
  806b44:	003fea06 	br	806af0 <__alt_mem_onchip_mem+0xff7feaf0>

00806b48 <__clzsi2>:
  806b48:	00bfffd4 	movui	r2,65535
  806b4c:	11000536 	bltu	r2,r4,806b64 <__clzsi2+0x1c>
  806b50:	00803fc4 	movi	r2,255
  806b54:	11000f36 	bltu	r2,r4,806b94 <__clzsi2+0x4c>
  806b58:	00800804 	movi	r2,32
  806b5c:	0007883a 	mov	r3,zero
  806b60:	00000506 	br	806b78 <__clzsi2+0x30>
  806b64:	00804034 	movhi	r2,256
  806b68:	10bfffc4 	addi	r2,r2,-1
  806b6c:	11000c2e 	bgeu	r2,r4,806ba0 <__clzsi2+0x58>
  806b70:	00800204 	movi	r2,8
  806b74:	00c00604 	movi	r3,24
  806b78:	20c8d83a 	srl	r4,r4,r3
  806b7c:	00c02074 	movhi	r3,129
  806b80:	18db09c4 	addi	r3,r3,27687
  806b84:	1909883a 	add	r4,r3,r4
  806b88:	20c00003 	ldbu	r3,0(r4)
  806b8c:	10c5c83a 	sub	r2,r2,r3
  806b90:	f800283a 	ret
  806b94:	00800604 	movi	r2,24
  806b98:	00c00204 	movi	r3,8
  806b9c:	003ff606 	br	806b78 <__alt_mem_onchip_mem+0xff7feb78>
  806ba0:	00800404 	movi	r2,16
  806ba4:	1007883a 	mov	r3,r2
  806ba8:	003ff306 	br	806b78 <__alt_mem_onchip_mem+0xff7feb78>

00806bac <_fopen_r>:
  806bac:	defffa04 	addi	sp,sp,-24
  806bb0:	3005883a 	mov	r2,r6
  806bb4:	dcc00415 	stw	r19,16(sp)
  806bb8:	d80d883a 	mov	r6,sp
  806bbc:	2827883a 	mov	r19,r5
  806bc0:	100b883a 	mov	r5,r2
  806bc4:	dc800315 	stw	r18,12(sp)
  806bc8:	dfc00515 	stw	ra,20(sp)
  806bcc:	dc400215 	stw	r17,8(sp)
  806bd0:	dc000115 	stw	r16,4(sp)
  806bd4:	2025883a 	mov	r18,r4
  806bd8:	080c6c40 	call	80c6c4 <__sflags>
  806bdc:	10002726 	beq	r2,zero,806c7c <_fopen_r+0xd0>
  806be0:	9009883a 	mov	r4,r18
  806be4:	1023883a 	mov	r17,r2
  806be8:	080c5440 	call	80c544 <__sfp>
  806bec:	1021883a 	mov	r16,r2
  806bf0:	10002226 	beq	r2,zero,806c7c <_fopen_r+0xd0>
  806bf4:	d9800017 	ldw	r6,0(sp)
  806bf8:	01c06d84 	movi	r7,438
  806bfc:	980b883a 	mov	r5,r19
  806c00:	9009883a 	mov	r4,r18
  806c04:	0807dd00 	call	807dd0 <_open_r>
  806c08:	10001916 	blt	r2,zero,806c70 <_fopen_r+0xc4>
  806c0c:	8080038d 	sth	r2,14(r16)
  806c10:	00802074 	movhi	r2,129
  806c14:	10a05204 	addi	r2,r2,-32440
  806c18:	80800815 	stw	r2,32(r16)
  806c1c:	00802074 	movhi	r2,129
  806c20:	10a06904 	addi	r2,r2,-32348
  806c24:	80800915 	stw	r2,36(r16)
  806c28:	00802074 	movhi	r2,129
  806c2c:	10a08804 	addi	r2,r2,-32224
  806c30:	80800a15 	stw	r2,40(r16)
  806c34:	00802074 	movhi	r2,129
  806c38:	10a09f04 	addi	r2,r2,-32132
  806c3c:	8440030d 	sth	r17,12(r16)
  806c40:	84000715 	stw	r16,28(r16)
  806c44:	80800b15 	stw	r2,44(r16)
  806c48:	8c40400c 	andi	r17,r17,256
  806c4c:	88000d1e 	bne	r17,zero,806c84 <_fopen_r+0xd8>
  806c50:	8005883a 	mov	r2,r16
  806c54:	dfc00517 	ldw	ra,20(sp)
  806c58:	dcc00417 	ldw	r19,16(sp)
  806c5c:	dc800317 	ldw	r18,12(sp)
  806c60:	dc400217 	ldw	r17,8(sp)
  806c64:	dc000117 	ldw	r16,4(sp)
  806c68:	dec00604 	addi	sp,sp,24
  806c6c:	f800283a 	ret
  806c70:	080c6840 	call	80c684 <__sfp_lock_acquire>
  806c74:	8000030d 	sth	zero,12(r16)
  806c78:	080c6880 	call	80c688 <__sfp_lock_release>
  806c7c:	0005883a 	mov	r2,zero
  806c80:	003ff406 	br	806c54 <__alt_mem_onchip_mem+0xff7fec54>
  806c84:	01c00084 	movi	r7,2
  806c88:	000d883a 	mov	r6,zero
  806c8c:	800b883a 	mov	r5,r16
  806c90:	9009883a 	mov	r4,r18
  806c94:	0806d040 	call	806d04 <_fseek_r>
  806c98:	8005883a 	mov	r2,r16
  806c9c:	003fed06 	br	806c54 <__alt_mem_onchip_mem+0xff7fec54>

00806ca0 <fopen>:
  806ca0:	008020b4 	movhi	r2,130
  806ca4:	10a39404 	addi	r2,r2,-29104
  806ca8:	280d883a 	mov	r6,r5
  806cac:	200b883a 	mov	r5,r4
  806cb0:	11000017 	ldw	r4,0(r2)
  806cb4:	0806bac1 	jmpi	806bac <_fopen_r>

00806cb8 <_fprintf_r>:
  806cb8:	defffe04 	addi	sp,sp,-8
  806cbc:	2809883a 	mov	r4,r5
  806cc0:	300b883a 	mov	r5,r6
  806cc4:	dfc00015 	stw	ra,0(sp)
  806cc8:	d9c00115 	stw	r7,4(sp)
  806ccc:	d9800104 	addi	r6,sp,4
  806cd0:	080a5140 	call	80a514 <__vfprintf_internal>
  806cd4:	dfc00017 	ldw	ra,0(sp)
  806cd8:	dec00204 	addi	sp,sp,8
  806cdc:	f800283a 	ret

00806ce0 <fprintf>:
  806ce0:	defffd04 	addi	sp,sp,-12
  806ce4:	dfc00015 	stw	ra,0(sp)
  806ce8:	d9800115 	stw	r6,4(sp)
  806cec:	d9c00215 	stw	r7,8(sp)
  806cf0:	d9800104 	addi	r6,sp,4
  806cf4:	080a5140 	call	80a514 <__vfprintf_internal>
  806cf8:	dfc00017 	ldw	ra,0(sp)
  806cfc:	dec00304 	addi	sp,sp,12
  806d00:	f800283a 	ret

00806d04 <_fseek_r>:
  806d04:	0806d241 	jmpi	806d24 <_fseeko_r>

00806d08 <fseek>:
  806d08:	008020b4 	movhi	r2,130
  806d0c:	10a39404 	addi	r2,r2,-29104
  806d10:	300f883a 	mov	r7,r6
  806d14:	280d883a 	mov	r6,r5
  806d18:	200b883a 	mov	r5,r4
  806d1c:	11000017 	ldw	r4,0(r2)
  806d20:	0806d241 	jmpi	806d24 <_fseeko_r>

00806d24 <_fseeko_r>:
  806d24:	deffe804 	addi	sp,sp,-96
  806d28:	dd401415 	stw	r21,80(sp)
  806d2c:	dc801115 	stw	r18,68(sp)
  806d30:	dc401015 	stw	r17,64(sp)
  806d34:	dc000f15 	stw	r16,60(sp)
  806d38:	dfc01715 	stw	ra,92(sp)
  806d3c:	ddc01615 	stw	r23,88(sp)
  806d40:	dd801515 	stw	r22,84(sp)
  806d44:	dd001315 	stw	r20,76(sp)
  806d48:	dcc01215 	stw	r19,72(sp)
  806d4c:	2023883a 	mov	r17,r4
  806d50:	2821883a 	mov	r16,r5
  806d54:	302b883a 	mov	r21,r6
  806d58:	3825883a 	mov	r18,r7
  806d5c:	20000226 	beq	r4,zero,806d68 <_fseeko_r+0x44>
  806d60:	20800e17 	ldw	r2,56(r4)
  806d64:	10005a26 	beq	r2,zero,806ed0 <_fseeko_r+0x1ac>
  806d68:	8080030b 	ldhu	r2,12(r16)
  806d6c:	00c04204 	movi	r3,264
  806d70:	1080420c 	andi	r2,r2,264
  806d74:	10c05b26 	beq	r2,r3,806ee4 <_fseeko_r+0x1c0>
  806d78:	85000a17 	ldw	r20,40(r16)
  806d7c:	a000f626 	beq	r20,zero,807158 <_fseeko_r+0x434>
  806d80:	00800044 	movi	r2,1
  806d84:	90803e26 	beq	r18,r2,806e80 <_fseeko_r+0x15c>
  806d88:	00800084 	movi	r2,2
  806d8c:	90801026 	beq	r18,r2,806dd0 <_fseeko_r+0xac>
  806d90:	90000f26 	beq	r18,zero,806dd0 <_fseeko_r+0xac>
  806d94:	00800584 	movi	r2,22
  806d98:	88800015 	stw	r2,0(r17)
  806d9c:	04ffffc4 	movi	r19,-1
  806da0:	9805883a 	mov	r2,r19
  806da4:	dfc01717 	ldw	ra,92(sp)
  806da8:	ddc01617 	ldw	r23,88(sp)
  806dac:	dd801517 	ldw	r22,84(sp)
  806db0:	dd401417 	ldw	r21,80(sp)
  806db4:	dd001317 	ldw	r20,76(sp)
  806db8:	dcc01217 	ldw	r19,72(sp)
  806dbc:	dc801117 	ldw	r18,68(sp)
  806dc0:	dc401017 	ldw	r17,64(sp)
  806dc4:	dc000f17 	ldw	r16,60(sp)
  806dc8:	dec01804 	addi	sp,sp,96
  806dcc:	f800283a 	ret
  806dd0:	80800417 	ldw	r2,16(r16)
  806dd4:	002f883a 	mov	r23,zero
  806dd8:	0027883a 	mov	r19,zero
  806ddc:	1000cb26 	beq	r2,zero,80710c <_fseeko_r+0x3e8>
  806de0:	8080030b 	ldhu	r2,12(r16)
  806de4:	10c2068c 	andi	r3,r2,2074
  806de8:	1800071e 	bne	r3,zero,806e08 <_fseeko_r+0xe4>
  806dec:	10c1000c 	andi	r3,r2,1024
  806df0:	1800451e 	bne	r3,zero,806f08 <_fseeko_r+0x1e4>
  806df4:	00c02074 	movhi	r3,129
  806df8:	18e08804 	addi	r3,r3,-32224
  806dfc:	a0c0b726 	beq	r20,r3,8070dc <_fseeko_r+0x3b8>
  806e00:	10820014 	ori	r2,r2,2048
  806e04:	8080030d 	sth	r2,12(r16)
  806e08:	800b883a 	mov	r5,r16
  806e0c:	8809883a 	mov	r4,r17
  806e10:	080c2980 	call	80c298 <_fflush_r>
  806e14:	1027883a 	mov	r19,r2
  806e18:	103fe01e 	bne	r2,zero,806d9c <__alt_mem_onchip_mem+0xff7fed9c>
  806e1c:	81400717 	ldw	r5,28(r16)
  806e20:	900f883a 	mov	r7,r18
  806e24:	a80d883a 	mov	r6,r21
  806e28:	8809883a 	mov	r4,r17
  806e2c:	a03ee83a 	callr	r20
  806e30:	00ffffc4 	movi	r3,-1
  806e34:	10ffd926 	beq	r2,r3,806d9c <__alt_mem_onchip_mem+0xff7fed9c>
  806e38:	81400c17 	ldw	r5,48(r16)
  806e3c:	28000526 	beq	r5,zero,806e54 <_fseeko_r+0x130>
  806e40:	80801004 	addi	r2,r16,64
  806e44:	28800226 	beq	r5,r2,806e50 <_fseeko_r+0x12c>
  806e48:	8809883a 	mov	r4,r17
  806e4c:	080c8940 	call	80c894 <_free_r>
  806e50:	80000c15 	stw	zero,48(r16)
  806e54:	8080030b 	ldhu	r2,12(r16)
  806e58:	80c00417 	ldw	r3,16(r16)
  806e5c:	80000115 	stw	zero,4(r16)
  806e60:	10bdf7cc 	andi	r2,r2,63455
  806e64:	80c00015 	stw	r3,0(r16)
  806e68:	8080030d 	sth	r2,12(r16)
  806e6c:	01800204 	movi	r6,8
  806e70:	000b883a 	mov	r5,zero
  806e74:	81001704 	addi	r4,r16,92
  806e78:	0807ca80 	call	807ca8 <memset>
  806e7c:	003fc806 	br	806da0 <__alt_mem_onchip_mem+0xff7feda0>
  806e80:	800b883a 	mov	r5,r16
  806e84:	8809883a 	mov	r4,r17
  806e88:	080c2980 	call	80c298 <_fflush_r>
  806e8c:	8080030b 	ldhu	r2,12(r16)
  806e90:	10c4000c 	andi	r3,r2,4096
  806e94:	18008726 	beq	r3,zero,8070b4 <_fseeko_r+0x390>
  806e98:	84c01417 	ldw	r19,80(r16)
  806e9c:	10c0010c 	andi	r3,r2,4
  806ea0:	1800431e 	bne	r3,zero,806fb0 <_fseeko_r+0x28c>
  806ea4:	1080020c 	andi	r2,r2,8
  806ea8:	10008026 	beq	r2,zero,8070ac <_fseeko_r+0x388>
  806eac:	80c00017 	ldw	r3,0(r16)
  806eb0:	80800417 	ldw	r2,16(r16)
  806eb4:	18000226 	beq	r3,zero,806ec0 <_fseeko_r+0x19c>
  806eb8:	1887c83a 	sub	r3,r3,r2
  806ebc:	98e7883a 	add	r19,r19,r3
  806ec0:	aceb883a 	add	r21,r21,r19
  806ec4:	05c00044 	movi	r23,1
  806ec8:	0025883a 	mov	r18,zero
  806ecc:	003fc306 	br	806ddc <__alt_mem_onchip_mem+0xff7feddc>
  806ed0:	080c6740 	call	80c674 <__sinit>
  806ed4:	8080030b 	ldhu	r2,12(r16)
  806ed8:	00c04204 	movi	r3,264
  806edc:	1080420c 	andi	r2,r2,264
  806ee0:	10ffa51e 	bne	r2,r3,806d78 <__alt_mem_onchip_mem+0xff7fed78>
  806ee4:	800b883a 	mov	r5,r16
  806ee8:	8809883a 	mov	r4,r17
  806eec:	080c2980 	call	80c298 <_fflush_r>
  806ef0:	003fa106 	br	806d78 <__alt_mem_onchip_mem+0xff7fed78>
  806ef4:	8080030b 	ldhu	r2,12(r16)
  806ef8:	00c10004 	movi	r3,1024
  806efc:	80c01315 	stw	r3,76(r16)
  806f00:	10c4b03a 	or	r2,r2,r3
  806f04:	8080030d 	sth	r2,12(r16)
  806f08:	9000311e 	bne	r18,zero,806fd0 <_fseeko_r+0x2ac>
  806f0c:	a82d883a 	mov	r22,r21
  806f10:	b800371e 	bne	r23,zero,806ff0 <_fseeko_r+0x2cc>
  806f14:	8080030b 	ldhu	r2,12(r16)
  806f18:	1084000c 	andi	r2,r2,4096
  806f1c:	10007f26 	beq	r2,zero,80711c <_fseeko_r+0x3f8>
  806f20:	80801417 	ldw	r2,80(r16)
  806f24:	81800117 	ldw	r6,4(r16)
  806f28:	81400c17 	ldw	r5,48(r16)
  806f2c:	11a7c83a 	sub	r19,r2,r6
  806f30:	28008226 	beq	r5,zero,80713c <_fseeko_r+0x418>
  806f34:	81c00f17 	ldw	r7,60(r16)
  806f38:	99e7c83a 	sub	r19,r19,r7
  806f3c:	81000e17 	ldw	r4,56(r16)
  806f40:	80800417 	ldw	r2,16(r16)
  806f44:	99a7883a 	add	r19,r19,r6
  806f48:	2087c83a 	sub	r3,r4,r2
  806f4c:	98e7c83a 	sub	r19,r19,r3
  806f50:	38c7883a 	add	r3,r7,r3
  806f54:	b4c02b16 	blt	r22,r19,807004 <_fseeko_r+0x2e0>
  806f58:	98c9883a 	add	r4,r19,r3
  806f5c:	b100292e 	bgeu	r22,r4,807004 <_fseeko_r+0x2e0>
  806f60:	b4e7c83a 	sub	r19,r22,r19
  806f64:	14c5883a 	add	r2,r2,r19
  806f68:	1ce7c83a 	sub	r19,r3,r19
  806f6c:	80800015 	stw	r2,0(r16)
  806f70:	84c00115 	stw	r19,4(r16)
  806f74:	28000526 	beq	r5,zero,806f8c <_fseeko_r+0x268>
  806f78:	80801004 	addi	r2,r16,64
  806f7c:	28800226 	beq	r5,r2,806f88 <_fseeko_r+0x264>
  806f80:	8809883a 	mov	r4,r17
  806f84:	080c8940 	call	80c894 <_free_r>
  806f88:	80000c15 	stw	zero,48(r16)
  806f8c:	8080030b 	ldhu	r2,12(r16)
  806f90:	01800204 	movi	r6,8
  806f94:	000b883a 	mov	r5,zero
  806f98:	10bff7cc 	andi	r2,r2,65503
  806f9c:	8080030d 	sth	r2,12(r16)
  806fa0:	81001704 	addi	r4,r16,92
  806fa4:	0807ca80 	call	807ca8 <memset>
  806fa8:	0027883a 	mov	r19,zero
  806fac:	003f7c06 	br	806da0 <__alt_mem_onchip_mem+0xff7feda0>
  806fb0:	80c00117 	ldw	r3,4(r16)
  806fb4:	80800c17 	ldw	r2,48(r16)
  806fb8:	98e7c83a 	sub	r19,r19,r3
  806fbc:	10003b26 	beq	r2,zero,8070ac <_fseeko_r+0x388>
  806fc0:	80c00f17 	ldw	r3,60(r16)
  806fc4:	80800417 	ldw	r2,16(r16)
  806fc8:	98e7c83a 	sub	r19,r19,r3
  806fcc:	003fbc06 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  806fd0:	8140038f 	ldh	r5,14(r16)
  806fd4:	d80d883a 	mov	r6,sp
  806fd8:	8809883a 	mov	r4,r17
  806fdc:	08071840 	call	807184 <_fstat_r>
  806fe0:	103f891e 	bne	r2,zero,806e08 <__alt_mem_onchip_mem+0xff7fee08>
  806fe4:	dd800417 	ldw	r22,16(sp)
  806fe8:	adad883a 	add	r22,r21,r22
  806fec:	b83fc926 	beq	r23,zero,806f14 <__alt_mem_onchip_mem+0xff7fef14>
  806ff0:	81400c17 	ldw	r5,48(r16)
  806ff4:	81800117 	ldw	r6,4(r16)
  806ff8:	28005026 	beq	r5,zero,80713c <_fseeko_r+0x418>
  806ffc:	81c00f17 	ldw	r7,60(r16)
  807000:	003fce06 	br	806f3c <__alt_mem_onchip_mem+0xff7fef3c>
  807004:	84c01317 	ldw	r19,76(r16)
  807008:	81400717 	ldw	r5,28(r16)
  80700c:	000f883a 	mov	r7,zero
  807010:	04e7c83a 	sub	r19,zero,r19
  807014:	9da6703a 	and	r19,r19,r22
  807018:	980d883a 	mov	r6,r19
  80701c:	8809883a 	mov	r4,r17
  807020:	a03ee83a 	callr	r20
  807024:	00ffffc4 	movi	r3,-1
  807028:	10ff7726 	beq	r2,r3,806e08 <__alt_mem_onchip_mem+0xff7fee08>
  80702c:	80800417 	ldw	r2,16(r16)
  807030:	81400c17 	ldw	r5,48(r16)
  807034:	80000115 	stw	zero,4(r16)
  807038:	80800015 	stw	r2,0(r16)
  80703c:	28000526 	beq	r5,zero,807054 <_fseeko_r+0x330>
  807040:	80801004 	addi	r2,r16,64
  807044:	28800226 	beq	r5,r2,807050 <_fseeko_r+0x32c>
  807048:	8809883a 	mov	r4,r17
  80704c:	080c8940 	call	80c894 <_free_r>
  807050:	80000c15 	stw	zero,48(r16)
  807054:	8080030b 	ldhu	r2,12(r16)
  807058:	b4e7c83a 	sub	r19,r22,r19
  80705c:	10bff7cc 	andi	r2,r2,65503
  807060:	8080030d 	sth	r2,12(r16)
  807064:	98000b26 	beq	r19,zero,807094 <_fseeko_r+0x370>
  807068:	800b883a 	mov	r5,r16
  80706c:	8809883a 	mov	r4,r17
  807070:	0807f200 	call	807f20 <__srefill_r>
  807074:	103f641e 	bne	r2,zero,806e08 <__alt_mem_onchip_mem+0xff7fee08>
  807078:	80800117 	ldw	r2,4(r16)
  80707c:	14ff6236 	bltu	r2,r19,806e08 <__alt_mem_onchip_mem+0xff7fee08>
  807080:	80c00017 	ldw	r3,0(r16)
  807084:	14c5c83a 	sub	r2,r2,r19
  807088:	80800115 	stw	r2,4(r16)
  80708c:	1ce7883a 	add	r19,r3,r19
  807090:	84c00015 	stw	r19,0(r16)
  807094:	01800204 	movi	r6,8
  807098:	000b883a 	mov	r5,zero
  80709c:	81001704 	addi	r4,r16,92
  8070a0:	0807ca80 	call	807ca8 <memset>
  8070a4:	0027883a 	mov	r19,zero
  8070a8:	003f3d06 	br	806da0 <__alt_mem_onchip_mem+0xff7feda0>
  8070ac:	80800417 	ldw	r2,16(r16)
  8070b0:	003f8306 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8070b4:	81400717 	ldw	r5,28(r16)
  8070b8:	900f883a 	mov	r7,r18
  8070bc:	000d883a 	mov	r6,zero
  8070c0:	8809883a 	mov	r4,r17
  8070c4:	a03ee83a 	callr	r20
  8070c8:	1027883a 	mov	r19,r2
  8070cc:	00bfffc4 	movi	r2,-1
  8070d0:	98bf3226 	beq	r19,r2,806d9c <__alt_mem_onchip_mem+0xff7fed9c>
  8070d4:	8080030b 	ldhu	r2,12(r16)
  8070d8:	003f7006 	br	806e9c <__alt_mem_onchip_mem+0xff7fee9c>
  8070dc:	8140038f 	ldh	r5,14(r16)
  8070e0:	283f4716 	blt	r5,zero,806e00 <__alt_mem_onchip_mem+0xff7fee00>
  8070e4:	d80d883a 	mov	r6,sp
  8070e8:	8809883a 	mov	r4,r17
  8070ec:	08071840 	call	807184 <_fstat_r>
  8070f0:	1000041e 	bne	r2,zero,807104 <_fseeko_r+0x3e0>
  8070f4:	d8800117 	ldw	r2,4(sp)
  8070f8:	00e00014 	movui	r3,32768
  8070fc:	10bc000c 	andi	r2,r2,61440
  807100:	10ff7c26 	beq	r2,r3,806ef4 <__alt_mem_onchip_mem+0xff7feef4>
  807104:	8080030b 	ldhu	r2,12(r16)
  807108:	003f3d06 	br	806e00 <__alt_mem_onchip_mem+0xff7fee00>
  80710c:	800b883a 	mov	r5,r16
  807110:	8809883a 	mov	r4,r17
  807114:	08072e00 	call	8072e0 <__smakebuf_r>
  807118:	003f3106 	br	806de0 <__alt_mem_onchip_mem+0xff7fede0>
  80711c:	81400717 	ldw	r5,28(r16)
  807120:	01c00044 	movi	r7,1
  807124:	000d883a 	mov	r6,zero
  807128:	8809883a 	mov	r4,r17
  80712c:	a03ee83a 	callr	r20
  807130:	00ffffc4 	movi	r3,-1
  807134:	10ff7b1e 	bne	r2,r3,806f24 <__alt_mem_onchip_mem+0xff7fef24>
  807138:	003f3306 	br	806e08 <__alt_mem_onchip_mem+0xff7fee08>
  80713c:	80c00017 	ldw	r3,0(r16)
  807140:	80800417 	ldw	r2,16(r16)
  807144:	000b883a 	mov	r5,zero
  807148:	1887c83a 	sub	r3,r3,r2
  80714c:	98e7c83a 	sub	r19,r19,r3
  807150:	30c7883a 	add	r3,r6,r3
  807154:	003f7f06 	br	806f54 <__alt_mem_onchip_mem+0xff7fef54>
  807158:	00800744 	movi	r2,29
  80715c:	88800015 	stw	r2,0(r17)
  807160:	04ffffc4 	movi	r19,-1
  807164:	003f0e06 	br	806da0 <__alt_mem_onchip_mem+0xff7feda0>

00807168 <fseeko>:
  807168:	008020b4 	movhi	r2,130
  80716c:	10a39404 	addi	r2,r2,-29104
  807170:	300f883a 	mov	r7,r6
  807174:	280d883a 	mov	r6,r5
  807178:	200b883a 	mov	r5,r4
  80717c:	11000017 	ldw	r4,0(r2)
  807180:	0806d241 	jmpi	806d24 <_fseeko_r>

00807184 <_fstat_r>:
  807184:	defffd04 	addi	sp,sp,-12
  807188:	2805883a 	mov	r2,r5
  80718c:	dc000015 	stw	r16,0(sp)
  807190:	040020b4 	movhi	r16,130
  807194:	dc400115 	stw	r17,4(sp)
  807198:	842ae404 	addi	r16,r16,-21616
  80719c:	2023883a 	mov	r17,r4
  8071a0:	300b883a 	mov	r5,r6
  8071a4:	1009883a 	mov	r4,r2
  8071a8:	dfc00215 	stw	ra,8(sp)
  8071ac:	80000015 	stw	zero,0(r16)
  8071b0:	0812b740 	call	812b74 <fstat>
  8071b4:	00ffffc4 	movi	r3,-1
  8071b8:	10c00526 	beq	r2,r3,8071d0 <_fstat_r+0x4c>
  8071bc:	dfc00217 	ldw	ra,8(sp)
  8071c0:	dc400117 	ldw	r17,4(sp)
  8071c4:	dc000017 	ldw	r16,0(sp)
  8071c8:	dec00304 	addi	sp,sp,12
  8071cc:	f800283a 	ret
  8071d0:	80c00017 	ldw	r3,0(r16)
  8071d4:	183ff926 	beq	r3,zero,8071bc <__alt_mem_onchip_mem+0xff7ff1bc>
  8071d8:	88c00015 	stw	r3,0(r17)
  8071dc:	003ff706 	br	8071bc <__alt_mem_onchip_mem+0xff7ff1bc>

008071e0 <_fwrite_r>:
  8071e0:	defff504 	addi	sp,sp,-44
  8071e4:	dc800815 	stw	r18,32(sp)
  8071e8:	39a5383a 	mul	r18,r7,r6
  8071ec:	d8800304 	addi	r2,sp,12
  8071f0:	d8800015 	stw	r2,0(sp)
  8071f4:	00800044 	movi	r2,1
  8071f8:	dcc00915 	stw	r19,36(sp)
  8071fc:	dc400715 	stw	r17,28(sp)
  807200:	dc000615 	stw	r16,24(sp)
  807204:	d9400315 	stw	r5,12(sp)
  807208:	dfc00a15 	stw	ra,40(sp)
  80720c:	dc800415 	stw	r18,16(sp)
  807210:	dc800215 	stw	r18,8(sp)
  807214:	d8800115 	stw	r2,4(sp)
  807218:	3027883a 	mov	r19,r6
  80721c:	3821883a 	mov	r16,r7
  807220:	2023883a 	mov	r17,r4
  807224:	d9400b17 	ldw	r5,44(sp)
  807228:	20000226 	beq	r4,zero,807234 <_fwrite_r+0x54>
  80722c:	20800e17 	ldw	r2,56(r4)
  807230:	10001a26 	beq	r2,zero,80729c <_fwrite_r+0xbc>
  807234:	2880030b 	ldhu	r2,12(r5)
  807238:	10c8000c 	andi	r3,r2,8192
  80723c:	1800061e 	bne	r3,zero,807258 <_fwrite_r+0x78>
  807240:	29001917 	ldw	r4,100(r5)
  807244:	00f7ffc4 	movi	r3,-8193
  807248:	10880014 	ori	r2,r2,8192
  80724c:	20c6703a 	and	r3,r4,r3
  807250:	2880030d 	sth	r2,12(r5)
  807254:	28c01915 	stw	r3,100(r5)
  807258:	d80d883a 	mov	r6,sp
  80725c:	8809883a 	mov	r4,r17
  807260:	080cba40 	call	80cba4 <__sfvwrite_r>
  807264:	10000b26 	beq	r2,zero,807294 <_fwrite_r+0xb4>
  807268:	d9000217 	ldw	r4,8(sp)
  80726c:	980b883a 	mov	r5,r19
  807270:	9109c83a 	sub	r4,r18,r4
  807274:	08117100 	call	811710 <__udivsi3>
  807278:	dfc00a17 	ldw	ra,40(sp)
  80727c:	dcc00917 	ldw	r19,36(sp)
  807280:	dc800817 	ldw	r18,32(sp)
  807284:	dc400717 	ldw	r17,28(sp)
  807288:	dc000617 	ldw	r16,24(sp)
  80728c:	dec00b04 	addi	sp,sp,44
  807290:	f800283a 	ret
  807294:	8005883a 	mov	r2,r16
  807298:	003ff706 	br	807278 <__alt_mem_onchip_mem+0xff7ff278>
  80729c:	d9400515 	stw	r5,20(sp)
  8072a0:	080c6740 	call	80c674 <__sinit>
  8072a4:	d9400517 	ldw	r5,20(sp)
  8072a8:	003fe206 	br	807234 <__alt_mem_onchip_mem+0xff7ff234>

008072ac <fwrite>:
  8072ac:	defffe04 	addi	sp,sp,-8
  8072b0:	008020b4 	movhi	r2,130
  8072b4:	d9c00015 	stw	r7,0(sp)
  8072b8:	10a39404 	addi	r2,r2,-29104
  8072bc:	300f883a 	mov	r7,r6
  8072c0:	280d883a 	mov	r6,r5
  8072c4:	200b883a 	mov	r5,r4
  8072c8:	11000017 	ldw	r4,0(r2)
  8072cc:	dfc00115 	stw	ra,4(sp)
  8072d0:	08071e00 	call	8071e0 <_fwrite_r>
  8072d4:	dfc00117 	ldw	ra,4(sp)
  8072d8:	dec00204 	addi	sp,sp,8
  8072dc:	f800283a 	ret

008072e0 <__smakebuf_r>:
  8072e0:	2880030b 	ldhu	r2,12(r5)
  8072e4:	10c0008c 	andi	r3,r2,2
  8072e8:	1800411e 	bne	r3,zero,8073f0 <__smakebuf_r+0x110>
  8072ec:	deffec04 	addi	sp,sp,-80
  8072f0:	dc000f15 	stw	r16,60(sp)
  8072f4:	2821883a 	mov	r16,r5
  8072f8:	2940038f 	ldh	r5,14(r5)
  8072fc:	dc401015 	stw	r17,64(sp)
  807300:	dfc01315 	stw	ra,76(sp)
  807304:	dcc01215 	stw	r19,72(sp)
  807308:	dc801115 	stw	r18,68(sp)
  80730c:	2023883a 	mov	r17,r4
  807310:	28001c16 	blt	r5,zero,807384 <__smakebuf_r+0xa4>
  807314:	d80d883a 	mov	r6,sp
  807318:	08071840 	call	807184 <_fstat_r>
  80731c:	10001816 	blt	r2,zero,807380 <__smakebuf_r+0xa0>
  807320:	d8800117 	ldw	r2,4(sp)
  807324:	00e00014 	movui	r3,32768
  807328:	10bc000c 	andi	r2,r2,61440
  80732c:	14c80020 	cmpeqi	r19,r2,8192
  807330:	10c03726 	beq	r2,r3,807410 <__smakebuf_r+0x130>
  807334:	80c0030b 	ldhu	r3,12(r16)
  807338:	18c20014 	ori	r3,r3,2048
  80733c:	80c0030d 	sth	r3,12(r16)
  807340:	00c80004 	movi	r3,8192
  807344:	10c0521e 	bne	r2,r3,807490 <__smakebuf_r+0x1b0>
  807348:	8140038f 	ldh	r5,14(r16)
  80734c:	8809883a 	mov	r4,r17
  807350:	080d1e80 	call	80d1e8 <_isatty_r>
  807354:	10004c26 	beq	r2,zero,807488 <__smakebuf_r+0x1a8>
  807358:	8080030b 	ldhu	r2,12(r16)
  80735c:	80c010c4 	addi	r3,r16,67
  807360:	80c00015 	stw	r3,0(r16)
  807364:	10800054 	ori	r2,r2,1
  807368:	8080030d 	sth	r2,12(r16)
  80736c:	00800044 	movi	r2,1
  807370:	80c00415 	stw	r3,16(r16)
  807374:	80800515 	stw	r2,20(r16)
  807378:	04810004 	movi	r18,1024
  80737c:	00000706 	br	80739c <__smakebuf_r+0xbc>
  807380:	8080030b 	ldhu	r2,12(r16)
  807384:	10c0200c 	andi	r3,r2,128
  807388:	18001f1e 	bne	r3,zero,807408 <__smakebuf_r+0x128>
  80738c:	04810004 	movi	r18,1024
  807390:	10820014 	ori	r2,r2,2048
  807394:	8080030d 	sth	r2,12(r16)
  807398:	0027883a 	mov	r19,zero
  80739c:	900b883a 	mov	r5,r18
  8073a0:	8809883a 	mov	r4,r17
  8073a4:	080749c0 	call	80749c <_malloc_r>
  8073a8:	10002c26 	beq	r2,zero,80745c <__smakebuf_r+0x17c>
  8073ac:	80c0030b 	ldhu	r3,12(r16)
  8073b0:	01002074 	movhi	r4,129
  8073b4:	2130cb04 	addi	r4,r4,-15572
  8073b8:	89000f15 	stw	r4,60(r17)
  8073bc:	18c02014 	ori	r3,r3,128
  8073c0:	80c0030d 	sth	r3,12(r16)
  8073c4:	80800015 	stw	r2,0(r16)
  8073c8:	80800415 	stw	r2,16(r16)
  8073cc:	84800515 	stw	r18,20(r16)
  8073d0:	98001a1e 	bne	r19,zero,80743c <__smakebuf_r+0x15c>
  8073d4:	dfc01317 	ldw	ra,76(sp)
  8073d8:	dcc01217 	ldw	r19,72(sp)
  8073dc:	dc801117 	ldw	r18,68(sp)
  8073e0:	dc401017 	ldw	r17,64(sp)
  8073e4:	dc000f17 	ldw	r16,60(sp)
  8073e8:	dec01404 	addi	sp,sp,80
  8073ec:	f800283a 	ret
  8073f0:	288010c4 	addi	r2,r5,67
  8073f4:	28800015 	stw	r2,0(r5)
  8073f8:	28800415 	stw	r2,16(r5)
  8073fc:	00800044 	movi	r2,1
  807400:	28800515 	stw	r2,20(r5)
  807404:	f800283a 	ret
  807408:	04801004 	movi	r18,64
  80740c:	003fe006 	br	807390 <__alt_mem_onchip_mem+0xff7ff390>
  807410:	81000a17 	ldw	r4,40(r16)
  807414:	00c02074 	movhi	r3,129
  807418:	18e08804 	addi	r3,r3,-32224
  80741c:	20ffc51e 	bne	r4,r3,807334 <__alt_mem_onchip_mem+0xff7ff334>
  807420:	8080030b 	ldhu	r2,12(r16)
  807424:	04810004 	movi	r18,1024
  807428:	84801315 	stw	r18,76(r16)
  80742c:	1484b03a 	or	r2,r2,r18
  807430:	8080030d 	sth	r2,12(r16)
  807434:	0027883a 	mov	r19,zero
  807438:	003fd806 	br	80739c <__alt_mem_onchip_mem+0xff7ff39c>
  80743c:	8140038f 	ldh	r5,14(r16)
  807440:	8809883a 	mov	r4,r17
  807444:	080d1e80 	call	80d1e8 <_isatty_r>
  807448:	103fe226 	beq	r2,zero,8073d4 <__alt_mem_onchip_mem+0xff7ff3d4>
  80744c:	8080030b 	ldhu	r2,12(r16)
  807450:	10800054 	ori	r2,r2,1
  807454:	8080030d 	sth	r2,12(r16)
  807458:	003fde06 	br	8073d4 <__alt_mem_onchip_mem+0xff7ff3d4>
  80745c:	8080030b 	ldhu	r2,12(r16)
  807460:	10c0800c 	andi	r3,r2,512
  807464:	183fdb1e 	bne	r3,zero,8073d4 <__alt_mem_onchip_mem+0xff7ff3d4>
  807468:	10800094 	ori	r2,r2,2
  80746c:	80c010c4 	addi	r3,r16,67
  807470:	8080030d 	sth	r2,12(r16)
  807474:	00800044 	movi	r2,1
  807478:	80c00015 	stw	r3,0(r16)
  80747c:	80c00415 	stw	r3,16(r16)
  807480:	80800515 	stw	r2,20(r16)
  807484:	003fd306 	br	8073d4 <__alt_mem_onchip_mem+0xff7ff3d4>
  807488:	04810004 	movi	r18,1024
  80748c:	003fc306 	br	80739c <__alt_mem_onchip_mem+0xff7ff39c>
  807490:	0027883a 	mov	r19,zero
  807494:	04810004 	movi	r18,1024
  807498:	003fc006 	br	80739c <__alt_mem_onchip_mem+0xff7ff39c>

0080749c <_malloc_r>:
  80749c:	defff504 	addi	sp,sp,-44
  8074a0:	dc800315 	stw	r18,12(sp)
  8074a4:	dfc00a15 	stw	ra,40(sp)
  8074a8:	df000915 	stw	fp,36(sp)
  8074ac:	ddc00815 	stw	r23,32(sp)
  8074b0:	dd800715 	stw	r22,28(sp)
  8074b4:	dd400615 	stw	r21,24(sp)
  8074b8:	dd000515 	stw	r20,20(sp)
  8074bc:	dcc00415 	stw	r19,16(sp)
  8074c0:	dc400215 	stw	r17,8(sp)
  8074c4:	dc000115 	stw	r16,4(sp)
  8074c8:	288002c4 	addi	r2,r5,11
  8074cc:	00c00584 	movi	r3,22
  8074d0:	2025883a 	mov	r18,r4
  8074d4:	18807f2e 	bgeu	r3,r2,8076d4 <_malloc_r+0x238>
  8074d8:	047ffe04 	movi	r17,-8
  8074dc:	1462703a 	and	r17,r2,r17
  8074e0:	8800a316 	blt	r17,zero,807770 <_malloc_r+0x2d4>
  8074e4:	8940a236 	bltu	r17,r5,807770 <_malloc_r+0x2d4>
  8074e8:	08130fc0 	call	8130fc <__malloc_lock>
  8074ec:	00807dc4 	movi	r2,503
  8074f0:	1441e92e 	bgeu	r2,r17,807c98 <_malloc_r+0x7fc>
  8074f4:	8804d27a 	srli	r2,r17,9
  8074f8:	1000a126 	beq	r2,zero,807780 <_malloc_r+0x2e4>
  8074fc:	00c00104 	movi	r3,4
  807500:	18811e36 	bltu	r3,r2,80797c <_malloc_r+0x4e0>
  807504:	8804d1ba 	srli	r2,r17,6
  807508:	12000e44 	addi	r8,r2,57
  80750c:	11c00e04 	addi	r7,r2,56
  807510:	4209883a 	add	r4,r8,r8
  807514:	04c02074 	movhi	r19,129
  807518:	2109883a 	add	r4,r4,r4
  80751c:	9cdd7704 	addi	r19,r19,30172
  807520:	2109883a 	add	r4,r4,r4
  807524:	9909883a 	add	r4,r19,r4
  807528:	24000117 	ldw	r16,4(r4)
  80752c:	213ffe04 	addi	r4,r4,-8
  807530:	24009726 	beq	r4,r16,807790 <_malloc_r+0x2f4>
  807534:	80800117 	ldw	r2,4(r16)
  807538:	01bfff04 	movi	r6,-4
  80753c:	014003c4 	movi	r5,15
  807540:	1184703a 	and	r2,r2,r6
  807544:	1447c83a 	sub	r3,r2,r17
  807548:	28c00716 	blt	r5,r3,807568 <_malloc_r+0xcc>
  80754c:	1800920e 	bge	r3,zero,807798 <_malloc_r+0x2fc>
  807550:	84000317 	ldw	r16,12(r16)
  807554:	24008e26 	beq	r4,r16,807790 <_malloc_r+0x2f4>
  807558:	80800117 	ldw	r2,4(r16)
  80755c:	1184703a 	and	r2,r2,r6
  807560:	1447c83a 	sub	r3,r2,r17
  807564:	28fff90e 	bge	r5,r3,80754c <__alt_mem_onchip_mem+0xff7ff54c>
  807568:	3809883a 	mov	r4,r7
  80756c:	01802074 	movhi	r6,129
  807570:	9c000417 	ldw	r16,16(r19)
  807574:	319d7704 	addi	r6,r6,30172
  807578:	32000204 	addi	r8,r6,8
  80757c:	82013426 	beq	r16,r8,807a50 <_malloc_r+0x5b4>
  807580:	80c00117 	ldw	r3,4(r16)
  807584:	00bfff04 	movi	r2,-4
  807588:	188e703a 	and	r7,r3,r2
  80758c:	3c45c83a 	sub	r2,r7,r17
  807590:	00c003c4 	movi	r3,15
  807594:	18811f16 	blt	r3,r2,807a14 <_malloc_r+0x578>
  807598:	32000515 	stw	r8,20(r6)
  80759c:	32000415 	stw	r8,16(r6)
  8075a0:	10007f0e 	bge	r2,zero,8077a0 <_malloc_r+0x304>
  8075a4:	00807fc4 	movi	r2,511
  8075a8:	11c0fd36 	bltu	r2,r7,8079a0 <_malloc_r+0x504>
  8075ac:	3806d0fa 	srli	r3,r7,3
  8075b0:	01c00044 	movi	r7,1
  8075b4:	30800117 	ldw	r2,4(r6)
  8075b8:	19400044 	addi	r5,r3,1
  8075bc:	294b883a 	add	r5,r5,r5
  8075c0:	1807d0ba 	srai	r3,r3,2
  8075c4:	294b883a 	add	r5,r5,r5
  8075c8:	294b883a 	add	r5,r5,r5
  8075cc:	298b883a 	add	r5,r5,r6
  8075d0:	38c6983a 	sll	r3,r7,r3
  8075d4:	29c00017 	ldw	r7,0(r5)
  8075d8:	2a7ffe04 	addi	r9,r5,-8
  8075dc:	1886b03a 	or	r3,r3,r2
  8075e0:	82400315 	stw	r9,12(r16)
  8075e4:	81c00215 	stw	r7,8(r16)
  8075e8:	30c00115 	stw	r3,4(r6)
  8075ec:	2c000015 	stw	r16,0(r5)
  8075f0:	3c000315 	stw	r16,12(r7)
  8075f4:	2005d0ba 	srai	r2,r4,2
  8075f8:	01400044 	movi	r5,1
  8075fc:	288a983a 	sll	r5,r5,r2
  807600:	19406f36 	bltu	r3,r5,8077c0 <_malloc_r+0x324>
  807604:	28c4703a 	and	r2,r5,r3
  807608:	10000a1e 	bne	r2,zero,807634 <_malloc_r+0x198>
  80760c:	00bfff04 	movi	r2,-4
  807610:	294b883a 	add	r5,r5,r5
  807614:	2088703a 	and	r4,r4,r2
  807618:	28c4703a 	and	r2,r5,r3
  80761c:	21000104 	addi	r4,r4,4
  807620:	1000041e 	bne	r2,zero,807634 <_malloc_r+0x198>
  807624:	294b883a 	add	r5,r5,r5
  807628:	28c4703a 	and	r2,r5,r3
  80762c:	21000104 	addi	r4,r4,4
  807630:	103ffc26 	beq	r2,zero,807624 <__alt_mem_onchip_mem+0xff7ff624>
  807634:	02bfff04 	movi	r10,-4
  807638:	024003c4 	movi	r9,15
  80763c:	21800044 	addi	r6,r4,1
  807640:	318d883a 	add	r6,r6,r6
  807644:	318d883a 	add	r6,r6,r6
  807648:	318d883a 	add	r6,r6,r6
  80764c:	998d883a 	add	r6,r19,r6
  807650:	333ffe04 	addi	r12,r6,-8
  807654:	2017883a 	mov	r11,r4
  807658:	31800104 	addi	r6,r6,4
  80765c:	34000017 	ldw	r16,0(r6)
  807660:	31fffd04 	addi	r7,r6,-12
  807664:	81c0041e 	bne	r16,r7,807678 <_malloc_r+0x1dc>
  807668:	0000fb06 	br	807a58 <_malloc_r+0x5bc>
  80766c:	1801030e 	bge	r3,zero,807a7c <_malloc_r+0x5e0>
  807670:	84000317 	ldw	r16,12(r16)
  807674:	81c0f826 	beq	r16,r7,807a58 <_malloc_r+0x5bc>
  807678:	80800117 	ldw	r2,4(r16)
  80767c:	1284703a 	and	r2,r2,r10
  807680:	1447c83a 	sub	r3,r2,r17
  807684:	48fff90e 	bge	r9,r3,80766c <__alt_mem_onchip_mem+0xff7ff66c>
  807688:	80800317 	ldw	r2,12(r16)
  80768c:	81000217 	ldw	r4,8(r16)
  807690:	89400054 	ori	r5,r17,1
  807694:	81400115 	stw	r5,4(r16)
  807698:	20800315 	stw	r2,12(r4)
  80769c:	11000215 	stw	r4,8(r2)
  8076a0:	8463883a 	add	r17,r16,r17
  8076a4:	9c400515 	stw	r17,20(r19)
  8076a8:	9c400415 	stw	r17,16(r19)
  8076ac:	18800054 	ori	r2,r3,1
  8076b0:	88800115 	stw	r2,4(r17)
  8076b4:	8a000315 	stw	r8,12(r17)
  8076b8:	8a000215 	stw	r8,8(r17)
  8076bc:	88e3883a 	add	r17,r17,r3
  8076c0:	88c00015 	stw	r3,0(r17)
  8076c4:	9009883a 	mov	r4,r18
  8076c8:	08131200 	call	813120 <__malloc_unlock>
  8076cc:	80800204 	addi	r2,r16,8
  8076d0:	00001b06 	br	807740 <_malloc_r+0x2a4>
  8076d4:	04400404 	movi	r17,16
  8076d8:	89402536 	bltu	r17,r5,807770 <_malloc_r+0x2d4>
  8076dc:	08130fc0 	call	8130fc <__malloc_lock>
  8076e0:	00800184 	movi	r2,6
  8076e4:	01000084 	movi	r4,2
  8076e8:	04c02074 	movhi	r19,129
  8076ec:	1085883a 	add	r2,r2,r2
  8076f0:	9cdd7704 	addi	r19,r19,30172
  8076f4:	1085883a 	add	r2,r2,r2
  8076f8:	9885883a 	add	r2,r19,r2
  8076fc:	14000117 	ldw	r16,4(r2)
  807700:	10fffe04 	addi	r3,r2,-8
  807704:	80c0d926 	beq	r16,r3,807a6c <_malloc_r+0x5d0>
  807708:	80c00117 	ldw	r3,4(r16)
  80770c:	81000317 	ldw	r4,12(r16)
  807710:	00bfff04 	movi	r2,-4
  807714:	1884703a 	and	r2,r3,r2
  807718:	81400217 	ldw	r5,8(r16)
  80771c:	8085883a 	add	r2,r16,r2
  807720:	10c00117 	ldw	r3,4(r2)
  807724:	29000315 	stw	r4,12(r5)
  807728:	21400215 	stw	r5,8(r4)
  80772c:	18c00054 	ori	r3,r3,1
  807730:	10c00115 	stw	r3,4(r2)
  807734:	9009883a 	mov	r4,r18
  807738:	08131200 	call	813120 <__malloc_unlock>
  80773c:	80800204 	addi	r2,r16,8
  807740:	dfc00a17 	ldw	ra,40(sp)
  807744:	df000917 	ldw	fp,36(sp)
  807748:	ddc00817 	ldw	r23,32(sp)
  80774c:	dd800717 	ldw	r22,28(sp)
  807750:	dd400617 	ldw	r21,24(sp)
  807754:	dd000517 	ldw	r20,20(sp)
  807758:	dcc00417 	ldw	r19,16(sp)
  80775c:	dc800317 	ldw	r18,12(sp)
  807760:	dc400217 	ldw	r17,8(sp)
  807764:	dc000117 	ldw	r16,4(sp)
  807768:	dec00b04 	addi	sp,sp,44
  80776c:	f800283a 	ret
  807770:	00800304 	movi	r2,12
  807774:	90800015 	stw	r2,0(r18)
  807778:	0005883a 	mov	r2,zero
  80777c:	003ff006 	br	807740 <__alt_mem_onchip_mem+0xff7ff740>
  807780:	01002004 	movi	r4,128
  807784:	02001004 	movi	r8,64
  807788:	01c00fc4 	movi	r7,63
  80778c:	003f6106 	br	807514 <__alt_mem_onchip_mem+0xff7ff514>
  807790:	4009883a 	mov	r4,r8
  807794:	003f7506 	br	80756c <__alt_mem_onchip_mem+0xff7ff56c>
  807798:	81000317 	ldw	r4,12(r16)
  80779c:	003fde06 	br	807718 <__alt_mem_onchip_mem+0xff7ff718>
  8077a0:	81c5883a 	add	r2,r16,r7
  8077a4:	11400117 	ldw	r5,4(r2)
  8077a8:	9009883a 	mov	r4,r18
  8077ac:	29400054 	ori	r5,r5,1
  8077b0:	11400115 	stw	r5,4(r2)
  8077b4:	08131200 	call	813120 <__malloc_unlock>
  8077b8:	80800204 	addi	r2,r16,8
  8077bc:	003fe006 	br	807740 <__alt_mem_onchip_mem+0xff7ff740>
  8077c0:	9c000217 	ldw	r16,8(r19)
  8077c4:	00bfff04 	movi	r2,-4
  8077c8:	85800117 	ldw	r22,4(r16)
  8077cc:	b0ac703a 	and	r22,r22,r2
  8077d0:	b4400336 	bltu	r22,r17,8077e0 <_malloc_r+0x344>
  8077d4:	b445c83a 	sub	r2,r22,r17
  8077d8:	00c003c4 	movi	r3,15
  8077dc:	18805d16 	blt	r3,r2,807954 <_malloc_r+0x4b8>
  8077e0:	05c020b4 	movhi	r23,130
  8077e4:	008020b4 	movhi	r2,130
  8077e8:	10aae704 	addi	r2,r2,-21604
  8077ec:	bde39504 	addi	r23,r23,-29100
  8077f0:	15400017 	ldw	r21,0(r2)
  8077f4:	b8c00017 	ldw	r3,0(r23)
  8077f8:	00bfffc4 	movi	r2,-1
  8077fc:	858d883a 	add	r6,r16,r22
  807800:	8d6b883a 	add	r21,r17,r21
  807804:	1880ea26 	beq	r3,r2,807bb0 <_malloc_r+0x714>
  807808:	ad4403c4 	addi	r21,r21,4111
  80780c:	00bc0004 	movi	r2,-4096
  807810:	a8aa703a 	and	r21,r21,r2
  807814:	a80b883a 	mov	r5,r21
  807818:	9009883a 	mov	r4,r18
  80781c:	d9800015 	stw	r6,0(sp)
  807820:	08080f40 	call	8080f4 <_sbrk_r>
  807824:	1029883a 	mov	r20,r2
  807828:	00bfffc4 	movi	r2,-1
  80782c:	d9800017 	ldw	r6,0(sp)
  807830:	a080e826 	beq	r20,r2,807bd4 <_malloc_r+0x738>
  807834:	a180a636 	bltu	r20,r6,807ad0 <_malloc_r+0x634>
  807838:	070020b4 	movhi	fp,130
  80783c:	e72af204 	addi	fp,fp,-21560
  807840:	e0800017 	ldw	r2,0(fp)
  807844:	a887883a 	add	r3,r21,r2
  807848:	e0c00015 	stw	r3,0(fp)
  80784c:	3500e626 	beq	r6,r20,807be8 <_malloc_r+0x74c>
  807850:	b9000017 	ldw	r4,0(r23)
  807854:	00bfffc4 	movi	r2,-1
  807858:	2080ee26 	beq	r4,r2,807c14 <_malloc_r+0x778>
  80785c:	a185c83a 	sub	r2,r20,r6
  807860:	10c5883a 	add	r2,r2,r3
  807864:	e0800015 	stw	r2,0(fp)
  807868:	a0c001cc 	andi	r3,r20,7
  80786c:	1800bc26 	beq	r3,zero,807b60 <_malloc_r+0x6c4>
  807870:	a0e9c83a 	sub	r20,r20,r3
  807874:	00840204 	movi	r2,4104
  807878:	a5000204 	addi	r20,r20,8
  80787c:	10c7c83a 	sub	r3,r2,r3
  807880:	a545883a 	add	r2,r20,r21
  807884:	1083ffcc 	andi	r2,r2,4095
  807888:	18abc83a 	sub	r21,r3,r2
  80788c:	a80b883a 	mov	r5,r21
  807890:	9009883a 	mov	r4,r18
  807894:	08080f40 	call	8080f4 <_sbrk_r>
  807898:	00ffffc4 	movi	r3,-1
  80789c:	10c0e126 	beq	r2,r3,807c24 <_malloc_r+0x788>
  8078a0:	1505c83a 	sub	r2,r2,r20
  8078a4:	1545883a 	add	r2,r2,r21
  8078a8:	10800054 	ori	r2,r2,1
  8078ac:	e0c00017 	ldw	r3,0(fp)
  8078b0:	9d000215 	stw	r20,8(r19)
  8078b4:	a0800115 	stw	r2,4(r20)
  8078b8:	a8c7883a 	add	r3,r21,r3
  8078bc:	e0c00015 	stw	r3,0(fp)
  8078c0:	84c00e26 	beq	r16,r19,8078fc <_malloc_r+0x460>
  8078c4:	018003c4 	movi	r6,15
  8078c8:	3580a72e 	bgeu	r6,r22,807b68 <_malloc_r+0x6cc>
  8078cc:	81400117 	ldw	r5,4(r16)
  8078d0:	013ffe04 	movi	r4,-8
  8078d4:	b0bffd04 	addi	r2,r22,-12
  8078d8:	1104703a 	and	r2,r2,r4
  8078dc:	2900004c 	andi	r4,r5,1
  8078e0:	2088b03a 	or	r4,r4,r2
  8078e4:	81000115 	stw	r4,4(r16)
  8078e8:	01400144 	movi	r5,5
  8078ec:	8089883a 	add	r4,r16,r2
  8078f0:	21400115 	stw	r5,4(r4)
  8078f4:	21400215 	stw	r5,8(r4)
  8078f8:	3080cd36 	bltu	r6,r2,807c30 <_malloc_r+0x794>
  8078fc:	008020b4 	movhi	r2,130
  807900:	10aae604 	addi	r2,r2,-21608
  807904:	11000017 	ldw	r4,0(r2)
  807908:	20c0012e 	bgeu	r4,r3,807910 <_malloc_r+0x474>
  80790c:	10c00015 	stw	r3,0(r2)
  807910:	008020b4 	movhi	r2,130
  807914:	10aae504 	addi	r2,r2,-21612
  807918:	11000017 	ldw	r4,0(r2)
  80791c:	9c000217 	ldw	r16,8(r19)
  807920:	20c0012e 	bgeu	r4,r3,807928 <_malloc_r+0x48c>
  807924:	10c00015 	stw	r3,0(r2)
  807928:	80c00117 	ldw	r3,4(r16)
  80792c:	00bfff04 	movi	r2,-4
  807930:	1886703a 	and	r3,r3,r2
  807934:	1c45c83a 	sub	r2,r3,r17
  807938:	1c400236 	bltu	r3,r17,807944 <_malloc_r+0x4a8>
  80793c:	00c003c4 	movi	r3,15
  807940:	18800416 	blt	r3,r2,807954 <_malloc_r+0x4b8>
  807944:	9009883a 	mov	r4,r18
  807948:	08131200 	call	813120 <__malloc_unlock>
  80794c:	0005883a 	mov	r2,zero
  807950:	003f7b06 	br	807740 <__alt_mem_onchip_mem+0xff7ff740>
  807954:	88c00054 	ori	r3,r17,1
  807958:	80c00115 	stw	r3,4(r16)
  80795c:	8463883a 	add	r17,r16,r17
  807960:	10800054 	ori	r2,r2,1
  807964:	9c400215 	stw	r17,8(r19)
  807968:	88800115 	stw	r2,4(r17)
  80796c:	9009883a 	mov	r4,r18
  807970:	08131200 	call	813120 <__malloc_unlock>
  807974:	80800204 	addi	r2,r16,8
  807978:	003f7106 	br	807740 <__alt_mem_onchip_mem+0xff7ff740>
  80797c:	00c00504 	movi	r3,20
  807980:	18804a2e 	bgeu	r3,r2,807aac <_malloc_r+0x610>
  807984:	00c01504 	movi	r3,84
  807988:	18806e36 	bltu	r3,r2,807b44 <_malloc_r+0x6a8>
  80798c:	8804d33a 	srli	r2,r17,12
  807990:	12001bc4 	addi	r8,r2,111
  807994:	11c01b84 	addi	r7,r2,110
  807998:	4209883a 	add	r4,r8,r8
  80799c:	003edd06 	br	807514 <__alt_mem_onchip_mem+0xff7ff514>
  8079a0:	3804d27a 	srli	r2,r7,9
  8079a4:	00c00104 	movi	r3,4
  8079a8:	1880442e 	bgeu	r3,r2,807abc <_malloc_r+0x620>
  8079ac:	00c00504 	movi	r3,20
  8079b0:	18808136 	bltu	r3,r2,807bb8 <_malloc_r+0x71c>
  8079b4:	11401704 	addi	r5,r2,92
  8079b8:	10c016c4 	addi	r3,r2,91
  8079bc:	294b883a 	add	r5,r5,r5
  8079c0:	294b883a 	add	r5,r5,r5
  8079c4:	294b883a 	add	r5,r5,r5
  8079c8:	994b883a 	add	r5,r19,r5
  8079cc:	28800017 	ldw	r2,0(r5)
  8079d0:	01802074 	movhi	r6,129
  8079d4:	297ffe04 	addi	r5,r5,-8
  8079d8:	319d7704 	addi	r6,r6,30172
  8079dc:	28806526 	beq	r5,r2,807b74 <_malloc_r+0x6d8>
  8079e0:	01bfff04 	movi	r6,-4
  8079e4:	10c00117 	ldw	r3,4(r2)
  8079e8:	1986703a 	and	r3,r3,r6
  8079ec:	38c0022e 	bgeu	r7,r3,8079f8 <_malloc_r+0x55c>
  8079f0:	10800217 	ldw	r2,8(r2)
  8079f4:	28bffb1e 	bne	r5,r2,8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  8079f8:	11400317 	ldw	r5,12(r2)
  8079fc:	98c00117 	ldw	r3,4(r19)
  807a00:	81400315 	stw	r5,12(r16)
  807a04:	80800215 	stw	r2,8(r16)
  807a08:	2c000215 	stw	r16,8(r5)
  807a0c:	14000315 	stw	r16,12(r2)
  807a10:	003ef806 	br	8075f4 <__alt_mem_onchip_mem+0xff7ff5f4>
  807a14:	88c00054 	ori	r3,r17,1
  807a18:	80c00115 	stw	r3,4(r16)
  807a1c:	8463883a 	add	r17,r16,r17
  807a20:	34400515 	stw	r17,20(r6)
  807a24:	34400415 	stw	r17,16(r6)
  807a28:	10c00054 	ori	r3,r2,1
  807a2c:	8a000315 	stw	r8,12(r17)
  807a30:	8a000215 	stw	r8,8(r17)
  807a34:	88c00115 	stw	r3,4(r17)
  807a38:	88a3883a 	add	r17,r17,r2
  807a3c:	88800015 	stw	r2,0(r17)
  807a40:	9009883a 	mov	r4,r18
  807a44:	08131200 	call	813120 <__malloc_unlock>
  807a48:	80800204 	addi	r2,r16,8
  807a4c:	003f3c06 	br	807740 <__alt_mem_onchip_mem+0xff7ff740>
  807a50:	30c00117 	ldw	r3,4(r6)
  807a54:	003ee706 	br	8075f4 <__alt_mem_onchip_mem+0xff7ff5f4>
  807a58:	5ac00044 	addi	r11,r11,1
  807a5c:	588000cc 	andi	r2,r11,3
  807a60:	31800204 	addi	r6,r6,8
  807a64:	103efd1e 	bne	r2,zero,80765c <__alt_mem_onchip_mem+0xff7ff65c>
  807a68:	00002406 	br	807afc <_malloc_r+0x660>
  807a6c:	14000317 	ldw	r16,12(r2)
  807a70:	143f251e 	bne	r2,r16,807708 <__alt_mem_onchip_mem+0xff7ff708>
  807a74:	21000084 	addi	r4,r4,2
  807a78:	003ebc06 	br	80756c <__alt_mem_onchip_mem+0xff7ff56c>
  807a7c:	8085883a 	add	r2,r16,r2
  807a80:	10c00117 	ldw	r3,4(r2)
  807a84:	81000317 	ldw	r4,12(r16)
  807a88:	81400217 	ldw	r5,8(r16)
  807a8c:	18c00054 	ori	r3,r3,1
  807a90:	10c00115 	stw	r3,4(r2)
  807a94:	29000315 	stw	r4,12(r5)
  807a98:	21400215 	stw	r5,8(r4)
  807a9c:	9009883a 	mov	r4,r18
  807aa0:	08131200 	call	813120 <__malloc_unlock>
  807aa4:	80800204 	addi	r2,r16,8
  807aa8:	003f2506 	br	807740 <__alt_mem_onchip_mem+0xff7ff740>
  807aac:	12001704 	addi	r8,r2,92
  807ab0:	11c016c4 	addi	r7,r2,91
  807ab4:	4209883a 	add	r4,r8,r8
  807ab8:	003e9606 	br	807514 <__alt_mem_onchip_mem+0xff7ff514>
  807abc:	3804d1ba 	srli	r2,r7,6
  807ac0:	11400e44 	addi	r5,r2,57
  807ac4:	10c00e04 	addi	r3,r2,56
  807ac8:	294b883a 	add	r5,r5,r5
  807acc:	003fbc06 	br	8079c0 <__alt_mem_onchip_mem+0xff7ff9c0>
  807ad0:	84ff5926 	beq	r16,r19,807838 <__alt_mem_onchip_mem+0xff7ff838>
  807ad4:	00802074 	movhi	r2,129
  807ad8:	109d7704 	addi	r2,r2,30172
  807adc:	14000217 	ldw	r16,8(r2)
  807ae0:	00bfff04 	movi	r2,-4
  807ae4:	80c00117 	ldw	r3,4(r16)
  807ae8:	1886703a 	and	r3,r3,r2
  807aec:	003f9106 	br	807934 <__alt_mem_onchip_mem+0xff7ff934>
  807af0:	60800217 	ldw	r2,8(r12)
  807af4:	213fffc4 	addi	r4,r4,-1
  807af8:	1300651e 	bne	r2,r12,807c90 <_malloc_r+0x7f4>
  807afc:	208000cc 	andi	r2,r4,3
  807b00:	633ffe04 	addi	r12,r12,-8
  807b04:	103ffa1e 	bne	r2,zero,807af0 <__alt_mem_onchip_mem+0xff7ffaf0>
  807b08:	98800117 	ldw	r2,4(r19)
  807b0c:	0146303a 	nor	r3,zero,r5
  807b10:	1884703a 	and	r2,r3,r2
  807b14:	98800115 	stw	r2,4(r19)
  807b18:	294b883a 	add	r5,r5,r5
  807b1c:	117f2836 	bltu	r2,r5,8077c0 <__alt_mem_onchip_mem+0xff7ff7c0>
  807b20:	283f2726 	beq	r5,zero,8077c0 <__alt_mem_onchip_mem+0xff7ff7c0>
  807b24:	2886703a 	and	r3,r5,r2
  807b28:	5809883a 	mov	r4,r11
  807b2c:	183ec31e 	bne	r3,zero,80763c <__alt_mem_onchip_mem+0xff7ff63c>
  807b30:	294b883a 	add	r5,r5,r5
  807b34:	2886703a 	and	r3,r5,r2
  807b38:	21000104 	addi	r4,r4,4
  807b3c:	183ffc26 	beq	r3,zero,807b30 <__alt_mem_onchip_mem+0xff7ffb30>
  807b40:	003ebe06 	br	80763c <__alt_mem_onchip_mem+0xff7ff63c>
  807b44:	00c05504 	movi	r3,340
  807b48:	18801236 	bltu	r3,r2,807b94 <_malloc_r+0x6f8>
  807b4c:	8804d3fa 	srli	r2,r17,15
  807b50:	12001e04 	addi	r8,r2,120
  807b54:	11c01dc4 	addi	r7,r2,119
  807b58:	4209883a 	add	r4,r8,r8
  807b5c:	003e6d06 	br	807514 <__alt_mem_onchip_mem+0xff7ff514>
  807b60:	00c40004 	movi	r3,4096
  807b64:	003f4606 	br	807880 <__alt_mem_onchip_mem+0xff7ff880>
  807b68:	00800044 	movi	r2,1
  807b6c:	a0800115 	stw	r2,4(r20)
  807b70:	003f7406 	br	807944 <__alt_mem_onchip_mem+0xff7ff944>
  807b74:	1805d0ba 	srai	r2,r3,2
  807b78:	01c00044 	movi	r7,1
  807b7c:	30c00117 	ldw	r3,4(r6)
  807b80:	388e983a 	sll	r7,r7,r2
  807b84:	2805883a 	mov	r2,r5
  807b88:	38c6b03a 	or	r3,r7,r3
  807b8c:	30c00115 	stw	r3,4(r6)
  807b90:	003f9b06 	br	807a00 <__alt_mem_onchip_mem+0xff7ffa00>
  807b94:	00c15504 	movi	r3,1364
  807b98:	18801a36 	bltu	r3,r2,807c04 <_malloc_r+0x768>
  807b9c:	8804d4ba 	srli	r2,r17,18
  807ba0:	12001f44 	addi	r8,r2,125
  807ba4:	11c01f04 	addi	r7,r2,124
  807ba8:	4209883a 	add	r4,r8,r8
  807bac:	003e5906 	br	807514 <__alt_mem_onchip_mem+0xff7ff514>
  807bb0:	ad400404 	addi	r21,r21,16
  807bb4:	003f1706 	br	807814 <__alt_mem_onchip_mem+0xff7ff814>
  807bb8:	00c01504 	movi	r3,84
  807bbc:	18802336 	bltu	r3,r2,807c4c <_malloc_r+0x7b0>
  807bc0:	3804d33a 	srli	r2,r7,12
  807bc4:	11401bc4 	addi	r5,r2,111
  807bc8:	10c01b84 	addi	r3,r2,110
  807bcc:	294b883a 	add	r5,r5,r5
  807bd0:	003f7b06 	br	8079c0 <__alt_mem_onchip_mem+0xff7ff9c0>
  807bd4:	9c000217 	ldw	r16,8(r19)
  807bd8:	00bfff04 	movi	r2,-4
  807bdc:	80c00117 	ldw	r3,4(r16)
  807be0:	1886703a 	and	r3,r3,r2
  807be4:	003f5306 	br	807934 <__alt_mem_onchip_mem+0xff7ff934>
  807be8:	3083ffcc 	andi	r2,r6,4095
  807bec:	103f181e 	bne	r2,zero,807850 <__alt_mem_onchip_mem+0xff7ff850>
  807bf0:	99000217 	ldw	r4,8(r19)
  807bf4:	b545883a 	add	r2,r22,r21
  807bf8:	10800054 	ori	r2,r2,1
  807bfc:	20800115 	stw	r2,4(r4)
  807c00:	003f3e06 	br	8078fc <__alt_mem_onchip_mem+0xff7ff8fc>
  807c04:	01003f84 	movi	r4,254
  807c08:	02001fc4 	movi	r8,127
  807c0c:	01c01f84 	movi	r7,126
  807c10:	003e4006 	br	807514 <__alt_mem_onchip_mem+0xff7ff514>
  807c14:	008020b4 	movhi	r2,130
  807c18:	10a39504 	addi	r2,r2,-29100
  807c1c:	15000015 	stw	r20,0(r2)
  807c20:	003f1106 	br	807868 <__alt_mem_onchip_mem+0xff7ff868>
  807c24:	00800044 	movi	r2,1
  807c28:	002b883a 	mov	r21,zero
  807c2c:	003f1f06 	br	8078ac <__alt_mem_onchip_mem+0xff7ff8ac>
  807c30:	81400204 	addi	r5,r16,8
  807c34:	9009883a 	mov	r4,r18
  807c38:	080c8940 	call	80c894 <_free_r>
  807c3c:	008020b4 	movhi	r2,130
  807c40:	10aaf204 	addi	r2,r2,-21560
  807c44:	10c00017 	ldw	r3,0(r2)
  807c48:	003f2c06 	br	8078fc <__alt_mem_onchip_mem+0xff7ff8fc>
  807c4c:	00c05504 	movi	r3,340
  807c50:	18800536 	bltu	r3,r2,807c68 <_malloc_r+0x7cc>
  807c54:	3804d3fa 	srli	r2,r7,15
  807c58:	11401e04 	addi	r5,r2,120
  807c5c:	10c01dc4 	addi	r3,r2,119
  807c60:	294b883a 	add	r5,r5,r5
  807c64:	003f5606 	br	8079c0 <__alt_mem_onchip_mem+0xff7ff9c0>
  807c68:	00c15504 	movi	r3,1364
  807c6c:	18800536 	bltu	r3,r2,807c84 <_malloc_r+0x7e8>
  807c70:	3804d4ba 	srli	r2,r7,18
  807c74:	11401f44 	addi	r5,r2,125
  807c78:	10c01f04 	addi	r3,r2,124
  807c7c:	294b883a 	add	r5,r5,r5
  807c80:	003f4f06 	br	8079c0 <__alt_mem_onchip_mem+0xff7ff9c0>
  807c84:	01403f84 	movi	r5,254
  807c88:	00c01f84 	movi	r3,126
  807c8c:	003f4c06 	br	8079c0 <__alt_mem_onchip_mem+0xff7ff9c0>
  807c90:	98800117 	ldw	r2,4(r19)
  807c94:	003fa006 	br	807b18 <__alt_mem_onchip_mem+0xff7ffb18>
  807c98:	8808d0fa 	srli	r4,r17,3
  807c9c:	20800044 	addi	r2,r4,1
  807ca0:	1085883a 	add	r2,r2,r2
  807ca4:	003e9006 	br	8076e8 <__alt_mem_onchip_mem+0xff7ff6e8>

00807ca8 <memset>:
  807ca8:	20c000cc 	andi	r3,r4,3
  807cac:	2005883a 	mov	r2,r4
  807cb0:	18004426 	beq	r3,zero,807dc4 <memset+0x11c>
  807cb4:	31ffffc4 	addi	r7,r6,-1
  807cb8:	30004026 	beq	r6,zero,807dbc <memset+0x114>
  807cbc:	2813883a 	mov	r9,r5
  807cc0:	200d883a 	mov	r6,r4
  807cc4:	2007883a 	mov	r3,r4
  807cc8:	00000406 	br	807cdc <memset+0x34>
  807ccc:	3a3fffc4 	addi	r8,r7,-1
  807cd0:	31800044 	addi	r6,r6,1
  807cd4:	38003926 	beq	r7,zero,807dbc <memset+0x114>
  807cd8:	400f883a 	mov	r7,r8
  807cdc:	18c00044 	addi	r3,r3,1
  807ce0:	32400005 	stb	r9,0(r6)
  807ce4:	1a0000cc 	andi	r8,r3,3
  807ce8:	403ff81e 	bne	r8,zero,807ccc <__alt_mem_onchip_mem+0xff7ffccc>
  807cec:	010000c4 	movi	r4,3
  807cf0:	21c02d2e 	bgeu	r4,r7,807da8 <memset+0x100>
  807cf4:	29003fcc 	andi	r4,r5,255
  807cf8:	200c923a 	slli	r6,r4,8
  807cfc:	3108b03a 	or	r4,r6,r4
  807d00:	200c943a 	slli	r6,r4,16
  807d04:	218cb03a 	or	r6,r4,r6
  807d08:	010003c4 	movi	r4,15
  807d0c:	21c0182e 	bgeu	r4,r7,807d70 <memset+0xc8>
  807d10:	3b3ffc04 	addi	r12,r7,-16
  807d14:	6018d13a 	srli	r12,r12,4
  807d18:	1a000104 	addi	r8,r3,4
  807d1c:	1ac00204 	addi	r11,r3,8
  807d20:	6008913a 	slli	r4,r12,4
  807d24:	1a800304 	addi	r10,r3,12
  807d28:	1813883a 	mov	r9,r3
  807d2c:	21000504 	addi	r4,r4,20
  807d30:	1909883a 	add	r4,r3,r4
  807d34:	49800015 	stw	r6,0(r9)
  807d38:	41800015 	stw	r6,0(r8)
  807d3c:	59800015 	stw	r6,0(r11)
  807d40:	51800015 	stw	r6,0(r10)
  807d44:	42000404 	addi	r8,r8,16
  807d48:	4a400404 	addi	r9,r9,16
  807d4c:	5ac00404 	addi	r11,r11,16
  807d50:	52800404 	addi	r10,r10,16
  807d54:	413ff71e 	bne	r8,r4,807d34 <__alt_mem_onchip_mem+0xff7ffd34>
  807d58:	63000044 	addi	r12,r12,1
  807d5c:	6018913a 	slli	r12,r12,4
  807d60:	39c003cc 	andi	r7,r7,15
  807d64:	010000c4 	movi	r4,3
  807d68:	1b07883a 	add	r3,r3,r12
  807d6c:	21c00e2e 	bgeu	r4,r7,807da8 <memset+0x100>
  807d70:	1813883a 	mov	r9,r3
  807d74:	3811883a 	mov	r8,r7
  807d78:	010000c4 	movi	r4,3
  807d7c:	49800015 	stw	r6,0(r9)
  807d80:	423fff04 	addi	r8,r8,-4
  807d84:	4a400104 	addi	r9,r9,4
  807d88:	223ffc36 	bltu	r4,r8,807d7c <__alt_mem_onchip_mem+0xff7ffd7c>
  807d8c:	393fff04 	addi	r4,r7,-4
  807d90:	2008d0ba 	srli	r4,r4,2
  807d94:	39c000cc 	andi	r7,r7,3
  807d98:	21000044 	addi	r4,r4,1
  807d9c:	2109883a 	add	r4,r4,r4
  807da0:	2109883a 	add	r4,r4,r4
  807da4:	1907883a 	add	r3,r3,r4
  807da8:	38000526 	beq	r7,zero,807dc0 <memset+0x118>
  807dac:	19cf883a 	add	r7,r3,r7
  807db0:	19400005 	stb	r5,0(r3)
  807db4:	18c00044 	addi	r3,r3,1
  807db8:	38fffd1e 	bne	r7,r3,807db0 <__alt_mem_onchip_mem+0xff7ffdb0>
  807dbc:	f800283a 	ret
  807dc0:	f800283a 	ret
  807dc4:	2007883a 	mov	r3,r4
  807dc8:	300f883a 	mov	r7,r6
  807dcc:	003fc706 	br	807cec <__alt_mem_onchip_mem+0xff7ffcec>

00807dd0 <_open_r>:
  807dd0:	defffd04 	addi	sp,sp,-12
  807dd4:	2805883a 	mov	r2,r5
  807dd8:	dc000015 	stw	r16,0(sp)
  807ddc:	040020b4 	movhi	r16,130
  807de0:	dc400115 	stw	r17,4(sp)
  807de4:	300b883a 	mov	r5,r6
  807de8:	842ae404 	addi	r16,r16,-21616
  807dec:	2023883a 	mov	r17,r4
  807df0:	380d883a 	mov	r6,r7
  807df4:	1009883a 	mov	r4,r2
  807df8:	dfc00215 	stw	ra,8(sp)
  807dfc:	80000015 	stw	zero,0(r16)
  807e00:	08132440 	call	813244 <open>
  807e04:	00ffffc4 	movi	r3,-1
  807e08:	10c00526 	beq	r2,r3,807e20 <_open_r+0x50>
  807e0c:	dfc00217 	ldw	ra,8(sp)
  807e10:	dc400117 	ldw	r17,4(sp)
  807e14:	dc000017 	ldw	r16,0(sp)
  807e18:	dec00304 	addi	sp,sp,12
  807e1c:	f800283a 	ret
  807e20:	80c00017 	ldw	r3,0(r16)
  807e24:	183ff926 	beq	r3,zero,807e0c <__alt_mem_onchip_mem+0xff7ffe0c>
  807e28:	88c00015 	stw	r3,0(r17)
  807e2c:	003ff706 	br	807e0c <__alt_mem_onchip_mem+0xff7ffe0c>

00807e30 <_puts_r>:
  807e30:	defff604 	addi	sp,sp,-40
  807e34:	dc000715 	stw	r16,28(sp)
  807e38:	2021883a 	mov	r16,r4
  807e3c:	2809883a 	mov	r4,r5
  807e40:	dc400815 	stw	r17,32(sp)
  807e44:	dfc00915 	stw	ra,36(sp)
  807e48:	2823883a 	mov	r17,r5
  807e4c:	08082840 	call	808284 <strlen>
  807e50:	10c00044 	addi	r3,r2,1
  807e54:	d8800115 	stw	r2,4(sp)
  807e58:	00802074 	movhi	r2,129
  807e5c:	109b4b04 	addi	r2,r2,27948
  807e60:	d8800215 	stw	r2,8(sp)
  807e64:	00800044 	movi	r2,1
  807e68:	d8800315 	stw	r2,12(sp)
  807e6c:	00800084 	movi	r2,2
  807e70:	dc400015 	stw	r17,0(sp)
  807e74:	d8c00615 	stw	r3,24(sp)
  807e78:	dec00415 	stw	sp,16(sp)
  807e7c:	d8800515 	stw	r2,20(sp)
  807e80:	80000226 	beq	r16,zero,807e8c <_puts_r+0x5c>
  807e84:	80800e17 	ldw	r2,56(r16)
  807e88:	10001426 	beq	r2,zero,807edc <_puts_r+0xac>
  807e8c:	81400217 	ldw	r5,8(r16)
  807e90:	2880030b 	ldhu	r2,12(r5)
  807e94:	10c8000c 	andi	r3,r2,8192
  807e98:	1800061e 	bne	r3,zero,807eb4 <_puts_r+0x84>
  807e9c:	29001917 	ldw	r4,100(r5)
  807ea0:	00f7ffc4 	movi	r3,-8193
  807ea4:	10880014 	ori	r2,r2,8192
  807ea8:	20c6703a 	and	r3,r4,r3
  807eac:	2880030d 	sth	r2,12(r5)
  807eb0:	28c01915 	stw	r3,100(r5)
  807eb4:	d9800404 	addi	r6,sp,16
  807eb8:	8009883a 	mov	r4,r16
  807ebc:	080cba40 	call	80cba4 <__sfvwrite_r>
  807ec0:	1000091e 	bne	r2,zero,807ee8 <_puts_r+0xb8>
  807ec4:	00800284 	movi	r2,10
  807ec8:	dfc00917 	ldw	ra,36(sp)
  807ecc:	dc400817 	ldw	r17,32(sp)
  807ed0:	dc000717 	ldw	r16,28(sp)
  807ed4:	dec00a04 	addi	sp,sp,40
  807ed8:	f800283a 	ret
  807edc:	8009883a 	mov	r4,r16
  807ee0:	080c6740 	call	80c674 <__sinit>
  807ee4:	003fe906 	br	807e8c <__alt_mem_onchip_mem+0xff7ffe8c>
  807ee8:	00bfffc4 	movi	r2,-1
  807eec:	003ff606 	br	807ec8 <__alt_mem_onchip_mem+0xff7ffec8>

00807ef0 <puts>:
  807ef0:	008020b4 	movhi	r2,130
  807ef4:	10a39404 	addi	r2,r2,-29104
  807ef8:	200b883a 	mov	r5,r4
  807efc:	11000017 	ldw	r4,0(r2)
  807f00:	0807e301 	jmpi	807e30 <_puts_r>

00807f04 <lflush>:
  807f04:	2080030b 	ldhu	r2,12(r4)
  807f08:	00c00244 	movi	r3,9
  807f0c:	1080024c 	andi	r2,r2,9
  807f10:	10c00226 	beq	r2,r3,807f1c <lflush+0x18>
  807f14:	0005883a 	mov	r2,zero
  807f18:	f800283a 	ret
  807f1c:	080c2f41 	jmpi	80c2f4 <fflush>

00807f20 <__srefill_r>:
  807f20:	defffc04 	addi	sp,sp,-16
  807f24:	dc400115 	stw	r17,4(sp)
  807f28:	dc000015 	stw	r16,0(sp)
  807f2c:	dfc00315 	stw	ra,12(sp)
  807f30:	dc800215 	stw	r18,8(sp)
  807f34:	2023883a 	mov	r17,r4
  807f38:	2821883a 	mov	r16,r5
  807f3c:	20000226 	beq	r4,zero,807f48 <__srefill_r+0x28>
  807f40:	20800e17 	ldw	r2,56(r4)
  807f44:	10003c26 	beq	r2,zero,808038 <__srefill_r+0x118>
  807f48:	80c0030b 	ldhu	r3,12(r16)
  807f4c:	1908000c 	andi	r4,r3,8192
  807f50:	1805883a 	mov	r2,r3
  807f54:	2000071e 	bne	r4,zero,807f74 <__srefill_r+0x54>
  807f58:	81001917 	ldw	r4,100(r16)
  807f5c:	18880014 	ori	r2,r3,8192
  807f60:	00f7ffc4 	movi	r3,-8193
  807f64:	20c8703a 	and	r4,r4,r3
  807f68:	8080030d 	sth	r2,12(r16)
  807f6c:	1007883a 	mov	r3,r2
  807f70:	81001915 	stw	r4,100(r16)
  807f74:	80000115 	stw	zero,4(r16)
  807f78:	1100080c 	andi	r4,r2,32
  807f7c:	2000571e 	bne	r4,zero,8080dc <__srefill_r+0x1bc>
  807f80:	1100010c 	andi	r4,r2,4
  807f84:	20001f26 	beq	r4,zero,808004 <__srefill_r+0xe4>
  807f88:	81400c17 	ldw	r5,48(r16)
  807f8c:	28000826 	beq	r5,zero,807fb0 <__srefill_r+0x90>
  807f90:	80801004 	addi	r2,r16,64
  807f94:	28800226 	beq	r5,r2,807fa0 <__srefill_r+0x80>
  807f98:	8809883a 	mov	r4,r17
  807f9c:	080c8940 	call	80c894 <_free_r>
  807fa0:	80800f17 	ldw	r2,60(r16)
  807fa4:	80000c15 	stw	zero,48(r16)
  807fa8:	80800115 	stw	r2,4(r16)
  807fac:	1000391e 	bne	r2,zero,808094 <__srefill_r+0x174>
  807fb0:	80800417 	ldw	r2,16(r16)
  807fb4:	10004b26 	beq	r2,zero,8080e4 <__srefill_r+0x1c4>
  807fb8:	8480030b 	ldhu	r18,12(r16)
  807fbc:	908000cc 	andi	r2,r18,3
  807fc0:	10001f1e 	bne	r2,zero,808040 <__srefill_r+0x120>
  807fc4:	81800417 	ldw	r6,16(r16)
  807fc8:	80800817 	ldw	r2,32(r16)
  807fcc:	81c00517 	ldw	r7,20(r16)
  807fd0:	81400717 	ldw	r5,28(r16)
  807fd4:	81800015 	stw	r6,0(r16)
  807fd8:	8809883a 	mov	r4,r17
  807fdc:	103ee83a 	callr	r2
  807fe0:	80800115 	stw	r2,4(r16)
  807fe4:	00800e0e 	bge	zero,r2,808020 <__srefill_r+0x100>
  807fe8:	0005883a 	mov	r2,zero
  807fec:	dfc00317 	ldw	ra,12(sp)
  807ff0:	dc800217 	ldw	r18,8(sp)
  807ff4:	dc400117 	ldw	r17,4(sp)
  807ff8:	dc000017 	ldw	r16,0(sp)
  807ffc:	dec00404 	addi	sp,sp,16
  808000:	f800283a 	ret
  808004:	1100040c 	andi	r4,r2,16
  808008:	20003026 	beq	r4,zero,8080cc <__srefill_r+0x1ac>
  80800c:	1080020c 	andi	r2,r2,8
  808010:	1000241e 	bne	r2,zero,8080a4 <__srefill_r+0x184>
  808014:	18c00114 	ori	r3,r3,4
  808018:	80c0030d 	sth	r3,12(r16)
  80801c:	003fe406 	br	807fb0 <__alt_mem_onchip_mem+0xff7fffb0>
  808020:	80c0030b 	ldhu	r3,12(r16)
  808024:	1000161e 	bne	r2,zero,808080 <__srefill_r+0x160>
  808028:	18c00814 	ori	r3,r3,32
  80802c:	00bfffc4 	movi	r2,-1
  808030:	80c0030d 	sth	r3,12(r16)
  808034:	003fed06 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808038:	080c6740 	call	80c674 <__sinit>
  80803c:	003fc206 	br	807f48 <__alt_mem_onchip_mem+0xff7fff48>
  808040:	008020b4 	movhi	r2,130
  808044:	10a39304 	addi	r2,r2,-29108
  808048:	11000017 	ldw	r4,0(r2)
  80804c:	01402034 	movhi	r5,128
  808050:	00800044 	movi	r2,1
  808054:	295fc104 	addi	r5,r5,32516
  808058:	8080030d 	sth	r2,12(r16)
  80805c:	080d0600 	call	80d060 <_fwalk>
  808060:	00800244 	movi	r2,9
  808064:	8480030d 	sth	r18,12(r16)
  808068:	9480024c 	andi	r18,r18,9
  80806c:	90bfd51e 	bne	r18,r2,807fc4 <__alt_mem_onchip_mem+0xff7fffc4>
  808070:	800b883a 	mov	r5,r16
  808074:	8809883a 	mov	r4,r17
  808078:	080c07c0 	call	80c07c <__sflush_r>
  80807c:	003fd106 	br	807fc4 <__alt_mem_onchip_mem+0xff7fffc4>
  808080:	18c01014 	ori	r3,r3,64
  808084:	80000115 	stw	zero,4(r16)
  808088:	00bfffc4 	movi	r2,-1
  80808c:	80c0030d 	sth	r3,12(r16)
  808090:	003fd606 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808094:	80c00e17 	ldw	r3,56(r16)
  808098:	0005883a 	mov	r2,zero
  80809c:	80c00015 	stw	r3,0(r16)
  8080a0:	003fd206 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  8080a4:	800b883a 	mov	r5,r16
  8080a8:	8809883a 	mov	r4,r17
  8080ac:	080c2980 	call	80c298 <_fflush_r>
  8080b0:	10000a1e 	bne	r2,zero,8080dc <__srefill_r+0x1bc>
  8080b4:	8080030b 	ldhu	r2,12(r16)
  8080b8:	00fffdc4 	movi	r3,-9
  8080bc:	80000215 	stw	zero,8(r16)
  8080c0:	1886703a 	and	r3,r3,r2
  8080c4:	80000615 	stw	zero,24(r16)
  8080c8:	003fd206 	br	808014 <__alt_mem_onchip_mem+0xff800014>
  8080cc:	00800244 	movi	r2,9
  8080d0:	88800015 	stw	r2,0(r17)
  8080d4:	18c01014 	ori	r3,r3,64
  8080d8:	80c0030d 	sth	r3,12(r16)
  8080dc:	00bfffc4 	movi	r2,-1
  8080e0:	003fc206 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  8080e4:	800b883a 	mov	r5,r16
  8080e8:	8809883a 	mov	r4,r17
  8080ec:	08072e00 	call	8072e0 <__smakebuf_r>
  8080f0:	003fb106 	br	807fb8 <__alt_mem_onchip_mem+0xff7fffb8>

008080f4 <_sbrk_r>:
  8080f4:	defffd04 	addi	sp,sp,-12
  8080f8:	dc000015 	stw	r16,0(sp)
  8080fc:	040020b4 	movhi	r16,130
  808100:	dc400115 	stw	r17,4(sp)
  808104:	842ae404 	addi	r16,r16,-21616
  808108:	2023883a 	mov	r17,r4
  80810c:	2809883a 	mov	r4,r5
  808110:	dfc00215 	stw	ra,8(sp)
  808114:	80000015 	stw	zero,0(r16)
  808118:	08135340 	call	813534 <sbrk>
  80811c:	00ffffc4 	movi	r3,-1
  808120:	10c00526 	beq	r2,r3,808138 <_sbrk_r+0x44>
  808124:	dfc00217 	ldw	ra,8(sp)
  808128:	dc400117 	ldw	r17,4(sp)
  80812c:	dc000017 	ldw	r16,0(sp)
  808130:	dec00304 	addi	sp,sp,12
  808134:	f800283a 	ret
  808138:	80c00017 	ldw	r3,0(r16)
  80813c:	183ff926 	beq	r3,zero,808124 <__alt_mem_onchip_mem+0xff800124>
  808140:	88c00015 	stw	r3,0(r17)
  808144:	003ff706 	br	808124 <__alt_mem_onchip_mem+0xff800124>

00808148 <__sread>:
  808148:	defffe04 	addi	sp,sp,-8
  80814c:	dc000015 	stw	r16,0(sp)
  808150:	2821883a 	mov	r16,r5
  808154:	2940038f 	ldh	r5,14(r5)
  808158:	dfc00115 	stw	ra,4(sp)
  80815c:	080e6fc0 	call	80e6fc <_read_r>
  808160:	10000716 	blt	r2,zero,808180 <__sread+0x38>
  808164:	80c01417 	ldw	r3,80(r16)
  808168:	1887883a 	add	r3,r3,r2
  80816c:	80c01415 	stw	r3,80(r16)
  808170:	dfc00117 	ldw	ra,4(sp)
  808174:	dc000017 	ldw	r16,0(sp)
  808178:	dec00204 	addi	sp,sp,8
  80817c:	f800283a 	ret
  808180:	80c0030b 	ldhu	r3,12(r16)
  808184:	18fbffcc 	andi	r3,r3,61439
  808188:	80c0030d 	sth	r3,12(r16)
  80818c:	dfc00117 	ldw	ra,4(sp)
  808190:	dc000017 	ldw	r16,0(sp)
  808194:	dec00204 	addi	sp,sp,8
  808198:	f800283a 	ret

0080819c <__seofread>:
  80819c:	0005883a 	mov	r2,zero
  8081a0:	f800283a 	ret

008081a4 <__swrite>:
  8081a4:	2880030b 	ldhu	r2,12(r5)
  8081a8:	defffb04 	addi	sp,sp,-20
  8081ac:	dcc00315 	stw	r19,12(sp)
  8081b0:	dc800215 	stw	r18,8(sp)
  8081b4:	dc400115 	stw	r17,4(sp)
  8081b8:	dc000015 	stw	r16,0(sp)
  8081bc:	dfc00415 	stw	ra,16(sp)
  8081c0:	10c0400c 	andi	r3,r2,256
  8081c4:	2821883a 	mov	r16,r5
  8081c8:	2023883a 	mov	r17,r4
  8081cc:	3025883a 	mov	r18,r6
  8081d0:	3827883a 	mov	r19,r7
  8081d4:	18000526 	beq	r3,zero,8081ec <__swrite+0x48>
  8081d8:	2940038f 	ldh	r5,14(r5)
  8081dc:	01c00084 	movi	r7,2
  8081e0:	000d883a 	mov	r6,zero
  8081e4:	080d3180 	call	80d318 <_lseek_r>
  8081e8:	8080030b 	ldhu	r2,12(r16)
  8081ec:	8140038f 	ldh	r5,14(r16)
  8081f0:	10bbffcc 	andi	r2,r2,61439
  8081f4:	980f883a 	mov	r7,r19
  8081f8:	900d883a 	mov	r6,r18
  8081fc:	8809883a 	mov	r4,r17
  808200:	8080030d 	sth	r2,12(r16)
  808204:	dfc00417 	ldw	ra,16(sp)
  808208:	dcc00317 	ldw	r19,12(sp)
  80820c:	dc800217 	ldw	r18,8(sp)
  808210:	dc400117 	ldw	r17,4(sp)
  808214:	dc000017 	ldw	r16,0(sp)
  808218:	dec00504 	addi	sp,sp,20
  80821c:	080a5ec1 	jmpi	80a5ec <_write_r>

00808220 <__sseek>:
  808220:	defffe04 	addi	sp,sp,-8
  808224:	dc000015 	stw	r16,0(sp)
  808228:	2821883a 	mov	r16,r5
  80822c:	2940038f 	ldh	r5,14(r5)
  808230:	dfc00115 	stw	ra,4(sp)
  808234:	080d3180 	call	80d318 <_lseek_r>
  808238:	00ffffc4 	movi	r3,-1
  80823c:	10c00826 	beq	r2,r3,808260 <__sseek+0x40>
  808240:	80c0030b 	ldhu	r3,12(r16)
  808244:	80801415 	stw	r2,80(r16)
  808248:	18c40014 	ori	r3,r3,4096
  80824c:	80c0030d 	sth	r3,12(r16)
  808250:	dfc00117 	ldw	ra,4(sp)
  808254:	dc000017 	ldw	r16,0(sp)
  808258:	dec00204 	addi	sp,sp,8
  80825c:	f800283a 	ret
  808260:	80c0030b 	ldhu	r3,12(r16)
  808264:	18fbffcc 	andi	r3,r3,61439
  808268:	80c0030d 	sth	r3,12(r16)
  80826c:	dfc00117 	ldw	ra,4(sp)
  808270:	dc000017 	ldw	r16,0(sp)
  808274:	dec00204 	addi	sp,sp,8
  808278:	f800283a 	ret

0080827c <__sclose>:
  80827c:	2940038f 	ldh	r5,14(r5)
  808280:	080a7a01 	jmpi	80a7a0 <_close_r>

00808284 <strlen>:
  808284:	208000cc 	andi	r2,r4,3
  808288:	10002026 	beq	r2,zero,80830c <strlen+0x88>
  80828c:	20800007 	ldb	r2,0(r4)
  808290:	10002026 	beq	r2,zero,808314 <strlen+0x90>
  808294:	2005883a 	mov	r2,r4
  808298:	00000206 	br	8082a4 <strlen+0x20>
  80829c:	10c00007 	ldb	r3,0(r2)
  8082a0:	18001826 	beq	r3,zero,808304 <strlen+0x80>
  8082a4:	10800044 	addi	r2,r2,1
  8082a8:	10c000cc 	andi	r3,r2,3
  8082ac:	183ffb1e 	bne	r3,zero,80829c <__alt_mem_onchip_mem+0xff80029c>
  8082b0:	10c00017 	ldw	r3,0(r2)
  8082b4:	01ffbff4 	movhi	r7,65279
  8082b8:	39ffbfc4 	addi	r7,r7,-257
  8082bc:	00ca303a 	nor	r5,zero,r3
  8082c0:	01a02074 	movhi	r6,32897
  8082c4:	19c7883a 	add	r3,r3,r7
  8082c8:	31a02004 	addi	r6,r6,-32640
  8082cc:	1946703a 	and	r3,r3,r5
  8082d0:	1986703a 	and	r3,r3,r6
  8082d4:	1800091e 	bne	r3,zero,8082fc <strlen+0x78>
  8082d8:	10800104 	addi	r2,r2,4
  8082dc:	10c00017 	ldw	r3,0(r2)
  8082e0:	19cb883a 	add	r5,r3,r7
  8082e4:	00c6303a 	nor	r3,zero,r3
  8082e8:	28c6703a 	and	r3,r5,r3
  8082ec:	1986703a 	and	r3,r3,r6
  8082f0:	183ff926 	beq	r3,zero,8082d8 <__alt_mem_onchip_mem+0xff8002d8>
  8082f4:	00000106 	br	8082fc <strlen+0x78>
  8082f8:	10800044 	addi	r2,r2,1
  8082fc:	10c00007 	ldb	r3,0(r2)
  808300:	183ffd1e 	bne	r3,zero,8082f8 <__alt_mem_onchip_mem+0xff8002f8>
  808304:	1105c83a 	sub	r2,r2,r4
  808308:	f800283a 	ret
  80830c:	2005883a 	mov	r2,r4
  808310:	003fe706 	br	8082b0 <__alt_mem_onchip_mem+0xff8002b0>
  808314:	0005883a 	mov	r2,zero
  808318:	f800283a 	ret

0080831c <___vfprintf_internal_r>:
  80831c:	deffb804 	addi	sp,sp,-288
  808320:	dfc04715 	stw	ra,284(sp)
  808324:	ddc04515 	stw	r23,276(sp)
  808328:	dd404315 	stw	r21,268(sp)
  80832c:	d9002c15 	stw	r4,176(sp)
  808330:	282f883a 	mov	r23,r5
  808334:	302b883a 	mov	r21,r6
  808338:	d9c02d15 	stw	r7,180(sp)
  80833c:	df004615 	stw	fp,280(sp)
  808340:	dd804415 	stw	r22,272(sp)
  808344:	dd004215 	stw	r20,264(sp)
  808348:	dcc04115 	stw	r19,260(sp)
  80834c:	dc804015 	stw	r18,256(sp)
  808350:	dc403f15 	stw	r17,252(sp)
  808354:	dc003e15 	stw	r16,248(sp)
  808358:	080d2e80 	call	80d2e8 <_localeconv_r>
  80835c:	10800017 	ldw	r2,0(r2)
  808360:	1009883a 	mov	r4,r2
  808364:	d8803415 	stw	r2,208(sp)
  808368:	08082840 	call	808284 <strlen>
  80836c:	d8803715 	stw	r2,220(sp)
  808370:	d8802c17 	ldw	r2,176(sp)
  808374:	10000226 	beq	r2,zero,808380 <___vfprintf_internal_r+0x64>
  808378:	10800e17 	ldw	r2,56(r2)
  80837c:	1000f926 	beq	r2,zero,808764 <___vfprintf_internal_r+0x448>
  808380:	b880030b 	ldhu	r2,12(r23)
  808384:	10c8000c 	andi	r3,r2,8192
  808388:	1800061e 	bne	r3,zero,8083a4 <___vfprintf_internal_r+0x88>
  80838c:	b9001917 	ldw	r4,100(r23)
  808390:	00f7ffc4 	movi	r3,-8193
  808394:	10880014 	ori	r2,r2,8192
  808398:	20c6703a 	and	r3,r4,r3
  80839c:	b880030d 	sth	r2,12(r23)
  8083a0:	b8c01915 	stw	r3,100(r23)
  8083a4:	10c0020c 	andi	r3,r2,8
  8083a8:	1800c126 	beq	r3,zero,8086b0 <___vfprintf_internal_r+0x394>
  8083ac:	b8c00417 	ldw	r3,16(r23)
  8083b0:	1800bf26 	beq	r3,zero,8086b0 <___vfprintf_internal_r+0x394>
  8083b4:	1080068c 	andi	r2,r2,26
  8083b8:	00c00284 	movi	r3,10
  8083bc:	10c0c426 	beq	r2,r3,8086d0 <___vfprintf_internal_r+0x3b4>
  8083c0:	d8c00404 	addi	r3,sp,16
  8083c4:	05002074 	movhi	r20,129
  8083c8:	d9001e04 	addi	r4,sp,120
  8083cc:	a51b5c84 	addi	r20,r20,28018
  8083d0:	d8c01e15 	stw	r3,120(sp)
  8083d4:	d8002015 	stw	zero,128(sp)
  8083d8:	d8001f15 	stw	zero,124(sp)
  8083dc:	d8003315 	stw	zero,204(sp)
  8083e0:	d8003615 	stw	zero,216(sp)
  8083e4:	d8003815 	stw	zero,224(sp)
  8083e8:	1811883a 	mov	r8,r3
  8083ec:	d8003915 	stw	zero,228(sp)
  8083f0:	d8003a15 	stw	zero,232(sp)
  8083f4:	d8002f15 	stw	zero,188(sp)
  8083f8:	d9002815 	stw	r4,160(sp)
  8083fc:	a8800007 	ldb	r2,0(r21)
  808400:	10027b26 	beq	r2,zero,808df0 <___vfprintf_internal_r+0xad4>
  808404:	00c00944 	movi	r3,37
  808408:	a821883a 	mov	r16,r21
  80840c:	10c0021e 	bne	r2,r3,808418 <___vfprintf_internal_r+0xfc>
  808410:	00001406 	br	808464 <___vfprintf_internal_r+0x148>
  808414:	10c00326 	beq	r2,r3,808424 <___vfprintf_internal_r+0x108>
  808418:	84000044 	addi	r16,r16,1
  80841c:	80800007 	ldb	r2,0(r16)
  808420:	103ffc1e 	bne	r2,zero,808414 <__alt_mem_onchip_mem+0xff800414>
  808424:	8563c83a 	sub	r17,r16,r21
  808428:	88000e26 	beq	r17,zero,808464 <___vfprintf_internal_r+0x148>
  80842c:	d8c02017 	ldw	r3,128(sp)
  808430:	d8801f17 	ldw	r2,124(sp)
  808434:	45400015 	stw	r21,0(r8)
  808438:	1c47883a 	add	r3,r3,r17
  80843c:	10800044 	addi	r2,r2,1
  808440:	d8c02015 	stw	r3,128(sp)
  808444:	44400115 	stw	r17,4(r8)
  808448:	d8801f15 	stw	r2,124(sp)
  80844c:	00c001c4 	movi	r3,7
  808450:	1880a716 	blt	r3,r2,8086f0 <___vfprintf_internal_r+0x3d4>
  808454:	42000204 	addi	r8,r8,8
  808458:	d9402f17 	ldw	r5,188(sp)
  80845c:	2c4b883a 	add	r5,r5,r17
  808460:	d9402f15 	stw	r5,188(sp)
  808464:	80800007 	ldb	r2,0(r16)
  808468:	1000a826 	beq	r2,zero,80870c <___vfprintf_internal_r+0x3f0>
  80846c:	84400047 	ldb	r17,1(r16)
  808470:	00bfffc4 	movi	r2,-1
  808474:	85400044 	addi	r21,r16,1
  808478:	d8002785 	stb	zero,158(sp)
  80847c:	0007883a 	mov	r3,zero
  808480:	000f883a 	mov	r7,zero
  808484:	d8802915 	stw	r2,164(sp)
  808488:	d8003115 	stw	zero,196(sp)
  80848c:	0025883a 	mov	r18,zero
  808490:	01401604 	movi	r5,88
  808494:	01800244 	movi	r6,9
  808498:	02800a84 	movi	r10,42
  80849c:	02401b04 	movi	r9,108
  8084a0:	ad400044 	addi	r21,r21,1
  8084a4:	88bff804 	addi	r2,r17,-32
  8084a8:	28830436 	bltu	r5,r2,8090bc <___vfprintf_internal_r+0xda0>
  8084ac:	100490ba 	slli	r2,r2,2
  8084b0:	01002074 	movhi	r4,129
  8084b4:	21213104 	addi	r4,r4,-31548
  8084b8:	1105883a 	add	r2,r2,r4
  8084bc:	10800017 	ldw	r2,0(r2)
  8084c0:	1000683a 	jmp	r2
  8084c4:	00808fdc 	xori	r2,zero,575
  8084c8:	008090bc 	xorhi	r2,zero,578
  8084cc:	008090bc 	xorhi	r2,zero,578
  8084d0:	00808ffc 	xorhi	r2,zero,575
  8084d4:	008090bc 	xorhi	r2,zero,578
  8084d8:	008090bc 	xorhi	r2,zero,578
  8084dc:	008090bc 	xorhi	r2,zero,578
  8084e0:	008090bc 	xorhi	r2,zero,578
  8084e4:	008090bc 	xorhi	r2,zero,578
  8084e8:	008090bc 	xorhi	r2,zero,578
  8084ec:	00808770 	cmpltui	r2,zero,541
  8084f0:	00808f18 	cmpnei	r2,zero,572
  8084f4:	008090bc 	xorhi	r2,zero,578
  8084f8:	00808638 	rdprs	r2,zero,536
  8084fc:	00808798 	cmpnei	r2,zero,542
  808500:	008090bc 	xorhi	r2,zero,578
  808504:	008087d8 	cmpnei	r2,zero,543
  808508:	008087e4 	muli	r2,zero,543
  80850c:	008087e4 	muli	r2,zero,543
  808510:	008087e4 	muli	r2,zero,543
  808514:	008087e4 	muli	r2,zero,543
  808518:	008087e4 	muli	r2,zero,543
  80851c:	008087e4 	muli	r2,zero,543
  808520:	008087e4 	muli	r2,zero,543
  808524:	008087e4 	muli	r2,zero,543
  808528:	008087e4 	muli	r2,zero,543
  80852c:	008090bc 	xorhi	r2,zero,578
  808530:	008090bc 	xorhi	r2,zero,578
  808534:	008090bc 	xorhi	r2,zero,578
  808538:	008090bc 	xorhi	r2,zero,578
  80853c:	008090bc 	xorhi	r2,zero,578
  808540:	008090bc 	xorhi	r2,zero,578
  808544:	008090bc 	xorhi	r2,zero,578
  808548:	008090bc 	xorhi	r2,zero,578
  80854c:	008090bc 	xorhi	r2,zero,578
  808550:	008090bc 	xorhi	r2,zero,578
  808554:	00808818 	cmpnei	r2,zero,544
  808558:	008088d4 	movui	r2,547
  80855c:	008090bc 	xorhi	r2,zero,578
  808560:	008088d4 	movui	r2,547
  808564:	008090bc 	xorhi	r2,zero,578
  808568:	008090bc 	xorhi	r2,zero,578
  80856c:	008090bc 	xorhi	r2,zero,578
  808570:	008090bc 	xorhi	r2,zero,578
  808574:	00808974 	movhi	r2,549
  808578:	008090bc 	xorhi	r2,zero,578
  80857c:	008090bc 	xorhi	r2,zero,578
  808580:	00808980 	call	80898 <__reset-0x77f768>
  808584:	008090bc 	xorhi	r2,zero,578
  808588:	008090bc 	xorhi	r2,zero,578
  80858c:	008090bc 	xorhi	r2,zero,578
  808590:	008090bc 	xorhi	r2,zero,578
  808594:	008090bc 	xorhi	r2,zero,578
  808598:	00808df8 	rdprs	r2,zero,567
  80859c:	008090bc 	xorhi	r2,zero,578
  8085a0:	008090bc 	xorhi	r2,zero,578
  8085a4:	00808e58 	cmpnei	r2,zero,569
  8085a8:	008090bc 	xorhi	r2,zero,578
  8085ac:	008090bc 	xorhi	r2,zero,578
  8085b0:	008090bc 	xorhi	r2,zero,578
  8085b4:	008090bc 	xorhi	r2,zero,578
  8085b8:	008090bc 	xorhi	r2,zero,578
  8085bc:	008090bc 	xorhi	r2,zero,578
  8085c0:	008090bc 	xorhi	r2,zero,578
  8085c4:	008090bc 	xorhi	r2,zero,578
  8085c8:	008090bc 	xorhi	r2,zero,578
  8085cc:	008090bc 	xorhi	r2,zero,578
  8085d0:	00809068 	cmpgeui	r2,zero,577
  8085d4:	00809008 	cmpgei	r2,zero,576
  8085d8:	008088d4 	movui	r2,547
  8085dc:	008088d4 	movui	r2,547
  8085e0:	008088d4 	movui	r2,547
  8085e4:	00809018 	cmpnei	r2,zero,576
  8085e8:	00809008 	cmpgei	r2,zero,576
  8085ec:	008090bc 	xorhi	r2,zero,578
  8085f0:	008090bc 	xorhi	r2,zero,578
  8085f4:	00809024 	muli	r2,zero,576
  8085f8:	008090bc 	xorhi	r2,zero,578
  8085fc:	00809034 	movhi	r2,576
  808600:	00808f08 	cmpgei	r2,zero,572
  808604:	00808644 	movi	r2,537
  808608:	00808f28 	cmpgeui	r2,zero,572
  80860c:	008090bc 	xorhi	r2,zero,578
  808610:	00808f34 	movhi	r2,572
  808614:	008090bc 	xorhi	r2,zero,578
  808618:	00808f90 	cmplti	r2,zero,574
  80861c:	008090bc 	xorhi	r2,zero,578
  808620:	008090bc 	xorhi	r2,zero,578
  808624:	00808fa0 	cmpeqi	r2,zero,574
  808628:	d9003117 	ldw	r4,196(sp)
  80862c:	d8802d15 	stw	r2,180(sp)
  808630:	0109c83a 	sub	r4,zero,r4
  808634:	d9003115 	stw	r4,196(sp)
  808638:	94800114 	ori	r18,r18,4
  80863c:	ac400007 	ldb	r17,0(r21)
  808640:	003f9706 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  808644:	00800c04 	movi	r2,48
  808648:	d9002d17 	ldw	r4,180(sp)
  80864c:	d9402917 	ldw	r5,164(sp)
  808650:	d8802705 	stb	r2,156(sp)
  808654:	00801e04 	movi	r2,120
  808658:	d8802745 	stb	r2,157(sp)
  80865c:	d8002785 	stb	zero,158(sp)
  808660:	20c00104 	addi	r3,r4,4
  808664:	24c00017 	ldw	r19,0(r4)
  808668:	002d883a 	mov	r22,zero
  80866c:	90800094 	ori	r2,r18,2
  808670:	28029a16 	blt	r5,zero,8090dc <___vfprintf_internal_r+0xdc0>
  808674:	00bfdfc4 	movi	r2,-129
  808678:	90a4703a 	and	r18,r18,r2
  80867c:	d8c02d15 	stw	r3,180(sp)
  808680:	94800094 	ori	r18,r18,2
  808684:	9802871e 	bne	r19,zero,8090a4 <___vfprintf_internal_r+0xd88>
  808688:	00802074 	movhi	r2,129
  80868c:	109b5504 	addi	r2,r2,27988
  808690:	d8803915 	stw	r2,228(sp)
  808694:	04401e04 	movi	r17,120
  808698:	d8802917 	ldw	r2,164(sp)
  80869c:	0039883a 	mov	fp,zero
  8086a0:	1001e926 	beq	r2,zero,808e48 <___vfprintf_internal_r+0xb2c>
  8086a4:	0027883a 	mov	r19,zero
  8086a8:	002d883a 	mov	r22,zero
  8086ac:	00020506 	br	808ec4 <___vfprintf_internal_r+0xba8>
  8086b0:	d9002c17 	ldw	r4,176(sp)
  8086b4:	b80b883a 	mov	r5,r23
  8086b8:	080a64c0 	call	80a64c <__swsetup_r>
  8086bc:	1005ac1e 	bne	r2,zero,809d70 <___vfprintf_internal_r+0x1a54>
  8086c0:	b880030b 	ldhu	r2,12(r23)
  8086c4:	00c00284 	movi	r3,10
  8086c8:	1080068c 	andi	r2,r2,26
  8086cc:	10ff3c1e 	bne	r2,r3,8083c0 <__alt_mem_onchip_mem+0xff8003c0>
  8086d0:	b880038f 	ldh	r2,14(r23)
  8086d4:	103f3a16 	blt	r2,zero,8083c0 <__alt_mem_onchip_mem+0xff8003c0>
  8086d8:	d9c02d17 	ldw	r7,180(sp)
  8086dc:	d9002c17 	ldw	r4,176(sp)
  8086e0:	a80d883a 	mov	r6,r21
  8086e4:	b80b883a 	mov	r5,r23
  8086e8:	080a5300 	call	80a530 <__sbprintf>
  8086ec:	00001106 	br	808734 <___vfprintf_internal_r+0x418>
  8086f0:	d9002c17 	ldw	r4,176(sp)
  8086f4:	d9801e04 	addi	r6,sp,120
  8086f8:	b80b883a 	mov	r5,r23
  8086fc:	080ef0c0 	call	80ef0c <__sprint_r>
  808700:	1000081e 	bne	r2,zero,808724 <___vfprintf_internal_r+0x408>
  808704:	da000404 	addi	r8,sp,16
  808708:	003f5306 	br	808458 <__alt_mem_onchip_mem+0xff800458>
  80870c:	d8802017 	ldw	r2,128(sp)
  808710:	10000426 	beq	r2,zero,808724 <___vfprintf_internal_r+0x408>
  808714:	d9002c17 	ldw	r4,176(sp)
  808718:	d9801e04 	addi	r6,sp,120
  80871c:	b80b883a 	mov	r5,r23
  808720:	080ef0c0 	call	80ef0c <__sprint_r>
  808724:	b880030b 	ldhu	r2,12(r23)
  808728:	1080100c 	andi	r2,r2,64
  80872c:	1005901e 	bne	r2,zero,809d70 <___vfprintf_internal_r+0x1a54>
  808730:	d8802f17 	ldw	r2,188(sp)
  808734:	dfc04717 	ldw	ra,284(sp)
  808738:	df004617 	ldw	fp,280(sp)
  80873c:	ddc04517 	ldw	r23,276(sp)
  808740:	dd804417 	ldw	r22,272(sp)
  808744:	dd404317 	ldw	r21,268(sp)
  808748:	dd004217 	ldw	r20,264(sp)
  80874c:	dcc04117 	ldw	r19,260(sp)
  808750:	dc804017 	ldw	r18,256(sp)
  808754:	dc403f17 	ldw	r17,252(sp)
  808758:	dc003e17 	ldw	r16,248(sp)
  80875c:	dec04804 	addi	sp,sp,288
  808760:	f800283a 	ret
  808764:	d9002c17 	ldw	r4,176(sp)
  808768:	080c6740 	call	80c674 <__sinit>
  80876c:	003f0406 	br	808380 <__alt_mem_onchip_mem+0xff800380>
  808770:	d8802d17 	ldw	r2,180(sp)
  808774:	d9002d17 	ldw	r4,180(sp)
  808778:	10800017 	ldw	r2,0(r2)
  80877c:	d8803115 	stw	r2,196(sp)
  808780:	20800104 	addi	r2,r4,4
  808784:	d9003117 	ldw	r4,196(sp)
  808788:	203fa716 	blt	r4,zero,808628 <__alt_mem_onchip_mem+0xff800628>
  80878c:	d8802d15 	stw	r2,180(sp)
  808790:	ac400007 	ldb	r17,0(r21)
  808794:	003f4206 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  808798:	ac400007 	ldb	r17,0(r21)
  80879c:	aac00044 	addi	r11,r21,1
  8087a0:	8a872826 	beq	r17,r10,80a444 <___vfprintf_internal_r+0x2128>
  8087a4:	88bff404 	addi	r2,r17,-48
  8087a8:	0009883a 	mov	r4,zero
  8087ac:	30867d36 	bltu	r6,r2,80a1a4 <___vfprintf_internal_r+0x1e88>
  8087b0:	5c400007 	ldb	r17,0(r11)
  8087b4:	210002a4 	muli	r4,r4,10
  8087b8:	5d400044 	addi	r21,r11,1
  8087bc:	a817883a 	mov	r11,r21
  8087c0:	2089883a 	add	r4,r4,r2
  8087c4:	88bff404 	addi	r2,r17,-48
  8087c8:	30bff92e 	bgeu	r6,r2,8087b0 <__alt_mem_onchip_mem+0xff8007b0>
  8087cc:	2005c916 	blt	r4,zero,809ef4 <___vfprintf_internal_r+0x1bd8>
  8087d0:	d9002915 	stw	r4,164(sp)
  8087d4:	003f3306 	br	8084a4 <__alt_mem_onchip_mem+0xff8004a4>
  8087d8:	94802014 	ori	r18,r18,128
  8087dc:	ac400007 	ldb	r17,0(r21)
  8087e0:	003f2f06 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  8087e4:	a809883a 	mov	r4,r21
  8087e8:	d8003115 	stw	zero,196(sp)
  8087ec:	88bff404 	addi	r2,r17,-48
  8087f0:	0017883a 	mov	r11,zero
  8087f4:	24400007 	ldb	r17,0(r4)
  8087f8:	5ac002a4 	muli	r11,r11,10
  8087fc:	ad400044 	addi	r21,r21,1
  808800:	a809883a 	mov	r4,r21
  808804:	12d7883a 	add	r11,r2,r11
  808808:	88bff404 	addi	r2,r17,-48
  80880c:	30bff92e 	bgeu	r6,r2,8087f4 <__alt_mem_onchip_mem+0xff8007f4>
  808810:	dac03115 	stw	r11,196(sp)
  808814:	003f2306 	br	8084a4 <__alt_mem_onchip_mem+0xff8004a4>
  808818:	18c03fcc 	andi	r3,r3,255
  80881c:	18072b1e 	bne	r3,zero,80a4cc <___vfprintf_internal_r+0x21b0>
  808820:	94800414 	ori	r18,r18,16
  808824:	9080080c 	andi	r2,r18,32
  808828:	10037b26 	beq	r2,zero,809618 <___vfprintf_internal_r+0x12fc>
  80882c:	d9402d17 	ldw	r5,180(sp)
  808830:	28800117 	ldw	r2,4(r5)
  808834:	2cc00017 	ldw	r19,0(r5)
  808838:	29400204 	addi	r5,r5,8
  80883c:	d9402d15 	stw	r5,180(sp)
  808840:	102d883a 	mov	r22,r2
  808844:	10044b16 	blt	r2,zero,809974 <___vfprintf_internal_r+0x1658>
  808848:	d9402917 	ldw	r5,164(sp)
  80884c:	df002783 	ldbu	fp,158(sp)
  808850:	2803bc16 	blt	r5,zero,809744 <___vfprintf_internal_r+0x1428>
  808854:	00ffdfc4 	movi	r3,-129
  808858:	9d84b03a 	or	r2,r19,r22
  80885c:	90e4703a 	and	r18,r18,r3
  808860:	10017726 	beq	r2,zero,808e40 <___vfprintf_internal_r+0xb24>
  808864:	b0038326 	beq	r22,zero,809674 <___vfprintf_internal_r+0x1358>
  808868:	dc402a15 	stw	r17,168(sp)
  80886c:	dc001e04 	addi	r16,sp,120
  808870:	b023883a 	mov	r17,r22
  808874:	402d883a 	mov	r22,r8
  808878:	9809883a 	mov	r4,r19
  80887c:	880b883a 	mov	r5,r17
  808880:	01800284 	movi	r6,10
  808884:	000f883a 	mov	r7,zero
  808888:	08110e00 	call	8110e0 <__umoddi3>
  80888c:	10800c04 	addi	r2,r2,48
  808890:	843fffc4 	addi	r16,r16,-1
  808894:	9809883a 	mov	r4,r19
  808898:	880b883a 	mov	r5,r17
  80889c:	80800005 	stb	r2,0(r16)
  8088a0:	01800284 	movi	r6,10
  8088a4:	000f883a 	mov	r7,zero
  8088a8:	0810b680 	call	810b68 <__udivdi3>
  8088ac:	1027883a 	mov	r19,r2
  8088b0:	10c4b03a 	or	r2,r2,r3
  8088b4:	1823883a 	mov	r17,r3
  8088b8:	103fef1e 	bne	r2,zero,808878 <__alt_mem_onchip_mem+0xff800878>
  8088bc:	d8c02817 	ldw	r3,160(sp)
  8088c0:	dc402a17 	ldw	r17,168(sp)
  8088c4:	b011883a 	mov	r8,r22
  8088c8:	1c07c83a 	sub	r3,r3,r16
  8088cc:	d8c02e15 	stw	r3,184(sp)
  8088d0:	00005906 	br	808a38 <___vfprintf_internal_r+0x71c>
  8088d4:	18c03fcc 	andi	r3,r3,255
  8088d8:	1806fa1e 	bne	r3,zero,80a4c4 <___vfprintf_internal_r+0x21a8>
  8088dc:	9080020c 	andi	r2,r18,8
  8088e0:	10048a26 	beq	r2,zero,809b0c <___vfprintf_internal_r+0x17f0>
  8088e4:	d8c02d17 	ldw	r3,180(sp)
  8088e8:	d9002d17 	ldw	r4,180(sp)
  8088ec:	d9402d17 	ldw	r5,180(sp)
  8088f0:	18c00017 	ldw	r3,0(r3)
  8088f4:	21000117 	ldw	r4,4(r4)
  8088f8:	29400204 	addi	r5,r5,8
  8088fc:	d8c03615 	stw	r3,216(sp)
  808900:	d9003815 	stw	r4,224(sp)
  808904:	d9402d15 	stw	r5,180(sp)
  808908:	d9003617 	ldw	r4,216(sp)
  80890c:	d9403817 	ldw	r5,224(sp)
  808910:	da003d15 	stw	r8,244(sp)
  808914:	04000044 	movi	r16,1
  808918:	080ecc00 	call	80ecc0 <__fpclassifyd>
  80891c:	da003d17 	ldw	r8,244(sp)
  808920:	14041f1e 	bne	r2,r16,8099a0 <___vfprintf_internal_r+0x1684>
  808924:	d9003617 	ldw	r4,216(sp)
  808928:	d9403817 	ldw	r5,224(sp)
  80892c:	000d883a 	mov	r6,zero
  808930:	000f883a 	mov	r7,zero
  808934:	0805fd40 	call	805fd4 <__ledf2>
  808938:	da003d17 	ldw	r8,244(sp)
  80893c:	1005be16 	blt	r2,zero,80a038 <___vfprintf_internal_r+0x1d1c>
  808940:	df002783 	ldbu	fp,158(sp)
  808944:	008011c4 	movi	r2,71
  808948:	1445330e 	bge	r2,r17,809e18 <___vfprintf_internal_r+0x1afc>
  80894c:	04002074 	movhi	r16,129
  808950:	841b4d04 	addi	r16,r16,27956
  808954:	00c000c4 	movi	r3,3
  808958:	00bfdfc4 	movi	r2,-129
  80895c:	d8c02a15 	stw	r3,168(sp)
  808960:	90a4703a 	and	r18,r18,r2
  808964:	d8c02e15 	stw	r3,184(sp)
  808968:	d8002915 	stw	zero,164(sp)
  80896c:	d8003215 	stw	zero,200(sp)
  808970:	00003706 	br	808a50 <___vfprintf_internal_r+0x734>
  808974:	94800214 	ori	r18,r18,8
  808978:	ac400007 	ldb	r17,0(r21)
  80897c:	003ec806 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  808980:	18c03fcc 	andi	r3,r3,255
  808984:	1806db1e 	bne	r3,zero,80a4f4 <___vfprintf_internal_r+0x21d8>
  808988:	94800414 	ori	r18,r18,16
  80898c:	9080080c 	andi	r2,r18,32
  808990:	1002d826 	beq	r2,zero,8094f4 <___vfprintf_internal_r+0x11d8>
  808994:	d9402d17 	ldw	r5,180(sp)
  808998:	d8c02917 	ldw	r3,164(sp)
  80899c:	d8002785 	stb	zero,158(sp)
  8089a0:	28800204 	addi	r2,r5,8
  8089a4:	2cc00017 	ldw	r19,0(r5)
  8089a8:	2d800117 	ldw	r22,4(r5)
  8089ac:	18048f16 	blt	r3,zero,809bec <___vfprintf_internal_r+0x18d0>
  8089b0:	013fdfc4 	movi	r4,-129
  8089b4:	9d86b03a 	or	r3,r19,r22
  8089b8:	d8802d15 	stw	r2,180(sp)
  8089bc:	9124703a 	and	r18,r18,r4
  8089c0:	1802d91e 	bne	r3,zero,809528 <___vfprintf_internal_r+0x120c>
  8089c4:	d8c02917 	ldw	r3,164(sp)
  8089c8:	0039883a 	mov	fp,zero
  8089cc:	1805c326 	beq	r3,zero,80a0dc <___vfprintf_internal_r+0x1dc0>
  8089d0:	0027883a 	mov	r19,zero
  8089d4:	002d883a 	mov	r22,zero
  8089d8:	dc001e04 	addi	r16,sp,120
  8089dc:	9806d0fa 	srli	r3,r19,3
  8089e0:	b008977a 	slli	r4,r22,29
  8089e4:	b02cd0fa 	srli	r22,r22,3
  8089e8:	9cc001cc 	andi	r19,r19,7
  8089ec:	98800c04 	addi	r2,r19,48
  8089f0:	843fffc4 	addi	r16,r16,-1
  8089f4:	20e6b03a 	or	r19,r4,r3
  8089f8:	80800005 	stb	r2,0(r16)
  8089fc:	9d86b03a 	or	r3,r19,r22
  808a00:	183ff61e 	bne	r3,zero,8089dc <__alt_mem_onchip_mem+0xff8009dc>
  808a04:	90c0004c 	andi	r3,r18,1
  808a08:	18013b26 	beq	r3,zero,808ef8 <___vfprintf_internal_r+0xbdc>
  808a0c:	10803fcc 	andi	r2,r2,255
  808a10:	1080201c 	xori	r2,r2,128
  808a14:	10bfe004 	addi	r2,r2,-128
  808a18:	00c00c04 	movi	r3,48
  808a1c:	10c13626 	beq	r2,r3,808ef8 <___vfprintf_internal_r+0xbdc>
  808a20:	80ffffc5 	stb	r3,-1(r16)
  808a24:	d8c02817 	ldw	r3,160(sp)
  808a28:	80bfffc4 	addi	r2,r16,-1
  808a2c:	1021883a 	mov	r16,r2
  808a30:	1887c83a 	sub	r3,r3,r2
  808a34:	d8c02e15 	stw	r3,184(sp)
  808a38:	d8802e17 	ldw	r2,184(sp)
  808a3c:	d9002917 	ldw	r4,164(sp)
  808a40:	1100010e 	bge	r2,r4,808a48 <___vfprintf_internal_r+0x72c>
  808a44:	2005883a 	mov	r2,r4
  808a48:	d8802a15 	stw	r2,168(sp)
  808a4c:	d8003215 	stw	zero,200(sp)
  808a50:	e7003fcc 	andi	fp,fp,255
  808a54:	e700201c 	xori	fp,fp,128
  808a58:	e73fe004 	addi	fp,fp,-128
  808a5c:	e0000326 	beq	fp,zero,808a6c <___vfprintf_internal_r+0x750>
  808a60:	d8c02a17 	ldw	r3,168(sp)
  808a64:	18c00044 	addi	r3,r3,1
  808a68:	d8c02a15 	stw	r3,168(sp)
  808a6c:	90c0008c 	andi	r3,r18,2
  808a70:	d8c02b15 	stw	r3,172(sp)
  808a74:	18000326 	beq	r3,zero,808a84 <___vfprintf_internal_r+0x768>
  808a78:	d8c02a17 	ldw	r3,168(sp)
  808a7c:	18c00084 	addi	r3,r3,2
  808a80:	d8c02a15 	stw	r3,168(sp)
  808a84:	90c0210c 	andi	r3,r18,132
  808a88:	d8c03015 	stw	r3,192(sp)
  808a8c:	1801a31e 	bne	r3,zero,80911c <___vfprintf_internal_r+0xe00>
  808a90:	d9003117 	ldw	r4,196(sp)
  808a94:	d8c02a17 	ldw	r3,168(sp)
  808a98:	20e7c83a 	sub	r19,r4,r3
  808a9c:	04c19f0e 	bge	zero,r19,80911c <___vfprintf_internal_r+0xe00>
  808aa0:	02400404 	movi	r9,16
  808aa4:	d8c02017 	ldw	r3,128(sp)
  808aa8:	d8801f17 	ldw	r2,124(sp)
  808aac:	4cc50d0e 	bge	r9,r19,809ee4 <___vfprintf_internal_r+0x1bc8>
  808ab0:	01402074 	movhi	r5,129
  808ab4:	295b6084 	addi	r5,r5,28034
  808ab8:	dc403b15 	stw	r17,236(sp)
  808abc:	d9403515 	stw	r5,212(sp)
  808ac0:	9823883a 	mov	r17,r19
  808ac4:	482d883a 	mov	r22,r9
  808ac8:	9027883a 	mov	r19,r18
  808acc:	070001c4 	movi	fp,7
  808ad0:	8025883a 	mov	r18,r16
  808ad4:	dc002c17 	ldw	r16,176(sp)
  808ad8:	00000306 	br	808ae8 <___vfprintf_internal_r+0x7cc>
  808adc:	8c7ffc04 	addi	r17,r17,-16
  808ae0:	42000204 	addi	r8,r8,8
  808ae4:	b440130e 	bge	r22,r17,808b34 <___vfprintf_internal_r+0x818>
  808ae8:	01002074 	movhi	r4,129
  808aec:	18c00404 	addi	r3,r3,16
  808af0:	10800044 	addi	r2,r2,1
  808af4:	211b6084 	addi	r4,r4,28034
  808af8:	41000015 	stw	r4,0(r8)
  808afc:	45800115 	stw	r22,4(r8)
  808b00:	d8c02015 	stw	r3,128(sp)
  808b04:	d8801f15 	stw	r2,124(sp)
  808b08:	e0bff40e 	bge	fp,r2,808adc <__alt_mem_onchip_mem+0xff800adc>
  808b0c:	d9801e04 	addi	r6,sp,120
  808b10:	b80b883a 	mov	r5,r23
  808b14:	8009883a 	mov	r4,r16
  808b18:	080ef0c0 	call	80ef0c <__sprint_r>
  808b1c:	103f011e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  808b20:	8c7ffc04 	addi	r17,r17,-16
  808b24:	d8c02017 	ldw	r3,128(sp)
  808b28:	d8801f17 	ldw	r2,124(sp)
  808b2c:	da000404 	addi	r8,sp,16
  808b30:	b47fed16 	blt	r22,r17,808ae8 <__alt_mem_onchip_mem+0xff800ae8>
  808b34:	9021883a 	mov	r16,r18
  808b38:	9825883a 	mov	r18,r19
  808b3c:	8827883a 	mov	r19,r17
  808b40:	dc403b17 	ldw	r17,236(sp)
  808b44:	d9403517 	ldw	r5,212(sp)
  808b48:	98c7883a 	add	r3,r19,r3
  808b4c:	10800044 	addi	r2,r2,1
  808b50:	41400015 	stw	r5,0(r8)
  808b54:	44c00115 	stw	r19,4(r8)
  808b58:	d8c02015 	stw	r3,128(sp)
  808b5c:	d8801f15 	stw	r2,124(sp)
  808b60:	010001c4 	movi	r4,7
  808b64:	2082a316 	blt	r4,r2,8095f4 <___vfprintf_internal_r+0x12d8>
  808b68:	df002787 	ldb	fp,158(sp)
  808b6c:	42000204 	addi	r8,r8,8
  808b70:	e0000c26 	beq	fp,zero,808ba4 <___vfprintf_internal_r+0x888>
  808b74:	d8801f17 	ldw	r2,124(sp)
  808b78:	d9002784 	addi	r4,sp,158
  808b7c:	18c00044 	addi	r3,r3,1
  808b80:	10800044 	addi	r2,r2,1
  808b84:	41000015 	stw	r4,0(r8)
  808b88:	01000044 	movi	r4,1
  808b8c:	41000115 	stw	r4,4(r8)
  808b90:	d8c02015 	stw	r3,128(sp)
  808b94:	d8801f15 	stw	r2,124(sp)
  808b98:	010001c4 	movi	r4,7
  808b9c:	20823c16 	blt	r4,r2,809490 <___vfprintf_internal_r+0x1174>
  808ba0:	42000204 	addi	r8,r8,8
  808ba4:	d8802b17 	ldw	r2,172(sp)
  808ba8:	10000c26 	beq	r2,zero,808bdc <___vfprintf_internal_r+0x8c0>
  808bac:	d8801f17 	ldw	r2,124(sp)
  808bb0:	d9002704 	addi	r4,sp,156
  808bb4:	18c00084 	addi	r3,r3,2
  808bb8:	10800044 	addi	r2,r2,1
  808bbc:	41000015 	stw	r4,0(r8)
  808bc0:	01000084 	movi	r4,2
  808bc4:	41000115 	stw	r4,4(r8)
  808bc8:	d8c02015 	stw	r3,128(sp)
  808bcc:	d8801f15 	stw	r2,124(sp)
  808bd0:	010001c4 	movi	r4,7
  808bd4:	20823616 	blt	r4,r2,8094b0 <___vfprintf_internal_r+0x1194>
  808bd8:	42000204 	addi	r8,r8,8
  808bdc:	d9003017 	ldw	r4,192(sp)
  808be0:	00802004 	movi	r2,128
  808be4:	20819926 	beq	r4,r2,80924c <___vfprintf_internal_r+0xf30>
  808be8:	d9402917 	ldw	r5,164(sp)
  808bec:	d8802e17 	ldw	r2,184(sp)
  808bf0:	28adc83a 	sub	r22,r5,r2
  808bf4:	0580310e 	bge	zero,r22,808cbc <___vfprintf_internal_r+0x9a0>
  808bf8:	07000404 	movi	fp,16
  808bfc:	d8801f17 	ldw	r2,124(sp)
  808c00:	e584140e 	bge	fp,r22,809c54 <___vfprintf_internal_r+0x1938>
  808c04:	01402074 	movhi	r5,129
  808c08:	295b5c84 	addi	r5,r5,28018
  808c0c:	dc402915 	stw	r17,164(sp)
  808c10:	d9402b15 	stw	r5,172(sp)
  808c14:	b023883a 	mov	r17,r22
  808c18:	04c001c4 	movi	r19,7
  808c1c:	a82d883a 	mov	r22,r21
  808c20:	902b883a 	mov	r21,r18
  808c24:	8025883a 	mov	r18,r16
  808c28:	dc002c17 	ldw	r16,176(sp)
  808c2c:	00000306 	br	808c3c <___vfprintf_internal_r+0x920>
  808c30:	8c7ffc04 	addi	r17,r17,-16
  808c34:	42000204 	addi	r8,r8,8
  808c38:	e440110e 	bge	fp,r17,808c80 <___vfprintf_internal_r+0x964>
  808c3c:	18c00404 	addi	r3,r3,16
  808c40:	10800044 	addi	r2,r2,1
  808c44:	45000015 	stw	r20,0(r8)
  808c48:	47000115 	stw	fp,4(r8)
  808c4c:	d8c02015 	stw	r3,128(sp)
  808c50:	d8801f15 	stw	r2,124(sp)
  808c54:	98bff60e 	bge	r19,r2,808c30 <__alt_mem_onchip_mem+0xff800c30>
  808c58:	d9801e04 	addi	r6,sp,120
  808c5c:	b80b883a 	mov	r5,r23
  808c60:	8009883a 	mov	r4,r16
  808c64:	080ef0c0 	call	80ef0c <__sprint_r>
  808c68:	103eae1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  808c6c:	8c7ffc04 	addi	r17,r17,-16
  808c70:	d8c02017 	ldw	r3,128(sp)
  808c74:	d8801f17 	ldw	r2,124(sp)
  808c78:	da000404 	addi	r8,sp,16
  808c7c:	e47fef16 	blt	fp,r17,808c3c <__alt_mem_onchip_mem+0xff800c3c>
  808c80:	9021883a 	mov	r16,r18
  808c84:	a825883a 	mov	r18,r21
  808c88:	b02b883a 	mov	r21,r22
  808c8c:	882d883a 	mov	r22,r17
  808c90:	dc402917 	ldw	r17,164(sp)
  808c94:	d9002b17 	ldw	r4,172(sp)
  808c98:	1d87883a 	add	r3,r3,r22
  808c9c:	10800044 	addi	r2,r2,1
  808ca0:	41000015 	stw	r4,0(r8)
  808ca4:	45800115 	stw	r22,4(r8)
  808ca8:	d8c02015 	stw	r3,128(sp)
  808cac:	d8801f15 	stw	r2,124(sp)
  808cb0:	010001c4 	movi	r4,7
  808cb4:	2081ee16 	blt	r4,r2,809470 <___vfprintf_internal_r+0x1154>
  808cb8:	42000204 	addi	r8,r8,8
  808cbc:	9080400c 	andi	r2,r18,256
  808cc0:	1001181e 	bne	r2,zero,809124 <___vfprintf_internal_r+0xe08>
  808cc4:	d9402e17 	ldw	r5,184(sp)
  808cc8:	d8801f17 	ldw	r2,124(sp)
  808ccc:	44000015 	stw	r16,0(r8)
  808cd0:	1947883a 	add	r3,r3,r5
  808cd4:	10800044 	addi	r2,r2,1
  808cd8:	41400115 	stw	r5,4(r8)
  808cdc:	d8c02015 	stw	r3,128(sp)
  808ce0:	d8801f15 	stw	r2,124(sp)
  808ce4:	010001c4 	movi	r4,7
  808ce8:	2081d316 	blt	r4,r2,809438 <___vfprintf_internal_r+0x111c>
  808cec:	42000204 	addi	r8,r8,8
  808cf0:	9480010c 	andi	r18,r18,4
  808cf4:	90003226 	beq	r18,zero,808dc0 <___vfprintf_internal_r+0xaa4>
  808cf8:	d9403117 	ldw	r5,196(sp)
  808cfc:	d8802a17 	ldw	r2,168(sp)
  808d00:	28a1c83a 	sub	r16,r5,r2
  808d04:	04002e0e 	bge	zero,r16,808dc0 <___vfprintf_internal_r+0xaa4>
  808d08:	04400404 	movi	r17,16
  808d0c:	d8801f17 	ldw	r2,124(sp)
  808d10:	8c04a20e 	bge	r17,r16,809f9c <___vfprintf_internal_r+0x1c80>
  808d14:	01402074 	movhi	r5,129
  808d18:	295b6084 	addi	r5,r5,28034
  808d1c:	d9403515 	stw	r5,212(sp)
  808d20:	048001c4 	movi	r18,7
  808d24:	dcc02c17 	ldw	r19,176(sp)
  808d28:	00000306 	br	808d38 <___vfprintf_internal_r+0xa1c>
  808d2c:	843ffc04 	addi	r16,r16,-16
  808d30:	42000204 	addi	r8,r8,8
  808d34:	8c00130e 	bge	r17,r16,808d84 <___vfprintf_internal_r+0xa68>
  808d38:	01002074 	movhi	r4,129
  808d3c:	18c00404 	addi	r3,r3,16
  808d40:	10800044 	addi	r2,r2,1
  808d44:	211b6084 	addi	r4,r4,28034
  808d48:	41000015 	stw	r4,0(r8)
  808d4c:	44400115 	stw	r17,4(r8)
  808d50:	d8c02015 	stw	r3,128(sp)
  808d54:	d8801f15 	stw	r2,124(sp)
  808d58:	90bff40e 	bge	r18,r2,808d2c <__alt_mem_onchip_mem+0xff800d2c>
  808d5c:	d9801e04 	addi	r6,sp,120
  808d60:	b80b883a 	mov	r5,r23
  808d64:	9809883a 	mov	r4,r19
  808d68:	080ef0c0 	call	80ef0c <__sprint_r>
  808d6c:	103e6d1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  808d70:	843ffc04 	addi	r16,r16,-16
  808d74:	d8c02017 	ldw	r3,128(sp)
  808d78:	d8801f17 	ldw	r2,124(sp)
  808d7c:	da000404 	addi	r8,sp,16
  808d80:	8c3fed16 	blt	r17,r16,808d38 <__alt_mem_onchip_mem+0xff800d38>
  808d84:	d9403517 	ldw	r5,212(sp)
  808d88:	1c07883a 	add	r3,r3,r16
  808d8c:	10800044 	addi	r2,r2,1
  808d90:	41400015 	stw	r5,0(r8)
  808d94:	44000115 	stw	r16,4(r8)
  808d98:	d8c02015 	stw	r3,128(sp)
  808d9c:	d8801f15 	stw	r2,124(sp)
  808da0:	010001c4 	movi	r4,7
  808da4:	2080060e 	bge	r4,r2,808dc0 <___vfprintf_internal_r+0xaa4>
  808da8:	d9002c17 	ldw	r4,176(sp)
  808dac:	d9801e04 	addi	r6,sp,120
  808db0:	b80b883a 	mov	r5,r23
  808db4:	080ef0c0 	call	80ef0c <__sprint_r>
  808db8:	103e5a1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  808dbc:	d8c02017 	ldw	r3,128(sp)
  808dc0:	d8803117 	ldw	r2,196(sp)
  808dc4:	d9002a17 	ldw	r4,168(sp)
  808dc8:	1100010e 	bge	r2,r4,808dd0 <___vfprintf_internal_r+0xab4>
  808dcc:	2005883a 	mov	r2,r4
  808dd0:	d9402f17 	ldw	r5,188(sp)
  808dd4:	288b883a 	add	r5,r5,r2
  808dd8:	d9402f15 	stw	r5,188(sp)
  808ddc:	18019e1e 	bne	r3,zero,809458 <___vfprintf_internal_r+0x113c>
  808de0:	a8800007 	ldb	r2,0(r21)
  808de4:	d8001f15 	stw	zero,124(sp)
  808de8:	da000404 	addi	r8,sp,16
  808dec:	103d851e 	bne	r2,zero,808404 <__alt_mem_onchip_mem+0xff800404>
  808df0:	a821883a 	mov	r16,r21
  808df4:	003d9b06 	br	808464 <__alt_mem_onchip_mem+0xff800464>
  808df8:	18c03fcc 	andi	r3,r3,255
  808dfc:	1805c11e 	bne	r3,zero,80a504 <___vfprintf_internal_r+0x21e8>
  808e00:	94800414 	ori	r18,r18,16
  808e04:	9080080c 	andi	r2,r18,32
  808e08:	10020c26 	beq	r2,zero,80963c <___vfprintf_internal_r+0x1320>
  808e0c:	d8802d17 	ldw	r2,180(sp)
  808e10:	d9002917 	ldw	r4,164(sp)
  808e14:	d8002785 	stb	zero,158(sp)
  808e18:	10c00204 	addi	r3,r2,8
  808e1c:	14c00017 	ldw	r19,0(r2)
  808e20:	15800117 	ldw	r22,4(r2)
  808e24:	20040f16 	blt	r4,zero,809e64 <___vfprintf_internal_r+0x1b48>
  808e28:	013fdfc4 	movi	r4,-129
  808e2c:	9d84b03a 	or	r2,r19,r22
  808e30:	d8c02d15 	stw	r3,180(sp)
  808e34:	9124703a 	and	r18,r18,r4
  808e38:	0039883a 	mov	fp,zero
  808e3c:	103e891e 	bne	r2,zero,808864 <__alt_mem_onchip_mem+0xff800864>
  808e40:	d9002917 	ldw	r4,164(sp)
  808e44:	2002c11e 	bne	r4,zero,80994c <___vfprintf_internal_r+0x1630>
  808e48:	d8002915 	stw	zero,164(sp)
  808e4c:	d8002e15 	stw	zero,184(sp)
  808e50:	dc001e04 	addi	r16,sp,120
  808e54:	003ef806 	br	808a38 <__alt_mem_onchip_mem+0xff800a38>
  808e58:	18c03fcc 	andi	r3,r3,255
  808e5c:	18059d1e 	bne	r3,zero,80a4d4 <___vfprintf_internal_r+0x21b8>
  808e60:	01402074 	movhi	r5,129
  808e64:	295b5004 	addi	r5,r5,27968
  808e68:	d9403915 	stw	r5,228(sp)
  808e6c:	9080080c 	andi	r2,r18,32
  808e70:	10005226 	beq	r2,zero,808fbc <___vfprintf_internal_r+0xca0>
  808e74:	d8802d17 	ldw	r2,180(sp)
  808e78:	14c00017 	ldw	r19,0(r2)
  808e7c:	15800117 	ldw	r22,4(r2)
  808e80:	10800204 	addi	r2,r2,8
  808e84:	d8802d15 	stw	r2,180(sp)
  808e88:	9080004c 	andi	r2,r18,1
  808e8c:	10019026 	beq	r2,zero,8094d0 <___vfprintf_internal_r+0x11b4>
  808e90:	9d84b03a 	or	r2,r19,r22
  808e94:	10036926 	beq	r2,zero,809c3c <___vfprintf_internal_r+0x1920>
  808e98:	d8c02917 	ldw	r3,164(sp)
  808e9c:	00800c04 	movi	r2,48
  808ea0:	d8802705 	stb	r2,156(sp)
  808ea4:	dc402745 	stb	r17,157(sp)
  808ea8:	d8002785 	stb	zero,158(sp)
  808eac:	90800094 	ori	r2,r18,2
  808eb0:	18045d16 	blt	r3,zero,80a028 <___vfprintf_internal_r+0x1d0c>
  808eb4:	00bfdfc4 	movi	r2,-129
  808eb8:	90a4703a 	and	r18,r18,r2
  808ebc:	94800094 	ori	r18,r18,2
  808ec0:	0039883a 	mov	fp,zero
  808ec4:	d9003917 	ldw	r4,228(sp)
  808ec8:	dc001e04 	addi	r16,sp,120
  808ecc:	988003cc 	andi	r2,r19,15
  808ed0:	b006973a 	slli	r3,r22,28
  808ed4:	2085883a 	add	r2,r4,r2
  808ed8:	9826d13a 	srli	r19,r19,4
  808edc:	10800003 	ldbu	r2,0(r2)
  808ee0:	b02cd13a 	srli	r22,r22,4
  808ee4:	843fffc4 	addi	r16,r16,-1
  808ee8:	1ce6b03a 	or	r19,r3,r19
  808eec:	80800005 	stb	r2,0(r16)
  808ef0:	9d84b03a 	or	r2,r19,r22
  808ef4:	103ff51e 	bne	r2,zero,808ecc <__alt_mem_onchip_mem+0xff800ecc>
  808ef8:	d8c02817 	ldw	r3,160(sp)
  808efc:	1c07c83a 	sub	r3,r3,r16
  808f00:	d8c02e15 	stw	r3,184(sp)
  808f04:	003ecc06 	br	808a38 <__alt_mem_onchip_mem+0xff800a38>
  808f08:	18c03fcc 	andi	r3,r3,255
  808f0c:	183e9f26 	beq	r3,zero,80898c <__alt_mem_onchip_mem+0xff80098c>
  808f10:	d9c02785 	stb	r7,158(sp)
  808f14:	003e9d06 	br	80898c <__alt_mem_onchip_mem+0xff80098c>
  808f18:	00c00044 	movi	r3,1
  808f1c:	01c00ac4 	movi	r7,43
  808f20:	ac400007 	ldb	r17,0(r21)
  808f24:	003d5e06 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  808f28:	94800814 	ori	r18,r18,32
  808f2c:	ac400007 	ldb	r17,0(r21)
  808f30:	003d5b06 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  808f34:	d8c02d17 	ldw	r3,180(sp)
  808f38:	d8002785 	stb	zero,158(sp)
  808f3c:	1c000017 	ldw	r16,0(r3)
  808f40:	1cc00104 	addi	r19,r3,4
  808f44:	80041926 	beq	r16,zero,809fac <___vfprintf_internal_r+0x1c90>
  808f48:	d9002917 	ldw	r4,164(sp)
  808f4c:	2003d016 	blt	r4,zero,809e90 <___vfprintf_internal_r+0x1b74>
  808f50:	200d883a 	mov	r6,r4
  808f54:	000b883a 	mov	r5,zero
  808f58:	8009883a 	mov	r4,r16
  808f5c:	da003d15 	stw	r8,244(sp)
  808f60:	080d3780 	call	80d378 <memchr>
  808f64:	da003d17 	ldw	r8,244(sp)
  808f68:	10045426 	beq	r2,zero,80a0bc <___vfprintf_internal_r+0x1da0>
  808f6c:	1405c83a 	sub	r2,r2,r16
  808f70:	d8802e15 	stw	r2,184(sp)
  808f74:	1003cc16 	blt	r2,zero,809ea8 <___vfprintf_internal_r+0x1b8c>
  808f78:	df002783 	ldbu	fp,158(sp)
  808f7c:	d8802a15 	stw	r2,168(sp)
  808f80:	dcc02d15 	stw	r19,180(sp)
  808f84:	d8002915 	stw	zero,164(sp)
  808f88:	d8003215 	stw	zero,200(sp)
  808f8c:	003eb006 	br	808a50 <__alt_mem_onchip_mem+0xff800a50>
  808f90:	18c03fcc 	andi	r3,r3,255
  808f94:	183f9b26 	beq	r3,zero,808e04 <__alt_mem_onchip_mem+0xff800e04>
  808f98:	d9c02785 	stb	r7,158(sp)
  808f9c:	003f9906 	br	808e04 <__alt_mem_onchip_mem+0xff800e04>
  808fa0:	18c03fcc 	andi	r3,r3,255
  808fa4:	1805551e 	bne	r3,zero,80a4fc <___vfprintf_internal_r+0x21e0>
  808fa8:	01402074 	movhi	r5,129
  808fac:	295b5504 	addi	r5,r5,27988
  808fb0:	d9403915 	stw	r5,228(sp)
  808fb4:	9080080c 	andi	r2,r18,32
  808fb8:	103fae1e 	bne	r2,zero,808e74 <__alt_mem_onchip_mem+0xff800e74>
  808fbc:	9080040c 	andi	r2,r18,16
  808fc0:	1002de26 	beq	r2,zero,809b3c <___vfprintf_internal_r+0x1820>
  808fc4:	d8c02d17 	ldw	r3,180(sp)
  808fc8:	002d883a 	mov	r22,zero
  808fcc:	1cc00017 	ldw	r19,0(r3)
  808fd0:	18c00104 	addi	r3,r3,4
  808fd4:	d8c02d15 	stw	r3,180(sp)
  808fd8:	003fab06 	br	808e88 <__alt_mem_onchip_mem+0xff800e88>
  808fdc:	38803fcc 	andi	r2,r7,255
  808fe0:	1080201c 	xori	r2,r2,128
  808fe4:	10bfe004 	addi	r2,r2,-128
  808fe8:	1002d21e 	bne	r2,zero,809b34 <___vfprintf_internal_r+0x1818>
  808fec:	00c00044 	movi	r3,1
  808ff0:	01c00804 	movi	r7,32
  808ff4:	ac400007 	ldb	r17,0(r21)
  808ff8:	003d2906 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  808ffc:	94800054 	ori	r18,r18,1
  809000:	ac400007 	ldb	r17,0(r21)
  809004:	003d2606 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  809008:	18c03fcc 	andi	r3,r3,255
  80900c:	183e0526 	beq	r3,zero,808824 <__alt_mem_onchip_mem+0xff800824>
  809010:	d9c02785 	stb	r7,158(sp)
  809014:	003e0306 	br	808824 <__alt_mem_onchip_mem+0xff800824>
  809018:	94801014 	ori	r18,r18,64
  80901c:	ac400007 	ldb	r17,0(r21)
  809020:	003d1f06 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  809024:	ac400007 	ldb	r17,0(r21)
  809028:	8a438726 	beq	r17,r9,809e48 <___vfprintf_internal_r+0x1b2c>
  80902c:	94800414 	ori	r18,r18,16
  809030:	003d1b06 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  809034:	18c03fcc 	andi	r3,r3,255
  809038:	1805341e 	bne	r3,zero,80a50c <___vfprintf_internal_r+0x21f0>
  80903c:	9080080c 	andi	r2,r18,32
  809040:	1002cd26 	beq	r2,zero,809b78 <___vfprintf_internal_r+0x185c>
  809044:	d9402d17 	ldw	r5,180(sp)
  809048:	d9002f17 	ldw	r4,188(sp)
  80904c:	28800017 	ldw	r2,0(r5)
  809050:	2007d7fa 	srai	r3,r4,31
  809054:	29400104 	addi	r5,r5,4
  809058:	d9402d15 	stw	r5,180(sp)
  80905c:	11000015 	stw	r4,0(r2)
  809060:	10c00115 	stw	r3,4(r2)
  809064:	003ce506 	br	8083fc <__alt_mem_onchip_mem+0xff8003fc>
  809068:	d8c02d17 	ldw	r3,180(sp)
  80906c:	d9002d17 	ldw	r4,180(sp)
  809070:	d8002785 	stb	zero,158(sp)
  809074:	18800017 	ldw	r2,0(r3)
  809078:	21000104 	addi	r4,r4,4
  80907c:	00c00044 	movi	r3,1
  809080:	d8c02a15 	stw	r3,168(sp)
  809084:	d8801405 	stb	r2,80(sp)
  809088:	d9002d15 	stw	r4,180(sp)
  80908c:	d8c02e15 	stw	r3,184(sp)
  809090:	d8002915 	stw	zero,164(sp)
  809094:	d8003215 	stw	zero,200(sp)
  809098:	dc001404 	addi	r16,sp,80
  80909c:	0039883a 	mov	fp,zero
  8090a0:	003e7206 	br	808a6c <__alt_mem_onchip_mem+0xff800a6c>
  8090a4:	01002074 	movhi	r4,129
  8090a8:	211b5504 	addi	r4,r4,27988
  8090ac:	0039883a 	mov	fp,zero
  8090b0:	d9003915 	stw	r4,228(sp)
  8090b4:	04401e04 	movi	r17,120
  8090b8:	003f8206 	br	808ec4 <__alt_mem_onchip_mem+0xff800ec4>
  8090bc:	18c03fcc 	andi	r3,r3,255
  8090c0:	1805061e 	bne	r3,zero,80a4dc <___vfprintf_internal_r+0x21c0>
  8090c4:	883d9126 	beq	r17,zero,80870c <__alt_mem_onchip_mem+0xff80070c>
  8090c8:	00c00044 	movi	r3,1
  8090cc:	d8c02a15 	stw	r3,168(sp)
  8090d0:	dc401405 	stb	r17,80(sp)
  8090d4:	d8002785 	stb	zero,158(sp)
  8090d8:	003fec06 	br	80908c <__alt_mem_onchip_mem+0xff80108c>
  8090dc:	01402074 	movhi	r5,129
  8090e0:	295b5504 	addi	r5,r5,27988
  8090e4:	d9403915 	stw	r5,228(sp)
  8090e8:	d8c02d15 	stw	r3,180(sp)
  8090ec:	1025883a 	mov	r18,r2
  8090f0:	04401e04 	movi	r17,120
  8090f4:	9d84b03a 	or	r2,r19,r22
  8090f8:	1000fc1e 	bne	r2,zero,8094ec <___vfprintf_internal_r+0x11d0>
  8090fc:	0039883a 	mov	fp,zero
  809100:	00800084 	movi	r2,2
  809104:	10803fcc 	andi	r2,r2,255
  809108:	00c00044 	movi	r3,1
  80910c:	10c20f26 	beq	r2,r3,80994c <___vfprintf_internal_r+0x1630>
  809110:	00c00084 	movi	r3,2
  809114:	10fd6326 	beq	r2,r3,8086a4 <__alt_mem_onchip_mem+0xff8006a4>
  809118:	003e2d06 	br	8089d0 <__alt_mem_onchip_mem+0xff8009d0>
  80911c:	d8c02017 	ldw	r3,128(sp)
  809120:	003e9306 	br	808b70 <__alt_mem_onchip_mem+0xff800b70>
  809124:	00801944 	movi	r2,101
  809128:	14407e0e 	bge	r2,r17,809324 <___vfprintf_internal_r+0x1008>
  80912c:	d9003617 	ldw	r4,216(sp)
  809130:	d9403817 	ldw	r5,224(sp)
  809134:	000d883a 	mov	r6,zero
  809138:	000f883a 	mov	r7,zero
  80913c:	d8c03c15 	stw	r3,240(sp)
  809140:	da003d15 	stw	r8,244(sp)
  809144:	08120b40 	call	8120b4 <__eqdf2>
  809148:	d8c03c17 	ldw	r3,240(sp)
  80914c:	da003d17 	ldw	r8,244(sp)
  809150:	1000f71e 	bne	r2,zero,809530 <___vfprintf_internal_r+0x1214>
  809154:	d8801f17 	ldw	r2,124(sp)
  809158:	01002074 	movhi	r4,129
  80915c:	211b5c04 	addi	r4,r4,28016
  809160:	18c00044 	addi	r3,r3,1
  809164:	10800044 	addi	r2,r2,1
  809168:	41000015 	stw	r4,0(r8)
  80916c:	01000044 	movi	r4,1
  809170:	41000115 	stw	r4,4(r8)
  809174:	d8c02015 	stw	r3,128(sp)
  809178:	d8801f15 	stw	r2,124(sp)
  80917c:	010001c4 	movi	r4,7
  809180:	2082b816 	blt	r4,r2,809c64 <___vfprintf_internal_r+0x1948>
  809184:	42000204 	addi	r8,r8,8
  809188:	d8802617 	ldw	r2,152(sp)
  80918c:	d9403317 	ldw	r5,204(sp)
  809190:	11400216 	blt	r2,r5,80919c <___vfprintf_internal_r+0xe80>
  809194:	9080004c 	andi	r2,r18,1
  809198:	103ed526 	beq	r2,zero,808cf0 <__alt_mem_onchip_mem+0xff800cf0>
  80919c:	d8803717 	ldw	r2,220(sp)
  8091a0:	d9003417 	ldw	r4,208(sp)
  8091a4:	d9403717 	ldw	r5,220(sp)
  8091a8:	1887883a 	add	r3,r3,r2
  8091ac:	d8801f17 	ldw	r2,124(sp)
  8091b0:	41000015 	stw	r4,0(r8)
  8091b4:	41400115 	stw	r5,4(r8)
  8091b8:	10800044 	addi	r2,r2,1
  8091bc:	d8c02015 	stw	r3,128(sp)
  8091c0:	d8801f15 	stw	r2,124(sp)
  8091c4:	010001c4 	movi	r4,7
  8091c8:	20832916 	blt	r4,r2,809e70 <___vfprintf_internal_r+0x1b54>
  8091cc:	42000204 	addi	r8,r8,8
  8091d0:	d8803317 	ldw	r2,204(sp)
  8091d4:	143fffc4 	addi	r16,r2,-1
  8091d8:	043ec50e 	bge	zero,r16,808cf0 <__alt_mem_onchip_mem+0xff800cf0>
  8091dc:	04400404 	movi	r17,16
  8091e0:	d8801f17 	ldw	r2,124(sp)
  8091e4:	8c00880e 	bge	r17,r16,809408 <___vfprintf_internal_r+0x10ec>
  8091e8:	01402074 	movhi	r5,129
  8091ec:	295b5c84 	addi	r5,r5,28018
  8091f0:	d9402b15 	stw	r5,172(sp)
  8091f4:	058001c4 	movi	r22,7
  8091f8:	dcc02c17 	ldw	r19,176(sp)
  8091fc:	00000306 	br	80920c <___vfprintf_internal_r+0xef0>
  809200:	42000204 	addi	r8,r8,8
  809204:	843ffc04 	addi	r16,r16,-16
  809208:	8c00820e 	bge	r17,r16,809414 <___vfprintf_internal_r+0x10f8>
  80920c:	18c00404 	addi	r3,r3,16
  809210:	10800044 	addi	r2,r2,1
  809214:	45000015 	stw	r20,0(r8)
  809218:	44400115 	stw	r17,4(r8)
  80921c:	d8c02015 	stw	r3,128(sp)
  809220:	d8801f15 	stw	r2,124(sp)
  809224:	b0bff60e 	bge	r22,r2,809200 <__alt_mem_onchip_mem+0xff801200>
  809228:	d9801e04 	addi	r6,sp,120
  80922c:	b80b883a 	mov	r5,r23
  809230:	9809883a 	mov	r4,r19
  809234:	080ef0c0 	call	80ef0c <__sprint_r>
  809238:	103d3a1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  80923c:	d8c02017 	ldw	r3,128(sp)
  809240:	d8801f17 	ldw	r2,124(sp)
  809244:	da000404 	addi	r8,sp,16
  809248:	003fee06 	br	809204 <__alt_mem_onchip_mem+0xff801204>
  80924c:	d9403117 	ldw	r5,196(sp)
  809250:	d8802a17 	ldw	r2,168(sp)
  809254:	28adc83a 	sub	r22,r5,r2
  809258:	05be630e 	bge	zero,r22,808be8 <__alt_mem_onchip_mem+0xff800be8>
  80925c:	07000404 	movi	fp,16
  809260:	d8801f17 	ldw	r2,124(sp)
  809264:	e5838f0e 	bge	fp,r22,80a0a4 <___vfprintf_internal_r+0x1d88>
  809268:	01402074 	movhi	r5,129
  80926c:	295b5c84 	addi	r5,r5,28018
  809270:	dc403015 	stw	r17,192(sp)
  809274:	d9402b15 	stw	r5,172(sp)
  809278:	b023883a 	mov	r17,r22
  80927c:	04c001c4 	movi	r19,7
  809280:	a82d883a 	mov	r22,r21
  809284:	902b883a 	mov	r21,r18
  809288:	8025883a 	mov	r18,r16
  80928c:	dc002c17 	ldw	r16,176(sp)
  809290:	00000306 	br	8092a0 <___vfprintf_internal_r+0xf84>
  809294:	8c7ffc04 	addi	r17,r17,-16
  809298:	42000204 	addi	r8,r8,8
  80929c:	e440110e 	bge	fp,r17,8092e4 <___vfprintf_internal_r+0xfc8>
  8092a0:	18c00404 	addi	r3,r3,16
  8092a4:	10800044 	addi	r2,r2,1
  8092a8:	45000015 	stw	r20,0(r8)
  8092ac:	47000115 	stw	fp,4(r8)
  8092b0:	d8c02015 	stw	r3,128(sp)
  8092b4:	d8801f15 	stw	r2,124(sp)
  8092b8:	98bff60e 	bge	r19,r2,809294 <__alt_mem_onchip_mem+0xff801294>
  8092bc:	d9801e04 	addi	r6,sp,120
  8092c0:	b80b883a 	mov	r5,r23
  8092c4:	8009883a 	mov	r4,r16
  8092c8:	080ef0c0 	call	80ef0c <__sprint_r>
  8092cc:	103d151e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  8092d0:	8c7ffc04 	addi	r17,r17,-16
  8092d4:	d8c02017 	ldw	r3,128(sp)
  8092d8:	d8801f17 	ldw	r2,124(sp)
  8092dc:	da000404 	addi	r8,sp,16
  8092e0:	e47fef16 	blt	fp,r17,8092a0 <__alt_mem_onchip_mem+0xff8012a0>
  8092e4:	9021883a 	mov	r16,r18
  8092e8:	a825883a 	mov	r18,r21
  8092ec:	b02b883a 	mov	r21,r22
  8092f0:	882d883a 	mov	r22,r17
  8092f4:	dc403017 	ldw	r17,192(sp)
  8092f8:	d9002b17 	ldw	r4,172(sp)
  8092fc:	1d87883a 	add	r3,r3,r22
  809300:	10800044 	addi	r2,r2,1
  809304:	41000015 	stw	r4,0(r8)
  809308:	45800115 	stw	r22,4(r8)
  80930c:	d8c02015 	stw	r3,128(sp)
  809310:	d8801f15 	stw	r2,124(sp)
  809314:	010001c4 	movi	r4,7
  809318:	20818e16 	blt	r4,r2,809954 <___vfprintf_internal_r+0x1638>
  80931c:	42000204 	addi	r8,r8,8
  809320:	003e3106 	br	808be8 <__alt_mem_onchip_mem+0xff800be8>
  809324:	d9403317 	ldw	r5,204(sp)
  809328:	00800044 	movi	r2,1
  80932c:	18c00044 	addi	r3,r3,1
  809330:	1141530e 	bge	r2,r5,809880 <___vfprintf_internal_r+0x1564>
  809334:	dc401f17 	ldw	r17,124(sp)
  809338:	00800044 	movi	r2,1
  80933c:	40800115 	stw	r2,4(r8)
  809340:	8c400044 	addi	r17,r17,1
  809344:	44000015 	stw	r16,0(r8)
  809348:	d8c02015 	stw	r3,128(sp)
  80934c:	dc401f15 	stw	r17,124(sp)
  809350:	008001c4 	movi	r2,7
  809354:	14416b16 	blt	r2,r17,809904 <___vfprintf_internal_r+0x15e8>
  809358:	42000204 	addi	r8,r8,8
  80935c:	d8803717 	ldw	r2,220(sp)
  809360:	d9003417 	ldw	r4,208(sp)
  809364:	8c400044 	addi	r17,r17,1
  809368:	10c7883a 	add	r3,r2,r3
  80936c:	40800115 	stw	r2,4(r8)
  809370:	41000015 	stw	r4,0(r8)
  809374:	d8c02015 	stw	r3,128(sp)
  809378:	dc401f15 	stw	r17,124(sp)
  80937c:	008001c4 	movi	r2,7
  809380:	14416916 	blt	r2,r17,809928 <___vfprintf_internal_r+0x160c>
  809384:	45800204 	addi	r22,r8,8
  809388:	d9003617 	ldw	r4,216(sp)
  80938c:	d9403817 	ldw	r5,224(sp)
  809390:	000d883a 	mov	r6,zero
  809394:	000f883a 	mov	r7,zero
  809398:	d8c03c15 	stw	r3,240(sp)
  80939c:	08120b40 	call	8120b4 <__eqdf2>
  8093a0:	d8c03c17 	ldw	r3,240(sp)
  8093a4:	1000bc26 	beq	r2,zero,809698 <___vfprintf_internal_r+0x137c>
  8093a8:	d9403317 	ldw	r5,204(sp)
  8093ac:	84000044 	addi	r16,r16,1
  8093b0:	8c400044 	addi	r17,r17,1
  8093b4:	28bfffc4 	addi	r2,r5,-1
  8093b8:	1887883a 	add	r3,r3,r2
  8093bc:	b0800115 	stw	r2,4(r22)
  8093c0:	b4000015 	stw	r16,0(r22)
  8093c4:	d8c02015 	stw	r3,128(sp)
  8093c8:	dc401f15 	stw	r17,124(sp)
  8093cc:	008001c4 	movi	r2,7
  8093d0:	14414316 	blt	r2,r17,8098e0 <___vfprintf_internal_r+0x15c4>
  8093d4:	b5800204 	addi	r22,r22,8
  8093d8:	d9003a17 	ldw	r4,232(sp)
  8093dc:	df0022c4 	addi	fp,sp,139
  8093e0:	8c400044 	addi	r17,r17,1
  8093e4:	20c7883a 	add	r3,r4,r3
  8093e8:	b7000015 	stw	fp,0(r22)
  8093ec:	b1000115 	stw	r4,4(r22)
  8093f0:	d8c02015 	stw	r3,128(sp)
  8093f4:	dc401f15 	stw	r17,124(sp)
  8093f8:	008001c4 	movi	r2,7
  8093fc:	14400e16 	blt	r2,r17,809438 <___vfprintf_internal_r+0x111c>
  809400:	b2000204 	addi	r8,r22,8
  809404:	003e3a06 	br	808cf0 <__alt_mem_onchip_mem+0xff800cf0>
  809408:	01002074 	movhi	r4,129
  80940c:	211b5c84 	addi	r4,r4,28018
  809410:	d9002b15 	stw	r4,172(sp)
  809414:	d9002b17 	ldw	r4,172(sp)
  809418:	1c07883a 	add	r3,r3,r16
  80941c:	44000115 	stw	r16,4(r8)
  809420:	41000015 	stw	r4,0(r8)
  809424:	10800044 	addi	r2,r2,1
  809428:	d8c02015 	stw	r3,128(sp)
  80942c:	d8801f15 	stw	r2,124(sp)
  809430:	010001c4 	movi	r4,7
  809434:	20be2d0e 	bge	r4,r2,808cec <__alt_mem_onchip_mem+0xff800cec>
  809438:	d9002c17 	ldw	r4,176(sp)
  80943c:	d9801e04 	addi	r6,sp,120
  809440:	b80b883a 	mov	r5,r23
  809444:	080ef0c0 	call	80ef0c <__sprint_r>
  809448:	103cb61e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  80944c:	d8c02017 	ldw	r3,128(sp)
  809450:	da000404 	addi	r8,sp,16
  809454:	003e2606 	br	808cf0 <__alt_mem_onchip_mem+0xff800cf0>
  809458:	d9002c17 	ldw	r4,176(sp)
  80945c:	d9801e04 	addi	r6,sp,120
  809460:	b80b883a 	mov	r5,r23
  809464:	080ef0c0 	call	80ef0c <__sprint_r>
  809468:	103e5d26 	beq	r2,zero,808de0 <__alt_mem_onchip_mem+0xff800de0>
  80946c:	003cad06 	br	808724 <__alt_mem_onchip_mem+0xff800724>
  809470:	d9002c17 	ldw	r4,176(sp)
  809474:	d9801e04 	addi	r6,sp,120
  809478:	b80b883a 	mov	r5,r23
  80947c:	080ef0c0 	call	80ef0c <__sprint_r>
  809480:	103ca81e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809484:	d8c02017 	ldw	r3,128(sp)
  809488:	da000404 	addi	r8,sp,16
  80948c:	003e0b06 	br	808cbc <__alt_mem_onchip_mem+0xff800cbc>
  809490:	d9002c17 	ldw	r4,176(sp)
  809494:	d9801e04 	addi	r6,sp,120
  809498:	b80b883a 	mov	r5,r23
  80949c:	080ef0c0 	call	80ef0c <__sprint_r>
  8094a0:	103ca01e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  8094a4:	d8c02017 	ldw	r3,128(sp)
  8094a8:	da000404 	addi	r8,sp,16
  8094ac:	003dbd06 	br	808ba4 <__alt_mem_onchip_mem+0xff800ba4>
  8094b0:	d9002c17 	ldw	r4,176(sp)
  8094b4:	d9801e04 	addi	r6,sp,120
  8094b8:	b80b883a 	mov	r5,r23
  8094bc:	080ef0c0 	call	80ef0c <__sprint_r>
  8094c0:	103c981e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  8094c4:	d8c02017 	ldw	r3,128(sp)
  8094c8:	da000404 	addi	r8,sp,16
  8094cc:	003dc306 	br	808bdc <__alt_mem_onchip_mem+0xff800bdc>
  8094d0:	d8802917 	ldw	r2,164(sp)
  8094d4:	d8002785 	stb	zero,158(sp)
  8094d8:	103f0616 	blt	r2,zero,8090f4 <__alt_mem_onchip_mem+0xff8010f4>
  8094dc:	00ffdfc4 	movi	r3,-129
  8094e0:	9d84b03a 	or	r2,r19,r22
  8094e4:	90e4703a 	and	r18,r18,r3
  8094e8:	103c6b26 	beq	r2,zero,808698 <__alt_mem_onchip_mem+0xff800698>
  8094ec:	0039883a 	mov	fp,zero
  8094f0:	003e7406 	br	808ec4 <__alt_mem_onchip_mem+0xff800ec4>
  8094f4:	9080040c 	andi	r2,r18,16
  8094f8:	1001b326 	beq	r2,zero,809bc8 <___vfprintf_internal_r+0x18ac>
  8094fc:	d9002d17 	ldw	r4,180(sp)
  809500:	d9402917 	ldw	r5,164(sp)
  809504:	d8002785 	stb	zero,158(sp)
  809508:	20800104 	addi	r2,r4,4
  80950c:	24c00017 	ldw	r19,0(r4)
  809510:	002d883a 	mov	r22,zero
  809514:	2801b516 	blt	r5,zero,809bec <___vfprintf_internal_r+0x18d0>
  809518:	00ffdfc4 	movi	r3,-129
  80951c:	d8802d15 	stw	r2,180(sp)
  809520:	90e4703a 	and	r18,r18,r3
  809524:	983d2726 	beq	r19,zero,8089c4 <__alt_mem_onchip_mem+0xff8009c4>
  809528:	0039883a 	mov	fp,zero
  80952c:	003d2a06 	br	8089d8 <__alt_mem_onchip_mem+0xff8009d8>
  809530:	dc402617 	ldw	r17,152(sp)
  809534:	0441d30e 	bge	zero,r17,809c84 <___vfprintf_internal_r+0x1968>
  809538:	dc403217 	ldw	r17,200(sp)
  80953c:	d8803317 	ldw	r2,204(sp)
  809540:	1440010e 	bge	r2,r17,809548 <___vfprintf_internal_r+0x122c>
  809544:	1023883a 	mov	r17,r2
  809548:	04400a0e 	bge	zero,r17,809574 <___vfprintf_internal_r+0x1258>
  80954c:	d8801f17 	ldw	r2,124(sp)
  809550:	1c47883a 	add	r3,r3,r17
  809554:	44000015 	stw	r16,0(r8)
  809558:	10800044 	addi	r2,r2,1
  80955c:	44400115 	stw	r17,4(r8)
  809560:	d8c02015 	stw	r3,128(sp)
  809564:	d8801f15 	stw	r2,124(sp)
  809568:	010001c4 	movi	r4,7
  80956c:	20826516 	blt	r4,r2,809f04 <___vfprintf_internal_r+0x1be8>
  809570:	42000204 	addi	r8,r8,8
  809574:	88026116 	blt	r17,zero,809efc <___vfprintf_internal_r+0x1be0>
  809578:	d9003217 	ldw	r4,200(sp)
  80957c:	2463c83a 	sub	r17,r4,r17
  809580:	04407b0e 	bge	zero,r17,809770 <___vfprintf_internal_r+0x1454>
  809584:	05800404 	movi	r22,16
  809588:	d8801f17 	ldw	r2,124(sp)
  80958c:	b4419d0e 	bge	r22,r17,809c04 <___vfprintf_internal_r+0x18e8>
  809590:	01002074 	movhi	r4,129
  809594:	211b5c84 	addi	r4,r4,28018
  809598:	d9002b15 	stw	r4,172(sp)
  80959c:	070001c4 	movi	fp,7
  8095a0:	dcc02c17 	ldw	r19,176(sp)
  8095a4:	00000306 	br	8095b4 <___vfprintf_internal_r+0x1298>
  8095a8:	42000204 	addi	r8,r8,8
  8095ac:	8c7ffc04 	addi	r17,r17,-16
  8095b0:	b441970e 	bge	r22,r17,809c10 <___vfprintf_internal_r+0x18f4>
  8095b4:	18c00404 	addi	r3,r3,16
  8095b8:	10800044 	addi	r2,r2,1
  8095bc:	45000015 	stw	r20,0(r8)
  8095c0:	45800115 	stw	r22,4(r8)
  8095c4:	d8c02015 	stw	r3,128(sp)
  8095c8:	d8801f15 	stw	r2,124(sp)
  8095cc:	e0bff60e 	bge	fp,r2,8095a8 <__alt_mem_onchip_mem+0xff8015a8>
  8095d0:	d9801e04 	addi	r6,sp,120
  8095d4:	b80b883a 	mov	r5,r23
  8095d8:	9809883a 	mov	r4,r19
  8095dc:	080ef0c0 	call	80ef0c <__sprint_r>
  8095e0:	103c501e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  8095e4:	d8c02017 	ldw	r3,128(sp)
  8095e8:	d8801f17 	ldw	r2,124(sp)
  8095ec:	da000404 	addi	r8,sp,16
  8095f0:	003fee06 	br	8095ac <__alt_mem_onchip_mem+0xff8015ac>
  8095f4:	d9002c17 	ldw	r4,176(sp)
  8095f8:	d9801e04 	addi	r6,sp,120
  8095fc:	b80b883a 	mov	r5,r23
  809600:	080ef0c0 	call	80ef0c <__sprint_r>
  809604:	103c471e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809608:	d8c02017 	ldw	r3,128(sp)
  80960c:	df002787 	ldb	fp,158(sp)
  809610:	da000404 	addi	r8,sp,16
  809614:	003d5606 	br	808b70 <__alt_mem_onchip_mem+0xff800b70>
  809618:	9080040c 	andi	r2,r18,16
  80961c:	10016126 	beq	r2,zero,809ba4 <___vfprintf_internal_r+0x1888>
  809620:	d8802d17 	ldw	r2,180(sp)
  809624:	14c00017 	ldw	r19,0(r2)
  809628:	10800104 	addi	r2,r2,4
  80962c:	d8802d15 	stw	r2,180(sp)
  809630:	982dd7fa 	srai	r22,r19,31
  809634:	b005883a 	mov	r2,r22
  809638:	003c8206 	br	808844 <__alt_mem_onchip_mem+0xff800844>
  80963c:	9080040c 	andi	r2,r18,16
  809640:	10003526 	beq	r2,zero,809718 <___vfprintf_internal_r+0x13fc>
  809644:	d9402d17 	ldw	r5,180(sp)
  809648:	d8c02917 	ldw	r3,164(sp)
  80964c:	d8002785 	stb	zero,158(sp)
  809650:	28800104 	addi	r2,r5,4
  809654:	2cc00017 	ldw	r19,0(r5)
  809658:	002d883a 	mov	r22,zero
  80965c:	18003716 	blt	r3,zero,80973c <___vfprintf_internal_r+0x1420>
  809660:	00ffdfc4 	movi	r3,-129
  809664:	d8802d15 	stw	r2,180(sp)
  809668:	90e4703a 	and	r18,r18,r3
  80966c:	0039883a 	mov	fp,zero
  809670:	983df326 	beq	r19,zero,808e40 <__alt_mem_onchip_mem+0xff800e40>
  809674:	00800244 	movi	r2,9
  809678:	14fc7b36 	bltu	r2,r19,808868 <__alt_mem_onchip_mem+0xff800868>
  80967c:	d8c02817 	ldw	r3,160(sp)
  809680:	dc001dc4 	addi	r16,sp,119
  809684:	9cc00c04 	addi	r19,r19,48
  809688:	1c07c83a 	sub	r3,r3,r16
  80968c:	dcc01dc5 	stb	r19,119(sp)
  809690:	d8c02e15 	stw	r3,184(sp)
  809694:	003ce806 	br	808a38 <__alt_mem_onchip_mem+0xff800a38>
  809698:	d8803317 	ldw	r2,204(sp)
  80969c:	143fffc4 	addi	r16,r2,-1
  8096a0:	043f4d0e 	bge	zero,r16,8093d8 <__alt_mem_onchip_mem+0xff8013d8>
  8096a4:	07000404 	movi	fp,16
  8096a8:	e400810e 	bge	fp,r16,8098b0 <___vfprintf_internal_r+0x1594>
  8096ac:	01402074 	movhi	r5,129
  8096b0:	295b5c84 	addi	r5,r5,28018
  8096b4:	d9402b15 	stw	r5,172(sp)
  8096b8:	01c001c4 	movi	r7,7
  8096bc:	dcc02c17 	ldw	r19,176(sp)
  8096c0:	00000306 	br	8096d0 <___vfprintf_internal_r+0x13b4>
  8096c4:	b5800204 	addi	r22,r22,8
  8096c8:	843ffc04 	addi	r16,r16,-16
  8096cc:	e4007b0e 	bge	fp,r16,8098bc <___vfprintf_internal_r+0x15a0>
  8096d0:	18c00404 	addi	r3,r3,16
  8096d4:	8c400044 	addi	r17,r17,1
  8096d8:	b5000015 	stw	r20,0(r22)
  8096dc:	b7000115 	stw	fp,4(r22)
  8096e0:	d8c02015 	stw	r3,128(sp)
  8096e4:	dc401f15 	stw	r17,124(sp)
  8096e8:	3c7ff60e 	bge	r7,r17,8096c4 <__alt_mem_onchip_mem+0xff8016c4>
  8096ec:	d9801e04 	addi	r6,sp,120
  8096f0:	b80b883a 	mov	r5,r23
  8096f4:	9809883a 	mov	r4,r19
  8096f8:	d9c03c15 	stw	r7,240(sp)
  8096fc:	080ef0c0 	call	80ef0c <__sprint_r>
  809700:	d9c03c17 	ldw	r7,240(sp)
  809704:	103c071e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809708:	d8c02017 	ldw	r3,128(sp)
  80970c:	dc401f17 	ldw	r17,124(sp)
  809710:	dd800404 	addi	r22,sp,16
  809714:	003fec06 	br	8096c8 <__alt_mem_onchip_mem+0xff8016c8>
  809718:	9080100c 	andi	r2,r18,64
  80971c:	d8002785 	stb	zero,158(sp)
  809720:	10010e26 	beq	r2,zero,809b5c <___vfprintf_internal_r+0x1840>
  809724:	d9002d17 	ldw	r4,180(sp)
  809728:	d9402917 	ldw	r5,164(sp)
  80972c:	002d883a 	mov	r22,zero
  809730:	20800104 	addi	r2,r4,4
  809734:	24c0000b 	ldhu	r19,0(r4)
  809738:	283fc90e 	bge	r5,zero,809660 <__alt_mem_onchip_mem+0xff801660>
  80973c:	d8802d15 	stw	r2,180(sp)
  809740:	0039883a 	mov	fp,zero
  809744:	9d84b03a 	or	r2,r19,r22
  809748:	103c461e 	bne	r2,zero,808864 <__alt_mem_onchip_mem+0xff800864>
  80974c:	00800044 	movi	r2,1
  809750:	003e6c06 	br	809104 <__alt_mem_onchip_mem+0xff801104>
  809754:	d9002c17 	ldw	r4,176(sp)
  809758:	d9801e04 	addi	r6,sp,120
  80975c:	b80b883a 	mov	r5,r23
  809760:	080ef0c0 	call	80ef0c <__sprint_r>
  809764:	103bef1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809768:	d8c02017 	ldw	r3,128(sp)
  80976c:	da000404 	addi	r8,sp,16
  809770:	d9003217 	ldw	r4,200(sp)
  809774:	d8802617 	ldw	r2,152(sp)
  809778:	d9403317 	ldw	r5,204(sp)
  80977c:	8123883a 	add	r17,r16,r4
  809780:	11400216 	blt	r2,r5,80978c <___vfprintf_internal_r+0x1470>
  809784:	9100004c 	andi	r4,r18,1
  809788:	20000d26 	beq	r4,zero,8097c0 <___vfprintf_internal_r+0x14a4>
  80978c:	d9003717 	ldw	r4,220(sp)
  809790:	d9403417 	ldw	r5,208(sp)
  809794:	1907883a 	add	r3,r3,r4
  809798:	d9001f17 	ldw	r4,124(sp)
  80979c:	41400015 	stw	r5,0(r8)
  8097a0:	d9403717 	ldw	r5,220(sp)
  8097a4:	21000044 	addi	r4,r4,1
  8097a8:	d8c02015 	stw	r3,128(sp)
  8097ac:	41400115 	stw	r5,4(r8)
  8097b0:	d9001f15 	stw	r4,124(sp)
  8097b4:	014001c4 	movi	r5,7
  8097b8:	2901e816 	blt	r5,r4,809f5c <___vfprintf_internal_r+0x1c40>
  8097bc:	42000204 	addi	r8,r8,8
  8097c0:	d9003317 	ldw	r4,204(sp)
  8097c4:	8121883a 	add	r16,r16,r4
  8097c8:	2085c83a 	sub	r2,r4,r2
  8097cc:	8461c83a 	sub	r16,r16,r17
  8097d0:	1400010e 	bge	r2,r16,8097d8 <___vfprintf_internal_r+0x14bc>
  8097d4:	1021883a 	mov	r16,r2
  8097d8:	04000a0e 	bge	zero,r16,809804 <___vfprintf_internal_r+0x14e8>
  8097dc:	d9001f17 	ldw	r4,124(sp)
  8097e0:	1c07883a 	add	r3,r3,r16
  8097e4:	44400015 	stw	r17,0(r8)
  8097e8:	21000044 	addi	r4,r4,1
  8097ec:	44000115 	stw	r16,4(r8)
  8097f0:	d8c02015 	stw	r3,128(sp)
  8097f4:	d9001f15 	stw	r4,124(sp)
  8097f8:	014001c4 	movi	r5,7
  8097fc:	2901fb16 	blt	r5,r4,809fec <___vfprintf_internal_r+0x1cd0>
  809800:	42000204 	addi	r8,r8,8
  809804:	8001f716 	blt	r16,zero,809fe4 <___vfprintf_internal_r+0x1cc8>
  809808:	1421c83a 	sub	r16,r2,r16
  80980c:	043d380e 	bge	zero,r16,808cf0 <__alt_mem_onchip_mem+0xff800cf0>
  809810:	04400404 	movi	r17,16
  809814:	d8801f17 	ldw	r2,124(sp)
  809818:	8c3efb0e 	bge	r17,r16,809408 <__alt_mem_onchip_mem+0xff801408>
  80981c:	01402074 	movhi	r5,129
  809820:	295b5c84 	addi	r5,r5,28018
  809824:	d9402b15 	stw	r5,172(sp)
  809828:	058001c4 	movi	r22,7
  80982c:	dcc02c17 	ldw	r19,176(sp)
  809830:	00000306 	br	809840 <___vfprintf_internal_r+0x1524>
  809834:	42000204 	addi	r8,r8,8
  809838:	843ffc04 	addi	r16,r16,-16
  80983c:	8c3ef50e 	bge	r17,r16,809414 <__alt_mem_onchip_mem+0xff801414>
  809840:	18c00404 	addi	r3,r3,16
  809844:	10800044 	addi	r2,r2,1
  809848:	45000015 	stw	r20,0(r8)
  80984c:	44400115 	stw	r17,4(r8)
  809850:	d8c02015 	stw	r3,128(sp)
  809854:	d8801f15 	stw	r2,124(sp)
  809858:	b0bff60e 	bge	r22,r2,809834 <__alt_mem_onchip_mem+0xff801834>
  80985c:	d9801e04 	addi	r6,sp,120
  809860:	b80b883a 	mov	r5,r23
  809864:	9809883a 	mov	r4,r19
  809868:	080ef0c0 	call	80ef0c <__sprint_r>
  80986c:	103bad1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809870:	d8c02017 	ldw	r3,128(sp)
  809874:	d8801f17 	ldw	r2,124(sp)
  809878:	da000404 	addi	r8,sp,16
  80987c:	003fee06 	br	809838 <__alt_mem_onchip_mem+0xff801838>
  809880:	9088703a 	and	r4,r18,r2
  809884:	203eab1e 	bne	r4,zero,809334 <__alt_mem_onchip_mem+0xff801334>
  809888:	dc401f17 	ldw	r17,124(sp)
  80988c:	40800115 	stw	r2,4(r8)
  809890:	44000015 	stw	r16,0(r8)
  809894:	8c400044 	addi	r17,r17,1
  809898:	d8c02015 	stw	r3,128(sp)
  80989c:	dc401f15 	stw	r17,124(sp)
  8098a0:	008001c4 	movi	r2,7
  8098a4:	14400e16 	blt	r2,r17,8098e0 <___vfprintf_internal_r+0x15c4>
  8098a8:	45800204 	addi	r22,r8,8
  8098ac:	003eca06 	br	8093d8 <__alt_mem_onchip_mem+0xff8013d8>
  8098b0:	01002074 	movhi	r4,129
  8098b4:	211b5c84 	addi	r4,r4,28018
  8098b8:	d9002b15 	stw	r4,172(sp)
  8098bc:	d8802b17 	ldw	r2,172(sp)
  8098c0:	1c07883a 	add	r3,r3,r16
  8098c4:	8c400044 	addi	r17,r17,1
  8098c8:	b0800015 	stw	r2,0(r22)
  8098cc:	b4000115 	stw	r16,4(r22)
  8098d0:	d8c02015 	stw	r3,128(sp)
  8098d4:	dc401f15 	stw	r17,124(sp)
  8098d8:	008001c4 	movi	r2,7
  8098dc:	147ebd0e 	bge	r2,r17,8093d4 <__alt_mem_onchip_mem+0xff8013d4>
  8098e0:	d9002c17 	ldw	r4,176(sp)
  8098e4:	d9801e04 	addi	r6,sp,120
  8098e8:	b80b883a 	mov	r5,r23
  8098ec:	080ef0c0 	call	80ef0c <__sprint_r>
  8098f0:	103b8c1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  8098f4:	d8c02017 	ldw	r3,128(sp)
  8098f8:	dc401f17 	ldw	r17,124(sp)
  8098fc:	dd800404 	addi	r22,sp,16
  809900:	003eb506 	br	8093d8 <__alt_mem_onchip_mem+0xff8013d8>
  809904:	d9002c17 	ldw	r4,176(sp)
  809908:	d9801e04 	addi	r6,sp,120
  80990c:	b80b883a 	mov	r5,r23
  809910:	080ef0c0 	call	80ef0c <__sprint_r>
  809914:	103b831e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809918:	d8c02017 	ldw	r3,128(sp)
  80991c:	dc401f17 	ldw	r17,124(sp)
  809920:	da000404 	addi	r8,sp,16
  809924:	003e8d06 	br	80935c <__alt_mem_onchip_mem+0xff80135c>
  809928:	d9002c17 	ldw	r4,176(sp)
  80992c:	d9801e04 	addi	r6,sp,120
  809930:	b80b883a 	mov	r5,r23
  809934:	080ef0c0 	call	80ef0c <__sprint_r>
  809938:	103b7a1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  80993c:	d8c02017 	ldw	r3,128(sp)
  809940:	dc401f17 	ldw	r17,124(sp)
  809944:	dd800404 	addi	r22,sp,16
  809948:	003e8f06 	br	809388 <__alt_mem_onchip_mem+0xff801388>
  80994c:	0027883a 	mov	r19,zero
  809950:	003f4a06 	br	80967c <__alt_mem_onchip_mem+0xff80167c>
  809954:	d9002c17 	ldw	r4,176(sp)
  809958:	d9801e04 	addi	r6,sp,120
  80995c:	b80b883a 	mov	r5,r23
  809960:	080ef0c0 	call	80ef0c <__sprint_r>
  809964:	103b6f1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809968:	d8c02017 	ldw	r3,128(sp)
  80996c:	da000404 	addi	r8,sp,16
  809970:	003c9d06 	br	808be8 <__alt_mem_onchip_mem+0xff800be8>
  809974:	04e7c83a 	sub	r19,zero,r19
  809978:	9804c03a 	cmpne	r2,r19,zero
  80997c:	05adc83a 	sub	r22,zero,r22
  809980:	b0adc83a 	sub	r22,r22,r2
  809984:	d8802917 	ldw	r2,164(sp)
  809988:	07000b44 	movi	fp,45
  80998c:	df002785 	stb	fp,158(sp)
  809990:	10017b16 	blt	r2,zero,809f80 <___vfprintf_internal_r+0x1c64>
  809994:	00bfdfc4 	movi	r2,-129
  809998:	90a4703a 	and	r18,r18,r2
  80999c:	003bb106 	br	808864 <__alt_mem_onchip_mem+0xff800864>
  8099a0:	d9003617 	ldw	r4,216(sp)
  8099a4:	d9403817 	ldw	r5,224(sp)
  8099a8:	da003d15 	stw	r8,244(sp)
  8099ac:	080ecc00 	call	80ecc0 <__fpclassifyd>
  8099b0:	da003d17 	ldw	r8,244(sp)
  8099b4:	1000f026 	beq	r2,zero,809d78 <___vfprintf_internal_r+0x1a5c>
  8099b8:	d9002917 	ldw	r4,164(sp)
  8099bc:	05bff7c4 	movi	r22,-33
  8099c0:	00bfffc4 	movi	r2,-1
  8099c4:	8dac703a 	and	r22,r17,r22
  8099c8:	20820026 	beq	r4,r2,80a1cc <___vfprintf_internal_r+0x1eb0>
  8099cc:	008011c4 	movi	r2,71
  8099d0:	b081f726 	beq	r22,r2,80a1b0 <___vfprintf_internal_r+0x1e94>
  8099d4:	d9003817 	ldw	r4,224(sp)
  8099d8:	90c04014 	ori	r3,r18,256
  8099dc:	d8c02b15 	stw	r3,172(sp)
  8099e0:	20021516 	blt	r4,zero,80a238 <___vfprintf_internal_r+0x1f1c>
  8099e4:	dcc03817 	ldw	r19,224(sp)
  8099e8:	d8002a05 	stb	zero,168(sp)
  8099ec:	00801984 	movi	r2,102
  8099f0:	8881f926 	beq	r17,r2,80a1d8 <___vfprintf_internal_r+0x1ebc>
  8099f4:	00801184 	movi	r2,70
  8099f8:	88821c26 	beq	r17,r2,80a26c <___vfprintf_internal_r+0x1f50>
  8099fc:	00801144 	movi	r2,69
  809a00:	b081ef26 	beq	r22,r2,80a1c0 <___vfprintf_internal_r+0x1ea4>
  809a04:	d8c02917 	ldw	r3,164(sp)
  809a08:	d8802104 	addi	r2,sp,132
  809a0c:	d8800315 	stw	r2,12(sp)
  809a10:	d9403617 	ldw	r5,216(sp)
  809a14:	d8802504 	addi	r2,sp,148
  809a18:	d9002c17 	ldw	r4,176(sp)
  809a1c:	d8800215 	stw	r2,8(sp)
  809a20:	d8802604 	addi	r2,sp,152
  809a24:	d8c00015 	stw	r3,0(sp)
  809a28:	d8800115 	stw	r2,4(sp)
  809a2c:	01c00084 	movi	r7,2
  809a30:	980d883a 	mov	r6,r19
  809a34:	d8c03c15 	stw	r3,240(sp)
  809a38:	da003d15 	stw	r8,244(sp)
  809a3c:	080a9f40 	call	80a9f4 <_dtoa_r>
  809a40:	1021883a 	mov	r16,r2
  809a44:	008019c4 	movi	r2,103
  809a48:	d8c03c17 	ldw	r3,240(sp)
  809a4c:	da003d17 	ldw	r8,244(sp)
  809a50:	88817126 	beq	r17,r2,80a018 <___vfprintf_internal_r+0x1cfc>
  809a54:	008011c4 	movi	r2,71
  809a58:	88829226 	beq	r17,r2,80a4a4 <___vfprintf_internal_r+0x2188>
  809a5c:	80f9883a 	add	fp,r16,r3
  809a60:	d9003617 	ldw	r4,216(sp)
  809a64:	000d883a 	mov	r6,zero
  809a68:	000f883a 	mov	r7,zero
  809a6c:	980b883a 	mov	r5,r19
  809a70:	da003d15 	stw	r8,244(sp)
  809a74:	08120b40 	call	8120b4 <__eqdf2>
  809a78:	da003d17 	ldw	r8,244(sp)
  809a7c:	10018d26 	beq	r2,zero,80a0b4 <___vfprintf_internal_r+0x1d98>
  809a80:	d8802117 	ldw	r2,132(sp)
  809a84:	1700062e 	bgeu	r2,fp,809aa0 <___vfprintf_internal_r+0x1784>
  809a88:	01000c04 	movi	r4,48
  809a8c:	10c00044 	addi	r3,r2,1
  809a90:	d8c02115 	stw	r3,132(sp)
  809a94:	11000005 	stb	r4,0(r2)
  809a98:	d8802117 	ldw	r2,132(sp)
  809a9c:	173ffb36 	bltu	r2,fp,809a8c <__alt_mem_onchip_mem+0xff801a8c>
  809aa0:	1405c83a 	sub	r2,r2,r16
  809aa4:	d8803315 	stw	r2,204(sp)
  809aa8:	008011c4 	movi	r2,71
  809aac:	b0817626 	beq	r22,r2,80a088 <___vfprintf_internal_r+0x1d6c>
  809ab0:	00801944 	movi	r2,101
  809ab4:	1442810e 	bge	r2,r17,80a4bc <___vfprintf_internal_r+0x21a0>
  809ab8:	d8c02617 	ldw	r3,152(sp)
  809abc:	00801984 	movi	r2,102
  809ac0:	d8c03215 	stw	r3,200(sp)
  809ac4:	8881fe26 	beq	r17,r2,80a2c0 <___vfprintf_internal_r+0x1fa4>
  809ac8:	d8c03217 	ldw	r3,200(sp)
  809acc:	d9003317 	ldw	r4,204(sp)
  809ad0:	1901dd16 	blt	r3,r4,80a248 <___vfprintf_internal_r+0x1f2c>
  809ad4:	9480004c 	andi	r18,r18,1
  809ad8:	90022b1e 	bne	r18,zero,80a388 <___vfprintf_internal_r+0x206c>
  809adc:	1805883a 	mov	r2,r3
  809ae0:	18028016 	blt	r3,zero,80a4e4 <___vfprintf_internal_r+0x21c8>
  809ae4:	d8c03217 	ldw	r3,200(sp)
  809ae8:	044019c4 	movi	r17,103
  809aec:	d8c02e15 	stw	r3,184(sp)
  809af0:	df002a07 	ldb	fp,168(sp)
  809af4:	e001531e 	bne	fp,zero,80a044 <___vfprintf_internal_r+0x1d28>
  809af8:	df002783 	ldbu	fp,158(sp)
  809afc:	d8802a15 	stw	r2,168(sp)
  809b00:	dc802b17 	ldw	r18,172(sp)
  809b04:	d8002915 	stw	zero,164(sp)
  809b08:	003bd106 	br	808a50 <__alt_mem_onchip_mem+0xff800a50>
  809b0c:	d8802d17 	ldw	r2,180(sp)
  809b10:	d8c02d17 	ldw	r3,180(sp)
  809b14:	d9002d17 	ldw	r4,180(sp)
  809b18:	10800017 	ldw	r2,0(r2)
  809b1c:	18c00117 	ldw	r3,4(r3)
  809b20:	21000204 	addi	r4,r4,8
  809b24:	d8803615 	stw	r2,216(sp)
  809b28:	d8c03815 	stw	r3,224(sp)
  809b2c:	d9002d15 	stw	r4,180(sp)
  809b30:	003b7506 	br	808908 <__alt_mem_onchip_mem+0xff800908>
  809b34:	ac400007 	ldb	r17,0(r21)
  809b38:	003a5906 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  809b3c:	9080100c 	andi	r2,r18,64
  809b40:	1000a826 	beq	r2,zero,809de4 <___vfprintf_internal_r+0x1ac8>
  809b44:	d9002d17 	ldw	r4,180(sp)
  809b48:	002d883a 	mov	r22,zero
  809b4c:	24c0000b 	ldhu	r19,0(r4)
  809b50:	21000104 	addi	r4,r4,4
  809b54:	d9002d15 	stw	r4,180(sp)
  809b58:	003ccb06 	br	808e88 <__alt_mem_onchip_mem+0xff800e88>
  809b5c:	d8c02d17 	ldw	r3,180(sp)
  809b60:	d9002917 	ldw	r4,164(sp)
  809b64:	002d883a 	mov	r22,zero
  809b68:	18800104 	addi	r2,r3,4
  809b6c:	1cc00017 	ldw	r19,0(r3)
  809b70:	203ebb0e 	bge	r4,zero,809660 <__alt_mem_onchip_mem+0xff801660>
  809b74:	003ef106 	br	80973c <__alt_mem_onchip_mem+0xff80173c>
  809b78:	9080040c 	andi	r2,r18,16
  809b7c:	1000921e 	bne	r2,zero,809dc8 <___vfprintf_internal_r+0x1aac>
  809b80:	9480100c 	andi	r18,r18,64
  809b84:	90013926 	beq	r18,zero,80a06c <___vfprintf_internal_r+0x1d50>
  809b88:	d9002d17 	ldw	r4,180(sp)
  809b8c:	d9402f17 	ldw	r5,188(sp)
  809b90:	20800017 	ldw	r2,0(r4)
  809b94:	21000104 	addi	r4,r4,4
  809b98:	d9002d15 	stw	r4,180(sp)
  809b9c:	1140000d 	sth	r5,0(r2)
  809ba0:	003a1606 	br	8083fc <__alt_mem_onchip_mem+0xff8003fc>
  809ba4:	9080100c 	andi	r2,r18,64
  809ba8:	10008026 	beq	r2,zero,809dac <___vfprintf_internal_r+0x1a90>
  809bac:	d8c02d17 	ldw	r3,180(sp)
  809bb0:	1cc0000f 	ldh	r19,0(r3)
  809bb4:	18c00104 	addi	r3,r3,4
  809bb8:	d8c02d15 	stw	r3,180(sp)
  809bbc:	982dd7fa 	srai	r22,r19,31
  809bc0:	b005883a 	mov	r2,r22
  809bc4:	003b1f06 	br	808844 <__alt_mem_onchip_mem+0xff800844>
  809bc8:	9080100c 	andi	r2,r18,64
  809bcc:	d8002785 	stb	zero,158(sp)
  809bd0:	10008a1e 	bne	r2,zero,809dfc <___vfprintf_internal_r+0x1ae0>
  809bd4:	d9402d17 	ldw	r5,180(sp)
  809bd8:	d8c02917 	ldw	r3,164(sp)
  809bdc:	002d883a 	mov	r22,zero
  809be0:	28800104 	addi	r2,r5,4
  809be4:	2cc00017 	ldw	r19,0(r5)
  809be8:	183e4b0e 	bge	r3,zero,809518 <__alt_mem_onchip_mem+0xff801518>
  809bec:	9d86b03a 	or	r3,r19,r22
  809bf0:	d8802d15 	stw	r2,180(sp)
  809bf4:	183e4c1e 	bne	r3,zero,809528 <__alt_mem_onchip_mem+0xff801528>
  809bf8:	0039883a 	mov	fp,zero
  809bfc:	0005883a 	mov	r2,zero
  809c00:	003d4006 	br	809104 <__alt_mem_onchip_mem+0xff801104>
  809c04:	01402074 	movhi	r5,129
  809c08:	295b5c84 	addi	r5,r5,28018
  809c0c:	d9402b15 	stw	r5,172(sp)
  809c10:	d9402b17 	ldw	r5,172(sp)
  809c14:	1c47883a 	add	r3,r3,r17
  809c18:	10800044 	addi	r2,r2,1
  809c1c:	41400015 	stw	r5,0(r8)
  809c20:	44400115 	stw	r17,4(r8)
  809c24:	d8c02015 	stw	r3,128(sp)
  809c28:	d8801f15 	stw	r2,124(sp)
  809c2c:	010001c4 	movi	r4,7
  809c30:	20bec816 	blt	r4,r2,809754 <__alt_mem_onchip_mem+0xff801754>
  809c34:	42000204 	addi	r8,r8,8
  809c38:	003ecd06 	br	809770 <__alt_mem_onchip_mem+0xff801770>
  809c3c:	d9002917 	ldw	r4,164(sp)
  809c40:	d8002785 	stb	zero,158(sp)
  809c44:	203d2d16 	blt	r4,zero,8090fc <__alt_mem_onchip_mem+0xff8010fc>
  809c48:	00bfdfc4 	movi	r2,-129
  809c4c:	90a4703a 	and	r18,r18,r2
  809c50:	003a9106 	br	808698 <__alt_mem_onchip_mem+0xff800698>
  809c54:	01002074 	movhi	r4,129
  809c58:	211b5c84 	addi	r4,r4,28018
  809c5c:	d9002b15 	stw	r4,172(sp)
  809c60:	003c0c06 	br	808c94 <__alt_mem_onchip_mem+0xff800c94>
  809c64:	d9002c17 	ldw	r4,176(sp)
  809c68:	d9801e04 	addi	r6,sp,120
  809c6c:	b80b883a 	mov	r5,r23
  809c70:	080ef0c0 	call	80ef0c <__sprint_r>
  809c74:	103aab1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809c78:	d8c02017 	ldw	r3,128(sp)
  809c7c:	da000404 	addi	r8,sp,16
  809c80:	003d4106 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  809c84:	d8801f17 	ldw	r2,124(sp)
  809c88:	01402074 	movhi	r5,129
  809c8c:	01000044 	movi	r4,1
  809c90:	18c00044 	addi	r3,r3,1
  809c94:	10800044 	addi	r2,r2,1
  809c98:	295b5c04 	addi	r5,r5,28016
  809c9c:	41000115 	stw	r4,4(r8)
  809ca0:	41400015 	stw	r5,0(r8)
  809ca4:	d8c02015 	stw	r3,128(sp)
  809ca8:	d8801f15 	stw	r2,124(sp)
  809cac:	010001c4 	movi	r4,7
  809cb0:	20805c16 	blt	r4,r2,809e24 <___vfprintf_internal_r+0x1b08>
  809cb4:	42000204 	addi	r8,r8,8
  809cb8:	8800041e 	bne	r17,zero,809ccc <___vfprintf_internal_r+0x19b0>
  809cbc:	d8803317 	ldw	r2,204(sp)
  809cc0:	1000021e 	bne	r2,zero,809ccc <___vfprintf_internal_r+0x19b0>
  809cc4:	9080004c 	andi	r2,r18,1
  809cc8:	103c0926 	beq	r2,zero,808cf0 <__alt_mem_onchip_mem+0xff800cf0>
  809ccc:	d9003717 	ldw	r4,220(sp)
  809cd0:	d8801f17 	ldw	r2,124(sp)
  809cd4:	d9403417 	ldw	r5,208(sp)
  809cd8:	20c7883a 	add	r3,r4,r3
  809cdc:	10800044 	addi	r2,r2,1
  809ce0:	41000115 	stw	r4,4(r8)
  809ce4:	41400015 	stw	r5,0(r8)
  809ce8:	d8c02015 	stw	r3,128(sp)
  809cec:	d8801f15 	stw	r2,124(sp)
  809cf0:	010001c4 	movi	r4,7
  809cf4:	20812116 	blt	r4,r2,80a17c <___vfprintf_internal_r+0x1e60>
  809cf8:	42000204 	addi	r8,r8,8
  809cfc:	0463c83a 	sub	r17,zero,r17
  809d00:	0440730e 	bge	zero,r17,809ed0 <___vfprintf_internal_r+0x1bb4>
  809d04:	05800404 	movi	r22,16
  809d08:	b440860e 	bge	r22,r17,809f24 <___vfprintf_internal_r+0x1c08>
  809d0c:	01402074 	movhi	r5,129
  809d10:	295b5c84 	addi	r5,r5,28018
  809d14:	d9402b15 	stw	r5,172(sp)
  809d18:	070001c4 	movi	fp,7
  809d1c:	dcc02c17 	ldw	r19,176(sp)
  809d20:	00000306 	br	809d30 <___vfprintf_internal_r+0x1a14>
  809d24:	42000204 	addi	r8,r8,8
  809d28:	8c7ffc04 	addi	r17,r17,-16
  809d2c:	b440800e 	bge	r22,r17,809f30 <___vfprintf_internal_r+0x1c14>
  809d30:	18c00404 	addi	r3,r3,16
  809d34:	10800044 	addi	r2,r2,1
  809d38:	45000015 	stw	r20,0(r8)
  809d3c:	45800115 	stw	r22,4(r8)
  809d40:	d8c02015 	stw	r3,128(sp)
  809d44:	d8801f15 	stw	r2,124(sp)
  809d48:	e0bff60e 	bge	fp,r2,809d24 <__alt_mem_onchip_mem+0xff801d24>
  809d4c:	d9801e04 	addi	r6,sp,120
  809d50:	b80b883a 	mov	r5,r23
  809d54:	9809883a 	mov	r4,r19
  809d58:	080ef0c0 	call	80ef0c <__sprint_r>
  809d5c:	103a711e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809d60:	d8c02017 	ldw	r3,128(sp)
  809d64:	d8801f17 	ldw	r2,124(sp)
  809d68:	da000404 	addi	r8,sp,16
  809d6c:	003fee06 	br	809d28 <__alt_mem_onchip_mem+0xff801d28>
  809d70:	00bfffc4 	movi	r2,-1
  809d74:	003a6f06 	br	808734 <__alt_mem_onchip_mem+0xff800734>
  809d78:	008011c4 	movi	r2,71
  809d7c:	1440b816 	blt	r2,r17,80a060 <___vfprintf_internal_r+0x1d44>
  809d80:	04002074 	movhi	r16,129
  809d84:	841b4e04 	addi	r16,r16,27960
  809d88:	00c000c4 	movi	r3,3
  809d8c:	00bfdfc4 	movi	r2,-129
  809d90:	d8c02a15 	stw	r3,168(sp)
  809d94:	90a4703a 	and	r18,r18,r2
  809d98:	df002783 	ldbu	fp,158(sp)
  809d9c:	d8c02e15 	stw	r3,184(sp)
  809da0:	d8002915 	stw	zero,164(sp)
  809da4:	d8003215 	stw	zero,200(sp)
  809da8:	003b2906 	br	808a50 <__alt_mem_onchip_mem+0xff800a50>
  809dac:	d9002d17 	ldw	r4,180(sp)
  809db0:	24c00017 	ldw	r19,0(r4)
  809db4:	21000104 	addi	r4,r4,4
  809db8:	d9002d15 	stw	r4,180(sp)
  809dbc:	982dd7fa 	srai	r22,r19,31
  809dc0:	b005883a 	mov	r2,r22
  809dc4:	003a9f06 	br	808844 <__alt_mem_onchip_mem+0xff800844>
  809dc8:	d9402d17 	ldw	r5,180(sp)
  809dcc:	d8c02f17 	ldw	r3,188(sp)
  809dd0:	28800017 	ldw	r2,0(r5)
  809dd4:	29400104 	addi	r5,r5,4
  809dd8:	d9402d15 	stw	r5,180(sp)
  809ddc:	10c00015 	stw	r3,0(r2)
  809de0:	00398606 	br	8083fc <__alt_mem_onchip_mem+0xff8003fc>
  809de4:	d9402d17 	ldw	r5,180(sp)
  809de8:	002d883a 	mov	r22,zero
  809dec:	2cc00017 	ldw	r19,0(r5)
  809df0:	29400104 	addi	r5,r5,4
  809df4:	d9402d15 	stw	r5,180(sp)
  809df8:	003c2306 	br	808e88 <__alt_mem_onchip_mem+0xff800e88>
  809dfc:	d8c02d17 	ldw	r3,180(sp)
  809e00:	d9002917 	ldw	r4,164(sp)
  809e04:	002d883a 	mov	r22,zero
  809e08:	18800104 	addi	r2,r3,4
  809e0c:	1cc0000b 	ldhu	r19,0(r3)
  809e10:	203dc10e 	bge	r4,zero,809518 <__alt_mem_onchip_mem+0xff801518>
  809e14:	003f7506 	br	809bec <__alt_mem_onchip_mem+0xff801bec>
  809e18:	04002074 	movhi	r16,129
  809e1c:	841b4c04 	addi	r16,r16,27952
  809e20:	003acc06 	br	808954 <__alt_mem_onchip_mem+0xff800954>
  809e24:	d9002c17 	ldw	r4,176(sp)
  809e28:	d9801e04 	addi	r6,sp,120
  809e2c:	b80b883a 	mov	r5,r23
  809e30:	080ef0c0 	call	80ef0c <__sprint_r>
  809e34:	103a3b1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809e38:	dc402617 	ldw	r17,152(sp)
  809e3c:	d8c02017 	ldw	r3,128(sp)
  809e40:	da000404 	addi	r8,sp,16
  809e44:	003f9c06 	br	809cb8 <__alt_mem_onchip_mem+0xff801cb8>
  809e48:	ac400043 	ldbu	r17,1(r21)
  809e4c:	94800814 	ori	r18,r18,32
  809e50:	ad400044 	addi	r21,r21,1
  809e54:	8c403fcc 	andi	r17,r17,255
  809e58:	8c40201c 	xori	r17,r17,128
  809e5c:	8c7fe004 	addi	r17,r17,-128
  809e60:	00398f06 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  809e64:	d8c02d15 	stw	r3,180(sp)
  809e68:	0039883a 	mov	fp,zero
  809e6c:	003e3506 	br	809744 <__alt_mem_onchip_mem+0xff801744>
  809e70:	d9002c17 	ldw	r4,176(sp)
  809e74:	d9801e04 	addi	r6,sp,120
  809e78:	b80b883a 	mov	r5,r23
  809e7c:	080ef0c0 	call	80ef0c <__sprint_r>
  809e80:	103a281e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809e84:	d8c02017 	ldw	r3,128(sp)
  809e88:	da000404 	addi	r8,sp,16
  809e8c:	003cd006 	br	8091d0 <__alt_mem_onchip_mem+0xff8011d0>
  809e90:	8009883a 	mov	r4,r16
  809e94:	da003d15 	stw	r8,244(sp)
  809e98:	08082840 	call	808284 <strlen>
  809e9c:	d8802e15 	stw	r2,184(sp)
  809ea0:	da003d17 	ldw	r8,244(sp)
  809ea4:	103c340e 	bge	r2,zero,808f78 <__alt_mem_onchip_mem+0xff800f78>
  809ea8:	0005883a 	mov	r2,zero
  809eac:	003c3206 	br	808f78 <__alt_mem_onchip_mem+0xff800f78>
  809eb0:	d9002c17 	ldw	r4,176(sp)
  809eb4:	d9801e04 	addi	r6,sp,120
  809eb8:	b80b883a 	mov	r5,r23
  809ebc:	080ef0c0 	call	80ef0c <__sprint_r>
  809ec0:	103a181e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809ec4:	d8c02017 	ldw	r3,128(sp)
  809ec8:	d8801f17 	ldw	r2,124(sp)
  809ecc:	da000404 	addi	r8,sp,16
  809ed0:	d9403317 	ldw	r5,204(sp)
  809ed4:	10800044 	addi	r2,r2,1
  809ed8:	44000015 	stw	r16,0(r8)
  809edc:	28c7883a 	add	r3,r5,r3
  809ee0:	003b7d06 	br	808cd8 <__alt_mem_onchip_mem+0xff800cd8>
  809ee4:	01002074 	movhi	r4,129
  809ee8:	211b6084 	addi	r4,r4,28034
  809eec:	d9003515 	stw	r4,212(sp)
  809ef0:	003b1406 	br	808b44 <__alt_mem_onchip_mem+0xff800b44>
  809ef4:	013fffc4 	movi	r4,-1
  809ef8:	003a3506 	br	8087d0 <__alt_mem_onchip_mem+0xff8007d0>
  809efc:	0023883a 	mov	r17,zero
  809f00:	003d9d06 	br	809578 <__alt_mem_onchip_mem+0xff801578>
  809f04:	d9002c17 	ldw	r4,176(sp)
  809f08:	d9801e04 	addi	r6,sp,120
  809f0c:	b80b883a 	mov	r5,r23
  809f10:	080ef0c0 	call	80ef0c <__sprint_r>
  809f14:	103a031e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809f18:	d8c02017 	ldw	r3,128(sp)
  809f1c:	da000404 	addi	r8,sp,16
  809f20:	003d9406 	br	809574 <__alt_mem_onchip_mem+0xff801574>
  809f24:	01002074 	movhi	r4,129
  809f28:	211b5c84 	addi	r4,r4,28018
  809f2c:	d9002b15 	stw	r4,172(sp)
  809f30:	d9002b17 	ldw	r4,172(sp)
  809f34:	1c47883a 	add	r3,r3,r17
  809f38:	10800044 	addi	r2,r2,1
  809f3c:	41000015 	stw	r4,0(r8)
  809f40:	44400115 	stw	r17,4(r8)
  809f44:	d8c02015 	stw	r3,128(sp)
  809f48:	d8801f15 	stw	r2,124(sp)
  809f4c:	010001c4 	movi	r4,7
  809f50:	20bfd716 	blt	r4,r2,809eb0 <__alt_mem_onchip_mem+0xff801eb0>
  809f54:	42000204 	addi	r8,r8,8
  809f58:	003fdd06 	br	809ed0 <__alt_mem_onchip_mem+0xff801ed0>
  809f5c:	d9002c17 	ldw	r4,176(sp)
  809f60:	d9801e04 	addi	r6,sp,120
  809f64:	b80b883a 	mov	r5,r23
  809f68:	080ef0c0 	call	80ef0c <__sprint_r>
  809f6c:	1039ed1e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  809f70:	d8802617 	ldw	r2,152(sp)
  809f74:	d8c02017 	ldw	r3,128(sp)
  809f78:	da000404 	addi	r8,sp,16
  809f7c:	003e1006 	br	8097c0 <__alt_mem_onchip_mem+0xff8017c0>
  809f80:	00800044 	movi	r2,1
  809f84:	10803fcc 	andi	r2,r2,255
  809f88:	00c00044 	movi	r3,1
  809f8c:	10fa3526 	beq	r2,r3,808864 <__alt_mem_onchip_mem+0xff800864>
  809f90:	00c00084 	movi	r3,2
  809f94:	10fbcb26 	beq	r2,r3,808ec4 <__alt_mem_onchip_mem+0xff800ec4>
  809f98:	003a8f06 	br	8089d8 <__alt_mem_onchip_mem+0xff8009d8>
  809f9c:	01002074 	movhi	r4,129
  809fa0:	211b6084 	addi	r4,r4,28034
  809fa4:	d9003515 	stw	r4,212(sp)
  809fa8:	003b7606 	br	808d84 <__alt_mem_onchip_mem+0xff800d84>
  809fac:	d8802917 	ldw	r2,164(sp)
  809fb0:	00c00184 	movi	r3,6
  809fb4:	1880012e 	bgeu	r3,r2,809fbc <___vfprintf_internal_r+0x1ca0>
  809fb8:	1805883a 	mov	r2,r3
  809fbc:	d8802e15 	stw	r2,184(sp)
  809fc0:	1000ef16 	blt	r2,zero,80a380 <___vfprintf_internal_r+0x2064>
  809fc4:	04002074 	movhi	r16,129
  809fc8:	d8802a15 	stw	r2,168(sp)
  809fcc:	dcc02d15 	stw	r19,180(sp)
  809fd0:	d8002915 	stw	zero,164(sp)
  809fd4:	d8003215 	stw	zero,200(sp)
  809fd8:	841b5a04 	addi	r16,r16,28008
  809fdc:	0039883a 	mov	fp,zero
  809fe0:	003aa206 	br	808a6c <__alt_mem_onchip_mem+0xff800a6c>
  809fe4:	0021883a 	mov	r16,zero
  809fe8:	003e0706 	br	809808 <__alt_mem_onchip_mem+0xff801808>
  809fec:	d9002c17 	ldw	r4,176(sp)
  809ff0:	d9801e04 	addi	r6,sp,120
  809ff4:	b80b883a 	mov	r5,r23
  809ff8:	080ef0c0 	call	80ef0c <__sprint_r>
  809ffc:	1039c91e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  80a000:	d8802617 	ldw	r2,152(sp)
  80a004:	d9403317 	ldw	r5,204(sp)
  80a008:	d8c02017 	ldw	r3,128(sp)
  80a00c:	da000404 	addi	r8,sp,16
  80a010:	2885c83a 	sub	r2,r5,r2
  80a014:	003dfb06 	br	809804 <__alt_mem_onchip_mem+0xff801804>
  80a018:	9080004c 	andi	r2,r18,1
  80a01c:	103e8f1e 	bne	r2,zero,809a5c <__alt_mem_onchip_mem+0xff801a5c>
  80a020:	d8802117 	ldw	r2,132(sp)
  80a024:	003e9e06 	br	809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a028:	1025883a 	mov	r18,r2
  80a02c:	0039883a 	mov	fp,zero
  80a030:	00800084 	movi	r2,2
  80a034:	003fd306 	br	809f84 <__alt_mem_onchip_mem+0xff801f84>
  80a038:	07000b44 	movi	fp,45
  80a03c:	df002785 	stb	fp,158(sp)
  80a040:	003a4006 	br	808944 <__alt_mem_onchip_mem+0xff800944>
  80a044:	00c00b44 	movi	r3,45
  80a048:	d8c02785 	stb	r3,158(sp)
  80a04c:	d8802a15 	stw	r2,168(sp)
  80a050:	dc802b17 	ldw	r18,172(sp)
  80a054:	d8002915 	stw	zero,164(sp)
  80a058:	07000b44 	movi	fp,45
  80a05c:	003a8006 	br	808a60 <__alt_mem_onchip_mem+0xff800a60>
  80a060:	04002074 	movhi	r16,129
  80a064:	841b4f04 	addi	r16,r16,27964
  80a068:	003f4706 	br	809d88 <__alt_mem_onchip_mem+0xff801d88>
  80a06c:	d8c02d17 	ldw	r3,180(sp)
  80a070:	d9002f17 	ldw	r4,188(sp)
  80a074:	18800017 	ldw	r2,0(r3)
  80a078:	18c00104 	addi	r3,r3,4
  80a07c:	d8c02d15 	stw	r3,180(sp)
  80a080:	11000015 	stw	r4,0(r2)
  80a084:	0038dd06 	br	8083fc <__alt_mem_onchip_mem+0xff8003fc>
  80a088:	dd802617 	ldw	r22,152(sp)
  80a08c:	00bfff44 	movi	r2,-3
  80a090:	b0801c16 	blt	r22,r2,80a104 <___vfprintf_internal_r+0x1de8>
  80a094:	d9402917 	ldw	r5,164(sp)
  80a098:	2d801a16 	blt	r5,r22,80a104 <___vfprintf_internal_r+0x1de8>
  80a09c:	dd803215 	stw	r22,200(sp)
  80a0a0:	003e8906 	br	809ac8 <__alt_mem_onchip_mem+0xff801ac8>
  80a0a4:	01002074 	movhi	r4,129
  80a0a8:	211b5c84 	addi	r4,r4,28018
  80a0ac:	d9002b15 	stw	r4,172(sp)
  80a0b0:	003c9106 	br	8092f8 <__alt_mem_onchip_mem+0xff8012f8>
  80a0b4:	e005883a 	mov	r2,fp
  80a0b8:	003e7906 	br	809aa0 <__alt_mem_onchip_mem+0xff801aa0>
  80a0bc:	d9402917 	ldw	r5,164(sp)
  80a0c0:	df002783 	ldbu	fp,158(sp)
  80a0c4:	dcc02d15 	stw	r19,180(sp)
  80a0c8:	d9402a15 	stw	r5,168(sp)
  80a0cc:	d9402e15 	stw	r5,184(sp)
  80a0d0:	d8002915 	stw	zero,164(sp)
  80a0d4:	d8003215 	stw	zero,200(sp)
  80a0d8:	003a5d06 	br	808a50 <__alt_mem_onchip_mem+0xff800a50>
  80a0dc:	9080004c 	andi	r2,r18,1
  80a0e0:	0039883a 	mov	fp,zero
  80a0e4:	10000426 	beq	r2,zero,80a0f8 <___vfprintf_internal_r+0x1ddc>
  80a0e8:	00800c04 	movi	r2,48
  80a0ec:	dc001dc4 	addi	r16,sp,119
  80a0f0:	d8801dc5 	stb	r2,119(sp)
  80a0f4:	003b8006 	br	808ef8 <__alt_mem_onchip_mem+0xff800ef8>
  80a0f8:	d8002e15 	stw	zero,184(sp)
  80a0fc:	dc001e04 	addi	r16,sp,120
  80a100:	003a4d06 	br	808a38 <__alt_mem_onchip_mem+0xff800a38>
  80a104:	8c7fff84 	addi	r17,r17,-2
  80a108:	b5bfffc4 	addi	r22,r22,-1
  80a10c:	dd802615 	stw	r22,152(sp)
  80a110:	dc4022c5 	stb	r17,139(sp)
  80a114:	b000bf16 	blt	r22,zero,80a414 <___vfprintf_internal_r+0x20f8>
  80a118:	00800ac4 	movi	r2,43
  80a11c:	d8802305 	stb	r2,140(sp)
  80a120:	00800244 	movi	r2,9
  80a124:	15807016 	blt	r2,r22,80a2e8 <___vfprintf_internal_r+0x1fcc>
  80a128:	00800c04 	movi	r2,48
  80a12c:	b5800c04 	addi	r22,r22,48
  80a130:	d8802345 	stb	r2,141(sp)
  80a134:	dd802385 	stb	r22,142(sp)
  80a138:	d88023c4 	addi	r2,sp,143
  80a13c:	df0022c4 	addi	fp,sp,139
  80a140:	d8c03317 	ldw	r3,204(sp)
  80a144:	1739c83a 	sub	fp,r2,fp
  80a148:	d9003317 	ldw	r4,204(sp)
  80a14c:	e0c7883a 	add	r3,fp,r3
  80a150:	df003a15 	stw	fp,232(sp)
  80a154:	d8c02e15 	stw	r3,184(sp)
  80a158:	00800044 	movi	r2,1
  80a15c:	1100b30e 	bge	r2,r4,80a42c <___vfprintf_internal_r+0x2110>
  80a160:	d8c02e17 	ldw	r3,184(sp)
  80a164:	18c00044 	addi	r3,r3,1
  80a168:	d8c02e15 	stw	r3,184(sp)
  80a16c:	1805883a 	mov	r2,r3
  80a170:	1800ac16 	blt	r3,zero,80a424 <___vfprintf_internal_r+0x2108>
  80a174:	d8003215 	stw	zero,200(sp)
  80a178:	003e5d06 	br	809af0 <__alt_mem_onchip_mem+0xff801af0>
  80a17c:	d9002c17 	ldw	r4,176(sp)
  80a180:	d9801e04 	addi	r6,sp,120
  80a184:	b80b883a 	mov	r5,r23
  80a188:	080ef0c0 	call	80ef0c <__sprint_r>
  80a18c:	1039651e 	bne	r2,zero,808724 <__alt_mem_onchip_mem+0xff800724>
  80a190:	dc402617 	ldw	r17,152(sp)
  80a194:	d8c02017 	ldw	r3,128(sp)
  80a198:	d8801f17 	ldw	r2,124(sp)
  80a19c:	da000404 	addi	r8,sp,16
  80a1a0:	003ed606 	br	809cfc <__alt_mem_onchip_mem+0xff801cfc>
  80a1a4:	582b883a 	mov	r21,r11
  80a1a8:	d8002915 	stw	zero,164(sp)
  80a1ac:	0038bd06 	br	8084a4 <__alt_mem_onchip_mem+0xff8004a4>
  80a1b0:	d8802917 	ldw	r2,164(sp)
  80a1b4:	103e071e 	bne	r2,zero,8099d4 <__alt_mem_onchip_mem+0xff8019d4>
  80a1b8:	dc002915 	stw	r16,164(sp)
  80a1bc:	003e0506 	br	8099d4 <__alt_mem_onchip_mem+0xff8019d4>
  80a1c0:	d9002917 	ldw	r4,164(sp)
  80a1c4:	20c00044 	addi	r3,r4,1
  80a1c8:	003e0f06 	br	809a08 <__alt_mem_onchip_mem+0xff801a08>
  80a1cc:	01400184 	movi	r5,6
  80a1d0:	d9402915 	stw	r5,164(sp)
  80a1d4:	003dff06 	br	8099d4 <__alt_mem_onchip_mem+0xff8019d4>
  80a1d8:	d8802104 	addi	r2,sp,132
  80a1dc:	d8800315 	stw	r2,12(sp)
  80a1e0:	d8802504 	addi	r2,sp,148
  80a1e4:	d8800215 	stw	r2,8(sp)
  80a1e8:	d8802604 	addi	r2,sp,152
  80a1ec:	d8800115 	stw	r2,4(sp)
  80a1f0:	d8802917 	ldw	r2,164(sp)
  80a1f4:	d9403617 	ldw	r5,216(sp)
  80a1f8:	d9002c17 	ldw	r4,176(sp)
  80a1fc:	d8800015 	stw	r2,0(sp)
  80a200:	01c000c4 	movi	r7,3
  80a204:	980d883a 	mov	r6,r19
  80a208:	da003d15 	stw	r8,244(sp)
  80a20c:	080a9f40 	call	80a9f4 <_dtoa_r>
  80a210:	d8c02917 	ldw	r3,164(sp)
  80a214:	da003d17 	ldw	r8,244(sp)
  80a218:	1021883a 	mov	r16,r2
  80a21c:	10f9883a 	add	fp,r2,r3
  80a220:	81000007 	ldb	r4,0(r16)
  80a224:	00800c04 	movi	r2,48
  80a228:	20805e26 	beq	r4,r2,80a3a4 <___vfprintf_internal_r+0x2088>
  80a22c:	d8c02617 	ldw	r3,152(sp)
  80a230:	e0f9883a 	add	fp,fp,r3
  80a234:	003e0a06 	br	809a60 <__alt_mem_onchip_mem+0xff801a60>
  80a238:	00c00b44 	movi	r3,45
  80a23c:	24e0003c 	xorhi	r19,r4,32768
  80a240:	d8c02a05 	stb	r3,168(sp)
  80a244:	003de906 	br	8099ec <__alt_mem_onchip_mem+0xff8019ec>
  80a248:	d8c03217 	ldw	r3,200(sp)
  80a24c:	00c07a0e 	bge	zero,r3,80a438 <___vfprintf_internal_r+0x211c>
  80a250:	00800044 	movi	r2,1
  80a254:	d9003317 	ldw	r4,204(sp)
  80a258:	1105883a 	add	r2,r2,r4
  80a25c:	d8802e15 	stw	r2,184(sp)
  80a260:	10004e16 	blt	r2,zero,80a39c <___vfprintf_internal_r+0x2080>
  80a264:	044019c4 	movi	r17,103
  80a268:	003e2106 	br	809af0 <__alt_mem_onchip_mem+0xff801af0>
  80a26c:	d9002917 	ldw	r4,164(sp)
  80a270:	d8802104 	addi	r2,sp,132
  80a274:	d8800315 	stw	r2,12(sp)
  80a278:	d9000015 	stw	r4,0(sp)
  80a27c:	d8802504 	addi	r2,sp,148
  80a280:	d9403617 	ldw	r5,216(sp)
  80a284:	d9002c17 	ldw	r4,176(sp)
  80a288:	d8800215 	stw	r2,8(sp)
  80a28c:	d8802604 	addi	r2,sp,152
  80a290:	d8800115 	stw	r2,4(sp)
  80a294:	01c000c4 	movi	r7,3
  80a298:	980d883a 	mov	r6,r19
  80a29c:	da003d15 	stw	r8,244(sp)
  80a2a0:	080a9f40 	call	80a9f4 <_dtoa_r>
  80a2a4:	d8c02917 	ldw	r3,164(sp)
  80a2a8:	da003d17 	ldw	r8,244(sp)
  80a2ac:	1021883a 	mov	r16,r2
  80a2b0:	00801184 	movi	r2,70
  80a2b4:	80f9883a 	add	fp,r16,r3
  80a2b8:	88bfd926 	beq	r17,r2,80a220 <__alt_mem_onchip_mem+0xff802220>
  80a2bc:	003de806 	br	809a60 <__alt_mem_onchip_mem+0xff801a60>
  80a2c0:	d9002917 	ldw	r4,164(sp)
  80a2c4:	00c04d0e 	bge	zero,r3,80a3fc <___vfprintf_internal_r+0x20e0>
  80a2c8:	2000441e 	bne	r4,zero,80a3dc <___vfprintf_internal_r+0x20c0>
  80a2cc:	9480004c 	andi	r18,r18,1
  80a2d0:	9000421e 	bne	r18,zero,80a3dc <___vfprintf_internal_r+0x20c0>
  80a2d4:	1805883a 	mov	r2,r3
  80a2d8:	18007016 	blt	r3,zero,80a49c <___vfprintf_internal_r+0x2180>
  80a2dc:	d8c03217 	ldw	r3,200(sp)
  80a2e0:	d8c02e15 	stw	r3,184(sp)
  80a2e4:	003e0206 	br	809af0 <__alt_mem_onchip_mem+0xff801af0>
  80a2e8:	df0022c4 	addi	fp,sp,139
  80a2ec:	dc002915 	stw	r16,164(sp)
  80a2f0:	4027883a 	mov	r19,r8
  80a2f4:	e021883a 	mov	r16,fp
  80a2f8:	b009883a 	mov	r4,r22
  80a2fc:	01400284 	movi	r5,10
  80a300:	081169c0 	call	81169c <__modsi3>
  80a304:	10800c04 	addi	r2,r2,48
  80a308:	843fffc4 	addi	r16,r16,-1
  80a30c:	b009883a 	mov	r4,r22
  80a310:	01400284 	movi	r5,10
  80a314:	80800005 	stb	r2,0(r16)
  80a318:	08116180 	call	811618 <__divsi3>
  80a31c:	102d883a 	mov	r22,r2
  80a320:	00800244 	movi	r2,9
  80a324:	15bff416 	blt	r2,r22,80a2f8 <__alt_mem_onchip_mem+0xff8022f8>
  80a328:	9811883a 	mov	r8,r19
  80a32c:	b0800c04 	addi	r2,r22,48
  80a330:	8027883a 	mov	r19,r16
  80a334:	997fffc4 	addi	r5,r19,-1
  80a338:	98bfffc5 	stb	r2,-1(r19)
  80a33c:	dc002917 	ldw	r16,164(sp)
  80a340:	2f006a2e 	bgeu	r5,fp,80a4ec <___vfprintf_internal_r+0x21d0>
  80a344:	d9c02384 	addi	r7,sp,142
  80a348:	3ccfc83a 	sub	r7,r7,r19
  80a34c:	d9002344 	addi	r4,sp,141
  80a350:	e1cf883a 	add	r7,fp,r7
  80a354:	00000106 	br	80a35c <___vfprintf_internal_r+0x2040>
  80a358:	28800003 	ldbu	r2,0(r5)
  80a35c:	20800005 	stb	r2,0(r4)
  80a360:	21000044 	addi	r4,r4,1
  80a364:	29400044 	addi	r5,r5,1
  80a368:	393ffb1e 	bne	r7,r4,80a358 <__alt_mem_onchip_mem+0xff802358>
  80a36c:	d8802304 	addi	r2,sp,140
  80a370:	14c5c83a 	sub	r2,r2,r19
  80a374:	d8c02344 	addi	r3,sp,141
  80a378:	1885883a 	add	r2,r3,r2
  80a37c:	003f7006 	br	80a140 <__alt_mem_onchip_mem+0xff802140>
  80a380:	0005883a 	mov	r2,zero
  80a384:	003f0f06 	br	809fc4 <__alt_mem_onchip_mem+0xff801fc4>
  80a388:	d8c03217 	ldw	r3,200(sp)
  80a38c:	18c00044 	addi	r3,r3,1
  80a390:	d8c02e15 	stw	r3,184(sp)
  80a394:	1805883a 	mov	r2,r3
  80a398:	183fb20e 	bge	r3,zero,80a264 <__alt_mem_onchip_mem+0xff802264>
  80a39c:	0005883a 	mov	r2,zero
  80a3a0:	003fb006 	br	80a264 <__alt_mem_onchip_mem+0xff802264>
  80a3a4:	d9003617 	ldw	r4,216(sp)
  80a3a8:	000d883a 	mov	r6,zero
  80a3ac:	000f883a 	mov	r7,zero
  80a3b0:	980b883a 	mov	r5,r19
  80a3b4:	d8c03c15 	stw	r3,240(sp)
  80a3b8:	da003d15 	stw	r8,244(sp)
  80a3bc:	08120b40 	call	8120b4 <__eqdf2>
  80a3c0:	d8c03c17 	ldw	r3,240(sp)
  80a3c4:	da003d17 	ldw	r8,244(sp)
  80a3c8:	103f9826 	beq	r2,zero,80a22c <__alt_mem_onchip_mem+0xff80222c>
  80a3cc:	00800044 	movi	r2,1
  80a3d0:	10c7c83a 	sub	r3,r2,r3
  80a3d4:	d8c02615 	stw	r3,152(sp)
  80a3d8:	003f9506 	br	80a230 <__alt_mem_onchip_mem+0xff802230>
  80a3dc:	d9002917 	ldw	r4,164(sp)
  80a3e0:	d8c03217 	ldw	r3,200(sp)
  80a3e4:	20800044 	addi	r2,r4,1
  80a3e8:	1885883a 	add	r2,r3,r2
  80a3ec:	d8802e15 	stw	r2,184(sp)
  80a3f0:	103dbf0e 	bge	r2,zero,809af0 <__alt_mem_onchip_mem+0xff801af0>
  80a3f4:	0005883a 	mov	r2,zero
  80a3f8:	003dbd06 	br	809af0 <__alt_mem_onchip_mem+0xff801af0>
  80a3fc:	2000211e 	bne	r4,zero,80a484 <___vfprintf_internal_r+0x2168>
  80a400:	9480004c 	andi	r18,r18,1
  80a404:	90001f1e 	bne	r18,zero,80a484 <___vfprintf_internal_r+0x2168>
  80a408:	00800044 	movi	r2,1
  80a40c:	d8802e15 	stw	r2,184(sp)
  80a410:	003db706 	br	809af0 <__alt_mem_onchip_mem+0xff801af0>
  80a414:	00800b44 	movi	r2,45
  80a418:	05adc83a 	sub	r22,zero,r22
  80a41c:	d8802305 	stb	r2,140(sp)
  80a420:	003f3f06 	br	80a120 <__alt_mem_onchip_mem+0xff802120>
  80a424:	0005883a 	mov	r2,zero
  80a428:	003f5206 	br	80a174 <__alt_mem_onchip_mem+0xff802174>
  80a42c:	90a4703a 	and	r18,r18,r2
  80a430:	903f4e26 	beq	r18,zero,80a16c <__alt_mem_onchip_mem+0xff80216c>
  80a434:	003f4a06 	br	80a160 <__alt_mem_onchip_mem+0xff802160>
  80a438:	00800084 	movi	r2,2
  80a43c:	10c5c83a 	sub	r2,r2,r3
  80a440:	003f8406 	br	80a254 <__alt_mem_onchip_mem+0xff802254>
  80a444:	d8802d17 	ldw	r2,180(sp)
  80a448:	d9002d17 	ldw	r4,180(sp)
  80a44c:	ac400043 	ldbu	r17,1(r21)
  80a450:	10800017 	ldw	r2,0(r2)
  80a454:	582b883a 	mov	r21,r11
  80a458:	d8802915 	stw	r2,164(sp)
  80a45c:	20800104 	addi	r2,r4,4
  80a460:	d9002917 	ldw	r4,164(sp)
  80a464:	d8802d15 	stw	r2,180(sp)
  80a468:	203e7a0e 	bge	r4,zero,809e54 <__alt_mem_onchip_mem+0xff801e54>
  80a46c:	8c403fcc 	andi	r17,r17,255
  80a470:	00bfffc4 	movi	r2,-1
  80a474:	8c40201c 	xori	r17,r17,128
  80a478:	d8802915 	stw	r2,164(sp)
  80a47c:	8c7fe004 	addi	r17,r17,-128
  80a480:	00380706 	br	8084a0 <__alt_mem_onchip_mem+0xff8004a0>
  80a484:	d8c02917 	ldw	r3,164(sp)
  80a488:	18c00084 	addi	r3,r3,2
  80a48c:	d8c02e15 	stw	r3,184(sp)
  80a490:	1805883a 	mov	r2,r3
  80a494:	183d960e 	bge	r3,zero,809af0 <__alt_mem_onchip_mem+0xff801af0>
  80a498:	003fd606 	br	80a3f4 <__alt_mem_onchip_mem+0xff8023f4>
  80a49c:	0005883a 	mov	r2,zero
  80a4a0:	003f8e06 	br	80a2dc <__alt_mem_onchip_mem+0xff8022dc>
  80a4a4:	9080004c 	andi	r2,r18,1
  80a4a8:	103f811e 	bne	r2,zero,80a2b0 <__alt_mem_onchip_mem+0xff8022b0>
  80a4ac:	d8802117 	ldw	r2,132(sp)
  80a4b0:	1405c83a 	sub	r2,r2,r16
  80a4b4:	d8803315 	stw	r2,204(sp)
  80a4b8:	b47ef326 	beq	r22,r17,80a088 <__alt_mem_onchip_mem+0xff802088>
  80a4bc:	dd802617 	ldw	r22,152(sp)
  80a4c0:	003f1106 	br	80a108 <__alt_mem_onchip_mem+0xff802108>
  80a4c4:	d9c02785 	stb	r7,158(sp)
  80a4c8:	00390406 	br	8088dc <__alt_mem_onchip_mem+0xff8008dc>
  80a4cc:	d9c02785 	stb	r7,158(sp)
  80a4d0:	0038d306 	br	808820 <__alt_mem_onchip_mem+0xff800820>
  80a4d4:	d9c02785 	stb	r7,158(sp)
  80a4d8:	003a6106 	br	808e60 <__alt_mem_onchip_mem+0xff800e60>
  80a4dc:	d9c02785 	stb	r7,158(sp)
  80a4e0:	003af806 	br	8090c4 <__alt_mem_onchip_mem+0xff8010c4>
  80a4e4:	0005883a 	mov	r2,zero
  80a4e8:	003d7e06 	br	809ae4 <__alt_mem_onchip_mem+0xff801ae4>
  80a4ec:	d8802344 	addi	r2,sp,141
  80a4f0:	003f1306 	br	80a140 <__alt_mem_onchip_mem+0xff802140>
  80a4f4:	d9c02785 	stb	r7,158(sp)
  80a4f8:	00392306 	br	808988 <__alt_mem_onchip_mem+0xff800988>
  80a4fc:	d9c02785 	stb	r7,158(sp)
  80a500:	003aa906 	br	808fa8 <__alt_mem_onchip_mem+0xff800fa8>
  80a504:	d9c02785 	stb	r7,158(sp)
  80a508:	003a3d06 	br	808e00 <__alt_mem_onchip_mem+0xff800e00>
  80a50c:	d9c02785 	stb	r7,158(sp)
  80a510:	003aca06 	br	80903c <__alt_mem_onchip_mem+0xff80103c>

0080a514 <__vfprintf_internal>:
  80a514:	008020b4 	movhi	r2,130
  80a518:	10a39404 	addi	r2,r2,-29104
  80a51c:	300f883a 	mov	r7,r6
  80a520:	280d883a 	mov	r6,r5
  80a524:	200b883a 	mov	r5,r4
  80a528:	11000017 	ldw	r4,0(r2)
  80a52c:	080831c1 	jmpi	80831c <___vfprintf_internal_r>

0080a530 <__sbprintf>:
  80a530:	2880030b 	ldhu	r2,12(r5)
  80a534:	2ac01917 	ldw	r11,100(r5)
  80a538:	2a80038b 	ldhu	r10,14(r5)
  80a53c:	2a400717 	ldw	r9,28(r5)
  80a540:	2a000917 	ldw	r8,36(r5)
  80a544:	defee204 	addi	sp,sp,-1144
  80a548:	00c10004 	movi	r3,1024
  80a54c:	dc011a15 	stw	r16,1128(sp)
  80a550:	10bfff4c 	andi	r2,r2,65533
  80a554:	2821883a 	mov	r16,r5
  80a558:	d8cb883a 	add	r5,sp,r3
  80a55c:	dc811c15 	stw	r18,1136(sp)
  80a560:	dc411b15 	stw	r17,1132(sp)
  80a564:	dfc11d15 	stw	ra,1140(sp)
  80a568:	2025883a 	mov	r18,r4
  80a56c:	d881030d 	sth	r2,1036(sp)
  80a570:	dac11915 	stw	r11,1124(sp)
  80a574:	da81038d 	sth	r10,1038(sp)
  80a578:	da410715 	stw	r9,1052(sp)
  80a57c:	da010915 	stw	r8,1060(sp)
  80a580:	dec10015 	stw	sp,1024(sp)
  80a584:	dec10415 	stw	sp,1040(sp)
  80a588:	d8c10215 	stw	r3,1032(sp)
  80a58c:	d8c10515 	stw	r3,1044(sp)
  80a590:	d8010615 	stw	zero,1048(sp)
  80a594:	080831c0 	call	80831c <___vfprintf_internal_r>
  80a598:	1023883a 	mov	r17,r2
  80a59c:	10000416 	blt	r2,zero,80a5b0 <__sbprintf+0x80>
  80a5a0:	d9410004 	addi	r5,sp,1024
  80a5a4:	9009883a 	mov	r4,r18
  80a5a8:	080c2980 	call	80c298 <_fflush_r>
  80a5ac:	10000d1e 	bne	r2,zero,80a5e4 <__sbprintf+0xb4>
  80a5b0:	d881030b 	ldhu	r2,1036(sp)
  80a5b4:	1080100c 	andi	r2,r2,64
  80a5b8:	10000326 	beq	r2,zero,80a5c8 <__sbprintf+0x98>
  80a5bc:	8080030b 	ldhu	r2,12(r16)
  80a5c0:	10801014 	ori	r2,r2,64
  80a5c4:	8080030d 	sth	r2,12(r16)
  80a5c8:	8805883a 	mov	r2,r17
  80a5cc:	dfc11d17 	ldw	ra,1140(sp)
  80a5d0:	dc811c17 	ldw	r18,1136(sp)
  80a5d4:	dc411b17 	ldw	r17,1132(sp)
  80a5d8:	dc011a17 	ldw	r16,1128(sp)
  80a5dc:	dec11e04 	addi	sp,sp,1144
  80a5e0:	f800283a 	ret
  80a5e4:	047fffc4 	movi	r17,-1
  80a5e8:	003ff106 	br	80a5b0 <__alt_mem_onchip_mem+0xff8025b0>

0080a5ec <_write_r>:
  80a5ec:	defffd04 	addi	sp,sp,-12
  80a5f0:	2805883a 	mov	r2,r5
  80a5f4:	dc000015 	stw	r16,0(sp)
  80a5f8:	040020b4 	movhi	r16,130
  80a5fc:	dc400115 	stw	r17,4(sp)
  80a600:	300b883a 	mov	r5,r6
  80a604:	842ae404 	addi	r16,r16,-21616
  80a608:	2023883a 	mov	r17,r4
  80a60c:	380d883a 	mov	r6,r7
  80a610:	1009883a 	mov	r4,r2
  80a614:	dfc00215 	stw	ra,8(sp)
  80a618:	80000015 	stw	zero,0(r16)
  80a61c:	08137c40 	call	8137c4 <write>
  80a620:	00ffffc4 	movi	r3,-1
  80a624:	10c00526 	beq	r2,r3,80a63c <_write_r+0x50>
  80a628:	dfc00217 	ldw	ra,8(sp)
  80a62c:	dc400117 	ldw	r17,4(sp)
  80a630:	dc000017 	ldw	r16,0(sp)
  80a634:	dec00304 	addi	sp,sp,12
  80a638:	f800283a 	ret
  80a63c:	80c00017 	ldw	r3,0(r16)
  80a640:	183ff926 	beq	r3,zero,80a628 <__alt_mem_onchip_mem+0xff802628>
  80a644:	88c00015 	stw	r3,0(r17)
  80a648:	003ff706 	br	80a628 <__alt_mem_onchip_mem+0xff802628>

0080a64c <__swsetup_r>:
  80a64c:	008020b4 	movhi	r2,130
  80a650:	defffd04 	addi	sp,sp,-12
  80a654:	10a39404 	addi	r2,r2,-29104
  80a658:	dc400115 	stw	r17,4(sp)
  80a65c:	2023883a 	mov	r17,r4
  80a660:	11000017 	ldw	r4,0(r2)
  80a664:	dc000015 	stw	r16,0(sp)
  80a668:	dfc00215 	stw	ra,8(sp)
  80a66c:	2821883a 	mov	r16,r5
  80a670:	20000226 	beq	r4,zero,80a67c <__swsetup_r+0x30>
  80a674:	20800e17 	ldw	r2,56(r4)
  80a678:	10003126 	beq	r2,zero,80a740 <__swsetup_r+0xf4>
  80a67c:	8080030b 	ldhu	r2,12(r16)
  80a680:	10c0020c 	andi	r3,r2,8
  80a684:	1009883a 	mov	r4,r2
  80a688:	18000f26 	beq	r3,zero,80a6c8 <__swsetup_r+0x7c>
  80a68c:	80c00417 	ldw	r3,16(r16)
  80a690:	18001526 	beq	r3,zero,80a6e8 <__swsetup_r+0x9c>
  80a694:	1100004c 	andi	r4,r2,1
  80a698:	20001c1e 	bne	r4,zero,80a70c <__swsetup_r+0xc0>
  80a69c:	1080008c 	andi	r2,r2,2
  80a6a0:	1000291e 	bne	r2,zero,80a748 <__swsetup_r+0xfc>
  80a6a4:	80800517 	ldw	r2,20(r16)
  80a6a8:	80800215 	stw	r2,8(r16)
  80a6ac:	18001c26 	beq	r3,zero,80a720 <__swsetup_r+0xd4>
  80a6b0:	0005883a 	mov	r2,zero
  80a6b4:	dfc00217 	ldw	ra,8(sp)
  80a6b8:	dc400117 	ldw	r17,4(sp)
  80a6bc:	dc000017 	ldw	r16,0(sp)
  80a6c0:	dec00304 	addi	sp,sp,12
  80a6c4:	f800283a 	ret
  80a6c8:	2080040c 	andi	r2,r4,16
  80a6cc:	10002e26 	beq	r2,zero,80a788 <__swsetup_r+0x13c>
  80a6d0:	2080010c 	andi	r2,r4,4
  80a6d4:	10001e1e 	bne	r2,zero,80a750 <__swsetup_r+0x104>
  80a6d8:	80c00417 	ldw	r3,16(r16)
  80a6dc:	20800214 	ori	r2,r4,8
  80a6e0:	8080030d 	sth	r2,12(r16)
  80a6e4:	183feb1e 	bne	r3,zero,80a694 <__alt_mem_onchip_mem+0xff802694>
  80a6e8:	1100a00c 	andi	r4,r2,640
  80a6ec:	01408004 	movi	r5,512
  80a6f0:	217fe826 	beq	r4,r5,80a694 <__alt_mem_onchip_mem+0xff802694>
  80a6f4:	800b883a 	mov	r5,r16
  80a6f8:	8809883a 	mov	r4,r17
  80a6fc:	08072e00 	call	8072e0 <__smakebuf_r>
  80a700:	8080030b 	ldhu	r2,12(r16)
  80a704:	80c00417 	ldw	r3,16(r16)
  80a708:	003fe206 	br	80a694 <__alt_mem_onchip_mem+0xff802694>
  80a70c:	80800517 	ldw	r2,20(r16)
  80a710:	80000215 	stw	zero,8(r16)
  80a714:	0085c83a 	sub	r2,zero,r2
  80a718:	80800615 	stw	r2,24(r16)
  80a71c:	183fe41e 	bne	r3,zero,80a6b0 <__alt_mem_onchip_mem+0xff8026b0>
  80a720:	80c0030b 	ldhu	r3,12(r16)
  80a724:	0005883a 	mov	r2,zero
  80a728:	1900200c 	andi	r4,r3,128
  80a72c:	203fe126 	beq	r4,zero,80a6b4 <__alt_mem_onchip_mem+0xff8026b4>
  80a730:	18c01014 	ori	r3,r3,64
  80a734:	80c0030d 	sth	r3,12(r16)
  80a738:	00bfffc4 	movi	r2,-1
  80a73c:	003fdd06 	br	80a6b4 <__alt_mem_onchip_mem+0xff8026b4>
  80a740:	080c6740 	call	80c674 <__sinit>
  80a744:	003fcd06 	br	80a67c <__alt_mem_onchip_mem+0xff80267c>
  80a748:	0005883a 	mov	r2,zero
  80a74c:	003fd606 	br	80a6a8 <__alt_mem_onchip_mem+0xff8026a8>
  80a750:	81400c17 	ldw	r5,48(r16)
  80a754:	28000626 	beq	r5,zero,80a770 <__swsetup_r+0x124>
  80a758:	80801004 	addi	r2,r16,64
  80a75c:	28800326 	beq	r5,r2,80a76c <__swsetup_r+0x120>
  80a760:	8809883a 	mov	r4,r17
  80a764:	080c8940 	call	80c894 <_free_r>
  80a768:	8100030b 	ldhu	r4,12(r16)
  80a76c:	80000c15 	stw	zero,48(r16)
  80a770:	80c00417 	ldw	r3,16(r16)
  80a774:	00bff6c4 	movi	r2,-37
  80a778:	1108703a 	and	r4,r2,r4
  80a77c:	80000115 	stw	zero,4(r16)
  80a780:	80c00015 	stw	r3,0(r16)
  80a784:	003fd506 	br	80a6dc <__alt_mem_onchip_mem+0xff8026dc>
  80a788:	00800244 	movi	r2,9
  80a78c:	88800015 	stw	r2,0(r17)
  80a790:	20801014 	ori	r2,r4,64
  80a794:	8080030d 	sth	r2,12(r16)
  80a798:	00bfffc4 	movi	r2,-1
  80a79c:	003fc506 	br	80a6b4 <__alt_mem_onchip_mem+0xff8026b4>

0080a7a0 <_close_r>:
  80a7a0:	defffd04 	addi	sp,sp,-12
  80a7a4:	dc000015 	stw	r16,0(sp)
  80a7a8:	040020b4 	movhi	r16,130
  80a7ac:	dc400115 	stw	r17,4(sp)
  80a7b0:	842ae404 	addi	r16,r16,-21616
  80a7b4:	2023883a 	mov	r17,r4
  80a7b8:	2809883a 	mov	r4,r5
  80a7bc:	dfc00215 	stw	ra,8(sp)
  80a7c0:	80000015 	stw	zero,0(r16)
  80a7c4:	0812a3c0 	call	812a3c <close>
  80a7c8:	00ffffc4 	movi	r3,-1
  80a7cc:	10c00526 	beq	r2,r3,80a7e4 <_close_r+0x44>
  80a7d0:	dfc00217 	ldw	ra,8(sp)
  80a7d4:	dc400117 	ldw	r17,4(sp)
  80a7d8:	dc000017 	ldw	r16,0(sp)
  80a7dc:	dec00304 	addi	sp,sp,12
  80a7e0:	f800283a 	ret
  80a7e4:	80c00017 	ldw	r3,0(r16)
  80a7e8:	183ff926 	beq	r3,zero,80a7d0 <__alt_mem_onchip_mem+0xff8027d0>
  80a7ec:	88c00015 	stw	r3,0(r17)
  80a7f0:	003ff706 	br	80a7d0 <__alt_mem_onchip_mem+0xff8027d0>

0080a7f4 <quorem>:
  80a7f4:	defff704 	addi	sp,sp,-36
  80a7f8:	dc800215 	stw	r18,8(sp)
  80a7fc:	20800417 	ldw	r2,16(r4)
  80a800:	2c800417 	ldw	r18,16(r5)
  80a804:	dfc00815 	stw	ra,32(sp)
  80a808:	ddc00715 	stw	r23,28(sp)
  80a80c:	dd800615 	stw	r22,24(sp)
  80a810:	dd400515 	stw	r21,20(sp)
  80a814:	dd000415 	stw	r20,16(sp)
  80a818:	dcc00315 	stw	r19,12(sp)
  80a81c:	dc400115 	stw	r17,4(sp)
  80a820:	dc000015 	stw	r16,0(sp)
  80a824:	14807116 	blt	r2,r18,80a9ec <quorem+0x1f8>
  80a828:	94bfffc4 	addi	r18,r18,-1
  80a82c:	94ad883a 	add	r22,r18,r18
  80a830:	b5ad883a 	add	r22,r22,r22
  80a834:	2c400504 	addi	r17,r5,20
  80a838:	8da9883a 	add	r20,r17,r22
  80a83c:	25400504 	addi	r21,r4,20
  80a840:	282f883a 	mov	r23,r5
  80a844:	adad883a 	add	r22,r21,r22
  80a848:	a1400017 	ldw	r5,0(r20)
  80a84c:	2021883a 	mov	r16,r4
  80a850:	b1000017 	ldw	r4,0(r22)
  80a854:	29400044 	addi	r5,r5,1
  80a858:	08117100 	call	811710 <__udivsi3>
  80a85c:	1027883a 	mov	r19,r2
  80a860:	10002c26 	beq	r2,zero,80a914 <quorem+0x120>
  80a864:	a813883a 	mov	r9,r21
  80a868:	880b883a 	mov	r5,r17
  80a86c:	0009883a 	mov	r4,zero
  80a870:	000d883a 	mov	r6,zero
  80a874:	2a000017 	ldw	r8,0(r5)
  80a878:	49c00017 	ldw	r7,0(r9)
  80a87c:	29400104 	addi	r5,r5,4
  80a880:	40bfffcc 	andi	r2,r8,65535
  80a884:	14c5383a 	mul	r2,r2,r19
  80a888:	4010d43a 	srli	r8,r8,16
  80a88c:	38ffffcc 	andi	r3,r7,65535
  80a890:	1105883a 	add	r2,r2,r4
  80a894:	1008d43a 	srli	r4,r2,16
  80a898:	44d1383a 	mul	r8,r8,r19
  80a89c:	198d883a 	add	r6,r3,r6
  80a8a0:	10ffffcc 	andi	r3,r2,65535
  80a8a4:	30c7c83a 	sub	r3,r6,r3
  80a8a8:	380ed43a 	srli	r7,r7,16
  80a8ac:	4105883a 	add	r2,r8,r4
  80a8b0:	180dd43a 	srai	r6,r3,16
  80a8b4:	113fffcc 	andi	r4,r2,65535
  80a8b8:	390fc83a 	sub	r7,r7,r4
  80a8bc:	398d883a 	add	r6,r7,r6
  80a8c0:	300e943a 	slli	r7,r6,16
  80a8c4:	18ffffcc 	andi	r3,r3,65535
  80a8c8:	1008d43a 	srli	r4,r2,16
  80a8cc:	38ceb03a 	or	r7,r7,r3
  80a8d0:	49c00015 	stw	r7,0(r9)
  80a8d4:	300dd43a 	srai	r6,r6,16
  80a8d8:	4a400104 	addi	r9,r9,4
  80a8dc:	a17fe52e 	bgeu	r20,r5,80a874 <__alt_mem_onchip_mem+0xff802874>
  80a8e0:	b0800017 	ldw	r2,0(r22)
  80a8e4:	10000b1e 	bne	r2,zero,80a914 <quorem+0x120>
  80a8e8:	b0bfff04 	addi	r2,r22,-4
  80a8ec:	a880082e 	bgeu	r21,r2,80a910 <quorem+0x11c>
  80a8f0:	b0ffff17 	ldw	r3,-4(r22)
  80a8f4:	18000326 	beq	r3,zero,80a904 <quorem+0x110>
  80a8f8:	00000506 	br	80a910 <quorem+0x11c>
  80a8fc:	10c00017 	ldw	r3,0(r2)
  80a900:	1800031e 	bne	r3,zero,80a910 <quorem+0x11c>
  80a904:	10bfff04 	addi	r2,r2,-4
  80a908:	94bfffc4 	addi	r18,r18,-1
  80a90c:	a8bffb36 	bltu	r21,r2,80a8fc <__alt_mem_onchip_mem+0xff8028fc>
  80a910:	84800415 	stw	r18,16(r16)
  80a914:	b80b883a 	mov	r5,r23
  80a918:	8009883a 	mov	r4,r16
  80a91c:	080dfc80 	call	80dfc8 <__mcmp>
  80a920:	10002616 	blt	r2,zero,80a9bc <quorem+0x1c8>
  80a924:	9cc00044 	addi	r19,r19,1
  80a928:	a805883a 	mov	r2,r21
  80a92c:	000b883a 	mov	r5,zero
  80a930:	11000017 	ldw	r4,0(r2)
  80a934:	89800017 	ldw	r6,0(r17)
  80a938:	10800104 	addi	r2,r2,4
  80a93c:	20ffffcc 	andi	r3,r4,65535
  80a940:	194b883a 	add	r5,r3,r5
  80a944:	30ffffcc 	andi	r3,r6,65535
  80a948:	28c7c83a 	sub	r3,r5,r3
  80a94c:	300cd43a 	srli	r6,r6,16
  80a950:	2008d43a 	srli	r4,r4,16
  80a954:	180bd43a 	srai	r5,r3,16
  80a958:	18ffffcc 	andi	r3,r3,65535
  80a95c:	2189c83a 	sub	r4,r4,r6
  80a960:	2149883a 	add	r4,r4,r5
  80a964:	200c943a 	slli	r6,r4,16
  80a968:	8c400104 	addi	r17,r17,4
  80a96c:	200bd43a 	srai	r5,r4,16
  80a970:	30c6b03a 	or	r3,r6,r3
  80a974:	10ffff15 	stw	r3,-4(r2)
  80a978:	a47fed2e 	bgeu	r20,r17,80a930 <__alt_mem_onchip_mem+0xff802930>
  80a97c:	9485883a 	add	r2,r18,r18
  80a980:	1085883a 	add	r2,r2,r2
  80a984:	a887883a 	add	r3,r21,r2
  80a988:	18800017 	ldw	r2,0(r3)
  80a98c:	10000b1e 	bne	r2,zero,80a9bc <quorem+0x1c8>
  80a990:	18bfff04 	addi	r2,r3,-4
  80a994:	a880082e 	bgeu	r21,r2,80a9b8 <quorem+0x1c4>
  80a998:	18ffff17 	ldw	r3,-4(r3)
  80a99c:	18000326 	beq	r3,zero,80a9ac <quorem+0x1b8>
  80a9a0:	00000506 	br	80a9b8 <quorem+0x1c4>
  80a9a4:	10c00017 	ldw	r3,0(r2)
  80a9a8:	1800031e 	bne	r3,zero,80a9b8 <quorem+0x1c4>
  80a9ac:	10bfff04 	addi	r2,r2,-4
  80a9b0:	94bfffc4 	addi	r18,r18,-1
  80a9b4:	a8bffb36 	bltu	r21,r2,80a9a4 <__alt_mem_onchip_mem+0xff8029a4>
  80a9b8:	84800415 	stw	r18,16(r16)
  80a9bc:	9805883a 	mov	r2,r19
  80a9c0:	dfc00817 	ldw	ra,32(sp)
  80a9c4:	ddc00717 	ldw	r23,28(sp)
  80a9c8:	dd800617 	ldw	r22,24(sp)
  80a9cc:	dd400517 	ldw	r21,20(sp)
  80a9d0:	dd000417 	ldw	r20,16(sp)
  80a9d4:	dcc00317 	ldw	r19,12(sp)
  80a9d8:	dc800217 	ldw	r18,8(sp)
  80a9dc:	dc400117 	ldw	r17,4(sp)
  80a9e0:	dc000017 	ldw	r16,0(sp)
  80a9e4:	dec00904 	addi	sp,sp,36
  80a9e8:	f800283a 	ret
  80a9ec:	0005883a 	mov	r2,zero
  80a9f0:	003ff306 	br	80a9c0 <__alt_mem_onchip_mem+0xff8029c0>

0080a9f4 <_dtoa_r>:
  80a9f4:	20801017 	ldw	r2,64(r4)
  80a9f8:	deffde04 	addi	sp,sp,-136
  80a9fc:	df002015 	stw	fp,128(sp)
  80aa00:	dcc01b15 	stw	r19,108(sp)
  80aa04:	dc801a15 	stw	r18,104(sp)
  80aa08:	dc401915 	stw	r17,100(sp)
  80aa0c:	dc001815 	stw	r16,96(sp)
  80aa10:	dfc02115 	stw	ra,132(sp)
  80aa14:	ddc01f15 	stw	r23,124(sp)
  80aa18:	dd801e15 	stw	r22,120(sp)
  80aa1c:	dd401d15 	stw	r21,116(sp)
  80aa20:	dd001c15 	stw	r20,112(sp)
  80aa24:	d9c00315 	stw	r7,12(sp)
  80aa28:	2039883a 	mov	fp,r4
  80aa2c:	3023883a 	mov	r17,r6
  80aa30:	2825883a 	mov	r18,r5
  80aa34:	dc002417 	ldw	r16,144(sp)
  80aa38:	3027883a 	mov	r19,r6
  80aa3c:	10000826 	beq	r2,zero,80aa60 <_dtoa_r+0x6c>
  80aa40:	21801117 	ldw	r6,68(r4)
  80aa44:	00c00044 	movi	r3,1
  80aa48:	100b883a 	mov	r5,r2
  80aa4c:	1986983a 	sll	r3,r3,r6
  80aa50:	11800115 	stw	r6,4(r2)
  80aa54:	10c00215 	stw	r3,8(r2)
  80aa58:	080d7a80 	call	80d7a8 <_Bfree>
  80aa5c:	e0001015 	stw	zero,64(fp)
  80aa60:	88002e16 	blt	r17,zero,80ab1c <_dtoa_r+0x128>
  80aa64:	80000015 	stw	zero,0(r16)
  80aa68:	889ffc2c 	andhi	r2,r17,32752
  80aa6c:	00dffc34 	movhi	r3,32752
  80aa70:	10c01c26 	beq	r2,r3,80aae4 <_dtoa_r+0xf0>
  80aa74:	000d883a 	mov	r6,zero
  80aa78:	000f883a 	mov	r7,zero
  80aa7c:	9009883a 	mov	r4,r18
  80aa80:	980b883a 	mov	r5,r19
  80aa84:	08120b40 	call	8120b4 <__eqdf2>
  80aa88:	10002b1e 	bne	r2,zero,80ab38 <_dtoa_r+0x144>
  80aa8c:	d9c02317 	ldw	r7,140(sp)
  80aa90:	00800044 	movi	r2,1
  80aa94:	38800015 	stw	r2,0(r7)
  80aa98:	d8802517 	ldw	r2,148(sp)
  80aa9c:	10019e26 	beq	r2,zero,80b118 <_dtoa_r+0x724>
  80aaa0:	d8c02517 	ldw	r3,148(sp)
  80aaa4:	00802074 	movhi	r2,129
  80aaa8:	109b5c44 	addi	r2,r2,28017
  80aaac:	18800015 	stw	r2,0(r3)
  80aab0:	10bfffc4 	addi	r2,r2,-1
  80aab4:	dfc02117 	ldw	ra,132(sp)
  80aab8:	df002017 	ldw	fp,128(sp)
  80aabc:	ddc01f17 	ldw	r23,124(sp)
  80aac0:	dd801e17 	ldw	r22,120(sp)
  80aac4:	dd401d17 	ldw	r21,116(sp)
  80aac8:	dd001c17 	ldw	r20,112(sp)
  80aacc:	dcc01b17 	ldw	r19,108(sp)
  80aad0:	dc801a17 	ldw	r18,104(sp)
  80aad4:	dc401917 	ldw	r17,100(sp)
  80aad8:	dc001817 	ldw	r16,96(sp)
  80aadc:	dec02204 	addi	sp,sp,136
  80aae0:	f800283a 	ret
  80aae4:	d8c02317 	ldw	r3,140(sp)
  80aae8:	0089c3c4 	movi	r2,9999
  80aaec:	18800015 	stw	r2,0(r3)
  80aaf0:	90017726 	beq	r18,zero,80b0d0 <_dtoa_r+0x6dc>
  80aaf4:	00802074 	movhi	r2,129
  80aaf8:	109b6804 	addi	r2,r2,28064
  80aafc:	d9002517 	ldw	r4,148(sp)
  80ab00:	203fec26 	beq	r4,zero,80aab4 <__alt_mem_onchip_mem+0xff802ab4>
  80ab04:	10c000c7 	ldb	r3,3(r2)
  80ab08:	1801781e 	bne	r3,zero,80b0ec <_dtoa_r+0x6f8>
  80ab0c:	10c000c4 	addi	r3,r2,3
  80ab10:	d9802517 	ldw	r6,148(sp)
  80ab14:	30c00015 	stw	r3,0(r6)
  80ab18:	003fe606 	br	80aab4 <__alt_mem_onchip_mem+0xff802ab4>
  80ab1c:	04e00034 	movhi	r19,32768
  80ab20:	9cffffc4 	addi	r19,r19,-1
  80ab24:	00800044 	movi	r2,1
  80ab28:	8ce6703a 	and	r19,r17,r19
  80ab2c:	80800015 	stw	r2,0(r16)
  80ab30:	9823883a 	mov	r17,r19
  80ab34:	003fcc06 	br	80aa68 <__alt_mem_onchip_mem+0xff802a68>
  80ab38:	d8800204 	addi	r2,sp,8
  80ab3c:	d8800015 	stw	r2,0(sp)
  80ab40:	d9c00104 	addi	r7,sp,4
  80ab44:	900b883a 	mov	r5,r18
  80ab48:	980d883a 	mov	r6,r19
  80ab4c:	e009883a 	mov	r4,fp
  80ab50:	8820d53a 	srli	r16,r17,20
  80ab54:	080e3940 	call	80e394 <__d2b>
  80ab58:	d8800915 	stw	r2,36(sp)
  80ab5c:	8001651e 	bne	r16,zero,80b0f4 <_dtoa_r+0x700>
  80ab60:	dd800217 	ldw	r22,8(sp)
  80ab64:	dc000117 	ldw	r16,4(sp)
  80ab68:	00800804 	movi	r2,32
  80ab6c:	b421883a 	add	r16,r22,r16
  80ab70:	80c10c84 	addi	r3,r16,1074
  80ab74:	10c2d10e 	bge	r2,r3,80b6bc <_dtoa_r+0xcc8>
  80ab78:	00801004 	movi	r2,64
  80ab7c:	81010484 	addi	r4,r16,1042
  80ab80:	10c7c83a 	sub	r3,r2,r3
  80ab84:	9108d83a 	srl	r4,r18,r4
  80ab88:	88e2983a 	sll	r17,r17,r3
  80ab8c:	2448b03a 	or	r4,r4,r17
  80ab90:	0806aa00 	call	806aa0 <__floatunsidf>
  80ab94:	017f8434 	movhi	r5,65040
  80ab98:	01800044 	movi	r6,1
  80ab9c:	1009883a 	mov	r4,r2
  80aba0:	194b883a 	add	r5,r3,r5
  80aba4:	843fffc4 	addi	r16,r16,-1
  80aba8:	d9801115 	stw	r6,68(sp)
  80abac:	000d883a 	mov	r6,zero
  80abb0:	01cffe34 	movhi	r7,16376
  80abb4:	08060c80 	call	8060c8 <__subdf3>
  80abb8:	0198dbf4 	movhi	r6,25455
  80abbc:	01cff4f4 	movhi	r7,16339
  80abc0:	3190d844 	addi	r6,r6,17249
  80abc4:	39e1e9c4 	addi	r7,r7,-30809
  80abc8:	1009883a 	mov	r4,r2
  80abcc:	180b883a 	mov	r5,r3
  80abd0:	081213c0 	call	81213c <__muldf3>
  80abd4:	01a2d874 	movhi	r6,35681
  80abd8:	01cff1f4 	movhi	r7,16327
  80abdc:	31b22cc4 	addi	r6,r6,-14157
  80abe0:	39e28a04 	addi	r7,r7,-30168
  80abe4:	180b883a 	mov	r5,r3
  80abe8:	1009883a 	mov	r4,r2
  80abec:	080564c0 	call	80564c <__adddf3>
  80abf0:	8009883a 	mov	r4,r16
  80abf4:	1029883a 	mov	r20,r2
  80abf8:	1823883a 	mov	r17,r3
  80abfc:	08069c40 	call	8069c4 <__floatsidf>
  80ac00:	019427f4 	movhi	r6,20639
  80ac04:	01cff4f4 	movhi	r7,16339
  80ac08:	319e7ec4 	addi	r6,r6,31227
  80ac0c:	39d104c4 	addi	r7,r7,17427
  80ac10:	1009883a 	mov	r4,r2
  80ac14:	180b883a 	mov	r5,r3
  80ac18:	081213c0 	call	81213c <__muldf3>
  80ac1c:	100d883a 	mov	r6,r2
  80ac20:	180f883a 	mov	r7,r3
  80ac24:	a009883a 	mov	r4,r20
  80ac28:	880b883a 	mov	r5,r17
  80ac2c:	080564c0 	call	80564c <__adddf3>
  80ac30:	1009883a 	mov	r4,r2
  80ac34:	180b883a 	mov	r5,r3
  80ac38:	1029883a 	mov	r20,r2
  80ac3c:	1823883a 	mov	r17,r3
  80ac40:	08128540 	call	812854 <__fixdfsi>
  80ac44:	000d883a 	mov	r6,zero
  80ac48:	000f883a 	mov	r7,zero
  80ac4c:	a009883a 	mov	r4,r20
  80ac50:	880b883a 	mov	r5,r17
  80ac54:	d8800515 	stw	r2,20(sp)
  80ac58:	0805fd40 	call	805fd4 <__ledf2>
  80ac5c:	10028716 	blt	r2,zero,80b67c <_dtoa_r+0xc88>
  80ac60:	d8c00517 	ldw	r3,20(sp)
  80ac64:	00800584 	movi	r2,22
  80ac68:	10c27536 	bltu	r2,r3,80b640 <_dtoa_r+0xc4c>
  80ac6c:	180490fa 	slli	r2,r3,3
  80ac70:	00c02074 	movhi	r3,129
  80ac74:	18db8304 	addi	r3,r3,28172
  80ac78:	1885883a 	add	r2,r3,r2
  80ac7c:	11000017 	ldw	r4,0(r2)
  80ac80:	11400117 	ldw	r5,4(r2)
  80ac84:	900d883a 	mov	r6,r18
  80ac88:	980f883a 	mov	r7,r19
  80ac8c:	0805ef80 	call	805ef8 <__gedf2>
  80ac90:	00828d0e 	bge	zero,r2,80b6c8 <_dtoa_r+0xcd4>
  80ac94:	d9000517 	ldw	r4,20(sp)
  80ac98:	d8000e15 	stw	zero,56(sp)
  80ac9c:	213fffc4 	addi	r4,r4,-1
  80aca0:	d9000515 	stw	r4,20(sp)
  80aca4:	b42dc83a 	sub	r22,r22,r16
  80aca8:	b5bfffc4 	addi	r22,r22,-1
  80acac:	b0026f16 	blt	r22,zero,80b66c <_dtoa_r+0xc78>
  80acb0:	d8000815 	stw	zero,32(sp)
  80acb4:	d9c00517 	ldw	r7,20(sp)
  80acb8:	38026416 	blt	r7,zero,80b64c <_dtoa_r+0xc58>
  80acbc:	b1ed883a 	add	r22,r22,r7
  80acc0:	d9c00d15 	stw	r7,52(sp)
  80acc4:	d8000a15 	stw	zero,40(sp)
  80acc8:	d9800317 	ldw	r6,12(sp)
  80accc:	00800244 	movi	r2,9
  80acd0:	11811436 	bltu	r2,r6,80b124 <_dtoa_r+0x730>
  80acd4:	00800144 	movi	r2,5
  80acd8:	1184e10e 	bge	r2,r6,80c060 <_dtoa_r+0x166c>
  80acdc:	31bfff04 	addi	r6,r6,-4
  80ace0:	d9800315 	stw	r6,12(sp)
  80ace4:	0023883a 	mov	r17,zero
  80ace8:	d9800317 	ldw	r6,12(sp)
  80acec:	008000c4 	movi	r2,3
  80acf0:	30836726 	beq	r6,r2,80ba90 <_dtoa_r+0x109c>
  80acf4:	1183410e 	bge	r2,r6,80b9fc <_dtoa_r+0x1008>
  80acf8:	d9c00317 	ldw	r7,12(sp)
  80acfc:	00800104 	movi	r2,4
  80ad00:	38827c26 	beq	r7,r2,80b6f4 <_dtoa_r+0xd00>
  80ad04:	00800144 	movi	r2,5
  80ad08:	3884c41e 	bne	r7,r2,80c01c <_dtoa_r+0x1628>
  80ad0c:	00800044 	movi	r2,1
  80ad10:	d8800b15 	stw	r2,44(sp)
  80ad14:	d8c00517 	ldw	r3,20(sp)
  80ad18:	d9002217 	ldw	r4,136(sp)
  80ad1c:	1907883a 	add	r3,r3,r4
  80ad20:	19800044 	addi	r6,r3,1
  80ad24:	d8c00c15 	stw	r3,48(sp)
  80ad28:	d9800615 	stw	r6,24(sp)
  80ad2c:	0183a40e 	bge	zero,r6,80bbc0 <_dtoa_r+0x11cc>
  80ad30:	d9800617 	ldw	r6,24(sp)
  80ad34:	3021883a 	mov	r16,r6
  80ad38:	e0001115 	stw	zero,68(fp)
  80ad3c:	008005c4 	movi	r2,23
  80ad40:	1184c92e 	bgeu	r2,r6,80c068 <_dtoa_r+0x1674>
  80ad44:	00c00044 	movi	r3,1
  80ad48:	00800104 	movi	r2,4
  80ad4c:	1085883a 	add	r2,r2,r2
  80ad50:	11000504 	addi	r4,r2,20
  80ad54:	180b883a 	mov	r5,r3
  80ad58:	18c00044 	addi	r3,r3,1
  80ad5c:	313ffb2e 	bgeu	r6,r4,80ad4c <__alt_mem_onchip_mem+0xff802d4c>
  80ad60:	e1401115 	stw	r5,68(fp)
  80ad64:	e009883a 	mov	r4,fp
  80ad68:	080d7000 	call	80d700 <_Balloc>
  80ad6c:	d8800715 	stw	r2,28(sp)
  80ad70:	e0801015 	stw	r2,64(fp)
  80ad74:	00800384 	movi	r2,14
  80ad78:	1400f736 	bltu	r2,r16,80b158 <_dtoa_r+0x764>
  80ad7c:	8800f626 	beq	r17,zero,80b158 <_dtoa_r+0x764>
  80ad80:	d9c00517 	ldw	r7,20(sp)
  80ad84:	01c39a0e 	bge	zero,r7,80bbf0 <_dtoa_r+0x11fc>
  80ad88:	388003cc 	andi	r2,r7,15
  80ad8c:	100490fa 	slli	r2,r2,3
  80ad90:	382bd13a 	srai	r21,r7,4
  80ad94:	00c02074 	movhi	r3,129
  80ad98:	18db8304 	addi	r3,r3,28172
  80ad9c:	1885883a 	add	r2,r3,r2
  80ada0:	a8c0040c 	andi	r3,r21,16
  80ada4:	12400017 	ldw	r9,0(r2)
  80ada8:	12000117 	ldw	r8,4(r2)
  80adac:	18037926 	beq	r3,zero,80bb94 <_dtoa_r+0x11a0>
  80adb0:	00802074 	movhi	r2,129
  80adb4:	109b7904 	addi	r2,r2,28132
  80adb8:	11800817 	ldw	r6,32(r2)
  80adbc:	11c00917 	ldw	r7,36(r2)
  80adc0:	9009883a 	mov	r4,r18
  80adc4:	980b883a 	mov	r5,r19
  80adc8:	da001715 	stw	r8,92(sp)
  80adcc:	da401615 	stw	r9,88(sp)
  80add0:	08117cc0 	call	8117cc <__divdf3>
  80add4:	da001717 	ldw	r8,92(sp)
  80add8:	da401617 	ldw	r9,88(sp)
  80addc:	ad4003cc 	andi	r21,r21,15
  80ade0:	040000c4 	movi	r16,3
  80ade4:	1023883a 	mov	r17,r2
  80ade8:	1829883a 	mov	r20,r3
  80adec:	a8001126 	beq	r21,zero,80ae34 <_dtoa_r+0x440>
  80adf0:	05c02074 	movhi	r23,129
  80adf4:	bddb7904 	addi	r23,r23,28132
  80adf8:	4805883a 	mov	r2,r9
  80adfc:	4007883a 	mov	r3,r8
  80ae00:	a980004c 	andi	r6,r21,1
  80ae04:	1009883a 	mov	r4,r2
  80ae08:	a82bd07a 	srai	r21,r21,1
  80ae0c:	180b883a 	mov	r5,r3
  80ae10:	30000426 	beq	r6,zero,80ae24 <_dtoa_r+0x430>
  80ae14:	b9800017 	ldw	r6,0(r23)
  80ae18:	b9c00117 	ldw	r7,4(r23)
  80ae1c:	84000044 	addi	r16,r16,1
  80ae20:	081213c0 	call	81213c <__muldf3>
  80ae24:	bdc00204 	addi	r23,r23,8
  80ae28:	a83ff51e 	bne	r21,zero,80ae00 <__alt_mem_onchip_mem+0xff802e00>
  80ae2c:	1013883a 	mov	r9,r2
  80ae30:	1811883a 	mov	r8,r3
  80ae34:	480d883a 	mov	r6,r9
  80ae38:	400f883a 	mov	r7,r8
  80ae3c:	8809883a 	mov	r4,r17
  80ae40:	a00b883a 	mov	r5,r20
  80ae44:	08117cc0 	call	8117cc <__divdf3>
  80ae48:	d8800f15 	stw	r2,60(sp)
  80ae4c:	d8c01015 	stw	r3,64(sp)
  80ae50:	d8c00e17 	ldw	r3,56(sp)
  80ae54:	18000626 	beq	r3,zero,80ae70 <_dtoa_r+0x47c>
  80ae58:	d9000f17 	ldw	r4,60(sp)
  80ae5c:	d9401017 	ldw	r5,64(sp)
  80ae60:	000d883a 	mov	r6,zero
  80ae64:	01cffc34 	movhi	r7,16368
  80ae68:	0805fd40 	call	805fd4 <__ledf2>
  80ae6c:	10040b16 	blt	r2,zero,80be9c <_dtoa_r+0x14a8>
  80ae70:	8009883a 	mov	r4,r16
  80ae74:	08069c40 	call	8069c4 <__floatsidf>
  80ae78:	d9800f17 	ldw	r6,60(sp)
  80ae7c:	d9c01017 	ldw	r7,64(sp)
  80ae80:	1009883a 	mov	r4,r2
  80ae84:	180b883a 	mov	r5,r3
  80ae88:	081213c0 	call	81213c <__muldf3>
  80ae8c:	000d883a 	mov	r6,zero
  80ae90:	01d00734 	movhi	r7,16412
  80ae94:	1009883a 	mov	r4,r2
  80ae98:	180b883a 	mov	r5,r3
  80ae9c:	080564c0 	call	80564c <__adddf3>
  80aea0:	1021883a 	mov	r16,r2
  80aea4:	d8800617 	ldw	r2,24(sp)
  80aea8:	047f3034 	movhi	r17,64704
  80aeac:	1c63883a 	add	r17,r3,r17
  80aeb0:	10031826 	beq	r2,zero,80bb14 <_dtoa_r+0x1120>
  80aeb4:	d8c00517 	ldw	r3,20(sp)
  80aeb8:	db000617 	ldw	r12,24(sp)
  80aebc:	d8c01315 	stw	r3,76(sp)
  80aec0:	d9000b17 	ldw	r4,44(sp)
  80aec4:	20038f26 	beq	r4,zero,80bd04 <_dtoa_r+0x1310>
  80aec8:	60bfffc4 	addi	r2,r12,-1
  80aecc:	100490fa 	slli	r2,r2,3
  80aed0:	00c02074 	movhi	r3,129
  80aed4:	18db8304 	addi	r3,r3,28172
  80aed8:	1885883a 	add	r2,r3,r2
  80aedc:	11800017 	ldw	r6,0(r2)
  80aee0:	11c00117 	ldw	r7,4(r2)
  80aee4:	d8800717 	ldw	r2,28(sp)
  80aee8:	0009883a 	mov	r4,zero
  80aeec:	014ff834 	movhi	r5,16352
  80aef0:	db001615 	stw	r12,88(sp)
  80aef4:	15c00044 	addi	r23,r2,1
  80aef8:	08117cc0 	call	8117cc <__divdf3>
  80aefc:	800d883a 	mov	r6,r16
  80af00:	880f883a 	mov	r7,r17
  80af04:	1009883a 	mov	r4,r2
  80af08:	180b883a 	mov	r5,r3
  80af0c:	08060c80 	call	8060c8 <__subdf3>
  80af10:	d9401017 	ldw	r5,64(sp)
  80af14:	d9000f17 	ldw	r4,60(sp)
  80af18:	102b883a 	mov	r21,r2
  80af1c:	d8c01215 	stw	r3,72(sp)
  80af20:	08128540 	call	812854 <__fixdfsi>
  80af24:	1009883a 	mov	r4,r2
  80af28:	1029883a 	mov	r20,r2
  80af2c:	08069c40 	call	8069c4 <__floatsidf>
  80af30:	d9000f17 	ldw	r4,60(sp)
  80af34:	d9401017 	ldw	r5,64(sp)
  80af38:	100d883a 	mov	r6,r2
  80af3c:	180f883a 	mov	r7,r3
  80af40:	08060c80 	call	8060c8 <__subdf3>
  80af44:	1823883a 	mov	r17,r3
  80af48:	d8c00717 	ldw	r3,28(sp)
  80af4c:	d9401217 	ldw	r5,72(sp)
  80af50:	a2000c04 	addi	r8,r20,48
  80af54:	1021883a 	mov	r16,r2
  80af58:	1a000005 	stb	r8,0(r3)
  80af5c:	800d883a 	mov	r6,r16
  80af60:	880f883a 	mov	r7,r17
  80af64:	a809883a 	mov	r4,r21
  80af68:	4029883a 	mov	r20,r8
  80af6c:	0805ef80 	call	805ef8 <__gedf2>
  80af70:	00841d16 	blt	zero,r2,80bfe8 <_dtoa_r+0x15f4>
  80af74:	800d883a 	mov	r6,r16
  80af78:	880f883a 	mov	r7,r17
  80af7c:	0009883a 	mov	r4,zero
  80af80:	014ffc34 	movhi	r5,16368
  80af84:	08060c80 	call	8060c8 <__subdf3>
  80af88:	d9401217 	ldw	r5,72(sp)
  80af8c:	100d883a 	mov	r6,r2
  80af90:	180f883a 	mov	r7,r3
  80af94:	a809883a 	mov	r4,r21
  80af98:	0805ef80 	call	805ef8 <__gedf2>
  80af9c:	db001617 	ldw	r12,88(sp)
  80afa0:	00840e16 	blt	zero,r2,80bfdc <_dtoa_r+0x15e8>
  80afa4:	00800044 	movi	r2,1
  80afa8:	13006b0e 	bge	r2,r12,80b158 <_dtoa_r+0x764>
  80afac:	d9000717 	ldw	r4,28(sp)
  80afb0:	dd800f15 	stw	r22,60(sp)
  80afb4:	dcc01015 	stw	r19,64(sp)
  80afb8:	2319883a 	add	r12,r4,r12
  80afbc:	dcc01217 	ldw	r19,72(sp)
  80afc0:	602d883a 	mov	r22,r12
  80afc4:	dc801215 	stw	r18,72(sp)
  80afc8:	b825883a 	mov	r18,r23
  80afcc:	00000906 	br	80aff4 <_dtoa_r+0x600>
  80afd0:	08060c80 	call	8060c8 <__subdf3>
  80afd4:	a80d883a 	mov	r6,r21
  80afd8:	980f883a 	mov	r7,r19
  80afdc:	1009883a 	mov	r4,r2
  80afe0:	180b883a 	mov	r5,r3
  80afe4:	0805fd40 	call	805fd4 <__ledf2>
  80afe8:	1003e816 	blt	r2,zero,80bf8c <_dtoa_r+0x1598>
  80afec:	b825883a 	mov	r18,r23
  80aff0:	bd83e926 	beq	r23,r22,80bf98 <_dtoa_r+0x15a4>
  80aff4:	a809883a 	mov	r4,r21
  80aff8:	980b883a 	mov	r5,r19
  80affc:	000d883a 	mov	r6,zero
  80b000:	01d00934 	movhi	r7,16420
  80b004:	081213c0 	call	81213c <__muldf3>
  80b008:	000d883a 	mov	r6,zero
  80b00c:	01d00934 	movhi	r7,16420
  80b010:	8009883a 	mov	r4,r16
  80b014:	880b883a 	mov	r5,r17
  80b018:	102b883a 	mov	r21,r2
  80b01c:	1827883a 	mov	r19,r3
  80b020:	081213c0 	call	81213c <__muldf3>
  80b024:	180b883a 	mov	r5,r3
  80b028:	1009883a 	mov	r4,r2
  80b02c:	1821883a 	mov	r16,r3
  80b030:	1023883a 	mov	r17,r2
  80b034:	08128540 	call	812854 <__fixdfsi>
  80b038:	1009883a 	mov	r4,r2
  80b03c:	1029883a 	mov	r20,r2
  80b040:	08069c40 	call	8069c4 <__floatsidf>
  80b044:	8809883a 	mov	r4,r17
  80b048:	800b883a 	mov	r5,r16
  80b04c:	100d883a 	mov	r6,r2
  80b050:	180f883a 	mov	r7,r3
  80b054:	08060c80 	call	8060c8 <__subdf3>
  80b058:	a5000c04 	addi	r20,r20,48
  80b05c:	a80d883a 	mov	r6,r21
  80b060:	980f883a 	mov	r7,r19
  80b064:	1009883a 	mov	r4,r2
  80b068:	180b883a 	mov	r5,r3
  80b06c:	95000005 	stb	r20,0(r18)
  80b070:	1021883a 	mov	r16,r2
  80b074:	1823883a 	mov	r17,r3
  80b078:	0805fd40 	call	805fd4 <__ledf2>
  80b07c:	bdc00044 	addi	r23,r23,1
  80b080:	800d883a 	mov	r6,r16
  80b084:	880f883a 	mov	r7,r17
  80b088:	0009883a 	mov	r4,zero
  80b08c:	014ffc34 	movhi	r5,16368
  80b090:	103fcf0e 	bge	r2,zero,80afd0 <__alt_mem_onchip_mem+0xff802fd0>
  80b094:	d8c01317 	ldw	r3,76(sp)
  80b098:	d8c00515 	stw	r3,20(sp)
  80b09c:	d9400917 	ldw	r5,36(sp)
  80b0a0:	e009883a 	mov	r4,fp
  80b0a4:	080d7a80 	call	80d7a8 <_Bfree>
  80b0a8:	d9000517 	ldw	r4,20(sp)
  80b0ac:	d9802317 	ldw	r6,140(sp)
  80b0b0:	d9c02517 	ldw	r7,148(sp)
  80b0b4:	b8000005 	stb	zero,0(r23)
  80b0b8:	20800044 	addi	r2,r4,1
  80b0bc:	30800015 	stw	r2,0(r6)
  80b0c0:	3802aa26 	beq	r7,zero,80bb6c <_dtoa_r+0x1178>
  80b0c4:	3dc00015 	stw	r23,0(r7)
  80b0c8:	d8800717 	ldw	r2,28(sp)
  80b0cc:	003e7906 	br	80aab4 <__alt_mem_onchip_mem+0xff802ab4>
  80b0d0:	00800434 	movhi	r2,16
  80b0d4:	10bfffc4 	addi	r2,r2,-1
  80b0d8:	88a2703a 	and	r17,r17,r2
  80b0dc:	883e851e 	bne	r17,zero,80aaf4 <__alt_mem_onchip_mem+0xff802af4>
  80b0e0:	00802074 	movhi	r2,129
  80b0e4:	109b6504 	addi	r2,r2,28052
  80b0e8:	003e8406 	br	80aafc <__alt_mem_onchip_mem+0xff802afc>
  80b0ec:	10c00204 	addi	r3,r2,8
  80b0f0:	003e8706 	br	80ab10 <__alt_mem_onchip_mem+0xff802b10>
  80b0f4:	01400434 	movhi	r5,16
  80b0f8:	297fffc4 	addi	r5,r5,-1
  80b0fc:	994a703a 	and	r5,r19,r5
  80b100:	9009883a 	mov	r4,r18
  80b104:	843f0044 	addi	r16,r16,-1023
  80b108:	294ffc34 	orhi	r5,r5,16368
  80b10c:	dd800217 	ldw	r22,8(sp)
  80b110:	d8001115 	stw	zero,68(sp)
  80b114:	003ea506 	br	80abac <__alt_mem_onchip_mem+0xff802bac>
  80b118:	00802074 	movhi	r2,129
  80b11c:	109b5c04 	addi	r2,r2,28016
  80b120:	003e6406 	br	80aab4 <__alt_mem_onchip_mem+0xff802ab4>
  80b124:	e0001115 	stw	zero,68(fp)
  80b128:	000b883a 	mov	r5,zero
  80b12c:	e009883a 	mov	r4,fp
  80b130:	080d7000 	call	80d700 <_Balloc>
  80b134:	01bfffc4 	movi	r6,-1
  80b138:	01c00044 	movi	r7,1
  80b13c:	d8800715 	stw	r2,28(sp)
  80b140:	d9800c15 	stw	r6,48(sp)
  80b144:	e0801015 	stw	r2,64(fp)
  80b148:	d8000315 	stw	zero,12(sp)
  80b14c:	d9c00b15 	stw	r7,44(sp)
  80b150:	d9800615 	stw	r6,24(sp)
  80b154:	d8002215 	stw	zero,136(sp)
  80b158:	d8800117 	ldw	r2,4(sp)
  80b15c:	10008916 	blt	r2,zero,80b384 <_dtoa_r+0x990>
  80b160:	d9000517 	ldw	r4,20(sp)
  80b164:	00c00384 	movi	r3,14
  80b168:	19008616 	blt	r3,r4,80b384 <_dtoa_r+0x990>
  80b16c:	200490fa 	slli	r2,r4,3
  80b170:	00c02074 	movhi	r3,129
  80b174:	d9802217 	ldw	r6,136(sp)
  80b178:	18db8304 	addi	r3,r3,28172
  80b17c:	1885883a 	add	r2,r3,r2
  80b180:	14000017 	ldw	r16,0(r2)
  80b184:	14400117 	ldw	r17,4(r2)
  80b188:	30016316 	blt	r6,zero,80b718 <_dtoa_r+0xd24>
  80b18c:	800d883a 	mov	r6,r16
  80b190:	880f883a 	mov	r7,r17
  80b194:	9009883a 	mov	r4,r18
  80b198:	980b883a 	mov	r5,r19
  80b19c:	08117cc0 	call	8117cc <__divdf3>
  80b1a0:	180b883a 	mov	r5,r3
  80b1a4:	1009883a 	mov	r4,r2
  80b1a8:	08128540 	call	812854 <__fixdfsi>
  80b1ac:	1009883a 	mov	r4,r2
  80b1b0:	102b883a 	mov	r21,r2
  80b1b4:	08069c40 	call	8069c4 <__floatsidf>
  80b1b8:	800d883a 	mov	r6,r16
  80b1bc:	880f883a 	mov	r7,r17
  80b1c0:	1009883a 	mov	r4,r2
  80b1c4:	180b883a 	mov	r5,r3
  80b1c8:	081213c0 	call	81213c <__muldf3>
  80b1cc:	100d883a 	mov	r6,r2
  80b1d0:	180f883a 	mov	r7,r3
  80b1d4:	9009883a 	mov	r4,r18
  80b1d8:	980b883a 	mov	r5,r19
  80b1dc:	08060c80 	call	8060c8 <__subdf3>
  80b1e0:	d9c00717 	ldw	r7,28(sp)
  80b1e4:	1009883a 	mov	r4,r2
  80b1e8:	a8800c04 	addi	r2,r21,48
  80b1ec:	38800005 	stb	r2,0(r7)
  80b1f0:	3dc00044 	addi	r23,r7,1
  80b1f4:	d9c00617 	ldw	r7,24(sp)
  80b1f8:	01800044 	movi	r6,1
  80b1fc:	180b883a 	mov	r5,r3
  80b200:	2005883a 	mov	r2,r4
  80b204:	39803826 	beq	r7,r6,80b2e8 <_dtoa_r+0x8f4>
  80b208:	000d883a 	mov	r6,zero
  80b20c:	01d00934 	movhi	r7,16420
  80b210:	081213c0 	call	81213c <__muldf3>
  80b214:	000d883a 	mov	r6,zero
  80b218:	000f883a 	mov	r7,zero
  80b21c:	1009883a 	mov	r4,r2
  80b220:	180b883a 	mov	r5,r3
  80b224:	1025883a 	mov	r18,r2
  80b228:	1827883a 	mov	r19,r3
  80b22c:	08120b40 	call	8120b4 <__eqdf2>
  80b230:	103f9a26 	beq	r2,zero,80b09c <__alt_mem_onchip_mem+0xff80309c>
  80b234:	d9c00617 	ldw	r7,24(sp)
  80b238:	d8c00717 	ldw	r3,28(sp)
  80b23c:	b829883a 	mov	r20,r23
  80b240:	38bfffc4 	addi	r2,r7,-1
  80b244:	18ad883a 	add	r22,r3,r2
  80b248:	00000a06 	br	80b274 <_dtoa_r+0x880>
  80b24c:	081213c0 	call	81213c <__muldf3>
  80b250:	000d883a 	mov	r6,zero
  80b254:	000f883a 	mov	r7,zero
  80b258:	1009883a 	mov	r4,r2
  80b25c:	180b883a 	mov	r5,r3
  80b260:	1025883a 	mov	r18,r2
  80b264:	1827883a 	mov	r19,r3
  80b268:	b829883a 	mov	r20,r23
  80b26c:	08120b40 	call	8120b4 <__eqdf2>
  80b270:	103f8a26 	beq	r2,zero,80b09c <__alt_mem_onchip_mem+0xff80309c>
  80b274:	800d883a 	mov	r6,r16
  80b278:	880f883a 	mov	r7,r17
  80b27c:	9009883a 	mov	r4,r18
  80b280:	980b883a 	mov	r5,r19
  80b284:	08117cc0 	call	8117cc <__divdf3>
  80b288:	180b883a 	mov	r5,r3
  80b28c:	1009883a 	mov	r4,r2
  80b290:	08128540 	call	812854 <__fixdfsi>
  80b294:	1009883a 	mov	r4,r2
  80b298:	102b883a 	mov	r21,r2
  80b29c:	08069c40 	call	8069c4 <__floatsidf>
  80b2a0:	800d883a 	mov	r6,r16
  80b2a4:	880f883a 	mov	r7,r17
  80b2a8:	1009883a 	mov	r4,r2
  80b2ac:	180b883a 	mov	r5,r3
  80b2b0:	081213c0 	call	81213c <__muldf3>
  80b2b4:	100d883a 	mov	r6,r2
  80b2b8:	180f883a 	mov	r7,r3
  80b2bc:	9009883a 	mov	r4,r18
  80b2c0:	980b883a 	mov	r5,r19
  80b2c4:	08060c80 	call	8060c8 <__subdf3>
  80b2c8:	aa000c04 	addi	r8,r21,48
  80b2cc:	a2000005 	stb	r8,0(r20)
  80b2d0:	000d883a 	mov	r6,zero
  80b2d4:	01d00934 	movhi	r7,16420
  80b2d8:	1009883a 	mov	r4,r2
  80b2dc:	180b883a 	mov	r5,r3
  80b2e0:	a5c00044 	addi	r23,r20,1
  80b2e4:	b53fd91e 	bne	r22,r20,80b24c <__alt_mem_onchip_mem+0xff80324c>
  80b2e8:	100d883a 	mov	r6,r2
  80b2ec:	180f883a 	mov	r7,r3
  80b2f0:	1009883a 	mov	r4,r2
  80b2f4:	180b883a 	mov	r5,r3
  80b2f8:	080564c0 	call	80564c <__adddf3>
  80b2fc:	100d883a 	mov	r6,r2
  80b300:	180f883a 	mov	r7,r3
  80b304:	8009883a 	mov	r4,r16
  80b308:	880b883a 	mov	r5,r17
  80b30c:	1027883a 	mov	r19,r2
  80b310:	1825883a 	mov	r18,r3
  80b314:	0805fd40 	call	805fd4 <__ledf2>
  80b318:	10000816 	blt	r2,zero,80b33c <_dtoa_r+0x948>
  80b31c:	980d883a 	mov	r6,r19
  80b320:	900f883a 	mov	r7,r18
  80b324:	8009883a 	mov	r4,r16
  80b328:	880b883a 	mov	r5,r17
  80b32c:	08120b40 	call	8120b4 <__eqdf2>
  80b330:	103f5a1e 	bne	r2,zero,80b09c <__alt_mem_onchip_mem+0xff80309c>
  80b334:	ad40004c 	andi	r21,r21,1
  80b338:	a83f5826 	beq	r21,zero,80b09c <__alt_mem_onchip_mem+0xff80309c>
  80b33c:	bd3fffc3 	ldbu	r20,-1(r23)
  80b340:	b8bfffc4 	addi	r2,r23,-1
  80b344:	1007883a 	mov	r3,r2
  80b348:	01400e44 	movi	r5,57
  80b34c:	d9800717 	ldw	r6,28(sp)
  80b350:	00000506 	br	80b368 <_dtoa_r+0x974>
  80b354:	18ffffc4 	addi	r3,r3,-1
  80b358:	11824726 	beq	r2,r6,80bc78 <_dtoa_r+0x1284>
  80b35c:	1d000003 	ldbu	r20,0(r3)
  80b360:	102f883a 	mov	r23,r2
  80b364:	10bfffc4 	addi	r2,r2,-1
  80b368:	a1003fcc 	andi	r4,r20,255
  80b36c:	2100201c 	xori	r4,r4,128
  80b370:	213fe004 	addi	r4,r4,-128
  80b374:	217ff726 	beq	r4,r5,80b354 <__alt_mem_onchip_mem+0xff803354>
  80b378:	a2000044 	addi	r8,r20,1
  80b37c:	12000005 	stb	r8,0(r2)
  80b380:	003f4606 	br	80b09c <__alt_mem_onchip_mem+0xff80309c>
  80b384:	d9000b17 	ldw	r4,44(sp)
  80b388:	2000c826 	beq	r4,zero,80b6ac <_dtoa_r+0xcb8>
  80b38c:	d9800317 	ldw	r6,12(sp)
  80b390:	00c00044 	movi	r3,1
  80b394:	1980f90e 	bge	r3,r6,80b77c <_dtoa_r+0xd88>
  80b398:	d8800617 	ldw	r2,24(sp)
  80b39c:	d8c00a17 	ldw	r3,40(sp)
  80b3a0:	157fffc4 	addi	r21,r2,-1
  80b3a4:	1d41f316 	blt	r3,r21,80bb74 <_dtoa_r+0x1180>
  80b3a8:	1d6bc83a 	sub	r21,r3,r21
  80b3ac:	d9c00617 	ldw	r7,24(sp)
  80b3b0:	3802aa16 	blt	r7,zero,80be5c <_dtoa_r+0x1468>
  80b3b4:	dd000817 	ldw	r20,32(sp)
  80b3b8:	d8800617 	ldw	r2,24(sp)
  80b3bc:	d8c00817 	ldw	r3,32(sp)
  80b3c0:	01400044 	movi	r5,1
  80b3c4:	e009883a 	mov	r4,fp
  80b3c8:	1887883a 	add	r3,r3,r2
  80b3cc:	d8c00815 	stw	r3,32(sp)
  80b3d0:	b0ad883a 	add	r22,r22,r2
  80b3d4:	080db0c0 	call	80db0c <__i2b>
  80b3d8:	1023883a 	mov	r17,r2
  80b3dc:	a0000826 	beq	r20,zero,80b400 <_dtoa_r+0xa0c>
  80b3e0:	0580070e 	bge	zero,r22,80b400 <_dtoa_r+0xa0c>
  80b3e4:	a005883a 	mov	r2,r20
  80b3e8:	b500b916 	blt	r22,r20,80b6d0 <_dtoa_r+0xcdc>
  80b3ec:	d9000817 	ldw	r4,32(sp)
  80b3f0:	a0a9c83a 	sub	r20,r20,r2
  80b3f4:	b0adc83a 	sub	r22,r22,r2
  80b3f8:	2089c83a 	sub	r4,r4,r2
  80b3fc:	d9000815 	stw	r4,32(sp)
  80b400:	d9800a17 	ldw	r6,40(sp)
  80b404:	0181810e 	bge	zero,r6,80ba0c <_dtoa_r+0x1018>
  80b408:	d9c00b17 	ldw	r7,44(sp)
  80b40c:	3800b326 	beq	r7,zero,80b6dc <_dtoa_r+0xce8>
  80b410:	a800b226 	beq	r21,zero,80b6dc <_dtoa_r+0xce8>
  80b414:	880b883a 	mov	r5,r17
  80b418:	a80d883a 	mov	r6,r21
  80b41c:	e009883a 	mov	r4,fp
  80b420:	080dd400 	call	80dd40 <__pow5mult>
  80b424:	d9800917 	ldw	r6,36(sp)
  80b428:	100b883a 	mov	r5,r2
  80b42c:	e009883a 	mov	r4,fp
  80b430:	1023883a 	mov	r17,r2
  80b434:	080db480 	call	80db48 <__multiply>
  80b438:	1021883a 	mov	r16,r2
  80b43c:	d8800a17 	ldw	r2,40(sp)
  80b440:	d9400917 	ldw	r5,36(sp)
  80b444:	e009883a 	mov	r4,fp
  80b448:	1545c83a 	sub	r2,r2,r21
  80b44c:	d8800a15 	stw	r2,40(sp)
  80b450:	080d7a80 	call	80d7a8 <_Bfree>
  80b454:	d8c00a17 	ldw	r3,40(sp)
  80b458:	18009f1e 	bne	r3,zero,80b6d8 <_dtoa_r+0xce4>
  80b45c:	05c00044 	movi	r23,1
  80b460:	e009883a 	mov	r4,fp
  80b464:	b80b883a 	mov	r5,r23
  80b468:	080db0c0 	call	80db0c <__i2b>
  80b46c:	d9000d17 	ldw	r4,52(sp)
  80b470:	102b883a 	mov	r21,r2
  80b474:	2000ce26 	beq	r4,zero,80b7b0 <_dtoa_r+0xdbc>
  80b478:	200d883a 	mov	r6,r4
  80b47c:	100b883a 	mov	r5,r2
  80b480:	e009883a 	mov	r4,fp
  80b484:	080dd400 	call	80dd40 <__pow5mult>
  80b488:	d9800317 	ldw	r6,12(sp)
  80b48c:	102b883a 	mov	r21,r2
  80b490:	b981810e 	bge	r23,r6,80ba98 <_dtoa_r+0x10a4>
  80b494:	0027883a 	mov	r19,zero
  80b498:	a8800417 	ldw	r2,16(r21)
  80b49c:	05c00804 	movi	r23,32
  80b4a0:	10800104 	addi	r2,r2,4
  80b4a4:	1085883a 	add	r2,r2,r2
  80b4a8:	1085883a 	add	r2,r2,r2
  80b4ac:	a885883a 	add	r2,r21,r2
  80b4b0:	11000017 	ldw	r4,0(r2)
  80b4b4:	080d9f40 	call	80d9f4 <__hi0bits>
  80b4b8:	b885c83a 	sub	r2,r23,r2
  80b4bc:	1585883a 	add	r2,r2,r22
  80b4c0:	108007cc 	andi	r2,r2,31
  80b4c4:	1000b326 	beq	r2,zero,80b794 <_dtoa_r+0xda0>
  80b4c8:	00c00804 	movi	r3,32
  80b4cc:	1887c83a 	sub	r3,r3,r2
  80b4d0:	01000104 	movi	r4,4
  80b4d4:	20c2cd0e 	bge	r4,r3,80c00c <_dtoa_r+0x1618>
  80b4d8:	00c00704 	movi	r3,28
  80b4dc:	1885c83a 	sub	r2,r3,r2
  80b4e0:	d8c00817 	ldw	r3,32(sp)
  80b4e4:	a0a9883a 	add	r20,r20,r2
  80b4e8:	b0ad883a 	add	r22,r22,r2
  80b4ec:	1887883a 	add	r3,r3,r2
  80b4f0:	d8c00815 	stw	r3,32(sp)
  80b4f4:	d9800817 	ldw	r6,32(sp)
  80b4f8:	0180040e 	bge	zero,r6,80b50c <_dtoa_r+0xb18>
  80b4fc:	800b883a 	mov	r5,r16
  80b500:	e009883a 	mov	r4,fp
  80b504:	080de800 	call	80de80 <__lshift>
  80b508:	1021883a 	mov	r16,r2
  80b50c:	0580050e 	bge	zero,r22,80b524 <_dtoa_r+0xb30>
  80b510:	a80b883a 	mov	r5,r21
  80b514:	b00d883a 	mov	r6,r22
  80b518:	e009883a 	mov	r4,fp
  80b51c:	080de800 	call	80de80 <__lshift>
  80b520:	102b883a 	mov	r21,r2
  80b524:	d9c00e17 	ldw	r7,56(sp)
  80b528:	3801211e 	bne	r7,zero,80b9b0 <_dtoa_r+0xfbc>
  80b52c:	d9800617 	ldw	r6,24(sp)
  80b530:	0181380e 	bge	zero,r6,80ba14 <_dtoa_r+0x1020>
  80b534:	d8c00b17 	ldw	r3,44(sp)
  80b538:	1800ab1e 	bne	r3,zero,80b7e8 <_dtoa_r+0xdf4>
  80b53c:	dc800717 	ldw	r18,28(sp)
  80b540:	dcc00617 	ldw	r19,24(sp)
  80b544:	9029883a 	mov	r20,r18
  80b548:	00000206 	br	80b554 <_dtoa_r+0xb60>
  80b54c:	080d7d00 	call	80d7d0 <__multadd>
  80b550:	1021883a 	mov	r16,r2
  80b554:	a80b883a 	mov	r5,r21
  80b558:	8009883a 	mov	r4,r16
  80b55c:	080a7f40 	call	80a7f4 <quorem>
  80b560:	10800c04 	addi	r2,r2,48
  80b564:	90800005 	stb	r2,0(r18)
  80b568:	94800044 	addi	r18,r18,1
  80b56c:	9507c83a 	sub	r3,r18,r20
  80b570:	000f883a 	mov	r7,zero
  80b574:	01800284 	movi	r6,10
  80b578:	800b883a 	mov	r5,r16
  80b57c:	e009883a 	mov	r4,fp
  80b580:	1cfff216 	blt	r3,r19,80b54c <__alt_mem_onchip_mem+0xff80354c>
  80b584:	1011883a 	mov	r8,r2
  80b588:	d8800617 	ldw	r2,24(sp)
  80b58c:	0082370e 	bge	zero,r2,80be6c <_dtoa_r+0x1478>
  80b590:	d9000717 	ldw	r4,28(sp)
  80b594:	0025883a 	mov	r18,zero
  80b598:	20af883a 	add	r23,r4,r2
  80b59c:	01800044 	movi	r6,1
  80b5a0:	800b883a 	mov	r5,r16
  80b5a4:	e009883a 	mov	r4,fp
  80b5a8:	da001715 	stw	r8,92(sp)
  80b5ac:	080de800 	call	80de80 <__lshift>
  80b5b0:	a80b883a 	mov	r5,r21
  80b5b4:	1009883a 	mov	r4,r2
  80b5b8:	d8800915 	stw	r2,36(sp)
  80b5bc:	080dfc80 	call	80dfc8 <__mcmp>
  80b5c0:	da001717 	ldw	r8,92(sp)
  80b5c4:	0081800e 	bge	zero,r2,80bbc8 <_dtoa_r+0x11d4>
  80b5c8:	b93fffc3 	ldbu	r4,-1(r23)
  80b5cc:	b8bfffc4 	addi	r2,r23,-1
  80b5d0:	1007883a 	mov	r3,r2
  80b5d4:	01800e44 	movi	r6,57
  80b5d8:	d9c00717 	ldw	r7,28(sp)
  80b5dc:	00000506 	br	80b5f4 <_dtoa_r+0xc00>
  80b5e0:	18ffffc4 	addi	r3,r3,-1
  80b5e4:	11c12326 	beq	r2,r7,80ba74 <_dtoa_r+0x1080>
  80b5e8:	19000003 	ldbu	r4,0(r3)
  80b5ec:	102f883a 	mov	r23,r2
  80b5f0:	10bfffc4 	addi	r2,r2,-1
  80b5f4:	21403fcc 	andi	r5,r4,255
  80b5f8:	2940201c 	xori	r5,r5,128
  80b5fc:	297fe004 	addi	r5,r5,-128
  80b600:	29bff726 	beq	r5,r6,80b5e0 <__alt_mem_onchip_mem+0xff8035e0>
  80b604:	21000044 	addi	r4,r4,1
  80b608:	11000005 	stb	r4,0(r2)
  80b60c:	a80b883a 	mov	r5,r21
  80b610:	e009883a 	mov	r4,fp
  80b614:	080d7a80 	call	80d7a8 <_Bfree>
  80b618:	883ea026 	beq	r17,zero,80b09c <__alt_mem_onchip_mem+0xff80309c>
  80b61c:	90000426 	beq	r18,zero,80b630 <_dtoa_r+0xc3c>
  80b620:	94400326 	beq	r18,r17,80b630 <_dtoa_r+0xc3c>
  80b624:	900b883a 	mov	r5,r18
  80b628:	e009883a 	mov	r4,fp
  80b62c:	080d7a80 	call	80d7a8 <_Bfree>
  80b630:	880b883a 	mov	r5,r17
  80b634:	e009883a 	mov	r4,fp
  80b638:	080d7a80 	call	80d7a8 <_Bfree>
  80b63c:	003e9706 	br	80b09c <__alt_mem_onchip_mem+0xff80309c>
  80b640:	01800044 	movi	r6,1
  80b644:	d9800e15 	stw	r6,56(sp)
  80b648:	003d9606 	br	80aca4 <__alt_mem_onchip_mem+0xff802ca4>
  80b64c:	d8800817 	ldw	r2,32(sp)
  80b650:	d8c00517 	ldw	r3,20(sp)
  80b654:	d8000d15 	stw	zero,52(sp)
  80b658:	10c5c83a 	sub	r2,r2,r3
  80b65c:	00c9c83a 	sub	r4,zero,r3
  80b660:	d8800815 	stw	r2,32(sp)
  80b664:	d9000a15 	stw	r4,40(sp)
  80b668:	003d9706 	br	80acc8 <__alt_mem_onchip_mem+0xff802cc8>
  80b66c:	05adc83a 	sub	r22,zero,r22
  80b670:	dd800815 	stw	r22,32(sp)
  80b674:	002d883a 	mov	r22,zero
  80b678:	003d8e06 	br	80acb4 <__alt_mem_onchip_mem+0xff802cb4>
  80b67c:	d9000517 	ldw	r4,20(sp)
  80b680:	08069c40 	call	8069c4 <__floatsidf>
  80b684:	100d883a 	mov	r6,r2
  80b688:	180f883a 	mov	r7,r3
  80b68c:	a009883a 	mov	r4,r20
  80b690:	880b883a 	mov	r5,r17
  80b694:	08120b40 	call	8120b4 <__eqdf2>
  80b698:	103d7126 	beq	r2,zero,80ac60 <__alt_mem_onchip_mem+0xff802c60>
  80b69c:	d9c00517 	ldw	r7,20(sp)
  80b6a0:	39ffffc4 	addi	r7,r7,-1
  80b6a4:	d9c00515 	stw	r7,20(sp)
  80b6a8:	003d6d06 	br	80ac60 <__alt_mem_onchip_mem+0xff802c60>
  80b6ac:	dd400a17 	ldw	r21,40(sp)
  80b6b0:	dd000817 	ldw	r20,32(sp)
  80b6b4:	0023883a 	mov	r17,zero
  80b6b8:	003f4806 	br	80b3dc <__alt_mem_onchip_mem+0xff8033dc>
  80b6bc:	10e3c83a 	sub	r17,r2,r3
  80b6c0:	9448983a 	sll	r4,r18,r17
  80b6c4:	003d3206 	br	80ab90 <__alt_mem_onchip_mem+0xff802b90>
  80b6c8:	d8000e15 	stw	zero,56(sp)
  80b6cc:	003d7506 	br	80aca4 <__alt_mem_onchip_mem+0xff802ca4>
  80b6d0:	b005883a 	mov	r2,r22
  80b6d4:	003f4506 	br	80b3ec <__alt_mem_onchip_mem+0xff8033ec>
  80b6d8:	dc000915 	stw	r16,36(sp)
  80b6dc:	d9800a17 	ldw	r6,40(sp)
  80b6e0:	d9400917 	ldw	r5,36(sp)
  80b6e4:	e009883a 	mov	r4,fp
  80b6e8:	080dd400 	call	80dd40 <__pow5mult>
  80b6ec:	1021883a 	mov	r16,r2
  80b6f0:	003f5a06 	br	80b45c <__alt_mem_onchip_mem+0xff80345c>
  80b6f4:	01c00044 	movi	r7,1
  80b6f8:	d9c00b15 	stw	r7,44(sp)
  80b6fc:	d8802217 	ldw	r2,136(sp)
  80b700:	0081280e 	bge	zero,r2,80bba4 <_dtoa_r+0x11b0>
  80b704:	100d883a 	mov	r6,r2
  80b708:	1021883a 	mov	r16,r2
  80b70c:	d8800c15 	stw	r2,48(sp)
  80b710:	d8800615 	stw	r2,24(sp)
  80b714:	003d8806 	br	80ad38 <__alt_mem_onchip_mem+0xff802d38>
  80b718:	d8800617 	ldw	r2,24(sp)
  80b71c:	00be9b16 	blt	zero,r2,80b18c <__alt_mem_onchip_mem+0xff80318c>
  80b720:	10010f1e 	bne	r2,zero,80bb60 <_dtoa_r+0x116c>
  80b724:	880b883a 	mov	r5,r17
  80b728:	000d883a 	mov	r6,zero
  80b72c:	01d00534 	movhi	r7,16404
  80b730:	8009883a 	mov	r4,r16
  80b734:	081213c0 	call	81213c <__muldf3>
  80b738:	900d883a 	mov	r6,r18
  80b73c:	980f883a 	mov	r7,r19
  80b740:	1009883a 	mov	r4,r2
  80b744:	180b883a 	mov	r5,r3
  80b748:	0805ef80 	call	805ef8 <__gedf2>
  80b74c:	002b883a 	mov	r21,zero
  80b750:	0023883a 	mov	r17,zero
  80b754:	1000bf16 	blt	r2,zero,80ba54 <_dtoa_r+0x1060>
  80b758:	d9802217 	ldw	r6,136(sp)
  80b75c:	ddc00717 	ldw	r23,28(sp)
  80b760:	018c303a 	nor	r6,zero,r6
  80b764:	d9800515 	stw	r6,20(sp)
  80b768:	a80b883a 	mov	r5,r21
  80b76c:	e009883a 	mov	r4,fp
  80b770:	080d7a80 	call	80d7a8 <_Bfree>
  80b774:	883e4926 	beq	r17,zero,80b09c <__alt_mem_onchip_mem+0xff80309c>
  80b778:	003fad06 	br	80b630 <__alt_mem_onchip_mem+0xff803630>
  80b77c:	d9c01117 	ldw	r7,68(sp)
  80b780:	3801bc26 	beq	r7,zero,80be74 <_dtoa_r+0x1480>
  80b784:	10810cc4 	addi	r2,r2,1075
  80b788:	dd400a17 	ldw	r21,40(sp)
  80b78c:	dd000817 	ldw	r20,32(sp)
  80b790:	003f0a06 	br	80b3bc <__alt_mem_onchip_mem+0xff8033bc>
  80b794:	00800704 	movi	r2,28
  80b798:	d9000817 	ldw	r4,32(sp)
  80b79c:	a0a9883a 	add	r20,r20,r2
  80b7a0:	b0ad883a 	add	r22,r22,r2
  80b7a4:	2089883a 	add	r4,r4,r2
  80b7a8:	d9000815 	stw	r4,32(sp)
  80b7ac:	003f5106 	br	80b4f4 <__alt_mem_onchip_mem+0xff8034f4>
  80b7b0:	d8c00317 	ldw	r3,12(sp)
  80b7b4:	b8c1fc0e 	bge	r23,r3,80bfa8 <_dtoa_r+0x15b4>
  80b7b8:	0027883a 	mov	r19,zero
  80b7bc:	b805883a 	mov	r2,r23
  80b7c0:	003f3e06 	br	80b4bc <__alt_mem_onchip_mem+0xff8034bc>
  80b7c4:	880b883a 	mov	r5,r17
  80b7c8:	e009883a 	mov	r4,fp
  80b7cc:	000f883a 	mov	r7,zero
  80b7d0:	01800284 	movi	r6,10
  80b7d4:	080d7d00 	call	80d7d0 <__multadd>
  80b7d8:	d9000c17 	ldw	r4,48(sp)
  80b7dc:	1023883a 	mov	r17,r2
  80b7e0:	0102040e 	bge	zero,r4,80bff4 <_dtoa_r+0x1600>
  80b7e4:	d9000615 	stw	r4,24(sp)
  80b7e8:	0500050e 	bge	zero,r20,80b800 <_dtoa_r+0xe0c>
  80b7ec:	880b883a 	mov	r5,r17
  80b7f0:	a00d883a 	mov	r6,r20
  80b7f4:	e009883a 	mov	r4,fp
  80b7f8:	080de800 	call	80de80 <__lshift>
  80b7fc:	1023883a 	mov	r17,r2
  80b800:	9801241e 	bne	r19,zero,80bc94 <_dtoa_r+0x12a0>
  80b804:	8829883a 	mov	r20,r17
  80b808:	d9000617 	ldw	r4,24(sp)
  80b80c:	dcc00717 	ldw	r19,28(sp)
  80b810:	9480004c 	andi	r18,r18,1
  80b814:	20bfffc4 	addi	r2,r4,-1
  80b818:	9885883a 	add	r2,r19,r2
  80b81c:	d8800415 	stw	r2,16(sp)
  80b820:	dc800615 	stw	r18,24(sp)
  80b824:	a80b883a 	mov	r5,r21
  80b828:	8009883a 	mov	r4,r16
  80b82c:	080a7f40 	call	80a7f4 <quorem>
  80b830:	880b883a 	mov	r5,r17
  80b834:	8009883a 	mov	r4,r16
  80b838:	102f883a 	mov	r23,r2
  80b83c:	080dfc80 	call	80dfc8 <__mcmp>
  80b840:	a80b883a 	mov	r5,r21
  80b844:	a00d883a 	mov	r6,r20
  80b848:	e009883a 	mov	r4,fp
  80b84c:	102d883a 	mov	r22,r2
  80b850:	080e0280 	call	80e028 <__mdiff>
  80b854:	1007883a 	mov	r3,r2
  80b858:	10800317 	ldw	r2,12(r2)
  80b85c:	bc800c04 	addi	r18,r23,48
  80b860:	180b883a 	mov	r5,r3
  80b864:	10004e1e 	bne	r2,zero,80b9a0 <_dtoa_r+0xfac>
  80b868:	8009883a 	mov	r4,r16
  80b86c:	d8c01615 	stw	r3,88(sp)
  80b870:	080dfc80 	call	80dfc8 <__mcmp>
  80b874:	d8c01617 	ldw	r3,88(sp)
  80b878:	e009883a 	mov	r4,fp
  80b87c:	d8801615 	stw	r2,88(sp)
  80b880:	180b883a 	mov	r5,r3
  80b884:	080d7a80 	call	80d7a8 <_Bfree>
  80b888:	d8801617 	ldw	r2,88(sp)
  80b88c:	1000041e 	bne	r2,zero,80b8a0 <_dtoa_r+0xeac>
  80b890:	d9800317 	ldw	r6,12(sp)
  80b894:	3000021e 	bne	r6,zero,80b8a0 <_dtoa_r+0xeac>
  80b898:	d8c00617 	ldw	r3,24(sp)
  80b89c:	18003726 	beq	r3,zero,80b97c <_dtoa_r+0xf88>
  80b8a0:	b0002016 	blt	r22,zero,80b924 <_dtoa_r+0xf30>
  80b8a4:	b000041e 	bne	r22,zero,80b8b8 <_dtoa_r+0xec4>
  80b8a8:	d9000317 	ldw	r4,12(sp)
  80b8ac:	2000021e 	bne	r4,zero,80b8b8 <_dtoa_r+0xec4>
  80b8b0:	d8c00617 	ldw	r3,24(sp)
  80b8b4:	18001b26 	beq	r3,zero,80b924 <_dtoa_r+0xf30>
  80b8b8:	00810716 	blt	zero,r2,80bcd8 <_dtoa_r+0x12e4>
  80b8bc:	d8c00417 	ldw	r3,16(sp)
  80b8c0:	9d800044 	addi	r22,r19,1
  80b8c4:	9c800005 	stb	r18,0(r19)
  80b8c8:	b02f883a 	mov	r23,r22
  80b8cc:	98c10626 	beq	r19,r3,80bce8 <_dtoa_r+0x12f4>
  80b8d0:	800b883a 	mov	r5,r16
  80b8d4:	000f883a 	mov	r7,zero
  80b8d8:	01800284 	movi	r6,10
  80b8dc:	e009883a 	mov	r4,fp
  80b8e0:	080d7d00 	call	80d7d0 <__multadd>
  80b8e4:	1021883a 	mov	r16,r2
  80b8e8:	000f883a 	mov	r7,zero
  80b8ec:	01800284 	movi	r6,10
  80b8f0:	880b883a 	mov	r5,r17
  80b8f4:	e009883a 	mov	r4,fp
  80b8f8:	8d002526 	beq	r17,r20,80b990 <_dtoa_r+0xf9c>
  80b8fc:	080d7d00 	call	80d7d0 <__multadd>
  80b900:	a00b883a 	mov	r5,r20
  80b904:	000f883a 	mov	r7,zero
  80b908:	01800284 	movi	r6,10
  80b90c:	e009883a 	mov	r4,fp
  80b910:	1023883a 	mov	r17,r2
  80b914:	080d7d00 	call	80d7d0 <__multadd>
  80b918:	1029883a 	mov	r20,r2
  80b91c:	b027883a 	mov	r19,r22
  80b920:	003fc006 	br	80b824 <__alt_mem_onchip_mem+0xff803824>
  80b924:	9011883a 	mov	r8,r18
  80b928:	00800e0e 	bge	zero,r2,80b964 <_dtoa_r+0xf70>
  80b92c:	800b883a 	mov	r5,r16
  80b930:	01800044 	movi	r6,1
  80b934:	e009883a 	mov	r4,fp
  80b938:	da001715 	stw	r8,92(sp)
  80b93c:	080de800 	call	80de80 <__lshift>
  80b940:	a80b883a 	mov	r5,r21
  80b944:	1009883a 	mov	r4,r2
  80b948:	1021883a 	mov	r16,r2
  80b94c:	080dfc80 	call	80dfc8 <__mcmp>
  80b950:	da001717 	ldw	r8,92(sp)
  80b954:	0081960e 	bge	zero,r2,80bfb0 <_dtoa_r+0x15bc>
  80b958:	00800e44 	movi	r2,57
  80b95c:	40817026 	beq	r8,r2,80bf20 <_dtoa_r+0x152c>
  80b960:	ba000c44 	addi	r8,r23,49
  80b964:	8825883a 	mov	r18,r17
  80b968:	9dc00044 	addi	r23,r19,1
  80b96c:	9a000005 	stb	r8,0(r19)
  80b970:	a023883a 	mov	r17,r20
  80b974:	dc000915 	stw	r16,36(sp)
  80b978:	003f2406 	br	80b60c <__alt_mem_onchip_mem+0xff80360c>
  80b97c:	00800e44 	movi	r2,57
  80b980:	9011883a 	mov	r8,r18
  80b984:	90816626 	beq	r18,r2,80bf20 <_dtoa_r+0x152c>
  80b988:	05bff516 	blt	zero,r22,80b960 <__alt_mem_onchip_mem+0xff803960>
  80b98c:	003ff506 	br	80b964 <__alt_mem_onchip_mem+0xff803964>
  80b990:	080d7d00 	call	80d7d0 <__multadd>
  80b994:	1023883a 	mov	r17,r2
  80b998:	1029883a 	mov	r20,r2
  80b99c:	003fdf06 	br	80b91c <__alt_mem_onchip_mem+0xff80391c>
  80b9a0:	e009883a 	mov	r4,fp
  80b9a4:	080d7a80 	call	80d7a8 <_Bfree>
  80b9a8:	00800044 	movi	r2,1
  80b9ac:	003fbc06 	br	80b8a0 <__alt_mem_onchip_mem+0xff8038a0>
  80b9b0:	a80b883a 	mov	r5,r21
  80b9b4:	8009883a 	mov	r4,r16
  80b9b8:	080dfc80 	call	80dfc8 <__mcmp>
  80b9bc:	103edb0e 	bge	r2,zero,80b52c <__alt_mem_onchip_mem+0xff80352c>
  80b9c0:	800b883a 	mov	r5,r16
  80b9c4:	000f883a 	mov	r7,zero
  80b9c8:	01800284 	movi	r6,10
  80b9cc:	e009883a 	mov	r4,fp
  80b9d0:	080d7d00 	call	80d7d0 <__multadd>
  80b9d4:	1021883a 	mov	r16,r2
  80b9d8:	d8800517 	ldw	r2,20(sp)
  80b9dc:	d8c00b17 	ldw	r3,44(sp)
  80b9e0:	10bfffc4 	addi	r2,r2,-1
  80b9e4:	d8800515 	stw	r2,20(sp)
  80b9e8:	183f761e 	bne	r3,zero,80b7c4 <__alt_mem_onchip_mem+0xff8037c4>
  80b9ec:	d9000c17 	ldw	r4,48(sp)
  80b9f0:	0101730e 	bge	zero,r4,80bfc0 <_dtoa_r+0x15cc>
  80b9f4:	d9000615 	stw	r4,24(sp)
  80b9f8:	003ed006 	br	80b53c <__alt_mem_onchip_mem+0xff80353c>
  80b9fc:	00800084 	movi	r2,2
  80ba00:	3081861e 	bne	r6,r2,80c01c <_dtoa_r+0x1628>
  80ba04:	d8000b15 	stw	zero,44(sp)
  80ba08:	003f3c06 	br	80b6fc <__alt_mem_onchip_mem+0xff8036fc>
  80ba0c:	dc000917 	ldw	r16,36(sp)
  80ba10:	003e9206 	br	80b45c <__alt_mem_onchip_mem+0xff80345c>
  80ba14:	d9c00317 	ldw	r7,12(sp)
  80ba18:	00800084 	movi	r2,2
  80ba1c:	11fec50e 	bge	r2,r7,80b534 <__alt_mem_onchip_mem+0xff803534>
  80ba20:	d9000617 	ldw	r4,24(sp)
  80ba24:	20013c1e 	bne	r4,zero,80bf18 <_dtoa_r+0x1524>
  80ba28:	a80b883a 	mov	r5,r21
  80ba2c:	000f883a 	mov	r7,zero
  80ba30:	01800144 	movi	r6,5
  80ba34:	e009883a 	mov	r4,fp
  80ba38:	080d7d00 	call	80d7d0 <__multadd>
  80ba3c:	100b883a 	mov	r5,r2
  80ba40:	8009883a 	mov	r4,r16
  80ba44:	102b883a 	mov	r21,r2
  80ba48:	080dfc80 	call	80dfc8 <__mcmp>
  80ba4c:	dc000915 	stw	r16,36(sp)
  80ba50:	00bf410e 	bge	zero,r2,80b758 <__alt_mem_onchip_mem+0xff803758>
  80ba54:	d9c00717 	ldw	r7,28(sp)
  80ba58:	00800c44 	movi	r2,49
  80ba5c:	38800005 	stb	r2,0(r7)
  80ba60:	d8800517 	ldw	r2,20(sp)
  80ba64:	3dc00044 	addi	r23,r7,1
  80ba68:	10800044 	addi	r2,r2,1
  80ba6c:	d8800515 	stw	r2,20(sp)
  80ba70:	003f3d06 	br	80b768 <__alt_mem_onchip_mem+0xff803768>
  80ba74:	d9800517 	ldw	r6,20(sp)
  80ba78:	d9c00717 	ldw	r7,28(sp)
  80ba7c:	00800c44 	movi	r2,49
  80ba80:	31800044 	addi	r6,r6,1
  80ba84:	d9800515 	stw	r6,20(sp)
  80ba88:	38800005 	stb	r2,0(r7)
  80ba8c:	003edf06 	br	80b60c <__alt_mem_onchip_mem+0xff80360c>
  80ba90:	d8000b15 	stw	zero,44(sp)
  80ba94:	003c9f06 	br	80ad14 <__alt_mem_onchip_mem+0xff802d14>
  80ba98:	903e7e1e 	bne	r18,zero,80b494 <__alt_mem_onchip_mem+0xff803494>
  80ba9c:	00800434 	movhi	r2,16
  80baa0:	10bfffc4 	addi	r2,r2,-1
  80baa4:	9884703a 	and	r2,r19,r2
  80baa8:	1000ea1e 	bne	r2,zero,80be54 <_dtoa_r+0x1460>
  80baac:	9cdffc2c 	andhi	r19,r19,32752
  80bab0:	9800e826 	beq	r19,zero,80be54 <_dtoa_r+0x1460>
  80bab4:	d9c00817 	ldw	r7,32(sp)
  80bab8:	b5800044 	addi	r22,r22,1
  80babc:	04c00044 	movi	r19,1
  80bac0:	39c00044 	addi	r7,r7,1
  80bac4:	d9c00815 	stw	r7,32(sp)
  80bac8:	d8800d17 	ldw	r2,52(sp)
  80bacc:	103e721e 	bne	r2,zero,80b498 <__alt_mem_onchip_mem+0xff803498>
  80bad0:	00800044 	movi	r2,1
  80bad4:	003e7906 	br	80b4bc <__alt_mem_onchip_mem+0xff8034bc>
  80bad8:	8009883a 	mov	r4,r16
  80badc:	08069c40 	call	8069c4 <__floatsidf>
  80bae0:	d9800f17 	ldw	r6,60(sp)
  80bae4:	d9c01017 	ldw	r7,64(sp)
  80bae8:	1009883a 	mov	r4,r2
  80baec:	180b883a 	mov	r5,r3
  80baf0:	081213c0 	call	81213c <__muldf3>
  80baf4:	000d883a 	mov	r6,zero
  80baf8:	01d00734 	movhi	r7,16412
  80bafc:	1009883a 	mov	r4,r2
  80bb00:	180b883a 	mov	r5,r3
  80bb04:	080564c0 	call	80564c <__adddf3>
  80bb08:	047f3034 	movhi	r17,64704
  80bb0c:	1021883a 	mov	r16,r2
  80bb10:	1c63883a 	add	r17,r3,r17
  80bb14:	d9000f17 	ldw	r4,60(sp)
  80bb18:	d9401017 	ldw	r5,64(sp)
  80bb1c:	000d883a 	mov	r6,zero
  80bb20:	01d00534 	movhi	r7,16404
  80bb24:	08060c80 	call	8060c8 <__subdf3>
  80bb28:	800d883a 	mov	r6,r16
  80bb2c:	880f883a 	mov	r7,r17
  80bb30:	1009883a 	mov	r4,r2
  80bb34:	180b883a 	mov	r5,r3
  80bb38:	102b883a 	mov	r21,r2
  80bb3c:	1829883a 	mov	r20,r3
  80bb40:	0805ef80 	call	805ef8 <__gedf2>
  80bb44:	00806c16 	blt	zero,r2,80bcf8 <_dtoa_r+0x1304>
  80bb48:	89e0003c 	xorhi	r7,r17,32768
  80bb4c:	800d883a 	mov	r6,r16
  80bb50:	a809883a 	mov	r4,r21
  80bb54:	a00b883a 	mov	r5,r20
  80bb58:	0805fd40 	call	805fd4 <__ledf2>
  80bb5c:	103d7e0e 	bge	r2,zero,80b158 <__alt_mem_onchip_mem+0xff803158>
  80bb60:	002b883a 	mov	r21,zero
  80bb64:	0023883a 	mov	r17,zero
  80bb68:	003efb06 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bb6c:	d8800717 	ldw	r2,28(sp)
  80bb70:	003bd006 	br	80aab4 <__alt_mem_onchip_mem+0xff802ab4>
  80bb74:	d9000a17 	ldw	r4,40(sp)
  80bb78:	d9800d17 	ldw	r6,52(sp)
  80bb7c:	dd400a15 	stw	r21,40(sp)
  80bb80:	a905c83a 	sub	r2,r21,r4
  80bb84:	308d883a 	add	r6,r6,r2
  80bb88:	d9800d15 	stw	r6,52(sp)
  80bb8c:	002b883a 	mov	r21,zero
  80bb90:	003e0606 	br	80b3ac <__alt_mem_onchip_mem+0xff8033ac>
  80bb94:	9023883a 	mov	r17,r18
  80bb98:	9829883a 	mov	r20,r19
  80bb9c:	04000084 	movi	r16,2
  80bba0:	003c9206 	br	80adec <__alt_mem_onchip_mem+0xff802dec>
  80bba4:	04000044 	movi	r16,1
  80bba8:	dc000c15 	stw	r16,48(sp)
  80bbac:	dc000615 	stw	r16,24(sp)
  80bbb0:	dc002215 	stw	r16,136(sp)
  80bbb4:	e0001115 	stw	zero,68(fp)
  80bbb8:	000b883a 	mov	r5,zero
  80bbbc:	003c6906 	br	80ad64 <__alt_mem_onchip_mem+0xff802d64>
  80bbc0:	3021883a 	mov	r16,r6
  80bbc4:	003ffb06 	br	80bbb4 <__alt_mem_onchip_mem+0xff803bb4>
  80bbc8:	1000021e 	bne	r2,zero,80bbd4 <_dtoa_r+0x11e0>
  80bbcc:	4200004c 	andi	r8,r8,1
  80bbd0:	403e7d1e 	bne	r8,zero,80b5c8 <__alt_mem_onchip_mem+0xff8035c8>
  80bbd4:	01000c04 	movi	r4,48
  80bbd8:	00000106 	br	80bbe0 <_dtoa_r+0x11ec>
  80bbdc:	102f883a 	mov	r23,r2
  80bbe0:	b8bfffc4 	addi	r2,r23,-1
  80bbe4:	10c00007 	ldb	r3,0(r2)
  80bbe8:	193ffc26 	beq	r3,r4,80bbdc <__alt_mem_onchip_mem+0xff803bdc>
  80bbec:	003e8706 	br	80b60c <__alt_mem_onchip_mem+0xff80360c>
  80bbf0:	d8800517 	ldw	r2,20(sp)
  80bbf4:	00a3c83a 	sub	r17,zero,r2
  80bbf8:	8800a426 	beq	r17,zero,80be8c <_dtoa_r+0x1498>
  80bbfc:	888003cc 	andi	r2,r17,15
  80bc00:	100490fa 	slli	r2,r2,3
  80bc04:	00c02074 	movhi	r3,129
  80bc08:	18db8304 	addi	r3,r3,28172
  80bc0c:	1885883a 	add	r2,r3,r2
  80bc10:	11800017 	ldw	r6,0(r2)
  80bc14:	11c00117 	ldw	r7,4(r2)
  80bc18:	9009883a 	mov	r4,r18
  80bc1c:	980b883a 	mov	r5,r19
  80bc20:	8823d13a 	srai	r17,r17,4
  80bc24:	081213c0 	call	81213c <__muldf3>
  80bc28:	d8800f15 	stw	r2,60(sp)
  80bc2c:	d8c01015 	stw	r3,64(sp)
  80bc30:	8800e826 	beq	r17,zero,80bfd4 <_dtoa_r+0x15e0>
  80bc34:	05002074 	movhi	r20,129
  80bc38:	a51b7904 	addi	r20,r20,28132
  80bc3c:	04000084 	movi	r16,2
  80bc40:	8980004c 	andi	r6,r17,1
  80bc44:	1009883a 	mov	r4,r2
  80bc48:	8823d07a 	srai	r17,r17,1
  80bc4c:	180b883a 	mov	r5,r3
  80bc50:	30000426 	beq	r6,zero,80bc64 <_dtoa_r+0x1270>
  80bc54:	a1800017 	ldw	r6,0(r20)
  80bc58:	a1c00117 	ldw	r7,4(r20)
  80bc5c:	84000044 	addi	r16,r16,1
  80bc60:	081213c0 	call	81213c <__muldf3>
  80bc64:	a5000204 	addi	r20,r20,8
  80bc68:	883ff51e 	bne	r17,zero,80bc40 <__alt_mem_onchip_mem+0xff803c40>
  80bc6c:	d8800f15 	stw	r2,60(sp)
  80bc70:	d8c01015 	stw	r3,64(sp)
  80bc74:	003c7606 	br	80ae50 <__alt_mem_onchip_mem+0xff802e50>
  80bc78:	00c00c04 	movi	r3,48
  80bc7c:	10c00005 	stb	r3,0(r2)
  80bc80:	d8c00517 	ldw	r3,20(sp)
  80bc84:	bd3fffc3 	ldbu	r20,-1(r23)
  80bc88:	18c00044 	addi	r3,r3,1
  80bc8c:	d8c00515 	stw	r3,20(sp)
  80bc90:	003db906 	br	80b378 <__alt_mem_onchip_mem+0xff803378>
  80bc94:	89400117 	ldw	r5,4(r17)
  80bc98:	e009883a 	mov	r4,fp
  80bc9c:	080d7000 	call	80d700 <_Balloc>
  80bca0:	89800417 	ldw	r6,16(r17)
  80bca4:	89400304 	addi	r5,r17,12
  80bca8:	11000304 	addi	r4,r2,12
  80bcac:	31800084 	addi	r6,r6,2
  80bcb0:	318d883a 	add	r6,r6,r6
  80bcb4:	318d883a 	add	r6,r6,r6
  80bcb8:	1027883a 	mov	r19,r2
  80bcbc:	080d45c0 	call	80d45c <memcpy>
  80bcc0:	01800044 	movi	r6,1
  80bcc4:	980b883a 	mov	r5,r19
  80bcc8:	e009883a 	mov	r4,fp
  80bccc:	080de800 	call	80de80 <__lshift>
  80bcd0:	1029883a 	mov	r20,r2
  80bcd4:	003ecc06 	br	80b808 <__alt_mem_onchip_mem+0xff803808>
  80bcd8:	00800e44 	movi	r2,57
  80bcdc:	90809026 	beq	r18,r2,80bf20 <_dtoa_r+0x152c>
  80bce0:	92000044 	addi	r8,r18,1
  80bce4:	003f1f06 	br	80b964 <__alt_mem_onchip_mem+0xff803964>
  80bce8:	9011883a 	mov	r8,r18
  80bcec:	8825883a 	mov	r18,r17
  80bcf0:	a023883a 	mov	r17,r20
  80bcf4:	003e2906 	br	80b59c <__alt_mem_onchip_mem+0xff80359c>
  80bcf8:	002b883a 	mov	r21,zero
  80bcfc:	0023883a 	mov	r17,zero
  80bd00:	003f5406 	br	80ba54 <__alt_mem_onchip_mem+0xff803a54>
  80bd04:	61bfffc4 	addi	r6,r12,-1
  80bd08:	300490fa 	slli	r2,r6,3
  80bd0c:	00c02074 	movhi	r3,129
  80bd10:	18db8304 	addi	r3,r3,28172
  80bd14:	1885883a 	add	r2,r3,r2
  80bd18:	11000017 	ldw	r4,0(r2)
  80bd1c:	11400117 	ldw	r5,4(r2)
  80bd20:	d8800717 	ldw	r2,28(sp)
  80bd24:	880f883a 	mov	r7,r17
  80bd28:	d9801215 	stw	r6,72(sp)
  80bd2c:	800d883a 	mov	r6,r16
  80bd30:	db001615 	stw	r12,88(sp)
  80bd34:	15c00044 	addi	r23,r2,1
  80bd38:	081213c0 	call	81213c <__muldf3>
  80bd3c:	d9401017 	ldw	r5,64(sp)
  80bd40:	d9000f17 	ldw	r4,60(sp)
  80bd44:	d8c01515 	stw	r3,84(sp)
  80bd48:	d8801415 	stw	r2,80(sp)
  80bd4c:	08128540 	call	812854 <__fixdfsi>
  80bd50:	1009883a 	mov	r4,r2
  80bd54:	1021883a 	mov	r16,r2
  80bd58:	08069c40 	call	8069c4 <__floatsidf>
  80bd5c:	d9000f17 	ldw	r4,60(sp)
  80bd60:	d9401017 	ldw	r5,64(sp)
  80bd64:	100d883a 	mov	r6,r2
  80bd68:	180f883a 	mov	r7,r3
  80bd6c:	08060c80 	call	8060c8 <__subdf3>
  80bd70:	1829883a 	mov	r20,r3
  80bd74:	d8c00717 	ldw	r3,28(sp)
  80bd78:	84000c04 	addi	r16,r16,48
  80bd7c:	1023883a 	mov	r17,r2
  80bd80:	1c000005 	stb	r16,0(r3)
  80bd84:	db001617 	ldw	r12,88(sp)
  80bd88:	00800044 	movi	r2,1
  80bd8c:	60802226 	beq	r12,r2,80be18 <_dtoa_r+0x1424>
  80bd90:	d9c00717 	ldw	r7,28(sp)
  80bd94:	8805883a 	mov	r2,r17
  80bd98:	b82b883a 	mov	r21,r23
  80bd9c:	3b19883a 	add	r12,r7,r12
  80bda0:	6023883a 	mov	r17,r12
  80bda4:	a007883a 	mov	r3,r20
  80bda8:	dc800f15 	stw	r18,60(sp)
  80bdac:	000d883a 	mov	r6,zero
  80bdb0:	01d00934 	movhi	r7,16420
  80bdb4:	1009883a 	mov	r4,r2
  80bdb8:	180b883a 	mov	r5,r3
  80bdbc:	081213c0 	call	81213c <__muldf3>
  80bdc0:	180b883a 	mov	r5,r3
  80bdc4:	1009883a 	mov	r4,r2
  80bdc8:	1829883a 	mov	r20,r3
  80bdcc:	1025883a 	mov	r18,r2
  80bdd0:	08128540 	call	812854 <__fixdfsi>
  80bdd4:	1009883a 	mov	r4,r2
  80bdd8:	1021883a 	mov	r16,r2
  80bddc:	08069c40 	call	8069c4 <__floatsidf>
  80bde0:	100d883a 	mov	r6,r2
  80bde4:	180f883a 	mov	r7,r3
  80bde8:	9009883a 	mov	r4,r18
  80bdec:	a00b883a 	mov	r5,r20
  80bdf0:	84000c04 	addi	r16,r16,48
  80bdf4:	08060c80 	call	8060c8 <__subdf3>
  80bdf8:	ad400044 	addi	r21,r21,1
  80bdfc:	ac3fffc5 	stb	r16,-1(r21)
  80be00:	ac7fea1e 	bne	r21,r17,80bdac <__alt_mem_onchip_mem+0xff803dac>
  80be04:	1023883a 	mov	r17,r2
  80be08:	d8801217 	ldw	r2,72(sp)
  80be0c:	dc800f17 	ldw	r18,60(sp)
  80be10:	1829883a 	mov	r20,r3
  80be14:	b8af883a 	add	r23,r23,r2
  80be18:	d9001417 	ldw	r4,80(sp)
  80be1c:	d9401517 	ldw	r5,84(sp)
  80be20:	000d883a 	mov	r6,zero
  80be24:	01cff834 	movhi	r7,16352
  80be28:	080564c0 	call	80564c <__adddf3>
  80be2c:	880d883a 	mov	r6,r17
  80be30:	a00f883a 	mov	r7,r20
  80be34:	1009883a 	mov	r4,r2
  80be38:	180b883a 	mov	r5,r3
  80be3c:	0805fd40 	call	805fd4 <__ledf2>
  80be40:	10003e0e 	bge	r2,zero,80bf3c <_dtoa_r+0x1548>
  80be44:	d9001317 	ldw	r4,76(sp)
  80be48:	bd3fffc3 	ldbu	r20,-1(r23)
  80be4c:	d9000515 	stw	r4,20(sp)
  80be50:	003d3b06 	br	80b340 <__alt_mem_onchip_mem+0xff803340>
  80be54:	0027883a 	mov	r19,zero
  80be58:	003f1b06 	br	80bac8 <__alt_mem_onchip_mem+0xff803ac8>
  80be5c:	d8800817 	ldw	r2,32(sp)
  80be60:	11e9c83a 	sub	r20,r2,r7
  80be64:	0005883a 	mov	r2,zero
  80be68:	003d5406 	br	80b3bc <__alt_mem_onchip_mem+0xff8033bc>
  80be6c:	00800044 	movi	r2,1
  80be70:	003dc706 	br	80b590 <__alt_mem_onchip_mem+0xff803590>
  80be74:	d8c00217 	ldw	r3,8(sp)
  80be78:	00800d84 	movi	r2,54
  80be7c:	dd400a17 	ldw	r21,40(sp)
  80be80:	10c5c83a 	sub	r2,r2,r3
  80be84:	dd000817 	ldw	r20,32(sp)
  80be88:	003d4c06 	br	80b3bc <__alt_mem_onchip_mem+0xff8033bc>
  80be8c:	dc800f15 	stw	r18,60(sp)
  80be90:	dcc01015 	stw	r19,64(sp)
  80be94:	04000084 	movi	r16,2
  80be98:	003bed06 	br	80ae50 <__alt_mem_onchip_mem+0xff802e50>
  80be9c:	d9000617 	ldw	r4,24(sp)
  80bea0:	203f0d26 	beq	r4,zero,80bad8 <__alt_mem_onchip_mem+0xff803ad8>
  80bea4:	d9800c17 	ldw	r6,48(sp)
  80bea8:	01bcab0e 	bge	zero,r6,80b158 <__alt_mem_onchip_mem+0xff803158>
  80beac:	d9401017 	ldw	r5,64(sp)
  80beb0:	d9000f17 	ldw	r4,60(sp)
  80beb4:	000d883a 	mov	r6,zero
  80beb8:	01d00934 	movhi	r7,16420
  80bebc:	081213c0 	call	81213c <__muldf3>
  80bec0:	81000044 	addi	r4,r16,1
  80bec4:	d8800f15 	stw	r2,60(sp)
  80bec8:	d8c01015 	stw	r3,64(sp)
  80becc:	08069c40 	call	8069c4 <__floatsidf>
  80bed0:	d9800f17 	ldw	r6,60(sp)
  80bed4:	d9c01017 	ldw	r7,64(sp)
  80bed8:	1009883a 	mov	r4,r2
  80bedc:	180b883a 	mov	r5,r3
  80bee0:	081213c0 	call	81213c <__muldf3>
  80bee4:	01d00734 	movhi	r7,16412
  80bee8:	000d883a 	mov	r6,zero
  80beec:	1009883a 	mov	r4,r2
  80bef0:	180b883a 	mov	r5,r3
  80bef4:	080564c0 	call	80564c <__adddf3>
  80bef8:	d9c00517 	ldw	r7,20(sp)
  80befc:	047f3034 	movhi	r17,64704
  80bf00:	1021883a 	mov	r16,r2
  80bf04:	39ffffc4 	addi	r7,r7,-1
  80bf08:	d9c01315 	stw	r7,76(sp)
  80bf0c:	1c63883a 	add	r17,r3,r17
  80bf10:	db000c17 	ldw	r12,48(sp)
  80bf14:	003bea06 	br	80aec0 <__alt_mem_onchip_mem+0xff802ec0>
  80bf18:	dc000915 	stw	r16,36(sp)
  80bf1c:	003e0e06 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bf20:	01000e44 	movi	r4,57
  80bf24:	8825883a 	mov	r18,r17
  80bf28:	9dc00044 	addi	r23,r19,1
  80bf2c:	99000005 	stb	r4,0(r19)
  80bf30:	a023883a 	mov	r17,r20
  80bf34:	dc000915 	stw	r16,36(sp)
  80bf38:	003da406 	br	80b5cc <__alt_mem_onchip_mem+0xff8035cc>
  80bf3c:	d9801417 	ldw	r6,80(sp)
  80bf40:	d9c01517 	ldw	r7,84(sp)
  80bf44:	0009883a 	mov	r4,zero
  80bf48:	014ff834 	movhi	r5,16352
  80bf4c:	08060c80 	call	8060c8 <__subdf3>
  80bf50:	880d883a 	mov	r6,r17
  80bf54:	a00f883a 	mov	r7,r20
  80bf58:	1009883a 	mov	r4,r2
  80bf5c:	180b883a 	mov	r5,r3
  80bf60:	0805ef80 	call	805ef8 <__gedf2>
  80bf64:	00bc7c0e 	bge	zero,r2,80b158 <__alt_mem_onchip_mem+0xff803158>
  80bf68:	01000c04 	movi	r4,48
  80bf6c:	00000106 	br	80bf74 <_dtoa_r+0x1580>
  80bf70:	102f883a 	mov	r23,r2
  80bf74:	b8bfffc4 	addi	r2,r23,-1
  80bf78:	10c00007 	ldb	r3,0(r2)
  80bf7c:	193ffc26 	beq	r3,r4,80bf70 <__alt_mem_onchip_mem+0xff803f70>
  80bf80:	d9801317 	ldw	r6,76(sp)
  80bf84:	d9800515 	stw	r6,20(sp)
  80bf88:	003c4406 	br	80b09c <__alt_mem_onchip_mem+0xff80309c>
  80bf8c:	d9801317 	ldw	r6,76(sp)
  80bf90:	d9800515 	stw	r6,20(sp)
  80bf94:	003cea06 	br	80b340 <__alt_mem_onchip_mem+0xff803340>
  80bf98:	dd800f17 	ldw	r22,60(sp)
  80bf9c:	dcc01017 	ldw	r19,64(sp)
  80bfa0:	dc801217 	ldw	r18,72(sp)
  80bfa4:	003c6c06 	br	80b158 <__alt_mem_onchip_mem+0xff803158>
  80bfa8:	903e031e 	bne	r18,zero,80b7b8 <__alt_mem_onchip_mem+0xff8037b8>
  80bfac:	003ebb06 	br	80ba9c <__alt_mem_onchip_mem+0xff803a9c>
  80bfb0:	103e6c1e 	bne	r2,zero,80b964 <__alt_mem_onchip_mem+0xff803964>
  80bfb4:	4080004c 	andi	r2,r8,1
  80bfb8:	103e6a26 	beq	r2,zero,80b964 <__alt_mem_onchip_mem+0xff803964>
  80bfbc:	003e6606 	br	80b958 <__alt_mem_onchip_mem+0xff803958>
  80bfc0:	d8c00317 	ldw	r3,12(sp)
  80bfc4:	00800084 	movi	r2,2
  80bfc8:	10c02916 	blt	r2,r3,80c070 <_dtoa_r+0x167c>
  80bfcc:	d9000c17 	ldw	r4,48(sp)
  80bfd0:	003e8806 	br	80b9f4 <__alt_mem_onchip_mem+0xff8039f4>
  80bfd4:	04000084 	movi	r16,2
  80bfd8:	003b9d06 	br	80ae50 <__alt_mem_onchip_mem+0xff802e50>
  80bfdc:	d9001317 	ldw	r4,76(sp)
  80bfe0:	d9000515 	stw	r4,20(sp)
  80bfe4:	003cd606 	br	80b340 <__alt_mem_onchip_mem+0xff803340>
  80bfe8:	d8801317 	ldw	r2,76(sp)
  80bfec:	d8800515 	stw	r2,20(sp)
  80bff0:	003c2a06 	br	80b09c <__alt_mem_onchip_mem+0xff80309c>
  80bff4:	d9800317 	ldw	r6,12(sp)
  80bff8:	00800084 	movi	r2,2
  80bffc:	11801516 	blt	r2,r6,80c054 <_dtoa_r+0x1660>
  80c000:	d9c00c17 	ldw	r7,48(sp)
  80c004:	d9c00615 	stw	r7,24(sp)
  80c008:	003df706 	br	80b7e8 <__alt_mem_onchip_mem+0xff8037e8>
  80c00c:	193d3926 	beq	r3,r4,80b4f4 <__alt_mem_onchip_mem+0xff8034f4>
  80c010:	00c00f04 	movi	r3,60
  80c014:	1885c83a 	sub	r2,r3,r2
  80c018:	003ddf06 	br	80b798 <__alt_mem_onchip_mem+0xff803798>
  80c01c:	e009883a 	mov	r4,fp
  80c020:	e0001115 	stw	zero,68(fp)
  80c024:	000b883a 	mov	r5,zero
  80c028:	080d7000 	call	80d700 <_Balloc>
  80c02c:	d8800715 	stw	r2,28(sp)
  80c030:	d8c00717 	ldw	r3,28(sp)
  80c034:	00bfffc4 	movi	r2,-1
  80c038:	01000044 	movi	r4,1
  80c03c:	d8800c15 	stw	r2,48(sp)
  80c040:	e0c01015 	stw	r3,64(fp)
  80c044:	d9000b15 	stw	r4,44(sp)
  80c048:	d8800615 	stw	r2,24(sp)
  80c04c:	d8002215 	stw	zero,136(sp)
  80c050:	003c4106 	br	80b158 <__alt_mem_onchip_mem+0xff803158>
  80c054:	d8c00c17 	ldw	r3,48(sp)
  80c058:	d8c00615 	stw	r3,24(sp)
  80c05c:	003e7006 	br	80ba20 <__alt_mem_onchip_mem+0xff803a20>
  80c060:	04400044 	movi	r17,1
  80c064:	003b2006 	br	80ace8 <__alt_mem_onchip_mem+0xff802ce8>
  80c068:	000b883a 	mov	r5,zero
  80c06c:	003b3d06 	br	80ad64 <__alt_mem_onchip_mem+0xff802d64>
  80c070:	d8800c17 	ldw	r2,48(sp)
  80c074:	d8800615 	stw	r2,24(sp)
  80c078:	003e6906 	br	80ba20 <__alt_mem_onchip_mem+0xff803a20>

0080c07c <__sflush_r>:
  80c07c:	2880030b 	ldhu	r2,12(r5)
  80c080:	defffb04 	addi	sp,sp,-20
  80c084:	dcc00315 	stw	r19,12(sp)
  80c088:	dc400115 	stw	r17,4(sp)
  80c08c:	dfc00415 	stw	ra,16(sp)
  80c090:	dc800215 	stw	r18,8(sp)
  80c094:	dc000015 	stw	r16,0(sp)
  80c098:	10c0020c 	andi	r3,r2,8
  80c09c:	2823883a 	mov	r17,r5
  80c0a0:	2027883a 	mov	r19,r4
  80c0a4:	1800311e 	bne	r3,zero,80c16c <__sflush_r+0xf0>
  80c0a8:	28c00117 	ldw	r3,4(r5)
  80c0ac:	10820014 	ori	r2,r2,2048
  80c0b0:	2880030d 	sth	r2,12(r5)
  80c0b4:	00c04b0e 	bge	zero,r3,80c1e4 <__sflush_r+0x168>
  80c0b8:	8a000a17 	ldw	r8,40(r17)
  80c0bc:	40002326 	beq	r8,zero,80c14c <__sflush_r+0xd0>
  80c0c0:	9c000017 	ldw	r16,0(r19)
  80c0c4:	10c4000c 	andi	r3,r2,4096
  80c0c8:	98000015 	stw	zero,0(r19)
  80c0cc:	18004826 	beq	r3,zero,80c1f0 <__sflush_r+0x174>
  80c0d0:	89801417 	ldw	r6,80(r17)
  80c0d4:	10c0010c 	andi	r3,r2,4
  80c0d8:	18000626 	beq	r3,zero,80c0f4 <__sflush_r+0x78>
  80c0dc:	88c00117 	ldw	r3,4(r17)
  80c0e0:	88800c17 	ldw	r2,48(r17)
  80c0e4:	30cdc83a 	sub	r6,r6,r3
  80c0e8:	10000226 	beq	r2,zero,80c0f4 <__sflush_r+0x78>
  80c0ec:	88800f17 	ldw	r2,60(r17)
  80c0f0:	308dc83a 	sub	r6,r6,r2
  80c0f4:	89400717 	ldw	r5,28(r17)
  80c0f8:	000f883a 	mov	r7,zero
  80c0fc:	9809883a 	mov	r4,r19
  80c100:	403ee83a 	callr	r8
  80c104:	00ffffc4 	movi	r3,-1
  80c108:	10c04426 	beq	r2,r3,80c21c <__sflush_r+0x1a0>
  80c10c:	88c0030b 	ldhu	r3,12(r17)
  80c110:	89000417 	ldw	r4,16(r17)
  80c114:	88000115 	stw	zero,4(r17)
  80c118:	197dffcc 	andi	r5,r3,63487
  80c11c:	8940030d 	sth	r5,12(r17)
  80c120:	89000015 	stw	r4,0(r17)
  80c124:	18c4000c 	andi	r3,r3,4096
  80c128:	18002c1e 	bne	r3,zero,80c1dc <__sflush_r+0x160>
  80c12c:	89400c17 	ldw	r5,48(r17)
  80c130:	9c000015 	stw	r16,0(r19)
  80c134:	28000526 	beq	r5,zero,80c14c <__sflush_r+0xd0>
  80c138:	88801004 	addi	r2,r17,64
  80c13c:	28800226 	beq	r5,r2,80c148 <__sflush_r+0xcc>
  80c140:	9809883a 	mov	r4,r19
  80c144:	080c8940 	call	80c894 <_free_r>
  80c148:	88000c15 	stw	zero,48(r17)
  80c14c:	0005883a 	mov	r2,zero
  80c150:	dfc00417 	ldw	ra,16(sp)
  80c154:	dcc00317 	ldw	r19,12(sp)
  80c158:	dc800217 	ldw	r18,8(sp)
  80c15c:	dc400117 	ldw	r17,4(sp)
  80c160:	dc000017 	ldw	r16,0(sp)
  80c164:	dec00504 	addi	sp,sp,20
  80c168:	f800283a 	ret
  80c16c:	2c800417 	ldw	r18,16(r5)
  80c170:	903ff626 	beq	r18,zero,80c14c <__alt_mem_onchip_mem+0xff80414c>
  80c174:	2c000017 	ldw	r16,0(r5)
  80c178:	108000cc 	andi	r2,r2,3
  80c17c:	2c800015 	stw	r18,0(r5)
  80c180:	84a1c83a 	sub	r16,r16,r18
  80c184:	1000131e 	bne	r2,zero,80c1d4 <__sflush_r+0x158>
  80c188:	28800517 	ldw	r2,20(r5)
  80c18c:	88800215 	stw	r2,8(r17)
  80c190:	04000316 	blt	zero,r16,80c1a0 <__sflush_r+0x124>
  80c194:	003fed06 	br	80c14c <__alt_mem_onchip_mem+0xff80414c>
  80c198:	90a5883a 	add	r18,r18,r2
  80c19c:	043feb0e 	bge	zero,r16,80c14c <__alt_mem_onchip_mem+0xff80414c>
  80c1a0:	88800917 	ldw	r2,36(r17)
  80c1a4:	89400717 	ldw	r5,28(r17)
  80c1a8:	800f883a 	mov	r7,r16
  80c1ac:	900d883a 	mov	r6,r18
  80c1b0:	9809883a 	mov	r4,r19
  80c1b4:	103ee83a 	callr	r2
  80c1b8:	80a1c83a 	sub	r16,r16,r2
  80c1bc:	00bff616 	blt	zero,r2,80c198 <__alt_mem_onchip_mem+0xff804198>
  80c1c0:	88c0030b 	ldhu	r3,12(r17)
  80c1c4:	00bfffc4 	movi	r2,-1
  80c1c8:	18c01014 	ori	r3,r3,64
  80c1cc:	88c0030d 	sth	r3,12(r17)
  80c1d0:	003fdf06 	br	80c150 <__alt_mem_onchip_mem+0xff804150>
  80c1d4:	0005883a 	mov	r2,zero
  80c1d8:	003fec06 	br	80c18c <__alt_mem_onchip_mem+0xff80418c>
  80c1dc:	88801415 	stw	r2,80(r17)
  80c1e0:	003fd206 	br	80c12c <__alt_mem_onchip_mem+0xff80412c>
  80c1e4:	28c00f17 	ldw	r3,60(r5)
  80c1e8:	00ffb316 	blt	zero,r3,80c0b8 <__alt_mem_onchip_mem+0xff8040b8>
  80c1ec:	003fd706 	br	80c14c <__alt_mem_onchip_mem+0xff80414c>
  80c1f0:	89400717 	ldw	r5,28(r17)
  80c1f4:	000d883a 	mov	r6,zero
  80c1f8:	01c00044 	movi	r7,1
  80c1fc:	9809883a 	mov	r4,r19
  80c200:	403ee83a 	callr	r8
  80c204:	100d883a 	mov	r6,r2
  80c208:	00bfffc4 	movi	r2,-1
  80c20c:	30801426 	beq	r6,r2,80c260 <__sflush_r+0x1e4>
  80c210:	8880030b 	ldhu	r2,12(r17)
  80c214:	8a000a17 	ldw	r8,40(r17)
  80c218:	003fae06 	br	80c0d4 <__alt_mem_onchip_mem+0xff8040d4>
  80c21c:	98c00017 	ldw	r3,0(r19)
  80c220:	183fba26 	beq	r3,zero,80c10c <__alt_mem_onchip_mem+0xff80410c>
  80c224:	01000744 	movi	r4,29
  80c228:	19000626 	beq	r3,r4,80c244 <__sflush_r+0x1c8>
  80c22c:	01000584 	movi	r4,22
  80c230:	19000426 	beq	r3,r4,80c244 <__sflush_r+0x1c8>
  80c234:	88c0030b 	ldhu	r3,12(r17)
  80c238:	18c01014 	ori	r3,r3,64
  80c23c:	88c0030d 	sth	r3,12(r17)
  80c240:	003fc306 	br	80c150 <__alt_mem_onchip_mem+0xff804150>
  80c244:	8880030b 	ldhu	r2,12(r17)
  80c248:	88c00417 	ldw	r3,16(r17)
  80c24c:	88000115 	stw	zero,4(r17)
  80c250:	10bdffcc 	andi	r2,r2,63487
  80c254:	8880030d 	sth	r2,12(r17)
  80c258:	88c00015 	stw	r3,0(r17)
  80c25c:	003fb306 	br	80c12c <__alt_mem_onchip_mem+0xff80412c>
  80c260:	98800017 	ldw	r2,0(r19)
  80c264:	103fea26 	beq	r2,zero,80c210 <__alt_mem_onchip_mem+0xff804210>
  80c268:	00c00744 	movi	r3,29
  80c26c:	10c00226 	beq	r2,r3,80c278 <__sflush_r+0x1fc>
  80c270:	00c00584 	movi	r3,22
  80c274:	10c0031e 	bne	r2,r3,80c284 <__sflush_r+0x208>
  80c278:	9c000015 	stw	r16,0(r19)
  80c27c:	0005883a 	mov	r2,zero
  80c280:	003fb306 	br	80c150 <__alt_mem_onchip_mem+0xff804150>
  80c284:	88c0030b 	ldhu	r3,12(r17)
  80c288:	3005883a 	mov	r2,r6
  80c28c:	18c01014 	ori	r3,r3,64
  80c290:	88c0030d 	sth	r3,12(r17)
  80c294:	003fae06 	br	80c150 <__alt_mem_onchip_mem+0xff804150>

0080c298 <_fflush_r>:
  80c298:	defffd04 	addi	sp,sp,-12
  80c29c:	dc000115 	stw	r16,4(sp)
  80c2a0:	dfc00215 	stw	ra,8(sp)
  80c2a4:	2021883a 	mov	r16,r4
  80c2a8:	20000226 	beq	r4,zero,80c2b4 <_fflush_r+0x1c>
  80c2ac:	20800e17 	ldw	r2,56(r4)
  80c2b0:	10000c26 	beq	r2,zero,80c2e4 <_fflush_r+0x4c>
  80c2b4:	2880030f 	ldh	r2,12(r5)
  80c2b8:	1000051e 	bne	r2,zero,80c2d0 <_fflush_r+0x38>
  80c2bc:	0005883a 	mov	r2,zero
  80c2c0:	dfc00217 	ldw	ra,8(sp)
  80c2c4:	dc000117 	ldw	r16,4(sp)
  80c2c8:	dec00304 	addi	sp,sp,12
  80c2cc:	f800283a 	ret
  80c2d0:	8009883a 	mov	r4,r16
  80c2d4:	dfc00217 	ldw	ra,8(sp)
  80c2d8:	dc000117 	ldw	r16,4(sp)
  80c2dc:	dec00304 	addi	sp,sp,12
  80c2e0:	080c07c1 	jmpi	80c07c <__sflush_r>
  80c2e4:	d9400015 	stw	r5,0(sp)
  80c2e8:	080c6740 	call	80c674 <__sinit>
  80c2ec:	d9400017 	ldw	r5,0(sp)
  80c2f0:	003ff006 	br	80c2b4 <__alt_mem_onchip_mem+0xff8042b4>

0080c2f4 <fflush>:
  80c2f4:	20000526 	beq	r4,zero,80c30c <fflush+0x18>
  80c2f8:	008020b4 	movhi	r2,130
  80c2fc:	10a39404 	addi	r2,r2,-29104
  80c300:	200b883a 	mov	r5,r4
  80c304:	11000017 	ldw	r4,0(r2)
  80c308:	080c2981 	jmpi	80c298 <_fflush_r>
  80c30c:	008020b4 	movhi	r2,130
  80c310:	10a39304 	addi	r2,r2,-29108
  80c314:	11000017 	ldw	r4,0(r2)
  80c318:	01402074 	movhi	r5,129
  80c31c:	2970a604 	addi	r5,r5,-15720
  80c320:	080d1241 	jmpi	80d124 <_fwalk_reent>

0080c324 <__fp_unlock>:
  80c324:	0005883a 	mov	r2,zero
  80c328:	f800283a 	ret

0080c32c <_cleanup_r>:
  80c32c:	01402074 	movhi	r5,129
  80c330:	29414704 	addi	r5,r5,1308
  80c334:	080d1241 	jmpi	80d124 <_fwalk_reent>

0080c338 <__sinit.part.1>:
  80c338:	defff704 	addi	sp,sp,-36
  80c33c:	00c02074 	movhi	r3,129
  80c340:	dfc00815 	stw	ra,32(sp)
  80c344:	ddc00715 	stw	r23,28(sp)
  80c348:	dd800615 	stw	r22,24(sp)
  80c34c:	dd400515 	stw	r21,20(sp)
  80c350:	dd000415 	stw	r20,16(sp)
  80c354:	dcc00315 	stw	r19,12(sp)
  80c358:	dc800215 	stw	r18,8(sp)
  80c35c:	dc400115 	stw	r17,4(sp)
  80c360:	dc000015 	stw	r16,0(sp)
  80c364:	18f0cb04 	addi	r3,r3,-15572
  80c368:	24000117 	ldw	r16,4(r4)
  80c36c:	20c00f15 	stw	r3,60(r4)
  80c370:	2080bb04 	addi	r2,r4,748
  80c374:	00c000c4 	movi	r3,3
  80c378:	20c0b915 	stw	r3,740(r4)
  80c37c:	2080ba15 	stw	r2,744(r4)
  80c380:	2000b815 	stw	zero,736(r4)
  80c384:	05c00204 	movi	r23,8
  80c388:	00800104 	movi	r2,4
  80c38c:	2025883a 	mov	r18,r4
  80c390:	b80d883a 	mov	r6,r23
  80c394:	81001704 	addi	r4,r16,92
  80c398:	000b883a 	mov	r5,zero
  80c39c:	80000015 	stw	zero,0(r16)
  80c3a0:	80000115 	stw	zero,4(r16)
  80c3a4:	80000215 	stw	zero,8(r16)
  80c3a8:	8080030d 	sth	r2,12(r16)
  80c3ac:	80001915 	stw	zero,100(r16)
  80c3b0:	8000038d 	sth	zero,14(r16)
  80c3b4:	80000415 	stw	zero,16(r16)
  80c3b8:	80000515 	stw	zero,20(r16)
  80c3bc:	80000615 	stw	zero,24(r16)
  80c3c0:	0807ca80 	call	807ca8 <memset>
  80c3c4:	05802074 	movhi	r22,129
  80c3c8:	94400217 	ldw	r17,8(r18)
  80c3cc:	05402074 	movhi	r21,129
  80c3d0:	05002074 	movhi	r20,129
  80c3d4:	04c02074 	movhi	r19,129
  80c3d8:	b5a05204 	addi	r22,r22,-32440
  80c3dc:	ad606904 	addi	r21,r21,-32348
  80c3e0:	a5208804 	addi	r20,r20,-32224
  80c3e4:	9ce09f04 	addi	r19,r19,-32132
  80c3e8:	85800815 	stw	r22,32(r16)
  80c3ec:	85400915 	stw	r21,36(r16)
  80c3f0:	85000a15 	stw	r20,40(r16)
  80c3f4:	84c00b15 	stw	r19,44(r16)
  80c3f8:	84000715 	stw	r16,28(r16)
  80c3fc:	00800284 	movi	r2,10
  80c400:	8880030d 	sth	r2,12(r17)
  80c404:	00800044 	movi	r2,1
  80c408:	b80d883a 	mov	r6,r23
  80c40c:	89001704 	addi	r4,r17,92
  80c410:	000b883a 	mov	r5,zero
  80c414:	88000015 	stw	zero,0(r17)
  80c418:	88000115 	stw	zero,4(r17)
  80c41c:	88000215 	stw	zero,8(r17)
  80c420:	88001915 	stw	zero,100(r17)
  80c424:	8880038d 	sth	r2,14(r17)
  80c428:	88000415 	stw	zero,16(r17)
  80c42c:	88000515 	stw	zero,20(r17)
  80c430:	88000615 	stw	zero,24(r17)
  80c434:	0807ca80 	call	807ca8 <memset>
  80c438:	94000317 	ldw	r16,12(r18)
  80c43c:	00800484 	movi	r2,18
  80c440:	8c400715 	stw	r17,28(r17)
  80c444:	8d800815 	stw	r22,32(r17)
  80c448:	8d400915 	stw	r21,36(r17)
  80c44c:	8d000a15 	stw	r20,40(r17)
  80c450:	8cc00b15 	stw	r19,44(r17)
  80c454:	8080030d 	sth	r2,12(r16)
  80c458:	00800084 	movi	r2,2
  80c45c:	80000015 	stw	zero,0(r16)
  80c460:	80000115 	stw	zero,4(r16)
  80c464:	80000215 	stw	zero,8(r16)
  80c468:	80001915 	stw	zero,100(r16)
  80c46c:	8080038d 	sth	r2,14(r16)
  80c470:	80000415 	stw	zero,16(r16)
  80c474:	80000515 	stw	zero,20(r16)
  80c478:	80000615 	stw	zero,24(r16)
  80c47c:	b80d883a 	mov	r6,r23
  80c480:	000b883a 	mov	r5,zero
  80c484:	81001704 	addi	r4,r16,92
  80c488:	0807ca80 	call	807ca8 <memset>
  80c48c:	00800044 	movi	r2,1
  80c490:	84000715 	stw	r16,28(r16)
  80c494:	85800815 	stw	r22,32(r16)
  80c498:	85400915 	stw	r21,36(r16)
  80c49c:	85000a15 	stw	r20,40(r16)
  80c4a0:	84c00b15 	stw	r19,44(r16)
  80c4a4:	90800e15 	stw	r2,56(r18)
  80c4a8:	dfc00817 	ldw	ra,32(sp)
  80c4ac:	ddc00717 	ldw	r23,28(sp)
  80c4b0:	dd800617 	ldw	r22,24(sp)
  80c4b4:	dd400517 	ldw	r21,20(sp)
  80c4b8:	dd000417 	ldw	r20,16(sp)
  80c4bc:	dcc00317 	ldw	r19,12(sp)
  80c4c0:	dc800217 	ldw	r18,8(sp)
  80c4c4:	dc400117 	ldw	r17,4(sp)
  80c4c8:	dc000017 	ldw	r16,0(sp)
  80c4cc:	dec00904 	addi	sp,sp,36
  80c4d0:	f800283a 	ret

0080c4d4 <__fp_lock>:
  80c4d4:	0005883a 	mov	r2,zero
  80c4d8:	f800283a 	ret

0080c4dc <__sfmoreglue>:
  80c4dc:	defffc04 	addi	sp,sp,-16
  80c4e0:	dc400115 	stw	r17,4(sp)
  80c4e4:	2c7fffc4 	addi	r17,r5,-1
  80c4e8:	8c401a24 	muli	r17,r17,104
  80c4ec:	dc800215 	stw	r18,8(sp)
  80c4f0:	2825883a 	mov	r18,r5
  80c4f4:	89401d04 	addi	r5,r17,116
  80c4f8:	dc000015 	stw	r16,0(sp)
  80c4fc:	dfc00315 	stw	ra,12(sp)
  80c500:	080749c0 	call	80749c <_malloc_r>
  80c504:	1021883a 	mov	r16,r2
  80c508:	10000726 	beq	r2,zero,80c528 <__sfmoreglue+0x4c>
  80c50c:	11000304 	addi	r4,r2,12
  80c510:	10000015 	stw	zero,0(r2)
  80c514:	14800115 	stw	r18,4(r2)
  80c518:	11000215 	stw	r4,8(r2)
  80c51c:	89801a04 	addi	r6,r17,104
  80c520:	000b883a 	mov	r5,zero
  80c524:	0807ca80 	call	807ca8 <memset>
  80c528:	8005883a 	mov	r2,r16
  80c52c:	dfc00317 	ldw	ra,12(sp)
  80c530:	dc800217 	ldw	r18,8(sp)
  80c534:	dc400117 	ldw	r17,4(sp)
  80c538:	dc000017 	ldw	r16,0(sp)
  80c53c:	dec00404 	addi	sp,sp,16
  80c540:	f800283a 	ret

0080c544 <__sfp>:
  80c544:	defffb04 	addi	sp,sp,-20
  80c548:	dc000015 	stw	r16,0(sp)
  80c54c:	040020b4 	movhi	r16,130
  80c550:	84239304 	addi	r16,r16,-29108
  80c554:	dcc00315 	stw	r19,12(sp)
  80c558:	2027883a 	mov	r19,r4
  80c55c:	81000017 	ldw	r4,0(r16)
  80c560:	dfc00415 	stw	ra,16(sp)
  80c564:	dc800215 	stw	r18,8(sp)
  80c568:	20800e17 	ldw	r2,56(r4)
  80c56c:	dc400115 	stw	r17,4(sp)
  80c570:	1000021e 	bne	r2,zero,80c57c <__sfp+0x38>
  80c574:	080c3380 	call	80c338 <__sinit.part.1>
  80c578:	81000017 	ldw	r4,0(r16)
  80c57c:	2480b804 	addi	r18,r4,736
  80c580:	047fffc4 	movi	r17,-1
  80c584:	91000117 	ldw	r4,4(r18)
  80c588:	94000217 	ldw	r16,8(r18)
  80c58c:	213fffc4 	addi	r4,r4,-1
  80c590:	20000a16 	blt	r4,zero,80c5bc <__sfp+0x78>
  80c594:	8080030f 	ldh	r2,12(r16)
  80c598:	10000c26 	beq	r2,zero,80c5cc <__sfp+0x88>
  80c59c:	80c01d04 	addi	r3,r16,116
  80c5a0:	00000206 	br	80c5ac <__sfp+0x68>
  80c5a4:	18bfe60f 	ldh	r2,-104(r3)
  80c5a8:	10000826 	beq	r2,zero,80c5cc <__sfp+0x88>
  80c5ac:	213fffc4 	addi	r4,r4,-1
  80c5b0:	1c3ffd04 	addi	r16,r3,-12
  80c5b4:	18c01a04 	addi	r3,r3,104
  80c5b8:	247ffa1e 	bne	r4,r17,80c5a4 <__alt_mem_onchip_mem+0xff8045a4>
  80c5bc:	90800017 	ldw	r2,0(r18)
  80c5c0:	10001d26 	beq	r2,zero,80c638 <__sfp+0xf4>
  80c5c4:	1025883a 	mov	r18,r2
  80c5c8:	003fee06 	br	80c584 <__alt_mem_onchip_mem+0xff804584>
  80c5cc:	00bfffc4 	movi	r2,-1
  80c5d0:	8080038d 	sth	r2,14(r16)
  80c5d4:	00800044 	movi	r2,1
  80c5d8:	8080030d 	sth	r2,12(r16)
  80c5dc:	80001915 	stw	zero,100(r16)
  80c5e0:	80000015 	stw	zero,0(r16)
  80c5e4:	80000215 	stw	zero,8(r16)
  80c5e8:	80000115 	stw	zero,4(r16)
  80c5ec:	80000415 	stw	zero,16(r16)
  80c5f0:	80000515 	stw	zero,20(r16)
  80c5f4:	80000615 	stw	zero,24(r16)
  80c5f8:	01800204 	movi	r6,8
  80c5fc:	000b883a 	mov	r5,zero
  80c600:	81001704 	addi	r4,r16,92
  80c604:	0807ca80 	call	807ca8 <memset>
  80c608:	8005883a 	mov	r2,r16
  80c60c:	80000c15 	stw	zero,48(r16)
  80c610:	80000d15 	stw	zero,52(r16)
  80c614:	80001115 	stw	zero,68(r16)
  80c618:	80001215 	stw	zero,72(r16)
  80c61c:	dfc00417 	ldw	ra,16(sp)
  80c620:	dcc00317 	ldw	r19,12(sp)
  80c624:	dc800217 	ldw	r18,8(sp)
  80c628:	dc400117 	ldw	r17,4(sp)
  80c62c:	dc000017 	ldw	r16,0(sp)
  80c630:	dec00504 	addi	sp,sp,20
  80c634:	f800283a 	ret
  80c638:	01400104 	movi	r5,4
  80c63c:	9809883a 	mov	r4,r19
  80c640:	080c4dc0 	call	80c4dc <__sfmoreglue>
  80c644:	90800015 	stw	r2,0(r18)
  80c648:	103fde1e 	bne	r2,zero,80c5c4 <__alt_mem_onchip_mem+0xff8045c4>
  80c64c:	00800304 	movi	r2,12
  80c650:	98800015 	stw	r2,0(r19)
  80c654:	0005883a 	mov	r2,zero
  80c658:	003ff006 	br	80c61c <__alt_mem_onchip_mem+0xff80461c>

0080c65c <_cleanup>:
  80c65c:	008020b4 	movhi	r2,130
  80c660:	10a39304 	addi	r2,r2,-29108
  80c664:	11000017 	ldw	r4,0(r2)
  80c668:	01402074 	movhi	r5,129
  80c66c:	29414704 	addi	r5,r5,1308
  80c670:	080d1241 	jmpi	80d124 <_fwalk_reent>

0080c674 <__sinit>:
  80c674:	20800e17 	ldw	r2,56(r4)
  80c678:	10000126 	beq	r2,zero,80c680 <__sinit+0xc>
  80c67c:	f800283a 	ret
  80c680:	080c3381 	jmpi	80c338 <__sinit.part.1>

0080c684 <__sfp_lock_acquire>:
  80c684:	f800283a 	ret

0080c688 <__sfp_lock_release>:
  80c688:	f800283a 	ret

0080c68c <__sinit_lock_acquire>:
  80c68c:	f800283a 	ret

0080c690 <__sinit_lock_release>:
  80c690:	f800283a 	ret

0080c694 <__fp_lock_all>:
  80c694:	008020b4 	movhi	r2,130
  80c698:	10a39404 	addi	r2,r2,-29104
  80c69c:	11000017 	ldw	r4,0(r2)
  80c6a0:	01402074 	movhi	r5,129
  80c6a4:	29713504 	addi	r5,r5,-15148
  80c6a8:	080d0601 	jmpi	80d060 <_fwalk>

0080c6ac <__fp_unlock_all>:
  80c6ac:	008020b4 	movhi	r2,130
  80c6b0:	10a39404 	addi	r2,r2,-29104
  80c6b4:	11000017 	ldw	r4,0(r2)
  80c6b8:	01402074 	movhi	r5,129
  80c6bc:	2970c904 	addi	r5,r5,-15580
  80c6c0:	080d0601 	jmpi	80d060 <_fwalk>

0080c6c4 <__sflags>:
  80c6c4:	28800007 	ldb	r2,0(r5)
  80c6c8:	00c01c84 	movi	r3,114
  80c6cc:	10c02426 	beq	r2,r3,80c760 <__sflags+0x9c>
  80c6d0:	00c01dc4 	movi	r3,119
  80c6d4:	10c01e26 	beq	r2,r3,80c750 <__sflags+0x8c>
  80c6d8:	00c01844 	movi	r3,97
  80c6dc:	10c00426 	beq	r2,r3,80c6f0 <__sflags+0x2c>
  80c6e0:	00800584 	movi	r2,22
  80c6e4:	20800015 	stw	r2,0(r4)
  80c6e8:	0005883a 	mov	r2,zero
  80c6ec:	f800283a 	ret
  80c6f0:	02c08204 	movi	r11,520
  80c6f4:	01000044 	movi	r4,1
  80c6f8:	00804204 	movi	r2,264
  80c6fc:	01c00ac4 	movi	r7,43
  80c700:	02bff8c4 	movi	r10,-29
  80c704:	027fff04 	movi	r9,-4
  80c708:	02001e04 	movi	r8,120
  80c70c:	29400044 	addi	r5,r5,1
  80c710:	28c00007 	ldb	r3,0(r5)
  80c714:	18000626 	beq	r3,zero,80c730 <__sflags+0x6c>
  80c718:	19c00826 	beq	r3,r7,80c73c <__sflags+0x78>
  80c71c:	1a3ffb1e 	bne	r3,r8,80c70c <__alt_mem_onchip_mem+0xff80470c>
  80c720:	29400044 	addi	r5,r5,1
  80c724:	28c00007 	ldb	r3,0(r5)
  80c728:	21020014 	ori	r4,r4,2048
  80c72c:	183ffa1e 	bne	r3,zero,80c718 <__alt_mem_onchip_mem+0xff804718>
  80c730:	22c8b03a 	or	r4,r4,r11
  80c734:	31000015 	stw	r4,0(r6)
  80c738:	f800283a 	ret
  80c73c:	1284703a 	and	r2,r2,r10
  80c740:	2248703a 	and	r4,r4,r9
  80c744:	10800414 	ori	r2,r2,16
  80c748:	21000094 	ori	r4,r4,2
  80c74c:	003fef06 	br	80c70c <__alt_mem_onchip_mem+0xff80470c>
  80c750:	02c18004 	movi	r11,1536
  80c754:	01000044 	movi	r4,1
  80c758:	00800204 	movi	r2,8
  80c75c:	003fe706 	br	80c6fc <__alt_mem_onchip_mem+0xff8046fc>
  80c760:	0017883a 	mov	r11,zero
  80c764:	0009883a 	mov	r4,zero
  80c768:	00800104 	movi	r2,4
  80c76c:	003fe306 	br	80c6fc <__alt_mem_onchip_mem+0xff8046fc>

0080c770 <_malloc_trim_r>:
  80c770:	defffb04 	addi	sp,sp,-20
  80c774:	dcc00315 	stw	r19,12(sp)
  80c778:	04c02074 	movhi	r19,129
  80c77c:	dc800215 	stw	r18,8(sp)
  80c780:	dc400115 	stw	r17,4(sp)
  80c784:	dc000015 	stw	r16,0(sp)
  80c788:	dfc00415 	stw	ra,16(sp)
  80c78c:	2821883a 	mov	r16,r5
  80c790:	9cdd7704 	addi	r19,r19,30172
  80c794:	2025883a 	mov	r18,r4
  80c798:	08130fc0 	call	8130fc <__malloc_lock>
  80c79c:	98800217 	ldw	r2,8(r19)
  80c7a0:	14400117 	ldw	r17,4(r2)
  80c7a4:	00bfff04 	movi	r2,-4
  80c7a8:	88a2703a 	and	r17,r17,r2
  80c7ac:	8c21c83a 	sub	r16,r17,r16
  80c7b0:	8403fbc4 	addi	r16,r16,4079
  80c7b4:	8020d33a 	srli	r16,r16,12
  80c7b8:	0083ffc4 	movi	r2,4095
  80c7bc:	843fffc4 	addi	r16,r16,-1
  80c7c0:	8020933a 	slli	r16,r16,12
  80c7c4:	1400060e 	bge	r2,r16,80c7e0 <_malloc_trim_r+0x70>
  80c7c8:	000b883a 	mov	r5,zero
  80c7cc:	9009883a 	mov	r4,r18
  80c7d0:	08080f40 	call	8080f4 <_sbrk_r>
  80c7d4:	98c00217 	ldw	r3,8(r19)
  80c7d8:	1c47883a 	add	r3,r3,r17
  80c7dc:	10c00a26 	beq	r2,r3,80c808 <_malloc_trim_r+0x98>
  80c7e0:	9009883a 	mov	r4,r18
  80c7e4:	08131200 	call	813120 <__malloc_unlock>
  80c7e8:	0005883a 	mov	r2,zero
  80c7ec:	dfc00417 	ldw	ra,16(sp)
  80c7f0:	dcc00317 	ldw	r19,12(sp)
  80c7f4:	dc800217 	ldw	r18,8(sp)
  80c7f8:	dc400117 	ldw	r17,4(sp)
  80c7fc:	dc000017 	ldw	r16,0(sp)
  80c800:	dec00504 	addi	sp,sp,20
  80c804:	f800283a 	ret
  80c808:	040bc83a 	sub	r5,zero,r16
  80c80c:	9009883a 	mov	r4,r18
  80c810:	08080f40 	call	8080f4 <_sbrk_r>
  80c814:	00ffffc4 	movi	r3,-1
  80c818:	10c00d26 	beq	r2,r3,80c850 <_malloc_trim_r+0xe0>
  80c81c:	00c020b4 	movhi	r3,130
  80c820:	18eaf204 	addi	r3,r3,-21560
  80c824:	18800017 	ldw	r2,0(r3)
  80c828:	99000217 	ldw	r4,8(r19)
  80c82c:	8c23c83a 	sub	r17,r17,r16
  80c830:	8c400054 	ori	r17,r17,1
  80c834:	1421c83a 	sub	r16,r2,r16
  80c838:	24400115 	stw	r17,4(r4)
  80c83c:	9009883a 	mov	r4,r18
  80c840:	1c000015 	stw	r16,0(r3)
  80c844:	08131200 	call	813120 <__malloc_unlock>
  80c848:	00800044 	movi	r2,1
  80c84c:	003fe706 	br	80c7ec <__alt_mem_onchip_mem+0xff8047ec>
  80c850:	000b883a 	mov	r5,zero
  80c854:	9009883a 	mov	r4,r18
  80c858:	08080f40 	call	8080f4 <_sbrk_r>
  80c85c:	99000217 	ldw	r4,8(r19)
  80c860:	014003c4 	movi	r5,15
  80c864:	1107c83a 	sub	r3,r2,r4
  80c868:	28ffdd0e 	bge	r5,r3,80c7e0 <__alt_mem_onchip_mem+0xff8047e0>
  80c86c:	014020b4 	movhi	r5,130
  80c870:	29639504 	addi	r5,r5,-29100
  80c874:	29400017 	ldw	r5,0(r5)
  80c878:	18c00054 	ori	r3,r3,1
  80c87c:	20c00115 	stw	r3,4(r4)
  80c880:	00c020b4 	movhi	r3,130
  80c884:	1145c83a 	sub	r2,r2,r5
  80c888:	18eaf204 	addi	r3,r3,-21560
  80c88c:	18800015 	stw	r2,0(r3)
  80c890:	003fd306 	br	80c7e0 <__alt_mem_onchip_mem+0xff8047e0>

0080c894 <_free_r>:
  80c894:	28004126 	beq	r5,zero,80c99c <_free_r+0x108>
  80c898:	defffd04 	addi	sp,sp,-12
  80c89c:	dc400115 	stw	r17,4(sp)
  80c8a0:	dc000015 	stw	r16,0(sp)
  80c8a4:	2023883a 	mov	r17,r4
  80c8a8:	2821883a 	mov	r16,r5
  80c8ac:	dfc00215 	stw	ra,8(sp)
  80c8b0:	08130fc0 	call	8130fc <__malloc_lock>
  80c8b4:	81ffff17 	ldw	r7,-4(r16)
  80c8b8:	00bfff84 	movi	r2,-2
  80c8bc:	01002074 	movhi	r4,129
  80c8c0:	81bffe04 	addi	r6,r16,-8
  80c8c4:	3884703a 	and	r2,r7,r2
  80c8c8:	211d7704 	addi	r4,r4,30172
  80c8cc:	308b883a 	add	r5,r6,r2
  80c8d0:	2a400117 	ldw	r9,4(r5)
  80c8d4:	22000217 	ldw	r8,8(r4)
  80c8d8:	00ffff04 	movi	r3,-4
  80c8dc:	48c6703a 	and	r3,r9,r3
  80c8e0:	2a005726 	beq	r5,r8,80ca40 <_free_r+0x1ac>
  80c8e4:	28c00115 	stw	r3,4(r5)
  80c8e8:	39c0004c 	andi	r7,r7,1
  80c8ec:	3800091e 	bne	r7,zero,80c914 <_free_r+0x80>
  80c8f0:	823ffe17 	ldw	r8,-8(r16)
  80c8f4:	22400204 	addi	r9,r4,8
  80c8f8:	320dc83a 	sub	r6,r6,r8
  80c8fc:	31c00217 	ldw	r7,8(r6)
  80c900:	1205883a 	add	r2,r2,r8
  80c904:	3a406526 	beq	r7,r9,80ca9c <_free_r+0x208>
  80c908:	32000317 	ldw	r8,12(r6)
  80c90c:	3a000315 	stw	r8,12(r7)
  80c910:	41c00215 	stw	r7,8(r8)
  80c914:	28cf883a 	add	r7,r5,r3
  80c918:	39c00117 	ldw	r7,4(r7)
  80c91c:	39c0004c 	andi	r7,r7,1
  80c920:	38003a26 	beq	r7,zero,80ca0c <_free_r+0x178>
  80c924:	10c00054 	ori	r3,r2,1
  80c928:	30c00115 	stw	r3,4(r6)
  80c92c:	3087883a 	add	r3,r6,r2
  80c930:	18800015 	stw	r2,0(r3)
  80c934:	00c07fc4 	movi	r3,511
  80c938:	18801936 	bltu	r3,r2,80c9a0 <_free_r+0x10c>
  80c93c:	1004d0fa 	srli	r2,r2,3
  80c940:	01c00044 	movi	r7,1
  80c944:	21400117 	ldw	r5,4(r4)
  80c948:	10c00044 	addi	r3,r2,1
  80c94c:	18c7883a 	add	r3,r3,r3
  80c950:	1005d0ba 	srai	r2,r2,2
  80c954:	18c7883a 	add	r3,r3,r3
  80c958:	18c7883a 	add	r3,r3,r3
  80c95c:	1907883a 	add	r3,r3,r4
  80c960:	3884983a 	sll	r2,r7,r2
  80c964:	19c00017 	ldw	r7,0(r3)
  80c968:	1a3ffe04 	addi	r8,r3,-8
  80c96c:	1144b03a 	or	r2,r2,r5
  80c970:	32000315 	stw	r8,12(r6)
  80c974:	31c00215 	stw	r7,8(r6)
  80c978:	20800115 	stw	r2,4(r4)
  80c97c:	19800015 	stw	r6,0(r3)
  80c980:	39800315 	stw	r6,12(r7)
  80c984:	8809883a 	mov	r4,r17
  80c988:	dfc00217 	ldw	ra,8(sp)
  80c98c:	dc400117 	ldw	r17,4(sp)
  80c990:	dc000017 	ldw	r16,0(sp)
  80c994:	dec00304 	addi	sp,sp,12
  80c998:	08131201 	jmpi	813120 <__malloc_unlock>
  80c99c:	f800283a 	ret
  80c9a0:	100ad27a 	srli	r5,r2,9
  80c9a4:	00c00104 	movi	r3,4
  80c9a8:	19404a36 	bltu	r3,r5,80cad4 <_free_r+0x240>
  80c9ac:	100ad1ba 	srli	r5,r2,6
  80c9b0:	28c00e44 	addi	r3,r5,57
  80c9b4:	18c7883a 	add	r3,r3,r3
  80c9b8:	29400e04 	addi	r5,r5,56
  80c9bc:	18c7883a 	add	r3,r3,r3
  80c9c0:	18c7883a 	add	r3,r3,r3
  80c9c4:	1909883a 	add	r4,r3,r4
  80c9c8:	20c00017 	ldw	r3,0(r4)
  80c9cc:	01c02074 	movhi	r7,129
  80c9d0:	213ffe04 	addi	r4,r4,-8
  80c9d4:	39dd7704 	addi	r7,r7,30172
  80c9d8:	20c04426 	beq	r4,r3,80caec <_free_r+0x258>
  80c9dc:	01ffff04 	movi	r7,-4
  80c9e0:	19400117 	ldw	r5,4(r3)
  80c9e4:	29ca703a 	and	r5,r5,r7
  80c9e8:	1140022e 	bgeu	r2,r5,80c9f4 <_free_r+0x160>
  80c9ec:	18c00217 	ldw	r3,8(r3)
  80c9f0:	20fffb1e 	bne	r4,r3,80c9e0 <__alt_mem_onchip_mem+0xff8049e0>
  80c9f4:	19000317 	ldw	r4,12(r3)
  80c9f8:	31000315 	stw	r4,12(r6)
  80c9fc:	30c00215 	stw	r3,8(r6)
  80ca00:	21800215 	stw	r6,8(r4)
  80ca04:	19800315 	stw	r6,12(r3)
  80ca08:	003fde06 	br	80c984 <__alt_mem_onchip_mem+0xff804984>
  80ca0c:	29c00217 	ldw	r7,8(r5)
  80ca10:	10c5883a 	add	r2,r2,r3
  80ca14:	00c02074 	movhi	r3,129
  80ca18:	18dd7904 	addi	r3,r3,30180
  80ca1c:	38c03b26 	beq	r7,r3,80cb0c <_free_r+0x278>
  80ca20:	2a000317 	ldw	r8,12(r5)
  80ca24:	11400054 	ori	r5,r2,1
  80ca28:	3087883a 	add	r3,r6,r2
  80ca2c:	3a000315 	stw	r8,12(r7)
  80ca30:	41c00215 	stw	r7,8(r8)
  80ca34:	31400115 	stw	r5,4(r6)
  80ca38:	18800015 	stw	r2,0(r3)
  80ca3c:	003fbd06 	br	80c934 <__alt_mem_onchip_mem+0xff804934>
  80ca40:	39c0004c 	andi	r7,r7,1
  80ca44:	10c5883a 	add	r2,r2,r3
  80ca48:	3800071e 	bne	r7,zero,80ca68 <_free_r+0x1d4>
  80ca4c:	81fffe17 	ldw	r7,-8(r16)
  80ca50:	31cdc83a 	sub	r6,r6,r7
  80ca54:	30c00317 	ldw	r3,12(r6)
  80ca58:	31400217 	ldw	r5,8(r6)
  80ca5c:	11c5883a 	add	r2,r2,r7
  80ca60:	28c00315 	stw	r3,12(r5)
  80ca64:	19400215 	stw	r5,8(r3)
  80ca68:	10c00054 	ori	r3,r2,1
  80ca6c:	30c00115 	stw	r3,4(r6)
  80ca70:	00c020b4 	movhi	r3,130
  80ca74:	18e39604 	addi	r3,r3,-29096
  80ca78:	18c00017 	ldw	r3,0(r3)
  80ca7c:	21800215 	stw	r6,8(r4)
  80ca80:	10ffc036 	bltu	r2,r3,80c984 <__alt_mem_onchip_mem+0xff804984>
  80ca84:	008020b4 	movhi	r2,130
  80ca88:	10aae704 	addi	r2,r2,-21604
  80ca8c:	11400017 	ldw	r5,0(r2)
  80ca90:	8809883a 	mov	r4,r17
  80ca94:	080c7700 	call	80c770 <_malloc_trim_r>
  80ca98:	003fba06 	br	80c984 <__alt_mem_onchip_mem+0xff804984>
  80ca9c:	28c9883a 	add	r4,r5,r3
  80caa0:	21000117 	ldw	r4,4(r4)
  80caa4:	2100004c 	andi	r4,r4,1
  80caa8:	2000391e 	bne	r4,zero,80cb90 <_free_r+0x2fc>
  80caac:	29c00217 	ldw	r7,8(r5)
  80cab0:	29000317 	ldw	r4,12(r5)
  80cab4:	1885883a 	add	r2,r3,r2
  80cab8:	10c00054 	ori	r3,r2,1
  80cabc:	39000315 	stw	r4,12(r7)
  80cac0:	21c00215 	stw	r7,8(r4)
  80cac4:	30c00115 	stw	r3,4(r6)
  80cac8:	308d883a 	add	r6,r6,r2
  80cacc:	30800015 	stw	r2,0(r6)
  80cad0:	003fac06 	br	80c984 <__alt_mem_onchip_mem+0xff804984>
  80cad4:	00c00504 	movi	r3,20
  80cad8:	19401536 	bltu	r3,r5,80cb30 <_free_r+0x29c>
  80cadc:	28c01704 	addi	r3,r5,92
  80cae0:	18c7883a 	add	r3,r3,r3
  80cae4:	294016c4 	addi	r5,r5,91
  80cae8:	003fb406 	br	80c9bc <__alt_mem_onchip_mem+0xff8049bc>
  80caec:	280bd0ba 	srai	r5,r5,2
  80caf0:	00c00044 	movi	r3,1
  80caf4:	38800117 	ldw	r2,4(r7)
  80caf8:	194a983a 	sll	r5,r3,r5
  80cafc:	2007883a 	mov	r3,r4
  80cb00:	2884b03a 	or	r2,r5,r2
  80cb04:	38800115 	stw	r2,4(r7)
  80cb08:	003fbb06 	br	80c9f8 <__alt_mem_onchip_mem+0xff8049f8>
  80cb0c:	21800515 	stw	r6,20(r4)
  80cb10:	21800415 	stw	r6,16(r4)
  80cb14:	10c00054 	ori	r3,r2,1
  80cb18:	31c00315 	stw	r7,12(r6)
  80cb1c:	31c00215 	stw	r7,8(r6)
  80cb20:	30c00115 	stw	r3,4(r6)
  80cb24:	308d883a 	add	r6,r6,r2
  80cb28:	30800015 	stw	r2,0(r6)
  80cb2c:	003f9506 	br	80c984 <__alt_mem_onchip_mem+0xff804984>
  80cb30:	00c01504 	movi	r3,84
  80cb34:	19400536 	bltu	r3,r5,80cb4c <_free_r+0x2b8>
  80cb38:	100ad33a 	srli	r5,r2,12
  80cb3c:	28c01bc4 	addi	r3,r5,111
  80cb40:	18c7883a 	add	r3,r3,r3
  80cb44:	29401b84 	addi	r5,r5,110
  80cb48:	003f9c06 	br	80c9bc <__alt_mem_onchip_mem+0xff8049bc>
  80cb4c:	00c05504 	movi	r3,340
  80cb50:	19400536 	bltu	r3,r5,80cb68 <_free_r+0x2d4>
  80cb54:	100ad3fa 	srli	r5,r2,15
  80cb58:	28c01e04 	addi	r3,r5,120
  80cb5c:	18c7883a 	add	r3,r3,r3
  80cb60:	29401dc4 	addi	r5,r5,119
  80cb64:	003f9506 	br	80c9bc <__alt_mem_onchip_mem+0xff8049bc>
  80cb68:	00c15504 	movi	r3,1364
  80cb6c:	19400536 	bltu	r3,r5,80cb84 <_free_r+0x2f0>
  80cb70:	100ad4ba 	srli	r5,r2,18
  80cb74:	28c01f44 	addi	r3,r5,125
  80cb78:	18c7883a 	add	r3,r3,r3
  80cb7c:	29401f04 	addi	r5,r5,124
  80cb80:	003f8e06 	br	80c9bc <__alt_mem_onchip_mem+0xff8049bc>
  80cb84:	00c03f84 	movi	r3,254
  80cb88:	01401f84 	movi	r5,126
  80cb8c:	003f8b06 	br	80c9bc <__alt_mem_onchip_mem+0xff8049bc>
  80cb90:	10c00054 	ori	r3,r2,1
  80cb94:	30c00115 	stw	r3,4(r6)
  80cb98:	308d883a 	add	r6,r6,r2
  80cb9c:	30800015 	stw	r2,0(r6)
  80cba0:	003f7806 	br	80c984 <__alt_mem_onchip_mem+0xff804984>

0080cba4 <__sfvwrite_r>:
  80cba4:	30800217 	ldw	r2,8(r6)
  80cba8:	10006726 	beq	r2,zero,80cd48 <__sfvwrite_r+0x1a4>
  80cbac:	28c0030b 	ldhu	r3,12(r5)
  80cbb0:	defff404 	addi	sp,sp,-48
  80cbb4:	dd400715 	stw	r21,28(sp)
  80cbb8:	dd000615 	stw	r20,24(sp)
  80cbbc:	dc000215 	stw	r16,8(sp)
  80cbc0:	dfc00b15 	stw	ra,44(sp)
  80cbc4:	df000a15 	stw	fp,40(sp)
  80cbc8:	ddc00915 	stw	r23,36(sp)
  80cbcc:	dd800815 	stw	r22,32(sp)
  80cbd0:	dcc00515 	stw	r19,20(sp)
  80cbd4:	dc800415 	stw	r18,16(sp)
  80cbd8:	dc400315 	stw	r17,12(sp)
  80cbdc:	1880020c 	andi	r2,r3,8
  80cbe0:	2821883a 	mov	r16,r5
  80cbe4:	202b883a 	mov	r21,r4
  80cbe8:	3029883a 	mov	r20,r6
  80cbec:	10002726 	beq	r2,zero,80cc8c <__sfvwrite_r+0xe8>
  80cbf0:	28800417 	ldw	r2,16(r5)
  80cbf4:	10002526 	beq	r2,zero,80cc8c <__sfvwrite_r+0xe8>
  80cbf8:	1880008c 	andi	r2,r3,2
  80cbfc:	a4400017 	ldw	r17,0(r20)
  80cc00:	10002a26 	beq	r2,zero,80ccac <__sfvwrite_r+0x108>
  80cc04:	05a00034 	movhi	r22,32768
  80cc08:	0027883a 	mov	r19,zero
  80cc0c:	0025883a 	mov	r18,zero
  80cc10:	b5bf0004 	addi	r22,r22,-1024
  80cc14:	980d883a 	mov	r6,r19
  80cc18:	a809883a 	mov	r4,r21
  80cc1c:	90004626 	beq	r18,zero,80cd38 <__sfvwrite_r+0x194>
  80cc20:	900f883a 	mov	r7,r18
  80cc24:	b480022e 	bgeu	r22,r18,80cc30 <__sfvwrite_r+0x8c>
  80cc28:	01e00034 	movhi	r7,32768
  80cc2c:	39ff0004 	addi	r7,r7,-1024
  80cc30:	80800917 	ldw	r2,36(r16)
  80cc34:	81400717 	ldw	r5,28(r16)
  80cc38:	103ee83a 	callr	r2
  80cc3c:	0080570e 	bge	zero,r2,80cd9c <__sfvwrite_r+0x1f8>
  80cc40:	a0c00217 	ldw	r3,8(r20)
  80cc44:	98a7883a 	add	r19,r19,r2
  80cc48:	90a5c83a 	sub	r18,r18,r2
  80cc4c:	1885c83a 	sub	r2,r3,r2
  80cc50:	a0800215 	stw	r2,8(r20)
  80cc54:	103fef1e 	bne	r2,zero,80cc14 <__alt_mem_onchip_mem+0xff804c14>
  80cc58:	0005883a 	mov	r2,zero
  80cc5c:	dfc00b17 	ldw	ra,44(sp)
  80cc60:	df000a17 	ldw	fp,40(sp)
  80cc64:	ddc00917 	ldw	r23,36(sp)
  80cc68:	dd800817 	ldw	r22,32(sp)
  80cc6c:	dd400717 	ldw	r21,28(sp)
  80cc70:	dd000617 	ldw	r20,24(sp)
  80cc74:	dcc00517 	ldw	r19,20(sp)
  80cc78:	dc800417 	ldw	r18,16(sp)
  80cc7c:	dc400317 	ldw	r17,12(sp)
  80cc80:	dc000217 	ldw	r16,8(sp)
  80cc84:	dec00c04 	addi	sp,sp,48
  80cc88:	f800283a 	ret
  80cc8c:	800b883a 	mov	r5,r16
  80cc90:	a809883a 	mov	r4,r21
  80cc94:	080a64c0 	call	80a64c <__swsetup_r>
  80cc98:	1000eb1e 	bne	r2,zero,80d048 <__sfvwrite_r+0x4a4>
  80cc9c:	80c0030b 	ldhu	r3,12(r16)
  80cca0:	a4400017 	ldw	r17,0(r20)
  80cca4:	1880008c 	andi	r2,r3,2
  80cca8:	103fd61e 	bne	r2,zero,80cc04 <__alt_mem_onchip_mem+0xff804c04>
  80ccac:	1880004c 	andi	r2,r3,1
  80ccb0:	10003f1e 	bne	r2,zero,80cdb0 <__sfvwrite_r+0x20c>
  80ccb4:	0039883a 	mov	fp,zero
  80ccb8:	0025883a 	mov	r18,zero
  80ccbc:	90001a26 	beq	r18,zero,80cd28 <__sfvwrite_r+0x184>
  80ccc0:	1880800c 	andi	r2,r3,512
  80ccc4:	84c00217 	ldw	r19,8(r16)
  80ccc8:	10002126 	beq	r2,zero,80cd50 <__sfvwrite_r+0x1ac>
  80cccc:	982f883a 	mov	r23,r19
  80ccd0:	94c09336 	bltu	r18,r19,80cf20 <__sfvwrite_r+0x37c>
  80ccd4:	1881200c 	andi	r2,r3,1152
  80ccd8:	10009e1e 	bne	r2,zero,80cf54 <__sfvwrite_r+0x3b0>
  80ccdc:	81000017 	ldw	r4,0(r16)
  80cce0:	b80d883a 	mov	r6,r23
  80cce4:	e00b883a 	mov	r5,fp
  80cce8:	080d5a40 	call	80d5a4 <memmove>
  80ccec:	80c00217 	ldw	r3,8(r16)
  80ccf0:	81000017 	ldw	r4,0(r16)
  80ccf4:	9005883a 	mov	r2,r18
  80ccf8:	1ce7c83a 	sub	r19,r3,r19
  80ccfc:	25cf883a 	add	r7,r4,r23
  80cd00:	84c00215 	stw	r19,8(r16)
  80cd04:	81c00015 	stw	r7,0(r16)
  80cd08:	a0c00217 	ldw	r3,8(r20)
  80cd0c:	e0b9883a 	add	fp,fp,r2
  80cd10:	90a5c83a 	sub	r18,r18,r2
  80cd14:	18a7c83a 	sub	r19,r3,r2
  80cd18:	a4c00215 	stw	r19,8(r20)
  80cd1c:	983fce26 	beq	r19,zero,80cc58 <__alt_mem_onchip_mem+0xff804c58>
  80cd20:	80c0030b 	ldhu	r3,12(r16)
  80cd24:	903fe61e 	bne	r18,zero,80ccc0 <__alt_mem_onchip_mem+0xff804cc0>
  80cd28:	8f000017 	ldw	fp,0(r17)
  80cd2c:	8c800117 	ldw	r18,4(r17)
  80cd30:	8c400204 	addi	r17,r17,8
  80cd34:	003fe106 	br	80ccbc <__alt_mem_onchip_mem+0xff804cbc>
  80cd38:	8cc00017 	ldw	r19,0(r17)
  80cd3c:	8c800117 	ldw	r18,4(r17)
  80cd40:	8c400204 	addi	r17,r17,8
  80cd44:	003fb306 	br	80cc14 <__alt_mem_onchip_mem+0xff804c14>
  80cd48:	0005883a 	mov	r2,zero
  80cd4c:	f800283a 	ret
  80cd50:	81000017 	ldw	r4,0(r16)
  80cd54:	80800417 	ldw	r2,16(r16)
  80cd58:	11005736 	bltu	r2,r4,80ceb8 <__sfvwrite_r+0x314>
  80cd5c:	85c00517 	ldw	r23,20(r16)
  80cd60:	95c05536 	bltu	r18,r23,80ceb8 <__sfvwrite_r+0x314>
  80cd64:	00a00034 	movhi	r2,32768
  80cd68:	10bfffc4 	addi	r2,r2,-1
  80cd6c:	9009883a 	mov	r4,r18
  80cd70:	1480012e 	bgeu	r2,r18,80cd78 <__sfvwrite_r+0x1d4>
  80cd74:	1009883a 	mov	r4,r2
  80cd78:	b80b883a 	mov	r5,r23
  80cd7c:	08116180 	call	811618 <__divsi3>
  80cd80:	15cf383a 	mul	r7,r2,r23
  80cd84:	81400717 	ldw	r5,28(r16)
  80cd88:	80800917 	ldw	r2,36(r16)
  80cd8c:	e00d883a 	mov	r6,fp
  80cd90:	a809883a 	mov	r4,r21
  80cd94:	103ee83a 	callr	r2
  80cd98:	00bfdb16 	blt	zero,r2,80cd08 <__alt_mem_onchip_mem+0xff804d08>
  80cd9c:	8080030b 	ldhu	r2,12(r16)
  80cda0:	10801014 	ori	r2,r2,64
  80cda4:	8080030d 	sth	r2,12(r16)
  80cda8:	00bfffc4 	movi	r2,-1
  80cdac:	003fab06 	br	80cc5c <__alt_mem_onchip_mem+0xff804c5c>
  80cdb0:	0027883a 	mov	r19,zero
  80cdb4:	0011883a 	mov	r8,zero
  80cdb8:	0039883a 	mov	fp,zero
  80cdbc:	0025883a 	mov	r18,zero
  80cdc0:	90001f26 	beq	r18,zero,80ce40 <__sfvwrite_r+0x29c>
  80cdc4:	40005a26 	beq	r8,zero,80cf30 <__sfvwrite_r+0x38c>
  80cdc8:	982d883a 	mov	r22,r19
  80cdcc:	94c0012e 	bgeu	r18,r19,80cdd4 <__sfvwrite_r+0x230>
  80cdd0:	902d883a 	mov	r22,r18
  80cdd4:	81000017 	ldw	r4,0(r16)
  80cdd8:	80800417 	ldw	r2,16(r16)
  80cddc:	b02f883a 	mov	r23,r22
  80cde0:	81c00517 	ldw	r7,20(r16)
  80cde4:	1100032e 	bgeu	r2,r4,80cdf4 <__sfvwrite_r+0x250>
  80cde8:	80c00217 	ldw	r3,8(r16)
  80cdec:	38c7883a 	add	r3,r7,r3
  80cdf0:	1d801816 	blt	r3,r22,80ce54 <__sfvwrite_r+0x2b0>
  80cdf4:	b1c03e16 	blt	r22,r7,80cef0 <__sfvwrite_r+0x34c>
  80cdf8:	80800917 	ldw	r2,36(r16)
  80cdfc:	81400717 	ldw	r5,28(r16)
  80ce00:	e00d883a 	mov	r6,fp
  80ce04:	da000115 	stw	r8,4(sp)
  80ce08:	a809883a 	mov	r4,r21
  80ce0c:	103ee83a 	callr	r2
  80ce10:	102f883a 	mov	r23,r2
  80ce14:	da000117 	ldw	r8,4(sp)
  80ce18:	00bfe00e 	bge	zero,r2,80cd9c <__alt_mem_onchip_mem+0xff804d9c>
  80ce1c:	9de7c83a 	sub	r19,r19,r23
  80ce20:	98001f26 	beq	r19,zero,80cea0 <__sfvwrite_r+0x2fc>
  80ce24:	a0800217 	ldw	r2,8(r20)
  80ce28:	e5f9883a 	add	fp,fp,r23
  80ce2c:	95e5c83a 	sub	r18,r18,r23
  80ce30:	15efc83a 	sub	r23,r2,r23
  80ce34:	a5c00215 	stw	r23,8(r20)
  80ce38:	b83f8726 	beq	r23,zero,80cc58 <__alt_mem_onchip_mem+0xff804c58>
  80ce3c:	903fe11e 	bne	r18,zero,80cdc4 <__alt_mem_onchip_mem+0xff804dc4>
  80ce40:	8f000017 	ldw	fp,0(r17)
  80ce44:	8c800117 	ldw	r18,4(r17)
  80ce48:	0011883a 	mov	r8,zero
  80ce4c:	8c400204 	addi	r17,r17,8
  80ce50:	003fdb06 	br	80cdc0 <__alt_mem_onchip_mem+0xff804dc0>
  80ce54:	180d883a 	mov	r6,r3
  80ce58:	e00b883a 	mov	r5,fp
  80ce5c:	da000115 	stw	r8,4(sp)
  80ce60:	d8c00015 	stw	r3,0(sp)
  80ce64:	080d5a40 	call	80d5a4 <memmove>
  80ce68:	d8c00017 	ldw	r3,0(sp)
  80ce6c:	80800017 	ldw	r2,0(r16)
  80ce70:	800b883a 	mov	r5,r16
  80ce74:	a809883a 	mov	r4,r21
  80ce78:	10c5883a 	add	r2,r2,r3
  80ce7c:	80800015 	stw	r2,0(r16)
  80ce80:	d8c00015 	stw	r3,0(sp)
  80ce84:	080c2980 	call	80c298 <_fflush_r>
  80ce88:	d8c00017 	ldw	r3,0(sp)
  80ce8c:	da000117 	ldw	r8,4(sp)
  80ce90:	103fc21e 	bne	r2,zero,80cd9c <__alt_mem_onchip_mem+0xff804d9c>
  80ce94:	182f883a 	mov	r23,r3
  80ce98:	9de7c83a 	sub	r19,r19,r23
  80ce9c:	983fe11e 	bne	r19,zero,80ce24 <__alt_mem_onchip_mem+0xff804e24>
  80cea0:	800b883a 	mov	r5,r16
  80cea4:	a809883a 	mov	r4,r21
  80cea8:	080c2980 	call	80c298 <_fflush_r>
  80ceac:	103fbb1e 	bne	r2,zero,80cd9c <__alt_mem_onchip_mem+0xff804d9c>
  80ceb0:	0011883a 	mov	r8,zero
  80ceb4:	003fdb06 	br	80ce24 <__alt_mem_onchip_mem+0xff804e24>
  80ceb8:	94c0012e 	bgeu	r18,r19,80cec0 <__sfvwrite_r+0x31c>
  80cebc:	9027883a 	mov	r19,r18
  80cec0:	980d883a 	mov	r6,r19
  80cec4:	e00b883a 	mov	r5,fp
  80cec8:	080d5a40 	call	80d5a4 <memmove>
  80cecc:	80800217 	ldw	r2,8(r16)
  80ced0:	80c00017 	ldw	r3,0(r16)
  80ced4:	14c5c83a 	sub	r2,r2,r19
  80ced8:	1cc7883a 	add	r3,r3,r19
  80cedc:	80800215 	stw	r2,8(r16)
  80cee0:	80c00015 	stw	r3,0(r16)
  80cee4:	10004326 	beq	r2,zero,80cff4 <__sfvwrite_r+0x450>
  80cee8:	9805883a 	mov	r2,r19
  80ceec:	003f8606 	br	80cd08 <__alt_mem_onchip_mem+0xff804d08>
  80cef0:	b00d883a 	mov	r6,r22
  80cef4:	e00b883a 	mov	r5,fp
  80cef8:	da000115 	stw	r8,4(sp)
  80cefc:	080d5a40 	call	80d5a4 <memmove>
  80cf00:	80800217 	ldw	r2,8(r16)
  80cf04:	80c00017 	ldw	r3,0(r16)
  80cf08:	da000117 	ldw	r8,4(sp)
  80cf0c:	1585c83a 	sub	r2,r2,r22
  80cf10:	1dad883a 	add	r22,r3,r22
  80cf14:	80800215 	stw	r2,8(r16)
  80cf18:	85800015 	stw	r22,0(r16)
  80cf1c:	003fbf06 	br	80ce1c <__alt_mem_onchip_mem+0xff804e1c>
  80cf20:	81000017 	ldw	r4,0(r16)
  80cf24:	9027883a 	mov	r19,r18
  80cf28:	902f883a 	mov	r23,r18
  80cf2c:	003f6c06 	br	80cce0 <__alt_mem_onchip_mem+0xff804ce0>
  80cf30:	900d883a 	mov	r6,r18
  80cf34:	01400284 	movi	r5,10
  80cf38:	e009883a 	mov	r4,fp
  80cf3c:	080d3780 	call	80d378 <memchr>
  80cf40:	10003e26 	beq	r2,zero,80d03c <__sfvwrite_r+0x498>
  80cf44:	10800044 	addi	r2,r2,1
  80cf48:	1727c83a 	sub	r19,r2,fp
  80cf4c:	02000044 	movi	r8,1
  80cf50:	003f9d06 	br	80cdc8 <__alt_mem_onchip_mem+0xff804dc8>
  80cf54:	80800517 	ldw	r2,20(r16)
  80cf58:	81400417 	ldw	r5,16(r16)
  80cf5c:	81c00017 	ldw	r7,0(r16)
  80cf60:	10a7883a 	add	r19,r2,r2
  80cf64:	9885883a 	add	r2,r19,r2
  80cf68:	1026d7fa 	srli	r19,r2,31
  80cf6c:	396dc83a 	sub	r22,r7,r5
  80cf70:	b1000044 	addi	r4,r22,1
  80cf74:	9885883a 	add	r2,r19,r2
  80cf78:	1027d07a 	srai	r19,r2,1
  80cf7c:	2485883a 	add	r2,r4,r18
  80cf80:	980d883a 	mov	r6,r19
  80cf84:	9880022e 	bgeu	r19,r2,80cf90 <__sfvwrite_r+0x3ec>
  80cf88:	1027883a 	mov	r19,r2
  80cf8c:	100d883a 	mov	r6,r2
  80cf90:	18c1000c 	andi	r3,r3,1024
  80cf94:	18001c26 	beq	r3,zero,80d008 <__sfvwrite_r+0x464>
  80cf98:	300b883a 	mov	r5,r6
  80cf9c:	a809883a 	mov	r4,r21
  80cfa0:	080749c0 	call	80749c <_malloc_r>
  80cfa4:	102f883a 	mov	r23,r2
  80cfa8:	10002926 	beq	r2,zero,80d050 <__sfvwrite_r+0x4ac>
  80cfac:	81400417 	ldw	r5,16(r16)
  80cfb0:	b00d883a 	mov	r6,r22
  80cfb4:	1009883a 	mov	r4,r2
  80cfb8:	080d45c0 	call	80d45c <memcpy>
  80cfbc:	8080030b 	ldhu	r2,12(r16)
  80cfc0:	00fedfc4 	movi	r3,-1153
  80cfc4:	10c4703a 	and	r2,r2,r3
  80cfc8:	10802014 	ori	r2,r2,128
  80cfcc:	8080030d 	sth	r2,12(r16)
  80cfd0:	bd89883a 	add	r4,r23,r22
  80cfd4:	9d8fc83a 	sub	r7,r19,r22
  80cfd8:	85c00415 	stw	r23,16(r16)
  80cfdc:	84c00515 	stw	r19,20(r16)
  80cfe0:	81000015 	stw	r4,0(r16)
  80cfe4:	9027883a 	mov	r19,r18
  80cfe8:	81c00215 	stw	r7,8(r16)
  80cfec:	902f883a 	mov	r23,r18
  80cff0:	003f3b06 	br	80cce0 <__alt_mem_onchip_mem+0xff804ce0>
  80cff4:	800b883a 	mov	r5,r16
  80cff8:	a809883a 	mov	r4,r21
  80cffc:	080c2980 	call	80c298 <_fflush_r>
  80d000:	103fb926 	beq	r2,zero,80cee8 <__alt_mem_onchip_mem+0xff804ee8>
  80d004:	003f6506 	br	80cd9c <__alt_mem_onchip_mem+0xff804d9c>
  80d008:	a809883a 	mov	r4,r21
  80d00c:	080e75c0 	call	80e75c <_realloc_r>
  80d010:	102f883a 	mov	r23,r2
  80d014:	103fee1e 	bne	r2,zero,80cfd0 <__alt_mem_onchip_mem+0xff804fd0>
  80d018:	81400417 	ldw	r5,16(r16)
  80d01c:	a809883a 	mov	r4,r21
  80d020:	080c8940 	call	80c894 <_free_r>
  80d024:	8080030b 	ldhu	r2,12(r16)
  80d028:	00ffdfc4 	movi	r3,-129
  80d02c:	1884703a 	and	r2,r3,r2
  80d030:	00c00304 	movi	r3,12
  80d034:	a8c00015 	stw	r3,0(r21)
  80d038:	003f5906 	br	80cda0 <__alt_mem_onchip_mem+0xff804da0>
  80d03c:	94c00044 	addi	r19,r18,1
  80d040:	02000044 	movi	r8,1
  80d044:	003f6006 	br	80cdc8 <__alt_mem_onchip_mem+0xff804dc8>
  80d048:	00bfffc4 	movi	r2,-1
  80d04c:	003f0306 	br	80cc5c <__alt_mem_onchip_mem+0xff804c5c>
  80d050:	00800304 	movi	r2,12
  80d054:	a8800015 	stw	r2,0(r21)
  80d058:	8080030b 	ldhu	r2,12(r16)
  80d05c:	003f5006 	br	80cda0 <__alt_mem_onchip_mem+0xff804da0>

0080d060 <_fwalk>:
  80d060:	defff704 	addi	sp,sp,-36
  80d064:	dd000415 	stw	r20,16(sp)
  80d068:	dfc00815 	stw	ra,32(sp)
  80d06c:	ddc00715 	stw	r23,28(sp)
  80d070:	dd800615 	stw	r22,24(sp)
  80d074:	dd400515 	stw	r21,20(sp)
  80d078:	dcc00315 	stw	r19,12(sp)
  80d07c:	dc800215 	stw	r18,8(sp)
  80d080:	dc400115 	stw	r17,4(sp)
  80d084:	dc000015 	stw	r16,0(sp)
  80d088:	2500b804 	addi	r20,r4,736
  80d08c:	a0002326 	beq	r20,zero,80d11c <_fwalk+0xbc>
  80d090:	282b883a 	mov	r21,r5
  80d094:	002f883a 	mov	r23,zero
  80d098:	05800044 	movi	r22,1
  80d09c:	04ffffc4 	movi	r19,-1
  80d0a0:	a4400117 	ldw	r17,4(r20)
  80d0a4:	a4800217 	ldw	r18,8(r20)
  80d0a8:	8c7fffc4 	addi	r17,r17,-1
  80d0ac:	88000d16 	blt	r17,zero,80d0e4 <_fwalk+0x84>
  80d0b0:	94000304 	addi	r16,r18,12
  80d0b4:	94800384 	addi	r18,r18,14
  80d0b8:	8080000b 	ldhu	r2,0(r16)
  80d0bc:	8c7fffc4 	addi	r17,r17,-1
  80d0c0:	813ffd04 	addi	r4,r16,-12
  80d0c4:	b080042e 	bgeu	r22,r2,80d0d8 <_fwalk+0x78>
  80d0c8:	9080000f 	ldh	r2,0(r18)
  80d0cc:	14c00226 	beq	r2,r19,80d0d8 <_fwalk+0x78>
  80d0d0:	a83ee83a 	callr	r21
  80d0d4:	b8aeb03a 	or	r23,r23,r2
  80d0d8:	84001a04 	addi	r16,r16,104
  80d0dc:	94801a04 	addi	r18,r18,104
  80d0e0:	8cfff51e 	bne	r17,r19,80d0b8 <__alt_mem_onchip_mem+0xff8050b8>
  80d0e4:	a5000017 	ldw	r20,0(r20)
  80d0e8:	a03fed1e 	bne	r20,zero,80d0a0 <__alt_mem_onchip_mem+0xff8050a0>
  80d0ec:	b805883a 	mov	r2,r23
  80d0f0:	dfc00817 	ldw	ra,32(sp)
  80d0f4:	ddc00717 	ldw	r23,28(sp)
  80d0f8:	dd800617 	ldw	r22,24(sp)
  80d0fc:	dd400517 	ldw	r21,20(sp)
  80d100:	dd000417 	ldw	r20,16(sp)
  80d104:	dcc00317 	ldw	r19,12(sp)
  80d108:	dc800217 	ldw	r18,8(sp)
  80d10c:	dc400117 	ldw	r17,4(sp)
  80d110:	dc000017 	ldw	r16,0(sp)
  80d114:	dec00904 	addi	sp,sp,36
  80d118:	f800283a 	ret
  80d11c:	002f883a 	mov	r23,zero
  80d120:	003ff206 	br	80d0ec <__alt_mem_onchip_mem+0xff8050ec>

0080d124 <_fwalk_reent>:
  80d124:	defff704 	addi	sp,sp,-36
  80d128:	dd000415 	stw	r20,16(sp)
  80d12c:	dfc00815 	stw	ra,32(sp)
  80d130:	ddc00715 	stw	r23,28(sp)
  80d134:	dd800615 	stw	r22,24(sp)
  80d138:	dd400515 	stw	r21,20(sp)
  80d13c:	dcc00315 	stw	r19,12(sp)
  80d140:	dc800215 	stw	r18,8(sp)
  80d144:	dc400115 	stw	r17,4(sp)
  80d148:	dc000015 	stw	r16,0(sp)
  80d14c:	2500b804 	addi	r20,r4,736
  80d150:	a0002326 	beq	r20,zero,80d1e0 <_fwalk_reent+0xbc>
  80d154:	282b883a 	mov	r21,r5
  80d158:	2027883a 	mov	r19,r4
  80d15c:	002f883a 	mov	r23,zero
  80d160:	05800044 	movi	r22,1
  80d164:	04bfffc4 	movi	r18,-1
  80d168:	a4400117 	ldw	r17,4(r20)
  80d16c:	a4000217 	ldw	r16,8(r20)
  80d170:	8c7fffc4 	addi	r17,r17,-1
  80d174:	88000c16 	blt	r17,zero,80d1a8 <_fwalk_reent+0x84>
  80d178:	84000304 	addi	r16,r16,12
  80d17c:	8080000b 	ldhu	r2,0(r16)
  80d180:	8c7fffc4 	addi	r17,r17,-1
  80d184:	817ffd04 	addi	r5,r16,-12
  80d188:	b080052e 	bgeu	r22,r2,80d1a0 <_fwalk_reent+0x7c>
  80d18c:	8080008f 	ldh	r2,2(r16)
  80d190:	9809883a 	mov	r4,r19
  80d194:	14800226 	beq	r2,r18,80d1a0 <_fwalk_reent+0x7c>
  80d198:	a83ee83a 	callr	r21
  80d19c:	b8aeb03a 	or	r23,r23,r2
  80d1a0:	84001a04 	addi	r16,r16,104
  80d1a4:	8cbff51e 	bne	r17,r18,80d17c <__alt_mem_onchip_mem+0xff80517c>
  80d1a8:	a5000017 	ldw	r20,0(r20)
  80d1ac:	a03fee1e 	bne	r20,zero,80d168 <__alt_mem_onchip_mem+0xff805168>
  80d1b0:	b805883a 	mov	r2,r23
  80d1b4:	dfc00817 	ldw	ra,32(sp)
  80d1b8:	ddc00717 	ldw	r23,28(sp)
  80d1bc:	dd800617 	ldw	r22,24(sp)
  80d1c0:	dd400517 	ldw	r21,20(sp)
  80d1c4:	dd000417 	ldw	r20,16(sp)
  80d1c8:	dcc00317 	ldw	r19,12(sp)
  80d1cc:	dc800217 	ldw	r18,8(sp)
  80d1d0:	dc400117 	ldw	r17,4(sp)
  80d1d4:	dc000017 	ldw	r16,0(sp)
  80d1d8:	dec00904 	addi	sp,sp,36
  80d1dc:	f800283a 	ret
  80d1e0:	002f883a 	mov	r23,zero
  80d1e4:	003ff206 	br	80d1b0 <__alt_mem_onchip_mem+0xff8051b0>

0080d1e8 <_isatty_r>:
  80d1e8:	defffd04 	addi	sp,sp,-12
  80d1ec:	dc000015 	stw	r16,0(sp)
  80d1f0:	040020b4 	movhi	r16,130
  80d1f4:	dc400115 	stw	r17,4(sp)
  80d1f8:	842ae404 	addi	r16,r16,-21616
  80d1fc:	2023883a 	mov	r17,r4
  80d200:	2809883a 	mov	r4,r5
  80d204:	dfc00215 	stw	ra,8(sp)
  80d208:	80000015 	stw	zero,0(r16)
  80d20c:	0812de00 	call	812de0 <isatty>
  80d210:	00ffffc4 	movi	r3,-1
  80d214:	10c00526 	beq	r2,r3,80d22c <_isatty_r+0x44>
  80d218:	dfc00217 	ldw	ra,8(sp)
  80d21c:	dc400117 	ldw	r17,4(sp)
  80d220:	dc000017 	ldw	r16,0(sp)
  80d224:	dec00304 	addi	sp,sp,12
  80d228:	f800283a 	ret
  80d22c:	80c00017 	ldw	r3,0(r16)
  80d230:	183ff926 	beq	r3,zero,80d218 <__alt_mem_onchip_mem+0xff805218>
  80d234:	88c00015 	stw	r3,0(r17)
  80d238:	003ff706 	br	80d218 <__alt_mem_onchip_mem+0xff805218>

0080d23c <_setlocale_r>:
  80d23c:	30001b26 	beq	r6,zero,80d2ac <_setlocale_r+0x70>
  80d240:	01402074 	movhi	r5,129
  80d244:	defffe04 	addi	sp,sp,-8
  80d248:	295b6904 	addi	r5,r5,28068
  80d24c:	3009883a 	mov	r4,r6
  80d250:	dc000015 	stw	r16,0(sp)
  80d254:	dfc00115 	stw	ra,4(sp)
  80d258:	3021883a 	mov	r16,r6
  80d25c:	080ed340 	call	80ed34 <strcmp>
  80d260:	1000061e 	bne	r2,zero,80d27c <_setlocale_r+0x40>
  80d264:	00802074 	movhi	r2,129
  80d268:	109b4a04 	addi	r2,r2,27944
  80d26c:	dfc00117 	ldw	ra,4(sp)
  80d270:	dc000017 	ldw	r16,0(sp)
  80d274:	dec00204 	addi	sp,sp,8
  80d278:	f800283a 	ret
  80d27c:	01402074 	movhi	r5,129
  80d280:	295b4a04 	addi	r5,r5,27944
  80d284:	8009883a 	mov	r4,r16
  80d288:	080ed340 	call	80ed34 <strcmp>
  80d28c:	103ff526 	beq	r2,zero,80d264 <__alt_mem_onchip_mem+0xff805264>
  80d290:	01402074 	movhi	r5,129
  80d294:	295b5404 	addi	r5,r5,27984
  80d298:	8009883a 	mov	r4,r16
  80d29c:	080ed340 	call	80ed34 <strcmp>
  80d2a0:	103ff026 	beq	r2,zero,80d264 <__alt_mem_onchip_mem+0xff805264>
  80d2a4:	0005883a 	mov	r2,zero
  80d2a8:	003ff006 	br	80d26c <__alt_mem_onchip_mem+0xff80526c>
  80d2ac:	00802074 	movhi	r2,129
  80d2b0:	109b4a04 	addi	r2,r2,27944
  80d2b4:	f800283a 	ret

0080d2b8 <__locale_charset>:
  80d2b8:	00802074 	movhi	r2,129
  80d2bc:	109e8104 	addi	r2,r2,31236
  80d2c0:	f800283a 	ret

0080d2c4 <__locale_mb_cur_max>:
  80d2c4:	008020b4 	movhi	r2,130
  80d2c8:	10a39704 	addi	r2,r2,-29092
  80d2cc:	10800017 	ldw	r2,0(r2)
  80d2d0:	f800283a 	ret

0080d2d4 <__locale_msgcharset>:
  80d2d4:	00802074 	movhi	r2,129
  80d2d8:	109e7904 	addi	r2,r2,31204
  80d2dc:	f800283a 	ret

0080d2e0 <__locale_cjk_lang>:
  80d2e0:	0005883a 	mov	r2,zero
  80d2e4:	f800283a 	ret

0080d2e8 <_localeconv_r>:
  80d2e8:	00802074 	movhi	r2,129
  80d2ec:	109e8904 	addi	r2,r2,31268
  80d2f0:	f800283a 	ret

0080d2f4 <setlocale>:
  80d2f4:	008020b4 	movhi	r2,130
  80d2f8:	10a39404 	addi	r2,r2,-29104
  80d2fc:	280d883a 	mov	r6,r5
  80d300:	200b883a 	mov	r5,r4
  80d304:	11000017 	ldw	r4,0(r2)
  80d308:	080d23c1 	jmpi	80d23c <_setlocale_r>

0080d30c <localeconv>:
  80d30c:	00802074 	movhi	r2,129
  80d310:	109e8904 	addi	r2,r2,31268
  80d314:	f800283a 	ret

0080d318 <_lseek_r>:
  80d318:	defffd04 	addi	sp,sp,-12
  80d31c:	2805883a 	mov	r2,r5
  80d320:	dc000015 	stw	r16,0(sp)
  80d324:	040020b4 	movhi	r16,130
  80d328:	dc400115 	stw	r17,4(sp)
  80d32c:	300b883a 	mov	r5,r6
  80d330:	842ae404 	addi	r16,r16,-21616
  80d334:	2023883a 	mov	r17,r4
  80d338:	380d883a 	mov	r6,r7
  80d33c:	1009883a 	mov	r4,r2
  80d340:	dfc00215 	stw	ra,8(sp)
  80d344:	80000015 	stw	zero,0(r16)
  80d348:	0812fac0 	call	812fac <lseek>
  80d34c:	00ffffc4 	movi	r3,-1
  80d350:	10c00526 	beq	r2,r3,80d368 <_lseek_r+0x50>
  80d354:	dfc00217 	ldw	ra,8(sp)
  80d358:	dc400117 	ldw	r17,4(sp)
  80d35c:	dc000017 	ldw	r16,0(sp)
  80d360:	dec00304 	addi	sp,sp,12
  80d364:	f800283a 	ret
  80d368:	80c00017 	ldw	r3,0(r16)
  80d36c:	183ff926 	beq	r3,zero,80d354 <__alt_mem_onchip_mem+0xff805354>
  80d370:	88c00015 	stw	r3,0(r17)
  80d374:	003ff706 	br	80d354 <__alt_mem_onchip_mem+0xff805354>

0080d378 <memchr>:
  80d378:	208000cc 	andi	r2,r4,3
  80d37c:	280f883a 	mov	r7,r5
  80d380:	10003426 	beq	r2,zero,80d454 <memchr+0xdc>
  80d384:	30bfffc4 	addi	r2,r6,-1
  80d388:	30001a26 	beq	r6,zero,80d3f4 <memchr+0x7c>
  80d38c:	20c00003 	ldbu	r3,0(r4)
  80d390:	29803fcc 	andi	r6,r5,255
  80d394:	30c0051e 	bne	r6,r3,80d3ac <memchr+0x34>
  80d398:	00001806 	br	80d3fc <memchr+0x84>
  80d39c:	10001526 	beq	r2,zero,80d3f4 <memchr+0x7c>
  80d3a0:	20c00003 	ldbu	r3,0(r4)
  80d3a4:	10bfffc4 	addi	r2,r2,-1
  80d3a8:	30c01426 	beq	r6,r3,80d3fc <memchr+0x84>
  80d3ac:	21000044 	addi	r4,r4,1
  80d3b0:	20c000cc 	andi	r3,r4,3
  80d3b4:	183ff91e 	bne	r3,zero,80d39c <__alt_mem_onchip_mem+0xff80539c>
  80d3b8:	020000c4 	movi	r8,3
  80d3bc:	40801136 	bltu	r8,r2,80d404 <memchr+0x8c>
  80d3c0:	10000c26 	beq	r2,zero,80d3f4 <memchr+0x7c>
  80d3c4:	20c00003 	ldbu	r3,0(r4)
  80d3c8:	29403fcc 	andi	r5,r5,255
  80d3cc:	28c00b26 	beq	r5,r3,80d3fc <memchr+0x84>
  80d3d0:	20c00044 	addi	r3,r4,1
  80d3d4:	39803fcc 	andi	r6,r7,255
  80d3d8:	2089883a 	add	r4,r4,r2
  80d3dc:	00000306 	br	80d3ec <memchr+0x74>
  80d3e0:	18c00044 	addi	r3,r3,1
  80d3e4:	197fffc3 	ldbu	r5,-1(r3)
  80d3e8:	31400526 	beq	r6,r5,80d400 <memchr+0x88>
  80d3ec:	1805883a 	mov	r2,r3
  80d3f0:	20fffb1e 	bne	r4,r3,80d3e0 <__alt_mem_onchip_mem+0xff8053e0>
  80d3f4:	0005883a 	mov	r2,zero
  80d3f8:	f800283a 	ret
  80d3fc:	2005883a 	mov	r2,r4
  80d400:	f800283a 	ret
  80d404:	28c03fcc 	andi	r3,r5,255
  80d408:	1812923a 	slli	r9,r3,8
  80d40c:	02ffbff4 	movhi	r11,65279
  80d410:	02a02074 	movhi	r10,32897
  80d414:	48d2b03a 	or	r9,r9,r3
  80d418:	4806943a 	slli	r3,r9,16
  80d41c:	5affbfc4 	addi	r11,r11,-257
  80d420:	52a02004 	addi	r10,r10,-32640
  80d424:	48d2b03a 	or	r9,r9,r3
  80d428:	20c00017 	ldw	r3,0(r4)
  80d42c:	48c6f03a 	xor	r3,r9,r3
  80d430:	1acd883a 	add	r6,r3,r11
  80d434:	00c6303a 	nor	r3,zero,r3
  80d438:	30c6703a 	and	r3,r6,r3
  80d43c:	1a86703a 	and	r3,r3,r10
  80d440:	183fe01e 	bne	r3,zero,80d3c4 <__alt_mem_onchip_mem+0xff8053c4>
  80d444:	10bfff04 	addi	r2,r2,-4
  80d448:	21000104 	addi	r4,r4,4
  80d44c:	40bff636 	bltu	r8,r2,80d428 <__alt_mem_onchip_mem+0xff805428>
  80d450:	003fdb06 	br	80d3c0 <__alt_mem_onchip_mem+0xff8053c0>
  80d454:	3005883a 	mov	r2,r6
  80d458:	003fd706 	br	80d3b8 <__alt_mem_onchip_mem+0xff8053b8>

0080d45c <memcpy>:
  80d45c:	defffd04 	addi	sp,sp,-12
  80d460:	dfc00215 	stw	ra,8(sp)
  80d464:	dc400115 	stw	r17,4(sp)
  80d468:	dc000015 	stw	r16,0(sp)
  80d46c:	00c003c4 	movi	r3,15
  80d470:	2005883a 	mov	r2,r4
  80d474:	1980452e 	bgeu	r3,r6,80d58c <memcpy+0x130>
  80d478:	2906b03a 	or	r3,r5,r4
  80d47c:	18c000cc 	andi	r3,r3,3
  80d480:	1800441e 	bne	r3,zero,80d594 <memcpy+0x138>
  80d484:	347ffc04 	addi	r17,r6,-16
  80d488:	8822d13a 	srli	r17,r17,4
  80d48c:	28c00104 	addi	r3,r5,4
  80d490:	23400104 	addi	r13,r4,4
  80d494:	8820913a 	slli	r16,r17,4
  80d498:	2b000204 	addi	r12,r5,8
  80d49c:	22c00204 	addi	r11,r4,8
  80d4a0:	84000504 	addi	r16,r16,20
  80d4a4:	2a800304 	addi	r10,r5,12
  80d4a8:	22400304 	addi	r9,r4,12
  80d4ac:	2c21883a 	add	r16,r5,r16
  80d4b0:	2811883a 	mov	r8,r5
  80d4b4:	200f883a 	mov	r7,r4
  80d4b8:	41000017 	ldw	r4,0(r8)
  80d4bc:	1fc00017 	ldw	ra,0(r3)
  80d4c0:	63c00017 	ldw	r15,0(r12)
  80d4c4:	39000015 	stw	r4,0(r7)
  80d4c8:	53800017 	ldw	r14,0(r10)
  80d4cc:	6fc00015 	stw	ra,0(r13)
  80d4d0:	5bc00015 	stw	r15,0(r11)
  80d4d4:	4b800015 	stw	r14,0(r9)
  80d4d8:	18c00404 	addi	r3,r3,16
  80d4dc:	39c00404 	addi	r7,r7,16
  80d4e0:	42000404 	addi	r8,r8,16
  80d4e4:	6b400404 	addi	r13,r13,16
  80d4e8:	63000404 	addi	r12,r12,16
  80d4ec:	5ac00404 	addi	r11,r11,16
  80d4f0:	52800404 	addi	r10,r10,16
  80d4f4:	4a400404 	addi	r9,r9,16
  80d4f8:	1c3fef1e 	bne	r3,r16,80d4b8 <__alt_mem_onchip_mem+0xff8054b8>
  80d4fc:	89c00044 	addi	r7,r17,1
  80d500:	380e913a 	slli	r7,r7,4
  80d504:	310003cc 	andi	r4,r6,15
  80d508:	02c000c4 	movi	r11,3
  80d50c:	11c7883a 	add	r3,r2,r7
  80d510:	29cb883a 	add	r5,r5,r7
  80d514:	5900212e 	bgeu	r11,r4,80d59c <memcpy+0x140>
  80d518:	1813883a 	mov	r9,r3
  80d51c:	2811883a 	mov	r8,r5
  80d520:	200f883a 	mov	r7,r4
  80d524:	42800017 	ldw	r10,0(r8)
  80d528:	4a400104 	addi	r9,r9,4
  80d52c:	39ffff04 	addi	r7,r7,-4
  80d530:	4abfff15 	stw	r10,-4(r9)
  80d534:	42000104 	addi	r8,r8,4
  80d538:	59fffa36 	bltu	r11,r7,80d524 <__alt_mem_onchip_mem+0xff805524>
  80d53c:	213fff04 	addi	r4,r4,-4
  80d540:	2008d0ba 	srli	r4,r4,2
  80d544:	318000cc 	andi	r6,r6,3
  80d548:	21000044 	addi	r4,r4,1
  80d54c:	2109883a 	add	r4,r4,r4
  80d550:	2109883a 	add	r4,r4,r4
  80d554:	1907883a 	add	r3,r3,r4
  80d558:	290b883a 	add	r5,r5,r4
  80d55c:	30000626 	beq	r6,zero,80d578 <memcpy+0x11c>
  80d560:	198d883a 	add	r6,r3,r6
  80d564:	29c00003 	ldbu	r7,0(r5)
  80d568:	18c00044 	addi	r3,r3,1
  80d56c:	29400044 	addi	r5,r5,1
  80d570:	19ffffc5 	stb	r7,-1(r3)
  80d574:	19bffb1e 	bne	r3,r6,80d564 <__alt_mem_onchip_mem+0xff805564>
  80d578:	dfc00217 	ldw	ra,8(sp)
  80d57c:	dc400117 	ldw	r17,4(sp)
  80d580:	dc000017 	ldw	r16,0(sp)
  80d584:	dec00304 	addi	sp,sp,12
  80d588:	f800283a 	ret
  80d58c:	2007883a 	mov	r3,r4
  80d590:	003ff206 	br	80d55c <__alt_mem_onchip_mem+0xff80555c>
  80d594:	2007883a 	mov	r3,r4
  80d598:	003ff106 	br	80d560 <__alt_mem_onchip_mem+0xff805560>
  80d59c:	200d883a 	mov	r6,r4
  80d5a0:	003fee06 	br	80d55c <__alt_mem_onchip_mem+0xff80555c>

0080d5a4 <memmove>:
  80d5a4:	2005883a 	mov	r2,r4
  80d5a8:	29000b2e 	bgeu	r5,r4,80d5d8 <memmove+0x34>
  80d5ac:	298f883a 	add	r7,r5,r6
  80d5b0:	21c0092e 	bgeu	r4,r7,80d5d8 <memmove+0x34>
  80d5b4:	2187883a 	add	r3,r4,r6
  80d5b8:	198bc83a 	sub	r5,r3,r6
  80d5bc:	30004826 	beq	r6,zero,80d6e0 <memmove+0x13c>
  80d5c0:	39ffffc4 	addi	r7,r7,-1
  80d5c4:	39000003 	ldbu	r4,0(r7)
  80d5c8:	18ffffc4 	addi	r3,r3,-1
  80d5cc:	19000005 	stb	r4,0(r3)
  80d5d0:	28fffb1e 	bne	r5,r3,80d5c0 <__alt_mem_onchip_mem+0xff8055c0>
  80d5d4:	f800283a 	ret
  80d5d8:	00c003c4 	movi	r3,15
  80d5dc:	1980412e 	bgeu	r3,r6,80d6e4 <memmove+0x140>
  80d5e0:	2886b03a 	or	r3,r5,r2
  80d5e4:	18c000cc 	andi	r3,r3,3
  80d5e8:	1800401e 	bne	r3,zero,80d6ec <memmove+0x148>
  80d5ec:	33fffc04 	addi	r15,r6,-16
  80d5f0:	781ed13a 	srli	r15,r15,4
  80d5f4:	28c00104 	addi	r3,r5,4
  80d5f8:	13400104 	addi	r13,r2,4
  80d5fc:	781c913a 	slli	r14,r15,4
  80d600:	2b000204 	addi	r12,r5,8
  80d604:	12c00204 	addi	r11,r2,8
  80d608:	73800504 	addi	r14,r14,20
  80d60c:	2a800304 	addi	r10,r5,12
  80d610:	12400304 	addi	r9,r2,12
  80d614:	2b9d883a 	add	r14,r5,r14
  80d618:	2811883a 	mov	r8,r5
  80d61c:	100f883a 	mov	r7,r2
  80d620:	41000017 	ldw	r4,0(r8)
  80d624:	39c00404 	addi	r7,r7,16
  80d628:	18c00404 	addi	r3,r3,16
  80d62c:	393ffc15 	stw	r4,-16(r7)
  80d630:	193ffc17 	ldw	r4,-16(r3)
  80d634:	6b400404 	addi	r13,r13,16
  80d638:	5ac00404 	addi	r11,r11,16
  80d63c:	693ffc15 	stw	r4,-16(r13)
  80d640:	61000017 	ldw	r4,0(r12)
  80d644:	4a400404 	addi	r9,r9,16
  80d648:	42000404 	addi	r8,r8,16
  80d64c:	593ffc15 	stw	r4,-16(r11)
  80d650:	51000017 	ldw	r4,0(r10)
  80d654:	63000404 	addi	r12,r12,16
  80d658:	52800404 	addi	r10,r10,16
  80d65c:	493ffc15 	stw	r4,-16(r9)
  80d660:	1bbfef1e 	bne	r3,r14,80d620 <__alt_mem_onchip_mem+0xff805620>
  80d664:	79000044 	addi	r4,r15,1
  80d668:	2008913a 	slli	r4,r4,4
  80d66c:	328003cc 	andi	r10,r6,15
  80d670:	02c000c4 	movi	r11,3
  80d674:	1107883a 	add	r3,r2,r4
  80d678:	290b883a 	add	r5,r5,r4
  80d67c:	5a801e2e 	bgeu	r11,r10,80d6f8 <memmove+0x154>
  80d680:	1813883a 	mov	r9,r3
  80d684:	2811883a 	mov	r8,r5
  80d688:	500f883a 	mov	r7,r10
  80d68c:	41000017 	ldw	r4,0(r8)
  80d690:	4a400104 	addi	r9,r9,4
  80d694:	39ffff04 	addi	r7,r7,-4
  80d698:	493fff15 	stw	r4,-4(r9)
  80d69c:	42000104 	addi	r8,r8,4
  80d6a0:	59fffa36 	bltu	r11,r7,80d68c <__alt_mem_onchip_mem+0xff80568c>
  80d6a4:	513fff04 	addi	r4,r10,-4
  80d6a8:	2008d0ba 	srli	r4,r4,2
  80d6ac:	318000cc 	andi	r6,r6,3
  80d6b0:	21000044 	addi	r4,r4,1
  80d6b4:	2109883a 	add	r4,r4,r4
  80d6b8:	2109883a 	add	r4,r4,r4
  80d6bc:	1907883a 	add	r3,r3,r4
  80d6c0:	290b883a 	add	r5,r5,r4
  80d6c4:	30000b26 	beq	r6,zero,80d6f4 <memmove+0x150>
  80d6c8:	198d883a 	add	r6,r3,r6
  80d6cc:	29c00003 	ldbu	r7,0(r5)
  80d6d0:	18c00044 	addi	r3,r3,1
  80d6d4:	29400044 	addi	r5,r5,1
  80d6d8:	19ffffc5 	stb	r7,-1(r3)
  80d6dc:	19bffb1e 	bne	r3,r6,80d6cc <__alt_mem_onchip_mem+0xff8056cc>
  80d6e0:	f800283a 	ret
  80d6e4:	1007883a 	mov	r3,r2
  80d6e8:	003ff606 	br	80d6c4 <__alt_mem_onchip_mem+0xff8056c4>
  80d6ec:	1007883a 	mov	r3,r2
  80d6f0:	003ff506 	br	80d6c8 <__alt_mem_onchip_mem+0xff8056c8>
  80d6f4:	f800283a 	ret
  80d6f8:	500d883a 	mov	r6,r10
  80d6fc:	003ff106 	br	80d6c4 <__alt_mem_onchip_mem+0xff8056c4>

0080d700 <_Balloc>:
  80d700:	20801317 	ldw	r2,76(r4)
  80d704:	defffc04 	addi	sp,sp,-16
  80d708:	dc400115 	stw	r17,4(sp)
  80d70c:	dc000015 	stw	r16,0(sp)
  80d710:	dfc00315 	stw	ra,12(sp)
  80d714:	dc800215 	stw	r18,8(sp)
  80d718:	2023883a 	mov	r17,r4
  80d71c:	2821883a 	mov	r16,r5
  80d720:	10000f26 	beq	r2,zero,80d760 <_Balloc+0x60>
  80d724:	8407883a 	add	r3,r16,r16
  80d728:	18c7883a 	add	r3,r3,r3
  80d72c:	10c7883a 	add	r3,r2,r3
  80d730:	18800017 	ldw	r2,0(r3)
  80d734:	10001126 	beq	r2,zero,80d77c <_Balloc+0x7c>
  80d738:	11000017 	ldw	r4,0(r2)
  80d73c:	19000015 	stw	r4,0(r3)
  80d740:	10000415 	stw	zero,16(r2)
  80d744:	10000315 	stw	zero,12(r2)
  80d748:	dfc00317 	ldw	ra,12(sp)
  80d74c:	dc800217 	ldw	r18,8(sp)
  80d750:	dc400117 	ldw	r17,4(sp)
  80d754:	dc000017 	ldw	r16,0(sp)
  80d758:	dec00404 	addi	sp,sp,16
  80d75c:	f800283a 	ret
  80d760:	01800844 	movi	r6,33
  80d764:	01400104 	movi	r5,4
  80d768:	08104580 	call	810458 <_calloc_r>
  80d76c:	88801315 	stw	r2,76(r17)
  80d770:	103fec1e 	bne	r2,zero,80d724 <__alt_mem_onchip_mem+0xff805724>
  80d774:	0005883a 	mov	r2,zero
  80d778:	003ff306 	br	80d748 <__alt_mem_onchip_mem+0xff805748>
  80d77c:	01400044 	movi	r5,1
  80d780:	2c24983a 	sll	r18,r5,r16
  80d784:	8809883a 	mov	r4,r17
  80d788:	91800144 	addi	r6,r18,5
  80d78c:	318d883a 	add	r6,r6,r6
  80d790:	318d883a 	add	r6,r6,r6
  80d794:	08104580 	call	810458 <_calloc_r>
  80d798:	103ff626 	beq	r2,zero,80d774 <__alt_mem_onchip_mem+0xff805774>
  80d79c:	14000115 	stw	r16,4(r2)
  80d7a0:	14800215 	stw	r18,8(r2)
  80d7a4:	003fe606 	br	80d740 <__alt_mem_onchip_mem+0xff805740>

0080d7a8 <_Bfree>:
  80d7a8:	28000826 	beq	r5,zero,80d7cc <_Bfree+0x24>
  80d7ac:	28c00117 	ldw	r3,4(r5)
  80d7b0:	20801317 	ldw	r2,76(r4)
  80d7b4:	18c7883a 	add	r3,r3,r3
  80d7b8:	18c7883a 	add	r3,r3,r3
  80d7bc:	10c5883a 	add	r2,r2,r3
  80d7c0:	10c00017 	ldw	r3,0(r2)
  80d7c4:	28c00015 	stw	r3,0(r5)
  80d7c8:	11400015 	stw	r5,0(r2)
  80d7cc:	f800283a 	ret

0080d7d0 <__multadd>:
  80d7d0:	defffa04 	addi	sp,sp,-24
  80d7d4:	dc800315 	stw	r18,12(sp)
  80d7d8:	dc400215 	stw	r17,8(sp)
  80d7dc:	dc000115 	stw	r16,4(sp)
  80d7e0:	2823883a 	mov	r17,r5
  80d7e4:	2c000417 	ldw	r16,16(r5)
  80d7e8:	dfc00515 	stw	ra,20(sp)
  80d7ec:	dcc00415 	stw	r19,16(sp)
  80d7f0:	2025883a 	mov	r18,r4
  80d7f4:	29400504 	addi	r5,r5,20
  80d7f8:	0011883a 	mov	r8,zero
  80d7fc:	28c00017 	ldw	r3,0(r5)
  80d800:	29400104 	addi	r5,r5,4
  80d804:	42000044 	addi	r8,r8,1
  80d808:	18bfffcc 	andi	r2,r3,65535
  80d80c:	1185383a 	mul	r2,r2,r6
  80d810:	1806d43a 	srli	r3,r3,16
  80d814:	11cf883a 	add	r7,r2,r7
  80d818:	3808d43a 	srli	r4,r7,16
  80d81c:	1987383a 	mul	r3,r3,r6
  80d820:	38bfffcc 	andi	r2,r7,65535
  80d824:	1907883a 	add	r3,r3,r4
  80d828:	1808943a 	slli	r4,r3,16
  80d82c:	180ed43a 	srli	r7,r3,16
  80d830:	2085883a 	add	r2,r4,r2
  80d834:	28bfff15 	stw	r2,-4(r5)
  80d838:	443ff016 	blt	r8,r16,80d7fc <__alt_mem_onchip_mem+0xff8057fc>
  80d83c:	38000926 	beq	r7,zero,80d864 <__multadd+0x94>
  80d840:	88800217 	ldw	r2,8(r17)
  80d844:	80800f0e 	bge	r16,r2,80d884 <__multadd+0xb4>
  80d848:	80800144 	addi	r2,r16,5
  80d84c:	1085883a 	add	r2,r2,r2
  80d850:	1085883a 	add	r2,r2,r2
  80d854:	8885883a 	add	r2,r17,r2
  80d858:	11c00015 	stw	r7,0(r2)
  80d85c:	84000044 	addi	r16,r16,1
  80d860:	8c000415 	stw	r16,16(r17)
  80d864:	8805883a 	mov	r2,r17
  80d868:	dfc00517 	ldw	ra,20(sp)
  80d86c:	dcc00417 	ldw	r19,16(sp)
  80d870:	dc800317 	ldw	r18,12(sp)
  80d874:	dc400217 	ldw	r17,8(sp)
  80d878:	dc000117 	ldw	r16,4(sp)
  80d87c:	dec00604 	addi	sp,sp,24
  80d880:	f800283a 	ret
  80d884:	89400117 	ldw	r5,4(r17)
  80d888:	9009883a 	mov	r4,r18
  80d88c:	d9c00015 	stw	r7,0(sp)
  80d890:	29400044 	addi	r5,r5,1
  80d894:	080d7000 	call	80d700 <_Balloc>
  80d898:	89800417 	ldw	r6,16(r17)
  80d89c:	89400304 	addi	r5,r17,12
  80d8a0:	11000304 	addi	r4,r2,12
  80d8a4:	31800084 	addi	r6,r6,2
  80d8a8:	318d883a 	add	r6,r6,r6
  80d8ac:	318d883a 	add	r6,r6,r6
  80d8b0:	1027883a 	mov	r19,r2
  80d8b4:	080d45c0 	call	80d45c <memcpy>
  80d8b8:	d9c00017 	ldw	r7,0(sp)
  80d8bc:	88000a26 	beq	r17,zero,80d8e8 <__multadd+0x118>
  80d8c0:	88c00117 	ldw	r3,4(r17)
  80d8c4:	90801317 	ldw	r2,76(r18)
  80d8c8:	18c7883a 	add	r3,r3,r3
  80d8cc:	18c7883a 	add	r3,r3,r3
  80d8d0:	10c5883a 	add	r2,r2,r3
  80d8d4:	10c00017 	ldw	r3,0(r2)
  80d8d8:	88c00015 	stw	r3,0(r17)
  80d8dc:	14400015 	stw	r17,0(r2)
  80d8e0:	9823883a 	mov	r17,r19
  80d8e4:	003fd806 	br	80d848 <__alt_mem_onchip_mem+0xff805848>
  80d8e8:	9823883a 	mov	r17,r19
  80d8ec:	003fd606 	br	80d848 <__alt_mem_onchip_mem+0xff805848>

0080d8f0 <__s2b>:
  80d8f0:	defff904 	addi	sp,sp,-28
  80d8f4:	dc400115 	stw	r17,4(sp)
  80d8f8:	dc000015 	stw	r16,0(sp)
  80d8fc:	2023883a 	mov	r17,r4
  80d900:	2821883a 	mov	r16,r5
  80d904:	39000204 	addi	r4,r7,8
  80d908:	01400244 	movi	r5,9
  80d90c:	dcc00315 	stw	r19,12(sp)
  80d910:	dc800215 	stw	r18,8(sp)
  80d914:	dfc00615 	stw	ra,24(sp)
  80d918:	dd400515 	stw	r21,20(sp)
  80d91c:	dd000415 	stw	r20,16(sp)
  80d920:	3825883a 	mov	r18,r7
  80d924:	3027883a 	mov	r19,r6
  80d928:	08116180 	call	811618 <__divsi3>
  80d92c:	00c00044 	movi	r3,1
  80d930:	000b883a 	mov	r5,zero
  80d934:	1880030e 	bge	r3,r2,80d944 <__s2b+0x54>
  80d938:	18c7883a 	add	r3,r3,r3
  80d93c:	29400044 	addi	r5,r5,1
  80d940:	18bffd16 	blt	r3,r2,80d938 <__alt_mem_onchip_mem+0xff805938>
  80d944:	8809883a 	mov	r4,r17
  80d948:	080d7000 	call	80d700 <_Balloc>
  80d94c:	d8c00717 	ldw	r3,28(sp)
  80d950:	10c00515 	stw	r3,20(r2)
  80d954:	00c00044 	movi	r3,1
  80d958:	10c00415 	stw	r3,16(r2)
  80d95c:	00c00244 	movi	r3,9
  80d960:	1cc0210e 	bge	r3,r19,80d9e8 <__s2b+0xf8>
  80d964:	80eb883a 	add	r21,r16,r3
  80d968:	a829883a 	mov	r20,r21
  80d96c:	84e1883a 	add	r16,r16,r19
  80d970:	a1c00007 	ldb	r7,0(r20)
  80d974:	01800284 	movi	r6,10
  80d978:	a5000044 	addi	r20,r20,1
  80d97c:	100b883a 	mov	r5,r2
  80d980:	39fff404 	addi	r7,r7,-48
  80d984:	8809883a 	mov	r4,r17
  80d988:	080d7d00 	call	80d7d0 <__multadd>
  80d98c:	a43ff81e 	bne	r20,r16,80d970 <__alt_mem_onchip_mem+0xff805970>
  80d990:	ace1883a 	add	r16,r21,r19
  80d994:	843ffe04 	addi	r16,r16,-8
  80d998:	9c800a0e 	bge	r19,r18,80d9c4 <__s2b+0xd4>
  80d99c:	94e5c83a 	sub	r18,r18,r19
  80d9a0:	84a5883a 	add	r18,r16,r18
  80d9a4:	81c00007 	ldb	r7,0(r16)
  80d9a8:	01800284 	movi	r6,10
  80d9ac:	84000044 	addi	r16,r16,1
  80d9b0:	100b883a 	mov	r5,r2
  80d9b4:	39fff404 	addi	r7,r7,-48
  80d9b8:	8809883a 	mov	r4,r17
  80d9bc:	080d7d00 	call	80d7d0 <__multadd>
  80d9c0:	84bff81e 	bne	r16,r18,80d9a4 <__alt_mem_onchip_mem+0xff8059a4>
  80d9c4:	dfc00617 	ldw	ra,24(sp)
  80d9c8:	dd400517 	ldw	r21,20(sp)
  80d9cc:	dd000417 	ldw	r20,16(sp)
  80d9d0:	dcc00317 	ldw	r19,12(sp)
  80d9d4:	dc800217 	ldw	r18,8(sp)
  80d9d8:	dc400117 	ldw	r17,4(sp)
  80d9dc:	dc000017 	ldw	r16,0(sp)
  80d9e0:	dec00704 	addi	sp,sp,28
  80d9e4:	f800283a 	ret
  80d9e8:	84000284 	addi	r16,r16,10
  80d9ec:	1827883a 	mov	r19,r3
  80d9f0:	003fe906 	br	80d998 <__alt_mem_onchip_mem+0xff805998>

0080d9f4 <__hi0bits>:
  80d9f4:	20bfffec 	andhi	r2,r4,65535
  80d9f8:	1000141e 	bne	r2,zero,80da4c <__hi0bits+0x58>
  80d9fc:	2008943a 	slli	r4,r4,16
  80da00:	00800404 	movi	r2,16
  80da04:	20ffc02c 	andhi	r3,r4,65280
  80da08:	1800021e 	bne	r3,zero,80da14 <__hi0bits+0x20>
  80da0c:	2008923a 	slli	r4,r4,8
  80da10:	10800204 	addi	r2,r2,8
  80da14:	20fc002c 	andhi	r3,r4,61440
  80da18:	1800021e 	bne	r3,zero,80da24 <__hi0bits+0x30>
  80da1c:	2008913a 	slli	r4,r4,4
  80da20:	10800104 	addi	r2,r2,4
  80da24:	20f0002c 	andhi	r3,r4,49152
  80da28:	1800031e 	bne	r3,zero,80da38 <__hi0bits+0x44>
  80da2c:	2109883a 	add	r4,r4,r4
  80da30:	10800084 	addi	r2,r2,2
  80da34:	2109883a 	add	r4,r4,r4
  80da38:	20000316 	blt	r4,zero,80da48 <__hi0bits+0x54>
  80da3c:	2110002c 	andhi	r4,r4,16384
  80da40:	2000041e 	bne	r4,zero,80da54 <__hi0bits+0x60>
  80da44:	00800804 	movi	r2,32
  80da48:	f800283a 	ret
  80da4c:	0005883a 	mov	r2,zero
  80da50:	003fec06 	br	80da04 <__alt_mem_onchip_mem+0xff805a04>
  80da54:	10800044 	addi	r2,r2,1
  80da58:	f800283a 	ret

0080da5c <__lo0bits>:
  80da5c:	20c00017 	ldw	r3,0(r4)
  80da60:	188001cc 	andi	r2,r3,7
  80da64:	10000826 	beq	r2,zero,80da88 <__lo0bits+0x2c>
  80da68:	1880004c 	andi	r2,r3,1
  80da6c:	1000211e 	bne	r2,zero,80daf4 <__lo0bits+0x98>
  80da70:	1880008c 	andi	r2,r3,2
  80da74:	1000211e 	bne	r2,zero,80dafc <__lo0bits+0xa0>
  80da78:	1806d0ba 	srli	r3,r3,2
  80da7c:	00800084 	movi	r2,2
  80da80:	20c00015 	stw	r3,0(r4)
  80da84:	f800283a 	ret
  80da88:	18bfffcc 	andi	r2,r3,65535
  80da8c:	10001326 	beq	r2,zero,80dadc <__lo0bits+0x80>
  80da90:	0005883a 	mov	r2,zero
  80da94:	19403fcc 	andi	r5,r3,255
  80da98:	2800021e 	bne	r5,zero,80daa4 <__lo0bits+0x48>
  80da9c:	1806d23a 	srli	r3,r3,8
  80daa0:	10800204 	addi	r2,r2,8
  80daa4:	194003cc 	andi	r5,r3,15
  80daa8:	2800021e 	bne	r5,zero,80dab4 <__lo0bits+0x58>
  80daac:	1806d13a 	srli	r3,r3,4
  80dab0:	10800104 	addi	r2,r2,4
  80dab4:	194000cc 	andi	r5,r3,3
  80dab8:	2800021e 	bne	r5,zero,80dac4 <__lo0bits+0x68>
  80dabc:	1806d0ba 	srli	r3,r3,2
  80dac0:	10800084 	addi	r2,r2,2
  80dac4:	1940004c 	andi	r5,r3,1
  80dac8:	2800081e 	bne	r5,zero,80daec <__lo0bits+0x90>
  80dacc:	1806d07a 	srli	r3,r3,1
  80dad0:	1800051e 	bne	r3,zero,80dae8 <__lo0bits+0x8c>
  80dad4:	00800804 	movi	r2,32
  80dad8:	f800283a 	ret
  80dadc:	1806d43a 	srli	r3,r3,16
  80dae0:	00800404 	movi	r2,16
  80dae4:	003feb06 	br	80da94 <__alt_mem_onchip_mem+0xff805a94>
  80dae8:	10800044 	addi	r2,r2,1
  80daec:	20c00015 	stw	r3,0(r4)
  80daf0:	f800283a 	ret
  80daf4:	0005883a 	mov	r2,zero
  80daf8:	f800283a 	ret
  80dafc:	1806d07a 	srli	r3,r3,1
  80db00:	00800044 	movi	r2,1
  80db04:	20c00015 	stw	r3,0(r4)
  80db08:	f800283a 	ret

0080db0c <__i2b>:
  80db0c:	defffd04 	addi	sp,sp,-12
  80db10:	dc000015 	stw	r16,0(sp)
  80db14:	04000044 	movi	r16,1
  80db18:	dc400115 	stw	r17,4(sp)
  80db1c:	2823883a 	mov	r17,r5
  80db20:	800b883a 	mov	r5,r16
  80db24:	dfc00215 	stw	ra,8(sp)
  80db28:	080d7000 	call	80d700 <_Balloc>
  80db2c:	14400515 	stw	r17,20(r2)
  80db30:	14000415 	stw	r16,16(r2)
  80db34:	dfc00217 	ldw	ra,8(sp)
  80db38:	dc400117 	ldw	r17,4(sp)
  80db3c:	dc000017 	ldw	r16,0(sp)
  80db40:	dec00304 	addi	sp,sp,12
  80db44:	f800283a 	ret

0080db48 <__multiply>:
  80db48:	defffa04 	addi	sp,sp,-24
  80db4c:	dcc00315 	stw	r19,12(sp)
  80db50:	dc800215 	stw	r18,8(sp)
  80db54:	34c00417 	ldw	r19,16(r6)
  80db58:	2c800417 	ldw	r18,16(r5)
  80db5c:	dd000415 	stw	r20,16(sp)
  80db60:	dc400115 	stw	r17,4(sp)
  80db64:	dfc00515 	stw	ra,20(sp)
  80db68:	dc000015 	stw	r16,0(sp)
  80db6c:	2829883a 	mov	r20,r5
  80db70:	3023883a 	mov	r17,r6
  80db74:	94c0050e 	bge	r18,r19,80db8c <__multiply+0x44>
  80db78:	9007883a 	mov	r3,r18
  80db7c:	3029883a 	mov	r20,r6
  80db80:	9825883a 	mov	r18,r19
  80db84:	2823883a 	mov	r17,r5
  80db88:	1827883a 	mov	r19,r3
  80db8c:	a0800217 	ldw	r2,8(r20)
  80db90:	94e1883a 	add	r16,r18,r19
  80db94:	a1400117 	ldw	r5,4(r20)
  80db98:	1400010e 	bge	r2,r16,80dba0 <__multiply+0x58>
  80db9c:	29400044 	addi	r5,r5,1
  80dba0:	080d7000 	call	80d700 <_Balloc>
  80dba4:	8415883a 	add	r10,r16,r16
  80dba8:	12c00504 	addi	r11,r2,20
  80dbac:	5295883a 	add	r10,r10,r10
  80dbb0:	5a95883a 	add	r10,r11,r10
  80dbb4:	5807883a 	mov	r3,r11
  80dbb8:	5a80032e 	bgeu	r11,r10,80dbc8 <__multiply+0x80>
  80dbbc:	18000015 	stw	zero,0(r3)
  80dbc0:	18c00104 	addi	r3,r3,4
  80dbc4:	1abffd36 	bltu	r3,r10,80dbbc <__alt_mem_onchip_mem+0xff805bbc>
  80dbc8:	9ce7883a 	add	r19,r19,r19
  80dbcc:	94a5883a 	add	r18,r18,r18
  80dbd0:	89800504 	addi	r6,r17,20
  80dbd4:	9ce7883a 	add	r19,r19,r19
  80dbd8:	a3400504 	addi	r13,r20,20
  80dbdc:	94a5883a 	add	r18,r18,r18
  80dbe0:	34d9883a 	add	r12,r6,r19
  80dbe4:	6c93883a 	add	r9,r13,r18
  80dbe8:	3300422e 	bgeu	r6,r12,80dcf4 <__multiply+0x1ac>
  80dbec:	37c00017 	ldw	ra,0(r6)
  80dbf0:	fbffffcc 	andi	r15,ra,65535
  80dbf4:	78001b26 	beq	r15,zero,80dc64 <__multiply+0x11c>
  80dbf8:	5811883a 	mov	r8,r11
  80dbfc:	681d883a 	mov	r14,r13
  80dc00:	000f883a 	mov	r7,zero
  80dc04:	71000017 	ldw	r4,0(r14)
  80dc08:	40c00017 	ldw	r3,0(r8)
  80dc0c:	73800104 	addi	r14,r14,4
  80dc10:	217fffcc 	andi	r5,r4,65535
  80dc14:	2bcb383a 	mul	r5,r5,r15
  80dc18:	2008d43a 	srli	r4,r4,16
  80dc1c:	1c7fffcc 	andi	r17,r3,65535
  80dc20:	2c4b883a 	add	r5,r5,r17
  80dc24:	29cb883a 	add	r5,r5,r7
  80dc28:	23c9383a 	mul	r4,r4,r15
  80dc2c:	1806d43a 	srli	r3,r3,16
  80dc30:	280ed43a 	srli	r7,r5,16
  80dc34:	297fffcc 	andi	r5,r5,65535
  80dc38:	20c7883a 	add	r3,r4,r3
  80dc3c:	19c7883a 	add	r3,r3,r7
  80dc40:	1808943a 	slli	r4,r3,16
  80dc44:	4023883a 	mov	r17,r8
  80dc48:	180ed43a 	srli	r7,r3,16
  80dc4c:	214ab03a 	or	r5,r4,r5
  80dc50:	41400015 	stw	r5,0(r8)
  80dc54:	42000104 	addi	r8,r8,4
  80dc58:	727fea36 	bltu	r14,r9,80dc04 <__alt_mem_onchip_mem+0xff805c04>
  80dc5c:	89c00115 	stw	r7,4(r17)
  80dc60:	37c00017 	ldw	ra,0(r6)
  80dc64:	f83ed43a 	srli	ra,ra,16
  80dc68:	f8001f26 	beq	ra,zero,80dce8 <__multiply+0x1a0>
  80dc6c:	58c00017 	ldw	r3,0(r11)
  80dc70:	681d883a 	mov	r14,r13
  80dc74:	581f883a 	mov	r15,r11
  80dc78:	1811883a 	mov	r8,r3
  80dc7c:	5825883a 	mov	r18,r11
  80dc80:	000f883a 	mov	r7,zero
  80dc84:	00000106 	br	80dc8c <__multiply+0x144>
  80dc88:	8825883a 	mov	r18,r17
  80dc8c:	7140000b 	ldhu	r5,0(r14)
  80dc90:	4010d43a 	srli	r8,r8,16
  80dc94:	193fffcc 	andi	r4,r3,65535
  80dc98:	2fcb383a 	mul	r5,r5,ra
  80dc9c:	7bc00104 	addi	r15,r15,4
  80dca0:	73800104 	addi	r14,r14,4
  80dca4:	2a0b883a 	add	r5,r5,r8
  80dca8:	29cb883a 	add	r5,r5,r7
  80dcac:	2806943a 	slli	r3,r5,16
  80dcb0:	94400104 	addi	r17,r18,4
  80dcb4:	280ad43a 	srli	r5,r5,16
  80dcb8:	1908b03a 	or	r4,r3,r4
  80dcbc:	793fff15 	stw	r4,-4(r15)
  80dcc0:	70ffff17 	ldw	r3,-4(r14)
  80dcc4:	8a000017 	ldw	r8,0(r17)
  80dcc8:	1806d43a 	srli	r3,r3,16
  80dccc:	413fffcc 	andi	r4,r8,65535
  80dcd0:	1fc7383a 	mul	r3,r3,ra
  80dcd4:	1907883a 	add	r3,r3,r4
  80dcd8:	1947883a 	add	r3,r3,r5
  80dcdc:	180ed43a 	srli	r7,r3,16
  80dce0:	727fe936 	bltu	r14,r9,80dc88 <__alt_mem_onchip_mem+0xff805c88>
  80dce4:	90c00115 	stw	r3,4(r18)
  80dce8:	31800104 	addi	r6,r6,4
  80dcec:	5ac00104 	addi	r11,r11,4
  80dcf0:	333fbe36 	bltu	r6,r12,80dbec <__alt_mem_onchip_mem+0xff805bec>
  80dcf4:	0400090e 	bge	zero,r16,80dd1c <__multiply+0x1d4>
  80dcf8:	50ffff17 	ldw	r3,-4(r10)
  80dcfc:	52bfff04 	addi	r10,r10,-4
  80dd00:	18000326 	beq	r3,zero,80dd10 <__multiply+0x1c8>
  80dd04:	00000506 	br	80dd1c <__multiply+0x1d4>
  80dd08:	50c00017 	ldw	r3,0(r10)
  80dd0c:	1800031e 	bne	r3,zero,80dd1c <__multiply+0x1d4>
  80dd10:	843fffc4 	addi	r16,r16,-1
  80dd14:	52bfff04 	addi	r10,r10,-4
  80dd18:	803ffb1e 	bne	r16,zero,80dd08 <__alt_mem_onchip_mem+0xff805d08>
  80dd1c:	14000415 	stw	r16,16(r2)
  80dd20:	dfc00517 	ldw	ra,20(sp)
  80dd24:	dd000417 	ldw	r20,16(sp)
  80dd28:	dcc00317 	ldw	r19,12(sp)
  80dd2c:	dc800217 	ldw	r18,8(sp)
  80dd30:	dc400117 	ldw	r17,4(sp)
  80dd34:	dc000017 	ldw	r16,0(sp)
  80dd38:	dec00604 	addi	sp,sp,24
  80dd3c:	f800283a 	ret

0080dd40 <__pow5mult>:
  80dd40:	defffa04 	addi	sp,sp,-24
  80dd44:	dcc00315 	stw	r19,12(sp)
  80dd48:	dc000015 	stw	r16,0(sp)
  80dd4c:	dfc00515 	stw	ra,20(sp)
  80dd50:	dd000415 	stw	r20,16(sp)
  80dd54:	dc800215 	stw	r18,8(sp)
  80dd58:	dc400115 	stw	r17,4(sp)
  80dd5c:	308000cc 	andi	r2,r6,3
  80dd60:	3021883a 	mov	r16,r6
  80dd64:	2027883a 	mov	r19,r4
  80dd68:	10002f1e 	bne	r2,zero,80de28 <__pow5mult+0xe8>
  80dd6c:	2825883a 	mov	r18,r5
  80dd70:	8021d0ba 	srai	r16,r16,2
  80dd74:	80001a26 	beq	r16,zero,80dde0 <__pow5mult+0xa0>
  80dd78:	9c401217 	ldw	r17,72(r19)
  80dd7c:	8800061e 	bne	r17,zero,80dd98 <__pow5mult+0x58>
  80dd80:	00003406 	br	80de54 <__pow5mult+0x114>
  80dd84:	8021d07a 	srai	r16,r16,1
  80dd88:	80001526 	beq	r16,zero,80dde0 <__pow5mult+0xa0>
  80dd8c:	88800017 	ldw	r2,0(r17)
  80dd90:	10001c26 	beq	r2,zero,80de04 <__pow5mult+0xc4>
  80dd94:	1023883a 	mov	r17,r2
  80dd98:	8080004c 	andi	r2,r16,1
  80dd9c:	103ff926 	beq	r2,zero,80dd84 <__alt_mem_onchip_mem+0xff805d84>
  80dda0:	880d883a 	mov	r6,r17
  80dda4:	900b883a 	mov	r5,r18
  80dda8:	9809883a 	mov	r4,r19
  80ddac:	080db480 	call	80db48 <__multiply>
  80ddb0:	90001b26 	beq	r18,zero,80de20 <__pow5mult+0xe0>
  80ddb4:	91000117 	ldw	r4,4(r18)
  80ddb8:	98c01317 	ldw	r3,76(r19)
  80ddbc:	8021d07a 	srai	r16,r16,1
  80ddc0:	2109883a 	add	r4,r4,r4
  80ddc4:	2109883a 	add	r4,r4,r4
  80ddc8:	1907883a 	add	r3,r3,r4
  80ddcc:	19000017 	ldw	r4,0(r3)
  80ddd0:	91000015 	stw	r4,0(r18)
  80ddd4:	1c800015 	stw	r18,0(r3)
  80ddd8:	1025883a 	mov	r18,r2
  80dddc:	803feb1e 	bne	r16,zero,80dd8c <__alt_mem_onchip_mem+0xff805d8c>
  80dde0:	9005883a 	mov	r2,r18
  80dde4:	dfc00517 	ldw	ra,20(sp)
  80dde8:	dd000417 	ldw	r20,16(sp)
  80ddec:	dcc00317 	ldw	r19,12(sp)
  80ddf0:	dc800217 	ldw	r18,8(sp)
  80ddf4:	dc400117 	ldw	r17,4(sp)
  80ddf8:	dc000017 	ldw	r16,0(sp)
  80ddfc:	dec00604 	addi	sp,sp,24
  80de00:	f800283a 	ret
  80de04:	880d883a 	mov	r6,r17
  80de08:	880b883a 	mov	r5,r17
  80de0c:	9809883a 	mov	r4,r19
  80de10:	080db480 	call	80db48 <__multiply>
  80de14:	88800015 	stw	r2,0(r17)
  80de18:	10000015 	stw	zero,0(r2)
  80de1c:	003fdd06 	br	80dd94 <__alt_mem_onchip_mem+0xff805d94>
  80de20:	1025883a 	mov	r18,r2
  80de24:	003fd706 	br	80dd84 <__alt_mem_onchip_mem+0xff805d84>
  80de28:	10bfffc4 	addi	r2,r2,-1
  80de2c:	1085883a 	add	r2,r2,r2
  80de30:	00c02074 	movhi	r3,129
  80de34:	18db6c04 	addi	r3,r3,28080
  80de38:	1085883a 	add	r2,r2,r2
  80de3c:	1885883a 	add	r2,r3,r2
  80de40:	11800017 	ldw	r6,0(r2)
  80de44:	000f883a 	mov	r7,zero
  80de48:	080d7d00 	call	80d7d0 <__multadd>
  80de4c:	1025883a 	mov	r18,r2
  80de50:	003fc706 	br	80dd70 <__alt_mem_onchip_mem+0xff805d70>
  80de54:	05000044 	movi	r20,1
  80de58:	a00b883a 	mov	r5,r20
  80de5c:	9809883a 	mov	r4,r19
  80de60:	080d7000 	call	80d700 <_Balloc>
  80de64:	1023883a 	mov	r17,r2
  80de68:	00809c44 	movi	r2,625
  80de6c:	88800515 	stw	r2,20(r17)
  80de70:	8d000415 	stw	r20,16(r17)
  80de74:	9c401215 	stw	r17,72(r19)
  80de78:	88000015 	stw	zero,0(r17)
  80de7c:	003fc606 	br	80dd98 <__alt_mem_onchip_mem+0xff805d98>

0080de80 <__lshift>:
  80de80:	defff904 	addi	sp,sp,-28
  80de84:	dd400515 	stw	r21,20(sp)
  80de88:	dcc00315 	stw	r19,12(sp)
  80de8c:	302bd17a 	srai	r21,r6,5
  80de90:	2cc00417 	ldw	r19,16(r5)
  80de94:	28800217 	ldw	r2,8(r5)
  80de98:	dd000415 	stw	r20,16(sp)
  80de9c:	ace7883a 	add	r19,r21,r19
  80dea0:	dc800215 	stw	r18,8(sp)
  80dea4:	dc400115 	stw	r17,4(sp)
  80dea8:	dc000015 	stw	r16,0(sp)
  80deac:	dfc00615 	stw	ra,24(sp)
  80deb0:	9c000044 	addi	r16,r19,1
  80deb4:	2823883a 	mov	r17,r5
  80deb8:	3029883a 	mov	r20,r6
  80debc:	2025883a 	mov	r18,r4
  80dec0:	29400117 	ldw	r5,4(r5)
  80dec4:	1400030e 	bge	r2,r16,80ded4 <__lshift+0x54>
  80dec8:	1085883a 	add	r2,r2,r2
  80decc:	29400044 	addi	r5,r5,1
  80ded0:	143ffd16 	blt	r2,r16,80dec8 <__alt_mem_onchip_mem+0xff805ec8>
  80ded4:	9009883a 	mov	r4,r18
  80ded8:	080d7000 	call	80d700 <_Balloc>
  80dedc:	10c00504 	addi	r3,r2,20
  80dee0:	0540070e 	bge	zero,r21,80df00 <__lshift+0x80>
  80dee4:	ad6b883a 	add	r21,r21,r21
  80dee8:	ad6b883a 	add	r21,r21,r21
  80deec:	1809883a 	mov	r4,r3
  80def0:	1d47883a 	add	r3,r3,r21
  80def4:	20000015 	stw	zero,0(r4)
  80def8:	21000104 	addi	r4,r4,4
  80defc:	193ffd1e 	bne	r3,r4,80def4 <__alt_mem_onchip_mem+0xff805ef4>
  80df00:	8a000417 	ldw	r8,16(r17)
  80df04:	89000504 	addi	r4,r17,20
  80df08:	a18007cc 	andi	r6,r20,31
  80df0c:	4211883a 	add	r8,r8,r8
  80df10:	4211883a 	add	r8,r8,r8
  80df14:	2211883a 	add	r8,r4,r8
  80df18:	30002326 	beq	r6,zero,80dfa8 <__lshift+0x128>
  80df1c:	02400804 	movi	r9,32
  80df20:	4993c83a 	sub	r9,r9,r6
  80df24:	000b883a 	mov	r5,zero
  80df28:	21c00017 	ldw	r7,0(r4)
  80df2c:	1815883a 	mov	r10,r3
  80df30:	18c00104 	addi	r3,r3,4
  80df34:	398e983a 	sll	r7,r7,r6
  80df38:	21000104 	addi	r4,r4,4
  80df3c:	394ab03a 	or	r5,r7,r5
  80df40:	197fff15 	stw	r5,-4(r3)
  80df44:	217fff17 	ldw	r5,-4(r4)
  80df48:	2a4ad83a 	srl	r5,r5,r9
  80df4c:	223ff636 	bltu	r4,r8,80df28 <__alt_mem_onchip_mem+0xff805f28>
  80df50:	51400115 	stw	r5,4(r10)
  80df54:	28001a1e 	bne	r5,zero,80dfc0 <__lshift+0x140>
  80df58:	843fffc4 	addi	r16,r16,-1
  80df5c:	14000415 	stw	r16,16(r2)
  80df60:	88000826 	beq	r17,zero,80df84 <__lshift+0x104>
  80df64:	89000117 	ldw	r4,4(r17)
  80df68:	90c01317 	ldw	r3,76(r18)
  80df6c:	2109883a 	add	r4,r4,r4
  80df70:	2109883a 	add	r4,r4,r4
  80df74:	1907883a 	add	r3,r3,r4
  80df78:	19000017 	ldw	r4,0(r3)
  80df7c:	89000015 	stw	r4,0(r17)
  80df80:	1c400015 	stw	r17,0(r3)
  80df84:	dfc00617 	ldw	ra,24(sp)
  80df88:	dd400517 	ldw	r21,20(sp)
  80df8c:	dd000417 	ldw	r20,16(sp)
  80df90:	dcc00317 	ldw	r19,12(sp)
  80df94:	dc800217 	ldw	r18,8(sp)
  80df98:	dc400117 	ldw	r17,4(sp)
  80df9c:	dc000017 	ldw	r16,0(sp)
  80dfa0:	dec00704 	addi	sp,sp,28
  80dfa4:	f800283a 	ret
  80dfa8:	21400017 	ldw	r5,0(r4)
  80dfac:	18c00104 	addi	r3,r3,4
  80dfb0:	21000104 	addi	r4,r4,4
  80dfb4:	197fff15 	stw	r5,-4(r3)
  80dfb8:	223ffb36 	bltu	r4,r8,80dfa8 <__alt_mem_onchip_mem+0xff805fa8>
  80dfbc:	003fe606 	br	80df58 <__alt_mem_onchip_mem+0xff805f58>
  80dfc0:	9c000084 	addi	r16,r19,2
  80dfc4:	003fe406 	br	80df58 <__alt_mem_onchip_mem+0xff805f58>

0080dfc8 <__mcmp>:
  80dfc8:	20800417 	ldw	r2,16(r4)
  80dfcc:	28c00417 	ldw	r3,16(r5)
  80dfd0:	10c5c83a 	sub	r2,r2,r3
  80dfd4:	1000111e 	bne	r2,zero,80e01c <__mcmp+0x54>
  80dfd8:	18c7883a 	add	r3,r3,r3
  80dfdc:	18c7883a 	add	r3,r3,r3
  80dfe0:	21000504 	addi	r4,r4,20
  80dfe4:	29400504 	addi	r5,r5,20
  80dfe8:	20c5883a 	add	r2,r4,r3
  80dfec:	28cb883a 	add	r5,r5,r3
  80dff0:	00000106 	br	80dff8 <__mcmp+0x30>
  80dff4:	20800a2e 	bgeu	r4,r2,80e020 <__mcmp+0x58>
  80dff8:	10bfff04 	addi	r2,r2,-4
  80dffc:	297fff04 	addi	r5,r5,-4
  80e000:	11800017 	ldw	r6,0(r2)
  80e004:	28c00017 	ldw	r3,0(r5)
  80e008:	30fffa26 	beq	r6,r3,80dff4 <__alt_mem_onchip_mem+0xff805ff4>
  80e00c:	30c00236 	bltu	r6,r3,80e018 <__mcmp+0x50>
  80e010:	00800044 	movi	r2,1
  80e014:	f800283a 	ret
  80e018:	00bfffc4 	movi	r2,-1
  80e01c:	f800283a 	ret
  80e020:	0005883a 	mov	r2,zero
  80e024:	f800283a 	ret

0080e028 <__mdiff>:
  80e028:	28c00417 	ldw	r3,16(r5)
  80e02c:	30800417 	ldw	r2,16(r6)
  80e030:	defffa04 	addi	sp,sp,-24
  80e034:	dcc00315 	stw	r19,12(sp)
  80e038:	dc800215 	stw	r18,8(sp)
  80e03c:	dfc00515 	stw	ra,20(sp)
  80e040:	dd000415 	stw	r20,16(sp)
  80e044:	dc400115 	stw	r17,4(sp)
  80e048:	dc000015 	stw	r16,0(sp)
  80e04c:	1887c83a 	sub	r3,r3,r2
  80e050:	2825883a 	mov	r18,r5
  80e054:	3027883a 	mov	r19,r6
  80e058:	1800141e 	bne	r3,zero,80e0ac <__mdiff+0x84>
  80e05c:	1085883a 	add	r2,r2,r2
  80e060:	1085883a 	add	r2,r2,r2
  80e064:	2a000504 	addi	r8,r5,20
  80e068:	34000504 	addi	r16,r6,20
  80e06c:	4087883a 	add	r3,r8,r2
  80e070:	8085883a 	add	r2,r16,r2
  80e074:	00000106 	br	80e07c <__mdiff+0x54>
  80e078:	40c0592e 	bgeu	r8,r3,80e1e0 <__mdiff+0x1b8>
  80e07c:	18ffff04 	addi	r3,r3,-4
  80e080:	10bfff04 	addi	r2,r2,-4
  80e084:	19c00017 	ldw	r7,0(r3)
  80e088:	11400017 	ldw	r5,0(r2)
  80e08c:	397ffa26 	beq	r7,r5,80e078 <__alt_mem_onchip_mem+0xff806078>
  80e090:	3940592e 	bgeu	r7,r5,80e1f8 <__mdiff+0x1d0>
  80e094:	9005883a 	mov	r2,r18
  80e098:	4023883a 	mov	r17,r8
  80e09c:	9825883a 	mov	r18,r19
  80e0a0:	05000044 	movi	r20,1
  80e0a4:	1027883a 	mov	r19,r2
  80e0a8:	00000406 	br	80e0bc <__mdiff+0x94>
  80e0ac:	18005616 	blt	r3,zero,80e208 <__mdiff+0x1e0>
  80e0b0:	34400504 	addi	r17,r6,20
  80e0b4:	2c000504 	addi	r16,r5,20
  80e0b8:	0029883a 	mov	r20,zero
  80e0bc:	91400117 	ldw	r5,4(r18)
  80e0c0:	080d7000 	call	80d700 <_Balloc>
  80e0c4:	92400417 	ldw	r9,16(r18)
  80e0c8:	9b000417 	ldw	r12,16(r19)
  80e0cc:	12c00504 	addi	r11,r2,20
  80e0d0:	4a51883a 	add	r8,r9,r9
  80e0d4:	6319883a 	add	r12,r12,r12
  80e0d8:	4211883a 	add	r8,r8,r8
  80e0dc:	6319883a 	add	r12,r12,r12
  80e0e0:	15000315 	stw	r20,12(r2)
  80e0e4:	8211883a 	add	r8,r16,r8
  80e0e8:	8b19883a 	add	r12,r17,r12
  80e0ec:	0007883a 	mov	r3,zero
  80e0f0:	81400017 	ldw	r5,0(r16)
  80e0f4:	89c00017 	ldw	r7,0(r17)
  80e0f8:	59800104 	addi	r6,r11,4
  80e0fc:	293fffcc 	andi	r4,r5,65535
  80e100:	20c7883a 	add	r3,r4,r3
  80e104:	393fffcc 	andi	r4,r7,65535
  80e108:	1909c83a 	sub	r4,r3,r4
  80e10c:	280ad43a 	srli	r5,r5,16
  80e110:	380ed43a 	srli	r7,r7,16
  80e114:	2007d43a 	srai	r3,r4,16
  80e118:	213fffcc 	andi	r4,r4,65535
  80e11c:	29cbc83a 	sub	r5,r5,r7
  80e120:	28c7883a 	add	r3,r5,r3
  80e124:	180a943a 	slli	r5,r3,16
  80e128:	8c400104 	addi	r17,r17,4
  80e12c:	84000104 	addi	r16,r16,4
  80e130:	2908b03a 	or	r4,r5,r4
  80e134:	59000015 	stw	r4,0(r11)
  80e138:	1807d43a 	srai	r3,r3,16
  80e13c:	3015883a 	mov	r10,r6
  80e140:	3017883a 	mov	r11,r6
  80e144:	8b3fea36 	bltu	r17,r12,80e0f0 <__alt_mem_onchip_mem+0xff8060f0>
  80e148:	8200162e 	bgeu	r16,r8,80e1a4 <__mdiff+0x17c>
  80e14c:	8017883a 	mov	r11,r16
  80e150:	59400017 	ldw	r5,0(r11)
  80e154:	31800104 	addi	r6,r6,4
  80e158:	5ac00104 	addi	r11,r11,4
  80e15c:	293fffcc 	andi	r4,r5,65535
  80e160:	20c7883a 	add	r3,r4,r3
  80e164:	280ed43a 	srli	r7,r5,16
  80e168:	180bd43a 	srai	r5,r3,16
  80e16c:	193fffcc 	andi	r4,r3,65535
  80e170:	3947883a 	add	r3,r7,r5
  80e174:	180a943a 	slli	r5,r3,16
  80e178:	1807d43a 	srai	r3,r3,16
  80e17c:	2908b03a 	or	r4,r5,r4
  80e180:	313fff15 	stw	r4,-4(r6)
  80e184:	5a3ff236 	bltu	r11,r8,80e150 <__alt_mem_onchip_mem+0xff806150>
  80e188:	0406303a 	nor	r3,zero,r16
  80e18c:	1a07883a 	add	r3,r3,r8
  80e190:	1806d0ba 	srli	r3,r3,2
  80e194:	18c00044 	addi	r3,r3,1
  80e198:	18c7883a 	add	r3,r3,r3
  80e19c:	18c7883a 	add	r3,r3,r3
  80e1a0:	50d5883a 	add	r10,r10,r3
  80e1a4:	50ffff04 	addi	r3,r10,-4
  80e1a8:	2000041e 	bne	r4,zero,80e1bc <__mdiff+0x194>
  80e1ac:	18ffff04 	addi	r3,r3,-4
  80e1b0:	19000017 	ldw	r4,0(r3)
  80e1b4:	4a7fffc4 	addi	r9,r9,-1
  80e1b8:	203ffc26 	beq	r4,zero,80e1ac <__alt_mem_onchip_mem+0xff8061ac>
  80e1bc:	12400415 	stw	r9,16(r2)
  80e1c0:	dfc00517 	ldw	ra,20(sp)
  80e1c4:	dd000417 	ldw	r20,16(sp)
  80e1c8:	dcc00317 	ldw	r19,12(sp)
  80e1cc:	dc800217 	ldw	r18,8(sp)
  80e1d0:	dc400117 	ldw	r17,4(sp)
  80e1d4:	dc000017 	ldw	r16,0(sp)
  80e1d8:	dec00604 	addi	sp,sp,24
  80e1dc:	f800283a 	ret
  80e1e0:	000b883a 	mov	r5,zero
  80e1e4:	080d7000 	call	80d700 <_Balloc>
  80e1e8:	00c00044 	movi	r3,1
  80e1ec:	10c00415 	stw	r3,16(r2)
  80e1f0:	10000515 	stw	zero,20(r2)
  80e1f4:	003ff206 	br	80e1c0 <__alt_mem_onchip_mem+0xff8061c0>
  80e1f8:	8023883a 	mov	r17,r16
  80e1fc:	0029883a 	mov	r20,zero
  80e200:	4021883a 	mov	r16,r8
  80e204:	003fad06 	br	80e0bc <__alt_mem_onchip_mem+0xff8060bc>
  80e208:	9005883a 	mov	r2,r18
  80e20c:	94400504 	addi	r17,r18,20
  80e210:	9c000504 	addi	r16,r19,20
  80e214:	9825883a 	mov	r18,r19
  80e218:	05000044 	movi	r20,1
  80e21c:	1027883a 	mov	r19,r2
  80e220:	003fa606 	br	80e0bc <__alt_mem_onchip_mem+0xff8060bc>

0080e224 <__ulp>:
  80e224:	295ffc2c 	andhi	r5,r5,32752
  80e228:	00bf3034 	movhi	r2,64704
  80e22c:	2887883a 	add	r3,r5,r2
  80e230:	00c0020e 	bge	zero,r3,80e23c <__ulp+0x18>
  80e234:	0005883a 	mov	r2,zero
  80e238:	f800283a 	ret
  80e23c:	00c7c83a 	sub	r3,zero,r3
  80e240:	1807d53a 	srai	r3,r3,20
  80e244:	008004c4 	movi	r2,19
  80e248:	10c00b0e 	bge	r2,r3,80e278 <__ulp+0x54>
  80e24c:	18bffb04 	addi	r2,r3,-20
  80e250:	01000784 	movi	r4,30
  80e254:	0007883a 	mov	r3,zero
  80e258:	20800516 	blt	r4,r2,80e270 <__ulp+0x4c>
  80e25c:	010007c4 	movi	r4,31
  80e260:	2089c83a 	sub	r4,r4,r2
  80e264:	00800044 	movi	r2,1
  80e268:	1104983a 	sll	r2,r2,r4
  80e26c:	f800283a 	ret
  80e270:	00800044 	movi	r2,1
  80e274:	f800283a 	ret
  80e278:	01400234 	movhi	r5,8
  80e27c:	28c7d83a 	sra	r3,r5,r3
  80e280:	0005883a 	mov	r2,zero
  80e284:	f800283a 	ret

0080e288 <__b2d>:
  80e288:	defffa04 	addi	sp,sp,-24
  80e28c:	dc000015 	stw	r16,0(sp)
  80e290:	24000417 	ldw	r16,16(r4)
  80e294:	dc400115 	stw	r17,4(sp)
  80e298:	24400504 	addi	r17,r4,20
  80e29c:	8421883a 	add	r16,r16,r16
  80e2a0:	8421883a 	add	r16,r16,r16
  80e2a4:	8c21883a 	add	r16,r17,r16
  80e2a8:	dc800215 	stw	r18,8(sp)
  80e2ac:	84bfff17 	ldw	r18,-4(r16)
  80e2b0:	dd000415 	stw	r20,16(sp)
  80e2b4:	dcc00315 	stw	r19,12(sp)
  80e2b8:	9009883a 	mov	r4,r18
  80e2bc:	2829883a 	mov	r20,r5
  80e2c0:	dfc00515 	stw	ra,20(sp)
  80e2c4:	080d9f40 	call	80d9f4 <__hi0bits>
  80e2c8:	00c00804 	movi	r3,32
  80e2cc:	1889c83a 	sub	r4,r3,r2
  80e2d0:	a1000015 	stw	r4,0(r20)
  80e2d4:	01000284 	movi	r4,10
  80e2d8:	84ffff04 	addi	r19,r16,-4
  80e2dc:	20801216 	blt	r4,r2,80e328 <__b2d+0xa0>
  80e2e0:	018002c4 	movi	r6,11
  80e2e4:	308dc83a 	sub	r6,r6,r2
  80e2e8:	9186d83a 	srl	r3,r18,r6
  80e2ec:	18cffc34 	orhi	r3,r3,16368
  80e2f0:	8cc0212e 	bgeu	r17,r19,80e378 <__b2d+0xf0>
  80e2f4:	813ffe17 	ldw	r4,-8(r16)
  80e2f8:	218cd83a 	srl	r6,r4,r6
  80e2fc:	10800544 	addi	r2,r2,21
  80e300:	9084983a 	sll	r2,r18,r2
  80e304:	1184b03a 	or	r2,r2,r6
  80e308:	dfc00517 	ldw	ra,20(sp)
  80e30c:	dd000417 	ldw	r20,16(sp)
  80e310:	dcc00317 	ldw	r19,12(sp)
  80e314:	dc800217 	ldw	r18,8(sp)
  80e318:	dc400117 	ldw	r17,4(sp)
  80e31c:	dc000017 	ldw	r16,0(sp)
  80e320:	dec00604 	addi	sp,sp,24
  80e324:	f800283a 	ret
  80e328:	8cc00f2e 	bgeu	r17,r19,80e368 <__b2d+0xe0>
  80e32c:	117ffd44 	addi	r5,r2,-11
  80e330:	80bffe17 	ldw	r2,-8(r16)
  80e334:	28000e26 	beq	r5,zero,80e370 <__b2d+0xe8>
  80e338:	1949c83a 	sub	r4,r3,r5
  80e33c:	9164983a 	sll	r18,r18,r5
  80e340:	1106d83a 	srl	r3,r2,r4
  80e344:	81bffe04 	addi	r6,r16,-8
  80e348:	948ffc34 	orhi	r18,r18,16368
  80e34c:	90c6b03a 	or	r3,r18,r3
  80e350:	89800e2e 	bgeu	r17,r6,80e38c <__b2d+0x104>
  80e354:	81bffd17 	ldw	r6,-12(r16)
  80e358:	1144983a 	sll	r2,r2,r5
  80e35c:	310ad83a 	srl	r5,r6,r4
  80e360:	2884b03a 	or	r2,r5,r2
  80e364:	003fe806 	br	80e308 <__alt_mem_onchip_mem+0xff806308>
  80e368:	10bffd44 	addi	r2,r2,-11
  80e36c:	1000041e 	bne	r2,zero,80e380 <__b2d+0xf8>
  80e370:	90cffc34 	orhi	r3,r18,16368
  80e374:	003fe406 	br	80e308 <__alt_mem_onchip_mem+0xff806308>
  80e378:	000d883a 	mov	r6,zero
  80e37c:	003fdf06 	br	80e2fc <__alt_mem_onchip_mem+0xff8062fc>
  80e380:	90a4983a 	sll	r18,r18,r2
  80e384:	0005883a 	mov	r2,zero
  80e388:	003ff906 	br	80e370 <__alt_mem_onchip_mem+0xff806370>
  80e38c:	1144983a 	sll	r2,r2,r5
  80e390:	003fdd06 	br	80e308 <__alt_mem_onchip_mem+0xff806308>

0080e394 <__d2b>:
  80e394:	defff804 	addi	sp,sp,-32
  80e398:	dc000215 	stw	r16,8(sp)
  80e39c:	3021883a 	mov	r16,r6
  80e3a0:	dc400315 	stw	r17,12(sp)
  80e3a4:	8022907a 	slli	r17,r16,1
  80e3a8:	dd000615 	stw	r20,24(sp)
  80e3ac:	2829883a 	mov	r20,r5
  80e3b0:	01400044 	movi	r5,1
  80e3b4:	dcc00515 	stw	r19,20(sp)
  80e3b8:	dc800415 	stw	r18,16(sp)
  80e3bc:	dfc00715 	stw	ra,28(sp)
  80e3c0:	3825883a 	mov	r18,r7
  80e3c4:	8822d57a 	srli	r17,r17,21
  80e3c8:	080d7000 	call	80d700 <_Balloc>
  80e3cc:	1027883a 	mov	r19,r2
  80e3d0:	00800434 	movhi	r2,16
  80e3d4:	10bfffc4 	addi	r2,r2,-1
  80e3d8:	808c703a 	and	r6,r16,r2
  80e3dc:	88000126 	beq	r17,zero,80e3e4 <__d2b+0x50>
  80e3e0:	31800434 	orhi	r6,r6,16
  80e3e4:	d9800015 	stw	r6,0(sp)
  80e3e8:	a0002426 	beq	r20,zero,80e47c <__d2b+0xe8>
  80e3ec:	d9000104 	addi	r4,sp,4
  80e3f0:	dd000115 	stw	r20,4(sp)
  80e3f4:	080da5c0 	call	80da5c <__lo0bits>
  80e3f8:	d8c00017 	ldw	r3,0(sp)
  80e3fc:	10002f1e 	bne	r2,zero,80e4bc <__d2b+0x128>
  80e400:	d9000117 	ldw	r4,4(sp)
  80e404:	99000515 	stw	r4,20(r19)
  80e408:	1821003a 	cmpeq	r16,r3,zero
  80e40c:	01000084 	movi	r4,2
  80e410:	2421c83a 	sub	r16,r4,r16
  80e414:	98c00615 	stw	r3,24(r19)
  80e418:	9c000415 	stw	r16,16(r19)
  80e41c:	88001f1e 	bne	r17,zero,80e49c <__d2b+0x108>
  80e420:	10bef384 	addi	r2,r2,-1074
  80e424:	90800015 	stw	r2,0(r18)
  80e428:	00900034 	movhi	r2,16384
  80e42c:	10bfffc4 	addi	r2,r2,-1
  80e430:	8085883a 	add	r2,r16,r2
  80e434:	1085883a 	add	r2,r2,r2
  80e438:	1085883a 	add	r2,r2,r2
  80e43c:	9885883a 	add	r2,r19,r2
  80e440:	11000517 	ldw	r4,20(r2)
  80e444:	8020917a 	slli	r16,r16,5
  80e448:	080d9f40 	call	80d9f4 <__hi0bits>
  80e44c:	d8c00817 	ldw	r3,32(sp)
  80e450:	8085c83a 	sub	r2,r16,r2
  80e454:	18800015 	stw	r2,0(r3)
  80e458:	9805883a 	mov	r2,r19
  80e45c:	dfc00717 	ldw	ra,28(sp)
  80e460:	dd000617 	ldw	r20,24(sp)
  80e464:	dcc00517 	ldw	r19,20(sp)
  80e468:	dc800417 	ldw	r18,16(sp)
  80e46c:	dc400317 	ldw	r17,12(sp)
  80e470:	dc000217 	ldw	r16,8(sp)
  80e474:	dec00804 	addi	sp,sp,32
  80e478:	f800283a 	ret
  80e47c:	d809883a 	mov	r4,sp
  80e480:	080da5c0 	call	80da5c <__lo0bits>
  80e484:	d8c00017 	ldw	r3,0(sp)
  80e488:	04000044 	movi	r16,1
  80e48c:	9c000415 	stw	r16,16(r19)
  80e490:	98c00515 	stw	r3,20(r19)
  80e494:	10800804 	addi	r2,r2,32
  80e498:	883fe126 	beq	r17,zero,80e420 <__alt_mem_onchip_mem+0xff806420>
  80e49c:	00c00d44 	movi	r3,53
  80e4a0:	8c7ef344 	addi	r17,r17,-1075
  80e4a4:	88a3883a 	add	r17,r17,r2
  80e4a8:	1885c83a 	sub	r2,r3,r2
  80e4ac:	d8c00817 	ldw	r3,32(sp)
  80e4b0:	94400015 	stw	r17,0(r18)
  80e4b4:	18800015 	stw	r2,0(r3)
  80e4b8:	003fe706 	br	80e458 <__alt_mem_onchip_mem+0xff806458>
  80e4bc:	01000804 	movi	r4,32
  80e4c0:	2089c83a 	sub	r4,r4,r2
  80e4c4:	1908983a 	sll	r4,r3,r4
  80e4c8:	d9400117 	ldw	r5,4(sp)
  80e4cc:	1886d83a 	srl	r3,r3,r2
  80e4d0:	2148b03a 	or	r4,r4,r5
  80e4d4:	99000515 	stw	r4,20(r19)
  80e4d8:	d8c00015 	stw	r3,0(sp)
  80e4dc:	003fca06 	br	80e408 <__alt_mem_onchip_mem+0xff806408>

0080e4e0 <__ratio>:
  80e4e0:	defff904 	addi	sp,sp,-28
  80e4e4:	dc400315 	stw	r17,12(sp)
  80e4e8:	2823883a 	mov	r17,r5
  80e4ec:	d9400104 	addi	r5,sp,4
  80e4f0:	dfc00615 	stw	ra,24(sp)
  80e4f4:	dcc00515 	stw	r19,20(sp)
  80e4f8:	dc800415 	stw	r18,16(sp)
  80e4fc:	2027883a 	mov	r19,r4
  80e500:	dc000215 	stw	r16,8(sp)
  80e504:	080e2880 	call	80e288 <__b2d>
  80e508:	d80b883a 	mov	r5,sp
  80e50c:	8809883a 	mov	r4,r17
  80e510:	1025883a 	mov	r18,r2
  80e514:	1821883a 	mov	r16,r3
  80e518:	080e2880 	call	80e288 <__b2d>
  80e51c:	8a000417 	ldw	r8,16(r17)
  80e520:	99000417 	ldw	r4,16(r19)
  80e524:	d9400117 	ldw	r5,4(sp)
  80e528:	2209c83a 	sub	r4,r4,r8
  80e52c:	2010917a 	slli	r8,r4,5
  80e530:	d9000017 	ldw	r4,0(sp)
  80e534:	2909c83a 	sub	r4,r5,r4
  80e538:	4109883a 	add	r4,r8,r4
  80e53c:	01000e0e 	bge	zero,r4,80e578 <__ratio+0x98>
  80e540:	2008953a 	slli	r4,r4,20
  80e544:	2421883a 	add	r16,r4,r16
  80e548:	100d883a 	mov	r6,r2
  80e54c:	180f883a 	mov	r7,r3
  80e550:	9009883a 	mov	r4,r18
  80e554:	800b883a 	mov	r5,r16
  80e558:	08117cc0 	call	8117cc <__divdf3>
  80e55c:	dfc00617 	ldw	ra,24(sp)
  80e560:	dcc00517 	ldw	r19,20(sp)
  80e564:	dc800417 	ldw	r18,16(sp)
  80e568:	dc400317 	ldw	r17,12(sp)
  80e56c:	dc000217 	ldw	r16,8(sp)
  80e570:	dec00704 	addi	sp,sp,28
  80e574:	f800283a 	ret
  80e578:	2008953a 	slli	r4,r4,20
  80e57c:	1907c83a 	sub	r3,r3,r4
  80e580:	003ff106 	br	80e548 <__alt_mem_onchip_mem+0xff806548>

0080e584 <_mprec_log10>:
  80e584:	defffe04 	addi	sp,sp,-8
  80e588:	dc000015 	stw	r16,0(sp)
  80e58c:	dfc00115 	stw	ra,4(sp)
  80e590:	008005c4 	movi	r2,23
  80e594:	2021883a 	mov	r16,r4
  80e598:	11000d0e 	bge	r2,r4,80e5d0 <_mprec_log10+0x4c>
  80e59c:	0005883a 	mov	r2,zero
  80e5a0:	00cffc34 	movhi	r3,16368
  80e5a4:	843fffc4 	addi	r16,r16,-1
  80e5a8:	000d883a 	mov	r6,zero
  80e5ac:	01d00934 	movhi	r7,16420
  80e5b0:	1009883a 	mov	r4,r2
  80e5b4:	180b883a 	mov	r5,r3
  80e5b8:	081213c0 	call	81213c <__muldf3>
  80e5bc:	803ff91e 	bne	r16,zero,80e5a4 <__alt_mem_onchip_mem+0xff8065a4>
  80e5c0:	dfc00117 	ldw	ra,4(sp)
  80e5c4:	dc000017 	ldw	r16,0(sp)
  80e5c8:	dec00204 	addi	sp,sp,8
  80e5cc:	f800283a 	ret
  80e5d0:	202090fa 	slli	r16,r4,3
  80e5d4:	00802074 	movhi	r2,129
  80e5d8:	109b8304 	addi	r2,r2,28172
  80e5dc:	1421883a 	add	r16,r2,r16
  80e5e0:	80800017 	ldw	r2,0(r16)
  80e5e4:	80c00117 	ldw	r3,4(r16)
  80e5e8:	dfc00117 	ldw	ra,4(sp)
  80e5ec:	dc000017 	ldw	r16,0(sp)
  80e5f0:	dec00204 	addi	sp,sp,8
  80e5f4:	f800283a 	ret

0080e5f8 <__copybits>:
  80e5f8:	297fffc4 	addi	r5,r5,-1
  80e5fc:	280fd17a 	srai	r7,r5,5
  80e600:	30c00417 	ldw	r3,16(r6)
  80e604:	30800504 	addi	r2,r6,20
  80e608:	39c00044 	addi	r7,r7,1
  80e60c:	18c7883a 	add	r3,r3,r3
  80e610:	39cf883a 	add	r7,r7,r7
  80e614:	18c7883a 	add	r3,r3,r3
  80e618:	39cf883a 	add	r7,r7,r7
  80e61c:	10c7883a 	add	r3,r2,r3
  80e620:	21cf883a 	add	r7,r4,r7
  80e624:	10c00d2e 	bgeu	r2,r3,80e65c <__copybits+0x64>
  80e628:	200b883a 	mov	r5,r4
  80e62c:	12000017 	ldw	r8,0(r2)
  80e630:	29400104 	addi	r5,r5,4
  80e634:	10800104 	addi	r2,r2,4
  80e638:	2a3fff15 	stw	r8,-4(r5)
  80e63c:	10fffb36 	bltu	r2,r3,80e62c <__alt_mem_onchip_mem+0xff80662c>
  80e640:	1985c83a 	sub	r2,r3,r6
  80e644:	10bffac4 	addi	r2,r2,-21
  80e648:	1004d0ba 	srli	r2,r2,2
  80e64c:	10800044 	addi	r2,r2,1
  80e650:	1085883a 	add	r2,r2,r2
  80e654:	1085883a 	add	r2,r2,r2
  80e658:	2089883a 	add	r4,r4,r2
  80e65c:	21c0032e 	bgeu	r4,r7,80e66c <__copybits+0x74>
  80e660:	20000015 	stw	zero,0(r4)
  80e664:	21000104 	addi	r4,r4,4
  80e668:	21fffd36 	bltu	r4,r7,80e660 <__alt_mem_onchip_mem+0xff806660>
  80e66c:	f800283a 	ret

0080e670 <__any_on>:
  80e670:	20c00417 	ldw	r3,16(r4)
  80e674:	2805d17a 	srai	r2,r5,5
  80e678:	21000504 	addi	r4,r4,20
  80e67c:	18800d0e 	bge	r3,r2,80e6b4 <__any_on+0x44>
  80e680:	18c7883a 	add	r3,r3,r3
  80e684:	18c7883a 	add	r3,r3,r3
  80e688:	20c7883a 	add	r3,r4,r3
  80e68c:	20c0192e 	bgeu	r4,r3,80e6f4 <__any_on+0x84>
  80e690:	18bfff17 	ldw	r2,-4(r3)
  80e694:	18ffff04 	addi	r3,r3,-4
  80e698:	1000041e 	bne	r2,zero,80e6ac <__any_on+0x3c>
  80e69c:	20c0142e 	bgeu	r4,r3,80e6f0 <__any_on+0x80>
  80e6a0:	18ffff04 	addi	r3,r3,-4
  80e6a4:	19400017 	ldw	r5,0(r3)
  80e6a8:	283ffc26 	beq	r5,zero,80e69c <__alt_mem_onchip_mem+0xff80669c>
  80e6ac:	00800044 	movi	r2,1
  80e6b0:	f800283a 	ret
  80e6b4:	10c00a0e 	bge	r2,r3,80e6e0 <__any_on+0x70>
  80e6b8:	1085883a 	add	r2,r2,r2
  80e6bc:	1085883a 	add	r2,r2,r2
  80e6c0:	294007cc 	andi	r5,r5,31
  80e6c4:	2087883a 	add	r3,r4,r2
  80e6c8:	283ff026 	beq	r5,zero,80e68c <__alt_mem_onchip_mem+0xff80668c>
  80e6cc:	19800017 	ldw	r6,0(r3)
  80e6d0:	3144d83a 	srl	r2,r6,r5
  80e6d4:	114a983a 	sll	r5,r2,r5
  80e6d8:	317ff41e 	bne	r6,r5,80e6ac <__alt_mem_onchip_mem+0xff8066ac>
  80e6dc:	003feb06 	br	80e68c <__alt_mem_onchip_mem+0xff80668c>
  80e6e0:	1085883a 	add	r2,r2,r2
  80e6e4:	1085883a 	add	r2,r2,r2
  80e6e8:	2087883a 	add	r3,r4,r2
  80e6ec:	003fe706 	br	80e68c <__alt_mem_onchip_mem+0xff80668c>
  80e6f0:	f800283a 	ret
  80e6f4:	0005883a 	mov	r2,zero
  80e6f8:	f800283a 	ret

0080e6fc <_read_r>:
  80e6fc:	defffd04 	addi	sp,sp,-12
  80e700:	2805883a 	mov	r2,r5
  80e704:	dc000015 	stw	r16,0(sp)
  80e708:	040020b4 	movhi	r16,130
  80e70c:	dc400115 	stw	r17,4(sp)
  80e710:	300b883a 	mov	r5,r6
  80e714:	842ae404 	addi	r16,r16,-21616
  80e718:	2023883a 	mov	r17,r4
  80e71c:	380d883a 	mov	r6,r7
  80e720:	1009883a 	mov	r4,r2
  80e724:	dfc00215 	stw	ra,8(sp)
  80e728:	80000015 	stw	zero,0(r16)
  80e72c:	08133d40 	call	8133d4 <read>
  80e730:	00ffffc4 	movi	r3,-1
  80e734:	10c00526 	beq	r2,r3,80e74c <_read_r+0x50>
  80e738:	dfc00217 	ldw	ra,8(sp)
  80e73c:	dc400117 	ldw	r17,4(sp)
  80e740:	dc000017 	ldw	r16,0(sp)
  80e744:	dec00304 	addi	sp,sp,12
  80e748:	f800283a 	ret
  80e74c:	80c00017 	ldw	r3,0(r16)
  80e750:	183ff926 	beq	r3,zero,80e738 <__alt_mem_onchip_mem+0xff806738>
  80e754:	88c00015 	stw	r3,0(r17)
  80e758:	003ff706 	br	80e738 <__alt_mem_onchip_mem+0xff806738>

0080e75c <_realloc_r>:
  80e75c:	defff604 	addi	sp,sp,-40
  80e760:	dc800215 	stw	r18,8(sp)
  80e764:	dfc00915 	stw	ra,36(sp)
  80e768:	df000815 	stw	fp,32(sp)
  80e76c:	ddc00715 	stw	r23,28(sp)
  80e770:	dd800615 	stw	r22,24(sp)
  80e774:	dd400515 	stw	r21,20(sp)
  80e778:	dd000415 	stw	r20,16(sp)
  80e77c:	dcc00315 	stw	r19,12(sp)
  80e780:	dc400115 	stw	r17,4(sp)
  80e784:	dc000015 	stw	r16,0(sp)
  80e788:	3025883a 	mov	r18,r6
  80e78c:	2800b726 	beq	r5,zero,80ea6c <_realloc_r+0x310>
  80e790:	282b883a 	mov	r21,r5
  80e794:	2029883a 	mov	r20,r4
  80e798:	08130fc0 	call	8130fc <__malloc_lock>
  80e79c:	a8bfff17 	ldw	r2,-4(r21)
  80e7a0:	043fff04 	movi	r16,-4
  80e7a4:	90c002c4 	addi	r3,r18,11
  80e7a8:	01000584 	movi	r4,22
  80e7ac:	acfffe04 	addi	r19,r21,-8
  80e7b0:	1420703a 	and	r16,r2,r16
  80e7b4:	20c0332e 	bgeu	r4,r3,80e884 <_realloc_r+0x128>
  80e7b8:	047ffe04 	movi	r17,-8
  80e7bc:	1c62703a 	and	r17,r3,r17
  80e7c0:	8807883a 	mov	r3,r17
  80e7c4:	88005816 	blt	r17,zero,80e928 <_realloc_r+0x1cc>
  80e7c8:	8c805736 	bltu	r17,r18,80e928 <_realloc_r+0x1cc>
  80e7cc:	80c0300e 	bge	r16,r3,80e890 <_realloc_r+0x134>
  80e7d0:	07002074 	movhi	fp,129
  80e7d4:	e71d7704 	addi	fp,fp,30172
  80e7d8:	e1c00217 	ldw	r7,8(fp)
  80e7dc:	9c09883a 	add	r4,r19,r16
  80e7e0:	22000117 	ldw	r8,4(r4)
  80e7e4:	21c06326 	beq	r4,r7,80e974 <_realloc_r+0x218>
  80e7e8:	017fff84 	movi	r5,-2
  80e7ec:	414a703a 	and	r5,r8,r5
  80e7f0:	214b883a 	add	r5,r4,r5
  80e7f4:	29800117 	ldw	r6,4(r5)
  80e7f8:	3180004c 	andi	r6,r6,1
  80e7fc:	30003f26 	beq	r6,zero,80e8fc <_realloc_r+0x1a0>
  80e800:	1080004c 	andi	r2,r2,1
  80e804:	10008326 	beq	r2,zero,80ea14 <_realloc_r+0x2b8>
  80e808:	900b883a 	mov	r5,r18
  80e80c:	a009883a 	mov	r4,r20
  80e810:	080749c0 	call	80749c <_malloc_r>
  80e814:	1025883a 	mov	r18,r2
  80e818:	10011e26 	beq	r2,zero,80ec94 <_realloc_r+0x538>
  80e81c:	a93fff17 	ldw	r4,-4(r21)
  80e820:	10fffe04 	addi	r3,r2,-8
  80e824:	00bfff84 	movi	r2,-2
  80e828:	2084703a 	and	r2,r4,r2
  80e82c:	9885883a 	add	r2,r19,r2
  80e830:	1880ee26 	beq	r3,r2,80ebec <_realloc_r+0x490>
  80e834:	81bfff04 	addi	r6,r16,-4
  80e838:	00800904 	movi	r2,36
  80e83c:	1180b836 	bltu	r2,r6,80eb20 <_realloc_r+0x3c4>
  80e840:	00c004c4 	movi	r3,19
  80e844:	19809636 	bltu	r3,r6,80eaa0 <_realloc_r+0x344>
  80e848:	9005883a 	mov	r2,r18
  80e84c:	a807883a 	mov	r3,r21
  80e850:	19000017 	ldw	r4,0(r3)
  80e854:	11000015 	stw	r4,0(r2)
  80e858:	19000117 	ldw	r4,4(r3)
  80e85c:	11000115 	stw	r4,4(r2)
  80e860:	18c00217 	ldw	r3,8(r3)
  80e864:	10c00215 	stw	r3,8(r2)
  80e868:	a80b883a 	mov	r5,r21
  80e86c:	a009883a 	mov	r4,r20
  80e870:	080c8940 	call	80c894 <_free_r>
  80e874:	a009883a 	mov	r4,r20
  80e878:	08131200 	call	813120 <__malloc_unlock>
  80e87c:	9005883a 	mov	r2,r18
  80e880:	00001206 	br	80e8cc <_realloc_r+0x170>
  80e884:	00c00404 	movi	r3,16
  80e888:	1823883a 	mov	r17,r3
  80e88c:	003fce06 	br	80e7c8 <__alt_mem_onchip_mem+0xff8067c8>
  80e890:	a825883a 	mov	r18,r21
  80e894:	8445c83a 	sub	r2,r16,r17
  80e898:	00c003c4 	movi	r3,15
  80e89c:	18802636 	bltu	r3,r2,80e938 <_realloc_r+0x1dc>
  80e8a0:	99800117 	ldw	r6,4(r19)
  80e8a4:	9c07883a 	add	r3,r19,r16
  80e8a8:	3180004c 	andi	r6,r6,1
  80e8ac:	3420b03a 	or	r16,r6,r16
  80e8b0:	9c000115 	stw	r16,4(r19)
  80e8b4:	18800117 	ldw	r2,4(r3)
  80e8b8:	10800054 	ori	r2,r2,1
  80e8bc:	18800115 	stw	r2,4(r3)
  80e8c0:	a009883a 	mov	r4,r20
  80e8c4:	08131200 	call	813120 <__malloc_unlock>
  80e8c8:	9005883a 	mov	r2,r18
  80e8cc:	dfc00917 	ldw	ra,36(sp)
  80e8d0:	df000817 	ldw	fp,32(sp)
  80e8d4:	ddc00717 	ldw	r23,28(sp)
  80e8d8:	dd800617 	ldw	r22,24(sp)
  80e8dc:	dd400517 	ldw	r21,20(sp)
  80e8e0:	dd000417 	ldw	r20,16(sp)
  80e8e4:	dcc00317 	ldw	r19,12(sp)
  80e8e8:	dc800217 	ldw	r18,8(sp)
  80e8ec:	dc400117 	ldw	r17,4(sp)
  80e8f0:	dc000017 	ldw	r16,0(sp)
  80e8f4:	dec00a04 	addi	sp,sp,40
  80e8f8:	f800283a 	ret
  80e8fc:	017fff04 	movi	r5,-4
  80e900:	414a703a 	and	r5,r8,r5
  80e904:	814d883a 	add	r6,r16,r5
  80e908:	30c01f16 	blt	r6,r3,80e988 <_realloc_r+0x22c>
  80e90c:	20800317 	ldw	r2,12(r4)
  80e910:	20c00217 	ldw	r3,8(r4)
  80e914:	a825883a 	mov	r18,r21
  80e918:	3021883a 	mov	r16,r6
  80e91c:	18800315 	stw	r2,12(r3)
  80e920:	10c00215 	stw	r3,8(r2)
  80e924:	003fdb06 	br	80e894 <__alt_mem_onchip_mem+0xff806894>
  80e928:	00800304 	movi	r2,12
  80e92c:	a0800015 	stw	r2,0(r20)
  80e930:	0005883a 	mov	r2,zero
  80e934:	003fe506 	br	80e8cc <__alt_mem_onchip_mem+0xff8068cc>
  80e938:	98c00117 	ldw	r3,4(r19)
  80e93c:	9c4b883a 	add	r5,r19,r17
  80e940:	11000054 	ori	r4,r2,1
  80e944:	18c0004c 	andi	r3,r3,1
  80e948:	1c62b03a 	or	r17,r3,r17
  80e94c:	9c400115 	stw	r17,4(r19)
  80e950:	29000115 	stw	r4,4(r5)
  80e954:	2885883a 	add	r2,r5,r2
  80e958:	10c00117 	ldw	r3,4(r2)
  80e95c:	29400204 	addi	r5,r5,8
  80e960:	a009883a 	mov	r4,r20
  80e964:	18c00054 	ori	r3,r3,1
  80e968:	10c00115 	stw	r3,4(r2)
  80e96c:	080c8940 	call	80c894 <_free_r>
  80e970:	003fd306 	br	80e8c0 <__alt_mem_onchip_mem+0xff8068c0>
  80e974:	017fff04 	movi	r5,-4
  80e978:	414a703a 	and	r5,r8,r5
  80e97c:	89800404 	addi	r6,r17,16
  80e980:	8151883a 	add	r8,r16,r5
  80e984:	4180590e 	bge	r8,r6,80eaec <_realloc_r+0x390>
  80e988:	1080004c 	andi	r2,r2,1
  80e98c:	103f9e1e 	bne	r2,zero,80e808 <__alt_mem_onchip_mem+0xff806808>
  80e990:	adbffe17 	ldw	r22,-8(r21)
  80e994:	00bfff04 	movi	r2,-4
  80e998:	9dadc83a 	sub	r22,r19,r22
  80e99c:	b1800117 	ldw	r6,4(r22)
  80e9a0:	3084703a 	and	r2,r6,r2
  80e9a4:	20002026 	beq	r4,zero,80ea28 <_realloc_r+0x2cc>
  80e9a8:	80af883a 	add	r23,r16,r2
  80e9ac:	b96f883a 	add	r23,r23,r5
  80e9b0:	21c05f26 	beq	r4,r7,80eb30 <_realloc_r+0x3d4>
  80e9b4:	b8c01c16 	blt	r23,r3,80ea28 <_realloc_r+0x2cc>
  80e9b8:	20800317 	ldw	r2,12(r4)
  80e9bc:	20c00217 	ldw	r3,8(r4)
  80e9c0:	81bfff04 	addi	r6,r16,-4
  80e9c4:	01000904 	movi	r4,36
  80e9c8:	18800315 	stw	r2,12(r3)
  80e9cc:	10c00215 	stw	r3,8(r2)
  80e9d0:	b0c00217 	ldw	r3,8(r22)
  80e9d4:	b0800317 	ldw	r2,12(r22)
  80e9d8:	b4800204 	addi	r18,r22,8
  80e9dc:	18800315 	stw	r2,12(r3)
  80e9e0:	10c00215 	stw	r3,8(r2)
  80e9e4:	21801b36 	bltu	r4,r6,80ea54 <_realloc_r+0x2f8>
  80e9e8:	008004c4 	movi	r2,19
  80e9ec:	1180352e 	bgeu	r2,r6,80eac4 <_realloc_r+0x368>
  80e9f0:	a8800017 	ldw	r2,0(r21)
  80e9f4:	b0800215 	stw	r2,8(r22)
  80e9f8:	a8800117 	ldw	r2,4(r21)
  80e9fc:	b0800315 	stw	r2,12(r22)
  80ea00:	008006c4 	movi	r2,27
  80ea04:	11807f36 	bltu	r2,r6,80ec04 <_realloc_r+0x4a8>
  80ea08:	b0800404 	addi	r2,r22,16
  80ea0c:	ad400204 	addi	r21,r21,8
  80ea10:	00002d06 	br	80eac8 <_realloc_r+0x36c>
  80ea14:	adbffe17 	ldw	r22,-8(r21)
  80ea18:	00bfff04 	movi	r2,-4
  80ea1c:	9dadc83a 	sub	r22,r19,r22
  80ea20:	b1000117 	ldw	r4,4(r22)
  80ea24:	2084703a 	and	r2,r4,r2
  80ea28:	b03f7726 	beq	r22,zero,80e808 <__alt_mem_onchip_mem+0xff806808>
  80ea2c:	80af883a 	add	r23,r16,r2
  80ea30:	b8ff7516 	blt	r23,r3,80e808 <__alt_mem_onchip_mem+0xff806808>
  80ea34:	b0800317 	ldw	r2,12(r22)
  80ea38:	b0c00217 	ldw	r3,8(r22)
  80ea3c:	81bfff04 	addi	r6,r16,-4
  80ea40:	01000904 	movi	r4,36
  80ea44:	18800315 	stw	r2,12(r3)
  80ea48:	10c00215 	stw	r3,8(r2)
  80ea4c:	b4800204 	addi	r18,r22,8
  80ea50:	21bfe52e 	bgeu	r4,r6,80e9e8 <__alt_mem_onchip_mem+0xff8069e8>
  80ea54:	a80b883a 	mov	r5,r21
  80ea58:	9009883a 	mov	r4,r18
  80ea5c:	080d5a40 	call	80d5a4 <memmove>
  80ea60:	b821883a 	mov	r16,r23
  80ea64:	b027883a 	mov	r19,r22
  80ea68:	003f8a06 	br	80e894 <__alt_mem_onchip_mem+0xff806894>
  80ea6c:	300b883a 	mov	r5,r6
  80ea70:	dfc00917 	ldw	ra,36(sp)
  80ea74:	df000817 	ldw	fp,32(sp)
  80ea78:	ddc00717 	ldw	r23,28(sp)
  80ea7c:	dd800617 	ldw	r22,24(sp)
  80ea80:	dd400517 	ldw	r21,20(sp)
  80ea84:	dd000417 	ldw	r20,16(sp)
  80ea88:	dcc00317 	ldw	r19,12(sp)
  80ea8c:	dc800217 	ldw	r18,8(sp)
  80ea90:	dc400117 	ldw	r17,4(sp)
  80ea94:	dc000017 	ldw	r16,0(sp)
  80ea98:	dec00a04 	addi	sp,sp,40
  80ea9c:	080749c1 	jmpi	80749c <_malloc_r>
  80eaa0:	a8c00017 	ldw	r3,0(r21)
  80eaa4:	90c00015 	stw	r3,0(r18)
  80eaa8:	a8c00117 	ldw	r3,4(r21)
  80eaac:	90c00115 	stw	r3,4(r18)
  80eab0:	00c006c4 	movi	r3,27
  80eab4:	19804536 	bltu	r3,r6,80ebcc <_realloc_r+0x470>
  80eab8:	90800204 	addi	r2,r18,8
  80eabc:	a8c00204 	addi	r3,r21,8
  80eac0:	003f6306 	br	80e850 <__alt_mem_onchip_mem+0xff806850>
  80eac4:	9005883a 	mov	r2,r18
  80eac8:	a8c00017 	ldw	r3,0(r21)
  80eacc:	b821883a 	mov	r16,r23
  80ead0:	b027883a 	mov	r19,r22
  80ead4:	10c00015 	stw	r3,0(r2)
  80ead8:	a8c00117 	ldw	r3,4(r21)
  80eadc:	10c00115 	stw	r3,4(r2)
  80eae0:	a8c00217 	ldw	r3,8(r21)
  80eae4:	10c00215 	stw	r3,8(r2)
  80eae8:	003f6a06 	br	80e894 <__alt_mem_onchip_mem+0xff806894>
  80eaec:	9c67883a 	add	r19,r19,r17
  80eaf0:	4445c83a 	sub	r2,r8,r17
  80eaf4:	e4c00215 	stw	r19,8(fp)
  80eaf8:	10800054 	ori	r2,r2,1
  80eafc:	98800115 	stw	r2,4(r19)
  80eb00:	a8bfff17 	ldw	r2,-4(r21)
  80eb04:	a009883a 	mov	r4,r20
  80eb08:	1080004c 	andi	r2,r2,1
  80eb0c:	1462b03a 	or	r17,r2,r17
  80eb10:	ac7fff15 	stw	r17,-4(r21)
  80eb14:	08131200 	call	813120 <__malloc_unlock>
  80eb18:	a805883a 	mov	r2,r21
  80eb1c:	003f6b06 	br	80e8cc <__alt_mem_onchip_mem+0xff8068cc>
  80eb20:	a80b883a 	mov	r5,r21
  80eb24:	9009883a 	mov	r4,r18
  80eb28:	080d5a40 	call	80d5a4 <memmove>
  80eb2c:	003f4e06 	br	80e868 <__alt_mem_onchip_mem+0xff806868>
  80eb30:	89000404 	addi	r4,r17,16
  80eb34:	b93fbc16 	blt	r23,r4,80ea28 <__alt_mem_onchip_mem+0xff806a28>
  80eb38:	b0800317 	ldw	r2,12(r22)
  80eb3c:	b0c00217 	ldw	r3,8(r22)
  80eb40:	81bfff04 	addi	r6,r16,-4
  80eb44:	01000904 	movi	r4,36
  80eb48:	18800315 	stw	r2,12(r3)
  80eb4c:	10c00215 	stw	r3,8(r2)
  80eb50:	b4800204 	addi	r18,r22,8
  80eb54:	21804336 	bltu	r4,r6,80ec64 <_realloc_r+0x508>
  80eb58:	008004c4 	movi	r2,19
  80eb5c:	11803f2e 	bgeu	r2,r6,80ec5c <_realloc_r+0x500>
  80eb60:	a8800017 	ldw	r2,0(r21)
  80eb64:	b0800215 	stw	r2,8(r22)
  80eb68:	a8800117 	ldw	r2,4(r21)
  80eb6c:	b0800315 	stw	r2,12(r22)
  80eb70:	008006c4 	movi	r2,27
  80eb74:	11803f36 	bltu	r2,r6,80ec74 <_realloc_r+0x518>
  80eb78:	b0800404 	addi	r2,r22,16
  80eb7c:	ad400204 	addi	r21,r21,8
  80eb80:	a8c00017 	ldw	r3,0(r21)
  80eb84:	10c00015 	stw	r3,0(r2)
  80eb88:	a8c00117 	ldw	r3,4(r21)
  80eb8c:	10c00115 	stw	r3,4(r2)
  80eb90:	a8c00217 	ldw	r3,8(r21)
  80eb94:	10c00215 	stw	r3,8(r2)
  80eb98:	b447883a 	add	r3,r22,r17
  80eb9c:	bc45c83a 	sub	r2,r23,r17
  80eba0:	e0c00215 	stw	r3,8(fp)
  80eba4:	10800054 	ori	r2,r2,1
  80eba8:	18800115 	stw	r2,4(r3)
  80ebac:	b0800117 	ldw	r2,4(r22)
  80ebb0:	a009883a 	mov	r4,r20
  80ebb4:	1080004c 	andi	r2,r2,1
  80ebb8:	1462b03a 	or	r17,r2,r17
  80ebbc:	b4400115 	stw	r17,4(r22)
  80ebc0:	08131200 	call	813120 <__malloc_unlock>
  80ebc4:	9005883a 	mov	r2,r18
  80ebc8:	003f4006 	br	80e8cc <__alt_mem_onchip_mem+0xff8068cc>
  80ebcc:	a8c00217 	ldw	r3,8(r21)
  80ebd0:	90c00215 	stw	r3,8(r18)
  80ebd4:	a8c00317 	ldw	r3,12(r21)
  80ebd8:	90c00315 	stw	r3,12(r18)
  80ebdc:	30801126 	beq	r6,r2,80ec24 <_realloc_r+0x4c8>
  80ebe0:	90800404 	addi	r2,r18,16
  80ebe4:	a8c00404 	addi	r3,r21,16
  80ebe8:	003f1906 	br	80e850 <__alt_mem_onchip_mem+0xff806850>
  80ebec:	90ffff17 	ldw	r3,-4(r18)
  80ebf0:	00bfff04 	movi	r2,-4
  80ebf4:	a825883a 	mov	r18,r21
  80ebf8:	1884703a 	and	r2,r3,r2
  80ebfc:	80a1883a 	add	r16,r16,r2
  80ec00:	003f2406 	br	80e894 <__alt_mem_onchip_mem+0xff806894>
  80ec04:	a8800217 	ldw	r2,8(r21)
  80ec08:	b0800415 	stw	r2,16(r22)
  80ec0c:	a8800317 	ldw	r2,12(r21)
  80ec10:	b0800515 	stw	r2,20(r22)
  80ec14:	31000a26 	beq	r6,r4,80ec40 <_realloc_r+0x4e4>
  80ec18:	b0800604 	addi	r2,r22,24
  80ec1c:	ad400404 	addi	r21,r21,16
  80ec20:	003fa906 	br	80eac8 <__alt_mem_onchip_mem+0xff806ac8>
  80ec24:	a9000417 	ldw	r4,16(r21)
  80ec28:	90800604 	addi	r2,r18,24
  80ec2c:	a8c00604 	addi	r3,r21,24
  80ec30:	91000415 	stw	r4,16(r18)
  80ec34:	a9000517 	ldw	r4,20(r21)
  80ec38:	91000515 	stw	r4,20(r18)
  80ec3c:	003f0406 	br	80e850 <__alt_mem_onchip_mem+0xff806850>
  80ec40:	a8c00417 	ldw	r3,16(r21)
  80ec44:	ad400604 	addi	r21,r21,24
  80ec48:	b0800804 	addi	r2,r22,32
  80ec4c:	b0c00615 	stw	r3,24(r22)
  80ec50:	a8ffff17 	ldw	r3,-4(r21)
  80ec54:	b0c00715 	stw	r3,28(r22)
  80ec58:	003f9b06 	br	80eac8 <__alt_mem_onchip_mem+0xff806ac8>
  80ec5c:	9005883a 	mov	r2,r18
  80ec60:	003fc706 	br	80eb80 <__alt_mem_onchip_mem+0xff806b80>
  80ec64:	a80b883a 	mov	r5,r21
  80ec68:	9009883a 	mov	r4,r18
  80ec6c:	080d5a40 	call	80d5a4 <memmove>
  80ec70:	003fc906 	br	80eb98 <__alt_mem_onchip_mem+0xff806b98>
  80ec74:	a8800217 	ldw	r2,8(r21)
  80ec78:	b0800415 	stw	r2,16(r22)
  80ec7c:	a8800317 	ldw	r2,12(r21)
  80ec80:	b0800515 	stw	r2,20(r22)
  80ec84:	31000726 	beq	r6,r4,80eca4 <_realloc_r+0x548>
  80ec88:	b0800604 	addi	r2,r22,24
  80ec8c:	ad400404 	addi	r21,r21,16
  80ec90:	003fbb06 	br	80eb80 <__alt_mem_onchip_mem+0xff806b80>
  80ec94:	a009883a 	mov	r4,r20
  80ec98:	08131200 	call	813120 <__malloc_unlock>
  80ec9c:	0005883a 	mov	r2,zero
  80eca0:	003f0a06 	br	80e8cc <__alt_mem_onchip_mem+0xff8068cc>
  80eca4:	a8c00417 	ldw	r3,16(r21)
  80eca8:	ad400604 	addi	r21,r21,24
  80ecac:	b0800804 	addi	r2,r22,32
  80ecb0:	b0c00615 	stw	r3,24(r22)
  80ecb4:	a8ffff17 	ldw	r3,-4(r21)
  80ecb8:	b0c00715 	stw	r3,28(r22)
  80ecbc:	003fb006 	br	80eb80 <__alt_mem_onchip_mem+0xff806b80>

0080ecc0 <__fpclassifyd>:
  80ecc0:	00a00034 	movhi	r2,32768
  80ecc4:	10bfffc4 	addi	r2,r2,-1
  80ecc8:	2884703a 	and	r2,r5,r2
  80eccc:	10000726 	beq	r2,zero,80ecec <__fpclassifyd+0x2c>
  80ecd0:	00fffc34 	movhi	r3,65520
  80ecd4:	019ff834 	movhi	r6,32736
  80ecd8:	28c7883a 	add	r3,r5,r3
  80ecdc:	31bfffc4 	addi	r6,r6,-1
  80ece0:	30c00536 	bltu	r6,r3,80ecf8 <__fpclassifyd+0x38>
  80ece4:	00800104 	movi	r2,4
  80ece8:	f800283a 	ret
  80ecec:	2000021e 	bne	r4,zero,80ecf8 <__fpclassifyd+0x38>
  80ecf0:	00800084 	movi	r2,2
  80ecf4:	f800283a 	ret
  80ecf8:	00dffc34 	movhi	r3,32752
  80ecfc:	019ff834 	movhi	r6,32736
  80ed00:	28cb883a 	add	r5,r5,r3
  80ed04:	31bfffc4 	addi	r6,r6,-1
  80ed08:	317ff62e 	bgeu	r6,r5,80ece4 <__alt_mem_onchip_mem+0xff806ce4>
  80ed0c:	01400434 	movhi	r5,16
  80ed10:	297fffc4 	addi	r5,r5,-1
  80ed14:	28800236 	bltu	r5,r2,80ed20 <__fpclassifyd+0x60>
  80ed18:	008000c4 	movi	r2,3
  80ed1c:	f800283a 	ret
  80ed20:	10c00226 	beq	r2,r3,80ed2c <__fpclassifyd+0x6c>
  80ed24:	0005883a 	mov	r2,zero
  80ed28:	f800283a 	ret
  80ed2c:	2005003a 	cmpeq	r2,r4,zero
  80ed30:	f800283a 	ret

0080ed34 <strcmp>:
  80ed34:	2144b03a 	or	r2,r4,r5
  80ed38:	108000cc 	andi	r2,r2,3
  80ed3c:	1000171e 	bne	r2,zero,80ed9c <strcmp+0x68>
  80ed40:	20800017 	ldw	r2,0(r4)
  80ed44:	28c00017 	ldw	r3,0(r5)
  80ed48:	10c0141e 	bne	r2,r3,80ed9c <strcmp+0x68>
  80ed4c:	027fbff4 	movhi	r9,65279
  80ed50:	4a7fbfc4 	addi	r9,r9,-257
  80ed54:	0086303a 	nor	r3,zero,r2
  80ed58:	02202074 	movhi	r8,32897
  80ed5c:	1245883a 	add	r2,r2,r9
  80ed60:	42202004 	addi	r8,r8,-32640
  80ed64:	10c4703a 	and	r2,r2,r3
  80ed68:	1204703a 	and	r2,r2,r8
  80ed6c:	10000226 	beq	r2,zero,80ed78 <strcmp+0x44>
  80ed70:	00002306 	br	80ee00 <strcmp+0xcc>
  80ed74:	1000221e 	bne	r2,zero,80ee00 <strcmp+0xcc>
  80ed78:	21000104 	addi	r4,r4,4
  80ed7c:	20c00017 	ldw	r3,0(r4)
  80ed80:	29400104 	addi	r5,r5,4
  80ed84:	29800017 	ldw	r6,0(r5)
  80ed88:	1a4f883a 	add	r7,r3,r9
  80ed8c:	00c4303a 	nor	r2,zero,r3
  80ed90:	3884703a 	and	r2,r7,r2
  80ed94:	1204703a 	and	r2,r2,r8
  80ed98:	19bff626 	beq	r3,r6,80ed74 <__alt_mem_onchip_mem+0xff806d74>
  80ed9c:	20800003 	ldbu	r2,0(r4)
  80eda0:	10c03fcc 	andi	r3,r2,255
  80eda4:	18c0201c 	xori	r3,r3,128
  80eda8:	18ffe004 	addi	r3,r3,-128
  80edac:	18000c26 	beq	r3,zero,80ede0 <strcmp+0xac>
  80edb0:	29800007 	ldb	r6,0(r5)
  80edb4:	19800326 	beq	r3,r6,80edc4 <strcmp+0x90>
  80edb8:	00001306 	br	80ee08 <strcmp+0xd4>
  80edbc:	29800007 	ldb	r6,0(r5)
  80edc0:	11800b1e 	bne	r2,r6,80edf0 <strcmp+0xbc>
  80edc4:	21000044 	addi	r4,r4,1
  80edc8:	20c00003 	ldbu	r3,0(r4)
  80edcc:	29400044 	addi	r5,r5,1
  80edd0:	18803fcc 	andi	r2,r3,255
  80edd4:	1080201c 	xori	r2,r2,128
  80edd8:	10bfe004 	addi	r2,r2,-128
  80eddc:	103ff71e 	bne	r2,zero,80edbc <__alt_mem_onchip_mem+0xff806dbc>
  80ede0:	0007883a 	mov	r3,zero
  80ede4:	28800003 	ldbu	r2,0(r5)
  80ede8:	1885c83a 	sub	r2,r3,r2
  80edec:	f800283a 	ret
  80edf0:	28800003 	ldbu	r2,0(r5)
  80edf4:	18c03fcc 	andi	r3,r3,255
  80edf8:	1885c83a 	sub	r2,r3,r2
  80edfc:	f800283a 	ret
  80ee00:	0005883a 	mov	r2,zero
  80ee04:	f800283a 	ret
  80ee08:	10c03fcc 	andi	r3,r2,255
  80ee0c:	003ff506 	br	80ede4 <__alt_mem_onchip_mem+0xff806de4>

0080ee10 <__sprint_r.part.0>:
  80ee10:	28801917 	ldw	r2,100(r5)
  80ee14:	defff604 	addi	sp,sp,-40
  80ee18:	dd400515 	stw	r21,20(sp)
  80ee1c:	dfc00915 	stw	ra,36(sp)
  80ee20:	df000815 	stw	fp,32(sp)
  80ee24:	ddc00715 	stw	r23,28(sp)
  80ee28:	dd800615 	stw	r22,24(sp)
  80ee2c:	dd000415 	stw	r20,16(sp)
  80ee30:	dcc00315 	stw	r19,12(sp)
  80ee34:	dc800215 	stw	r18,8(sp)
  80ee38:	dc400115 	stw	r17,4(sp)
  80ee3c:	dc000015 	stw	r16,0(sp)
  80ee40:	1088000c 	andi	r2,r2,8192
  80ee44:	302b883a 	mov	r21,r6
  80ee48:	10002e26 	beq	r2,zero,80ef04 <__sprint_r.part.0+0xf4>
  80ee4c:	30800217 	ldw	r2,8(r6)
  80ee50:	35800017 	ldw	r22,0(r6)
  80ee54:	10002926 	beq	r2,zero,80eefc <__sprint_r.part.0+0xec>
  80ee58:	2827883a 	mov	r19,r5
  80ee5c:	2029883a 	mov	r20,r4
  80ee60:	b5c00104 	addi	r23,r22,4
  80ee64:	04bfffc4 	movi	r18,-1
  80ee68:	bc400017 	ldw	r17,0(r23)
  80ee6c:	b4000017 	ldw	r16,0(r22)
  80ee70:	0039883a 	mov	fp,zero
  80ee74:	8822d0ba 	srli	r17,r17,2
  80ee78:	8800031e 	bne	r17,zero,80ee88 <__sprint_r.part.0+0x78>
  80ee7c:	00001806 	br	80eee0 <__sprint_r.part.0+0xd0>
  80ee80:	84000104 	addi	r16,r16,4
  80ee84:	8f001526 	beq	r17,fp,80eedc <__sprint_r.part.0+0xcc>
  80ee88:	81400017 	ldw	r5,0(r16)
  80ee8c:	980d883a 	mov	r6,r19
  80ee90:	a009883a 	mov	r4,r20
  80ee94:	08107840 	call	810784 <_fputwc_r>
  80ee98:	e7000044 	addi	fp,fp,1
  80ee9c:	14bff81e 	bne	r2,r18,80ee80 <__alt_mem_onchip_mem+0xff806e80>
  80eea0:	9005883a 	mov	r2,r18
  80eea4:	a8000215 	stw	zero,8(r21)
  80eea8:	a8000115 	stw	zero,4(r21)
  80eeac:	dfc00917 	ldw	ra,36(sp)
  80eeb0:	df000817 	ldw	fp,32(sp)
  80eeb4:	ddc00717 	ldw	r23,28(sp)
  80eeb8:	dd800617 	ldw	r22,24(sp)
  80eebc:	dd400517 	ldw	r21,20(sp)
  80eec0:	dd000417 	ldw	r20,16(sp)
  80eec4:	dcc00317 	ldw	r19,12(sp)
  80eec8:	dc800217 	ldw	r18,8(sp)
  80eecc:	dc400117 	ldw	r17,4(sp)
  80eed0:	dc000017 	ldw	r16,0(sp)
  80eed4:	dec00a04 	addi	sp,sp,40
  80eed8:	f800283a 	ret
  80eedc:	a8800217 	ldw	r2,8(r21)
  80eee0:	8c63883a 	add	r17,r17,r17
  80eee4:	8c63883a 	add	r17,r17,r17
  80eee8:	1445c83a 	sub	r2,r2,r17
  80eeec:	a8800215 	stw	r2,8(r21)
  80eef0:	b5800204 	addi	r22,r22,8
  80eef4:	bdc00204 	addi	r23,r23,8
  80eef8:	103fdb1e 	bne	r2,zero,80ee68 <__alt_mem_onchip_mem+0xff806e68>
  80eefc:	0005883a 	mov	r2,zero
  80ef00:	003fe806 	br	80eea4 <__alt_mem_onchip_mem+0xff806ea4>
  80ef04:	080cba40 	call	80cba4 <__sfvwrite_r>
  80ef08:	003fe606 	br	80eea4 <__alt_mem_onchip_mem+0xff806ea4>

0080ef0c <__sprint_r>:
  80ef0c:	30c00217 	ldw	r3,8(r6)
  80ef10:	18000126 	beq	r3,zero,80ef18 <__sprint_r+0xc>
  80ef14:	080ee101 	jmpi	80ee10 <__sprint_r.part.0>
  80ef18:	30000115 	stw	zero,4(r6)
  80ef1c:	0005883a 	mov	r2,zero
  80ef20:	f800283a 	ret

0080ef24 <___vfiprintf_internal_r>:
  80ef24:	deffc904 	addi	sp,sp,-220
  80ef28:	df003515 	stw	fp,212(sp)
  80ef2c:	dd003115 	stw	r20,196(sp)
  80ef30:	dfc03615 	stw	ra,216(sp)
  80ef34:	ddc03415 	stw	r23,208(sp)
  80ef38:	dd803315 	stw	r22,204(sp)
  80ef3c:	dd403215 	stw	r21,200(sp)
  80ef40:	dcc03015 	stw	r19,192(sp)
  80ef44:	dc802f15 	stw	r18,188(sp)
  80ef48:	dc402e15 	stw	r17,184(sp)
  80ef4c:	dc002d15 	stw	r16,180(sp)
  80ef50:	d9002015 	stw	r4,128(sp)
  80ef54:	d9c02215 	stw	r7,136(sp)
  80ef58:	2829883a 	mov	r20,r5
  80ef5c:	3039883a 	mov	fp,r6
  80ef60:	20000226 	beq	r4,zero,80ef6c <___vfiprintf_internal_r+0x48>
  80ef64:	20800e17 	ldw	r2,56(r4)
  80ef68:	1000cf26 	beq	r2,zero,80f2a8 <___vfiprintf_internal_r+0x384>
  80ef6c:	a080030b 	ldhu	r2,12(r20)
  80ef70:	10c8000c 	andi	r3,r2,8192
  80ef74:	1800061e 	bne	r3,zero,80ef90 <___vfiprintf_internal_r+0x6c>
  80ef78:	a1001917 	ldw	r4,100(r20)
  80ef7c:	00f7ffc4 	movi	r3,-8193
  80ef80:	10880014 	ori	r2,r2,8192
  80ef84:	20c6703a 	and	r3,r4,r3
  80ef88:	a080030d 	sth	r2,12(r20)
  80ef8c:	a0c01915 	stw	r3,100(r20)
  80ef90:	10c0020c 	andi	r3,r2,8
  80ef94:	1800a926 	beq	r3,zero,80f23c <___vfiprintf_internal_r+0x318>
  80ef98:	a0c00417 	ldw	r3,16(r20)
  80ef9c:	1800a726 	beq	r3,zero,80f23c <___vfiprintf_internal_r+0x318>
  80efa0:	1080068c 	andi	r2,r2,26
  80efa4:	00c00284 	movi	r3,10
  80efa8:	10c0ac26 	beq	r2,r3,80f25c <___vfiprintf_internal_r+0x338>
  80efac:	da801a04 	addi	r10,sp,104
  80efb0:	da801e15 	stw	r10,120(sp)
  80efb4:	d8801e17 	ldw	r2,120(sp)
  80efb8:	da8019c4 	addi	r10,sp,103
  80efbc:	05802074 	movhi	r22,129
  80efc0:	05c02074 	movhi	r23,129
  80efc4:	da801f15 	stw	r10,124(sp)
  80efc8:	1295c83a 	sub	r10,r2,r10
  80efcc:	b59bb904 	addi	r22,r22,28388
  80efd0:	bddbb504 	addi	r23,r23,28372
  80efd4:	dec01a15 	stw	sp,104(sp)
  80efd8:	d8001c15 	stw	zero,112(sp)
  80efdc:	d8001b15 	stw	zero,108(sp)
  80efe0:	d8002615 	stw	zero,152(sp)
  80efe4:	d8002315 	stw	zero,140(sp)
  80efe8:	da802715 	stw	r10,156(sp)
  80efec:	d811883a 	mov	r8,sp
  80eff0:	dd002115 	stw	r20,132(sp)
  80eff4:	e021883a 	mov	r16,fp
  80eff8:	80800007 	ldb	r2,0(r16)
  80effc:	1003ea26 	beq	r2,zero,80ffa8 <___vfiprintf_internal_r+0x1084>
  80f000:	00c00944 	movi	r3,37
  80f004:	8025883a 	mov	r18,r16
  80f008:	10c0021e 	bne	r2,r3,80f014 <___vfiprintf_internal_r+0xf0>
  80f00c:	00001606 	br	80f068 <___vfiprintf_internal_r+0x144>
  80f010:	10c00326 	beq	r2,r3,80f020 <___vfiprintf_internal_r+0xfc>
  80f014:	94800044 	addi	r18,r18,1
  80f018:	90800007 	ldb	r2,0(r18)
  80f01c:	103ffc1e 	bne	r2,zero,80f010 <__alt_mem_onchip_mem+0xff807010>
  80f020:	9423c83a 	sub	r17,r18,r16
  80f024:	88001026 	beq	r17,zero,80f068 <___vfiprintf_internal_r+0x144>
  80f028:	d8c01c17 	ldw	r3,112(sp)
  80f02c:	d8801b17 	ldw	r2,108(sp)
  80f030:	44000015 	stw	r16,0(r8)
  80f034:	88c7883a 	add	r3,r17,r3
  80f038:	10800044 	addi	r2,r2,1
  80f03c:	44400115 	stw	r17,4(r8)
  80f040:	d8c01c15 	stw	r3,112(sp)
  80f044:	d8801b15 	stw	r2,108(sp)
  80f048:	010001c4 	movi	r4,7
  80f04c:	2080760e 	bge	r4,r2,80f228 <___vfiprintf_internal_r+0x304>
  80f050:	1803821e 	bne	r3,zero,80fe5c <___vfiprintf_internal_r+0xf38>
  80f054:	da802317 	ldw	r10,140(sp)
  80f058:	d8001b15 	stw	zero,108(sp)
  80f05c:	d811883a 	mov	r8,sp
  80f060:	5455883a 	add	r10,r10,r17
  80f064:	da802315 	stw	r10,140(sp)
  80f068:	90800007 	ldb	r2,0(r18)
  80f06c:	10044626 	beq	r2,zero,810188 <___vfiprintf_internal_r+0x1264>
  80f070:	90c00047 	ldb	r3,1(r18)
  80f074:	94000044 	addi	r16,r18,1
  80f078:	d8001d85 	stb	zero,118(sp)
  80f07c:	0009883a 	mov	r4,zero
  80f080:	000f883a 	mov	r7,zero
  80f084:	027fffc4 	movi	r9,-1
  80f088:	0023883a 	mov	r17,zero
  80f08c:	0029883a 	mov	r20,zero
  80f090:	01401604 	movi	r5,88
  80f094:	01800244 	movi	r6,9
  80f098:	03400a84 	movi	r13,42
  80f09c:	03001b04 	movi	r12,108
  80f0a0:	84000044 	addi	r16,r16,1
  80f0a4:	18bff804 	addi	r2,r3,-32
  80f0a8:	28827336 	bltu	r5,r2,80fa78 <___vfiprintf_internal_r+0xb54>
  80f0ac:	100490ba 	slli	r2,r2,2
  80f0b0:	02802074 	movhi	r10,129
  80f0b4:	52bc3104 	addi	r10,r10,-3900
  80f0b8:	1285883a 	add	r2,r2,r10
  80f0bc:	10800017 	ldw	r2,0(r2)
  80f0c0:	1000683a 	jmp	r2
  80f0c4:	0080f7ac 	andhi	r2,zero,990
  80f0c8:	0080fa78 	rdprs	r2,zero,1001
  80f0cc:	0080fa78 	rdprs	r2,zero,1001
  80f0d0:	0080f7cc 	andi	r2,zero,991
  80f0d4:	0080fa78 	rdprs	r2,zero,1001
  80f0d8:	0080fa78 	rdprs	r2,zero,1001
  80f0dc:	0080fa78 	rdprs	r2,zero,1001
  80f0e0:	0080fa78 	rdprs	r2,zero,1001
  80f0e4:	0080fa78 	rdprs	r2,zero,1001
  80f0e8:	0080fa78 	rdprs	r2,zero,1001
  80f0ec:	0080f9b4 	movhi	r2,998
  80f0f0:	0080f9d0 	cmplti	r2,zero,999
  80f0f4:	0080fa78 	rdprs	r2,zero,1001
  80f0f8:	0080f2b8 	rdprs	r2,zero,970
  80f0fc:	0080f9e0 	cmpeqi	r2,zero,999
  80f100:	0080fa78 	rdprs	r2,zero,1001
  80f104:	0080f7d8 	cmpnei	r2,zero,991
  80f108:	0080f7e4 	muli	r2,zero,991
  80f10c:	0080f7e4 	muli	r2,zero,991
  80f110:	0080f7e4 	muli	r2,zero,991
  80f114:	0080f7e4 	muli	r2,zero,991
  80f118:	0080f7e4 	muli	r2,zero,991
  80f11c:	0080f7e4 	muli	r2,zero,991
  80f120:	0080f7e4 	muli	r2,zero,991
  80f124:	0080f7e4 	muli	r2,zero,991
  80f128:	0080f7e4 	muli	r2,zero,991
  80f12c:	0080fa78 	rdprs	r2,zero,1001
  80f130:	0080fa78 	rdprs	r2,zero,1001
  80f134:	0080fa78 	rdprs	r2,zero,1001
  80f138:	0080fa78 	rdprs	r2,zero,1001
  80f13c:	0080fa78 	rdprs	r2,zero,1001
  80f140:	0080fa78 	rdprs	r2,zero,1001
  80f144:	0080fa78 	rdprs	r2,zero,1001
  80f148:	0080fa78 	rdprs	r2,zero,1001
  80f14c:	0080fa78 	rdprs	r2,zero,1001
  80f150:	0080fa78 	rdprs	r2,zero,1001
  80f154:	0080f810 	cmplti	r2,zero,992
  80f158:	0080fa78 	rdprs	r2,zero,1001
  80f15c:	0080fa78 	rdprs	r2,zero,1001
  80f160:	0080fa78 	rdprs	r2,zero,1001
  80f164:	0080fa78 	rdprs	r2,zero,1001
  80f168:	0080fa78 	rdprs	r2,zero,1001
  80f16c:	0080fa78 	rdprs	r2,zero,1001
  80f170:	0080fa78 	rdprs	r2,zero,1001
  80f174:	0080fa78 	rdprs	r2,zero,1001
  80f178:	0080fa78 	rdprs	r2,zero,1001
  80f17c:	0080fa78 	rdprs	r2,zero,1001
  80f180:	0080f848 	cmpgei	r2,zero,993
  80f184:	0080fa78 	rdprs	r2,zero,1001
  80f188:	0080fa78 	rdprs	r2,zero,1001
  80f18c:	0080fa78 	rdprs	r2,zero,1001
  80f190:	0080fa78 	rdprs	r2,zero,1001
  80f194:	0080fa78 	rdprs	r2,zero,1001
  80f198:	0080f8a0 	cmpeqi	r2,zero,994
  80f19c:	0080fa78 	rdprs	r2,zero,1001
  80f1a0:	0080fa78 	rdprs	r2,zero,1001
  80f1a4:	0080f910 	cmplti	r2,zero,996
  80f1a8:	0080fa78 	rdprs	r2,zero,1001
  80f1ac:	0080fa78 	rdprs	r2,zero,1001
  80f1b0:	0080fa78 	rdprs	r2,zero,1001
  80f1b4:	0080fa78 	rdprs	r2,zero,1001
  80f1b8:	0080fa78 	rdprs	r2,zero,1001
  80f1bc:	0080fa78 	rdprs	r2,zero,1001
  80f1c0:	0080fa78 	rdprs	r2,zero,1001
  80f1c4:	0080fa78 	rdprs	r2,zero,1001
  80f1c8:	0080fa78 	rdprs	r2,zero,1001
  80f1cc:	0080fa78 	rdprs	r2,zero,1001
  80f1d0:	0080f6bc 	xorhi	r2,zero,986
  80f1d4:	0080f6e8 	cmpgeui	r2,zero,987
  80f1d8:	0080fa78 	rdprs	r2,zero,1001
  80f1dc:	0080fa78 	rdprs	r2,zero,1001
  80f1e0:	0080fa78 	rdprs	r2,zero,1001
  80f1e4:	0080fa20 	cmpeqi	r2,zero,1000
  80f1e8:	0080f6e8 	cmpgeui	r2,zero,987
  80f1ec:	0080fa78 	rdprs	r2,zero,1001
  80f1f0:	0080fa78 	rdprs	r2,zero,1001
  80f1f4:	0080f57c 	xorhi	r2,zero,981
  80f1f8:	0080fa78 	rdprs	r2,zero,1001
  80f1fc:	0080f58c 	andi	r2,zero,982
  80f200:	0080f5c8 	cmpgei	r2,zero,983
  80f204:	0080f2c4 	movi	r2,971
  80f208:	0080f570 	cmpltui	r2,zero,981
  80f20c:	0080fa78 	rdprs	r2,zero,1001
  80f210:	0080f94c 	andi	r2,zero,997
  80f214:	0080fa78 	rdprs	r2,zero,1001
  80f218:	0080f9a4 	muli	r2,zero,998
  80f21c:	0080fa78 	rdprs	r2,zero,1001
  80f220:	0080fa78 	rdprs	r2,zero,1001
  80f224:	0080f668 	cmpgeui	r2,zero,985
  80f228:	42000204 	addi	r8,r8,8
  80f22c:	da802317 	ldw	r10,140(sp)
  80f230:	5455883a 	add	r10,r10,r17
  80f234:	da802315 	stw	r10,140(sp)
  80f238:	003f8b06 	br	80f068 <__alt_mem_onchip_mem+0xff807068>
  80f23c:	d9002017 	ldw	r4,128(sp)
  80f240:	a00b883a 	mov	r5,r20
  80f244:	080a64c0 	call	80a64c <__swsetup_r>
  80f248:	1003b11e 	bne	r2,zero,810110 <___vfiprintf_internal_r+0x11ec>
  80f24c:	a080030b 	ldhu	r2,12(r20)
  80f250:	00c00284 	movi	r3,10
  80f254:	1080068c 	andi	r2,r2,26
  80f258:	10ff541e 	bne	r2,r3,80efac <__alt_mem_onchip_mem+0xff806fac>
  80f25c:	a080038f 	ldh	r2,14(r20)
  80f260:	103f5216 	blt	r2,zero,80efac <__alt_mem_onchip_mem+0xff806fac>
  80f264:	d9c02217 	ldw	r7,136(sp)
  80f268:	d9002017 	ldw	r4,128(sp)
  80f26c:	e00d883a 	mov	r6,fp
  80f270:	a00b883a 	mov	r5,r20
  80f274:	081039c0 	call	81039c <__sbprintf>
  80f278:	dfc03617 	ldw	ra,216(sp)
  80f27c:	df003517 	ldw	fp,212(sp)
  80f280:	ddc03417 	ldw	r23,208(sp)
  80f284:	dd803317 	ldw	r22,204(sp)
  80f288:	dd403217 	ldw	r21,200(sp)
  80f28c:	dd003117 	ldw	r20,196(sp)
  80f290:	dcc03017 	ldw	r19,192(sp)
  80f294:	dc802f17 	ldw	r18,188(sp)
  80f298:	dc402e17 	ldw	r17,184(sp)
  80f29c:	dc002d17 	ldw	r16,180(sp)
  80f2a0:	dec03704 	addi	sp,sp,220
  80f2a4:	f800283a 	ret
  80f2a8:	080c6740 	call	80c674 <__sinit>
  80f2ac:	003f2f06 	br	80ef6c <__alt_mem_onchip_mem+0xff806f6c>
  80f2b0:	0463c83a 	sub	r17,zero,r17
  80f2b4:	d8802215 	stw	r2,136(sp)
  80f2b8:	a5000114 	ori	r20,r20,4
  80f2bc:	80c00007 	ldb	r3,0(r16)
  80f2c0:	003f7706 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80f2c4:	00800c04 	movi	r2,48
  80f2c8:	da802217 	ldw	r10,136(sp)
  80f2cc:	d8801d05 	stb	r2,116(sp)
  80f2d0:	00801e04 	movi	r2,120
  80f2d4:	d8801d45 	stb	r2,117(sp)
  80f2d8:	d8001d85 	stb	zero,118(sp)
  80f2dc:	50c00104 	addi	r3,r10,4
  80f2e0:	54800017 	ldw	r18,0(r10)
  80f2e4:	0027883a 	mov	r19,zero
  80f2e8:	a0800094 	ori	r2,r20,2
  80f2ec:	48030b16 	blt	r9,zero,80ff1c <___vfiprintf_internal_r+0xff8>
  80f2f0:	00bfdfc4 	movi	r2,-129
  80f2f4:	a096703a 	and	r11,r20,r2
  80f2f8:	d8c02215 	stw	r3,136(sp)
  80f2fc:	5d000094 	ori	r20,r11,2
  80f300:	90032b1e 	bne	r18,zero,80ffb0 <___vfiprintf_internal_r+0x108c>
  80f304:	00802074 	movhi	r2,129
  80f308:	109b5504 	addi	r2,r2,27988
  80f30c:	d8802615 	stw	r2,152(sp)
  80f310:	0039883a 	mov	fp,zero
  80f314:	48017b1e 	bne	r9,zero,80f904 <___vfiprintf_internal_r+0x9e0>
  80f318:	0013883a 	mov	r9,zero
  80f31c:	0027883a 	mov	r19,zero
  80f320:	dd401a04 	addi	r21,sp,104
  80f324:	4825883a 	mov	r18,r9
  80f328:	4cc0010e 	bge	r9,r19,80f330 <___vfiprintf_internal_r+0x40c>
  80f32c:	9825883a 	mov	r18,r19
  80f330:	e7003fcc 	andi	fp,fp,255
  80f334:	e700201c 	xori	fp,fp,128
  80f338:	e73fe004 	addi	fp,fp,-128
  80f33c:	e0000126 	beq	fp,zero,80f344 <___vfiprintf_internal_r+0x420>
  80f340:	94800044 	addi	r18,r18,1
  80f344:	a380008c 	andi	r14,r20,2
  80f348:	70000126 	beq	r14,zero,80f350 <___vfiprintf_internal_r+0x42c>
  80f34c:	94800084 	addi	r18,r18,2
  80f350:	a700210c 	andi	fp,r20,132
  80f354:	e001df1e 	bne	fp,zero,80fad4 <___vfiprintf_internal_r+0xbb0>
  80f358:	8c87c83a 	sub	r3,r17,r18
  80f35c:	00c1dd0e 	bge	zero,r3,80fad4 <___vfiprintf_internal_r+0xbb0>
  80f360:	01c00404 	movi	r7,16
  80f364:	d8801c17 	ldw	r2,112(sp)
  80f368:	38c3ad0e 	bge	r7,r3,810220 <___vfiprintf_internal_r+0x12fc>
  80f36c:	02802074 	movhi	r10,129
  80f370:	529bb904 	addi	r10,r10,28388
  80f374:	dc002915 	stw	r16,164(sp)
  80f378:	d9801b17 	ldw	r6,108(sp)
  80f37c:	da802415 	stw	r10,144(sp)
  80f380:	03c001c4 	movi	r15,7
  80f384:	da402515 	stw	r9,148(sp)
  80f388:	db802815 	stw	r14,160(sp)
  80f38c:	1821883a 	mov	r16,r3
  80f390:	00000506 	br	80f3a8 <___vfiprintf_internal_r+0x484>
  80f394:	31400084 	addi	r5,r6,2
  80f398:	42000204 	addi	r8,r8,8
  80f39c:	200d883a 	mov	r6,r4
  80f3a0:	843ffc04 	addi	r16,r16,-16
  80f3a4:	3c000d0e 	bge	r7,r16,80f3dc <___vfiprintf_internal_r+0x4b8>
  80f3a8:	10800404 	addi	r2,r2,16
  80f3ac:	31000044 	addi	r4,r6,1
  80f3b0:	45800015 	stw	r22,0(r8)
  80f3b4:	41c00115 	stw	r7,4(r8)
  80f3b8:	d8801c15 	stw	r2,112(sp)
  80f3bc:	d9001b15 	stw	r4,108(sp)
  80f3c0:	793ff40e 	bge	r15,r4,80f394 <__alt_mem_onchip_mem+0xff807394>
  80f3c4:	1001b51e 	bne	r2,zero,80fa9c <___vfiprintf_internal_r+0xb78>
  80f3c8:	843ffc04 	addi	r16,r16,-16
  80f3cc:	000d883a 	mov	r6,zero
  80f3d0:	01400044 	movi	r5,1
  80f3d4:	d811883a 	mov	r8,sp
  80f3d8:	3c3ff316 	blt	r7,r16,80f3a8 <__alt_mem_onchip_mem+0xff8073a8>
  80f3dc:	8007883a 	mov	r3,r16
  80f3e0:	da402517 	ldw	r9,148(sp)
  80f3e4:	db802817 	ldw	r14,160(sp)
  80f3e8:	dc002917 	ldw	r16,164(sp)
  80f3ec:	da802417 	ldw	r10,144(sp)
  80f3f0:	1885883a 	add	r2,r3,r2
  80f3f4:	40c00115 	stw	r3,4(r8)
  80f3f8:	42800015 	stw	r10,0(r8)
  80f3fc:	d8801c15 	stw	r2,112(sp)
  80f400:	d9401b15 	stw	r5,108(sp)
  80f404:	00c001c4 	movi	r3,7
  80f408:	19426016 	blt	r3,r5,80fd8c <___vfiprintf_internal_r+0xe68>
  80f40c:	d8c01d87 	ldb	r3,118(sp)
  80f410:	42000204 	addi	r8,r8,8
  80f414:	29000044 	addi	r4,r5,1
  80f418:	1801b31e 	bne	r3,zero,80fae8 <___vfiprintf_internal_r+0xbc4>
  80f41c:	7001c026 	beq	r14,zero,80fb20 <___vfiprintf_internal_r+0xbfc>
  80f420:	d8c01d04 	addi	r3,sp,116
  80f424:	10800084 	addi	r2,r2,2
  80f428:	40c00015 	stw	r3,0(r8)
  80f42c:	00c00084 	movi	r3,2
  80f430:	40c00115 	stw	r3,4(r8)
  80f434:	d8801c15 	stw	r2,112(sp)
  80f438:	d9001b15 	stw	r4,108(sp)
  80f43c:	00c001c4 	movi	r3,7
  80f440:	1902650e 	bge	r3,r4,80fdd8 <___vfiprintf_internal_r+0xeb4>
  80f444:	10029a1e 	bne	r2,zero,80feb0 <___vfiprintf_internal_r+0xf8c>
  80f448:	00c02004 	movi	r3,128
  80f44c:	01000044 	movi	r4,1
  80f450:	000b883a 	mov	r5,zero
  80f454:	d811883a 	mov	r8,sp
  80f458:	e0c1b31e 	bne	fp,r3,80fb28 <___vfiprintf_internal_r+0xc04>
  80f45c:	8cb9c83a 	sub	fp,r17,r18
  80f460:	0701b10e 	bge	zero,fp,80fb28 <___vfiprintf_internal_r+0xc04>
  80f464:	01c00404 	movi	r7,16
  80f468:	3f03890e 	bge	r7,fp,810290 <___vfiprintf_internal_r+0x136c>
  80f46c:	00c02074 	movhi	r3,129
  80f470:	18dbb504 	addi	r3,r3,28372
  80f474:	d8c02415 	stw	r3,144(sp)
  80f478:	8007883a 	mov	r3,r16
  80f47c:	034001c4 	movi	r13,7
  80f480:	e021883a 	mov	r16,fp
  80f484:	da402515 	stw	r9,148(sp)
  80f488:	1839883a 	mov	fp,r3
  80f48c:	00000506 	br	80f4a4 <___vfiprintf_internal_r+0x580>
  80f490:	29800084 	addi	r6,r5,2
  80f494:	42000204 	addi	r8,r8,8
  80f498:	180b883a 	mov	r5,r3
  80f49c:	843ffc04 	addi	r16,r16,-16
  80f4a0:	3c000d0e 	bge	r7,r16,80f4d8 <___vfiprintf_internal_r+0x5b4>
  80f4a4:	10800404 	addi	r2,r2,16
  80f4a8:	28c00044 	addi	r3,r5,1
  80f4ac:	45c00015 	stw	r23,0(r8)
  80f4b0:	41c00115 	stw	r7,4(r8)
  80f4b4:	d8801c15 	stw	r2,112(sp)
  80f4b8:	d8c01b15 	stw	r3,108(sp)
  80f4bc:	68fff40e 	bge	r13,r3,80f490 <__alt_mem_onchip_mem+0xff807490>
  80f4c0:	1002241e 	bne	r2,zero,80fd54 <___vfiprintf_internal_r+0xe30>
  80f4c4:	843ffc04 	addi	r16,r16,-16
  80f4c8:	01800044 	movi	r6,1
  80f4cc:	000b883a 	mov	r5,zero
  80f4d0:	d811883a 	mov	r8,sp
  80f4d4:	3c3ff316 	blt	r7,r16,80f4a4 <__alt_mem_onchip_mem+0xff8074a4>
  80f4d8:	da402517 	ldw	r9,148(sp)
  80f4dc:	e007883a 	mov	r3,fp
  80f4e0:	8039883a 	mov	fp,r16
  80f4e4:	1821883a 	mov	r16,r3
  80f4e8:	d8c02417 	ldw	r3,144(sp)
  80f4ec:	1705883a 	add	r2,r2,fp
  80f4f0:	47000115 	stw	fp,4(r8)
  80f4f4:	40c00015 	stw	r3,0(r8)
  80f4f8:	d8801c15 	stw	r2,112(sp)
  80f4fc:	d9801b15 	stw	r6,108(sp)
  80f500:	00c001c4 	movi	r3,7
  80f504:	19827616 	blt	r3,r6,80fee0 <___vfiprintf_internal_r+0xfbc>
  80f508:	4cf9c83a 	sub	fp,r9,r19
  80f50c:	42000204 	addi	r8,r8,8
  80f510:	31000044 	addi	r4,r6,1
  80f514:	300b883a 	mov	r5,r6
  80f518:	07018516 	blt	zero,fp,80fb30 <___vfiprintf_internal_r+0xc0c>
  80f51c:	9885883a 	add	r2,r19,r2
  80f520:	45400015 	stw	r21,0(r8)
  80f524:	44c00115 	stw	r19,4(r8)
  80f528:	d8801c15 	stw	r2,112(sp)
  80f52c:	d9001b15 	stw	r4,108(sp)
  80f530:	00c001c4 	movi	r3,7
  80f534:	1901dd0e 	bge	r3,r4,80fcac <___vfiprintf_internal_r+0xd88>
  80f538:	1002401e 	bne	r2,zero,80fe3c <___vfiprintf_internal_r+0xf18>
  80f53c:	d8001b15 	stw	zero,108(sp)
  80f540:	a2c0010c 	andi	r11,r20,4
  80f544:	58000226 	beq	r11,zero,80f550 <___vfiprintf_internal_r+0x62c>
  80f548:	8ca7c83a 	sub	r19,r17,r18
  80f54c:	04c2f216 	blt	zero,r19,810118 <___vfiprintf_internal_r+0x11f4>
  80f550:	8c80010e 	bge	r17,r18,80f558 <___vfiprintf_internal_r+0x634>
  80f554:	9023883a 	mov	r17,r18
  80f558:	da802317 	ldw	r10,140(sp)
  80f55c:	5455883a 	add	r10,r10,r17
  80f560:	da802315 	stw	r10,140(sp)
  80f564:	d8001b15 	stw	zero,108(sp)
  80f568:	d811883a 	mov	r8,sp
  80f56c:	003ea206 	br	80eff8 <__alt_mem_onchip_mem+0xff806ff8>
  80f570:	a5000814 	ori	r20,r20,32
  80f574:	80c00007 	ldb	r3,0(r16)
  80f578:	003ec906 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80f57c:	80c00007 	ldb	r3,0(r16)
  80f580:	1b030926 	beq	r3,r12,8101a8 <___vfiprintf_internal_r+0x1284>
  80f584:	a5000414 	ori	r20,r20,16
  80f588:	003ec506 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80f58c:	21003fcc 	andi	r4,r4,255
  80f590:	20035e1e 	bne	r4,zero,81030c <___vfiprintf_internal_r+0x13e8>
  80f594:	a080080c 	andi	r2,r20,32
  80f598:	1002a526 	beq	r2,zero,810030 <___vfiprintf_internal_r+0x110c>
  80f59c:	da802217 	ldw	r10,136(sp)
  80f5a0:	50800017 	ldw	r2,0(r10)
  80f5a4:	da802317 	ldw	r10,140(sp)
  80f5a8:	5007d7fa 	srai	r3,r10,31
  80f5ac:	da802217 	ldw	r10,136(sp)
  80f5b0:	10c00115 	stw	r3,4(r2)
  80f5b4:	52800104 	addi	r10,r10,4
  80f5b8:	da802215 	stw	r10,136(sp)
  80f5bc:	da802317 	ldw	r10,140(sp)
  80f5c0:	12800015 	stw	r10,0(r2)
  80f5c4:	003e8c06 	br	80eff8 <__alt_mem_onchip_mem+0xff806ff8>
  80f5c8:	21003fcc 	andi	r4,r4,255
  80f5cc:	2003511e 	bne	r4,zero,810314 <___vfiprintf_internal_r+0x13f0>
  80f5d0:	a080080c 	andi	r2,r20,32
  80f5d4:	1000a126 	beq	r2,zero,80f85c <___vfiprintf_internal_r+0x938>
  80f5d8:	da802217 	ldw	r10,136(sp)
  80f5dc:	d8001d85 	stb	zero,118(sp)
  80f5e0:	50800204 	addi	r2,r10,8
  80f5e4:	54800017 	ldw	r18,0(r10)
  80f5e8:	54c00117 	ldw	r19,4(r10)
  80f5ec:	4802b416 	blt	r9,zero,8100c0 <___vfiprintf_internal_r+0x119c>
  80f5f0:	013fdfc4 	movi	r4,-129
  80f5f4:	94c6b03a 	or	r3,r18,r19
  80f5f8:	d8802215 	stw	r2,136(sp)
  80f5fc:	a128703a 	and	r20,r20,r4
  80f600:	1800a226 	beq	r3,zero,80f88c <___vfiprintf_internal_r+0x968>
  80f604:	0039883a 	mov	fp,zero
  80f608:	dd401a04 	addi	r21,sp,104
  80f60c:	9006d0fa 	srli	r3,r18,3
  80f610:	9808977a 	slli	r4,r19,29
  80f614:	9826d0fa 	srli	r19,r19,3
  80f618:	948001cc 	andi	r18,r18,7
  80f61c:	90800c04 	addi	r2,r18,48
  80f620:	ad7fffc4 	addi	r21,r21,-1
  80f624:	20e4b03a 	or	r18,r4,r3
  80f628:	a8800005 	stb	r2,0(r21)
  80f62c:	94c6b03a 	or	r3,r18,r19
  80f630:	183ff61e 	bne	r3,zero,80f60c <__alt_mem_onchip_mem+0xff80760c>
  80f634:	a0c0004c 	andi	r3,r20,1
  80f638:	18005926 	beq	r3,zero,80f7a0 <___vfiprintf_internal_r+0x87c>
  80f63c:	10803fcc 	andi	r2,r2,255
  80f640:	1080201c 	xori	r2,r2,128
  80f644:	10bfe004 	addi	r2,r2,-128
  80f648:	00c00c04 	movi	r3,48
  80f64c:	10c05426 	beq	r2,r3,80f7a0 <___vfiprintf_internal_r+0x87c>
  80f650:	da801e17 	ldw	r10,120(sp)
  80f654:	a8bfffc4 	addi	r2,r21,-1
  80f658:	a8ffffc5 	stb	r3,-1(r21)
  80f65c:	50a7c83a 	sub	r19,r10,r2
  80f660:	102b883a 	mov	r21,r2
  80f664:	003f2f06 	br	80f324 <__alt_mem_onchip_mem+0xff807324>
  80f668:	21003fcc 	andi	r4,r4,255
  80f66c:	2003421e 	bne	r4,zero,810378 <___vfiprintf_internal_r+0x1454>
  80f670:	00802074 	movhi	r2,129
  80f674:	109b5504 	addi	r2,r2,27988
  80f678:	d8802615 	stw	r2,152(sp)
  80f67c:	a080080c 	andi	r2,r20,32
  80f680:	1000aa26 	beq	r2,zero,80f92c <___vfiprintf_internal_r+0xa08>
  80f684:	da802217 	ldw	r10,136(sp)
  80f688:	54800017 	ldw	r18,0(r10)
  80f68c:	54c00117 	ldw	r19,4(r10)
  80f690:	52800204 	addi	r10,r10,8
  80f694:	da802215 	stw	r10,136(sp)
  80f698:	a080004c 	andi	r2,r20,1
  80f69c:	1001d226 	beq	r2,zero,80fde8 <___vfiprintf_internal_r+0xec4>
  80f6a0:	94c4b03a 	or	r2,r18,r19
  80f6a4:	1002351e 	bne	r2,zero,80ff7c <___vfiprintf_internal_r+0x1058>
  80f6a8:	d8001d85 	stb	zero,118(sp)
  80f6ac:	48022216 	blt	r9,zero,80ff38 <___vfiprintf_internal_r+0x1014>
  80f6b0:	00bfdfc4 	movi	r2,-129
  80f6b4:	a0a8703a 	and	r20,r20,r2
  80f6b8:	003f1506 	br	80f310 <__alt_mem_onchip_mem+0xff807310>
  80f6bc:	da802217 	ldw	r10,136(sp)
  80f6c0:	04800044 	movi	r18,1
  80f6c4:	d8001d85 	stb	zero,118(sp)
  80f6c8:	50800017 	ldw	r2,0(r10)
  80f6cc:	52800104 	addi	r10,r10,4
  80f6d0:	da802215 	stw	r10,136(sp)
  80f6d4:	d8801005 	stb	r2,64(sp)
  80f6d8:	9027883a 	mov	r19,r18
  80f6dc:	dd401004 	addi	r21,sp,64
  80f6e0:	0013883a 	mov	r9,zero
  80f6e4:	003f1706 	br	80f344 <__alt_mem_onchip_mem+0xff807344>
  80f6e8:	21003fcc 	andi	r4,r4,255
  80f6ec:	2003201e 	bne	r4,zero,810370 <___vfiprintf_internal_r+0x144c>
  80f6f0:	a080080c 	andi	r2,r20,32
  80f6f4:	10004b26 	beq	r2,zero,80f824 <___vfiprintf_internal_r+0x900>
  80f6f8:	da802217 	ldw	r10,136(sp)
  80f6fc:	50800117 	ldw	r2,4(r10)
  80f700:	54800017 	ldw	r18,0(r10)
  80f704:	52800204 	addi	r10,r10,8
  80f708:	da802215 	stw	r10,136(sp)
  80f70c:	1027883a 	mov	r19,r2
  80f710:	10022c16 	blt	r2,zero,80ffc4 <___vfiprintf_internal_r+0x10a0>
  80f714:	df001d83 	ldbu	fp,118(sp)
  80f718:	48007216 	blt	r9,zero,80f8e4 <___vfiprintf_internal_r+0x9c0>
  80f71c:	00ffdfc4 	movi	r3,-129
  80f720:	94c4b03a 	or	r2,r18,r19
  80f724:	a0e8703a 	and	r20,r20,r3
  80f728:	1000cc26 	beq	r2,zero,80fa5c <___vfiprintf_internal_r+0xb38>
  80f72c:	98021026 	beq	r19,zero,80ff70 <___vfiprintf_internal_r+0x104c>
  80f730:	dc402415 	stw	r17,144(sp)
  80f734:	dc002515 	stw	r16,148(sp)
  80f738:	9823883a 	mov	r17,r19
  80f73c:	9021883a 	mov	r16,r18
  80f740:	dd401a04 	addi	r21,sp,104
  80f744:	4825883a 	mov	r18,r9
  80f748:	4027883a 	mov	r19,r8
  80f74c:	8009883a 	mov	r4,r16
  80f750:	880b883a 	mov	r5,r17
  80f754:	01800284 	movi	r6,10
  80f758:	000f883a 	mov	r7,zero
  80f75c:	08110e00 	call	8110e0 <__umoddi3>
  80f760:	10800c04 	addi	r2,r2,48
  80f764:	ad7fffc4 	addi	r21,r21,-1
  80f768:	8009883a 	mov	r4,r16
  80f76c:	880b883a 	mov	r5,r17
  80f770:	a8800005 	stb	r2,0(r21)
  80f774:	01800284 	movi	r6,10
  80f778:	000f883a 	mov	r7,zero
  80f77c:	0810b680 	call	810b68 <__udivdi3>
  80f780:	1021883a 	mov	r16,r2
  80f784:	10c4b03a 	or	r2,r2,r3
  80f788:	1823883a 	mov	r17,r3
  80f78c:	103fef1e 	bne	r2,zero,80f74c <__alt_mem_onchip_mem+0xff80774c>
  80f790:	dc402417 	ldw	r17,144(sp)
  80f794:	dc002517 	ldw	r16,148(sp)
  80f798:	9013883a 	mov	r9,r18
  80f79c:	9811883a 	mov	r8,r19
  80f7a0:	da801e17 	ldw	r10,120(sp)
  80f7a4:	5567c83a 	sub	r19,r10,r21
  80f7a8:	003ede06 	br	80f324 <__alt_mem_onchip_mem+0xff807324>
  80f7ac:	38803fcc 	andi	r2,r7,255
  80f7b0:	1080201c 	xori	r2,r2,128
  80f7b4:	10bfe004 	addi	r2,r2,-128
  80f7b8:	1002371e 	bne	r2,zero,810098 <___vfiprintf_internal_r+0x1174>
  80f7bc:	01000044 	movi	r4,1
  80f7c0:	01c00804 	movi	r7,32
  80f7c4:	80c00007 	ldb	r3,0(r16)
  80f7c8:	003e3506 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80f7cc:	a5000054 	ori	r20,r20,1
  80f7d0:	80c00007 	ldb	r3,0(r16)
  80f7d4:	003e3206 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80f7d8:	a5002014 	ori	r20,r20,128
  80f7dc:	80c00007 	ldb	r3,0(r16)
  80f7e0:	003e2f06 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80f7e4:	8015883a 	mov	r10,r16
  80f7e8:	0023883a 	mov	r17,zero
  80f7ec:	18bff404 	addi	r2,r3,-48
  80f7f0:	50c00007 	ldb	r3,0(r10)
  80f7f4:	8c4002a4 	muli	r17,r17,10
  80f7f8:	84000044 	addi	r16,r16,1
  80f7fc:	8015883a 	mov	r10,r16
  80f800:	1463883a 	add	r17,r2,r17
  80f804:	18bff404 	addi	r2,r3,-48
  80f808:	30bff92e 	bgeu	r6,r2,80f7f0 <__alt_mem_onchip_mem+0xff8077f0>
  80f80c:	003e2506 	br	80f0a4 <__alt_mem_onchip_mem+0xff8070a4>
  80f810:	21003fcc 	andi	r4,r4,255
  80f814:	2002d41e 	bne	r4,zero,810368 <___vfiprintf_internal_r+0x1444>
  80f818:	a5000414 	ori	r20,r20,16
  80f81c:	a080080c 	andi	r2,r20,32
  80f820:	103fb51e 	bne	r2,zero,80f6f8 <__alt_mem_onchip_mem+0xff8076f8>
  80f824:	a080040c 	andi	r2,r20,16
  80f828:	1001f826 	beq	r2,zero,81000c <___vfiprintf_internal_r+0x10e8>
  80f82c:	da802217 	ldw	r10,136(sp)
  80f830:	54800017 	ldw	r18,0(r10)
  80f834:	52800104 	addi	r10,r10,4
  80f838:	da802215 	stw	r10,136(sp)
  80f83c:	9027d7fa 	srai	r19,r18,31
  80f840:	9805883a 	mov	r2,r19
  80f844:	003fb206 	br	80f710 <__alt_mem_onchip_mem+0xff807710>
  80f848:	21003fcc 	andi	r4,r4,255
  80f84c:	2002c41e 	bne	r4,zero,810360 <___vfiprintf_internal_r+0x143c>
  80f850:	a5000414 	ori	r20,r20,16
  80f854:	a080080c 	andi	r2,r20,32
  80f858:	103f5f1e 	bne	r2,zero,80f5d8 <__alt_mem_onchip_mem+0xff8075d8>
  80f85c:	a080040c 	andi	r2,r20,16
  80f860:	10020f26 	beq	r2,zero,8100a0 <___vfiprintf_internal_r+0x117c>
  80f864:	da802217 	ldw	r10,136(sp)
  80f868:	d8001d85 	stb	zero,118(sp)
  80f86c:	0027883a 	mov	r19,zero
  80f870:	50800104 	addi	r2,r10,4
  80f874:	54800017 	ldw	r18,0(r10)
  80f878:	48021116 	blt	r9,zero,8100c0 <___vfiprintf_internal_r+0x119c>
  80f87c:	00ffdfc4 	movi	r3,-129
  80f880:	d8802215 	stw	r2,136(sp)
  80f884:	a0e8703a 	and	r20,r20,r3
  80f888:	903f5e1e 	bne	r18,zero,80f604 <__alt_mem_onchip_mem+0xff807604>
  80f88c:	0039883a 	mov	fp,zero
  80f890:	4802a626 	beq	r9,zero,81032c <___vfiprintf_internal_r+0x1408>
  80f894:	0025883a 	mov	r18,zero
  80f898:	0027883a 	mov	r19,zero
  80f89c:	003f5a06 	br	80f608 <__alt_mem_onchip_mem+0xff807608>
  80f8a0:	21003fcc 	andi	r4,r4,255
  80f8a4:	20029f1e 	bne	r4,zero,810324 <___vfiprintf_internal_r+0x1400>
  80f8a8:	a5000414 	ori	r20,r20,16
  80f8ac:	a080080c 	andi	r2,r20,32
  80f8b0:	10005e1e 	bne	r2,zero,80fa2c <___vfiprintf_internal_r+0xb08>
  80f8b4:	a080040c 	andi	r2,r20,16
  80f8b8:	1001a21e 	bne	r2,zero,80ff44 <___vfiprintf_internal_r+0x1020>
  80f8bc:	a080100c 	andi	r2,r20,64
  80f8c0:	d8001d85 	stb	zero,118(sp)
  80f8c4:	da802217 	ldw	r10,136(sp)
  80f8c8:	1002231e 	bne	r2,zero,810158 <___vfiprintf_internal_r+0x1234>
  80f8cc:	50800104 	addi	r2,r10,4
  80f8d0:	54800017 	ldw	r18,0(r10)
  80f8d4:	0027883a 	mov	r19,zero
  80f8d8:	4801a00e 	bge	r9,zero,80ff5c <___vfiprintf_internal_r+0x1038>
  80f8dc:	d8802215 	stw	r2,136(sp)
  80f8e0:	0039883a 	mov	fp,zero
  80f8e4:	94c4b03a 	or	r2,r18,r19
  80f8e8:	103f901e 	bne	r2,zero,80f72c <__alt_mem_onchip_mem+0xff80772c>
  80f8ec:	00800044 	movi	r2,1
  80f8f0:	10803fcc 	andi	r2,r2,255
  80f8f4:	00c00044 	movi	r3,1
  80f8f8:	10c05926 	beq	r2,r3,80fa60 <___vfiprintf_internal_r+0xb3c>
  80f8fc:	00c00084 	movi	r3,2
  80f900:	10ffe41e 	bne	r2,r3,80f894 <__alt_mem_onchip_mem+0xff807894>
  80f904:	0025883a 	mov	r18,zero
  80f908:	0027883a 	mov	r19,zero
  80f90c:	00013d06 	br	80fe04 <___vfiprintf_internal_r+0xee0>
  80f910:	21003fcc 	andi	r4,r4,255
  80f914:	2002811e 	bne	r4,zero,81031c <___vfiprintf_internal_r+0x13f8>
  80f918:	00802074 	movhi	r2,129
  80f91c:	109b5004 	addi	r2,r2,27968
  80f920:	d8802615 	stw	r2,152(sp)
  80f924:	a080080c 	andi	r2,r20,32
  80f928:	103f561e 	bne	r2,zero,80f684 <__alt_mem_onchip_mem+0xff807684>
  80f92c:	a080040c 	andi	r2,r20,16
  80f930:	1001d126 	beq	r2,zero,810078 <___vfiprintf_internal_r+0x1154>
  80f934:	da802217 	ldw	r10,136(sp)
  80f938:	0027883a 	mov	r19,zero
  80f93c:	54800017 	ldw	r18,0(r10)
  80f940:	52800104 	addi	r10,r10,4
  80f944:	da802215 	stw	r10,136(sp)
  80f948:	003f5306 	br	80f698 <__alt_mem_onchip_mem+0xff807698>
  80f94c:	da802217 	ldw	r10,136(sp)
  80f950:	d8001d85 	stb	zero,118(sp)
  80f954:	55400017 	ldw	r21,0(r10)
  80f958:	50c00104 	addi	r3,r10,4
  80f95c:	a8024226 	beq	r21,zero,810268 <___vfiprintf_internal_r+0x1344>
  80f960:	48021816 	blt	r9,zero,8101c4 <___vfiprintf_internal_r+0x12a0>
  80f964:	480d883a 	mov	r6,r9
  80f968:	000b883a 	mov	r5,zero
  80f96c:	a809883a 	mov	r4,r21
  80f970:	d8c02a15 	stw	r3,168(sp)
  80f974:	da002b15 	stw	r8,172(sp)
  80f978:	da402c15 	stw	r9,176(sp)
  80f97c:	080d3780 	call	80d378 <memchr>
  80f980:	d8c02a17 	ldw	r3,168(sp)
  80f984:	da002b17 	ldw	r8,172(sp)
  80f988:	da402c17 	ldw	r9,176(sp)
  80f98c:	10024826 	beq	r2,zero,8102b0 <___vfiprintf_internal_r+0x138c>
  80f990:	1567c83a 	sub	r19,r2,r21
  80f994:	df001d83 	ldbu	fp,118(sp)
  80f998:	d8c02215 	stw	r3,136(sp)
  80f99c:	0013883a 	mov	r9,zero
  80f9a0:	003e6006 	br	80f324 <__alt_mem_onchip_mem+0xff807324>
  80f9a4:	21003fcc 	andi	r4,r4,255
  80f9a8:	203fc026 	beq	r4,zero,80f8ac <__alt_mem_onchip_mem+0xff8078ac>
  80f9ac:	d9c01d85 	stb	r7,118(sp)
  80f9b0:	003fbe06 	br	80f8ac <__alt_mem_onchip_mem+0xff8078ac>
  80f9b4:	da802217 	ldw	r10,136(sp)
  80f9b8:	54400017 	ldw	r17,0(r10)
  80f9bc:	50800104 	addi	r2,r10,4
  80f9c0:	883e3b16 	blt	r17,zero,80f2b0 <__alt_mem_onchip_mem+0xff8072b0>
  80f9c4:	d8802215 	stw	r2,136(sp)
  80f9c8:	80c00007 	ldb	r3,0(r16)
  80f9cc:	003db406 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80f9d0:	01000044 	movi	r4,1
  80f9d4:	01c00ac4 	movi	r7,43
  80f9d8:	80c00007 	ldb	r3,0(r16)
  80f9dc:	003db006 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80f9e0:	80c00007 	ldb	r3,0(r16)
  80f9e4:	82800044 	addi	r10,r16,1
  80f9e8:	1b423c26 	beq	r3,r13,8102dc <___vfiprintf_internal_r+0x13b8>
  80f9ec:	18bff404 	addi	r2,r3,-48
  80f9f0:	0013883a 	mov	r9,zero
  80f9f4:	30822b36 	bltu	r6,r2,8102a4 <___vfiprintf_internal_r+0x1380>
  80f9f8:	50c00007 	ldb	r3,0(r10)
  80f9fc:	4a4002a4 	muli	r9,r9,10
  80fa00:	54000044 	addi	r16,r10,1
  80fa04:	8015883a 	mov	r10,r16
  80fa08:	4893883a 	add	r9,r9,r2
  80fa0c:	18bff404 	addi	r2,r3,-48
  80fa10:	30bff92e 	bgeu	r6,r2,80f9f8 <__alt_mem_onchip_mem+0xff8079f8>
  80fa14:	483da30e 	bge	r9,zero,80f0a4 <__alt_mem_onchip_mem+0xff8070a4>
  80fa18:	027fffc4 	movi	r9,-1
  80fa1c:	003da106 	br	80f0a4 <__alt_mem_onchip_mem+0xff8070a4>
  80fa20:	a5001014 	ori	r20,r20,64
  80fa24:	80c00007 	ldb	r3,0(r16)
  80fa28:	003d9d06 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80fa2c:	da802217 	ldw	r10,136(sp)
  80fa30:	d8001d85 	stb	zero,118(sp)
  80fa34:	50c00204 	addi	r3,r10,8
  80fa38:	54800017 	ldw	r18,0(r10)
  80fa3c:	54c00117 	ldw	r19,4(r10)
  80fa40:	4801ca16 	blt	r9,zero,81016c <___vfiprintf_internal_r+0x1248>
  80fa44:	013fdfc4 	movi	r4,-129
  80fa48:	94c4b03a 	or	r2,r18,r19
  80fa4c:	d8c02215 	stw	r3,136(sp)
  80fa50:	a128703a 	and	r20,r20,r4
  80fa54:	0039883a 	mov	fp,zero
  80fa58:	103f341e 	bne	r2,zero,80f72c <__alt_mem_onchip_mem+0xff80772c>
  80fa5c:	483e2e26 	beq	r9,zero,80f318 <__alt_mem_onchip_mem+0xff807318>
  80fa60:	0025883a 	mov	r18,zero
  80fa64:	94800c04 	addi	r18,r18,48
  80fa68:	dc8019c5 	stb	r18,103(sp)
  80fa6c:	dcc02717 	ldw	r19,156(sp)
  80fa70:	dd4019c4 	addi	r21,sp,103
  80fa74:	003e2b06 	br	80f324 <__alt_mem_onchip_mem+0xff807324>
  80fa78:	21003fcc 	andi	r4,r4,255
  80fa7c:	2002361e 	bne	r4,zero,810358 <___vfiprintf_internal_r+0x1434>
  80fa80:	1801c126 	beq	r3,zero,810188 <___vfiprintf_internal_r+0x1264>
  80fa84:	04800044 	movi	r18,1
  80fa88:	d8c01005 	stb	r3,64(sp)
  80fa8c:	d8001d85 	stb	zero,118(sp)
  80fa90:	9027883a 	mov	r19,r18
  80fa94:	dd401004 	addi	r21,sp,64
  80fa98:	003f1106 	br	80f6e0 <__alt_mem_onchip_mem+0xff8076e0>
  80fa9c:	d9402117 	ldw	r5,132(sp)
  80faa0:	d9002017 	ldw	r4,128(sp)
  80faa4:	d9801a04 	addi	r6,sp,104
  80faa8:	d9c02b15 	stw	r7,172(sp)
  80faac:	dbc02a15 	stw	r15,168(sp)
  80fab0:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fab4:	d9c02b17 	ldw	r7,172(sp)
  80fab8:	dbc02a17 	ldw	r15,168(sp)
  80fabc:	10006d1e 	bne	r2,zero,80fc74 <___vfiprintf_internal_r+0xd50>
  80fac0:	d9801b17 	ldw	r6,108(sp)
  80fac4:	d8801c17 	ldw	r2,112(sp)
  80fac8:	d811883a 	mov	r8,sp
  80facc:	31400044 	addi	r5,r6,1
  80fad0:	003e3306 	br	80f3a0 <__alt_mem_onchip_mem+0xff8073a0>
  80fad4:	d9401b17 	ldw	r5,108(sp)
  80fad8:	d8801c17 	ldw	r2,112(sp)
  80fadc:	29000044 	addi	r4,r5,1
  80fae0:	d8c01d87 	ldb	r3,118(sp)
  80fae4:	183e4d26 	beq	r3,zero,80f41c <__alt_mem_onchip_mem+0xff80741c>
  80fae8:	00c00044 	movi	r3,1
  80faec:	d9401d84 	addi	r5,sp,118
  80faf0:	10c5883a 	add	r2,r2,r3
  80faf4:	41400015 	stw	r5,0(r8)
  80faf8:	40c00115 	stw	r3,4(r8)
  80fafc:	d8801c15 	stw	r2,112(sp)
  80fb00:	d9001b15 	stw	r4,108(sp)
  80fb04:	014001c4 	movi	r5,7
  80fb08:	2900a90e 	bge	r5,r4,80fdb0 <___vfiprintf_internal_r+0xe8c>
  80fb0c:	1000da1e 	bne	r2,zero,80fe78 <___vfiprintf_internal_r+0xf54>
  80fb10:	7000ab1e 	bne	r14,zero,80fdc0 <___vfiprintf_internal_r+0xe9c>
  80fb14:	000b883a 	mov	r5,zero
  80fb18:	1809883a 	mov	r4,r3
  80fb1c:	d811883a 	mov	r8,sp
  80fb20:	00c02004 	movi	r3,128
  80fb24:	e0fe4d26 	beq	fp,r3,80f45c <__alt_mem_onchip_mem+0xff80745c>
  80fb28:	4cf9c83a 	sub	fp,r9,r19
  80fb2c:	073e7b0e 	bge	zero,fp,80f51c <__alt_mem_onchip_mem+0xff80751c>
  80fb30:	01c00404 	movi	r7,16
  80fb34:	3f01900e 	bge	r7,fp,810178 <___vfiprintf_internal_r+0x1254>
  80fb38:	00c02074 	movhi	r3,129
  80fb3c:	18dbb504 	addi	r3,r3,28372
  80fb40:	d8c02415 	stw	r3,144(sp)
  80fb44:	034001c4 	movi	r13,7
  80fb48:	00000506 	br	80fb60 <___vfiprintf_internal_r+0xc3c>
  80fb4c:	29000084 	addi	r4,r5,2
  80fb50:	42000204 	addi	r8,r8,8
  80fb54:	180b883a 	mov	r5,r3
  80fb58:	e73ffc04 	addi	fp,fp,-16
  80fb5c:	3f000d0e 	bge	r7,fp,80fb94 <___vfiprintf_internal_r+0xc70>
  80fb60:	10800404 	addi	r2,r2,16
  80fb64:	28c00044 	addi	r3,r5,1
  80fb68:	45c00015 	stw	r23,0(r8)
  80fb6c:	41c00115 	stw	r7,4(r8)
  80fb70:	d8801c15 	stw	r2,112(sp)
  80fb74:	d8c01b15 	stw	r3,108(sp)
  80fb78:	68fff40e 	bge	r13,r3,80fb4c <__alt_mem_onchip_mem+0xff807b4c>
  80fb7c:	1000101e 	bne	r2,zero,80fbc0 <___vfiprintf_internal_r+0xc9c>
  80fb80:	e73ffc04 	addi	fp,fp,-16
  80fb84:	01000044 	movi	r4,1
  80fb88:	000b883a 	mov	r5,zero
  80fb8c:	d811883a 	mov	r8,sp
  80fb90:	3f3ff316 	blt	r7,fp,80fb60 <__alt_mem_onchip_mem+0xff807b60>
  80fb94:	da802417 	ldw	r10,144(sp)
  80fb98:	1705883a 	add	r2,r2,fp
  80fb9c:	47000115 	stw	fp,4(r8)
  80fba0:	42800015 	stw	r10,0(r8)
  80fba4:	d8801c15 	stw	r2,112(sp)
  80fba8:	d9001b15 	stw	r4,108(sp)
  80fbac:	00c001c4 	movi	r3,7
  80fbb0:	19003616 	blt	r3,r4,80fc8c <___vfiprintf_internal_r+0xd68>
  80fbb4:	42000204 	addi	r8,r8,8
  80fbb8:	21000044 	addi	r4,r4,1
  80fbbc:	003e5706 	br	80f51c <__alt_mem_onchip_mem+0xff80751c>
  80fbc0:	d9402117 	ldw	r5,132(sp)
  80fbc4:	d9002017 	ldw	r4,128(sp)
  80fbc8:	d9801a04 	addi	r6,sp,104
  80fbcc:	d9c02b15 	stw	r7,172(sp)
  80fbd0:	db402a15 	stw	r13,168(sp)
  80fbd4:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fbd8:	d9c02b17 	ldw	r7,172(sp)
  80fbdc:	db402a17 	ldw	r13,168(sp)
  80fbe0:	1000241e 	bne	r2,zero,80fc74 <___vfiprintf_internal_r+0xd50>
  80fbe4:	d9401b17 	ldw	r5,108(sp)
  80fbe8:	d8801c17 	ldw	r2,112(sp)
  80fbec:	d811883a 	mov	r8,sp
  80fbf0:	29000044 	addi	r4,r5,1
  80fbf4:	003fd806 	br	80fb58 <__alt_mem_onchip_mem+0xff807b58>
  80fbf8:	d9401b17 	ldw	r5,108(sp)
  80fbfc:	00c02074 	movhi	r3,129
  80fc00:	18dbb904 	addi	r3,r3,28388
  80fc04:	d8c02415 	stw	r3,144(sp)
  80fc08:	29400044 	addi	r5,r5,1
  80fc0c:	d8c02417 	ldw	r3,144(sp)
  80fc10:	14c5883a 	add	r2,r2,r19
  80fc14:	44c00115 	stw	r19,4(r8)
  80fc18:	40c00015 	stw	r3,0(r8)
  80fc1c:	d8801c15 	stw	r2,112(sp)
  80fc20:	d9401b15 	stw	r5,108(sp)
  80fc24:	00c001c4 	movi	r3,7
  80fc28:	1940070e 	bge	r3,r5,80fc48 <___vfiprintf_internal_r+0xd24>
  80fc2c:	103e4826 	beq	r2,zero,80f550 <__alt_mem_onchip_mem+0xff807550>
  80fc30:	d9402117 	ldw	r5,132(sp)
  80fc34:	d9002017 	ldw	r4,128(sp)
  80fc38:	d9801a04 	addi	r6,sp,104
  80fc3c:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fc40:	10000c1e 	bne	r2,zero,80fc74 <___vfiprintf_internal_r+0xd50>
  80fc44:	d8801c17 	ldw	r2,112(sp)
  80fc48:	8c80010e 	bge	r17,r18,80fc50 <___vfiprintf_internal_r+0xd2c>
  80fc4c:	9023883a 	mov	r17,r18
  80fc50:	da802317 	ldw	r10,140(sp)
  80fc54:	5455883a 	add	r10,r10,r17
  80fc58:	da802315 	stw	r10,140(sp)
  80fc5c:	103e4126 	beq	r2,zero,80f564 <__alt_mem_onchip_mem+0xff807564>
  80fc60:	d9402117 	ldw	r5,132(sp)
  80fc64:	d9002017 	ldw	r4,128(sp)
  80fc68:	d9801a04 	addi	r6,sp,104
  80fc6c:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fc70:	103e3c26 	beq	r2,zero,80f564 <__alt_mem_onchip_mem+0xff807564>
  80fc74:	dd002117 	ldw	r20,132(sp)
  80fc78:	a080030b 	ldhu	r2,12(r20)
  80fc7c:	1080100c 	andi	r2,r2,64
  80fc80:	1001231e 	bne	r2,zero,810110 <___vfiprintf_internal_r+0x11ec>
  80fc84:	d8802317 	ldw	r2,140(sp)
  80fc88:	003d7b06 	br	80f278 <__alt_mem_onchip_mem+0xff807278>
  80fc8c:	1000991e 	bne	r2,zero,80fef4 <___vfiprintf_internal_r+0xfd0>
  80fc90:	00c00044 	movi	r3,1
  80fc94:	9805883a 	mov	r2,r19
  80fc98:	dd400015 	stw	r21,0(sp)
  80fc9c:	dcc00115 	stw	r19,4(sp)
  80fca0:	dcc01c15 	stw	r19,112(sp)
  80fca4:	d8c01b15 	stw	r3,108(sp)
  80fca8:	d811883a 	mov	r8,sp
  80fcac:	42000204 	addi	r8,r8,8
  80fcb0:	a2c0010c 	andi	r11,r20,4
  80fcb4:	583fe426 	beq	r11,zero,80fc48 <__alt_mem_onchip_mem+0xff807c48>
  80fcb8:	8ca7c83a 	sub	r19,r17,r18
  80fcbc:	04ffe20e 	bge	zero,r19,80fc48 <__alt_mem_onchip_mem+0xff807c48>
  80fcc0:	01c00404 	movi	r7,16
  80fcc4:	3cffcc0e 	bge	r7,r19,80fbf8 <__alt_mem_onchip_mem+0xff807bf8>
  80fcc8:	02802074 	movhi	r10,129
  80fccc:	529bb904 	addi	r10,r10,28388
  80fcd0:	d9001b17 	ldw	r4,108(sp)
  80fcd4:	da802415 	stw	r10,144(sp)
  80fcd8:	382b883a 	mov	r21,r7
  80fcdc:	050001c4 	movi	r20,7
  80fce0:	df002017 	ldw	fp,128(sp)
  80fce4:	00000506 	br	80fcfc <___vfiprintf_internal_r+0xdd8>
  80fce8:	21400084 	addi	r5,r4,2
  80fcec:	42000204 	addi	r8,r8,8
  80fcf0:	1809883a 	mov	r4,r3
  80fcf4:	9cfffc04 	addi	r19,r19,-16
  80fcf8:	acffc40e 	bge	r21,r19,80fc0c <__alt_mem_onchip_mem+0xff807c0c>
  80fcfc:	10800404 	addi	r2,r2,16
  80fd00:	20c00044 	addi	r3,r4,1
  80fd04:	45800015 	stw	r22,0(r8)
  80fd08:	45400115 	stw	r21,4(r8)
  80fd0c:	d8801c15 	stw	r2,112(sp)
  80fd10:	d8c01b15 	stw	r3,108(sp)
  80fd14:	a0fff40e 	bge	r20,r3,80fce8 <__alt_mem_onchip_mem+0xff807ce8>
  80fd18:	1000041e 	bne	r2,zero,80fd2c <___vfiprintf_internal_r+0xe08>
  80fd1c:	01400044 	movi	r5,1
  80fd20:	0009883a 	mov	r4,zero
  80fd24:	d811883a 	mov	r8,sp
  80fd28:	003ff206 	br	80fcf4 <__alt_mem_onchip_mem+0xff807cf4>
  80fd2c:	d9402117 	ldw	r5,132(sp)
  80fd30:	d9801a04 	addi	r6,sp,104
  80fd34:	e009883a 	mov	r4,fp
  80fd38:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fd3c:	103fcd1e 	bne	r2,zero,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  80fd40:	d9001b17 	ldw	r4,108(sp)
  80fd44:	d8801c17 	ldw	r2,112(sp)
  80fd48:	d811883a 	mov	r8,sp
  80fd4c:	21400044 	addi	r5,r4,1
  80fd50:	003fe806 	br	80fcf4 <__alt_mem_onchip_mem+0xff807cf4>
  80fd54:	d9402117 	ldw	r5,132(sp)
  80fd58:	d9002017 	ldw	r4,128(sp)
  80fd5c:	d9801a04 	addi	r6,sp,104
  80fd60:	d9c02b15 	stw	r7,172(sp)
  80fd64:	db402a15 	stw	r13,168(sp)
  80fd68:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fd6c:	d9c02b17 	ldw	r7,172(sp)
  80fd70:	db402a17 	ldw	r13,168(sp)
  80fd74:	103fbf1e 	bne	r2,zero,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  80fd78:	d9401b17 	ldw	r5,108(sp)
  80fd7c:	d8801c17 	ldw	r2,112(sp)
  80fd80:	d811883a 	mov	r8,sp
  80fd84:	29800044 	addi	r6,r5,1
  80fd88:	003dc406 	br	80f49c <__alt_mem_onchip_mem+0xff80749c>
  80fd8c:	1000d21e 	bne	r2,zero,8100d8 <___vfiprintf_internal_r+0x11b4>
  80fd90:	d8c01d87 	ldb	r3,118(sp)
  80fd94:	18009526 	beq	r3,zero,80ffec <___vfiprintf_internal_r+0x10c8>
  80fd98:	00800044 	movi	r2,1
  80fd9c:	d8c01d84 	addi	r3,sp,118
  80fda0:	1009883a 	mov	r4,r2
  80fda4:	d8c00015 	stw	r3,0(sp)
  80fda8:	d8800115 	stw	r2,4(sp)
  80fdac:	d811883a 	mov	r8,sp
  80fdb0:	200b883a 	mov	r5,r4
  80fdb4:	42000204 	addi	r8,r8,8
  80fdb8:	21000044 	addi	r4,r4,1
  80fdbc:	003d9706 	br	80f41c <__alt_mem_onchip_mem+0xff80741c>
  80fdc0:	d9001d04 	addi	r4,sp,116
  80fdc4:	00800084 	movi	r2,2
  80fdc8:	d9000015 	stw	r4,0(sp)
  80fdcc:	d8800115 	stw	r2,4(sp)
  80fdd0:	1809883a 	mov	r4,r3
  80fdd4:	d811883a 	mov	r8,sp
  80fdd8:	200b883a 	mov	r5,r4
  80fddc:	42000204 	addi	r8,r8,8
  80fde0:	21000044 	addi	r4,r4,1
  80fde4:	003f4e06 	br	80fb20 <__alt_mem_onchip_mem+0xff807b20>
  80fde8:	d8001d85 	stb	zero,118(sp)
  80fdec:	48005016 	blt	r9,zero,80ff30 <___vfiprintf_internal_r+0x100c>
  80fdf0:	00ffdfc4 	movi	r3,-129
  80fdf4:	94c4b03a 	or	r2,r18,r19
  80fdf8:	a0e8703a 	and	r20,r20,r3
  80fdfc:	103d4426 	beq	r2,zero,80f310 <__alt_mem_onchip_mem+0xff807310>
  80fe00:	0039883a 	mov	fp,zero
  80fe04:	d9002617 	ldw	r4,152(sp)
  80fe08:	dd401a04 	addi	r21,sp,104
  80fe0c:	908003cc 	andi	r2,r18,15
  80fe10:	9806973a 	slli	r3,r19,28
  80fe14:	2085883a 	add	r2,r4,r2
  80fe18:	9024d13a 	srli	r18,r18,4
  80fe1c:	10800003 	ldbu	r2,0(r2)
  80fe20:	9826d13a 	srli	r19,r19,4
  80fe24:	ad7fffc4 	addi	r21,r21,-1
  80fe28:	1ca4b03a 	or	r18,r3,r18
  80fe2c:	a8800005 	stb	r2,0(r21)
  80fe30:	94c4b03a 	or	r2,r18,r19
  80fe34:	103ff51e 	bne	r2,zero,80fe0c <__alt_mem_onchip_mem+0xff807e0c>
  80fe38:	003e5906 	br	80f7a0 <__alt_mem_onchip_mem+0xff8077a0>
  80fe3c:	d9402117 	ldw	r5,132(sp)
  80fe40:	d9002017 	ldw	r4,128(sp)
  80fe44:	d9801a04 	addi	r6,sp,104
  80fe48:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fe4c:	103f891e 	bne	r2,zero,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  80fe50:	d8801c17 	ldw	r2,112(sp)
  80fe54:	d811883a 	mov	r8,sp
  80fe58:	003f9506 	br	80fcb0 <__alt_mem_onchip_mem+0xff807cb0>
  80fe5c:	d9402117 	ldw	r5,132(sp)
  80fe60:	d9002017 	ldw	r4,128(sp)
  80fe64:	d9801a04 	addi	r6,sp,104
  80fe68:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fe6c:	103f811e 	bne	r2,zero,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  80fe70:	d811883a 	mov	r8,sp
  80fe74:	003ced06 	br	80f22c <__alt_mem_onchip_mem+0xff80722c>
  80fe78:	d9402117 	ldw	r5,132(sp)
  80fe7c:	d9002017 	ldw	r4,128(sp)
  80fe80:	d9801a04 	addi	r6,sp,104
  80fe84:	da402c15 	stw	r9,176(sp)
  80fe88:	db802a15 	stw	r14,168(sp)
  80fe8c:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fe90:	da402c17 	ldw	r9,176(sp)
  80fe94:	db802a17 	ldw	r14,168(sp)
  80fe98:	103f761e 	bne	r2,zero,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  80fe9c:	d9401b17 	ldw	r5,108(sp)
  80fea0:	d8801c17 	ldw	r2,112(sp)
  80fea4:	d811883a 	mov	r8,sp
  80fea8:	29000044 	addi	r4,r5,1
  80feac:	003d5b06 	br	80f41c <__alt_mem_onchip_mem+0xff80741c>
  80feb0:	d9402117 	ldw	r5,132(sp)
  80feb4:	d9002017 	ldw	r4,128(sp)
  80feb8:	d9801a04 	addi	r6,sp,104
  80febc:	da402c15 	stw	r9,176(sp)
  80fec0:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80fec4:	da402c17 	ldw	r9,176(sp)
  80fec8:	103f6a1e 	bne	r2,zero,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  80fecc:	d9401b17 	ldw	r5,108(sp)
  80fed0:	d8801c17 	ldw	r2,112(sp)
  80fed4:	d811883a 	mov	r8,sp
  80fed8:	29000044 	addi	r4,r5,1
  80fedc:	003f1006 	br	80fb20 <__alt_mem_onchip_mem+0xff807b20>
  80fee0:	1000c31e 	bne	r2,zero,8101f0 <___vfiprintf_internal_r+0x12cc>
  80fee4:	01000044 	movi	r4,1
  80fee8:	000b883a 	mov	r5,zero
  80feec:	d811883a 	mov	r8,sp
  80fef0:	003f0d06 	br	80fb28 <__alt_mem_onchip_mem+0xff807b28>
  80fef4:	d9402117 	ldw	r5,132(sp)
  80fef8:	d9002017 	ldw	r4,128(sp)
  80fefc:	d9801a04 	addi	r6,sp,104
  80ff00:	080ee100 	call	80ee10 <__sprint_r.part.0>
  80ff04:	103f5b1e 	bne	r2,zero,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  80ff08:	d9001b17 	ldw	r4,108(sp)
  80ff0c:	d8801c17 	ldw	r2,112(sp)
  80ff10:	d811883a 	mov	r8,sp
  80ff14:	21000044 	addi	r4,r4,1
  80ff18:	003d8006 	br	80f51c <__alt_mem_onchip_mem+0xff80751c>
  80ff1c:	01002074 	movhi	r4,129
  80ff20:	211b5504 	addi	r4,r4,27988
  80ff24:	d9002615 	stw	r4,152(sp)
  80ff28:	d8c02215 	stw	r3,136(sp)
  80ff2c:	1029883a 	mov	r20,r2
  80ff30:	94c4b03a 	or	r2,r18,r19
  80ff34:	103fb21e 	bne	r2,zero,80fe00 <__alt_mem_onchip_mem+0xff807e00>
  80ff38:	0039883a 	mov	fp,zero
  80ff3c:	00800084 	movi	r2,2
  80ff40:	003e6b06 	br	80f8f0 <__alt_mem_onchip_mem+0xff8078f0>
  80ff44:	da802217 	ldw	r10,136(sp)
  80ff48:	d8001d85 	stb	zero,118(sp)
  80ff4c:	0027883a 	mov	r19,zero
  80ff50:	50800104 	addi	r2,r10,4
  80ff54:	54800017 	ldw	r18,0(r10)
  80ff58:	483e6016 	blt	r9,zero,80f8dc <__alt_mem_onchip_mem+0xff8078dc>
  80ff5c:	00ffdfc4 	movi	r3,-129
  80ff60:	d8802215 	stw	r2,136(sp)
  80ff64:	a0e8703a 	and	r20,r20,r3
  80ff68:	0039883a 	mov	fp,zero
  80ff6c:	903ebb26 	beq	r18,zero,80fa5c <__alt_mem_onchip_mem+0xff807a5c>
  80ff70:	00800244 	movi	r2,9
  80ff74:	14bdee36 	bltu	r2,r18,80f730 <__alt_mem_onchip_mem+0xff807730>
  80ff78:	003eba06 	br	80fa64 <__alt_mem_onchip_mem+0xff807a64>
  80ff7c:	00800c04 	movi	r2,48
  80ff80:	d8c01d45 	stb	r3,117(sp)
  80ff84:	d8801d05 	stb	r2,116(sp)
  80ff88:	d8001d85 	stb	zero,118(sp)
  80ff8c:	a0c00094 	ori	r3,r20,2
  80ff90:	4800a916 	blt	r9,zero,810238 <___vfiprintf_internal_r+0x1314>
  80ff94:	00bfdfc4 	movi	r2,-129
  80ff98:	a096703a 	and	r11,r20,r2
  80ff9c:	5d000094 	ori	r20,r11,2
  80ffa0:	0039883a 	mov	fp,zero
  80ffa4:	003f9706 	br	80fe04 <__alt_mem_onchip_mem+0xff807e04>
  80ffa8:	8025883a 	mov	r18,r16
  80ffac:	003c2e06 	br	80f068 <__alt_mem_onchip_mem+0xff807068>
  80ffb0:	00802074 	movhi	r2,129
  80ffb4:	109b5504 	addi	r2,r2,27988
  80ffb8:	0039883a 	mov	fp,zero
  80ffbc:	d8802615 	stw	r2,152(sp)
  80ffc0:	003f9006 	br	80fe04 <__alt_mem_onchip_mem+0xff807e04>
  80ffc4:	04a5c83a 	sub	r18,zero,r18
  80ffc8:	07000b44 	movi	fp,45
  80ffcc:	9004c03a 	cmpne	r2,r18,zero
  80ffd0:	04e7c83a 	sub	r19,zero,r19
  80ffd4:	df001d85 	stb	fp,118(sp)
  80ffd8:	98a7c83a 	sub	r19,r19,r2
  80ffdc:	48009f16 	blt	r9,zero,81025c <___vfiprintf_internal_r+0x1338>
  80ffe0:	00bfdfc4 	movi	r2,-129
  80ffe4:	a0a8703a 	and	r20,r20,r2
  80ffe8:	003dd006 	br	80f72c <__alt_mem_onchip_mem+0xff80772c>
  80ffec:	70004c26 	beq	r14,zero,810120 <___vfiprintf_internal_r+0x11fc>
  80fff0:	00800084 	movi	r2,2
  80fff4:	d8c01d04 	addi	r3,sp,116
  80fff8:	d8c00015 	stw	r3,0(sp)
  80fffc:	d8800115 	stw	r2,4(sp)
  810000:	01000044 	movi	r4,1
  810004:	d811883a 	mov	r8,sp
  810008:	003f7306 	br	80fdd8 <__alt_mem_onchip_mem+0xff807dd8>
  81000c:	a080100c 	andi	r2,r20,64
  810010:	da802217 	ldw	r10,136(sp)
  810014:	103e0626 	beq	r2,zero,80f830 <__alt_mem_onchip_mem+0xff807830>
  810018:	5480000f 	ldh	r18,0(r10)
  81001c:	52800104 	addi	r10,r10,4
  810020:	da802215 	stw	r10,136(sp)
  810024:	9027d7fa 	srai	r19,r18,31
  810028:	9805883a 	mov	r2,r19
  81002c:	003db806 	br	80f710 <__alt_mem_onchip_mem+0xff807710>
  810030:	a080040c 	andi	r2,r20,16
  810034:	1000091e 	bne	r2,zero,81005c <___vfiprintf_internal_r+0x1138>
  810038:	a2c0100c 	andi	r11,r20,64
  81003c:	58000726 	beq	r11,zero,81005c <___vfiprintf_internal_r+0x1138>
  810040:	da802217 	ldw	r10,136(sp)
  810044:	50800017 	ldw	r2,0(r10)
  810048:	52800104 	addi	r10,r10,4
  81004c:	da802215 	stw	r10,136(sp)
  810050:	da802317 	ldw	r10,140(sp)
  810054:	1280000d 	sth	r10,0(r2)
  810058:	003be706 	br	80eff8 <__alt_mem_onchip_mem+0xff806ff8>
  81005c:	da802217 	ldw	r10,136(sp)
  810060:	50800017 	ldw	r2,0(r10)
  810064:	52800104 	addi	r10,r10,4
  810068:	da802215 	stw	r10,136(sp)
  81006c:	da802317 	ldw	r10,140(sp)
  810070:	12800015 	stw	r10,0(r2)
  810074:	003be006 	br	80eff8 <__alt_mem_onchip_mem+0xff806ff8>
  810078:	a080100c 	andi	r2,r20,64
  81007c:	da802217 	ldw	r10,136(sp)
  810080:	10003026 	beq	r2,zero,810144 <___vfiprintf_internal_r+0x1220>
  810084:	5480000b 	ldhu	r18,0(r10)
  810088:	52800104 	addi	r10,r10,4
  81008c:	0027883a 	mov	r19,zero
  810090:	da802215 	stw	r10,136(sp)
  810094:	003d8006 	br	80f698 <__alt_mem_onchip_mem+0xff807698>
  810098:	80c00007 	ldb	r3,0(r16)
  81009c:	003c0006 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  8100a0:	a080100c 	andi	r2,r20,64
  8100a4:	d8001d85 	stb	zero,118(sp)
  8100a8:	da802217 	ldw	r10,136(sp)
  8100ac:	1000201e 	bne	r2,zero,810130 <___vfiprintf_internal_r+0x120c>
  8100b0:	50800104 	addi	r2,r10,4
  8100b4:	54800017 	ldw	r18,0(r10)
  8100b8:	0027883a 	mov	r19,zero
  8100bc:	483def0e 	bge	r9,zero,80f87c <__alt_mem_onchip_mem+0xff80787c>
  8100c0:	94c6b03a 	or	r3,r18,r19
  8100c4:	d8802215 	stw	r2,136(sp)
  8100c8:	183d4e1e 	bne	r3,zero,80f604 <__alt_mem_onchip_mem+0xff807604>
  8100cc:	0039883a 	mov	fp,zero
  8100d0:	0005883a 	mov	r2,zero
  8100d4:	003e0606 	br	80f8f0 <__alt_mem_onchip_mem+0xff8078f0>
  8100d8:	d9402117 	ldw	r5,132(sp)
  8100dc:	d9002017 	ldw	r4,128(sp)
  8100e0:	d9801a04 	addi	r6,sp,104
  8100e4:	da402c15 	stw	r9,176(sp)
  8100e8:	db802a15 	stw	r14,168(sp)
  8100ec:	080ee100 	call	80ee10 <__sprint_r.part.0>
  8100f0:	da402c17 	ldw	r9,176(sp)
  8100f4:	db802a17 	ldw	r14,168(sp)
  8100f8:	103ede1e 	bne	r2,zero,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  8100fc:	d9401b17 	ldw	r5,108(sp)
  810100:	d8801c17 	ldw	r2,112(sp)
  810104:	d811883a 	mov	r8,sp
  810108:	29000044 	addi	r4,r5,1
  81010c:	003e7406 	br	80fae0 <__alt_mem_onchip_mem+0xff807ae0>
  810110:	00bfffc4 	movi	r2,-1
  810114:	003c5806 	br	80f278 <__alt_mem_onchip_mem+0xff807278>
  810118:	d811883a 	mov	r8,sp
  81011c:	003ee806 	br	80fcc0 <__alt_mem_onchip_mem+0xff807cc0>
  810120:	000b883a 	mov	r5,zero
  810124:	01000044 	movi	r4,1
  810128:	d811883a 	mov	r8,sp
  81012c:	003e7c06 	br	80fb20 <__alt_mem_onchip_mem+0xff807b20>
  810130:	50800104 	addi	r2,r10,4
  810134:	5480000b 	ldhu	r18,0(r10)
  810138:	0027883a 	mov	r19,zero
  81013c:	483dcf0e 	bge	r9,zero,80f87c <__alt_mem_onchip_mem+0xff80787c>
  810140:	003fdf06 	br	8100c0 <__alt_mem_onchip_mem+0xff8080c0>
  810144:	54800017 	ldw	r18,0(r10)
  810148:	52800104 	addi	r10,r10,4
  81014c:	0027883a 	mov	r19,zero
  810150:	da802215 	stw	r10,136(sp)
  810154:	003d5006 	br	80f698 <__alt_mem_onchip_mem+0xff807698>
  810158:	50800104 	addi	r2,r10,4
  81015c:	5480000b 	ldhu	r18,0(r10)
  810160:	0027883a 	mov	r19,zero
  810164:	483f7d0e 	bge	r9,zero,80ff5c <__alt_mem_onchip_mem+0xff807f5c>
  810168:	003ddc06 	br	80f8dc <__alt_mem_onchip_mem+0xff8078dc>
  81016c:	d8c02215 	stw	r3,136(sp)
  810170:	0039883a 	mov	fp,zero
  810174:	003ddb06 	br	80f8e4 <__alt_mem_onchip_mem+0xff8078e4>
  810178:	02802074 	movhi	r10,129
  81017c:	529bb504 	addi	r10,r10,28372
  810180:	da802415 	stw	r10,144(sp)
  810184:	003e8306 	br	80fb94 <__alt_mem_onchip_mem+0xff807b94>
  810188:	d8801c17 	ldw	r2,112(sp)
  81018c:	dd002117 	ldw	r20,132(sp)
  810190:	103eb926 	beq	r2,zero,80fc78 <__alt_mem_onchip_mem+0xff807c78>
  810194:	d9002017 	ldw	r4,128(sp)
  810198:	d9801a04 	addi	r6,sp,104
  81019c:	a00b883a 	mov	r5,r20
  8101a0:	080ee100 	call	80ee10 <__sprint_r.part.0>
  8101a4:	003eb406 	br	80fc78 <__alt_mem_onchip_mem+0xff807c78>
  8101a8:	80c00043 	ldbu	r3,1(r16)
  8101ac:	a5000814 	ori	r20,r20,32
  8101b0:	84000044 	addi	r16,r16,1
  8101b4:	18c03fcc 	andi	r3,r3,255
  8101b8:	18c0201c 	xori	r3,r3,128
  8101bc:	18ffe004 	addi	r3,r3,-128
  8101c0:	003bb706 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  8101c4:	a809883a 	mov	r4,r21
  8101c8:	d8c02a15 	stw	r3,168(sp)
  8101cc:	da002b15 	stw	r8,172(sp)
  8101d0:	08082840 	call	808284 <strlen>
  8101d4:	d8c02a17 	ldw	r3,168(sp)
  8101d8:	1027883a 	mov	r19,r2
  8101dc:	df001d83 	ldbu	fp,118(sp)
  8101e0:	d8c02215 	stw	r3,136(sp)
  8101e4:	0013883a 	mov	r9,zero
  8101e8:	da002b17 	ldw	r8,172(sp)
  8101ec:	003c4d06 	br	80f324 <__alt_mem_onchip_mem+0xff807324>
  8101f0:	d9402117 	ldw	r5,132(sp)
  8101f4:	d9002017 	ldw	r4,128(sp)
  8101f8:	d9801a04 	addi	r6,sp,104
  8101fc:	da402c15 	stw	r9,176(sp)
  810200:	080ee100 	call	80ee10 <__sprint_r.part.0>
  810204:	da402c17 	ldw	r9,176(sp)
  810208:	103e9a1e 	bne	r2,zero,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  81020c:	d9401b17 	ldw	r5,108(sp)
  810210:	d8801c17 	ldw	r2,112(sp)
  810214:	d811883a 	mov	r8,sp
  810218:	29000044 	addi	r4,r5,1
  81021c:	003e4206 	br	80fb28 <__alt_mem_onchip_mem+0xff807b28>
  810220:	d9401b17 	ldw	r5,108(sp)
  810224:	01002074 	movhi	r4,129
  810228:	211bb904 	addi	r4,r4,28388
  81022c:	d9002415 	stw	r4,144(sp)
  810230:	29400044 	addi	r5,r5,1
  810234:	003c6d06 	br	80f3ec <__alt_mem_onchip_mem+0xff8073ec>
  810238:	0039883a 	mov	fp,zero
  81023c:	00800084 	movi	r2,2
  810240:	10803fcc 	andi	r2,r2,255
  810244:	01000044 	movi	r4,1
  810248:	11001e26 	beq	r2,r4,8102c4 <___vfiprintf_internal_r+0x13a0>
  81024c:	01000084 	movi	r4,2
  810250:	11001e1e 	bne	r2,r4,8102cc <___vfiprintf_internal_r+0x13a8>
  810254:	1829883a 	mov	r20,r3
  810258:	003eea06 	br	80fe04 <__alt_mem_onchip_mem+0xff807e04>
  81025c:	a007883a 	mov	r3,r20
  810260:	00800044 	movi	r2,1
  810264:	003ff606 	br	810240 <__alt_mem_onchip_mem+0xff808240>
  810268:	00800184 	movi	r2,6
  81026c:	1240012e 	bgeu	r2,r9,810274 <___vfiprintf_internal_r+0x1350>
  810270:	1013883a 	mov	r9,r2
  810274:	4827883a 	mov	r19,r9
  810278:	4825883a 	mov	r18,r9
  81027c:	48001516 	blt	r9,zero,8102d4 <___vfiprintf_internal_r+0x13b0>
  810280:	05402074 	movhi	r21,129
  810284:	d8c02215 	stw	r3,136(sp)
  810288:	ad5b5a04 	addi	r21,r21,28008
  81028c:	003d1406 	br	80f6e0 <__alt_mem_onchip_mem+0xff8076e0>
  810290:	02802074 	movhi	r10,129
  810294:	529bb504 	addi	r10,r10,28372
  810298:	da802415 	stw	r10,144(sp)
  81029c:	200d883a 	mov	r6,r4
  8102a0:	003c9106 	br	80f4e8 <__alt_mem_onchip_mem+0xff8074e8>
  8102a4:	5021883a 	mov	r16,r10
  8102a8:	0013883a 	mov	r9,zero
  8102ac:	003b7d06 	br	80f0a4 <__alt_mem_onchip_mem+0xff8070a4>
  8102b0:	4827883a 	mov	r19,r9
  8102b4:	df001d83 	ldbu	fp,118(sp)
  8102b8:	d8c02215 	stw	r3,136(sp)
  8102bc:	0013883a 	mov	r9,zero
  8102c0:	003c1806 	br	80f324 <__alt_mem_onchip_mem+0xff807324>
  8102c4:	1829883a 	mov	r20,r3
  8102c8:	003d1806 	br	80f72c <__alt_mem_onchip_mem+0xff80772c>
  8102cc:	1829883a 	mov	r20,r3
  8102d0:	003ccd06 	br	80f608 <__alt_mem_onchip_mem+0xff807608>
  8102d4:	0025883a 	mov	r18,zero
  8102d8:	003fe906 	br	810280 <__alt_mem_onchip_mem+0xff808280>
  8102dc:	d8802217 	ldw	r2,136(sp)
  8102e0:	80c00043 	ldbu	r3,1(r16)
  8102e4:	5021883a 	mov	r16,r10
  8102e8:	12400017 	ldw	r9,0(r2)
  8102ec:	10800104 	addi	r2,r2,4
  8102f0:	d8802215 	stw	r2,136(sp)
  8102f4:	483faf0e 	bge	r9,zero,8101b4 <__alt_mem_onchip_mem+0xff8081b4>
  8102f8:	18c03fcc 	andi	r3,r3,255
  8102fc:	18c0201c 	xori	r3,r3,128
  810300:	027fffc4 	movi	r9,-1
  810304:	18ffe004 	addi	r3,r3,-128
  810308:	003b6506 	br	80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  81030c:	d9c01d85 	stb	r7,118(sp)
  810310:	003ca006 	br	80f594 <__alt_mem_onchip_mem+0xff807594>
  810314:	d9c01d85 	stb	r7,118(sp)
  810318:	003cad06 	br	80f5d0 <__alt_mem_onchip_mem+0xff8075d0>
  81031c:	d9c01d85 	stb	r7,118(sp)
  810320:	003d7d06 	br	80f918 <__alt_mem_onchip_mem+0xff807918>
  810324:	d9c01d85 	stb	r7,118(sp)
  810328:	003d5f06 	br	80f8a8 <__alt_mem_onchip_mem+0xff8078a8>
  81032c:	a080004c 	andi	r2,r20,1
  810330:	0039883a 	mov	fp,zero
  810334:	10000526 	beq	r2,zero,81034c <___vfiprintf_internal_r+0x1428>
  810338:	00800c04 	movi	r2,48
  81033c:	d88019c5 	stb	r2,103(sp)
  810340:	dcc02717 	ldw	r19,156(sp)
  810344:	dd4019c4 	addi	r21,sp,103
  810348:	003bf606 	br	80f324 <__alt_mem_onchip_mem+0xff807324>
  81034c:	0027883a 	mov	r19,zero
  810350:	dd401a04 	addi	r21,sp,104
  810354:	003bf306 	br	80f324 <__alt_mem_onchip_mem+0xff807324>
  810358:	d9c01d85 	stb	r7,118(sp)
  81035c:	003dc806 	br	80fa80 <__alt_mem_onchip_mem+0xff807a80>
  810360:	d9c01d85 	stb	r7,118(sp)
  810364:	003d3a06 	br	80f850 <__alt_mem_onchip_mem+0xff807850>
  810368:	d9c01d85 	stb	r7,118(sp)
  81036c:	003d2a06 	br	80f818 <__alt_mem_onchip_mem+0xff807818>
  810370:	d9c01d85 	stb	r7,118(sp)
  810374:	003cde06 	br	80f6f0 <__alt_mem_onchip_mem+0xff8076f0>
  810378:	d9c01d85 	stb	r7,118(sp)
  81037c:	003cbc06 	br	80f670 <__alt_mem_onchip_mem+0xff807670>

00810380 <__vfiprintf_internal>:
  810380:	008020b4 	movhi	r2,130
  810384:	10a39404 	addi	r2,r2,-29104
  810388:	300f883a 	mov	r7,r6
  81038c:	280d883a 	mov	r6,r5
  810390:	200b883a 	mov	r5,r4
  810394:	11000017 	ldw	r4,0(r2)
  810398:	080ef241 	jmpi	80ef24 <___vfiprintf_internal_r>

0081039c <__sbprintf>:
  81039c:	2880030b 	ldhu	r2,12(r5)
  8103a0:	2ac01917 	ldw	r11,100(r5)
  8103a4:	2a80038b 	ldhu	r10,14(r5)
  8103a8:	2a400717 	ldw	r9,28(r5)
  8103ac:	2a000917 	ldw	r8,36(r5)
  8103b0:	defee204 	addi	sp,sp,-1144
  8103b4:	00c10004 	movi	r3,1024
  8103b8:	dc011a15 	stw	r16,1128(sp)
  8103bc:	10bfff4c 	andi	r2,r2,65533
  8103c0:	2821883a 	mov	r16,r5
  8103c4:	d8cb883a 	add	r5,sp,r3
  8103c8:	dc811c15 	stw	r18,1136(sp)
  8103cc:	dc411b15 	stw	r17,1132(sp)
  8103d0:	dfc11d15 	stw	ra,1140(sp)
  8103d4:	2025883a 	mov	r18,r4
  8103d8:	d881030d 	sth	r2,1036(sp)
  8103dc:	dac11915 	stw	r11,1124(sp)
  8103e0:	da81038d 	sth	r10,1038(sp)
  8103e4:	da410715 	stw	r9,1052(sp)
  8103e8:	da010915 	stw	r8,1060(sp)
  8103ec:	dec10015 	stw	sp,1024(sp)
  8103f0:	dec10415 	stw	sp,1040(sp)
  8103f4:	d8c10215 	stw	r3,1032(sp)
  8103f8:	d8c10515 	stw	r3,1044(sp)
  8103fc:	d8010615 	stw	zero,1048(sp)
  810400:	080ef240 	call	80ef24 <___vfiprintf_internal_r>
  810404:	1023883a 	mov	r17,r2
  810408:	10000416 	blt	r2,zero,81041c <__sbprintf+0x80>
  81040c:	d9410004 	addi	r5,sp,1024
  810410:	9009883a 	mov	r4,r18
  810414:	080c2980 	call	80c298 <_fflush_r>
  810418:	10000d1e 	bne	r2,zero,810450 <__sbprintf+0xb4>
  81041c:	d881030b 	ldhu	r2,1036(sp)
  810420:	1080100c 	andi	r2,r2,64
  810424:	10000326 	beq	r2,zero,810434 <__sbprintf+0x98>
  810428:	8080030b 	ldhu	r2,12(r16)
  81042c:	10801014 	ori	r2,r2,64
  810430:	8080030d 	sth	r2,12(r16)
  810434:	8805883a 	mov	r2,r17
  810438:	dfc11d17 	ldw	ra,1140(sp)
  81043c:	dc811c17 	ldw	r18,1136(sp)
  810440:	dc411b17 	ldw	r17,1132(sp)
  810444:	dc011a17 	ldw	r16,1128(sp)
  810448:	dec11e04 	addi	sp,sp,1144
  81044c:	f800283a 	ret
  810450:	047fffc4 	movi	r17,-1
  810454:	003ff106 	br	81041c <__alt_mem_onchip_mem+0xff80841c>

00810458 <_calloc_r>:
  810458:	298b383a 	mul	r5,r5,r6
  81045c:	defffe04 	addi	sp,sp,-8
  810460:	dfc00115 	stw	ra,4(sp)
  810464:	dc000015 	stw	r16,0(sp)
  810468:	080749c0 	call	80749c <_malloc_r>
  81046c:	10002926 	beq	r2,zero,810514 <_calloc_r+0xbc>
  810470:	11bfff17 	ldw	r6,-4(r2)
  810474:	1021883a 	mov	r16,r2
  810478:	00bfff04 	movi	r2,-4
  81047c:	308c703a 	and	r6,r6,r2
  810480:	00c00904 	movi	r3,36
  810484:	308d883a 	add	r6,r6,r2
  810488:	19801636 	bltu	r3,r6,8104e4 <_calloc_r+0x8c>
  81048c:	008004c4 	movi	r2,19
  810490:	11800b2e 	bgeu	r2,r6,8104c0 <_calloc_r+0x68>
  810494:	80000015 	stw	zero,0(r16)
  810498:	80000115 	stw	zero,4(r16)
  81049c:	008006c4 	movi	r2,27
  8104a0:	11801a2e 	bgeu	r2,r6,81050c <_calloc_r+0xb4>
  8104a4:	80000215 	stw	zero,8(r16)
  8104a8:	80000315 	stw	zero,12(r16)
  8104ac:	30c0151e 	bne	r6,r3,810504 <_calloc_r+0xac>
  8104b0:	80000415 	stw	zero,16(r16)
  8104b4:	80800604 	addi	r2,r16,24
  8104b8:	80000515 	stw	zero,20(r16)
  8104bc:	00000106 	br	8104c4 <_calloc_r+0x6c>
  8104c0:	8005883a 	mov	r2,r16
  8104c4:	10000015 	stw	zero,0(r2)
  8104c8:	10000115 	stw	zero,4(r2)
  8104cc:	10000215 	stw	zero,8(r2)
  8104d0:	8005883a 	mov	r2,r16
  8104d4:	dfc00117 	ldw	ra,4(sp)
  8104d8:	dc000017 	ldw	r16,0(sp)
  8104dc:	dec00204 	addi	sp,sp,8
  8104e0:	f800283a 	ret
  8104e4:	000b883a 	mov	r5,zero
  8104e8:	8009883a 	mov	r4,r16
  8104ec:	0807ca80 	call	807ca8 <memset>
  8104f0:	8005883a 	mov	r2,r16
  8104f4:	dfc00117 	ldw	ra,4(sp)
  8104f8:	dc000017 	ldw	r16,0(sp)
  8104fc:	dec00204 	addi	sp,sp,8
  810500:	f800283a 	ret
  810504:	80800404 	addi	r2,r16,16
  810508:	003fee06 	br	8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  81050c:	80800204 	addi	r2,r16,8
  810510:	003fec06 	br	8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  810514:	0005883a 	mov	r2,zero
  810518:	003fee06 	br	8104d4 <__alt_mem_onchip_mem+0xff8084d4>

0081051c <_fclose_r>:
  81051c:	28003926 	beq	r5,zero,810604 <_fclose_r+0xe8>
  810520:	defffc04 	addi	sp,sp,-16
  810524:	dc400115 	stw	r17,4(sp)
  810528:	dc000015 	stw	r16,0(sp)
  81052c:	dfc00315 	stw	ra,12(sp)
  810530:	dc800215 	stw	r18,8(sp)
  810534:	2023883a 	mov	r17,r4
  810538:	2821883a 	mov	r16,r5
  81053c:	20000226 	beq	r4,zero,810548 <_fclose_r+0x2c>
  810540:	20800e17 	ldw	r2,56(r4)
  810544:	10002726 	beq	r2,zero,8105e4 <_fclose_r+0xc8>
  810548:	8080030f 	ldh	r2,12(r16)
  81054c:	1000071e 	bne	r2,zero,81056c <_fclose_r+0x50>
  810550:	0005883a 	mov	r2,zero
  810554:	dfc00317 	ldw	ra,12(sp)
  810558:	dc800217 	ldw	r18,8(sp)
  81055c:	dc400117 	ldw	r17,4(sp)
  810560:	dc000017 	ldw	r16,0(sp)
  810564:	dec00404 	addi	sp,sp,16
  810568:	f800283a 	ret
  81056c:	800b883a 	mov	r5,r16
  810570:	8809883a 	mov	r4,r17
  810574:	080c07c0 	call	80c07c <__sflush_r>
  810578:	1025883a 	mov	r18,r2
  81057c:	80800b17 	ldw	r2,44(r16)
  810580:	10000426 	beq	r2,zero,810594 <_fclose_r+0x78>
  810584:	81400717 	ldw	r5,28(r16)
  810588:	8809883a 	mov	r4,r17
  81058c:	103ee83a 	callr	r2
  810590:	10001616 	blt	r2,zero,8105ec <_fclose_r+0xd0>
  810594:	8080030b 	ldhu	r2,12(r16)
  810598:	1080200c 	andi	r2,r2,128
  81059c:	1000151e 	bne	r2,zero,8105f4 <_fclose_r+0xd8>
  8105a0:	81400c17 	ldw	r5,48(r16)
  8105a4:	28000526 	beq	r5,zero,8105bc <_fclose_r+0xa0>
  8105a8:	80801004 	addi	r2,r16,64
  8105ac:	28800226 	beq	r5,r2,8105b8 <_fclose_r+0x9c>
  8105b0:	8809883a 	mov	r4,r17
  8105b4:	080c8940 	call	80c894 <_free_r>
  8105b8:	80000c15 	stw	zero,48(r16)
  8105bc:	81401117 	ldw	r5,68(r16)
  8105c0:	28000326 	beq	r5,zero,8105d0 <_fclose_r+0xb4>
  8105c4:	8809883a 	mov	r4,r17
  8105c8:	080c8940 	call	80c894 <_free_r>
  8105cc:	80001115 	stw	zero,68(r16)
  8105d0:	080c6840 	call	80c684 <__sfp_lock_acquire>
  8105d4:	8000030d 	sth	zero,12(r16)
  8105d8:	080c6880 	call	80c688 <__sfp_lock_release>
  8105dc:	9005883a 	mov	r2,r18
  8105e0:	003fdc06 	br	810554 <__alt_mem_onchip_mem+0xff808554>
  8105e4:	080c6740 	call	80c674 <__sinit>
  8105e8:	003fd706 	br	810548 <__alt_mem_onchip_mem+0xff808548>
  8105ec:	04bfffc4 	movi	r18,-1
  8105f0:	003fe806 	br	810594 <__alt_mem_onchip_mem+0xff808594>
  8105f4:	81400417 	ldw	r5,16(r16)
  8105f8:	8809883a 	mov	r4,r17
  8105fc:	080c8940 	call	80c894 <_free_r>
  810600:	003fe706 	br	8105a0 <__alt_mem_onchip_mem+0xff8085a0>
  810604:	0005883a 	mov	r2,zero
  810608:	f800283a 	ret

0081060c <fclose>:
  81060c:	008020b4 	movhi	r2,130
  810610:	10a39404 	addi	r2,r2,-29104
  810614:	200b883a 	mov	r5,r4
  810618:	11000017 	ldw	r4,0(r2)
  81061c:	081051c1 	jmpi	81051c <_fclose_r>

00810620 <__fputwc>:
  810620:	defff804 	addi	sp,sp,-32
  810624:	dcc00415 	stw	r19,16(sp)
  810628:	dc800315 	stw	r18,12(sp)
  81062c:	dc000115 	stw	r16,4(sp)
  810630:	dfc00715 	stw	ra,28(sp)
  810634:	dd400615 	stw	r21,24(sp)
  810638:	dd000515 	stw	r20,20(sp)
  81063c:	dc400215 	stw	r17,8(sp)
  810640:	2027883a 	mov	r19,r4
  810644:	2825883a 	mov	r18,r5
  810648:	3021883a 	mov	r16,r6
  81064c:	080d2c40 	call	80d2c4 <__locale_mb_cur_max>
  810650:	00c00044 	movi	r3,1
  810654:	10c03e26 	beq	r2,r3,810750 <__fputwc+0x130>
  810658:	81c01704 	addi	r7,r16,92
  81065c:	900d883a 	mov	r6,r18
  810660:	d80b883a 	mov	r5,sp
  810664:	9809883a 	mov	r4,r19
  810668:	08109800 	call	810980 <_wcrtomb_r>
  81066c:	1029883a 	mov	r20,r2
  810670:	00bfffc4 	movi	r2,-1
  810674:	a0802026 	beq	r20,r2,8106f8 <__fputwc+0xd8>
  810678:	d9400003 	ldbu	r5,0(sp)
  81067c:	a0001c26 	beq	r20,zero,8106f0 <__fputwc+0xd0>
  810680:	0023883a 	mov	r17,zero
  810684:	05400284 	movi	r21,10
  810688:	00000906 	br	8106b0 <__fputwc+0x90>
  81068c:	80800017 	ldw	r2,0(r16)
  810690:	11400005 	stb	r5,0(r2)
  810694:	80c00017 	ldw	r3,0(r16)
  810698:	18c00044 	addi	r3,r3,1
  81069c:	80c00015 	stw	r3,0(r16)
  8106a0:	8c400044 	addi	r17,r17,1
  8106a4:	dc45883a 	add	r2,sp,r17
  8106a8:	8d00112e 	bgeu	r17,r20,8106f0 <__fputwc+0xd0>
  8106ac:	11400003 	ldbu	r5,0(r2)
  8106b0:	80c00217 	ldw	r3,8(r16)
  8106b4:	18ffffc4 	addi	r3,r3,-1
  8106b8:	80c00215 	stw	r3,8(r16)
  8106bc:	183ff30e 	bge	r3,zero,81068c <__alt_mem_onchip_mem+0xff80868c>
  8106c0:	80800617 	ldw	r2,24(r16)
  8106c4:	18801916 	blt	r3,r2,81072c <__fputwc+0x10c>
  8106c8:	80800017 	ldw	r2,0(r16)
  8106cc:	11400005 	stb	r5,0(r2)
  8106d0:	80800017 	ldw	r2,0(r16)
  8106d4:	10c00003 	ldbu	r3,0(r2)
  8106d8:	10800044 	addi	r2,r2,1
  8106dc:	1d402326 	beq	r3,r21,81076c <__fputwc+0x14c>
  8106e0:	80800015 	stw	r2,0(r16)
  8106e4:	8c400044 	addi	r17,r17,1
  8106e8:	dc45883a 	add	r2,sp,r17
  8106ec:	8d3fef36 	bltu	r17,r20,8106ac <__alt_mem_onchip_mem+0xff8086ac>
  8106f0:	9005883a 	mov	r2,r18
  8106f4:	00000406 	br	810708 <__fputwc+0xe8>
  8106f8:	80c0030b 	ldhu	r3,12(r16)
  8106fc:	a005883a 	mov	r2,r20
  810700:	18c01014 	ori	r3,r3,64
  810704:	80c0030d 	sth	r3,12(r16)
  810708:	dfc00717 	ldw	ra,28(sp)
  81070c:	dd400617 	ldw	r21,24(sp)
  810710:	dd000517 	ldw	r20,20(sp)
  810714:	dcc00417 	ldw	r19,16(sp)
  810718:	dc800317 	ldw	r18,12(sp)
  81071c:	dc400217 	ldw	r17,8(sp)
  810720:	dc000117 	ldw	r16,4(sp)
  810724:	dec00804 	addi	sp,sp,32
  810728:	f800283a 	ret
  81072c:	800d883a 	mov	r6,r16
  810730:	29403fcc 	andi	r5,r5,255
  810734:	9809883a 	mov	r4,r19
  810738:	08108280 	call	810828 <__swbuf_r>
  81073c:	10bfffe0 	cmpeqi	r2,r2,-1
  810740:	10803fcc 	andi	r2,r2,255
  810744:	103fd626 	beq	r2,zero,8106a0 <__alt_mem_onchip_mem+0xff8086a0>
  810748:	00bfffc4 	movi	r2,-1
  81074c:	003fee06 	br	810708 <__alt_mem_onchip_mem+0xff808708>
  810750:	90ffffc4 	addi	r3,r18,-1
  810754:	01003f84 	movi	r4,254
  810758:	20ffbf36 	bltu	r4,r3,810658 <__alt_mem_onchip_mem+0xff808658>
  81075c:	900b883a 	mov	r5,r18
  810760:	dc800005 	stb	r18,0(sp)
  810764:	1029883a 	mov	r20,r2
  810768:	003fc506 	br	810680 <__alt_mem_onchip_mem+0xff808680>
  81076c:	800d883a 	mov	r6,r16
  810770:	a80b883a 	mov	r5,r21
  810774:	9809883a 	mov	r4,r19
  810778:	08108280 	call	810828 <__swbuf_r>
  81077c:	10bfffe0 	cmpeqi	r2,r2,-1
  810780:	003fef06 	br	810740 <__alt_mem_onchip_mem+0xff808740>

00810784 <_fputwc_r>:
  810784:	3080030b 	ldhu	r2,12(r6)
  810788:	10c8000c 	andi	r3,r2,8192
  81078c:	1800051e 	bne	r3,zero,8107a4 <_fputwc_r+0x20>
  810790:	30c01917 	ldw	r3,100(r6)
  810794:	10880014 	ori	r2,r2,8192
  810798:	3080030d 	sth	r2,12(r6)
  81079c:	18880014 	ori	r2,r3,8192
  8107a0:	30801915 	stw	r2,100(r6)
  8107a4:	08106201 	jmpi	810620 <__fputwc>

008107a8 <fputwc>:
  8107a8:	008020b4 	movhi	r2,130
  8107ac:	defffc04 	addi	sp,sp,-16
  8107b0:	10a39404 	addi	r2,r2,-29104
  8107b4:	dc000115 	stw	r16,4(sp)
  8107b8:	14000017 	ldw	r16,0(r2)
  8107bc:	dc400215 	stw	r17,8(sp)
  8107c0:	dfc00315 	stw	ra,12(sp)
  8107c4:	2023883a 	mov	r17,r4
  8107c8:	80000226 	beq	r16,zero,8107d4 <fputwc+0x2c>
  8107cc:	80800e17 	ldw	r2,56(r16)
  8107d0:	10001026 	beq	r2,zero,810814 <fputwc+0x6c>
  8107d4:	2880030b 	ldhu	r2,12(r5)
  8107d8:	10c8000c 	andi	r3,r2,8192
  8107dc:	1800051e 	bne	r3,zero,8107f4 <fputwc+0x4c>
  8107e0:	28c01917 	ldw	r3,100(r5)
  8107e4:	10880014 	ori	r2,r2,8192
  8107e8:	2880030d 	sth	r2,12(r5)
  8107ec:	18880014 	ori	r2,r3,8192
  8107f0:	28801915 	stw	r2,100(r5)
  8107f4:	280d883a 	mov	r6,r5
  8107f8:	8009883a 	mov	r4,r16
  8107fc:	880b883a 	mov	r5,r17
  810800:	dfc00317 	ldw	ra,12(sp)
  810804:	dc400217 	ldw	r17,8(sp)
  810808:	dc000117 	ldw	r16,4(sp)
  81080c:	dec00404 	addi	sp,sp,16
  810810:	08106201 	jmpi	810620 <__fputwc>
  810814:	8009883a 	mov	r4,r16
  810818:	d9400015 	stw	r5,0(sp)
  81081c:	080c6740 	call	80c674 <__sinit>
  810820:	d9400017 	ldw	r5,0(sp)
  810824:	003feb06 	br	8107d4 <__alt_mem_onchip_mem+0xff8087d4>

00810828 <__swbuf_r>:
  810828:	defffb04 	addi	sp,sp,-20
  81082c:	dcc00315 	stw	r19,12(sp)
  810830:	dc800215 	stw	r18,8(sp)
  810834:	dc000015 	stw	r16,0(sp)
  810838:	dfc00415 	stw	ra,16(sp)
  81083c:	dc400115 	stw	r17,4(sp)
  810840:	2025883a 	mov	r18,r4
  810844:	2827883a 	mov	r19,r5
  810848:	3021883a 	mov	r16,r6
  81084c:	20000226 	beq	r4,zero,810858 <__swbuf_r+0x30>
  810850:	20800e17 	ldw	r2,56(r4)
  810854:	10004226 	beq	r2,zero,810960 <__swbuf_r+0x138>
  810858:	80800617 	ldw	r2,24(r16)
  81085c:	8100030b 	ldhu	r4,12(r16)
  810860:	80800215 	stw	r2,8(r16)
  810864:	2080020c 	andi	r2,r4,8
  810868:	10003626 	beq	r2,zero,810944 <__swbuf_r+0x11c>
  81086c:	80c00417 	ldw	r3,16(r16)
  810870:	18003426 	beq	r3,zero,810944 <__swbuf_r+0x11c>
  810874:	2088000c 	andi	r2,r4,8192
  810878:	9c403fcc 	andi	r17,r19,255
  81087c:	10001a26 	beq	r2,zero,8108e8 <__swbuf_r+0xc0>
  810880:	80800017 	ldw	r2,0(r16)
  810884:	81000517 	ldw	r4,20(r16)
  810888:	10c7c83a 	sub	r3,r2,r3
  81088c:	1900200e 	bge	r3,r4,810910 <__swbuf_r+0xe8>
  810890:	18c00044 	addi	r3,r3,1
  810894:	81000217 	ldw	r4,8(r16)
  810898:	11400044 	addi	r5,r2,1
  81089c:	81400015 	stw	r5,0(r16)
  8108a0:	213fffc4 	addi	r4,r4,-1
  8108a4:	81000215 	stw	r4,8(r16)
  8108a8:	14c00005 	stb	r19,0(r2)
  8108ac:	80800517 	ldw	r2,20(r16)
  8108b0:	10c01e26 	beq	r2,r3,81092c <__swbuf_r+0x104>
  8108b4:	8080030b 	ldhu	r2,12(r16)
  8108b8:	1080004c 	andi	r2,r2,1
  8108bc:	10000226 	beq	r2,zero,8108c8 <__swbuf_r+0xa0>
  8108c0:	00800284 	movi	r2,10
  8108c4:	88801926 	beq	r17,r2,81092c <__swbuf_r+0x104>
  8108c8:	8805883a 	mov	r2,r17
  8108cc:	dfc00417 	ldw	ra,16(sp)
  8108d0:	dcc00317 	ldw	r19,12(sp)
  8108d4:	dc800217 	ldw	r18,8(sp)
  8108d8:	dc400117 	ldw	r17,4(sp)
  8108dc:	dc000017 	ldw	r16,0(sp)
  8108e0:	dec00504 	addi	sp,sp,20
  8108e4:	f800283a 	ret
  8108e8:	81401917 	ldw	r5,100(r16)
  8108ec:	00b7ffc4 	movi	r2,-8193
  8108f0:	21080014 	ori	r4,r4,8192
  8108f4:	2884703a 	and	r2,r5,r2
  8108f8:	80801915 	stw	r2,100(r16)
  8108fc:	80800017 	ldw	r2,0(r16)
  810900:	8100030d 	sth	r4,12(r16)
  810904:	81000517 	ldw	r4,20(r16)
  810908:	10c7c83a 	sub	r3,r2,r3
  81090c:	193fe016 	blt	r3,r4,810890 <__alt_mem_onchip_mem+0xff808890>
  810910:	800b883a 	mov	r5,r16
  810914:	9009883a 	mov	r4,r18
  810918:	080c2980 	call	80c298 <_fflush_r>
  81091c:	1000071e 	bne	r2,zero,81093c <__swbuf_r+0x114>
  810920:	80800017 	ldw	r2,0(r16)
  810924:	00c00044 	movi	r3,1
  810928:	003fda06 	br	810894 <__alt_mem_onchip_mem+0xff808894>
  81092c:	800b883a 	mov	r5,r16
  810930:	9009883a 	mov	r4,r18
  810934:	080c2980 	call	80c298 <_fflush_r>
  810938:	103fe326 	beq	r2,zero,8108c8 <__alt_mem_onchip_mem+0xff8088c8>
  81093c:	00bfffc4 	movi	r2,-1
  810940:	003fe206 	br	8108cc <__alt_mem_onchip_mem+0xff8088cc>
  810944:	800b883a 	mov	r5,r16
  810948:	9009883a 	mov	r4,r18
  81094c:	080a64c0 	call	80a64c <__swsetup_r>
  810950:	103ffa1e 	bne	r2,zero,81093c <__alt_mem_onchip_mem+0xff80893c>
  810954:	8100030b 	ldhu	r4,12(r16)
  810958:	80c00417 	ldw	r3,16(r16)
  81095c:	003fc506 	br	810874 <__alt_mem_onchip_mem+0xff808874>
  810960:	080c6740 	call	80c674 <__sinit>
  810964:	003fbc06 	br	810858 <__alt_mem_onchip_mem+0xff808858>

00810968 <__swbuf>:
  810968:	008020b4 	movhi	r2,130
  81096c:	10a39404 	addi	r2,r2,-29104
  810970:	280d883a 	mov	r6,r5
  810974:	200b883a 	mov	r5,r4
  810978:	11000017 	ldw	r4,0(r2)
  81097c:	08108281 	jmpi	810828 <__swbuf_r>

00810980 <_wcrtomb_r>:
  810980:	defff604 	addi	sp,sp,-40
  810984:	008020b4 	movhi	r2,130
  810988:	dc800815 	stw	r18,32(sp)
  81098c:	dc400715 	stw	r17,28(sp)
  810990:	dc000615 	stw	r16,24(sp)
  810994:	10a39804 	addi	r2,r2,-29088
  810998:	dfc00915 	stw	ra,36(sp)
  81099c:	2021883a 	mov	r16,r4
  8109a0:	3823883a 	mov	r17,r7
  8109a4:	14800017 	ldw	r18,0(r2)
  8109a8:	28001426 	beq	r5,zero,8109fc <_wcrtomb_r+0x7c>
  8109ac:	d9400415 	stw	r5,16(sp)
  8109b0:	d9800515 	stw	r6,20(sp)
  8109b4:	080d2b80 	call	80d2b8 <__locale_charset>
  8109b8:	d9800517 	ldw	r6,20(sp)
  8109bc:	d9400417 	ldw	r5,16(sp)
  8109c0:	100f883a 	mov	r7,r2
  8109c4:	dc400015 	stw	r17,0(sp)
  8109c8:	8009883a 	mov	r4,r16
  8109cc:	903ee83a 	callr	r18
  8109d0:	00ffffc4 	movi	r3,-1
  8109d4:	10c0031e 	bne	r2,r3,8109e4 <_wcrtomb_r+0x64>
  8109d8:	88000015 	stw	zero,0(r17)
  8109dc:	00c02284 	movi	r3,138
  8109e0:	80c00015 	stw	r3,0(r16)
  8109e4:	dfc00917 	ldw	ra,36(sp)
  8109e8:	dc800817 	ldw	r18,32(sp)
  8109ec:	dc400717 	ldw	r17,28(sp)
  8109f0:	dc000617 	ldw	r16,24(sp)
  8109f4:	dec00a04 	addi	sp,sp,40
  8109f8:	f800283a 	ret
  8109fc:	080d2b80 	call	80d2b8 <__locale_charset>
  810a00:	100f883a 	mov	r7,r2
  810a04:	dc400015 	stw	r17,0(sp)
  810a08:	000d883a 	mov	r6,zero
  810a0c:	d9400104 	addi	r5,sp,4
  810a10:	8009883a 	mov	r4,r16
  810a14:	903ee83a 	callr	r18
  810a18:	003fed06 	br	8109d0 <__alt_mem_onchip_mem+0xff8089d0>

00810a1c <wcrtomb>:
  810a1c:	defff604 	addi	sp,sp,-40
  810a20:	008020b4 	movhi	r2,130
  810a24:	dc800615 	stw	r18,24(sp)
  810a28:	dc400515 	stw	r17,20(sp)
  810a2c:	10a39404 	addi	r2,r2,-29104
  810a30:	dfc00915 	stw	ra,36(sp)
  810a34:	dd000815 	stw	r20,32(sp)
  810a38:	dcc00715 	stw	r19,28(sp)
  810a3c:	dc000415 	stw	r16,16(sp)
  810a40:	3025883a 	mov	r18,r6
  810a44:	14400017 	ldw	r17,0(r2)
  810a48:	20001926 	beq	r4,zero,810ab0 <wcrtomb+0x94>
  810a4c:	008020b4 	movhi	r2,130
  810a50:	10a39804 	addi	r2,r2,-29088
  810a54:	15000017 	ldw	r20,0(r2)
  810a58:	2021883a 	mov	r16,r4
  810a5c:	2827883a 	mov	r19,r5
  810a60:	080d2b80 	call	80d2b8 <__locale_charset>
  810a64:	100f883a 	mov	r7,r2
  810a68:	dc800015 	stw	r18,0(sp)
  810a6c:	980d883a 	mov	r6,r19
  810a70:	800b883a 	mov	r5,r16
  810a74:	8809883a 	mov	r4,r17
  810a78:	a03ee83a 	callr	r20
  810a7c:	00ffffc4 	movi	r3,-1
  810a80:	10c0031e 	bne	r2,r3,810a90 <wcrtomb+0x74>
  810a84:	90000015 	stw	zero,0(r18)
  810a88:	00c02284 	movi	r3,138
  810a8c:	88c00015 	stw	r3,0(r17)
  810a90:	dfc00917 	ldw	ra,36(sp)
  810a94:	dd000817 	ldw	r20,32(sp)
  810a98:	dcc00717 	ldw	r19,28(sp)
  810a9c:	dc800617 	ldw	r18,24(sp)
  810aa0:	dc400517 	ldw	r17,20(sp)
  810aa4:	dc000417 	ldw	r16,16(sp)
  810aa8:	dec00a04 	addi	sp,sp,40
  810aac:	f800283a 	ret
  810ab0:	008020b4 	movhi	r2,130
  810ab4:	10a39804 	addi	r2,r2,-29088
  810ab8:	14000017 	ldw	r16,0(r2)
  810abc:	080d2b80 	call	80d2b8 <__locale_charset>
  810ac0:	100f883a 	mov	r7,r2
  810ac4:	dc800015 	stw	r18,0(sp)
  810ac8:	000d883a 	mov	r6,zero
  810acc:	d9400104 	addi	r5,sp,4
  810ad0:	8809883a 	mov	r4,r17
  810ad4:	803ee83a 	callr	r16
  810ad8:	003fe806 	br	810a7c <__alt_mem_onchip_mem+0xff808a7c>

00810adc <__ascii_wctomb>:
  810adc:	28000526 	beq	r5,zero,810af4 <__ascii_wctomb+0x18>
  810ae0:	00803fc4 	movi	r2,255
  810ae4:	11800536 	bltu	r2,r6,810afc <__ascii_wctomb+0x20>
  810ae8:	29800005 	stb	r6,0(r5)
  810aec:	00800044 	movi	r2,1
  810af0:	f800283a 	ret
  810af4:	0005883a 	mov	r2,zero
  810af8:	f800283a 	ret
  810afc:	00802284 	movi	r2,138
  810b00:	20800015 	stw	r2,0(r4)
  810b04:	00bfffc4 	movi	r2,-1
  810b08:	f800283a 	ret

00810b0c <_wctomb_r>:
  810b0c:	008020b4 	movhi	r2,130
  810b10:	defff904 	addi	sp,sp,-28
  810b14:	10a39804 	addi	r2,r2,-29088
  810b18:	dfc00615 	stw	ra,24(sp)
  810b1c:	dc400515 	stw	r17,20(sp)
  810b20:	dc000415 	stw	r16,16(sp)
  810b24:	3823883a 	mov	r17,r7
  810b28:	14000017 	ldw	r16,0(r2)
  810b2c:	d9000115 	stw	r4,4(sp)
  810b30:	d9400215 	stw	r5,8(sp)
  810b34:	d9800315 	stw	r6,12(sp)
  810b38:	080d2b80 	call	80d2b8 <__locale_charset>
  810b3c:	d9800317 	ldw	r6,12(sp)
  810b40:	d9400217 	ldw	r5,8(sp)
  810b44:	d9000117 	ldw	r4,4(sp)
  810b48:	100f883a 	mov	r7,r2
  810b4c:	dc400015 	stw	r17,0(sp)
  810b50:	803ee83a 	callr	r16
  810b54:	dfc00617 	ldw	ra,24(sp)
  810b58:	dc400517 	ldw	r17,20(sp)
  810b5c:	dc000417 	ldw	r16,16(sp)
  810b60:	dec00704 	addi	sp,sp,28
  810b64:	f800283a 	ret

00810b68 <__udivdi3>:
  810b68:	defff504 	addi	sp,sp,-44
  810b6c:	dcc00415 	stw	r19,16(sp)
  810b70:	dc000115 	stw	r16,4(sp)
  810b74:	dfc00a15 	stw	ra,40(sp)
  810b78:	df000915 	stw	fp,36(sp)
  810b7c:	ddc00815 	stw	r23,32(sp)
  810b80:	dd800715 	stw	r22,28(sp)
  810b84:	dd400615 	stw	r21,24(sp)
  810b88:	dd000515 	stw	r20,20(sp)
  810b8c:	dc800315 	stw	r18,12(sp)
  810b90:	dc400215 	stw	r17,8(sp)
  810b94:	2027883a 	mov	r19,r4
  810b98:	2821883a 	mov	r16,r5
  810b9c:	3800411e 	bne	r7,zero,810ca4 <__udivdi3+0x13c>
  810ba0:	3023883a 	mov	r17,r6
  810ba4:	2025883a 	mov	r18,r4
  810ba8:	2980522e 	bgeu	r5,r6,810cf4 <__udivdi3+0x18c>
  810bac:	00bfffd4 	movui	r2,65535
  810bb0:	282d883a 	mov	r22,r5
  810bb4:	1180a836 	bltu	r2,r6,810e58 <__udivdi3+0x2f0>
  810bb8:	00803fc4 	movi	r2,255
  810bbc:	1185803a 	cmpltu	r2,r2,r6
  810bc0:	100490fa 	slli	r2,r2,3
  810bc4:	3086d83a 	srl	r3,r6,r2
  810bc8:	01002074 	movhi	r4,129
  810bcc:	211b09c4 	addi	r4,r4,27687
  810bd0:	20c7883a 	add	r3,r4,r3
  810bd4:	18c00003 	ldbu	r3,0(r3)
  810bd8:	1885883a 	add	r2,r3,r2
  810bdc:	00c00804 	movi	r3,32
  810be0:	1887c83a 	sub	r3,r3,r2
  810be4:	18000526 	beq	r3,zero,810bfc <__udivdi3+0x94>
  810be8:	80e0983a 	sll	r16,r16,r3
  810bec:	9884d83a 	srl	r2,r19,r2
  810bf0:	30e2983a 	sll	r17,r6,r3
  810bf4:	98e4983a 	sll	r18,r19,r3
  810bf8:	142cb03a 	or	r22,r2,r16
  810bfc:	882ad43a 	srli	r21,r17,16
  810c00:	b009883a 	mov	r4,r22
  810c04:	8d3fffcc 	andi	r20,r17,65535
  810c08:	a80b883a 	mov	r5,r21
  810c0c:	08117740 	call	811774 <__umodsi3>
  810c10:	b009883a 	mov	r4,r22
  810c14:	a80b883a 	mov	r5,r21
  810c18:	1027883a 	mov	r19,r2
  810c1c:	08117100 	call	811710 <__udivsi3>
  810c20:	102d883a 	mov	r22,r2
  810c24:	9826943a 	slli	r19,r19,16
  810c28:	9004d43a 	srli	r2,r18,16
  810c2c:	a5a1383a 	mul	r16,r20,r22
  810c30:	14c4b03a 	or	r2,r2,r19
  810c34:	1400052e 	bgeu	r2,r16,810c4c <__udivdi3+0xe4>
  810c38:	1445883a 	add	r2,r2,r17
  810c3c:	b0ffffc4 	addi	r3,r22,-1
  810c40:	14400136 	bltu	r2,r17,810c48 <__udivdi3+0xe0>
  810c44:	14012336 	bltu	r2,r16,8110d4 <__udivdi3+0x56c>
  810c48:	182d883a 	mov	r22,r3
  810c4c:	1421c83a 	sub	r16,r2,r16
  810c50:	a80b883a 	mov	r5,r21
  810c54:	8009883a 	mov	r4,r16
  810c58:	08117740 	call	811774 <__umodsi3>
  810c5c:	1027883a 	mov	r19,r2
  810c60:	a80b883a 	mov	r5,r21
  810c64:	8009883a 	mov	r4,r16
  810c68:	08117100 	call	811710 <__udivsi3>
  810c6c:	9826943a 	slli	r19,r19,16
  810c70:	a0a9383a 	mul	r20,r20,r2
  810c74:	94bfffcc 	andi	r18,r18,65535
  810c78:	94e4b03a 	or	r18,r18,r19
  810c7c:	9500052e 	bgeu	r18,r20,810c94 <__udivdi3+0x12c>
  810c80:	8ca5883a 	add	r18,r17,r18
  810c84:	10ffffc4 	addi	r3,r2,-1
  810c88:	9440f136 	bltu	r18,r17,811050 <__udivdi3+0x4e8>
  810c8c:	9500f02e 	bgeu	r18,r20,811050 <__udivdi3+0x4e8>
  810c90:	10bfff84 	addi	r2,r2,-2
  810c94:	b00c943a 	slli	r6,r22,16
  810c98:	0007883a 	mov	r3,zero
  810c9c:	3084b03a 	or	r2,r6,r2
  810ca0:	00005906 	br	810e08 <__udivdi3+0x2a0>
  810ca4:	29c05636 	bltu	r5,r7,810e00 <__udivdi3+0x298>
  810ca8:	00bfffd4 	movui	r2,65535
  810cac:	11c0622e 	bgeu	r2,r7,810e38 <__udivdi3+0x2d0>
  810cb0:	00804034 	movhi	r2,256
  810cb4:	10bfffc4 	addi	r2,r2,-1
  810cb8:	11c0ee36 	bltu	r2,r7,811074 <__udivdi3+0x50c>
  810cbc:	00800404 	movi	r2,16
  810cc0:	3886d83a 	srl	r3,r7,r2
  810cc4:	01002074 	movhi	r4,129
  810cc8:	211b09c4 	addi	r4,r4,27687
  810ccc:	20c7883a 	add	r3,r4,r3
  810cd0:	18c00003 	ldbu	r3,0(r3)
  810cd4:	05400804 	movi	r21,32
  810cd8:	1885883a 	add	r2,r3,r2
  810cdc:	a8abc83a 	sub	r21,r21,r2
  810ce0:	a800621e 	bne	r21,zero,810e6c <__udivdi3+0x304>
  810ce4:	3c00e936 	bltu	r7,r16,81108c <__udivdi3+0x524>
  810ce8:	9985403a 	cmpgeu	r2,r19,r6
  810cec:	0007883a 	mov	r3,zero
  810cf0:	00004506 	br	810e08 <__udivdi3+0x2a0>
  810cf4:	3000041e 	bne	r6,zero,810d08 <__udivdi3+0x1a0>
  810cf8:	000b883a 	mov	r5,zero
  810cfc:	01000044 	movi	r4,1
  810d00:	08117100 	call	811710 <__udivsi3>
  810d04:	1023883a 	mov	r17,r2
  810d08:	00bfffd4 	movui	r2,65535
  810d0c:	14404e2e 	bgeu	r2,r17,810e48 <__udivdi3+0x2e0>
  810d10:	00804034 	movhi	r2,256
  810d14:	10bfffc4 	addi	r2,r2,-1
  810d18:	1440d836 	bltu	r2,r17,81107c <__udivdi3+0x514>
  810d1c:	00800404 	movi	r2,16
  810d20:	8886d83a 	srl	r3,r17,r2
  810d24:	01002074 	movhi	r4,129
  810d28:	211b09c4 	addi	r4,r4,27687
  810d2c:	20c7883a 	add	r3,r4,r3
  810d30:	18c00003 	ldbu	r3,0(r3)
  810d34:	1885883a 	add	r2,r3,r2
  810d38:	00c00804 	movi	r3,32
  810d3c:	1887c83a 	sub	r3,r3,r2
  810d40:	18008f1e 	bne	r3,zero,810f80 <__udivdi3+0x418>
  810d44:	882ad43a 	srli	r21,r17,16
  810d48:	8461c83a 	sub	r16,r16,r17
  810d4c:	8d3fffcc 	andi	r20,r17,65535
  810d50:	00c00044 	movi	r3,1
  810d54:	8009883a 	mov	r4,r16
  810d58:	a80b883a 	mov	r5,r21
  810d5c:	d8c00015 	stw	r3,0(sp)
  810d60:	08117740 	call	811774 <__umodsi3>
  810d64:	8009883a 	mov	r4,r16
  810d68:	a80b883a 	mov	r5,r21
  810d6c:	1027883a 	mov	r19,r2
  810d70:	08117100 	call	811710 <__udivsi3>
  810d74:	9826943a 	slli	r19,r19,16
  810d78:	9008d43a 	srli	r4,r18,16
  810d7c:	1521383a 	mul	r16,r2,r20
  810d80:	102d883a 	mov	r22,r2
  810d84:	24c8b03a 	or	r4,r4,r19
  810d88:	d8c00017 	ldw	r3,0(sp)
  810d8c:	2400052e 	bgeu	r4,r16,810da4 <__udivdi3+0x23c>
  810d90:	2449883a 	add	r4,r4,r17
  810d94:	b0bfffc4 	addi	r2,r22,-1
  810d98:	24400136 	bltu	r4,r17,810da0 <__udivdi3+0x238>
  810d9c:	2400ca36 	bltu	r4,r16,8110c8 <__udivdi3+0x560>
  810da0:	102d883a 	mov	r22,r2
  810da4:	2421c83a 	sub	r16,r4,r16
  810da8:	a80b883a 	mov	r5,r21
  810dac:	8009883a 	mov	r4,r16
  810db0:	d8c00015 	stw	r3,0(sp)
  810db4:	08117740 	call	811774 <__umodsi3>
  810db8:	1027883a 	mov	r19,r2
  810dbc:	a80b883a 	mov	r5,r21
  810dc0:	8009883a 	mov	r4,r16
  810dc4:	08117100 	call	811710 <__udivsi3>
  810dc8:	9826943a 	slli	r19,r19,16
  810dcc:	1529383a 	mul	r20,r2,r20
  810dd0:	94bfffcc 	andi	r18,r18,65535
  810dd4:	94e4b03a 	or	r18,r18,r19
  810dd8:	d8c00017 	ldw	r3,0(sp)
  810ddc:	9500052e 	bgeu	r18,r20,810df4 <__udivdi3+0x28c>
  810de0:	8ca5883a 	add	r18,r17,r18
  810de4:	113fffc4 	addi	r4,r2,-1
  810de8:	94409736 	bltu	r18,r17,811048 <__udivdi3+0x4e0>
  810dec:	9500962e 	bgeu	r18,r20,811048 <__udivdi3+0x4e0>
  810df0:	10bfff84 	addi	r2,r2,-2
  810df4:	b00c943a 	slli	r6,r22,16
  810df8:	3084b03a 	or	r2,r6,r2
  810dfc:	00000206 	br	810e08 <__udivdi3+0x2a0>
  810e00:	0007883a 	mov	r3,zero
  810e04:	0005883a 	mov	r2,zero
  810e08:	dfc00a17 	ldw	ra,40(sp)
  810e0c:	df000917 	ldw	fp,36(sp)
  810e10:	ddc00817 	ldw	r23,32(sp)
  810e14:	dd800717 	ldw	r22,28(sp)
  810e18:	dd400617 	ldw	r21,24(sp)
  810e1c:	dd000517 	ldw	r20,20(sp)
  810e20:	dcc00417 	ldw	r19,16(sp)
  810e24:	dc800317 	ldw	r18,12(sp)
  810e28:	dc400217 	ldw	r17,8(sp)
  810e2c:	dc000117 	ldw	r16,4(sp)
  810e30:	dec00b04 	addi	sp,sp,44
  810e34:	f800283a 	ret
  810e38:	00803fc4 	movi	r2,255
  810e3c:	11c5803a 	cmpltu	r2,r2,r7
  810e40:	100490fa 	slli	r2,r2,3
  810e44:	003f9e06 	br	810cc0 <__alt_mem_onchip_mem+0xff808cc0>
  810e48:	00803fc4 	movi	r2,255
  810e4c:	1445803a 	cmpltu	r2,r2,r17
  810e50:	100490fa 	slli	r2,r2,3
  810e54:	003fb206 	br	810d20 <__alt_mem_onchip_mem+0xff808d20>
  810e58:	00804034 	movhi	r2,256
  810e5c:	10bfffc4 	addi	r2,r2,-1
  810e60:	11808836 	bltu	r2,r6,811084 <__udivdi3+0x51c>
  810e64:	00800404 	movi	r2,16
  810e68:	003f5606 	br	810bc4 <__alt_mem_onchip_mem+0xff808bc4>
  810e6c:	30aed83a 	srl	r23,r6,r2
  810e70:	3d4e983a 	sll	r7,r7,r21
  810e74:	80acd83a 	srl	r22,r16,r2
  810e78:	9884d83a 	srl	r2,r19,r2
  810e7c:	3deeb03a 	or	r23,r7,r23
  810e80:	b824d43a 	srli	r18,r23,16
  810e84:	8560983a 	sll	r16,r16,r21
  810e88:	b009883a 	mov	r4,r22
  810e8c:	900b883a 	mov	r5,r18
  810e90:	3568983a 	sll	r20,r6,r21
  810e94:	1420b03a 	or	r16,r2,r16
  810e98:	08117740 	call	811774 <__umodsi3>
  810e9c:	b009883a 	mov	r4,r22
  810ea0:	900b883a 	mov	r5,r18
  810ea4:	1023883a 	mov	r17,r2
  810ea8:	08117100 	call	811710 <__udivsi3>
  810eac:	8808943a 	slli	r4,r17,16
  810eb0:	bf3fffcc 	andi	fp,r23,65535
  810eb4:	8006d43a 	srli	r3,r16,16
  810eb8:	e0a3383a 	mul	r17,fp,r2
  810ebc:	100d883a 	mov	r6,r2
  810ec0:	1906b03a 	or	r3,r3,r4
  810ec4:	1c40042e 	bgeu	r3,r17,810ed8 <__udivdi3+0x370>
  810ec8:	1dc7883a 	add	r3,r3,r23
  810ecc:	10bfffc4 	addi	r2,r2,-1
  810ed0:	1dc0752e 	bgeu	r3,r23,8110a8 <__udivdi3+0x540>
  810ed4:	100d883a 	mov	r6,r2
  810ed8:	1c63c83a 	sub	r17,r3,r17
  810edc:	900b883a 	mov	r5,r18
  810ee0:	8809883a 	mov	r4,r17
  810ee4:	d9800015 	stw	r6,0(sp)
  810ee8:	08117740 	call	811774 <__umodsi3>
  810eec:	102d883a 	mov	r22,r2
  810ef0:	8809883a 	mov	r4,r17
  810ef4:	900b883a 	mov	r5,r18
  810ef8:	08117100 	call	811710 <__udivsi3>
  810efc:	b02c943a 	slli	r22,r22,16
  810f00:	e089383a 	mul	r4,fp,r2
  810f04:	843fffcc 	andi	r16,r16,65535
  810f08:	85a0b03a 	or	r16,r16,r22
  810f0c:	d9800017 	ldw	r6,0(sp)
  810f10:	8100042e 	bgeu	r16,r4,810f24 <__udivdi3+0x3bc>
  810f14:	85e1883a 	add	r16,r16,r23
  810f18:	10ffffc4 	addi	r3,r2,-1
  810f1c:	85c05e2e 	bgeu	r16,r23,811098 <__udivdi3+0x530>
  810f20:	1805883a 	mov	r2,r3
  810f24:	300c943a 	slli	r6,r6,16
  810f28:	a17fffcc 	andi	r5,r20,65535
  810f2c:	a028d43a 	srli	r20,r20,16
  810f30:	3084b03a 	or	r2,r6,r2
  810f34:	10ffffcc 	andi	r3,r2,65535
  810f38:	100cd43a 	srli	r6,r2,16
  810f3c:	194f383a 	mul	r7,r3,r5
  810f40:	1d07383a 	mul	r3,r3,r20
  810f44:	314b383a 	mul	r5,r6,r5
  810f48:	3810d43a 	srli	r8,r7,16
  810f4c:	8121c83a 	sub	r16,r16,r4
  810f50:	1947883a 	add	r3,r3,r5
  810f54:	40c7883a 	add	r3,r8,r3
  810f58:	350d383a 	mul	r6,r6,r20
  810f5c:	1940022e 	bgeu	r3,r5,810f68 <__udivdi3+0x400>
  810f60:	01000074 	movhi	r4,1
  810f64:	310d883a 	add	r6,r6,r4
  810f68:	1828d43a 	srli	r20,r3,16
  810f6c:	a18d883a 	add	r6,r20,r6
  810f70:	81803e36 	bltu	r16,r6,81106c <__udivdi3+0x504>
  810f74:	81803826 	beq	r16,r6,811058 <__udivdi3+0x4f0>
  810f78:	0007883a 	mov	r3,zero
  810f7c:	003fa206 	br	810e08 <__alt_mem_onchip_mem+0xff808e08>
  810f80:	88e2983a 	sll	r17,r17,r3
  810f84:	80a8d83a 	srl	r20,r16,r2
  810f88:	80e0983a 	sll	r16,r16,r3
  810f8c:	882ad43a 	srli	r21,r17,16
  810f90:	9884d83a 	srl	r2,r19,r2
  810f94:	a009883a 	mov	r4,r20
  810f98:	a80b883a 	mov	r5,r21
  810f9c:	142eb03a 	or	r23,r2,r16
  810fa0:	98e4983a 	sll	r18,r19,r3
  810fa4:	08117740 	call	811774 <__umodsi3>
  810fa8:	a009883a 	mov	r4,r20
  810fac:	a80b883a 	mov	r5,r21
  810fb0:	1021883a 	mov	r16,r2
  810fb4:	08117100 	call	811710 <__udivsi3>
  810fb8:	1039883a 	mov	fp,r2
  810fbc:	8d3fffcc 	andi	r20,r17,65535
  810fc0:	8020943a 	slli	r16,r16,16
  810fc4:	b804d43a 	srli	r2,r23,16
  810fc8:	a72d383a 	mul	r22,r20,fp
  810fcc:	1404b03a 	or	r2,r2,r16
  810fd0:	1580062e 	bgeu	r2,r22,810fec <__udivdi3+0x484>
  810fd4:	1445883a 	add	r2,r2,r17
  810fd8:	e0ffffc4 	addi	r3,fp,-1
  810fdc:	14403836 	bltu	r2,r17,8110c0 <__udivdi3+0x558>
  810fe0:	1580372e 	bgeu	r2,r22,8110c0 <__udivdi3+0x558>
  810fe4:	e73fff84 	addi	fp,fp,-2
  810fe8:	1445883a 	add	r2,r2,r17
  810fec:	15adc83a 	sub	r22,r2,r22
  810ff0:	a80b883a 	mov	r5,r21
  810ff4:	b009883a 	mov	r4,r22
  810ff8:	08117740 	call	811774 <__umodsi3>
  810ffc:	1027883a 	mov	r19,r2
  811000:	b009883a 	mov	r4,r22
  811004:	a80b883a 	mov	r5,r21
  811008:	08117100 	call	811710 <__udivsi3>
  81100c:	9826943a 	slli	r19,r19,16
  811010:	a0a1383a 	mul	r16,r20,r2
  811014:	b93fffcc 	andi	r4,r23,65535
  811018:	24c8b03a 	or	r4,r4,r19
  81101c:	2400062e 	bgeu	r4,r16,811038 <__udivdi3+0x4d0>
  811020:	2449883a 	add	r4,r4,r17
  811024:	10ffffc4 	addi	r3,r2,-1
  811028:	24402336 	bltu	r4,r17,8110b8 <__udivdi3+0x550>
  81102c:	2400222e 	bgeu	r4,r16,8110b8 <__udivdi3+0x550>
  811030:	10bfff84 	addi	r2,r2,-2
  811034:	2449883a 	add	r4,r4,r17
  811038:	e038943a 	slli	fp,fp,16
  81103c:	2421c83a 	sub	r16,r4,r16
  811040:	e086b03a 	or	r3,fp,r2
  811044:	003f4306 	br	810d54 <__alt_mem_onchip_mem+0xff808d54>
  811048:	2005883a 	mov	r2,r4
  81104c:	003f6906 	br	810df4 <__alt_mem_onchip_mem+0xff808df4>
  811050:	1805883a 	mov	r2,r3
  811054:	003f0f06 	br	810c94 <__alt_mem_onchip_mem+0xff808c94>
  811058:	1806943a 	slli	r3,r3,16
  81105c:	9d66983a 	sll	r19,r19,r21
  811060:	39ffffcc 	andi	r7,r7,65535
  811064:	19c7883a 	add	r3,r3,r7
  811068:	98ffc32e 	bgeu	r19,r3,810f78 <__alt_mem_onchip_mem+0xff808f78>
  81106c:	10bfffc4 	addi	r2,r2,-1
  811070:	003fc106 	br	810f78 <__alt_mem_onchip_mem+0xff808f78>
  811074:	00800604 	movi	r2,24
  811078:	003f1106 	br	810cc0 <__alt_mem_onchip_mem+0xff808cc0>
  81107c:	00800604 	movi	r2,24
  811080:	003f2706 	br	810d20 <__alt_mem_onchip_mem+0xff808d20>
  811084:	00800604 	movi	r2,24
  811088:	003ece06 	br	810bc4 <__alt_mem_onchip_mem+0xff808bc4>
  81108c:	0007883a 	mov	r3,zero
  811090:	00800044 	movi	r2,1
  811094:	003f5c06 	br	810e08 <__alt_mem_onchip_mem+0xff808e08>
  811098:	813fa12e 	bgeu	r16,r4,810f20 <__alt_mem_onchip_mem+0xff808f20>
  81109c:	10bfff84 	addi	r2,r2,-2
  8110a0:	85e1883a 	add	r16,r16,r23
  8110a4:	003f9f06 	br	810f24 <__alt_mem_onchip_mem+0xff808f24>
  8110a8:	1c7f8a2e 	bgeu	r3,r17,810ed4 <__alt_mem_onchip_mem+0xff808ed4>
  8110ac:	31bfff84 	addi	r6,r6,-2
  8110b0:	1dc7883a 	add	r3,r3,r23
  8110b4:	003f8806 	br	810ed8 <__alt_mem_onchip_mem+0xff808ed8>
  8110b8:	1805883a 	mov	r2,r3
  8110bc:	003fde06 	br	811038 <__alt_mem_onchip_mem+0xff809038>
  8110c0:	1839883a 	mov	fp,r3
  8110c4:	003fc906 	br	810fec <__alt_mem_onchip_mem+0xff808fec>
  8110c8:	b5bfff84 	addi	r22,r22,-2
  8110cc:	2449883a 	add	r4,r4,r17
  8110d0:	003f3406 	br	810da4 <__alt_mem_onchip_mem+0xff808da4>
  8110d4:	b5bfff84 	addi	r22,r22,-2
  8110d8:	1445883a 	add	r2,r2,r17
  8110dc:	003edb06 	br	810c4c <__alt_mem_onchip_mem+0xff808c4c>

008110e0 <__umoddi3>:
  8110e0:	defff404 	addi	sp,sp,-48
  8110e4:	df000a15 	stw	fp,40(sp)
  8110e8:	dc400315 	stw	r17,12(sp)
  8110ec:	dc000215 	stw	r16,8(sp)
  8110f0:	dfc00b15 	stw	ra,44(sp)
  8110f4:	ddc00915 	stw	r23,36(sp)
  8110f8:	dd800815 	stw	r22,32(sp)
  8110fc:	dd400715 	stw	r21,28(sp)
  811100:	dd000615 	stw	r20,24(sp)
  811104:	dcc00515 	stw	r19,20(sp)
  811108:	dc800415 	stw	r18,16(sp)
  81110c:	2021883a 	mov	r16,r4
  811110:	2823883a 	mov	r17,r5
  811114:	2839883a 	mov	fp,r5
  811118:	38003c1e 	bne	r7,zero,81120c <__umoddi3+0x12c>
  81111c:	3027883a 	mov	r19,r6
  811120:	2029883a 	mov	r20,r4
  811124:	2980512e 	bgeu	r5,r6,81126c <__umoddi3+0x18c>
  811128:	00bfffd4 	movui	r2,65535
  81112c:	11809a36 	bltu	r2,r6,811398 <__umoddi3+0x2b8>
  811130:	01003fc4 	movi	r4,255
  811134:	2189803a 	cmpltu	r4,r4,r6
  811138:	200890fa 	slli	r4,r4,3
  81113c:	3104d83a 	srl	r2,r6,r4
  811140:	00c02074 	movhi	r3,129
  811144:	18db09c4 	addi	r3,r3,27687
  811148:	1885883a 	add	r2,r3,r2
  81114c:	10c00003 	ldbu	r3,0(r2)
  811150:	00800804 	movi	r2,32
  811154:	1909883a 	add	r4,r3,r4
  811158:	1125c83a 	sub	r18,r2,r4
  81115c:	90000526 	beq	r18,zero,811174 <__umoddi3+0x94>
  811160:	8ca2983a 	sll	r17,r17,r18
  811164:	8108d83a 	srl	r4,r16,r4
  811168:	34a6983a 	sll	r19,r6,r18
  81116c:	84a8983a 	sll	r20,r16,r18
  811170:	2478b03a 	or	fp,r4,r17
  811174:	982ed43a 	srli	r23,r19,16
  811178:	e009883a 	mov	r4,fp
  81117c:	9dbfffcc 	andi	r22,r19,65535
  811180:	b80b883a 	mov	r5,r23
  811184:	08117740 	call	811774 <__umodsi3>
  811188:	e009883a 	mov	r4,fp
  81118c:	b80b883a 	mov	r5,r23
  811190:	102b883a 	mov	r21,r2
  811194:	08117100 	call	811710 <__udivsi3>
  811198:	a806943a 	slli	r3,r21,16
  81119c:	a008d43a 	srli	r4,r20,16
  8111a0:	b085383a 	mul	r2,r22,r2
  8111a4:	20c8b03a 	or	r4,r4,r3
  8111a8:	2080032e 	bgeu	r4,r2,8111b8 <__umoddi3+0xd8>
  8111ac:	24c9883a 	add	r4,r4,r19
  8111b0:	24c00136 	bltu	r4,r19,8111b8 <__umoddi3+0xd8>
  8111b4:	20811036 	bltu	r4,r2,8115f8 <__umoddi3+0x518>
  8111b8:	20abc83a 	sub	r21,r4,r2
  8111bc:	b80b883a 	mov	r5,r23
  8111c0:	a809883a 	mov	r4,r21
  8111c4:	08117740 	call	811774 <__umodsi3>
  8111c8:	1023883a 	mov	r17,r2
  8111cc:	b80b883a 	mov	r5,r23
  8111d0:	a809883a 	mov	r4,r21
  8111d4:	08117100 	call	811710 <__udivsi3>
  8111d8:	8822943a 	slli	r17,r17,16
  8111dc:	b085383a 	mul	r2,r22,r2
  8111e0:	a0ffffcc 	andi	r3,r20,65535
  8111e4:	1c46b03a 	or	r3,r3,r17
  8111e8:	1880042e 	bgeu	r3,r2,8111fc <__umoddi3+0x11c>
  8111ec:	1cc7883a 	add	r3,r3,r19
  8111f0:	1cc00236 	bltu	r3,r19,8111fc <__umoddi3+0x11c>
  8111f4:	1880012e 	bgeu	r3,r2,8111fc <__umoddi3+0x11c>
  8111f8:	1cc7883a 	add	r3,r3,r19
  8111fc:	1885c83a 	sub	r2,r3,r2
  811200:	1484d83a 	srl	r2,r2,r18
  811204:	0007883a 	mov	r3,zero
  811208:	00004f06 	br	811348 <__umoddi3+0x268>
  81120c:	29c04c36 	bltu	r5,r7,811340 <__umoddi3+0x260>
  811210:	00bfffd4 	movui	r2,65535
  811214:	11c0582e 	bgeu	r2,r7,811378 <__umoddi3+0x298>
  811218:	00804034 	movhi	r2,256
  81121c:	10bfffc4 	addi	r2,r2,-1
  811220:	11c0e736 	bltu	r2,r7,8115c0 <__umoddi3+0x4e0>
  811224:	01000404 	movi	r4,16
  811228:	3904d83a 	srl	r2,r7,r4
  81122c:	00c02074 	movhi	r3,129
  811230:	18db09c4 	addi	r3,r3,27687
  811234:	1885883a 	add	r2,r3,r2
  811238:	14c00003 	ldbu	r19,0(r2)
  81123c:	00c00804 	movi	r3,32
  811240:	9927883a 	add	r19,r19,r4
  811244:	1ce9c83a 	sub	r20,r3,r19
  811248:	a000581e 	bne	r20,zero,8113ac <__umoddi3+0x2cc>
  81124c:	3c400136 	bltu	r7,r17,811254 <__umoddi3+0x174>
  811250:	8180eb36 	bltu	r16,r6,811600 <__umoddi3+0x520>
  811254:	8185c83a 	sub	r2,r16,r6
  811258:	89e3c83a 	sub	r17,r17,r7
  81125c:	8089803a 	cmpltu	r4,r16,r2
  811260:	8939c83a 	sub	fp,r17,r4
  811264:	e007883a 	mov	r3,fp
  811268:	00003706 	br	811348 <__umoddi3+0x268>
  81126c:	3000041e 	bne	r6,zero,811280 <__umoddi3+0x1a0>
  811270:	000b883a 	mov	r5,zero
  811274:	01000044 	movi	r4,1
  811278:	08117100 	call	811710 <__udivsi3>
  81127c:	1027883a 	mov	r19,r2
  811280:	00bfffd4 	movui	r2,65535
  811284:	14c0402e 	bgeu	r2,r19,811388 <__umoddi3+0x2a8>
  811288:	00804034 	movhi	r2,256
  81128c:	10bfffc4 	addi	r2,r2,-1
  811290:	14c0cd36 	bltu	r2,r19,8115c8 <__umoddi3+0x4e8>
  811294:	00800404 	movi	r2,16
  811298:	9886d83a 	srl	r3,r19,r2
  81129c:	01002074 	movhi	r4,129
  8112a0:	211b09c4 	addi	r4,r4,27687
  8112a4:	20c7883a 	add	r3,r4,r3
  8112a8:	18c00003 	ldbu	r3,0(r3)
  8112ac:	1887883a 	add	r3,r3,r2
  8112b0:	00800804 	movi	r2,32
  8112b4:	10e5c83a 	sub	r18,r2,r3
  8112b8:	9000901e 	bne	r18,zero,8114fc <__umoddi3+0x41c>
  8112bc:	982cd43a 	srli	r22,r19,16
  8112c0:	8ce3c83a 	sub	r17,r17,r19
  8112c4:	9d7fffcc 	andi	r21,r19,65535
  8112c8:	b00b883a 	mov	r5,r22
  8112cc:	8809883a 	mov	r4,r17
  8112d0:	08117740 	call	811774 <__umodsi3>
  8112d4:	8809883a 	mov	r4,r17
  8112d8:	b00b883a 	mov	r5,r22
  8112dc:	1021883a 	mov	r16,r2
  8112e0:	08117100 	call	811710 <__udivsi3>
  8112e4:	8006943a 	slli	r3,r16,16
  8112e8:	a008d43a 	srli	r4,r20,16
  8112ec:	1545383a 	mul	r2,r2,r21
  8112f0:	20c8b03a 	or	r4,r4,r3
  8112f4:	2080042e 	bgeu	r4,r2,811308 <__umoddi3+0x228>
  8112f8:	24c9883a 	add	r4,r4,r19
  8112fc:	24c00236 	bltu	r4,r19,811308 <__umoddi3+0x228>
  811300:	2080012e 	bgeu	r4,r2,811308 <__umoddi3+0x228>
  811304:	24c9883a 	add	r4,r4,r19
  811308:	20a1c83a 	sub	r16,r4,r2
  81130c:	b00b883a 	mov	r5,r22
  811310:	8009883a 	mov	r4,r16
  811314:	08117740 	call	811774 <__umodsi3>
  811318:	1023883a 	mov	r17,r2
  81131c:	b00b883a 	mov	r5,r22
  811320:	8009883a 	mov	r4,r16
  811324:	08117100 	call	811710 <__udivsi3>
  811328:	8822943a 	slli	r17,r17,16
  81132c:	1545383a 	mul	r2,r2,r21
  811330:	a53fffcc 	andi	r20,r20,65535
  811334:	a446b03a 	or	r3,r20,r17
  811338:	18bfb02e 	bgeu	r3,r2,8111fc <__alt_mem_onchip_mem+0xff8091fc>
  81133c:	003fab06 	br	8111ec <__alt_mem_onchip_mem+0xff8091ec>
  811340:	2005883a 	mov	r2,r4
  811344:	2807883a 	mov	r3,r5
  811348:	dfc00b17 	ldw	ra,44(sp)
  81134c:	df000a17 	ldw	fp,40(sp)
  811350:	ddc00917 	ldw	r23,36(sp)
  811354:	dd800817 	ldw	r22,32(sp)
  811358:	dd400717 	ldw	r21,28(sp)
  81135c:	dd000617 	ldw	r20,24(sp)
  811360:	dcc00517 	ldw	r19,20(sp)
  811364:	dc800417 	ldw	r18,16(sp)
  811368:	dc400317 	ldw	r17,12(sp)
  81136c:	dc000217 	ldw	r16,8(sp)
  811370:	dec00c04 	addi	sp,sp,48
  811374:	f800283a 	ret
  811378:	04c03fc4 	movi	r19,255
  81137c:	99c9803a 	cmpltu	r4,r19,r7
  811380:	200890fa 	slli	r4,r4,3
  811384:	003fa806 	br	811228 <__alt_mem_onchip_mem+0xff809228>
  811388:	00803fc4 	movi	r2,255
  81138c:	14c5803a 	cmpltu	r2,r2,r19
  811390:	100490fa 	slli	r2,r2,3
  811394:	003fc006 	br	811298 <__alt_mem_onchip_mem+0xff809298>
  811398:	00804034 	movhi	r2,256
  81139c:	10bfffc4 	addi	r2,r2,-1
  8113a0:	11808b36 	bltu	r2,r6,8115d0 <__umoddi3+0x4f0>
  8113a4:	01000404 	movi	r4,16
  8113a8:	003f6406 	br	81113c <__alt_mem_onchip_mem+0xff80913c>
  8113ac:	34c4d83a 	srl	r2,r6,r19
  8113b0:	3d0e983a 	sll	r7,r7,r20
  8113b4:	8cf8d83a 	srl	fp,r17,r19
  8113b8:	8d10983a 	sll	r8,r17,r20
  8113bc:	38aab03a 	or	r21,r7,r2
  8113c0:	a82cd43a 	srli	r22,r21,16
  8113c4:	84e2d83a 	srl	r17,r16,r19
  8113c8:	e009883a 	mov	r4,fp
  8113cc:	b00b883a 	mov	r5,r22
  8113d0:	8a22b03a 	or	r17,r17,r8
  8113d4:	3524983a 	sll	r18,r6,r20
  8113d8:	08117740 	call	811774 <__umodsi3>
  8113dc:	e009883a 	mov	r4,fp
  8113e0:	b00b883a 	mov	r5,r22
  8113e4:	102f883a 	mov	r23,r2
  8113e8:	08117100 	call	811710 <__udivsi3>
  8113ec:	100d883a 	mov	r6,r2
  8113f0:	b808943a 	slli	r4,r23,16
  8113f4:	aa3fffcc 	andi	r8,r21,65535
  8113f8:	8804d43a 	srli	r2,r17,16
  8113fc:	41af383a 	mul	r23,r8,r6
  811400:	8520983a 	sll	r16,r16,r20
  811404:	1104b03a 	or	r2,r2,r4
  811408:	15c0042e 	bgeu	r2,r23,81141c <__umoddi3+0x33c>
  81140c:	1545883a 	add	r2,r2,r21
  811410:	30ffffc4 	addi	r3,r6,-1
  811414:	1540742e 	bgeu	r2,r21,8115e8 <__umoddi3+0x508>
  811418:	180d883a 	mov	r6,r3
  81141c:	15efc83a 	sub	r23,r2,r23
  811420:	b00b883a 	mov	r5,r22
  811424:	b809883a 	mov	r4,r23
  811428:	d9800115 	stw	r6,4(sp)
  81142c:	da000015 	stw	r8,0(sp)
  811430:	08117740 	call	811774 <__umodsi3>
  811434:	b00b883a 	mov	r5,r22
  811438:	b809883a 	mov	r4,r23
  81143c:	1039883a 	mov	fp,r2
  811440:	08117100 	call	811710 <__udivsi3>
  811444:	da000017 	ldw	r8,0(sp)
  811448:	e038943a 	slli	fp,fp,16
  81144c:	100b883a 	mov	r5,r2
  811450:	4089383a 	mul	r4,r8,r2
  811454:	8a3fffcc 	andi	r8,r17,65535
  811458:	4710b03a 	or	r8,r8,fp
  81145c:	d9800117 	ldw	r6,4(sp)
  811460:	4100042e 	bgeu	r8,r4,811474 <__umoddi3+0x394>
  811464:	4551883a 	add	r8,r8,r21
  811468:	10bfffc4 	addi	r2,r2,-1
  81146c:	45405a2e 	bgeu	r8,r21,8115d8 <__umoddi3+0x4f8>
  811470:	100b883a 	mov	r5,r2
  811474:	300c943a 	slli	r6,r6,16
  811478:	91ffffcc 	andi	r7,r18,65535
  81147c:	9004d43a 	srli	r2,r18,16
  811480:	314cb03a 	or	r6,r6,r5
  811484:	317fffcc 	andi	r5,r6,65535
  811488:	300cd43a 	srli	r6,r6,16
  81148c:	29d3383a 	mul	r9,r5,r7
  811490:	288b383a 	mul	r5,r5,r2
  811494:	31cf383a 	mul	r7,r6,r7
  811498:	4806d43a 	srli	r3,r9,16
  81149c:	4111c83a 	sub	r8,r8,r4
  8114a0:	29cb883a 	add	r5,r5,r7
  8114a4:	194b883a 	add	r5,r3,r5
  8114a8:	3085383a 	mul	r2,r6,r2
  8114ac:	29c0022e 	bgeu	r5,r7,8114b8 <__umoddi3+0x3d8>
  8114b0:	00c00074 	movhi	r3,1
  8114b4:	10c5883a 	add	r2,r2,r3
  8114b8:	2808d43a 	srli	r4,r5,16
  8114bc:	280a943a 	slli	r5,r5,16
  8114c0:	4a7fffcc 	andi	r9,r9,65535
  8114c4:	2085883a 	add	r2,r4,r2
  8114c8:	2a4b883a 	add	r5,r5,r9
  8114cc:	40803636 	bltu	r8,r2,8115a8 <__umoddi3+0x4c8>
  8114d0:	40804d26 	beq	r8,r2,811608 <__umoddi3+0x528>
  8114d4:	4089c83a 	sub	r4,r8,r2
  8114d8:	280f883a 	mov	r7,r5
  8114dc:	81cfc83a 	sub	r7,r16,r7
  8114e0:	81c7803a 	cmpltu	r3,r16,r7
  8114e4:	20c7c83a 	sub	r3,r4,r3
  8114e8:	1cc4983a 	sll	r2,r3,r19
  8114ec:	3d0ed83a 	srl	r7,r7,r20
  8114f0:	1d06d83a 	srl	r3,r3,r20
  8114f4:	11c4b03a 	or	r2,r2,r7
  8114f8:	003f9306 	br	811348 <__alt_mem_onchip_mem+0xff809348>
  8114fc:	9ca6983a 	sll	r19,r19,r18
  811500:	88e8d83a 	srl	r20,r17,r3
  811504:	80c4d83a 	srl	r2,r16,r3
  811508:	982cd43a 	srli	r22,r19,16
  81150c:	8ca2983a 	sll	r17,r17,r18
  811510:	a009883a 	mov	r4,r20
  811514:	b00b883a 	mov	r5,r22
  811518:	1478b03a 	or	fp,r2,r17
  81151c:	08117740 	call	811774 <__umodsi3>
  811520:	a009883a 	mov	r4,r20
  811524:	b00b883a 	mov	r5,r22
  811528:	1023883a 	mov	r17,r2
  81152c:	08117100 	call	811710 <__udivsi3>
  811530:	9d7fffcc 	andi	r21,r19,65535
  811534:	880a943a 	slli	r5,r17,16
  811538:	e008d43a 	srli	r4,fp,16
  81153c:	a885383a 	mul	r2,r21,r2
  811540:	84a8983a 	sll	r20,r16,r18
  811544:	2148b03a 	or	r4,r4,r5
  811548:	2080042e 	bgeu	r4,r2,81155c <__umoddi3+0x47c>
  81154c:	24c9883a 	add	r4,r4,r19
  811550:	24c00236 	bltu	r4,r19,81155c <__umoddi3+0x47c>
  811554:	2080012e 	bgeu	r4,r2,81155c <__umoddi3+0x47c>
  811558:	24c9883a 	add	r4,r4,r19
  81155c:	20a3c83a 	sub	r17,r4,r2
  811560:	b00b883a 	mov	r5,r22
  811564:	8809883a 	mov	r4,r17
  811568:	08117740 	call	811774 <__umodsi3>
  81156c:	102f883a 	mov	r23,r2
  811570:	8809883a 	mov	r4,r17
  811574:	b00b883a 	mov	r5,r22
  811578:	08117100 	call	811710 <__udivsi3>
  81157c:	b82e943a 	slli	r23,r23,16
  811580:	a885383a 	mul	r2,r21,r2
  811584:	e13fffcc 	andi	r4,fp,65535
  811588:	25c8b03a 	or	r4,r4,r23
  81158c:	2080042e 	bgeu	r4,r2,8115a0 <__umoddi3+0x4c0>
  811590:	24c9883a 	add	r4,r4,r19
  811594:	24c00236 	bltu	r4,r19,8115a0 <__umoddi3+0x4c0>
  811598:	2080012e 	bgeu	r4,r2,8115a0 <__umoddi3+0x4c0>
  81159c:	24c9883a 	add	r4,r4,r19
  8115a0:	20a3c83a 	sub	r17,r4,r2
  8115a4:	003f4806 	br	8112c8 <__alt_mem_onchip_mem+0xff8092c8>
  8115a8:	2c8fc83a 	sub	r7,r5,r18
  8115ac:	1545c83a 	sub	r2,r2,r21
  8115b0:	29cb803a 	cmpltu	r5,r5,r7
  8115b4:	1145c83a 	sub	r2,r2,r5
  8115b8:	4089c83a 	sub	r4,r8,r2
  8115bc:	003fc706 	br	8114dc <__alt_mem_onchip_mem+0xff8094dc>
  8115c0:	01000604 	movi	r4,24
  8115c4:	003f1806 	br	811228 <__alt_mem_onchip_mem+0xff809228>
  8115c8:	00800604 	movi	r2,24
  8115cc:	003f3206 	br	811298 <__alt_mem_onchip_mem+0xff809298>
  8115d0:	01000604 	movi	r4,24
  8115d4:	003ed906 	br	81113c <__alt_mem_onchip_mem+0xff80913c>
  8115d8:	413fa52e 	bgeu	r8,r4,811470 <__alt_mem_onchip_mem+0xff809470>
  8115dc:	297fff84 	addi	r5,r5,-2
  8115e0:	4551883a 	add	r8,r8,r21
  8115e4:	003fa306 	br	811474 <__alt_mem_onchip_mem+0xff809474>
  8115e8:	15ff8b2e 	bgeu	r2,r23,811418 <__alt_mem_onchip_mem+0xff809418>
  8115ec:	31bfff84 	addi	r6,r6,-2
  8115f0:	1545883a 	add	r2,r2,r21
  8115f4:	003f8906 	br	81141c <__alt_mem_onchip_mem+0xff80941c>
  8115f8:	24c9883a 	add	r4,r4,r19
  8115fc:	003eee06 	br	8111b8 <__alt_mem_onchip_mem+0xff8091b8>
  811600:	8005883a 	mov	r2,r16
  811604:	003f1706 	br	811264 <__alt_mem_onchip_mem+0xff809264>
  811608:	817fe736 	bltu	r16,r5,8115a8 <__alt_mem_onchip_mem+0xff8095a8>
  81160c:	280f883a 	mov	r7,r5
  811610:	0009883a 	mov	r4,zero
  811614:	003fb106 	br	8114dc <__alt_mem_onchip_mem+0xff8094dc>

00811618 <__divsi3>:
  811618:	20001b16 	blt	r4,zero,811688 <__divsi3+0x70>
  81161c:	000f883a 	mov	r7,zero
  811620:	28001616 	blt	r5,zero,81167c <__divsi3+0x64>
  811624:	200d883a 	mov	r6,r4
  811628:	29001a2e 	bgeu	r5,r4,811694 <__divsi3+0x7c>
  81162c:	00800804 	movi	r2,32
  811630:	00c00044 	movi	r3,1
  811634:	00000106 	br	81163c <__divsi3+0x24>
  811638:	10000d26 	beq	r2,zero,811670 <__divsi3+0x58>
  81163c:	294b883a 	add	r5,r5,r5
  811640:	10bfffc4 	addi	r2,r2,-1
  811644:	18c7883a 	add	r3,r3,r3
  811648:	293ffb36 	bltu	r5,r4,811638 <__alt_mem_onchip_mem+0xff809638>
  81164c:	0005883a 	mov	r2,zero
  811650:	18000726 	beq	r3,zero,811670 <__divsi3+0x58>
  811654:	0005883a 	mov	r2,zero
  811658:	31400236 	bltu	r6,r5,811664 <__divsi3+0x4c>
  81165c:	314dc83a 	sub	r6,r6,r5
  811660:	10c4b03a 	or	r2,r2,r3
  811664:	1806d07a 	srli	r3,r3,1
  811668:	280ad07a 	srli	r5,r5,1
  81166c:	183ffa1e 	bne	r3,zero,811658 <__alt_mem_onchip_mem+0xff809658>
  811670:	38000126 	beq	r7,zero,811678 <__divsi3+0x60>
  811674:	0085c83a 	sub	r2,zero,r2
  811678:	f800283a 	ret
  81167c:	014bc83a 	sub	r5,zero,r5
  811680:	39c0005c 	xori	r7,r7,1
  811684:	003fe706 	br	811624 <__alt_mem_onchip_mem+0xff809624>
  811688:	0109c83a 	sub	r4,zero,r4
  81168c:	01c00044 	movi	r7,1
  811690:	003fe306 	br	811620 <__alt_mem_onchip_mem+0xff809620>
  811694:	00c00044 	movi	r3,1
  811698:	003fee06 	br	811654 <__alt_mem_onchip_mem+0xff809654>

0081169c <__modsi3>:
  81169c:	20001716 	blt	r4,zero,8116fc <__modsi3+0x60>
  8116a0:	000f883a 	mov	r7,zero
  8116a4:	2005883a 	mov	r2,r4
  8116a8:	28001216 	blt	r5,zero,8116f4 <__modsi3+0x58>
  8116ac:	2900162e 	bgeu	r5,r4,811708 <__modsi3+0x6c>
  8116b0:	01800804 	movi	r6,32
  8116b4:	00c00044 	movi	r3,1
  8116b8:	00000106 	br	8116c0 <__modsi3+0x24>
  8116bc:	30000a26 	beq	r6,zero,8116e8 <__modsi3+0x4c>
  8116c0:	294b883a 	add	r5,r5,r5
  8116c4:	31bfffc4 	addi	r6,r6,-1
  8116c8:	18c7883a 	add	r3,r3,r3
  8116cc:	293ffb36 	bltu	r5,r4,8116bc <__alt_mem_onchip_mem+0xff8096bc>
  8116d0:	18000526 	beq	r3,zero,8116e8 <__modsi3+0x4c>
  8116d4:	1806d07a 	srli	r3,r3,1
  8116d8:	11400136 	bltu	r2,r5,8116e0 <__modsi3+0x44>
  8116dc:	1145c83a 	sub	r2,r2,r5
  8116e0:	280ad07a 	srli	r5,r5,1
  8116e4:	183ffb1e 	bne	r3,zero,8116d4 <__alt_mem_onchip_mem+0xff8096d4>
  8116e8:	38000126 	beq	r7,zero,8116f0 <__modsi3+0x54>
  8116ec:	0085c83a 	sub	r2,zero,r2
  8116f0:	f800283a 	ret
  8116f4:	014bc83a 	sub	r5,zero,r5
  8116f8:	003fec06 	br	8116ac <__alt_mem_onchip_mem+0xff8096ac>
  8116fc:	0109c83a 	sub	r4,zero,r4
  811700:	01c00044 	movi	r7,1
  811704:	003fe706 	br	8116a4 <__alt_mem_onchip_mem+0xff8096a4>
  811708:	00c00044 	movi	r3,1
  81170c:	003ff106 	br	8116d4 <__alt_mem_onchip_mem+0xff8096d4>

00811710 <__udivsi3>:
  811710:	200d883a 	mov	r6,r4
  811714:	2900152e 	bgeu	r5,r4,81176c <__udivsi3+0x5c>
  811718:	28001416 	blt	r5,zero,81176c <__udivsi3+0x5c>
  81171c:	00800804 	movi	r2,32
  811720:	00c00044 	movi	r3,1
  811724:	00000206 	br	811730 <__udivsi3+0x20>
  811728:	10000e26 	beq	r2,zero,811764 <__udivsi3+0x54>
  81172c:	28000516 	blt	r5,zero,811744 <__udivsi3+0x34>
  811730:	294b883a 	add	r5,r5,r5
  811734:	10bfffc4 	addi	r2,r2,-1
  811738:	18c7883a 	add	r3,r3,r3
  81173c:	293ffa36 	bltu	r5,r4,811728 <__alt_mem_onchip_mem+0xff809728>
  811740:	18000826 	beq	r3,zero,811764 <__udivsi3+0x54>
  811744:	0005883a 	mov	r2,zero
  811748:	31400236 	bltu	r6,r5,811754 <__udivsi3+0x44>
  81174c:	314dc83a 	sub	r6,r6,r5
  811750:	10c4b03a 	or	r2,r2,r3
  811754:	1806d07a 	srli	r3,r3,1
  811758:	280ad07a 	srli	r5,r5,1
  81175c:	183ffa1e 	bne	r3,zero,811748 <__alt_mem_onchip_mem+0xff809748>
  811760:	f800283a 	ret
  811764:	0005883a 	mov	r2,zero
  811768:	f800283a 	ret
  81176c:	00c00044 	movi	r3,1
  811770:	003ff406 	br	811744 <__alt_mem_onchip_mem+0xff809744>

00811774 <__umodsi3>:
  811774:	2005883a 	mov	r2,r4
  811778:	2900122e 	bgeu	r5,r4,8117c4 <__umodsi3+0x50>
  81177c:	28001116 	blt	r5,zero,8117c4 <__umodsi3+0x50>
  811780:	01800804 	movi	r6,32
  811784:	00c00044 	movi	r3,1
  811788:	00000206 	br	811794 <__umodsi3+0x20>
  81178c:	30000c26 	beq	r6,zero,8117c0 <__umodsi3+0x4c>
  811790:	28000516 	blt	r5,zero,8117a8 <__umodsi3+0x34>
  811794:	294b883a 	add	r5,r5,r5
  811798:	31bfffc4 	addi	r6,r6,-1
  81179c:	18c7883a 	add	r3,r3,r3
  8117a0:	293ffa36 	bltu	r5,r4,81178c <__alt_mem_onchip_mem+0xff80978c>
  8117a4:	18000626 	beq	r3,zero,8117c0 <__umodsi3+0x4c>
  8117a8:	1806d07a 	srli	r3,r3,1
  8117ac:	11400136 	bltu	r2,r5,8117b4 <__umodsi3+0x40>
  8117b0:	1145c83a 	sub	r2,r2,r5
  8117b4:	280ad07a 	srli	r5,r5,1
  8117b8:	183ffb1e 	bne	r3,zero,8117a8 <__alt_mem_onchip_mem+0xff8097a8>
  8117bc:	f800283a 	ret
  8117c0:	f800283a 	ret
  8117c4:	00c00044 	movi	r3,1
  8117c8:	003ff706 	br	8117a8 <__alt_mem_onchip_mem+0xff8097a8>

008117cc <__divdf3>:
  8117cc:	defff204 	addi	sp,sp,-56
  8117d0:	dd400915 	stw	r21,36(sp)
  8117d4:	282ad53a 	srli	r21,r5,20
  8117d8:	dd000815 	stw	r20,32(sp)
  8117dc:	2828d7fa 	srli	r20,r5,31
  8117e0:	dc000415 	stw	r16,16(sp)
  8117e4:	04000434 	movhi	r16,16
  8117e8:	df000c15 	stw	fp,48(sp)
  8117ec:	843fffc4 	addi	r16,r16,-1
  8117f0:	dfc00d15 	stw	ra,52(sp)
  8117f4:	ddc00b15 	stw	r23,44(sp)
  8117f8:	dd800a15 	stw	r22,40(sp)
  8117fc:	dcc00715 	stw	r19,28(sp)
  811800:	dc800615 	stw	r18,24(sp)
  811804:	dc400515 	stw	r17,20(sp)
  811808:	ad41ffcc 	andi	r21,r21,2047
  81180c:	2c20703a 	and	r16,r5,r16
  811810:	a7003fcc 	andi	fp,r20,255
  811814:	a8006126 	beq	r21,zero,81199c <__divdf3+0x1d0>
  811818:	0081ffc4 	movi	r2,2047
  81181c:	2025883a 	mov	r18,r4
  811820:	a8803726 	beq	r21,r2,811900 <__divdf3+0x134>
  811824:	80800434 	orhi	r2,r16,16
  811828:	100490fa 	slli	r2,r2,3
  81182c:	2020d77a 	srli	r16,r4,29
  811830:	202490fa 	slli	r18,r4,3
  811834:	ad7f0044 	addi	r21,r21,-1023
  811838:	80a0b03a 	or	r16,r16,r2
  81183c:	0027883a 	mov	r19,zero
  811840:	0013883a 	mov	r9,zero
  811844:	3804d53a 	srli	r2,r7,20
  811848:	382cd7fa 	srli	r22,r7,31
  81184c:	04400434 	movhi	r17,16
  811850:	8c7fffc4 	addi	r17,r17,-1
  811854:	1081ffcc 	andi	r2,r2,2047
  811858:	3011883a 	mov	r8,r6
  81185c:	3c62703a 	and	r17,r7,r17
  811860:	b5c03fcc 	andi	r23,r22,255
  811864:	10006c26 	beq	r2,zero,811a18 <__divdf3+0x24c>
  811868:	00c1ffc4 	movi	r3,2047
  81186c:	10c06426 	beq	r2,r3,811a00 <__divdf3+0x234>
  811870:	88c00434 	orhi	r3,r17,16
  811874:	180690fa 	slli	r3,r3,3
  811878:	3022d77a 	srli	r17,r6,29
  81187c:	301090fa 	slli	r8,r6,3
  811880:	10bf0044 	addi	r2,r2,-1023
  811884:	88e2b03a 	or	r17,r17,r3
  811888:	000f883a 	mov	r7,zero
  81188c:	a58cf03a 	xor	r6,r20,r22
  811890:	3cc8b03a 	or	r4,r7,r19
  811894:	a8abc83a 	sub	r21,r21,r2
  811898:	008003c4 	movi	r2,15
  81189c:	3007883a 	mov	r3,r6
  8118a0:	34c03fcc 	andi	r19,r6,255
  8118a4:	11009036 	bltu	r2,r4,811ae8 <__divdf3+0x31c>
  8118a8:	200890ba 	slli	r4,r4,2
  8118ac:	00802074 	movhi	r2,129
  8118b0:	10863004 	addi	r2,r2,6336
  8118b4:	2089883a 	add	r4,r4,r2
  8118b8:	20800017 	ldw	r2,0(r4)
  8118bc:	1000683a 	jmp	r2
  8118c0:	00811ae8 	cmpgeui	r2,zero,1131
  8118c4:	00811938 	rdprs	r2,zero,1124
  8118c8:	00811ad8 	cmpnei	r2,zero,1131
  8118cc:	0081192c 	andhi	r2,zero,1124
  8118d0:	00811ad8 	cmpnei	r2,zero,1131
  8118d4:	00811aac 	andhi	r2,zero,1130
  8118d8:	00811ad8 	cmpnei	r2,zero,1131
  8118dc:	0081192c 	andhi	r2,zero,1124
  8118e0:	00811938 	rdprs	r2,zero,1124
  8118e4:	00811938 	rdprs	r2,zero,1124
  8118e8:	00811aac 	andhi	r2,zero,1130
  8118ec:	0081192c 	andhi	r2,zero,1124
  8118f0:	0081191c 	xori	r2,zero,1124
  8118f4:	0081191c 	xori	r2,zero,1124
  8118f8:	0081191c 	xori	r2,zero,1124
  8118fc:	00811dcc 	andi	r2,zero,1143
  811900:	2404b03a 	or	r2,r4,r16
  811904:	1000661e 	bne	r2,zero,811aa0 <__divdf3+0x2d4>
  811908:	04c00204 	movi	r19,8
  81190c:	0021883a 	mov	r16,zero
  811910:	0025883a 	mov	r18,zero
  811914:	02400084 	movi	r9,2
  811918:	003fca06 	br	811844 <__alt_mem_onchip_mem+0xff809844>
  81191c:	8023883a 	mov	r17,r16
  811920:	9011883a 	mov	r8,r18
  811924:	e02f883a 	mov	r23,fp
  811928:	480f883a 	mov	r7,r9
  81192c:	00800084 	movi	r2,2
  811930:	3881311e 	bne	r7,r2,811df8 <__divdf3+0x62c>
  811934:	b827883a 	mov	r19,r23
  811938:	98c0004c 	andi	r3,r19,1
  81193c:	0081ffc4 	movi	r2,2047
  811940:	000b883a 	mov	r5,zero
  811944:	0025883a 	mov	r18,zero
  811948:	1004953a 	slli	r2,r2,20
  81194c:	18c03fcc 	andi	r3,r3,255
  811950:	04400434 	movhi	r17,16
  811954:	8c7fffc4 	addi	r17,r17,-1
  811958:	180697fa 	slli	r3,r3,31
  81195c:	2c4a703a 	and	r5,r5,r17
  811960:	288ab03a 	or	r5,r5,r2
  811964:	28c6b03a 	or	r3,r5,r3
  811968:	9005883a 	mov	r2,r18
  81196c:	dfc00d17 	ldw	ra,52(sp)
  811970:	df000c17 	ldw	fp,48(sp)
  811974:	ddc00b17 	ldw	r23,44(sp)
  811978:	dd800a17 	ldw	r22,40(sp)
  81197c:	dd400917 	ldw	r21,36(sp)
  811980:	dd000817 	ldw	r20,32(sp)
  811984:	dcc00717 	ldw	r19,28(sp)
  811988:	dc800617 	ldw	r18,24(sp)
  81198c:	dc400517 	ldw	r17,20(sp)
  811990:	dc000417 	ldw	r16,16(sp)
  811994:	dec00e04 	addi	sp,sp,56
  811998:	f800283a 	ret
  81199c:	2404b03a 	or	r2,r4,r16
  8119a0:	2027883a 	mov	r19,r4
  8119a4:	10003926 	beq	r2,zero,811a8c <__divdf3+0x2c0>
  8119a8:	80012e26 	beq	r16,zero,811e64 <__divdf3+0x698>
  8119ac:	8009883a 	mov	r4,r16
  8119b0:	d9800315 	stw	r6,12(sp)
  8119b4:	d9c00215 	stw	r7,8(sp)
  8119b8:	0806b480 	call	806b48 <__clzsi2>
  8119bc:	d9800317 	ldw	r6,12(sp)
  8119c0:	d9c00217 	ldw	r7,8(sp)
  8119c4:	113ffd44 	addi	r4,r2,-11
  8119c8:	00c00704 	movi	r3,28
  8119cc:	19012116 	blt	r3,r4,811e54 <__divdf3+0x688>
  8119d0:	00c00744 	movi	r3,29
  8119d4:	147ffe04 	addi	r17,r2,-8
  8119d8:	1907c83a 	sub	r3,r3,r4
  8119dc:	8460983a 	sll	r16,r16,r17
  8119e0:	98c6d83a 	srl	r3,r19,r3
  8119e4:	9c64983a 	sll	r18,r19,r17
  8119e8:	1c20b03a 	or	r16,r3,r16
  8119ec:	1080fcc4 	addi	r2,r2,1011
  8119f0:	00abc83a 	sub	r21,zero,r2
  8119f4:	0027883a 	mov	r19,zero
  8119f8:	0013883a 	mov	r9,zero
  8119fc:	003f9106 	br	811844 <__alt_mem_onchip_mem+0xff809844>
  811a00:	3446b03a 	or	r3,r6,r17
  811a04:	18001f1e 	bne	r3,zero,811a84 <__divdf3+0x2b8>
  811a08:	0023883a 	mov	r17,zero
  811a0c:	0011883a 	mov	r8,zero
  811a10:	01c00084 	movi	r7,2
  811a14:	003f9d06 	br	81188c <__alt_mem_onchip_mem+0xff80988c>
  811a18:	3446b03a 	or	r3,r6,r17
  811a1c:	18001526 	beq	r3,zero,811a74 <__divdf3+0x2a8>
  811a20:	88011b26 	beq	r17,zero,811e90 <__divdf3+0x6c4>
  811a24:	8809883a 	mov	r4,r17
  811a28:	d9800315 	stw	r6,12(sp)
  811a2c:	da400115 	stw	r9,4(sp)
  811a30:	0806b480 	call	806b48 <__clzsi2>
  811a34:	d9800317 	ldw	r6,12(sp)
  811a38:	da400117 	ldw	r9,4(sp)
  811a3c:	113ffd44 	addi	r4,r2,-11
  811a40:	00c00704 	movi	r3,28
  811a44:	19010e16 	blt	r3,r4,811e80 <__divdf3+0x6b4>
  811a48:	00c00744 	movi	r3,29
  811a4c:	123ffe04 	addi	r8,r2,-8
  811a50:	1907c83a 	sub	r3,r3,r4
  811a54:	8a22983a 	sll	r17,r17,r8
  811a58:	30c6d83a 	srl	r3,r6,r3
  811a5c:	3210983a 	sll	r8,r6,r8
  811a60:	1c62b03a 	or	r17,r3,r17
  811a64:	1080fcc4 	addi	r2,r2,1011
  811a68:	0085c83a 	sub	r2,zero,r2
  811a6c:	000f883a 	mov	r7,zero
  811a70:	003f8606 	br	81188c <__alt_mem_onchip_mem+0xff80988c>
  811a74:	0023883a 	mov	r17,zero
  811a78:	0011883a 	mov	r8,zero
  811a7c:	01c00044 	movi	r7,1
  811a80:	003f8206 	br	81188c <__alt_mem_onchip_mem+0xff80988c>
  811a84:	01c000c4 	movi	r7,3
  811a88:	003f8006 	br	81188c <__alt_mem_onchip_mem+0xff80988c>
  811a8c:	04c00104 	movi	r19,4
  811a90:	0021883a 	mov	r16,zero
  811a94:	0025883a 	mov	r18,zero
  811a98:	02400044 	movi	r9,1
  811a9c:	003f6906 	br	811844 <__alt_mem_onchip_mem+0xff809844>
  811aa0:	04c00304 	movi	r19,12
  811aa4:	024000c4 	movi	r9,3
  811aa8:	003f6606 	br	811844 <__alt_mem_onchip_mem+0xff809844>
  811aac:	01400434 	movhi	r5,16
  811ab0:	0007883a 	mov	r3,zero
  811ab4:	297fffc4 	addi	r5,r5,-1
  811ab8:	04bfffc4 	movi	r18,-1
  811abc:	0081ffc4 	movi	r2,2047
  811ac0:	003fa106 	br	811948 <__alt_mem_onchip_mem+0xff809948>
  811ac4:	00c00044 	movi	r3,1
  811ac8:	1887c83a 	sub	r3,r3,r2
  811acc:	01000e04 	movi	r4,56
  811ad0:	20c1210e 	bge	r4,r3,811f58 <__divdf3+0x78c>
  811ad4:	98c0004c 	andi	r3,r19,1
  811ad8:	0005883a 	mov	r2,zero
  811adc:	000b883a 	mov	r5,zero
  811ae0:	0025883a 	mov	r18,zero
  811ae4:	003f9806 	br	811948 <__alt_mem_onchip_mem+0xff809948>
  811ae8:	8c00fd36 	bltu	r17,r16,811ee0 <__divdf3+0x714>
  811aec:	8440fb26 	beq	r16,r17,811edc <__divdf3+0x710>
  811af0:	8007883a 	mov	r3,r16
  811af4:	ad7fffc4 	addi	r21,r21,-1
  811af8:	0021883a 	mov	r16,zero
  811afc:	4004d63a 	srli	r2,r8,24
  811b00:	8822923a 	slli	r17,r17,8
  811b04:	1809883a 	mov	r4,r3
  811b08:	402c923a 	slli	r22,r8,8
  811b0c:	88b8b03a 	or	fp,r17,r2
  811b10:	e028d43a 	srli	r20,fp,16
  811b14:	d8c00015 	stw	r3,0(sp)
  811b18:	e5ffffcc 	andi	r23,fp,65535
  811b1c:	a00b883a 	mov	r5,r20
  811b20:	08117100 	call	811710 <__udivsi3>
  811b24:	d8c00017 	ldw	r3,0(sp)
  811b28:	a00b883a 	mov	r5,r20
  811b2c:	d8800315 	stw	r2,12(sp)
  811b30:	1809883a 	mov	r4,r3
  811b34:	08117740 	call	811774 <__umodsi3>
  811b38:	d9800317 	ldw	r6,12(sp)
  811b3c:	1006943a 	slli	r3,r2,16
  811b40:	9004d43a 	srli	r2,r18,16
  811b44:	b9a3383a 	mul	r17,r23,r6
  811b48:	10c4b03a 	or	r2,r2,r3
  811b4c:	1440062e 	bgeu	r2,r17,811b68 <__divdf3+0x39c>
  811b50:	1705883a 	add	r2,r2,fp
  811b54:	30ffffc4 	addi	r3,r6,-1
  811b58:	1700ee36 	bltu	r2,fp,811f14 <__divdf3+0x748>
  811b5c:	1440ed2e 	bgeu	r2,r17,811f14 <__divdf3+0x748>
  811b60:	31bfff84 	addi	r6,r6,-2
  811b64:	1705883a 	add	r2,r2,fp
  811b68:	1463c83a 	sub	r17,r2,r17
  811b6c:	a00b883a 	mov	r5,r20
  811b70:	8809883a 	mov	r4,r17
  811b74:	d9800315 	stw	r6,12(sp)
  811b78:	08117100 	call	811710 <__udivsi3>
  811b7c:	a00b883a 	mov	r5,r20
  811b80:	8809883a 	mov	r4,r17
  811b84:	d8800215 	stw	r2,8(sp)
  811b88:	08117740 	call	811774 <__umodsi3>
  811b8c:	d9c00217 	ldw	r7,8(sp)
  811b90:	1004943a 	slli	r2,r2,16
  811b94:	94bfffcc 	andi	r18,r18,65535
  811b98:	b9d1383a 	mul	r8,r23,r7
  811b9c:	90a4b03a 	or	r18,r18,r2
  811ba0:	d9800317 	ldw	r6,12(sp)
  811ba4:	9200062e 	bgeu	r18,r8,811bc0 <__divdf3+0x3f4>
  811ba8:	9725883a 	add	r18,r18,fp
  811bac:	38bfffc4 	addi	r2,r7,-1
  811bb0:	9700d636 	bltu	r18,fp,811f0c <__divdf3+0x740>
  811bb4:	9200d52e 	bgeu	r18,r8,811f0c <__divdf3+0x740>
  811bb8:	39ffff84 	addi	r7,r7,-2
  811bbc:	9725883a 	add	r18,r18,fp
  811bc0:	3004943a 	slli	r2,r6,16
  811bc4:	b012d43a 	srli	r9,r22,16
  811bc8:	b1bfffcc 	andi	r6,r22,65535
  811bcc:	11e2b03a 	or	r17,r2,r7
  811bd0:	8806d43a 	srli	r3,r17,16
  811bd4:	893fffcc 	andi	r4,r17,65535
  811bd8:	218b383a 	mul	r5,r4,r6
  811bdc:	30c5383a 	mul	r2,r6,r3
  811be0:	2249383a 	mul	r4,r4,r9
  811be4:	280ed43a 	srli	r7,r5,16
  811be8:	9225c83a 	sub	r18,r18,r8
  811bec:	2089883a 	add	r4,r4,r2
  811bf0:	3909883a 	add	r4,r7,r4
  811bf4:	1a47383a 	mul	r3,r3,r9
  811bf8:	2080022e 	bgeu	r4,r2,811c04 <__divdf3+0x438>
  811bfc:	00800074 	movhi	r2,1
  811c00:	1887883a 	add	r3,r3,r2
  811c04:	2004d43a 	srli	r2,r4,16
  811c08:	2008943a 	slli	r4,r4,16
  811c0c:	297fffcc 	andi	r5,r5,65535
  811c10:	10c7883a 	add	r3,r2,r3
  811c14:	2149883a 	add	r4,r4,r5
  811c18:	90c0a536 	bltu	r18,r3,811eb0 <__divdf3+0x6e4>
  811c1c:	90c0bf26 	beq	r18,r3,811f1c <__divdf3+0x750>
  811c20:	90c7c83a 	sub	r3,r18,r3
  811c24:	810fc83a 	sub	r7,r16,r4
  811c28:	81e5803a 	cmpltu	r18,r16,r7
  811c2c:	1ca5c83a 	sub	r18,r3,r18
  811c30:	e480c126 	beq	fp,r18,811f38 <__divdf3+0x76c>
  811c34:	a00b883a 	mov	r5,r20
  811c38:	9009883a 	mov	r4,r18
  811c3c:	d9800315 	stw	r6,12(sp)
  811c40:	d9c00215 	stw	r7,8(sp)
  811c44:	da400115 	stw	r9,4(sp)
  811c48:	08117100 	call	811710 <__udivsi3>
  811c4c:	a00b883a 	mov	r5,r20
  811c50:	9009883a 	mov	r4,r18
  811c54:	d8800015 	stw	r2,0(sp)
  811c58:	08117740 	call	811774 <__umodsi3>
  811c5c:	d9c00217 	ldw	r7,8(sp)
  811c60:	da000017 	ldw	r8,0(sp)
  811c64:	1006943a 	slli	r3,r2,16
  811c68:	3804d43a 	srli	r2,r7,16
  811c6c:	ba21383a 	mul	r16,r23,r8
  811c70:	d9800317 	ldw	r6,12(sp)
  811c74:	10c4b03a 	or	r2,r2,r3
  811c78:	da400117 	ldw	r9,4(sp)
  811c7c:	1400062e 	bgeu	r2,r16,811c98 <__divdf3+0x4cc>
  811c80:	1705883a 	add	r2,r2,fp
  811c84:	40ffffc4 	addi	r3,r8,-1
  811c88:	1700ad36 	bltu	r2,fp,811f40 <__divdf3+0x774>
  811c8c:	1400ac2e 	bgeu	r2,r16,811f40 <__divdf3+0x774>
  811c90:	423fff84 	addi	r8,r8,-2
  811c94:	1705883a 	add	r2,r2,fp
  811c98:	1421c83a 	sub	r16,r2,r16
  811c9c:	a00b883a 	mov	r5,r20
  811ca0:	8009883a 	mov	r4,r16
  811ca4:	d9800315 	stw	r6,12(sp)
  811ca8:	d9c00215 	stw	r7,8(sp)
  811cac:	da000015 	stw	r8,0(sp)
  811cb0:	da400115 	stw	r9,4(sp)
  811cb4:	08117100 	call	811710 <__udivsi3>
  811cb8:	8009883a 	mov	r4,r16
  811cbc:	a00b883a 	mov	r5,r20
  811cc0:	1025883a 	mov	r18,r2
  811cc4:	08117740 	call	811774 <__umodsi3>
  811cc8:	d9c00217 	ldw	r7,8(sp)
  811ccc:	1004943a 	slli	r2,r2,16
  811cd0:	bcaf383a 	mul	r23,r23,r18
  811cd4:	393fffcc 	andi	r4,r7,65535
  811cd8:	2088b03a 	or	r4,r4,r2
  811cdc:	d9800317 	ldw	r6,12(sp)
  811ce0:	da000017 	ldw	r8,0(sp)
  811ce4:	da400117 	ldw	r9,4(sp)
  811ce8:	25c0062e 	bgeu	r4,r23,811d04 <__divdf3+0x538>
  811cec:	2709883a 	add	r4,r4,fp
  811cf0:	90bfffc4 	addi	r2,r18,-1
  811cf4:	27009436 	bltu	r4,fp,811f48 <__divdf3+0x77c>
  811cf8:	25c0932e 	bgeu	r4,r23,811f48 <__divdf3+0x77c>
  811cfc:	94bfff84 	addi	r18,r18,-2
  811d00:	2709883a 	add	r4,r4,fp
  811d04:	4004943a 	slli	r2,r8,16
  811d08:	25efc83a 	sub	r23,r4,r23
  811d0c:	1490b03a 	or	r8,r2,r18
  811d10:	4008d43a 	srli	r4,r8,16
  811d14:	40ffffcc 	andi	r3,r8,65535
  811d18:	30c5383a 	mul	r2,r6,r3
  811d1c:	1a47383a 	mul	r3,r3,r9
  811d20:	310d383a 	mul	r6,r6,r4
  811d24:	100ad43a 	srli	r5,r2,16
  811d28:	4913383a 	mul	r9,r9,r4
  811d2c:	1987883a 	add	r3,r3,r6
  811d30:	28c7883a 	add	r3,r5,r3
  811d34:	1980022e 	bgeu	r3,r6,811d40 <__divdf3+0x574>
  811d38:	01000074 	movhi	r4,1
  811d3c:	4913883a 	add	r9,r9,r4
  811d40:	1808d43a 	srli	r4,r3,16
  811d44:	1806943a 	slli	r3,r3,16
  811d48:	10bfffcc 	andi	r2,r2,65535
  811d4c:	2253883a 	add	r9,r4,r9
  811d50:	1887883a 	add	r3,r3,r2
  811d54:	ba403836 	bltu	r23,r9,811e38 <__divdf3+0x66c>
  811d58:	ba403626 	beq	r23,r9,811e34 <__divdf3+0x668>
  811d5c:	42000054 	ori	r8,r8,1
  811d60:	a880ffc4 	addi	r2,r21,1023
  811d64:	00bf570e 	bge	zero,r2,811ac4 <__alt_mem_onchip_mem+0xff809ac4>
  811d68:	40c001cc 	andi	r3,r8,7
  811d6c:	18000726 	beq	r3,zero,811d8c <__divdf3+0x5c0>
  811d70:	40c003cc 	andi	r3,r8,15
  811d74:	01000104 	movi	r4,4
  811d78:	19000426 	beq	r3,r4,811d8c <__divdf3+0x5c0>
  811d7c:	4107883a 	add	r3,r8,r4
  811d80:	1a11803a 	cmpltu	r8,r3,r8
  811d84:	8a23883a 	add	r17,r17,r8
  811d88:	1811883a 	mov	r8,r3
  811d8c:	88c0402c 	andhi	r3,r17,256
  811d90:	18000426 	beq	r3,zero,811da4 <__divdf3+0x5d8>
  811d94:	00ffc034 	movhi	r3,65280
  811d98:	18ffffc4 	addi	r3,r3,-1
  811d9c:	a8810004 	addi	r2,r21,1024
  811da0:	88e2703a 	and	r17,r17,r3
  811da4:	00c1ff84 	movi	r3,2046
  811da8:	18bee316 	blt	r3,r2,811938 <__alt_mem_onchip_mem+0xff809938>
  811dac:	8824977a 	slli	r18,r17,29
  811db0:	4010d0fa 	srli	r8,r8,3
  811db4:	8822927a 	slli	r17,r17,9
  811db8:	1081ffcc 	andi	r2,r2,2047
  811dbc:	9224b03a 	or	r18,r18,r8
  811dc0:	880ad33a 	srli	r5,r17,12
  811dc4:	98c0004c 	andi	r3,r19,1
  811dc8:	003edf06 	br	811948 <__alt_mem_onchip_mem+0xff809948>
  811dcc:	8080022c 	andhi	r2,r16,8
  811dd0:	10001226 	beq	r2,zero,811e1c <__divdf3+0x650>
  811dd4:	8880022c 	andhi	r2,r17,8
  811dd8:	1000101e 	bne	r2,zero,811e1c <__divdf3+0x650>
  811ddc:	00800434 	movhi	r2,16
  811de0:	89400234 	orhi	r5,r17,8
  811de4:	10bfffc4 	addi	r2,r2,-1
  811de8:	b007883a 	mov	r3,r22
  811dec:	288a703a 	and	r5,r5,r2
  811df0:	4025883a 	mov	r18,r8
  811df4:	003f3106 	br	811abc <__alt_mem_onchip_mem+0xff809abc>
  811df8:	008000c4 	movi	r2,3
  811dfc:	3880a626 	beq	r7,r2,812098 <__divdf3+0x8cc>
  811e00:	00800044 	movi	r2,1
  811e04:	3880521e 	bne	r7,r2,811f50 <__divdf3+0x784>
  811e08:	b807883a 	mov	r3,r23
  811e0c:	0005883a 	mov	r2,zero
  811e10:	000b883a 	mov	r5,zero
  811e14:	0025883a 	mov	r18,zero
  811e18:	003ecb06 	br	811948 <__alt_mem_onchip_mem+0xff809948>
  811e1c:	00800434 	movhi	r2,16
  811e20:	81400234 	orhi	r5,r16,8
  811e24:	10bfffc4 	addi	r2,r2,-1
  811e28:	a007883a 	mov	r3,r20
  811e2c:	288a703a 	and	r5,r5,r2
  811e30:	003f2206 	br	811abc <__alt_mem_onchip_mem+0xff809abc>
  811e34:	183fca26 	beq	r3,zero,811d60 <__alt_mem_onchip_mem+0xff809d60>
  811e38:	e5ef883a 	add	r23,fp,r23
  811e3c:	40bfffc4 	addi	r2,r8,-1
  811e40:	bf00392e 	bgeu	r23,fp,811f28 <__divdf3+0x75c>
  811e44:	1011883a 	mov	r8,r2
  811e48:	ba7fc41e 	bne	r23,r9,811d5c <__alt_mem_onchip_mem+0xff809d5c>
  811e4c:	b0ffc31e 	bne	r22,r3,811d5c <__alt_mem_onchip_mem+0xff809d5c>
  811e50:	003fc306 	br	811d60 <__alt_mem_onchip_mem+0xff809d60>
  811e54:	143ff604 	addi	r16,r2,-40
  811e58:	9c20983a 	sll	r16,r19,r16
  811e5c:	0025883a 	mov	r18,zero
  811e60:	003ee206 	br	8119ec <__alt_mem_onchip_mem+0xff8099ec>
  811e64:	d9800315 	stw	r6,12(sp)
  811e68:	d9c00215 	stw	r7,8(sp)
  811e6c:	0806b480 	call	806b48 <__clzsi2>
  811e70:	10800804 	addi	r2,r2,32
  811e74:	d9c00217 	ldw	r7,8(sp)
  811e78:	d9800317 	ldw	r6,12(sp)
  811e7c:	003ed106 	br	8119c4 <__alt_mem_onchip_mem+0xff8099c4>
  811e80:	147ff604 	addi	r17,r2,-40
  811e84:	3462983a 	sll	r17,r6,r17
  811e88:	0011883a 	mov	r8,zero
  811e8c:	003ef506 	br	811a64 <__alt_mem_onchip_mem+0xff809a64>
  811e90:	3009883a 	mov	r4,r6
  811e94:	d9800315 	stw	r6,12(sp)
  811e98:	da400115 	stw	r9,4(sp)
  811e9c:	0806b480 	call	806b48 <__clzsi2>
  811ea0:	10800804 	addi	r2,r2,32
  811ea4:	da400117 	ldw	r9,4(sp)
  811ea8:	d9800317 	ldw	r6,12(sp)
  811eac:	003ee306 	br	811a3c <__alt_mem_onchip_mem+0xff809a3c>
  811eb0:	85a1883a 	add	r16,r16,r22
  811eb4:	8585803a 	cmpltu	r2,r16,r22
  811eb8:	1705883a 	add	r2,r2,fp
  811ebc:	14a5883a 	add	r18,r2,r18
  811ec0:	88bfffc4 	addi	r2,r17,-1
  811ec4:	e4800c2e 	bgeu	fp,r18,811ef8 <__divdf3+0x72c>
  811ec8:	90c03e36 	bltu	r18,r3,811fc4 <__divdf3+0x7f8>
  811ecc:	1c806926 	beq	r3,r18,812074 <__divdf3+0x8a8>
  811ed0:	90c7c83a 	sub	r3,r18,r3
  811ed4:	1023883a 	mov	r17,r2
  811ed8:	003f5206 	br	811c24 <__alt_mem_onchip_mem+0xff809c24>
  811edc:	923f0436 	bltu	r18,r8,811af0 <__alt_mem_onchip_mem+0xff809af0>
  811ee0:	800897fa 	slli	r4,r16,31
  811ee4:	9004d07a 	srli	r2,r18,1
  811ee8:	8006d07a 	srli	r3,r16,1
  811eec:	902097fa 	slli	r16,r18,31
  811ef0:	20a4b03a 	or	r18,r4,r2
  811ef4:	003f0106 	br	811afc <__alt_mem_onchip_mem+0xff809afc>
  811ef8:	e4bff51e 	bne	fp,r18,811ed0 <__alt_mem_onchip_mem+0xff809ed0>
  811efc:	85bff22e 	bgeu	r16,r22,811ec8 <__alt_mem_onchip_mem+0xff809ec8>
  811f00:	e0c7c83a 	sub	r3,fp,r3
  811f04:	1023883a 	mov	r17,r2
  811f08:	003f4606 	br	811c24 <__alt_mem_onchip_mem+0xff809c24>
  811f0c:	100f883a 	mov	r7,r2
  811f10:	003f2b06 	br	811bc0 <__alt_mem_onchip_mem+0xff809bc0>
  811f14:	180d883a 	mov	r6,r3
  811f18:	003f1306 	br	811b68 <__alt_mem_onchip_mem+0xff809b68>
  811f1c:	813fe436 	bltu	r16,r4,811eb0 <__alt_mem_onchip_mem+0xff809eb0>
  811f20:	0007883a 	mov	r3,zero
  811f24:	003f3f06 	br	811c24 <__alt_mem_onchip_mem+0xff809c24>
  811f28:	ba402c36 	bltu	r23,r9,811fdc <__divdf3+0x810>
  811f2c:	4dc05426 	beq	r9,r23,812080 <__divdf3+0x8b4>
  811f30:	1011883a 	mov	r8,r2
  811f34:	003f8906 	br	811d5c <__alt_mem_onchip_mem+0xff809d5c>
  811f38:	023fffc4 	movi	r8,-1
  811f3c:	003f8806 	br	811d60 <__alt_mem_onchip_mem+0xff809d60>
  811f40:	1811883a 	mov	r8,r3
  811f44:	003f5406 	br	811c98 <__alt_mem_onchip_mem+0xff809c98>
  811f48:	1025883a 	mov	r18,r2
  811f4c:	003f6d06 	br	811d04 <__alt_mem_onchip_mem+0xff809d04>
  811f50:	b827883a 	mov	r19,r23
  811f54:	003f8206 	br	811d60 <__alt_mem_onchip_mem+0xff809d60>
  811f58:	010007c4 	movi	r4,31
  811f5c:	20c02616 	blt	r4,r3,811ff8 <__divdf3+0x82c>
  811f60:	00800804 	movi	r2,32
  811f64:	10c5c83a 	sub	r2,r2,r3
  811f68:	888a983a 	sll	r5,r17,r2
  811f6c:	40c8d83a 	srl	r4,r8,r3
  811f70:	4084983a 	sll	r2,r8,r2
  811f74:	88e2d83a 	srl	r17,r17,r3
  811f78:	2906b03a 	or	r3,r5,r4
  811f7c:	1004c03a 	cmpne	r2,r2,zero
  811f80:	1886b03a 	or	r3,r3,r2
  811f84:	188001cc 	andi	r2,r3,7
  811f88:	10000726 	beq	r2,zero,811fa8 <__divdf3+0x7dc>
  811f8c:	188003cc 	andi	r2,r3,15
  811f90:	01000104 	movi	r4,4
  811f94:	11000426 	beq	r2,r4,811fa8 <__divdf3+0x7dc>
  811f98:	1805883a 	mov	r2,r3
  811f9c:	10c00104 	addi	r3,r2,4
  811fa0:	1885803a 	cmpltu	r2,r3,r2
  811fa4:	88a3883a 	add	r17,r17,r2
  811fa8:	8880202c 	andhi	r2,r17,128
  811fac:	10002726 	beq	r2,zero,81204c <__divdf3+0x880>
  811fb0:	98c0004c 	andi	r3,r19,1
  811fb4:	00800044 	movi	r2,1
  811fb8:	000b883a 	mov	r5,zero
  811fbc:	0025883a 	mov	r18,zero
  811fc0:	003e6106 	br	811948 <__alt_mem_onchip_mem+0xff809948>
  811fc4:	85a1883a 	add	r16,r16,r22
  811fc8:	8585803a 	cmpltu	r2,r16,r22
  811fcc:	1705883a 	add	r2,r2,fp
  811fd0:	14a5883a 	add	r18,r2,r18
  811fd4:	8c7fff84 	addi	r17,r17,-2
  811fd8:	003f1106 	br	811c20 <__alt_mem_onchip_mem+0xff809c20>
  811fdc:	b589883a 	add	r4,r22,r22
  811fe0:	25ad803a 	cmpltu	r22,r4,r22
  811fe4:	b739883a 	add	fp,r22,fp
  811fe8:	40bfff84 	addi	r2,r8,-2
  811fec:	bf2f883a 	add	r23,r23,fp
  811ff0:	202d883a 	mov	r22,r4
  811ff4:	003f9306 	br	811e44 <__alt_mem_onchip_mem+0xff809e44>
  811ff8:	013ff844 	movi	r4,-31
  811ffc:	2085c83a 	sub	r2,r4,r2
  812000:	8888d83a 	srl	r4,r17,r2
  812004:	00800804 	movi	r2,32
  812008:	18802126 	beq	r3,r2,812090 <__divdf3+0x8c4>
  81200c:	00801004 	movi	r2,64
  812010:	10c5c83a 	sub	r2,r2,r3
  812014:	8884983a 	sll	r2,r17,r2
  812018:	1204b03a 	or	r2,r2,r8
  81201c:	1004c03a 	cmpne	r2,r2,zero
  812020:	2084b03a 	or	r2,r4,r2
  812024:	144001cc 	andi	r17,r2,7
  812028:	88000d1e 	bne	r17,zero,812060 <__divdf3+0x894>
  81202c:	000b883a 	mov	r5,zero
  812030:	1024d0fa 	srli	r18,r2,3
  812034:	98c0004c 	andi	r3,r19,1
  812038:	0005883a 	mov	r2,zero
  81203c:	9464b03a 	or	r18,r18,r17
  812040:	003e4106 	br	811948 <__alt_mem_onchip_mem+0xff809948>
  812044:	1007883a 	mov	r3,r2
  812048:	0023883a 	mov	r17,zero
  81204c:	880a927a 	slli	r5,r17,9
  812050:	1805883a 	mov	r2,r3
  812054:	8822977a 	slli	r17,r17,29
  812058:	280ad33a 	srli	r5,r5,12
  81205c:	003ff406 	br	812030 <__alt_mem_onchip_mem+0xff80a030>
  812060:	10c003cc 	andi	r3,r2,15
  812064:	01000104 	movi	r4,4
  812068:	193ff626 	beq	r3,r4,812044 <__alt_mem_onchip_mem+0xff80a044>
  81206c:	0023883a 	mov	r17,zero
  812070:	003fca06 	br	811f9c <__alt_mem_onchip_mem+0xff809f9c>
  812074:	813fd336 	bltu	r16,r4,811fc4 <__alt_mem_onchip_mem+0xff809fc4>
  812078:	1023883a 	mov	r17,r2
  81207c:	003fa806 	br	811f20 <__alt_mem_onchip_mem+0xff809f20>
  812080:	b0ffd636 	bltu	r22,r3,811fdc <__alt_mem_onchip_mem+0xff809fdc>
  812084:	1011883a 	mov	r8,r2
  812088:	b0ff341e 	bne	r22,r3,811d5c <__alt_mem_onchip_mem+0xff809d5c>
  81208c:	003f3406 	br	811d60 <__alt_mem_onchip_mem+0xff809d60>
  812090:	0005883a 	mov	r2,zero
  812094:	003fe006 	br	812018 <__alt_mem_onchip_mem+0xff80a018>
  812098:	00800434 	movhi	r2,16
  81209c:	89400234 	orhi	r5,r17,8
  8120a0:	10bfffc4 	addi	r2,r2,-1
  8120a4:	b807883a 	mov	r3,r23
  8120a8:	288a703a 	and	r5,r5,r2
  8120ac:	4025883a 	mov	r18,r8
  8120b0:	003e8206 	br	811abc <__alt_mem_onchip_mem+0xff809abc>

008120b4 <__eqdf2>:
  8120b4:	2804d53a 	srli	r2,r5,20
  8120b8:	3806d53a 	srli	r3,r7,20
  8120bc:	02000434 	movhi	r8,16
  8120c0:	423fffc4 	addi	r8,r8,-1
  8120c4:	1081ffcc 	andi	r2,r2,2047
  8120c8:	0281ffc4 	movi	r10,2047
  8120cc:	2a12703a 	and	r9,r5,r8
  8120d0:	18c1ffcc 	andi	r3,r3,2047
  8120d4:	3a10703a 	and	r8,r7,r8
  8120d8:	280ad7fa 	srli	r5,r5,31
  8120dc:	380ed7fa 	srli	r7,r7,31
  8120e0:	12801026 	beq	r2,r10,812124 <__eqdf2+0x70>
  8120e4:	0281ffc4 	movi	r10,2047
  8120e8:	1a800a26 	beq	r3,r10,812114 <__eqdf2+0x60>
  8120ec:	10c00226 	beq	r2,r3,8120f8 <__eqdf2+0x44>
  8120f0:	00800044 	movi	r2,1
  8120f4:	f800283a 	ret
  8120f8:	4a3ffd1e 	bne	r9,r8,8120f0 <__alt_mem_onchip_mem+0xff80a0f0>
  8120fc:	21bffc1e 	bne	r4,r6,8120f0 <__alt_mem_onchip_mem+0xff80a0f0>
  812100:	29c00c26 	beq	r5,r7,812134 <__eqdf2+0x80>
  812104:	103ffa1e 	bne	r2,zero,8120f0 <__alt_mem_onchip_mem+0xff80a0f0>
  812108:	2244b03a 	or	r2,r4,r9
  81210c:	1004c03a 	cmpne	r2,r2,zero
  812110:	f800283a 	ret
  812114:	3214b03a 	or	r10,r6,r8
  812118:	503ff426 	beq	r10,zero,8120ec <__alt_mem_onchip_mem+0xff80a0ec>
  81211c:	00800044 	movi	r2,1
  812120:	f800283a 	ret
  812124:	2254b03a 	or	r10,r4,r9
  812128:	503fee26 	beq	r10,zero,8120e4 <__alt_mem_onchip_mem+0xff80a0e4>
  81212c:	00800044 	movi	r2,1
  812130:	f800283a 	ret
  812134:	0005883a 	mov	r2,zero
  812138:	f800283a 	ret

0081213c <__muldf3>:
  81213c:	defff304 	addi	sp,sp,-52
  812140:	2804d53a 	srli	r2,r5,20
  812144:	dd800915 	stw	r22,36(sp)
  812148:	282cd7fa 	srli	r22,r5,31
  81214c:	dc000315 	stw	r16,12(sp)
  812150:	04000434 	movhi	r16,16
  812154:	dd400815 	stw	r21,32(sp)
  812158:	dc800515 	stw	r18,20(sp)
  81215c:	843fffc4 	addi	r16,r16,-1
  812160:	dfc00c15 	stw	ra,48(sp)
  812164:	df000b15 	stw	fp,44(sp)
  812168:	ddc00a15 	stw	r23,40(sp)
  81216c:	dd000715 	stw	r20,28(sp)
  812170:	dcc00615 	stw	r19,24(sp)
  812174:	dc400415 	stw	r17,16(sp)
  812178:	1481ffcc 	andi	r18,r2,2047
  81217c:	2c20703a 	and	r16,r5,r16
  812180:	b02b883a 	mov	r21,r22
  812184:	b2403fcc 	andi	r9,r22,255
  812188:	90006026 	beq	r18,zero,81230c <__muldf3+0x1d0>
  81218c:	0081ffc4 	movi	r2,2047
  812190:	2029883a 	mov	r20,r4
  812194:	90803626 	beq	r18,r2,812270 <__muldf3+0x134>
  812198:	80800434 	orhi	r2,r16,16
  81219c:	100490fa 	slli	r2,r2,3
  8121a0:	2020d77a 	srli	r16,r4,29
  8121a4:	202890fa 	slli	r20,r4,3
  8121a8:	94bf0044 	addi	r18,r18,-1023
  8121ac:	80a0b03a 	or	r16,r16,r2
  8121b0:	0027883a 	mov	r19,zero
  8121b4:	0039883a 	mov	fp,zero
  8121b8:	3804d53a 	srli	r2,r7,20
  8121bc:	382ed7fa 	srli	r23,r7,31
  8121c0:	04400434 	movhi	r17,16
  8121c4:	8c7fffc4 	addi	r17,r17,-1
  8121c8:	1081ffcc 	andi	r2,r2,2047
  8121cc:	3011883a 	mov	r8,r6
  8121d0:	3c62703a 	and	r17,r7,r17
  8121d4:	ba803fcc 	andi	r10,r23,255
  8121d8:	10006d26 	beq	r2,zero,812390 <__muldf3+0x254>
  8121dc:	00c1ffc4 	movi	r3,2047
  8121e0:	10c06526 	beq	r2,r3,812378 <__muldf3+0x23c>
  8121e4:	88c00434 	orhi	r3,r17,16
  8121e8:	180690fa 	slli	r3,r3,3
  8121ec:	3022d77a 	srli	r17,r6,29
  8121f0:	301090fa 	slli	r8,r6,3
  8121f4:	10bf0044 	addi	r2,r2,-1023
  8121f8:	88e2b03a 	or	r17,r17,r3
  8121fc:	000b883a 	mov	r5,zero
  812200:	9085883a 	add	r2,r18,r2
  812204:	2cc8b03a 	or	r4,r5,r19
  812208:	00c003c4 	movi	r3,15
  81220c:	bdacf03a 	xor	r22,r23,r22
  812210:	12c00044 	addi	r11,r2,1
  812214:	19009936 	bltu	r3,r4,81247c <__muldf3+0x340>
  812218:	200890ba 	slli	r4,r4,2
  81221c:	00c02074 	movhi	r3,129
  812220:	18c88c04 	addi	r3,r3,8752
  812224:	20c9883a 	add	r4,r4,r3
  812228:	20c00017 	ldw	r3,0(r4)
  81222c:	1800683a 	jmp	r3
  812230:	0081247c 	xorhi	r2,zero,1169
  812234:	00812290 	cmplti	r2,zero,1162
  812238:	00812290 	cmplti	r2,zero,1162
  81223c:	0081228c 	andi	r2,zero,1162
  812240:	00812458 	cmpnei	r2,zero,1169
  812244:	00812458 	cmpnei	r2,zero,1169
  812248:	00812440 	call	81244 <__reset-0x77edbc>
  81224c:	0081228c 	andi	r2,zero,1162
  812250:	00812458 	cmpnei	r2,zero,1169
  812254:	00812440 	call	81244 <__reset-0x77edbc>
  812258:	00812458 	cmpnei	r2,zero,1169
  81225c:	0081228c 	andi	r2,zero,1162
  812260:	00812468 	cmpgeui	r2,zero,1169
  812264:	00812468 	cmpgeui	r2,zero,1169
  812268:	00812468 	cmpgeui	r2,zero,1169
  81226c:	00812684 	movi	r2,1178
  812270:	2404b03a 	or	r2,r4,r16
  812274:	10006f1e 	bne	r2,zero,812434 <__muldf3+0x2f8>
  812278:	04c00204 	movi	r19,8
  81227c:	0021883a 	mov	r16,zero
  812280:	0029883a 	mov	r20,zero
  812284:	07000084 	movi	fp,2
  812288:	003fcb06 	br	8121b8 <__alt_mem_onchip_mem+0xff80a1b8>
  81228c:	502d883a 	mov	r22,r10
  812290:	00800084 	movi	r2,2
  812294:	28805726 	beq	r5,r2,8123f4 <__muldf3+0x2b8>
  812298:	008000c4 	movi	r2,3
  81229c:	28816626 	beq	r5,r2,812838 <__muldf3+0x6fc>
  8122a0:	00800044 	movi	r2,1
  8122a4:	2881411e 	bne	r5,r2,8127ac <__muldf3+0x670>
  8122a8:	b02b883a 	mov	r21,r22
  8122ac:	0005883a 	mov	r2,zero
  8122b0:	000b883a 	mov	r5,zero
  8122b4:	0029883a 	mov	r20,zero
  8122b8:	1004953a 	slli	r2,r2,20
  8122bc:	a8c03fcc 	andi	r3,r21,255
  8122c0:	04400434 	movhi	r17,16
  8122c4:	8c7fffc4 	addi	r17,r17,-1
  8122c8:	180697fa 	slli	r3,r3,31
  8122cc:	2c4a703a 	and	r5,r5,r17
  8122d0:	288ab03a 	or	r5,r5,r2
  8122d4:	28c6b03a 	or	r3,r5,r3
  8122d8:	a005883a 	mov	r2,r20
  8122dc:	dfc00c17 	ldw	ra,48(sp)
  8122e0:	df000b17 	ldw	fp,44(sp)
  8122e4:	ddc00a17 	ldw	r23,40(sp)
  8122e8:	dd800917 	ldw	r22,36(sp)
  8122ec:	dd400817 	ldw	r21,32(sp)
  8122f0:	dd000717 	ldw	r20,28(sp)
  8122f4:	dcc00617 	ldw	r19,24(sp)
  8122f8:	dc800517 	ldw	r18,20(sp)
  8122fc:	dc400417 	ldw	r17,16(sp)
  812300:	dc000317 	ldw	r16,12(sp)
  812304:	dec00d04 	addi	sp,sp,52
  812308:	f800283a 	ret
  81230c:	2404b03a 	or	r2,r4,r16
  812310:	2027883a 	mov	r19,r4
  812314:	10004226 	beq	r2,zero,812420 <__muldf3+0x2e4>
  812318:	8000fc26 	beq	r16,zero,81270c <__muldf3+0x5d0>
  81231c:	8009883a 	mov	r4,r16
  812320:	d9800215 	stw	r6,8(sp)
  812324:	d9c00015 	stw	r7,0(sp)
  812328:	da400115 	stw	r9,4(sp)
  81232c:	0806b480 	call	806b48 <__clzsi2>
  812330:	d9800217 	ldw	r6,8(sp)
  812334:	d9c00017 	ldw	r7,0(sp)
  812338:	da400117 	ldw	r9,4(sp)
  81233c:	113ffd44 	addi	r4,r2,-11
  812340:	00c00704 	movi	r3,28
  812344:	1900ed16 	blt	r3,r4,8126fc <__muldf3+0x5c0>
  812348:	00c00744 	movi	r3,29
  81234c:	147ffe04 	addi	r17,r2,-8
  812350:	1907c83a 	sub	r3,r3,r4
  812354:	8460983a 	sll	r16,r16,r17
  812358:	98c6d83a 	srl	r3,r19,r3
  81235c:	9c68983a 	sll	r20,r19,r17
  812360:	1c20b03a 	or	r16,r3,r16
  812364:	1080fcc4 	addi	r2,r2,1011
  812368:	00a5c83a 	sub	r18,zero,r2
  81236c:	0027883a 	mov	r19,zero
  812370:	0039883a 	mov	fp,zero
  812374:	003f9006 	br	8121b8 <__alt_mem_onchip_mem+0xff80a1b8>
  812378:	3446b03a 	or	r3,r6,r17
  81237c:	1800261e 	bne	r3,zero,812418 <__muldf3+0x2dc>
  812380:	0023883a 	mov	r17,zero
  812384:	0011883a 	mov	r8,zero
  812388:	01400084 	movi	r5,2
  81238c:	003f9c06 	br	812200 <__alt_mem_onchip_mem+0xff80a200>
  812390:	3446b03a 	or	r3,r6,r17
  812394:	18001c26 	beq	r3,zero,812408 <__muldf3+0x2cc>
  812398:	8800ce26 	beq	r17,zero,8126d4 <__muldf3+0x598>
  81239c:	8809883a 	mov	r4,r17
  8123a0:	d9800215 	stw	r6,8(sp)
  8123a4:	da400115 	stw	r9,4(sp)
  8123a8:	da800015 	stw	r10,0(sp)
  8123ac:	0806b480 	call	806b48 <__clzsi2>
  8123b0:	d9800217 	ldw	r6,8(sp)
  8123b4:	da400117 	ldw	r9,4(sp)
  8123b8:	da800017 	ldw	r10,0(sp)
  8123bc:	113ffd44 	addi	r4,r2,-11
  8123c0:	00c00704 	movi	r3,28
  8123c4:	1900bf16 	blt	r3,r4,8126c4 <__muldf3+0x588>
  8123c8:	00c00744 	movi	r3,29
  8123cc:	123ffe04 	addi	r8,r2,-8
  8123d0:	1907c83a 	sub	r3,r3,r4
  8123d4:	8a22983a 	sll	r17,r17,r8
  8123d8:	30c6d83a 	srl	r3,r6,r3
  8123dc:	3210983a 	sll	r8,r6,r8
  8123e0:	1c62b03a 	or	r17,r3,r17
  8123e4:	1080fcc4 	addi	r2,r2,1011
  8123e8:	0085c83a 	sub	r2,zero,r2
  8123ec:	000b883a 	mov	r5,zero
  8123f0:	003f8306 	br	812200 <__alt_mem_onchip_mem+0xff80a200>
  8123f4:	b02b883a 	mov	r21,r22
  8123f8:	0081ffc4 	movi	r2,2047
  8123fc:	000b883a 	mov	r5,zero
  812400:	0029883a 	mov	r20,zero
  812404:	003fac06 	br	8122b8 <__alt_mem_onchip_mem+0xff80a2b8>
  812408:	0023883a 	mov	r17,zero
  81240c:	0011883a 	mov	r8,zero
  812410:	01400044 	movi	r5,1
  812414:	003f7a06 	br	812200 <__alt_mem_onchip_mem+0xff80a200>
  812418:	014000c4 	movi	r5,3
  81241c:	003f7806 	br	812200 <__alt_mem_onchip_mem+0xff80a200>
  812420:	04c00104 	movi	r19,4
  812424:	0021883a 	mov	r16,zero
  812428:	0029883a 	mov	r20,zero
  81242c:	07000044 	movi	fp,1
  812430:	003f6106 	br	8121b8 <__alt_mem_onchip_mem+0xff80a1b8>
  812434:	04c00304 	movi	r19,12
  812438:	070000c4 	movi	fp,3
  81243c:	003f5e06 	br	8121b8 <__alt_mem_onchip_mem+0xff80a1b8>
  812440:	01400434 	movhi	r5,16
  812444:	002b883a 	mov	r21,zero
  812448:	297fffc4 	addi	r5,r5,-1
  81244c:	053fffc4 	movi	r20,-1
  812450:	0081ffc4 	movi	r2,2047
  812454:	003f9806 	br	8122b8 <__alt_mem_onchip_mem+0xff80a2b8>
  812458:	8023883a 	mov	r17,r16
  81245c:	a011883a 	mov	r8,r20
  812460:	e00b883a 	mov	r5,fp
  812464:	003f8a06 	br	812290 <__alt_mem_onchip_mem+0xff80a290>
  812468:	8023883a 	mov	r17,r16
  81246c:	a011883a 	mov	r8,r20
  812470:	482d883a 	mov	r22,r9
  812474:	e00b883a 	mov	r5,fp
  812478:	003f8506 	br	812290 <__alt_mem_onchip_mem+0xff80a290>
  81247c:	a00ad43a 	srli	r5,r20,16
  812480:	401ad43a 	srli	r13,r8,16
  812484:	a53fffcc 	andi	r20,r20,65535
  812488:	423fffcc 	andi	r8,r8,65535
  81248c:	4519383a 	mul	r12,r8,r20
  812490:	4147383a 	mul	r3,r8,r5
  812494:	6d09383a 	mul	r4,r13,r20
  812498:	600cd43a 	srli	r6,r12,16
  81249c:	2b5d383a 	mul	r14,r5,r13
  8124a0:	20c9883a 	add	r4,r4,r3
  8124a4:	310d883a 	add	r6,r6,r4
  8124a8:	30c0022e 	bgeu	r6,r3,8124b4 <__muldf3+0x378>
  8124ac:	00c00074 	movhi	r3,1
  8124b0:	70dd883a 	add	r14,r14,r3
  8124b4:	8826d43a 	srli	r19,r17,16
  8124b8:	8bffffcc 	andi	r15,r17,65535
  8124bc:	7d23383a 	mul	r17,r15,r20
  8124c0:	7949383a 	mul	r4,r15,r5
  8124c4:	9d29383a 	mul	r20,r19,r20
  8124c8:	8814d43a 	srli	r10,r17,16
  8124cc:	3012943a 	slli	r9,r6,16
  8124d0:	a129883a 	add	r20,r20,r4
  8124d4:	633fffcc 	andi	r12,r12,65535
  8124d8:	5515883a 	add	r10,r10,r20
  8124dc:	3006d43a 	srli	r3,r6,16
  8124e0:	4b13883a 	add	r9,r9,r12
  8124e4:	2ccb383a 	mul	r5,r5,r19
  8124e8:	5100022e 	bgeu	r10,r4,8124f4 <__muldf3+0x3b8>
  8124ec:	01000074 	movhi	r4,1
  8124f0:	290b883a 	add	r5,r5,r4
  8124f4:	802ad43a 	srli	r21,r16,16
  8124f8:	843fffcc 	andi	r16,r16,65535
  8124fc:	440d383a 	mul	r6,r8,r16
  812500:	4565383a 	mul	r18,r8,r21
  812504:	8349383a 	mul	r4,r16,r13
  812508:	500e943a 	slli	r7,r10,16
  81250c:	3010d43a 	srli	r8,r6,16
  812510:	5028d43a 	srli	r20,r10,16
  812514:	2489883a 	add	r4,r4,r18
  812518:	8abfffcc 	andi	r10,r17,65535
  81251c:	3a95883a 	add	r10,r7,r10
  812520:	4119883a 	add	r12,r8,r4
  812524:	a169883a 	add	r20,r20,r5
  812528:	1a87883a 	add	r3,r3,r10
  81252c:	6d5b383a 	mul	r13,r13,r21
  812530:	6480022e 	bgeu	r12,r18,81253c <__muldf3+0x400>
  812534:	01000074 	movhi	r4,1
  812538:	691b883a 	add	r13,r13,r4
  81253c:	7c25383a 	mul	r18,r15,r16
  812540:	7d4b383a 	mul	r5,r15,r21
  812544:	84cf383a 	mul	r7,r16,r19
  812548:	901ed43a 	srli	r15,r18,16
  81254c:	6008d43a 	srli	r4,r12,16
  812550:	6010943a 	slli	r8,r12,16
  812554:	394f883a 	add	r7,r7,r5
  812558:	333fffcc 	andi	r12,r6,65535
  81255c:	79df883a 	add	r15,r15,r7
  812560:	235b883a 	add	r13,r4,r13
  812564:	9d63383a 	mul	r17,r19,r21
  812568:	4309883a 	add	r4,r8,r12
  81256c:	7940022e 	bgeu	r15,r5,812578 <__muldf3+0x43c>
  812570:	01400074 	movhi	r5,1
  812574:	8963883a 	add	r17,r17,r5
  812578:	780a943a 	slli	r5,r15,16
  81257c:	91bfffcc 	andi	r6,r18,65535
  812580:	70c7883a 	add	r3,r14,r3
  812584:	298d883a 	add	r6,r5,r6
  812588:	1a8f803a 	cmpltu	r7,r3,r10
  81258c:	350b883a 	add	r5,r6,r20
  812590:	20c7883a 	add	r3,r4,r3
  812594:	3955883a 	add	r10,r7,r5
  812598:	1909803a 	cmpltu	r4,r3,r4
  81259c:	6a91883a 	add	r8,r13,r10
  8125a0:	780cd43a 	srli	r6,r15,16
  8125a4:	2219883a 	add	r12,r4,r8
  8125a8:	2d0b803a 	cmpltu	r5,r5,r20
  8125ac:	51cf803a 	cmpltu	r7,r10,r7
  8125b0:	29ceb03a 	or	r7,r5,r7
  8125b4:	4351803a 	cmpltu	r8,r8,r13
  8125b8:	610b803a 	cmpltu	r5,r12,r4
  8125bc:	4148b03a 	or	r4,r8,r5
  8125c0:	398f883a 	add	r7,r7,r6
  8125c4:	3909883a 	add	r4,r7,r4
  8125c8:	1810927a 	slli	r8,r3,9
  8125cc:	2449883a 	add	r4,r4,r17
  8125d0:	2008927a 	slli	r4,r4,9
  8125d4:	6022d5fa 	srli	r17,r12,23
  8125d8:	1806d5fa 	srli	r3,r3,23
  8125dc:	4252b03a 	or	r9,r8,r9
  8125e0:	600a927a 	slli	r5,r12,9
  8125e4:	4810c03a 	cmpne	r8,r9,zero
  8125e8:	2462b03a 	or	r17,r4,r17
  8125ec:	40c6b03a 	or	r3,r8,r3
  8125f0:	8900402c 	andhi	r4,r17,256
  8125f4:	1950b03a 	or	r8,r3,r5
  8125f8:	20000726 	beq	r4,zero,812618 <__muldf3+0x4dc>
  8125fc:	4006d07a 	srli	r3,r8,1
  812600:	880497fa 	slli	r2,r17,31
  812604:	4200004c 	andi	r8,r8,1
  812608:	8822d07a 	srli	r17,r17,1
  81260c:	1a10b03a 	or	r8,r3,r8
  812610:	1210b03a 	or	r8,r2,r8
  812614:	5805883a 	mov	r2,r11
  812618:	1140ffc4 	addi	r5,r2,1023
  81261c:	0140440e 	bge	zero,r5,812730 <__muldf3+0x5f4>
  812620:	40c001cc 	andi	r3,r8,7
  812624:	18000726 	beq	r3,zero,812644 <__muldf3+0x508>
  812628:	40c003cc 	andi	r3,r8,15
  81262c:	01000104 	movi	r4,4
  812630:	19000426 	beq	r3,r4,812644 <__muldf3+0x508>
  812634:	4107883a 	add	r3,r8,r4
  812638:	1a11803a 	cmpltu	r8,r3,r8
  81263c:	8a23883a 	add	r17,r17,r8
  812640:	1811883a 	mov	r8,r3
  812644:	88c0402c 	andhi	r3,r17,256
  812648:	18000426 	beq	r3,zero,81265c <__muldf3+0x520>
  81264c:	11410004 	addi	r5,r2,1024
  812650:	00bfc034 	movhi	r2,65280
  812654:	10bfffc4 	addi	r2,r2,-1
  812658:	88a2703a 	and	r17,r17,r2
  81265c:	0081ff84 	movi	r2,2046
  812660:	117f6416 	blt	r2,r5,8123f4 <__alt_mem_onchip_mem+0xff80a3f4>
  812664:	8828977a 	slli	r20,r17,29
  812668:	4010d0fa 	srli	r8,r8,3
  81266c:	8822927a 	slli	r17,r17,9
  812670:	2881ffcc 	andi	r2,r5,2047
  812674:	a228b03a 	or	r20,r20,r8
  812678:	880ad33a 	srli	r5,r17,12
  81267c:	b02b883a 	mov	r21,r22
  812680:	003f0d06 	br	8122b8 <__alt_mem_onchip_mem+0xff80a2b8>
  812684:	8080022c 	andhi	r2,r16,8
  812688:	10000926 	beq	r2,zero,8126b0 <__muldf3+0x574>
  81268c:	8880022c 	andhi	r2,r17,8
  812690:	1000071e 	bne	r2,zero,8126b0 <__muldf3+0x574>
  812694:	00800434 	movhi	r2,16
  812698:	89400234 	orhi	r5,r17,8
  81269c:	10bfffc4 	addi	r2,r2,-1
  8126a0:	b82b883a 	mov	r21,r23
  8126a4:	288a703a 	and	r5,r5,r2
  8126a8:	4029883a 	mov	r20,r8
  8126ac:	003f6806 	br	812450 <__alt_mem_onchip_mem+0xff80a450>
  8126b0:	00800434 	movhi	r2,16
  8126b4:	81400234 	orhi	r5,r16,8
  8126b8:	10bfffc4 	addi	r2,r2,-1
  8126bc:	288a703a 	and	r5,r5,r2
  8126c0:	003f6306 	br	812450 <__alt_mem_onchip_mem+0xff80a450>
  8126c4:	147ff604 	addi	r17,r2,-40
  8126c8:	3462983a 	sll	r17,r6,r17
  8126cc:	0011883a 	mov	r8,zero
  8126d0:	003f4406 	br	8123e4 <__alt_mem_onchip_mem+0xff80a3e4>
  8126d4:	3009883a 	mov	r4,r6
  8126d8:	d9800215 	stw	r6,8(sp)
  8126dc:	da400115 	stw	r9,4(sp)
  8126e0:	da800015 	stw	r10,0(sp)
  8126e4:	0806b480 	call	806b48 <__clzsi2>
  8126e8:	10800804 	addi	r2,r2,32
  8126ec:	da800017 	ldw	r10,0(sp)
  8126f0:	da400117 	ldw	r9,4(sp)
  8126f4:	d9800217 	ldw	r6,8(sp)
  8126f8:	003f3006 	br	8123bc <__alt_mem_onchip_mem+0xff80a3bc>
  8126fc:	143ff604 	addi	r16,r2,-40
  812700:	9c20983a 	sll	r16,r19,r16
  812704:	0029883a 	mov	r20,zero
  812708:	003f1606 	br	812364 <__alt_mem_onchip_mem+0xff80a364>
  81270c:	d9800215 	stw	r6,8(sp)
  812710:	d9c00015 	stw	r7,0(sp)
  812714:	da400115 	stw	r9,4(sp)
  812718:	0806b480 	call	806b48 <__clzsi2>
  81271c:	10800804 	addi	r2,r2,32
  812720:	da400117 	ldw	r9,4(sp)
  812724:	d9c00017 	ldw	r7,0(sp)
  812728:	d9800217 	ldw	r6,8(sp)
  81272c:	003f0306 	br	81233c <__alt_mem_onchip_mem+0xff80a33c>
  812730:	00c00044 	movi	r3,1
  812734:	1947c83a 	sub	r3,r3,r5
  812738:	00800e04 	movi	r2,56
  81273c:	10feda16 	blt	r2,r3,8122a8 <__alt_mem_onchip_mem+0xff80a2a8>
  812740:	008007c4 	movi	r2,31
  812744:	10c01b16 	blt	r2,r3,8127b4 <__muldf3+0x678>
  812748:	00800804 	movi	r2,32
  81274c:	10c5c83a 	sub	r2,r2,r3
  812750:	888a983a 	sll	r5,r17,r2
  812754:	40c8d83a 	srl	r4,r8,r3
  812758:	4084983a 	sll	r2,r8,r2
  81275c:	88e2d83a 	srl	r17,r17,r3
  812760:	2906b03a 	or	r3,r5,r4
  812764:	1004c03a 	cmpne	r2,r2,zero
  812768:	1886b03a 	or	r3,r3,r2
  81276c:	188001cc 	andi	r2,r3,7
  812770:	10000726 	beq	r2,zero,812790 <__muldf3+0x654>
  812774:	188003cc 	andi	r2,r3,15
  812778:	01000104 	movi	r4,4
  81277c:	11000426 	beq	r2,r4,812790 <__muldf3+0x654>
  812780:	1805883a 	mov	r2,r3
  812784:	10c00104 	addi	r3,r2,4
  812788:	1885803a 	cmpltu	r2,r3,r2
  81278c:	88a3883a 	add	r17,r17,r2
  812790:	8880202c 	andhi	r2,r17,128
  812794:	10001c26 	beq	r2,zero,812808 <__muldf3+0x6cc>
  812798:	b02b883a 	mov	r21,r22
  81279c:	00800044 	movi	r2,1
  8127a0:	000b883a 	mov	r5,zero
  8127a4:	0029883a 	mov	r20,zero
  8127a8:	003ec306 	br	8122b8 <__alt_mem_onchip_mem+0xff80a2b8>
  8127ac:	5805883a 	mov	r2,r11
  8127b0:	003f9906 	br	812618 <__alt_mem_onchip_mem+0xff80a618>
  8127b4:	00bff844 	movi	r2,-31
  8127b8:	1145c83a 	sub	r2,r2,r5
  8127bc:	8888d83a 	srl	r4,r17,r2
  8127c0:	00800804 	movi	r2,32
  8127c4:	18801a26 	beq	r3,r2,812830 <__muldf3+0x6f4>
  8127c8:	00801004 	movi	r2,64
  8127cc:	10c5c83a 	sub	r2,r2,r3
  8127d0:	8884983a 	sll	r2,r17,r2
  8127d4:	1204b03a 	or	r2,r2,r8
  8127d8:	1004c03a 	cmpne	r2,r2,zero
  8127dc:	2084b03a 	or	r2,r4,r2
  8127e0:	144001cc 	andi	r17,r2,7
  8127e4:	88000d1e 	bne	r17,zero,81281c <__muldf3+0x6e0>
  8127e8:	000b883a 	mov	r5,zero
  8127ec:	1028d0fa 	srli	r20,r2,3
  8127f0:	b02b883a 	mov	r21,r22
  8127f4:	0005883a 	mov	r2,zero
  8127f8:	a468b03a 	or	r20,r20,r17
  8127fc:	003eae06 	br	8122b8 <__alt_mem_onchip_mem+0xff80a2b8>
  812800:	1007883a 	mov	r3,r2
  812804:	0023883a 	mov	r17,zero
  812808:	880a927a 	slli	r5,r17,9
  81280c:	1805883a 	mov	r2,r3
  812810:	8822977a 	slli	r17,r17,29
  812814:	280ad33a 	srli	r5,r5,12
  812818:	003ff406 	br	8127ec <__alt_mem_onchip_mem+0xff80a7ec>
  81281c:	10c003cc 	andi	r3,r2,15
  812820:	01000104 	movi	r4,4
  812824:	193ff626 	beq	r3,r4,812800 <__alt_mem_onchip_mem+0xff80a800>
  812828:	0023883a 	mov	r17,zero
  81282c:	003fd506 	br	812784 <__alt_mem_onchip_mem+0xff80a784>
  812830:	0005883a 	mov	r2,zero
  812834:	003fe706 	br	8127d4 <__alt_mem_onchip_mem+0xff80a7d4>
  812838:	00800434 	movhi	r2,16
  81283c:	89400234 	orhi	r5,r17,8
  812840:	10bfffc4 	addi	r2,r2,-1
  812844:	b02b883a 	mov	r21,r22
  812848:	288a703a 	and	r5,r5,r2
  81284c:	4029883a 	mov	r20,r8
  812850:	003eff06 	br	812450 <__alt_mem_onchip_mem+0xff80a450>

00812854 <__fixdfsi>:
  812854:	280cd53a 	srli	r6,r5,20
  812858:	00c00434 	movhi	r3,16
  81285c:	18ffffc4 	addi	r3,r3,-1
  812860:	3181ffcc 	andi	r6,r6,2047
  812864:	01c0ff84 	movi	r7,1022
  812868:	28c6703a 	and	r3,r5,r3
  81286c:	280ad7fa 	srli	r5,r5,31
  812870:	3980120e 	bge	r7,r6,8128bc <__fixdfsi+0x68>
  812874:	00810744 	movi	r2,1053
  812878:	11800c16 	blt	r2,r6,8128ac <__fixdfsi+0x58>
  81287c:	00810cc4 	movi	r2,1075
  812880:	1185c83a 	sub	r2,r2,r6
  812884:	01c007c4 	movi	r7,31
  812888:	18c00434 	orhi	r3,r3,16
  81288c:	38800d16 	blt	r7,r2,8128c4 <__fixdfsi+0x70>
  812890:	31befb44 	addi	r6,r6,-1043
  812894:	2084d83a 	srl	r2,r4,r2
  812898:	1986983a 	sll	r3,r3,r6
  81289c:	1884b03a 	or	r2,r3,r2
  8128a0:	28000726 	beq	r5,zero,8128c0 <__fixdfsi+0x6c>
  8128a4:	0085c83a 	sub	r2,zero,r2
  8128a8:	f800283a 	ret
  8128ac:	00a00034 	movhi	r2,32768
  8128b0:	10bfffc4 	addi	r2,r2,-1
  8128b4:	2885883a 	add	r2,r5,r2
  8128b8:	f800283a 	ret
  8128bc:	0005883a 	mov	r2,zero
  8128c0:	f800283a 	ret
  8128c4:	008104c4 	movi	r2,1043
  8128c8:	1185c83a 	sub	r2,r2,r6
  8128cc:	1884d83a 	srl	r2,r3,r2
  8128d0:	003ff306 	br	8128a0 <__alt_mem_onchip_mem+0xff80a8a0>

008128d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8128d4:	defff504 	addi	sp,sp,-44
  8128d8:	df000a15 	stw	fp,40(sp)
  8128dc:	df000a04 	addi	fp,sp,40
  8128e0:	e13ffc15 	stw	r4,-16(fp)
  8128e4:	e17ffd15 	stw	r5,-12(fp)
  8128e8:	e1bffe15 	stw	r6,-8(fp)
  8128ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8128f0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8128f4:	d0a75d17 	ldw	r2,-25228(gp)
  
  if (alt_ticks_per_second ())
  8128f8:	10003c26 	beq	r2,zero,8129ec <alt_alarm_start+0x118>
  {
    if (alarm)
  8128fc:	e0bffc17 	ldw	r2,-16(fp)
  812900:	10003826 	beq	r2,zero,8129e4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  812904:	e0bffc17 	ldw	r2,-16(fp)
  812908:	e0fffe17 	ldw	r3,-8(fp)
  81290c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  812910:	e0bffc17 	ldw	r2,-16(fp)
  812914:	e0ffff17 	ldw	r3,-4(fp)
  812918:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81291c:	0005303a 	rdctl	r2,status
  812920:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812924:	e0fff917 	ldw	r3,-28(fp)
  812928:	00bfff84 	movi	r2,-2
  81292c:	1884703a 	and	r2,r3,r2
  812930:	1001703a 	wrctl	status,r2
  
  return context;
  812934:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  812938:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81293c:	d0a75e17 	ldw	r2,-25224(gp)
      
      current_nticks = alt_nticks();
  812940:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  812944:	e0fffd17 	ldw	r3,-12(fp)
  812948:	e0bff617 	ldw	r2,-40(fp)
  81294c:	1885883a 	add	r2,r3,r2
  812950:	10c00044 	addi	r3,r2,1
  812954:	e0bffc17 	ldw	r2,-16(fp)
  812958:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81295c:	e0bffc17 	ldw	r2,-16(fp)
  812960:	10c00217 	ldw	r3,8(r2)
  812964:	e0bff617 	ldw	r2,-40(fp)
  812968:	1880042e 	bgeu	r3,r2,81297c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  81296c:	e0bffc17 	ldw	r2,-16(fp)
  812970:	00c00044 	movi	r3,1
  812974:	10c00405 	stb	r3,16(r2)
  812978:	00000206 	br	812984 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  81297c:	e0bffc17 	ldw	r2,-16(fp)
  812980:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  812984:	e0bffc17 	ldw	r2,-16(fp)
  812988:	d0e00f04 	addi	r3,gp,-32708
  81298c:	e0fffa15 	stw	r3,-24(fp)
  812990:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812994:	e0bffb17 	ldw	r2,-20(fp)
  812998:	e0fffa17 	ldw	r3,-24(fp)
  81299c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8129a0:	e0bffa17 	ldw	r2,-24(fp)
  8129a4:	10c00017 	ldw	r3,0(r2)
  8129a8:	e0bffb17 	ldw	r2,-20(fp)
  8129ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8129b0:	e0bffa17 	ldw	r2,-24(fp)
  8129b4:	10800017 	ldw	r2,0(r2)
  8129b8:	e0fffb17 	ldw	r3,-20(fp)
  8129bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8129c0:	e0bffa17 	ldw	r2,-24(fp)
  8129c4:	e0fffb17 	ldw	r3,-20(fp)
  8129c8:	10c00015 	stw	r3,0(r2)
  8129cc:	e0bff817 	ldw	r2,-32(fp)
  8129d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8129d4:	e0bff717 	ldw	r2,-36(fp)
  8129d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8129dc:	0005883a 	mov	r2,zero
  8129e0:	00000306 	br	8129f0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  8129e4:	00bffa84 	movi	r2,-22
  8129e8:	00000106 	br	8129f0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  8129ec:	00bfde84 	movi	r2,-134
  }
}
  8129f0:	e037883a 	mov	sp,fp
  8129f4:	df000017 	ldw	fp,0(sp)
  8129f8:	dec00104 	addi	sp,sp,4
  8129fc:	f800283a 	ret

00812a00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812a00:	defffe04 	addi	sp,sp,-8
  812a04:	dfc00115 	stw	ra,4(sp)
  812a08:	df000015 	stw	fp,0(sp)
  812a0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812a10:	d0a00c17 	ldw	r2,-32720(gp)
  812a14:	10000326 	beq	r2,zero,812a24 <alt_get_errno+0x24>
  812a18:	d0a00c17 	ldw	r2,-32720(gp)
  812a1c:	103ee83a 	callr	r2
  812a20:	00000106 	br	812a28 <alt_get_errno+0x28>
  812a24:	d0a75204 	addi	r2,gp,-25272
}
  812a28:	e037883a 	mov	sp,fp
  812a2c:	dfc00117 	ldw	ra,4(sp)
  812a30:	df000017 	ldw	fp,0(sp)
  812a34:	dec00204 	addi	sp,sp,8
  812a38:	f800283a 	ret

00812a3c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  812a3c:	defffb04 	addi	sp,sp,-20
  812a40:	dfc00415 	stw	ra,16(sp)
  812a44:	df000315 	stw	fp,12(sp)
  812a48:	df000304 	addi	fp,sp,12
  812a4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  812a50:	e0bfff17 	ldw	r2,-4(fp)
  812a54:	10000616 	blt	r2,zero,812a70 <close+0x34>
  812a58:	e0bfff17 	ldw	r2,-4(fp)
  812a5c:	10c00324 	muli	r3,r2,12
  812a60:	00802074 	movhi	r2,129
  812a64:	109ea104 	addi	r2,r2,31364
  812a68:	1885883a 	add	r2,r3,r2
  812a6c:	00000106 	br	812a74 <close+0x38>
  812a70:	0005883a 	mov	r2,zero
  812a74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  812a78:	e0bffd17 	ldw	r2,-12(fp)
  812a7c:	10001926 	beq	r2,zero,812ae4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  812a80:	e0bffd17 	ldw	r2,-12(fp)
  812a84:	10800017 	ldw	r2,0(r2)
  812a88:	10800417 	ldw	r2,16(r2)
  812a8c:	10000626 	beq	r2,zero,812aa8 <close+0x6c>
  812a90:	e0bffd17 	ldw	r2,-12(fp)
  812a94:	10800017 	ldw	r2,0(r2)
  812a98:	10800417 	ldw	r2,16(r2)
  812a9c:	e13ffd17 	ldw	r4,-12(fp)
  812aa0:	103ee83a 	callr	r2
  812aa4:	00000106 	br	812aac <close+0x70>
  812aa8:	0005883a 	mov	r2,zero
  812aac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  812ab0:	e13fff17 	ldw	r4,-4(fp)
  812ab4:	08134d00 	call	8134d0 <alt_release_fd>
    if (rval < 0)
  812ab8:	e0bffe17 	ldw	r2,-8(fp)
  812abc:	1000070e 	bge	r2,zero,812adc <close+0xa0>
    {
      ALT_ERRNO = -rval;
  812ac0:	0812a000 	call	812a00 <alt_get_errno>
  812ac4:	1007883a 	mov	r3,r2
  812ac8:	e0bffe17 	ldw	r2,-8(fp)
  812acc:	0085c83a 	sub	r2,zero,r2
  812ad0:	18800015 	stw	r2,0(r3)
      return -1;
  812ad4:	00bfffc4 	movi	r2,-1
  812ad8:	00000706 	br	812af8 <close+0xbc>
    }
    return 0;
  812adc:	0005883a 	mov	r2,zero
  812ae0:	00000506 	br	812af8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812ae4:	0812a000 	call	812a00 <alt_get_errno>
  812ae8:	1007883a 	mov	r3,r2
  812aec:	00801444 	movi	r2,81
  812af0:	18800015 	stw	r2,0(r3)
    return -1;
  812af4:	00bfffc4 	movi	r2,-1
  }
}
  812af8:	e037883a 	mov	sp,fp
  812afc:	dfc00117 	ldw	ra,4(sp)
  812b00:	df000017 	ldw	fp,0(sp)
  812b04:	dec00204 	addi	sp,sp,8
  812b08:	f800283a 	ret

00812b0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  812b0c:	defffc04 	addi	sp,sp,-16
  812b10:	df000315 	stw	fp,12(sp)
  812b14:	df000304 	addi	fp,sp,12
  812b18:	e13ffd15 	stw	r4,-12(fp)
  812b1c:	e17ffe15 	stw	r5,-8(fp)
  812b20:	e1bfff15 	stw	r6,-4(fp)
  return len;
  812b24:	e0bfff17 	ldw	r2,-4(fp)
}
  812b28:	e037883a 	mov	sp,fp
  812b2c:	df000017 	ldw	fp,0(sp)
  812b30:	dec00104 	addi	sp,sp,4
  812b34:	f800283a 	ret

00812b38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812b38:	defffe04 	addi	sp,sp,-8
  812b3c:	dfc00115 	stw	ra,4(sp)
  812b40:	df000015 	stw	fp,0(sp)
  812b44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812b48:	d0a00c17 	ldw	r2,-32720(gp)
  812b4c:	10000326 	beq	r2,zero,812b5c <alt_get_errno+0x24>
  812b50:	d0a00c17 	ldw	r2,-32720(gp)
  812b54:	103ee83a 	callr	r2
  812b58:	00000106 	br	812b60 <alt_get_errno+0x28>
  812b5c:	d0a75204 	addi	r2,gp,-25272
}
  812b60:	e037883a 	mov	sp,fp
  812b64:	dfc00117 	ldw	ra,4(sp)
  812b68:	df000017 	ldw	fp,0(sp)
  812b6c:	dec00204 	addi	sp,sp,8
  812b70:	f800283a 	ret

00812b74 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  812b74:	defffb04 	addi	sp,sp,-20
  812b78:	dfc00415 	stw	ra,16(sp)
  812b7c:	df000315 	stw	fp,12(sp)
  812b80:	df000304 	addi	fp,sp,12
  812b84:	e13ffe15 	stw	r4,-8(fp)
  812b88:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812b8c:	e0bffe17 	ldw	r2,-8(fp)
  812b90:	10000616 	blt	r2,zero,812bac <fstat+0x38>
  812b94:	e0bffe17 	ldw	r2,-8(fp)
  812b98:	10c00324 	muli	r3,r2,12
  812b9c:	00802074 	movhi	r2,129
  812ba0:	109ea104 	addi	r2,r2,31364
  812ba4:	1885883a 	add	r2,r3,r2
  812ba8:	00000106 	br	812bb0 <fstat+0x3c>
  812bac:	0005883a 	mov	r2,zero
  812bb0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  812bb4:	e0bffd17 	ldw	r2,-12(fp)
  812bb8:	10001026 	beq	r2,zero,812bfc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  812bbc:	e0bffd17 	ldw	r2,-12(fp)
  812bc0:	10800017 	ldw	r2,0(r2)
  812bc4:	10800817 	ldw	r2,32(r2)
  812bc8:	10000726 	beq	r2,zero,812be8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  812bcc:	e0bffd17 	ldw	r2,-12(fp)
  812bd0:	10800017 	ldw	r2,0(r2)
  812bd4:	10800817 	ldw	r2,32(r2)
  812bd8:	e17fff17 	ldw	r5,-4(fp)
  812bdc:	e13ffd17 	ldw	r4,-12(fp)
  812be0:	103ee83a 	callr	r2
  812be4:	00000a06 	br	812c10 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  812be8:	e0bfff17 	ldw	r2,-4(fp)
  812bec:	00c80004 	movi	r3,8192
  812bf0:	10c00115 	stw	r3,4(r2)
      return 0;
  812bf4:	0005883a 	mov	r2,zero
  812bf8:	00000506 	br	812c10 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812bfc:	0812b380 	call	812b38 <alt_get_errno>
  812c00:	1007883a 	mov	r3,r2
  812c04:	00801444 	movi	r2,81
  812c08:	18800015 	stw	r2,0(r3)
    return -1;
  812c0c:	00bfffc4 	movi	r2,-1
  }
}
  812c10:	e037883a 	mov	sp,fp
  812c14:	dfc00117 	ldw	ra,4(sp)
  812c18:	df000017 	ldw	fp,0(sp)
  812c1c:	dec00204 	addi	sp,sp,8
  812c20:	f800283a 	ret

00812c24 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  812c24:	defff004 	addi	sp,sp,-64
  812c28:	df000f15 	stw	fp,60(sp)
  812c2c:	df000f04 	addi	fp,sp,60
  812c30:	e13ffd15 	stw	r4,-12(fp)
  812c34:	e17ffe15 	stw	r5,-8(fp)
  812c38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  812c3c:	00bffa84 	movi	r2,-22
  812c40:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812c44:	e0bffd17 	ldw	r2,-12(fp)
  812c48:	10800828 	cmpgeui	r2,r2,32
  812c4c:	1000501e 	bne	r2,zero,812d90 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c50:	0005303a 	rdctl	r2,status
  812c54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c58:	e0fff617 	ldw	r3,-40(fp)
  812c5c:	00bfff84 	movi	r2,-2
  812c60:	1884703a 	and	r2,r3,r2
  812c64:	1001703a 	wrctl	status,r2
  
  return context;
  812c68:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  812c6c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  812c70:	008020b4 	movhi	r2,130
  812c74:	10aafc04 	addi	r2,r2,-21520
  812c78:	e0fffd17 	ldw	r3,-12(fp)
  812c7c:	180690fa 	slli	r3,r3,3
  812c80:	10c5883a 	add	r2,r2,r3
  812c84:	e0ffff17 	ldw	r3,-4(fp)
  812c88:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  812c8c:	008020b4 	movhi	r2,130
  812c90:	10aafc04 	addi	r2,r2,-21520
  812c94:	e0fffd17 	ldw	r3,-12(fp)
  812c98:	180690fa 	slli	r3,r3,3
  812c9c:	10c5883a 	add	r2,r2,r3
  812ca0:	10800104 	addi	r2,r2,4
  812ca4:	e0fffe17 	ldw	r3,-8(fp)
  812ca8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  812cac:	e0bfff17 	ldw	r2,-4(fp)
  812cb0:	10001926 	beq	r2,zero,812d18 <alt_irq_register+0xf4>
  812cb4:	e0bffd17 	ldw	r2,-12(fp)
  812cb8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812cbc:	0005303a 	rdctl	r2,status
  812cc0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812cc4:	e0fff717 	ldw	r3,-36(fp)
  812cc8:	00bfff84 	movi	r2,-2
  812ccc:	1884703a 	and	r2,r3,r2
  812cd0:	1001703a 	wrctl	status,r2
  
  return context;
  812cd4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812cd8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  812cdc:	00c00044 	movi	r3,1
  812ce0:	e0bff217 	ldw	r2,-56(fp)
  812ce4:	1884983a 	sll	r2,r3,r2
  812ce8:	1007883a 	mov	r3,r2
  812cec:	d0a75917 	ldw	r2,-25244(gp)
  812cf0:	1884b03a 	or	r2,r3,r2
  812cf4:	d0a75915 	stw	r2,-25244(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812cf8:	d0a75917 	ldw	r2,-25244(gp)
  812cfc:	100170fa 	wrctl	ienable,r2
  812d00:	e0bff817 	ldw	r2,-32(fp)
  812d04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d08:	e0bff917 	ldw	r2,-28(fp)
  812d0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812d10:	0005883a 	mov	r2,zero
  812d14:	00001906 	br	812d7c <alt_irq_register+0x158>
  812d18:	e0bffd17 	ldw	r2,-12(fp)
  812d1c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d20:	0005303a 	rdctl	r2,status
  812d24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d28:	e0fffa17 	ldw	r3,-24(fp)
  812d2c:	00bfff84 	movi	r2,-2
  812d30:	1884703a 	and	r2,r3,r2
  812d34:	1001703a 	wrctl	status,r2
  
  return context;
  812d38:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812d3c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  812d40:	00c00044 	movi	r3,1
  812d44:	e0bff417 	ldw	r2,-48(fp)
  812d48:	1884983a 	sll	r2,r3,r2
  812d4c:	0084303a 	nor	r2,zero,r2
  812d50:	1007883a 	mov	r3,r2
  812d54:	d0a75917 	ldw	r2,-25244(gp)
  812d58:	1884703a 	and	r2,r3,r2
  812d5c:	d0a75915 	stw	r2,-25244(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812d60:	d0a75917 	ldw	r2,-25244(gp)
  812d64:	100170fa 	wrctl	ienable,r2
  812d68:	e0bffb17 	ldw	r2,-20(fp)
  812d6c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d70:	e0bffc17 	ldw	r2,-16(fp)
  812d74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812d78:	0005883a 	mov	r2,zero
  812d7c:	e0bff115 	stw	r2,-60(fp)
  812d80:	e0bff317 	ldw	r2,-52(fp)
  812d84:	e0bff515 	stw	r2,-44(fp)
  812d88:	e0bff517 	ldw	r2,-44(fp)
  812d8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  812d90:	e0bff117 	ldw	r2,-60(fp)
}
  812d94:	e037883a 	mov	sp,fp
  812d98:	df000017 	ldw	fp,0(sp)
  812d9c:	dec00104 	addi	sp,sp,4
  812da0:	f800283a 	ret

00812da4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812da4:	defffe04 	addi	sp,sp,-8
  812da8:	dfc00115 	stw	ra,4(sp)
  812dac:	df000015 	stw	fp,0(sp)
  812db0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812db4:	d0a00c17 	ldw	r2,-32720(gp)
  812db8:	10000326 	beq	r2,zero,812dc8 <alt_get_errno+0x24>
  812dbc:	d0a00c17 	ldw	r2,-32720(gp)
  812dc0:	103ee83a 	callr	r2
  812dc4:	00000106 	br	812dcc <alt_get_errno+0x28>
  812dc8:	d0a75204 	addi	r2,gp,-25272
}
  812dcc:	e037883a 	mov	sp,fp
  812dd0:	dfc00117 	ldw	ra,4(sp)
  812dd4:	df000017 	ldw	fp,0(sp)
  812dd8:	dec00204 	addi	sp,sp,8
  812ddc:	f800283a 	ret

00812de0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  812de0:	deffed04 	addi	sp,sp,-76
  812de4:	dfc01215 	stw	ra,72(sp)
  812de8:	df001115 	stw	fp,68(sp)
  812dec:	df001104 	addi	fp,sp,68
  812df0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812df4:	e0bfff17 	ldw	r2,-4(fp)
  812df8:	10000616 	blt	r2,zero,812e14 <isatty+0x34>
  812dfc:	e0bfff17 	ldw	r2,-4(fp)
  812e00:	10c00324 	muli	r3,r2,12
  812e04:	00802074 	movhi	r2,129
  812e08:	109ea104 	addi	r2,r2,31364
  812e0c:	1885883a 	add	r2,r3,r2
  812e10:	00000106 	br	812e18 <isatty+0x38>
  812e14:	0005883a 	mov	r2,zero
  812e18:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  812e1c:	e0bfef17 	ldw	r2,-68(fp)
  812e20:	10000e26 	beq	r2,zero,812e5c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  812e24:	e0bfef17 	ldw	r2,-68(fp)
  812e28:	10800017 	ldw	r2,0(r2)
  812e2c:	10800817 	ldw	r2,32(r2)
  812e30:	1000021e 	bne	r2,zero,812e3c <isatty+0x5c>
    {
      return 1;
  812e34:	00800044 	movi	r2,1
  812e38:	00000d06 	br	812e70 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  812e3c:	e0bff004 	addi	r2,fp,-64
  812e40:	100b883a 	mov	r5,r2
  812e44:	e13fff17 	ldw	r4,-4(fp)
  812e48:	0812b740 	call	812b74 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  812e4c:	e0bff117 	ldw	r2,-60(fp)
  812e50:	10880020 	cmpeqi	r2,r2,8192
  812e54:	10803fcc 	andi	r2,r2,255
  812e58:	00000506 	br	812e70 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812e5c:	0812da40 	call	812da4 <alt_get_errno>
  812e60:	1007883a 	mov	r3,r2
  812e64:	00801444 	movi	r2,81
  812e68:	18800015 	stw	r2,0(r3)
    return 0;
  812e6c:	0005883a 	mov	r2,zero
  }
}
  812e70:	e037883a 	mov	sp,fp
  812e74:	dfc00117 	ldw	ra,4(sp)
  812e78:	df000017 	ldw	fp,0(sp)
  812e7c:	dec00204 	addi	sp,sp,8
  812e80:	f800283a 	ret

00812e84 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  812e84:	defffc04 	addi	sp,sp,-16
  812e88:	df000315 	stw	fp,12(sp)
  812e8c:	df000304 	addi	fp,sp,12
  812e90:	e13ffd15 	stw	r4,-12(fp)
  812e94:	e17ffe15 	stw	r5,-8(fp)
  812e98:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  812e9c:	e0fffe17 	ldw	r3,-8(fp)
  812ea0:	e0bffd17 	ldw	r2,-12(fp)
  812ea4:	18800c26 	beq	r3,r2,812ed8 <alt_load_section+0x54>
  {
    while( to != end )
  812ea8:	00000806 	br	812ecc <alt_load_section+0x48>
    {
      *to++ = *from++;
  812eac:	e0bffe17 	ldw	r2,-8(fp)
  812eb0:	10c00104 	addi	r3,r2,4
  812eb4:	e0fffe15 	stw	r3,-8(fp)
  812eb8:	e0fffd17 	ldw	r3,-12(fp)
  812ebc:	19000104 	addi	r4,r3,4
  812ec0:	e13ffd15 	stw	r4,-12(fp)
  812ec4:	18c00017 	ldw	r3,0(r3)
  812ec8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  812ecc:	e0fffe17 	ldw	r3,-8(fp)
  812ed0:	e0bfff17 	ldw	r2,-4(fp)
  812ed4:	18bff51e 	bne	r3,r2,812eac <__alt_mem_onchip_mem+0xff80aeac>
    {
      *to++ = *from++;
    }
  }
}
  812ed8:	0001883a 	nop
  812edc:	e037883a 	mov	sp,fp
  812ee0:	df000017 	ldw	fp,0(sp)
  812ee4:	dec00104 	addi	sp,sp,4
  812ee8:	f800283a 	ret

00812eec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  812eec:	defffe04 	addi	sp,sp,-8
  812ef0:	dfc00115 	stw	ra,4(sp)
  812ef4:	df000015 	stw	fp,0(sp)
  812ef8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  812efc:	018020b4 	movhi	r6,130
  812f00:	31a3a504 	addi	r6,r6,-29036
  812f04:	01402074 	movhi	r5,129
  812f08:	295c6e04 	addi	r5,r5,29112
  812f0c:	010020b4 	movhi	r4,130
  812f10:	2123a504 	addi	r4,r4,-29036
  812f14:	0812e840 	call	812e84 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  812f18:	01802034 	movhi	r6,128
  812f1c:	31809104 	addi	r6,r6,580
  812f20:	01402034 	movhi	r5,128
  812f24:	29400804 	addi	r5,r5,32
  812f28:	01002034 	movhi	r4,128
  812f2c:	21000804 	addi	r4,r4,32
  812f30:	0812e840 	call	812e84 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  812f34:	01802074 	movhi	r6,129
  812f38:	319c6e04 	addi	r6,r6,29112
  812f3c:	01402074 	movhi	r5,129
  812f40:	295add04 	addi	r5,r5,27508
  812f44:	01002074 	movhi	r4,129
  812f48:	211add04 	addi	r4,r4,27508
  812f4c:	0812e840 	call	812e84 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  812f50:	0815cd00 	call	815cd0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  812f54:	08160f40 	call	8160f4 <alt_icache_flush_all>
}
  812f58:	0001883a 	nop
  812f5c:	e037883a 	mov	sp,fp
  812f60:	dfc00117 	ldw	ra,4(sp)
  812f64:	df000017 	ldw	fp,0(sp)
  812f68:	dec00204 	addi	sp,sp,8
  812f6c:	f800283a 	ret

00812f70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812f70:	defffe04 	addi	sp,sp,-8
  812f74:	dfc00115 	stw	ra,4(sp)
  812f78:	df000015 	stw	fp,0(sp)
  812f7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812f80:	d0a00c17 	ldw	r2,-32720(gp)
  812f84:	10000326 	beq	r2,zero,812f94 <alt_get_errno+0x24>
  812f88:	d0a00c17 	ldw	r2,-32720(gp)
  812f8c:	103ee83a 	callr	r2
  812f90:	00000106 	br	812f98 <alt_get_errno+0x28>
  812f94:	d0a75204 	addi	r2,gp,-25272
}
  812f98:	e037883a 	mov	sp,fp
  812f9c:	dfc00117 	ldw	ra,4(sp)
  812fa0:	df000017 	ldw	fp,0(sp)
  812fa4:	dec00204 	addi	sp,sp,8
  812fa8:	f800283a 	ret

00812fac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  812fac:	defff904 	addi	sp,sp,-28
  812fb0:	dfc00615 	stw	ra,24(sp)
  812fb4:	df000515 	stw	fp,20(sp)
  812fb8:	df000504 	addi	fp,sp,20
  812fbc:	e13ffd15 	stw	r4,-12(fp)
  812fc0:	e17ffe15 	stw	r5,-8(fp)
  812fc4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  812fc8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812fcc:	e0bffd17 	ldw	r2,-12(fp)
  812fd0:	10000616 	blt	r2,zero,812fec <lseek+0x40>
  812fd4:	e0bffd17 	ldw	r2,-12(fp)
  812fd8:	10c00324 	muli	r3,r2,12
  812fdc:	00802074 	movhi	r2,129
  812fe0:	109ea104 	addi	r2,r2,31364
  812fe4:	1885883a 	add	r2,r3,r2
  812fe8:	00000106 	br	812ff0 <lseek+0x44>
  812fec:	0005883a 	mov	r2,zero
  812ff0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  812ff4:	e0bffc17 	ldw	r2,-16(fp)
  812ff8:	10001026 	beq	r2,zero,81303c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  812ffc:	e0bffc17 	ldw	r2,-16(fp)
  813000:	10800017 	ldw	r2,0(r2)
  813004:	10800717 	ldw	r2,28(r2)
  813008:	10000926 	beq	r2,zero,813030 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  81300c:	e0bffc17 	ldw	r2,-16(fp)
  813010:	10800017 	ldw	r2,0(r2)
  813014:	10800717 	ldw	r2,28(r2)
  813018:	e1bfff17 	ldw	r6,-4(fp)
  81301c:	e17ffe17 	ldw	r5,-8(fp)
  813020:	e13ffc17 	ldw	r4,-16(fp)
  813024:	103ee83a 	callr	r2
  813028:	e0bffb15 	stw	r2,-20(fp)
  81302c:	00000506 	br	813044 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  813030:	00bfde84 	movi	r2,-134
  813034:	e0bffb15 	stw	r2,-20(fp)
  813038:	00000206 	br	813044 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  81303c:	00bfebc4 	movi	r2,-81
  813040:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  813044:	e0bffb17 	ldw	r2,-20(fp)
  813048:	1000070e 	bge	r2,zero,813068 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  81304c:	0812f700 	call	812f70 <alt_get_errno>
  813050:	1007883a 	mov	r3,r2
  813054:	e0bffb17 	ldw	r2,-20(fp)
  813058:	0085c83a 	sub	r2,zero,r2
  81305c:	18800015 	stw	r2,0(r3)
    rc = -1;
  813060:	00bfffc4 	movi	r2,-1
  813064:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  813068:	e0bffb17 	ldw	r2,-20(fp)
}
  81306c:	e037883a 	mov	sp,fp
  813070:	dfc00117 	ldw	ra,4(sp)
  813074:	df000017 	ldw	fp,0(sp)
  813078:	dec00204 	addi	sp,sp,8
  81307c:	f800283a 	ret

00813080 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  813080:	defffd04 	addi	sp,sp,-12
  813084:	dfc00215 	stw	ra,8(sp)
  813088:	df000115 	stw	fp,4(sp)
  81308c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  813090:	0009883a 	mov	r4,zero
  813094:	08138f00 	call	8138f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  813098:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  81309c:	08139280 	call	813928 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8130a0:	01802074 	movhi	r6,129
  8130a4:	319bc004 	addi	r6,r6,28416
  8130a8:	01402074 	movhi	r5,129
  8130ac:	295bc004 	addi	r5,r5,28416
  8130b0:	01002074 	movhi	r4,129
  8130b4:	211bc004 	addi	r4,r4,28416
  8130b8:	081648c0 	call	81648c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8130bc:	0815df80 	call	815df8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8130c0:	01002074 	movhi	r4,129
  8130c4:	21179604 	addi	r4,r4,24152
  8130c8:	08167e00 	call	8167e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8130cc:	d0a75a17 	ldw	r2,-25240(gp)
  8130d0:	d0e75b17 	ldw	r3,-25236(gp)
  8130d4:	d1275c17 	ldw	r4,-25232(gp)
  8130d8:	200d883a 	mov	r6,r4
  8130dc:	180b883a 	mov	r5,r3
  8130e0:	1009883a 	mov	r4,r2
  8130e4:	08009280 	call	800928 <main>
  8130e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8130ec:	01000044 	movi	r4,1
  8130f0:	0812a3c0 	call	812a3c <close>
  exit (result);
  8130f4:	e13fff17 	ldw	r4,-4(fp)
  8130f8:	08167f40 	call	8167f4 <exit>

008130fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8130fc:	defffe04 	addi	sp,sp,-8
  813100:	df000115 	stw	fp,4(sp)
  813104:	df000104 	addi	fp,sp,4
  813108:	e13fff15 	stw	r4,-4(fp)
}
  81310c:	0001883a 	nop
  813110:	e037883a 	mov	sp,fp
  813114:	df000017 	ldw	fp,0(sp)
  813118:	dec00104 	addi	sp,sp,4
  81311c:	f800283a 	ret

00813120 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  813120:	defffe04 	addi	sp,sp,-8
  813124:	df000115 	stw	fp,4(sp)
  813128:	df000104 	addi	fp,sp,4
  81312c:	e13fff15 	stw	r4,-4(fp)
}
  813130:	0001883a 	nop
  813134:	e037883a 	mov	sp,fp
  813138:	df000017 	ldw	fp,0(sp)
  81313c:	dec00104 	addi	sp,sp,4
  813140:	f800283a 	ret

00813144 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813144:	defffe04 	addi	sp,sp,-8
  813148:	dfc00115 	stw	ra,4(sp)
  81314c:	df000015 	stw	fp,0(sp)
  813150:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813154:	d0a00c17 	ldw	r2,-32720(gp)
  813158:	10000326 	beq	r2,zero,813168 <alt_get_errno+0x24>
  81315c:	d0a00c17 	ldw	r2,-32720(gp)
  813160:	103ee83a 	callr	r2
  813164:	00000106 	br	81316c <alt_get_errno+0x28>
  813168:	d0a75204 	addi	r2,gp,-25272
}
  81316c:	e037883a 	mov	sp,fp
  813170:	dfc00117 	ldw	ra,4(sp)
  813174:	df000017 	ldw	fp,0(sp)
  813178:	dec00204 	addi	sp,sp,8
  81317c:	f800283a 	ret

00813180 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  813180:	defffd04 	addi	sp,sp,-12
  813184:	df000215 	stw	fp,8(sp)
  813188:	df000204 	addi	fp,sp,8
  81318c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  813190:	e0bfff17 	ldw	r2,-4(fp)
  813194:	10800217 	ldw	r2,8(r2)
  813198:	10d00034 	orhi	r3,r2,16384
  81319c:	e0bfff17 	ldw	r2,-4(fp)
  8131a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8131a4:	e03ffe15 	stw	zero,-8(fp)
  8131a8:	00001d06 	br	813220 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8131ac:	00802074 	movhi	r2,129
  8131b0:	109ea104 	addi	r2,r2,31364
  8131b4:	e0fffe17 	ldw	r3,-8(fp)
  8131b8:	18c00324 	muli	r3,r3,12
  8131bc:	10c5883a 	add	r2,r2,r3
  8131c0:	10c00017 	ldw	r3,0(r2)
  8131c4:	e0bfff17 	ldw	r2,-4(fp)
  8131c8:	10800017 	ldw	r2,0(r2)
  8131cc:	1880111e 	bne	r3,r2,813214 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8131d0:	00802074 	movhi	r2,129
  8131d4:	109ea104 	addi	r2,r2,31364
  8131d8:	e0fffe17 	ldw	r3,-8(fp)
  8131dc:	18c00324 	muli	r3,r3,12
  8131e0:	10c5883a 	add	r2,r2,r3
  8131e4:	10800204 	addi	r2,r2,8
  8131e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8131ec:	1000090e 	bge	r2,zero,813214 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8131f0:	e0bffe17 	ldw	r2,-8(fp)
  8131f4:	10c00324 	muli	r3,r2,12
  8131f8:	00802074 	movhi	r2,129
  8131fc:	109ea104 	addi	r2,r2,31364
  813200:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813204:	e0bfff17 	ldw	r2,-4(fp)
  813208:	18800226 	beq	r3,r2,813214 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81320c:	00bffcc4 	movi	r2,-13
  813210:	00000806 	br	813234 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813214:	e0bffe17 	ldw	r2,-8(fp)
  813218:	10800044 	addi	r2,r2,1
  81321c:	e0bffe15 	stw	r2,-8(fp)
  813220:	d0a00b17 	ldw	r2,-32724(gp)
  813224:	1007883a 	mov	r3,r2
  813228:	e0bffe17 	ldw	r2,-8(fp)
  81322c:	18bfdf2e 	bgeu	r3,r2,8131ac <__alt_mem_onchip_mem+0xff80b1ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  813230:	0005883a 	mov	r2,zero
}
  813234:	e037883a 	mov	sp,fp
  813238:	df000017 	ldw	fp,0(sp)
  81323c:	dec00104 	addi	sp,sp,4
  813240:	f800283a 	ret

00813244 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813244:	defff604 	addi	sp,sp,-40
  813248:	dfc00915 	stw	ra,36(sp)
  81324c:	df000815 	stw	fp,32(sp)
  813250:	df000804 	addi	fp,sp,32
  813254:	e13ffd15 	stw	r4,-12(fp)
  813258:	e17ffe15 	stw	r5,-8(fp)
  81325c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  813260:	00bfffc4 	movi	r2,-1
  813264:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  813268:	00bffb44 	movi	r2,-19
  81326c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  813270:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813274:	d1600904 	addi	r5,gp,-32732
  813278:	e13ffd17 	ldw	r4,-12(fp)
  81327c:	0815eb80 	call	815eb8 <alt_find_dev>
  813280:	e0bff815 	stw	r2,-32(fp)
  813284:	e0bff817 	ldw	r2,-32(fp)
  813288:	1000051e 	bne	r2,zero,8132a0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81328c:	e13ffd17 	ldw	r4,-12(fp)
  813290:	0815f480 	call	815f48 <alt_find_file>
  813294:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  813298:	00800044 	movi	r2,1
  81329c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8132a0:	e0bff817 	ldw	r2,-32(fp)
  8132a4:	10002926 	beq	r2,zero,81334c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8132a8:	e13ff817 	ldw	r4,-32(fp)
  8132ac:	08160500 	call	816050 <alt_get_fd>
  8132b0:	e0bff915 	stw	r2,-28(fp)
  8132b4:	e0bff917 	ldw	r2,-28(fp)
  8132b8:	1000030e 	bge	r2,zero,8132c8 <open+0x84>
    {
      status = index;
  8132bc:	e0bff917 	ldw	r2,-28(fp)
  8132c0:	e0bffa15 	stw	r2,-24(fp)
  8132c4:	00002306 	br	813354 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  8132c8:	e0bff917 	ldw	r2,-28(fp)
  8132cc:	10c00324 	muli	r3,r2,12
  8132d0:	00802074 	movhi	r2,129
  8132d4:	109ea104 	addi	r2,r2,31364
  8132d8:	1885883a 	add	r2,r3,r2
  8132dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8132e0:	e0fffe17 	ldw	r3,-8(fp)
  8132e4:	00900034 	movhi	r2,16384
  8132e8:	10bfffc4 	addi	r2,r2,-1
  8132ec:	1886703a 	and	r3,r3,r2
  8132f0:	e0bffc17 	ldw	r2,-16(fp)
  8132f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8132f8:	e0bffb17 	ldw	r2,-20(fp)
  8132fc:	1000051e 	bne	r2,zero,813314 <open+0xd0>
  813300:	e13ffc17 	ldw	r4,-16(fp)
  813304:	08131800 	call	813180 <alt_file_locked>
  813308:	e0bffa15 	stw	r2,-24(fp)
  81330c:	e0bffa17 	ldw	r2,-24(fp)
  813310:	10001016 	blt	r2,zero,813354 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  813314:	e0bff817 	ldw	r2,-32(fp)
  813318:	10800317 	ldw	r2,12(r2)
  81331c:	10000826 	beq	r2,zero,813340 <open+0xfc>
  813320:	e0bff817 	ldw	r2,-32(fp)
  813324:	10800317 	ldw	r2,12(r2)
  813328:	e1ffff17 	ldw	r7,-4(fp)
  81332c:	e1bffe17 	ldw	r6,-8(fp)
  813330:	e17ffd17 	ldw	r5,-12(fp)
  813334:	e13ffc17 	ldw	r4,-16(fp)
  813338:	103ee83a 	callr	r2
  81333c:	00000106 	br	813344 <open+0x100>
  813340:	0005883a 	mov	r2,zero
  813344:	e0bffa15 	stw	r2,-24(fp)
  813348:	00000206 	br	813354 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81334c:	00bffb44 	movi	r2,-19
  813350:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813354:	e0bffa17 	ldw	r2,-24(fp)
  813358:	1000090e 	bge	r2,zero,813380 <open+0x13c>
  {
    alt_release_fd (index);  
  81335c:	e13ff917 	ldw	r4,-28(fp)
  813360:	08134d00 	call	8134d0 <alt_release_fd>
    ALT_ERRNO = -status;
  813364:	08131440 	call	813144 <alt_get_errno>
  813368:	1007883a 	mov	r3,r2
  81336c:	e0bffa17 	ldw	r2,-24(fp)
  813370:	0085c83a 	sub	r2,zero,r2
  813374:	18800015 	stw	r2,0(r3)
    return -1;
  813378:	00bfffc4 	movi	r2,-1
  81337c:	00000106 	br	813384 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  813380:	e0bff917 	ldw	r2,-28(fp)
}
  813384:	e037883a 	mov	sp,fp
  813388:	dfc00117 	ldw	ra,4(sp)
  81338c:	df000017 	ldw	fp,0(sp)
  813390:	dec00204 	addi	sp,sp,8
  813394:	f800283a 	ret

00813398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813398:	defffe04 	addi	sp,sp,-8
  81339c:	dfc00115 	stw	ra,4(sp)
  8133a0:	df000015 	stw	fp,0(sp)
  8133a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8133a8:	d0a00c17 	ldw	r2,-32720(gp)
  8133ac:	10000326 	beq	r2,zero,8133bc <alt_get_errno+0x24>
  8133b0:	d0a00c17 	ldw	r2,-32720(gp)
  8133b4:	103ee83a 	callr	r2
  8133b8:	00000106 	br	8133c0 <alt_get_errno+0x28>
  8133bc:	d0a75204 	addi	r2,gp,-25272
}
  8133c0:	e037883a 	mov	sp,fp
  8133c4:	dfc00117 	ldw	ra,4(sp)
  8133c8:	df000017 	ldw	fp,0(sp)
  8133cc:	dec00204 	addi	sp,sp,8
  8133d0:	f800283a 	ret

008133d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8133d4:	defff904 	addi	sp,sp,-28
  8133d8:	dfc00615 	stw	ra,24(sp)
  8133dc:	df000515 	stw	fp,20(sp)
  8133e0:	df000504 	addi	fp,sp,20
  8133e4:	e13ffd15 	stw	r4,-12(fp)
  8133e8:	e17ffe15 	stw	r5,-8(fp)
  8133ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8133f0:	e0bffd17 	ldw	r2,-12(fp)
  8133f4:	10000616 	blt	r2,zero,813410 <read+0x3c>
  8133f8:	e0bffd17 	ldw	r2,-12(fp)
  8133fc:	10c00324 	muli	r3,r2,12
  813400:	00802074 	movhi	r2,129
  813404:	109ea104 	addi	r2,r2,31364
  813408:	1885883a 	add	r2,r3,r2
  81340c:	00000106 	br	813414 <read+0x40>
  813410:	0005883a 	mov	r2,zero
  813414:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  813418:	e0bffb17 	ldw	r2,-20(fp)
  81341c:	10002226 	beq	r2,zero,8134a8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  813420:	e0bffb17 	ldw	r2,-20(fp)
  813424:	10800217 	ldw	r2,8(r2)
  813428:	108000cc 	andi	r2,r2,3
  81342c:	10800060 	cmpeqi	r2,r2,1
  813430:	1000181e 	bne	r2,zero,813494 <read+0xc0>
        (fd->dev->read))
  813434:	e0bffb17 	ldw	r2,-20(fp)
  813438:	10800017 	ldw	r2,0(r2)
  81343c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  813440:	10001426 	beq	r2,zero,813494 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  813444:	e0bffb17 	ldw	r2,-20(fp)
  813448:	10800017 	ldw	r2,0(r2)
  81344c:	10800517 	ldw	r2,20(r2)
  813450:	e0ffff17 	ldw	r3,-4(fp)
  813454:	180d883a 	mov	r6,r3
  813458:	e17ffe17 	ldw	r5,-8(fp)
  81345c:	e13ffb17 	ldw	r4,-20(fp)
  813460:	103ee83a 	callr	r2
  813464:	e0bffc15 	stw	r2,-16(fp)
  813468:	e0bffc17 	ldw	r2,-16(fp)
  81346c:	1000070e 	bge	r2,zero,81348c <read+0xb8>
        {
          ALT_ERRNO = -rval;
  813470:	08133980 	call	813398 <alt_get_errno>
  813474:	1007883a 	mov	r3,r2
  813478:	e0bffc17 	ldw	r2,-16(fp)
  81347c:	0085c83a 	sub	r2,zero,r2
  813480:	18800015 	stw	r2,0(r3)
          return -1;
  813484:	00bfffc4 	movi	r2,-1
  813488:	00000c06 	br	8134bc <read+0xe8>
        }
        return rval;
  81348c:	e0bffc17 	ldw	r2,-16(fp)
  813490:	00000a06 	br	8134bc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  813494:	08133980 	call	813398 <alt_get_errno>
  813498:	1007883a 	mov	r3,r2
  81349c:	00800344 	movi	r2,13
  8134a0:	18800015 	stw	r2,0(r3)
  8134a4:	00000406 	br	8134b8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8134a8:	08133980 	call	813398 <alt_get_errno>
  8134ac:	1007883a 	mov	r3,r2
  8134b0:	00801444 	movi	r2,81
  8134b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8134b8:	00bfffc4 	movi	r2,-1
}
  8134bc:	e037883a 	mov	sp,fp
  8134c0:	dfc00117 	ldw	ra,4(sp)
  8134c4:	df000017 	ldw	fp,0(sp)
  8134c8:	dec00204 	addi	sp,sp,8
  8134cc:	f800283a 	ret

008134d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8134d0:	defffe04 	addi	sp,sp,-8
  8134d4:	df000115 	stw	fp,4(sp)
  8134d8:	df000104 	addi	fp,sp,4
  8134dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8134e0:	e0bfff17 	ldw	r2,-4(fp)
  8134e4:	108000d0 	cmplti	r2,r2,3
  8134e8:	10000d1e 	bne	r2,zero,813520 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8134ec:	00802074 	movhi	r2,129
  8134f0:	109ea104 	addi	r2,r2,31364
  8134f4:	e0ffff17 	ldw	r3,-4(fp)
  8134f8:	18c00324 	muli	r3,r3,12
  8134fc:	10c5883a 	add	r2,r2,r3
  813500:	10800204 	addi	r2,r2,8
  813504:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  813508:	00802074 	movhi	r2,129
  81350c:	109ea104 	addi	r2,r2,31364
  813510:	e0ffff17 	ldw	r3,-4(fp)
  813514:	18c00324 	muli	r3,r3,12
  813518:	10c5883a 	add	r2,r2,r3
  81351c:	10000015 	stw	zero,0(r2)
  }
}
  813520:	0001883a 	nop
  813524:	e037883a 	mov	sp,fp
  813528:	df000017 	ldw	fp,0(sp)
  81352c:	dec00104 	addi	sp,sp,4
  813530:	f800283a 	ret

00813534 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  813534:	defff904 	addi	sp,sp,-28
  813538:	df000615 	stw	fp,24(sp)
  81353c:	df000604 	addi	fp,sp,24
  813540:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813544:	0005303a 	rdctl	r2,status
  813548:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81354c:	e0fffe17 	ldw	r3,-8(fp)
  813550:	00bfff84 	movi	r2,-2
  813554:	1884703a 	and	r2,r3,r2
  813558:	1001703a 	wrctl	status,r2
  
  return context;
  81355c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  813560:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  813564:	d0a00e17 	ldw	r2,-32712(gp)
  813568:	10c000c4 	addi	r3,r2,3
  81356c:	00bfff04 	movi	r2,-4
  813570:	1884703a 	and	r2,r3,r2
  813574:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  813578:	d0e00e17 	ldw	r3,-32712(gp)
  81357c:	e0bfff17 	ldw	r2,-4(fp)
  813580:	1887883a 	add	r3,r3,r2
  813584:	00804034 	movhi	r2,256
  813588:	10800004 	addi	r2,r2,0
  81358c:	10c0062e 	bgeu	r2,r3,8135a8 <sbrk+0x74>
  813590:	e0bffb17 	ldw	r2,-20(fp)
  813594:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813598:	e0bffa17 	ldw	r2,-24(fp)
  81359c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8135a0:	00bfffc4 	movi	r2,-1
  8135a4:	00000b06 	br	8135d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  8135a8:	d0a00e17 	ldw	r2,-32712(gp)
  8135ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  8135b0:	d0e00e17 	ldw	r3,-32712(gp)
  8135b4:	e0bfff17 	ldw	r2,-4(fp)
  8135b8:	1885883a 	add	r2,r3,r2
  8135bc:	d0a00e15 	stw	r2,-32712(gp)
  8135c0:	e0bffb17 	ldw	r2,-20(fp)
  8135c4:	e0bffc15 	stw	r2,-16(fp)
  8135c8:	e0bffc17 	ldw	r2,-16(fp)
  8135cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8135d0:	e0bffd17 	ldw	r2,-12(fp)
} 
  8135d4:	e037883a 	mov	sp,fp
  8135d8:	df000017 	ldw	fp,0(sp)
  8135dc:	dec00104 	addi	sp,sp,4
  8135e0:	f800283a 	ret

008135e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8135e4:	defffa04 	addi	sp,sp,-24
  8135e8:	df000515 	stw	fp,20(sp)
  8135ec:	df000504 	addi	fp,sp,20
  8135f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8135f4:	0005303a 	rdctl	r2,status
  8135f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8135fc:	e0fffc17 	ldw	r3,-16(fp)
  813600:	00bfff84 	movi	r2,-2
  813604:	1884703a 	and	r2,r3,r2
  813608:	1001703a 	wrctl	status,r2
  
  return context;
  81360c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  813610:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  813614:	e0bfff17 	ldw	r2,-4(fp)
  813618:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81361c:	e0bffd17 	ldw	r2,-12(fp)
  813620:	10800017 	ldw	r2,0(r2)
  813624:	e0fffd17 	ldw	r3,-12(fp)
  813628:	18c00117 	ldw	r3,4(r3)
  81362c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  813630:	e0bffd17 	ldw	r2,-12(fp)
  813634:	10800117 	ldw	r2,4(r2)
  813638:	e0fffd17 	ldw	r3,-12(fp)
  81363c:	18c00017 	ldw	r3,0(r3)
  813640:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  813644:	e0bffd17 	ldw	r2,-12(fp)
  813648:	e0fffd17 	ldw	r3,-12(fp)
  81364c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  813650:	e0bffd17 	ldw	r2,-12(fp)
  813654:	e0fffd17 	ldw	r3,-12(fp)
  813658:	10c00015 	stw	r3,0(r2)
  81365c:	e0bffb17 	ldw	r2,-20(fp)
  813660:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813664:	e0bffe17 	ldw	r2,-8(fp)
  813668:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81366c:	0001883a 	nop
  813670:	e037883a 	mov	sp,fp
  813674:	df000017 	ldw	fp,0(sp)
  813678:	dec00104 	addi	sp,sp,4
  81367c:	f800283a 	ret

00813680 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813680:	defffb04 	addi	sp,sp,-20
  813684:	dfc00415 	stw	ra,16(sp)
  813688:	df000315 	stw	fp,12(sp)
  81368c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  813690:	d0a00f17 	ldw	r2,-32708(gp)
  813694:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813698:	d0a75e17 	ldw	r2,-25224(gp)
  81369c:	10800044 	addi	r2,r2,1
  8136a0:	d0a75e15 	stw	r2,-25224(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8136a4:	00002e06 	br	813760 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8136a8:	e0bffd17 	ldw	r2,-12(fp)
  8136ac:	10800017 	ldw	r2,0(r2)
  8136b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8136b4:	e0bffd17 	ldw	r2,-12(fp)
  8136b8:	10800403 	ldbu	r2,16(r2)
  8136bc:	10803fcc 	andi	r2,r2,255
  8136c0:	10000426 	beq	r2,zero,8136d4 <alt_tick+0x54>
  8136c4:	d0a75e17 	ldw	r2,-25224(gp)
  8136c8:	1000021e 	bne	r2,zero,8136d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8136cc:	e0bffd17 	ldw	r2,-12(fp)
  8136d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8136d4:	e0bffd17 	ldw	r2,-12(fp)
  8136d8:	10800217 	ldw	r2,8(r2)
  8136dc:	d0e75e17 	ldw	r3,-25224(gp)
  8136e0:	18801d36 	bltu	r3,r2,813758 <alt_tick+0xd8>
  8136e4:	e0bffd17 	ldw	r2,-12(fp)
  8136e8:	10800403 	ldbu	r2,16(r2)
  8136ec:	10803fcc 	andi	r2,r2,255
  8136f0:	1000191e 	bne	r2,zero,813758 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8136f4:	e0bffd17 	ldw	r2,-12(fp)
  8136f8:	10800317 	ldw	r2,12(r2)
  8136fc:	e0fffd17 	ldw	r3,-12(fp)
  813700:	18c00517 	ldw	r3,20(r3)
  813704:	1809883a 	mov	r4,r3
  813708:	103ee83a 	callr	r2
  81370c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  813710:	e0bfff17 	ldw	r2,-4(fp)
  813714:	1000031e 	bne	r2,zero,813724 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  813718:	e13ffd17 	ldw	r4,-12(fp)
  81371c:	08135e40 	call	8135e4 <alt_alarm_stop>
  813720:	00000d06 	br	813758 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  813724:	e0bffd17 	ldw	r2,-12(fp)
  813728:	10c00217 	ldw	r3,8(r2)
  81372c:	e0bfff17 	ldw	r2,-4(fp)
  813730:	1887883a 	add	r3,r3,r2
  813734:	e0bffd17 	ldw	r2,-12(fp)
  813738:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81373c:	e0bffd17 	ldw	r2,-12(fp)
  813740:	10c00217 	ldw	r3,8(r2)
  813744:	d0a75e17 	ldw	r2,-25224(gp)
  813748:	1880032e 	bgeu	r3,r2,813758 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81374c:	e0bffd17 	ldw	r2,-12(fp)
  813750:	00c00044 	movi	r3,1
  813754:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  813758:	e0bffe17 	ldw	r2,-8(fp)
  81375c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813760:	e0fffd17 	ldw	r3,-12(fp)
  813764:	d0a00f04 	addi	r2,gp,-32708
  813768:	18bfcf1e 	bne	r3,r2,8136a8 <__alt_mem_onchip_mem+0xff80b6a8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81376c:	0001883a 	nop
}
  813770:	0001883a 	nop
  813774:	e037883a 	mov	sp,fp
  813778:	dfc00117 	ldw	ra,4(sp)
  81377c:	df000017 	ldw	fp,0(sp)
  813780:	dec00204 	addi	sp,sp,8
  813784:	f800283a 	ret

00813788 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813788:	defffe04 	addi	sp,sp,-8
  81378c:	dfc00115 	stw	ra,4(sp)
  813790:	df000015 	stw	fp,0(sp)
  813794:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813798:	d0a00c17 	ldw	r2,-32720(gp)
  81379c:	10000326 	beq	r2,zero,8137ac <alt_get_errno+0x24>
  8137a0:	d0a00c17 	ldw	r2,-32720(gp)
  8137a4:	103ee83a 	callr	r2
  8137a8:	00000106 	br	8137b0 <alt_get_errno+0x28>
  8137ac:	d0a75204 	addi	r2,gp,-25272
}
  8137b0:	e037883a 	mov	sp,fp
  8137b4:	dfc00117 	ldw	ra,4(sp)
  8137b8:	df000017 	ldw	fp,0(sp)
  8137bc:	dec00204 	addi	sp,sp,8
  8137c0:	f800283a 	ret

008137c4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8137c4:	defff904 	addi	sp,sp,-28
  8137c8:	dfc00615 	stw	ra,24(sp)
  8137cc:	df000515 	stw	fp,20(sp)
  8137d0:	df000504 	addi	fp,sp,20
  8137d4:	e13ffd15 	stw	r4,-12(fp)
  8137d8:	e17ffe15 	stw	r5,-8(fp)
  8137dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8137e0:	e0bffd17 	ldw	r2,-12(fp)
  8137e4:	10000616 	blt	r2,zero,813800 <write+0x3c>
  8137e8:	e0bffd17 	ldw	r2,-12(fp)
  8137ec:	10c00324 	muli	r3,r2,12
  8137f0:	00802074 	movhi	r2,129
  8137f4:	109ea104 	addi	r2,r2,31364
  8137f8:	1885883a 	add	r2,r3,r2
  8137fc:	00000106 	br	813804 <write+0x40>
  813800:	0005883a 	mov	r2,zero
  813804:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  813808:	e0bffb17 	ldw	r2,-20(fp)
  81380c:	10002126 	beq	r2,zero,813894 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  813810:	e0bffb17 	ldw	r2,-20(fp)
  813814:	10800217 	ldw	r2,8(r2)
  813818:	108000cc 	andi	r2,r2,3
  81381c:	10001826 	beq	r2,zero,813880 <write+0xbc>
  813820:	e0bffb17 	ldw	r2,-20(fp)
  813824:	10800017 	ldw	r2,0(r2)
  813828:	10800617 	ldw	r2,24(r2)
  81382c:	10001426 	beq	r2,zero,813880 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  813830:	e0bffb17 	ldw	r2,-20(fp)
  813834:	10800017 	ldw	r2,0(r2)
  813838:	10800617 	ldw	r2,24(r2)
  81383c:	e0ffff17 	ldw	r3,-4(fp)
  813840:	180d883a 	mov	r6,r3
  813844:	e17ffe17 	ldw	r5,-8(fp)
  813848:	e13ffb17 	ldw	r4,-20(fp)
  81384c:	103ee83a 	callr	r2
  813850:	e0bffc15 	stw	r2,-16(fp)
  813854:	e0bffc17 	ldw	r2,-16(fp)
  813858:	1000070e 	bge	r2,zero,813878 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  81385c:	08137880 	call	813788 <alt_get_errno>
  813860:	1007883a 	mov	r3,r2
  813864:	e0bffc17 	ldw	r2,-16(fp)
  813868:	0085c83a 	sub	r2,zero,r2
  81386c:	18800015 	stw	r2,0(r3)
        return -1;
  813870:	00bfffc4 	movi	r2,-1
  813874:	00000c06 	br	8138a8 <write+0xe4>
      }
      return rval;
  813878:	e0bffc17 	ldw	r2,-16(fp)
  81387c:	00000a06 	br	8138a8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  813880:	08137880 	call	813788 <alt_get_errno>
  813884:	1007883a 	mov	r3,r2
  813888:	00800344 	movi	r2,13
  81388c:	18800015 	stw	r2,0(r3)
  813890:	00000406 	br	8138a4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  813894:	08137880 	call	813788 <alt_get_errno>
  813898:	1007883a 	mov	r3,r2
  81389c:	00801444 	movi	r2,81
  8138a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8138a4:	00bfffc4 	movi	r2,-1
}
  8138a8:	e037883a 	mov	sp,fp
  8138ac:	dfc00117 	ldw	ra,4(sp)
  8138b0:	df000017 	ldw	fp,0(sp)
  8138b4:	dec00204 	addi	sp,sp,8
  8138b8:	f800283a 	ret

008138bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8138bc:	defffd04 	addi	sp,sp,-12
  8138c0:	dfc00215 	stw	ra,8(sp)
  8138c4:	df000115 	stw	fp,4(sp)
  8138c8:	df000104 	addi	fp,sp,4
  8138cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8138d0:	d1600904 	addi	r5,gp,-32732
  8138d4:	e13fff17 	ldw	r4,-4(fp)
  8138d8:	0815d540 	call	815d54 <alt_dev_llist_insert>
}
  8138dc:	e037883a 	mov	sp,fp
  8138e0:	dfc00117 	ldw	ra,4(sp)
  8138e4:	df000017 	ldw	fp,0(sp)
  8138e8:	dec00204 	addi	sp,sp,8
  8138ec:	f800283a 	ret

008138f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8138f0:	defffd04 	addi	sp,sp,-12
  8138f4:	dfc00215 	stw	ra,8(sp)
  8138f8:	df000115 	stw	fp,4(sp)
  8138fc:	df000104 	addi	fp,sp,4
  813900:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  813904:	08165380 	call	816538 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  813908:	00800044 	movi	r2,1
  81390c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  813910:	0001883a 	nop
  813914:	e037883a 	mov	sp,fp
  813918:	dfc00117 	ldw	ra,4(sp)
  81391c:	df000017 	ldw	fp,0(sp)
  813920:	dec00204 	addi	sp,sp,8
  813924:	f800283a 	ret

00813928 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  813928:	defffe04 	addi	sp,sp,-8
  81392c:	dfc00115 	stw	ra,4(sp)
  813930:	df000015 	stw	fp,0(sp)
  813934:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  813938:	01c0fa04 	movi	r7,1000
  81393c:	01800084 	movi	r6,2
  813940:	000b883a 	mov	r5,zero
  813944:	01004074 	movhi	r4,257
  813948:	21040804 	addi	r4,r4,4128
  81394c:	081537c0 	call	81537c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  813950:	01800044 	movi	r6,1
  813954:	000b883a 	mov	r5,zero
  813958:	01002074 	movhi	r4,129
  81395c:	211f0b04 	addi	r4,r4,31788
  813960:	0813b240 	call	813b24 <altera_avalon_jtag_uart_init>
  813964:	01002074 	movhi	r4,129
  813968:	211f0104 	addi	r4,r4,31748
  81396c:	08138bc0 	call	8138bc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  813970:	010020b4 	movhi	r4,130
  813974:	21232304 	addi	r4,r4,-29556
  813978:	08151700 	call	815170 <altera_avalon_lcd_16207_init>
  81397c:	010020b4 	movhi	r4,130
  813980:	21231904 	addi	r4,r4,-29596
  813984:	08138bc0 	call	8138bc <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  813988:	000d883a 	mov	r6,zero
  81398c:	000b883a 	mov	r5,zero
  813990:	010020b4 	movhi	r4,130
  813994:	21236b04 	addi	r4,r4,-29268
  813998:	08155080 	call	815508 <altera_avalon_uart_init>
  81399c:	010020b4 	movhi	r4,130
  8139a0:	21236104 	addi	r4,r4,-29308
  8139a4:	08138bc0 	call	8138bc <alt_dev_reg>
}
  8139a8:	0001883a 	nop
  8139ac:	e037883a 	mov	sp,fp
  8139b0:	dfc00117 	ldw	ra,4(sp)
  8139b4:	df000017 	ldw	fp,0(sp)
  8139b8:	dec00204 	addi	sp,sp,8
  8139bc:	f800283a 	ret

008139c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8139c0:	defffa04 	addi	sp,sp,-24
  8139c4:	dfc00515 	stw	ra,20(sp)
  8139c8:	df000415 	stw	fp,16(sp)
  8139cc:	df000404 	addi	fp,sp,16
  8139d0:	e13ffd15 	stw	r4,-12(fp)
  8139d4:	e17ffe15 	stw	r5,-8(fp)
  8139d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8139dc:	e0bffd17 	ldw	r2,-12(fp)
  8139e0:	10800017 	ldw	r2,0(r2)
  8139e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8139e8:	e0bffc17 	ldw	r2,-16(fp)
  8139ec:	10c00a04 	addi	r3,r2,40
  8139f0:	e0bffd17 	ldw	r2,-12(fp)
  8139f4:	10800217 	ldw	r2,8(r2)
  8139f8:	100f883a 	mov	r7,r2
  8139fc:	e1bfff17 	ldw	r6,-4(fp)
  813a00:	e17ffe17 	ldw	r5,-8(fp)
  813a04:	1809883a 	mov	r4,r3
  813a08:	0813fe80 	call	813fe8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  813a0c:	e037883a 	mov	sp,fp
  813a10:	dfc00117 	ldw	ra,4(sp)
  813a14:	df000017 	ldw	fp,0(sp)
  813a18:	dec00204 	addi	sp,sp,8
  813a1c:	f800283a 	ret

00813a20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813a20:	defffa04 	addi	sp,sp,-24
  813a24:	dfc00515 	stw	ra,20(sp)
  813a28:	df000415 	stw	fp,16(sp)
  813a2c:	df000404 	addi	fp,sp,16
  813a30:	e13ffd15 	stw	r4,-12(fp)
  813a34:	e17ffe15 	stw	r5,-8(fp)
  813a38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813a3c:	e0bffd17 	ldw	r2,-12(fp)
  813a40:	10800017 	ldw	r2,0(r2)
  813a44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  813a48:	e0bffc17 	ldw	r2,-16(fp)
  813a4c:	10c00a04 	addi	r3,r2,40
  813a50:	e0bffd17 	ldw	r2,-12(fp)
  813a54:	10800217 	ldw	r2,8(r2)
  813a58:	100f883a 	mov	r7,r2
  813a5c:	e1bfff17 	ldw	r6,-4(fp)
  813a60:	e17ffe17 	ldw	r5,-8(fp)
  813a64:	1809883a 	mov	r4,r3
  813a68:	08142040 	call	814204 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  813a6c:	e037883a 	mov	sp,fp
  813a70:	dfc00117 	ldw	ra,4(sp)
  813a74:	df000017 	ldw	fp,0(sp)
  813a78:	dec00204 	addi	sp,sp,8
  813a7c:	f800283a 	ret

00813a80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  813a80:	defffc04 	addi	sp,sp,-16
  813a84:	dfc00315 	stw	ra,12(sp)
  813a88:	df000215 	stw	fp,8(sp)
  813a8c:	df000204 	addi	fp,sp,8
  813a90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813a94:	e0bfff17 	ldw	r2,-4(fp)
  813a98:	10800017 	ldw	r2,0(r2)
  813a9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  813aa0:	e0bffe17 	ldw	r2,-8(fp)
  813aa4:	10c00a04 	addi	r3,r2,40
  813aa8:	e0bfff17 	ldw	r2,-4(fp)
  813aac:	10800217 	ldw	r2,8(r2)
  813ab0:	100b883a 	mov	r5,r2
  813ab4:	1809883a 	mov	r4,r3
  813ab8:	0813e900 	call	813e90 <altera_avalon_jtag_uart_close>
}
  813abc:	e037883a 	mov	sp,fp
  813ac0:	dfc00117 	ldw	ra,4(sp)
  813ac4:	df000017 	ldw	fp,0(sp)
  813ac8:	dec00204 	addi	sp,sp,8
  813acc:	f800283a 	ret

00813ad0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  813ad0:	defffa04 	addi	sp,sp,-24
  813ad4:	dfc00515 	stw	ra,20(sp)
  813ad8:	df000415 	stw	fp,16(sp)
  813adc:	df000404 	addi	fp,sp,16
  813ae0:	e13ffd15 	stw	r4,-12(fp)
  813ae4:	e17ffe15 	stw	r5,-8(fp)
  813ae8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  813aec:	e0bffd17 	ldw	r2,-12(fp)
  813af0:	10800017 	ldw	r2,0(r2)
  813af4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  813af8:	e0bffc17 	ldw	r2,-16(fp)
  813afc:	10800a04 	addi	r2,r2,40
  813b00:	e1bfff17 	ldw	r6,-4(fp)
  813b04:	e17ffe17 	ldw	r5,-8(fp)
  813b08:	1009883a 	mov	r4,r2
  813b0c:	0813ef80 	call	813ef8 <altera_avalon_jtag_uart_ioctl>
}
  813b10:	e037883a 	mov	sp,fp
  813b14:	dfc00117 	ldw	ra,4(sp)
  813b18:	df000017 	ldw	fp,0(sp)
  813b1c:	dec00204 	addi	sp,sp,8
  813b20:	f800283a 	ret

00813b24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  813b24:	defffa04 	addi	sp,sp,-24
  813b28:	dfc00515 	stw	ra,20(sp)
  813b2c:	df000415 	stw	fp,16(sp)
  813b30:	df000404 	addi	fp,sp,16
  813b34:	e13ffd15 	stw	r4,-12(fp)
  813b38:	e17ffe15 	stw	r5,-8(fp)
  813b3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813b40:	e0bffd17 	ldw	r2,-12(fp)
  813b44:	00c00044 	movi	r3,1
  813b48:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  813b4c:	e0bffd17 	ldw	r2,-12(fp)
  813b50:	10800017 	ldw	r2,0(r2)
  813b54:	10800104 	addi	r2,r2,4
  813b58:	1007883a 	mov	r3,r2
  813b5c:	e0bffd17 	ldw	r2,-12(fp)
  813b60:	10800817 	ldw	r2,32(r2)
  813b64:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  813b68:	e0bffe17 	ldw	r2,-8(fp)
  813b6c:	e0ffff17 	ldw	r3,-4(fp)
  813b70:	d8000015 	stw	zero,0(sp)
  813b74:	e1fffd17 	ldw	r7,-12(fp)
  813b78:	01802074 	movhi	r6,129
  813b7c:	318ef904 	addi	r6,r6,15332
  813b80:	180b883a 	mov	r5,r3
  813b84:	1009883a 	mov	r4,r2
  813b88:	08161280 	call	816128 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  813b8c:	e0bffd17 	ldw	r2,-12(fp)
  813b90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  813b94:	e0bffd17 	ldw	r2,-12(fp)
  813b98:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  813b9c:	d0e75d17 	ldw	r3,-25228(gp)
  813ba0:	e1fffd17 	ldw	r7,-12(fp)
  813ba4:	01802074 	movhi	r6,129
  813ba8:	318f7c04 	addi	r6,r6,15856
  813bac:	180b883a 	mov	r5,r3
  813bb0:	1009883a 	mov	r4,r2
  813bb4:	08128d40 	call	8128d4 <alt_alarm_start>
  813bb8:	1000040e 	bge	r2,zero,813bcc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  813bbc:	e0fffd17 	ldw	r3,-12(fp)
  813bc0:	00a00034 	movhi	r2,32768
  813bc4:	10bfffc4 	addi	r2,r2,-1
  813bc8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  813bcc:	0001883a 	nop
  813bd0:	e037883a 	mov	sp,fp
  813bd4:	dfc00117 	ldw	ra,4(sp)
  813bd8:	df000017 	ldw	fp,0(sp)
  813bdc:	dec00204 	addi	sp,sp,8
  813be0:	f800283a 	ret

00813be4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  813be4:	defff804 	addi	sp,sp,-32
  813be8:	df000715 	stw	fp,28(sp)
  813bec:	df000704 	addi	fp,sp,28
  813bf0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  813bf4:	e0bfff17 	ldw	r2,-4(fp)
  813bf8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  813bfc:	e0bffb17 	ldw	r2,-20(fp)
  813c00:	10800017 	ldw	r2,0(r2)
  813c04:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813c08:	e0bffc17 	ldw	r2,-16(fp)
  813c0c:	10800104 	addi	r2,r2,4
  813c10:	10800037 	ldwio	r2,0(r2)
  813c14:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  813c18:	e0bffd17 	ldw	r2,-12(fp)
  813c1c:	1080c00c 	andi	r2,r2,768
  813c20:	10006d26 	beq	r2,zero,813dd8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  813c24:	e0bffd17 	ldw	r2,-12(fp)
  813c28:	1080400c 	andi	r2,r2,256
  813c2c:	10003526 	beq	r2,zero,813d04 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  813c30:	00800074 	movhi	r2,1
  813c34:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813c38:	e0bffb17 	ldw	r2,-20(fp)
  813c3c:	10800a17 	ldw	r2,40(r2)
  813c40:	10800044 	addi	r2,r2,1
  813c44:	1081ffcc 	andi	r2,r2,2047
  813c48:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  813c4c:	e0bffb17 	ldw	r2,-20(fp)
  813c50:	10c00b17 	ldw	r3,44(r2)
  813c54:	e0bffe17 	ldw	r2,-8(fp)
  813c58:	18801526 	beq	r3,r2,813cb0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  813c5c:	e0bffc17 	ldw	r2,-16(fp)
  813c60:	10800037 	ldwio	r2,0(r2)
  813c64:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  813c68:	e0bff917 	ldw	r2,-28(fp)
  813c6c:	10a0000c 	andi	r2,r2,32768
  813c70:	10001126 	beq	r2,zero,813cb8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  813c74:	e0bffb17 	ldw	r2,-20(fp)
  813c78:	10800a17 	ldw	r2,40(r2)
  813c7c:	e0fff917 	ldw	r3,-28(fp)
  813c80:	1809883a 	mov	r4,r3
  813c84:	e0fffb17 	ldw	r3,-20(fp)
  813c88:	1885883a 	add	r2,r3,r2
  813c8c:	10800e04 	addi	r2,r2,56
  813c90:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813c94:	e0bffb17 	ldw	r2,-20(fp)
  813c98:	10800a17 	ldw	r2,40(r2)
  813c9c:	10800044 	addi	r2,r2,1
  813ca0:	10c1ffcc 	andi	r3,r2,2047
  813ca4:	e0bffb17 	ldw	r2,-20(fp)
  813ca8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  813cac:	003fe206 	br	813c38 <__alt_mem_onchip_mem+0xff80bc38>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  813cb0:	0001883a 	nop
  813cb4:	00000106 	br	813cbc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  813cb8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  813cbc:	e0bff917 	ldw	r2,-28(fp)
  813cc0:	10bfffec 	andhi	r2,r2,65535
  813cc4:	10000f26 	beq	r2,zero,813d04 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813cc8:	e0bffb17 	ldw	r2,-20(fp)
  813ccc:	10c00817 	ldw	r3,32(r2)
  813cd0:	00bfff84 	movi	r2,-2
  813cd4:	1886703a 	and	r3,r3,r2
  813cd8:	e0bffb17 	ldw	r2,-20(fp)
  813cdc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  813ce0:	e0bffc17 	ldw	r2,-16(fp)
  813ce4:	10800104 	addi	r2,r2,4
  813ce8:	1007883a 	mov	r3,r2
  813cec:	e0bffb17 	ldw	r2,-20(fp)
  813cf0:	10800817 	ldw	r2,32(r2)
  813cf4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813cf8:	e0bffc17 	ldw	r2,-16(fp)
  813cfc:	10800104 	addi	r2,r2,4
  813d00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  813d04:	e0bffd17 	ldw	r2,-12(fp)
  813d08:	1080800c 	andi	r2,r2,512
  813d0c:	103fbe26 	beq	r2,zero,813c08 <__alt_mem_onchip_mem+0xff80bc08>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  813d10:	e0bffd17 	ldw	r2,-12(fp)
  813d14:	1004d43a 	srli	r2,r2,16
  813d18:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  813d1c:	00001406 	br	813d70 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  813d20:	e0bffc17 	ldw	r2,-16(fp)
  813d24:	e0fffb17 	ldw	r3,-20(fp)
  813d28:	18c00d17 	ldw	r3,52(r3)
  813d2c:	e13ffb17 	ldw	r4,-20(fp)
  813d30:	20c7883a 	add	r3,r4,r3
  813d34:	18c20e04 	addi	r3,r3,2104
  813d38:	18c00003 	ldbu	r3,0(r3)
  813d3c:	18c03fcc 	andi	r3,r3,255
  813d40:	18c0201c 	xori	r3,r3,128
  813d44:	18ffe004 	addi	r3,r3,-128
  813d48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813d4c:	e0bffb17 	ldw	r2,-20(fp)
  813d50:	10800d17 	ldw	r2,52(r2)
  813d54:	10800044 	addi	r2,r2,1
  813d58:	10c1ffcc 	andi	r3,r2,2047
  813d5c:	e0bffb17 	ldw	r2,-20(fp)
  813d60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  813d64:	e0bffa17 	ldw	r2,-24(fp)
  813d68:	10bfffc4 	addi	r2,r2,-1
  813d6c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  813d70:	e0bffa17 	ldw	r2,-24(fp)
  813d74:	10000526 	beq	r2,zero,813d8c <altera_avalon_jtag_uart_irq+0x1a8>
  813d78:	e0bffb17 	ldw	r2,-20(fp)
  813d7c:	10c00d17 	ldw	r3,52(r2)
  813d80:	e0bffb17 	ldw	r2,-20(fp)
  813d84:	10800c17 	ldw	r2,48(r2)
  813d88:	18bfe51e 	bne	r3,r2,813d20 <__alt_mem_onchip_mem+0xff80bd20>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  813d8c:	e0bffa17 	ldw	r2,-24(fp)
  813d90:	103f9d26 	beq	r2,zero,813c08 <__alt_mem_onchip_mem+0xff80bc08>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813d94:	e0bffb17 	ldw	r2,-20(fp)
  813d98:	10c00817 	ldw	r3,32(r2)
  813d9c:	00bfff44 	movi	r2,-3
  813da0:	1886703a 	and	r3,r3,r2
  813da4:	e0bffb17 	ldw	r2,-20(fp)
  813da8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813dac:	e0bffb17 	ldw	r2,-20(fp)
  813db0:	10800017 	ldw	r2,0(r2)
  813db4:	10800104 	addi	r2,r2,4
  813db8:	1007883a 	mov	r3,r2
  813dbc:	e0bffb17 	ldw	r2,-20(fp)
  813dc0:	10800817 	ldw	r2,32(r2)
  813dc4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813dc8:	e0bffc17 	ldw	r2,-16(fp)
  813dcc:	10800104 	addi	r2,r2,4
  813dd0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  813dd4:	003f8c06 	br	813c08 <__alt_mem_onchip_mem+0xff80bc08>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  813dd8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  813ddc:	0001883a 	nop
  813de0:	e037883a 	mov	sp,fp
  813de4:	df000017 	ldw	fp,0(sp)
  813de8:	dec00104 	addi	sp,sp,4
  813dec:	f800283a 	ret

00813df0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  813df0:	defff804 	addi	sp,sp,-32
  813df4:	df000715 	stw	fp,28(sp)
  813df8:	df000704 	addi	fp,sp,28
  813dfc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  813e00:	e0bffb17 	ldw	r2,-20(fp)
  813e04:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  813e08:	e0bff917 	ldw	r2,-28(fp)
  813e0c:	10800017 	ldw	r2,0(r2)
  813e10:	10800104 	addi	r2,r2,4
  813e14:	10800037 	ldwio	r2,0(r2)
  813e18:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  813e1c:	e0bffa17 	ldw	r2,-24(fp)
  813e20:	1081000c 	andi	r2,r2,1024
  813e24:	10000b26 	beq	r2,zero,813e54 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  813e28:	e0bff917 	ldw	r2,-28(fp)
  813e2c:	10800017 	ldw	r2,0(r2)
  813e30:	10800104 	addi	r2,r2,4
  813e34:	1007883a 	mov	r3,r2
  813e38:	e0bff917 	ldw	r2,-28(fp)
  813e3c:	10800817 	ldw	r2,32(r2)
  813e40:	10810014 	ori	r2,r2,1024
  813e44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  813e48:	e0bff917 	ldw	r2,-28(fp)
  813e4c:	10000915 	stw	zero,36(r2)
  813e50:	00000a06 	br	813e7c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  813e54:	e0bff917 	ldw	r2,-28(fp)
  813e58:	10c00917 	ldw	r3,36(r2)
  813e5c:	00a00034 	movhi	r2,32768
  813e60:	10bfff04 	addi	r2,r2,-4
  813e64:	10c00536 	bltu	r2,r3,813e7c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  813e68:	e0bff917 	ldw	r2,-28(fp)
  813e6c:	10800917 	ldw	r2,36(r2)
  813e70:	10c00044 	addi	r3,r2,1
  813e74:	e0bff917 	ldw	r2,-28(fp)
  813e78:	10c00915 	stw	r3,36(r2)
  813e7c:	d0a75d17 	ldw	r2,-25228(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  813e80:	e037883a 	mov	sp,fp
  813e84:	df000017 	ldw	fp,0(sp)
  813e88:	dec00104 	addi	sp,sp,4
  813e8c:	f800283a 	ret

00813e90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813e90:	defffd04 	addi	sp,sp,-12
  813e94:	df000215 	stw	fp,8(sp)
  813e98:	df000204 	addi	fp,sp,8
  813e9c:	e13ffe15 	stw	r4,-8(fp)
  813ea0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813ea4:	00000506 	br	813ebc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  813ea8:	e0bfff17 	ldw	r2,-4(fp)
  813eac:	1090000c 	andi	r2,r2,16384
  813eb0:	10000226 	beq	r2,zero,813ebc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  813eb4:	00bffd44 	movi	r2,-11
  813eb8:	00000b06 	br	813ee8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813ebc:	e0bffe17 	ldw	r2,-8(fp)
  813ec0:	10c00d17 	ldw	r3,52(r2)
  813ec4:	e0bffe17 	ldw	r2,-8(fp)
  813ec8:	10800c17 	ldw	r2,48(r2)
  813ecc:	18800526 	beq	r3,r2,813ee4 <altera_avalon_jtag_uart_close+0x54>
  813ed0:	e0bffe17 	ldw	r2,-8(fp)
  813ed4:	10c00917 	ldw	r3,36(r2)
  813ed8:	e0bffe17 	ldw	r2,-8(fp)
  813edc:	10800117 	ldw	r2,4(r2)
  813ee0:	18bff136 	bltu	r3,r2,813ea8 <__alt_mem_onchip_mem+0xff80bea8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813ee4:	0005883a 	mov	r2,zero
}
  813ee8:	e037883a 	mov	sp,fp
  813eec:	df000017 	ldw	fp,0(sp)
  813ef0:	dec00104 	addi	sp,sp,4
  813ef4:	f800283a 	ret

00813ef8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  813ef8:	defffa04 	addi	sp,sp,-24
  813efc:	df000515 	stw	fp,20(sp)
  813f00:	df000504 	addi	fp,sp,20
  813f04:	e13ffd15 	stw	r4,-12(fp)
  813f08:	e17ffe15 	stw	r5,-8(fp)
  813f0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  813f10:	00bff9c4 	movi	r2,-25
  813f14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  813f18:	e0bffe17 	ldw	r2,-8(fp)
  813f1c:	10da8060 	cmpeqi	r3,r2,27137
  813f20:	1800031e 	bne	r3,zero,813f30 <altera_avalon_jtag_uart_ioctl+0x38>
  813f24:	109a80a0 	cmpeqi	r2,r2,27138
  813f28:	1000181e 	bne	r2,zero,813f8c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  813f2c:	00002906 	br	813fd4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  813f30:	e0bffd17 	ldw	r2,-12(fp)
  813f34:	10c00117 	ldw	r3,4(r2)
  813f38:	00a00034 	movhi	r2,32768
  813f3c:	10bfffc4 	addi	r2,r2,-1
  813f40:	18802126 	beq	r3,r2,813fc8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  813f44:	e0bfff17 	ldw	r2,-4(fp)
  813f48:	10800017 	ldw	r2,0(r2)
  813f4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  813f50:	e0bffc17 	ldw	r2,-16(fp)
  813f54:	10800090 	cmplti	r2,r2,2
  813f58:	1000061e 	bne	r2,zero,813f74 <altera_avalon_jtag_uart_ioctl+0x7c>
  813f5c:	e0fffc17 	ldw	r3,-16(fp)
  813f60:	00a00034 	movhi	r2,32768
  813f64:	10bfffc4 	addi	r2,r2,-1
  813f68:	18800226 	beq	r3,r2,813f74 <altera_avalon_jtag_uart_ioctl+0x7c>
  813f6c:	e0bffc17 	ldw	r2,-16(fp)
  813f70:	00000206 	br	813f7c <altera_avalon_jtag_uart_ioctl+0x84>
  813f74:	00a00034 	movhi	r2,32768
  813f78:	10bfff84 	addi	r2,r2,-2
  813f7c:	e0fffd17 	ldw	r3,-12(fp)
  813f80:	18800115 	stw	r2,4(r3)
      rc = 0;
  813f84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  813f88:	00000f06 	br	813fc8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813f8c:	e0bffd17 	ldw	r2,-12(fp)
  813f90:	10c00117 	ldw	r3,4(r2)
  813f94:	00a00034 	movhi	r2,32768
  813f98:	10bfffc4 	addi	r2,r2,-1
  813f9c:	18800c26 	beq	r3,r2,813fd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  813fa0:	e0bffd17 	ldw	r2,-12(fp)
  813fa4:	10c00917 	ldw	r3,36(r2)
  813fa8:	e0bffd17 	ldw	r2,-12(fp)
  813fac:	10800117 	ldw	r2,4(r2)
  813fb0:	1885803a 	cmpltu	r2,r3,r2
  813fb4:	10c03fcc 	andi	r3,r2,255
  813fb8:	e0bfff17 	ldw	r2,-4(fp)
  813fbc:	10c00015 	stw	r3,0(r2)
      rc = 0;
  813fc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  813fc4:	00000206 	br	813fd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  813fc8:	0001883a 	nop
  813fcc:	00000106 	br	813fd4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  813fd0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  813fd4:	e0bffb17 	ldw	r2,-20(fp)
}
  813fd8:	e037883a 	mov	sp,fp
  813fdc:	df000017 	ldw	fp,0(sp)
  813fe0:	dec00104 	addi	sp,sp,4
  813fe4:	f800283a 	ret

00813fe8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  813fe8:	defff304 	addi	sp,sp,-52
  813fec:	dfc00c15 	stw	ra,48(sp)
  813ff0:	df000b15 	stw	fp,44(sp)
  813ff4:	df000b04 	addi	fp,sp,44
  813ff8:	e13ffc15 	stw	r4,-16(fp)
  813ffc:	e17ffd15 	stw	r5,-12(fp)
  814000:	e1bffe15 	stw	r6,-8(fp)
  814004:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  814008:	e0bffd17 	ldw	r2,-12(fp)
  81400c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  814010:	00004706 	br	814130 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  814014:	e0bffc17 	ldw	r2,-16(fp)
  814018:	10800a17 	ldw	r2,40(r2)
  81401c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  814020:	e0bffc17 	ldw	r2,-16(fp)
  814024:	10800b17 	ldw	r2,44(r2)
  814028:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  81402c:	e0fff717 	ldw	r3,-36(fp)
  814030:	e0bff817 	ldw	r2,-32(fp)
  814034:	18800536 	bltu	r3,r2,81404c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  814038:	e0fff717 	ldw	r3,-36(fp)
  81403c:	e0bff817 	ldw	r2,-32(fp)
  814040:	1885c83a 	sub	r2,r3,r2
  814044:	e0bff615 	stw	r2,-40(fp)
  814048:	00000406 	br	81405c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81404c:	00c20004 	movi	r3,2048
  814050:	e0bff817 	ldw	r2,-32(fp)
  814054:	1885c83a 	sub	r2,r3,r2
  814058:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81405c:	e0bff617 	ldw	r2,-40(fp)
  814060:	10001e26 	beq	r2,zero,8140dc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  814064:	e0fffe17 	ldw	r3,-8(fp)
  814068:	e0bff617 	ldw	r2,-40(fp)
  81406c:	1880022e 	bgeu	r3,r2,814078 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  814070:	e0bffe17 	ldw	r2,-8(fp)
  814074:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  814078:	e0bffc17 	ldw	r2,-16(fp)
  81407c:	10c00e04 	addi	r3,r2,56
  814080:	e0bff817 	ldw	r2,-32(fp)
  814084:	1885883a 	add	r2,r3,r2
  814088:	e1bff617 	ldw	r6,-40(fp)
  81408c:	100b883a 	mov	r5,r2
  814090:	e13ff517 	ldw	r4,-44(fp)
  814094:	080d45c0 	call	80d45c <memcpy>
      ptr   += n;
  814098:	e0fff517 	ldw	r3,-44(fp)
  81409c:	e0bff617 	ldw	r2,-40(fp)
  8140a0:	1885883a 	add	r2,r3,r2
  8140a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8140a8:	e0fffe17 	ldw	r3,-8(fp)
  8140ac:	e0bff617 	ldw	r2,-40(fp)
  8140b0:	1885c83a 	sub	r2,r3,r2
  8140b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8140b8:	e0fff817 	ldw	r3,-32(fp)
  8140bc:	e0bff617 	ldw	r2,-40(fp)
  8140c0:	1885883a 	add	r2,r3,r2
  8140c4:	10c1ffcc 	andi	r3,r2,2047
  8140c8:	e0bffc17 	ldw	r2,-16(fp)
  8140cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8140d0:	e0bffe17 	ldw	r2,-8(fp)
  8140d4:	00bfcf16 	blt	zero,r2,814014 <__alt_mem_onchip_mem+0xff80c014>
  8140d8:	00000106 	br	8140e0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8140dc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8140e0:	e0fff517 	ldw	r3,-44(fp)
  8140e4:	e0bffd17 	ldw	r2,-12(fp)
  8140e8:	1880141e 	bne	r3,r2,81413c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8140ec:	e0bfff17 	ldw	r2,-4(fp)
  8140f0:	1090000c 	andi	r2,r2,16384
  8140f4:	1000131e 	bne	r2,zero,814144 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8140f8:	0001883a 	nop
  8140fc:	e0bffc17 	ldw	r2,-16(fp)
  814100:	10c00a17 	ldw	r3,40(r2)
  814104:	e0bff717 	ldw	r2,-36(fp)
  814108:	1880051e 	bne	r3,r2,814120 <altera_avalon_jtag_uart_read+0x138>
  81410c:	e0bffc17 	ldw	r2,-16(fp)
  814110:	10c00917 	ldw	r3,36(r2)
  814114:	e0bffc17 	ldw	r2,-16(fp)
  814118:	10800117 	ldw	r2,4(r2)
  81411c:	18bff736 	bltu	r3,r2,8140fc <__alt_mem_onchip_mem+0xff80c0fc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  814120:	e0bffc17 	ldw	r2,-16(fp)
  814124:	10c00a17 	ldw	r3,40(r2)
  814128:	e0bff717 	ldw	r2,-36(fp)
  81412c:	18800726 	beq	r3,r2,81414c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  814130:	e0bffe17 	ldw	r2,-8(fp)
  814134:	00bfb716 	blt	zero,r2,814014 <__alt_mem_onchip_mem+0xff80c014>
  814138:	00000506 	br	814150 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  81413c:	0001883a 	nop
  814140:	00000306 	br	814150 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  814144:	0001883a 	nop
  814148:	00000106 	br	814150 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  81414c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  814150:	e0fff517 	ldw	r3,-44(fp)
  814154:	e0bffd17 	ldw	r2,-12(fp)
  814158:	18801826 	beq	r3,r2,8141bc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81415c:	0005303a 	rdctl	r2,status
  814160:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814164:	e0fffb17 	ldw	r3,-20(fp)
  814168:	00bfff84 	movi	r2,-2
  81416c:	1884703a 	and	r2,r3,r2
  814170:	1001703a 	wrctl	status,r2
  
  return context;
  814174:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  814178:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81417c:	e0bffc17 	ldw	r2,-16(fp)
  814180:	10800817 	ldw	r2,32(r2)
  814184:	10c00054 	ori	r3,r2,1
  814188:	e0bffc17 	ldw	r2,-16(fp)
  81418c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814190:	e0bffc17 	ldw	r2,-16(fp)
  814194:	10800017 	ldw	r2,0(r2)
  814198:	10800104 	addi	r2,r2,4
  81419c:	1007883a 	mov	r3,r2
  8141a0:	e0bffc17 	ldw	r2,-16(fp)
  8141a4:	10800817 	ldw	r2,32(r2)
  8141a8:	18800035 	stwio	r2,0(r3)
  8141ac:	e0bffa17 	ldw	r2,-24(fp)
  8141b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8141b4:	e0bff917 	ldw	r2,-28(fp)
  8141b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8141bc:	e0fff517 	ldw	r3,-44(fp)
  8141c0:	e0bffd17 	ldw	r2,-12(fp)
  8141c4:	18800426 	beq	r3,r2,8141d8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8141c8:	e0fff517 	ldw	r3,-44(fp)
  8141cc:	e0bffd17 	ldw	r2,-12(fp)
  8141d0:	1885c83a 	sub	r2,r3,r2
  8141d4:	00000606 	br	8141f0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8141d8:	e0bfff17 	ldw	r2,-4(fp)
  8141dc:	1090000c 	andi	r2,r2,16384
  8141e0:	10000226 	beq	r2,zero,8141ec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8141e4:	00bffd44 	movi	r2,-11
  8141e8:	00000106 	br	8141f0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8141ec:	00bffec4 	movi	r2,-5
}
  8141f0:	e037883a 	mov	sp,fp
  8141f4:	dfc00117 	ldw	ra,4(sp)
  8141f8:	df000017 	ldw	fp,0(sp)
  8141fc:	dec00204 	addi	sp,sp,8
  814200:	f800283a 	ret

00814204 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  814204:	defff304 	addi	sp,sp,-52
  814208:	dfc00c15 	stw	ra,48(sp)
  81420c:	df000b15 	stw	fp,44(sp)
  814210:	df000b04 	addi	fp,sp,44
  814214:	e13ffc15 	stw	r4,-16(fp)
  814218:	e17ffd15 	stw	r5,-12(fp)
  81421c:	e1bffe15 	stw	r6,-8(fp)
  814220:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  814224:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  814228:	e0bffd17 	ldw	r2,-12(fp)
  81422c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  814230:	00003706 	br	814310 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  814234:	e0bffc17 	ldw	r2,-16(fp)
  814238:	10800c17 	ldw	r2,48(r2)
  81423c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  814240:	e0bffc17 	ldw	r2,-16(fp)
  814244:	10800d17 	ldw	r2,52(r2)
  814248:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  81424c:	e0fff917 	ldw	r3,-28(fp)
  814250:	e0bff517 	ldw	r2,-44(fp)
  814254:	1880062e 	bgeu	r3,r2,814270 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  814258:	e0fff517 	ldw	r3,-44(fp)
  81425c:	e0bff917 	ldw	r2,-28(fp)
  814260:	1885c83a 	sub	r2,r3,r2
  814264:	10bfffc4 	addi	r2,r2,-1
  814268:	e0bff615 	stw	r2,-40(fp)
  81426c:	00000b06 	br	81429c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  814270:	e0bff517 	ldw	r2,-44(fp)
  814274:	10000526 	beq	r2,zero,81428c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  814278:	00c20004 	movi	r3,2048
  81427c:	e0bff917 	ldw	r2,-28(fp)
  814280:	1885c83a 	sub	r2,r3,r2
  814284:	e0bff615 	stw	r2,-40(fp)
  814288:	00000406 	br	81429c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81428c:	00c1ffc4 	movi	r3,2047
  814290:	e0bff917 	ldw	r2,-28(fp)
  814294:	1885c83a 	sub	r2,r3,r2
  814298:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81429c:	e0bff617 	ldw	r2,-40(fp)
  8142a0:	10001e26 	beq	r2,zero,81431c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8142a4:	e0fffe17 	ldw	r3,-8(fp)
  8142a8:	e0bff617 	ldw	r2,-40(fp)
  8142ac:	1880022e 	bgeu	r3,r2,8142b8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8142b0:	e0bffe17 	ldw	r2,-8(fp)
  8142b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8142b8:	e0bffc17 	ldw	r2,-16(fp)
  8142bc:	10c20e04 	addi	r3,r2,2104
  8142c0:	e0bff917 	ldw	r2,-28(fp)
  8142c4:	1885883a 	add	r2,r3,r2
  8142c8:	e1bff617 	ldw	r6,-40(fp)
  8142cc:	e17ffd17 	ldw	r5,-12(fp)
  8142d0:	1009883a 	mov	r4,r2
  8142d4:	080d45c0 	call	80d45c <memcpy>
      ptr   += n;
  8142d8:	e0fffd17 	ldw	r3,-12(fp)
  8142dc:	e0bff617 	ldw	r2,-40(fp)
  8142e0:	1885883a 	add	r2,r3,r2
  8142e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8142e8:	e0fffe17 	ldw	r3,-8(fp)
  8142ec:	e0bff617 	ldw	r2,-40(fp)
  8142f0:	1885c83a 	sub	r2,r3,r2
  8142f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8142f8:	e0fff917 	ldw	r3,-28(fp)
  8142fc:	e0bff617 	ldw	r2,-40(fp)
  814300:	1885883a 	add	r2,r3,r2
  814304:	10c1ffcc 	andi	r3,r2,2047
  814308:	e0bffc17 	ldw	r2,-16(fp)
  81430c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  814310:	e0bffe17 	ldw	r2,-8(fp)
  814314:	00bfc716 	blt	zero,r2,814234 <__alt_mem_onchip_mem+0xff80c234>
  814318:	00000106 	br	814320 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  81431c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814320:	0005303a 	rdctl	r2,status
  814324:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814328:	e0fffb17 	ldw	r3,-20(fp)
  81432c:	00bfff84 	movi	r2,-2
  814330:	1884703a 	and	r2,r3,r2
  814334:	1001703a 	wrctl	status,r2
  
  return context;
  814338:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81433c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  814340:	e0bffc17 	ldw	r2,-16(fp)
  814344:	10800817 	ldw	r2,32(r2)
  814348:	10c00094 	ori	r3,r2,2
  81434c:	e0bffc17 	ldw	r2,-16(fp)
  814350:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814354:	e0bffc17 	ldw	r2,-16(fp)
  814358:	10800017 	ldw	r2,0(r2)
  81435c:	10800104 	addi	r2,r2,4
  814360:	1007883a 	mov	r3,r2
  814364:	e0bffc17 	ldw	r2,-16(fp)
  814368:	10800817 	ldw	r2,32(r2)
  81436c:	18800035 	stwio	r2,0(r3)
  814370:	e0bffa17 	ldw	r2,-24(fp)
  814374:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814378:	e0bff817 	ldw	r2,-32(fp)
  81437c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  814380:	e0bffe17 	ldw	r2,-8(fp)
  814384:	0080100e 	bge	zero,r2,8143c8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  814388:	e0bfff17 	ldw	r2,-4(fp)
  81438c:	1090000c 	andi	r2,r2,16384
  814390:	1000101e 	bne	r2,zero,8143d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  814394:	0001883a 	nop
  814398:	e0bffc17 	ldw	r2,-16(fp)
  81439c:	10c00d17 	ldw	r3,52(r2)
  8143a0:	e0bff517 	ldw	r2,-44(fp)
  8143a4:	1880051e 	bne	r3,r2,8143bc <altera_avalon_jtag_uart_write+0x1b8>
  8143a8:	e0bffc17 	ldw	r2,-16(fp)
  8143ac:	10c00917 	ldw	r3,36(r2)
  8143b0:	e0bffc17 	ldw	r2,-16(fp)
  8143b4:	10800117 	ldw	r2,4(r2)
  8143b8:	18bff736 	bltu	r3,r2,814398 <__alt_mem_onchip_mem+0xff80c398>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8143bc:	e0bffc17 	ldw	r2,-16(fp)
  8143c0:	10800917 	ldw	r2,36(r2)
  8143c4:	1000051e 	bne	r2,zero,8143dc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8143c8:	e0bffe17 	ldw	r2,-8(fp)
  8143cc:	00bfd016 	blt	zero,r2,814310 <__alt_mem_onchip_mem+0xff80c310>
  8143d0:	00000306 	br	8143e0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8143d4:	0001883a 	nop
  8143d8:	00000106 	br	8143e0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8143dc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8143e0:	e0fffd17 	ldw	r3,-12(fp)
  8143e4:	e0bff717 	ldw	r2,-36(fp)
  8143e8:	18800426 	beq	r3,r2,8143fc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8143ec:	e0fffd17 	ldw	r3,-12(fp)
  8143f0:	e0bff717 	ldw	r2,-36(fp)
  8143f4:	1885c83a 	sub	r2,r3,r2
  8143f8:	00000606 	br	814414 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8143fc:	e0bfff17 	ldw	r2,-4(fp)
  814400:	1090000c 	andi	r2,r2,16384
  814404:	10000226 	beq	r2,zero,814410 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  814408:	00bffd44 	movi	r2,-11
  81440c:	00000106 	br	814414 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  814410:	00bffec4 	movi	r2,-5
}
  814414:	e037883a 	mov	sp,fp
  814418:	dfc00117 	ldw	ra,4(sp)
  81441c:	df000017 	ldw	fp,0(sp)
  814420:	dec00204 	addi	sp,sp,8
  814424:	f800283a 	ret

00814428 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  814428:	defffa04 	addi	sp,sp,-24
  81442c:	dfc00515 	stw	ra,20(sp)
  814430:	df000415 	stw	fp,16(sp)
  814434:	df000404 	addi	fp,sp,16
  814438:	e13ffe15 	stw	r4,-8(fp)
  81443c:	2805883a 	mov	r2,r5
  814440:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  814444:	e0bffe17 	ldw	r2,-8(fp)
  814448:	10800017 	ldw	r2,0(r2)
  81444c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  814450:	008003f4 	movhi	r2,15
  814454:	10909004 	addi	r2,r2,16960
  814458:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81445c:	e0bffe17 	ldw	r2,-8(fp)
  814460:	10800803 	ldbu	r2,32(r2)
  814464:	10803fcc 	andi	r2,r2,255
  814468:	1080201c 	xori	r2,r2,128
  81446c:	10bfe004 	addi	r2,r2,-128
  814470:	1000151e 	bne	r2,zero,8144c8 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814474:	00000906 	br	81449c <lcd_write_command+0x74>
    if (--i == 0)
  814478:	e0bffc17 	ldw	r2,-16(fp)
  81447c:	10bfffc4 	addi	r2,r2,-1
  814480:	e0bffc15 	stw	r2,-16(fp)
  814484:	e0bffc17 	ldw	r2,-16(fp)
  814488:	1000041e 	bne	r2,zero,81449c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  81448c:	e0bffe17 	ldw	r2,-8(fp)
  814490:	00c00044 	movi	r3,1
  814494:	10c00805 	stb	r3,32(r2)
      return;
  814498:	00000c06 	br	8144cc <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81449c:	e0bffd17 	ldw	r2,-12(fp)
  8144a0:	10800104 	addi	r2,r2,4
  8144a4:	10800037 	ldwio	r2,0(r2)
  8144a8:	1080200c 	andi	r2,r2,128
  8144ac:	103ff21e 	bne	r2,zero,814478 <__alt_mem_onchip_mem+0xff80c478>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8144b0:	01001904 	movi	r4,100
  8144b4:	08165080 	call	816508 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8144b8:	e0bffd17 	ldw	r2,-12(fp)
  8144bc:	e0ffff03 	ldbu	r3,-4(fp)
  8144c0:	10c00035 	stwio	r3,0(r2)
  8144c4:	00000106 	br	8144cc <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8144c8:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8144cc:	e037883a 	mov	sp,fp
  8144d0:	dfc00117 	ldw	ra,4(sp)
  8144d4:	df000017 	ldw	fp,0(sp)
  8144d8:	dec00204 	addi	sp,sp,8
  8144dc:	f800283a 	ret

008144e0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8144e0:	defffa04 	addi	sp,sp,-24
  8144e4:	dfc00515 	stw	ra,20(sp)
  8144e8:	df000415 	stw	fp,16(sp)
  8144ec:	df000404 	addi	fp,sp,16
  8144f0:	e13ffe15 	stw	r4,-8(fp)
  8144f4:	2805883a 	mov	r2,r5
  8144f8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8144fc:	e0bffe17 	ldw	r2,-8(fp)
  814500:	10800017 	ldw	r2,0(r2)
  814504:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  814508:	008003f4 	movhi	r2,15
  81450c:	10909004 	addi	r2,r2,16960
  814510:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  814514:	e0bffe17 	ldw	r2,-8(fp)
  814518:	10800803 	ldbu	r2,32(r2)
  81451c:	10803fcc 	andi	r2,r2,255
  814520:	1080201c 	xori	r2,r2,128
  814524:	10bfe004 	addi	r2,r2,-128
  814528:	10001d1e 	bne	r2,zero,8145a0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81452c:	00000906 	br	814554 <lcd_write_data+0x74>
    if (--i == 0)
  814530:	e0bffc17 	ldw	r2,-16(fp)
  814534:	10bfffc4 	addi	r2,r2,-1
  814538:	e0bffc15 	stw	r2,-16(fp)
  81453c:	e0bffc17 	ldw	r2,-16(fp)
  814540:	1000041e 	bne	r2,zero,814554 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  814544:	e0bffe17 	ldw	r2,-8(fp)
  814548:	00c00044 	movi	r3,1
  81454c:	10c00805 	stb	r3,32(r2)
      return;
  814550:	00001406 	br	8145a4 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814554:	e0bffd17 	ldw	r2,-12(fp)
  814558:	10800104 	addi	r2,r2,4
  81455c:	10800037 	ldwio	r2,0(r2)
  814560:	1080200c 	andi	r2,r2,128
  814564:	103ff21e 	bne	r2,zero,814530 <__alt_mem_onchip_mem+0xff80c530>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  814568:	01001904 	movi	r4,100
  81456c:	08165080 	call	816508 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  814570:	e0bffd17 	ldw	r2,-12(fp)
  814574:	10800204 	addi	r2,r2,8
  814578:	1007883a 	mov	r3,r2
  81457c:	e0bfff03 	ldbu	r2,-4(fp)
  814580:	18800035 	stwio	r2,0(r3)

  sp->address++;
  814584:	e0bffe17 	ldw	r2,-8(fp)
  814588:	108008c3 	ldbu	r2,35(r2)
  81458c:	10800044 	addi	r2,r2,1
  814590:	1007883a 	mov	r3,r2
  814594:	e0bffe17 	ldw	r2,-8(fp)
  814598:	10c008c5 	stb	r3,35(r2)
  81459c:	00000106 	br	8145a4 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8145a0:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  8145a4:	e037883a 	mov	sp,fp
  8145a8:	dfc00117 	ldw	ra,4(sp)
  8145ac:	df000017 	ldw	fp,0(sp)
  8145b0:	dec00204 	addi	sp,sp,8
  8145b4:	f800283a 	ret

008145b8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8145b8:	defffc04 	addi	sp,sp,-16
  8145bc:	dfc00315 	stw	ra,12(sp)
  8145c0:	df000215 	stw	fp,8(sp)
  8145c4:	df000204 	addi	fp,sp,8
  8145c8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8145cc:	01400044 	movi	r5,1
  8145d0:	e13fff17 	ldw	r4,-4(fp)
  8145d4:	08144280 	call	814428 <lcd_write_command>

  sp->x = 0;
  8145d8:	e0bfff17 	ldw	r2,-4(fp)
  8145dc:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8145e0:	e0bfff17 	ldw	r2,-4(fp)
  8145e4:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8145e8:	e0bfff17 	ldw	r2,-4(fp)
  8145ec:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8145f0:	e03ffe15 	stw	zero,-8(fp)
  8145f4:	00001b06 	br	814664 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8145f8:	e0bffe17 	ldw	r2,-8(fp)
  8145fc:	108018e4 	muli	r2,r2,99
  814600:	10801004 	addi	r2,r2,64
  814604:	e0ffff17 	ldw	r3,-4(fp)
  814608:	1885883a 	add	r2,r3,r2
  81460c:	01801444 	movi	r6,81
  814610:	01400804 	movi	r5,32
  814614:	1009883a 	mov	r4,r2
  814618:	0807ca80 	call	807ca8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  81461c:	e0bffe17 	ldw	r2,-8(fp)
  814620:	108018e4 	muli	r2,r2,99
  814624:	10800c04 	addi	r2,r2,48
  814628:	e0ffff17 	ldw	r3,-4(fp)
  81462c:	1885883a 	add	r2,r3,r2
  814630:	01800404 	movi	r6,16
  814634:	01400804 	movi	r5,32
  814638:	1009883a 	mov	r4,r2
  81463c:	0807ca80 	call	807ca8 <memset>
    sp->line[y].width = 0;
  814640:	e0ffff17 	ldw	r3,-4(fp)
  814644:	e0bffe17 	ldw	r2,-8(fp)
  814648:	108018e4 	muli	r2,r2,99
  81464c:	1885883a 	add	r2,r3,r2
  814650:	10802444 	addi	r2,r2,145
  814654:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814658:	e0bffe17 	ldw	r2,-8(fp)
  81465c:	10800044 	addi	r2,r2,1
  814660:	e0bffe15 	stw	r2,-8(fp)
  814664:	e0bffe17 	ldw	r2,-8(fp)
  814668:	10800090 	cmplti	r2,r2,2
  81466c:	103fe21e 	bne	r2,zero,8145f8 <__alt_mem_onchip_mem+0xff80c5f8>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  814670:	0001883a 	nop
  814674:	e037883a 	mov	sp,fp
  814678:	dfc00117 	ldw	ra,4(sp)
  81467c:	df000017 	ldw	fp,0(sp)
  814680:	dec00204 	addi	sp,sp,8
  814684:	f800283a 	ret

00814688 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  814688:	defff704 	addi	sp,sp,-36
  81468c:	dfc00815 	stw	ra,32(sp)
  814690:	df000715 	stw	fp,28(sp)
  814694:	df000704 	addi	fp,sp,28
  814698:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  81469c:	e0bfff17 	ldw	r2,-4(fp)
  8146a0:	10800943 	ldbu	r2,37(r2)
  8146a4:	10803fcc 	andi	r2,r2,255
  8146a8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8146ac:	e03ff915 	stw	zero,-28(fp)
  8146b0:	00006706 	br	814850 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8146b4:	e0ffff17 	ldw	r3,-4(fp)
  8146b8:	e0bff917 	ldw	r2,-28(fp)
  8146bc:	108018e4 	muli	r2,r2,99
  8146c0:	1885883a 	add	r2,r3,r2
  8146c4:	10802444 	addi	r2,r2,145
  8146c8:	10800003 	ldbu	r2,0(r2)
  8146cc:	10803fcc 	andi	r2,r2,255
  8146d0:	1080201c 	xori	r2,r2,128
  8146d4:	10bfe004 	addi	r2,r2,-128
  8146d8:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8146dc:	e0ffff17 	ldw	r3,-4(fp)
  8146e0:	e0bff917 	ldw	r2,-28(fp)
  8146e4:	108018e4 	muli	r2,r2,99
  8146e8:	1885883a 	add	r2,r3,r2
  8146ec:	10802484 	addi	r2,r2,146
  8146f0:	10800003 	ldbu	r2,0(r2)
  8146f4:	10c03fcc 	andi	r3,r2,255
  8146f8:	e0bffc17 	ldw	r2,-16(fp)
  8146fc:	1885383a 	mul	r2,r3,r2
  814700:	1005d23a 	srai	r2,r2,8
  814704:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  814708:	e0fffb17 	ldw	r3,-20(fp)
  81470c:	e0bffd17 	ldw	r2,-12(fp)
  814710:	18800116 	blt	r3,r2,814718 <lcd_repaint_screen+0x90>
      offset = 0;
  814714:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  814718:	e03ffa15 	stw	zero,-24(fp)
  81471c:	00004606 	br	814838 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  814720:	e0fffa17 	ldw	r3,-24(fp)
  814724:	e0bffb17 	ldw	r2,-20(fp)
  814728:	1885883a 	add	r2,r3,r2
  81472c:	e17ffd17 	ldw	r5,-12(fp)
  814730:	1009883a 	mov	r4,r2
  814734:	081169c0 	call	81169c <__modsi3>
  814738:	1009883a 	mov	r4,r2
  81473c:	e0ffff17 	ldw	r3,-4(fp)
  814740:	e0bff917 	ldw	r2,-28(fp)
  814744:	108018e4 	muli	r2,r2,99
  814748:	1885883a 	add	r2,r3,r2
  81474c:	1105883a 	add	r2,r2,r4
  814750:	10801004 	addi	r2,r2,64
  814754:	10800003 	ldbu	r2,0(r2)
  814758:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  81475c:	e0ffff17 	ldw	r3,-4(fp)
  814760:	e0bff917 	ldw	r2,-28(fp)
  814764:	108018e4 	muli	r2,r2,99
  814768:	1887883a 	add	r3,r3,r2
  81476c:	e0bffa17 	ldw	r2,-24(fp)
  814770:	1885883a 	add	r2,r3,r2
  814774:	10800c04 	addi	r2,r2,48
  814778:	10800003 	ldbu	r2,0(r2)
  81477c:	10c03fcc 	andi	r3,r2,255
  814780:	18c0201c 	xori	r3,r3,128
  814784:	18ffe004 	addi	r3,r3,-128
  814788:	e0bffe07 	ldb	r2,-8(fp)
  81478c:	18802726 	beq	r3,r2,81482c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  814790:	e0fff917 	ldw	r3,-28(fp)
  814794:	d0a01104 	addi	r2,gp,-32700
  814798:	1885883a 	add	r2,r3,r2
  81479c:	10800003 	ldbu	r2,0(r2)
  8147a0:	1007883a 	mov	r3,r2
  8147a4:	e0bffa17 	ldw	r2,-24(fp)
  8147a8:	1885883a 	add	r2,r3,r2
  8147ac:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  8147b0:	e0fffe43 	ldbu	r3,-7(fp)
  8147b4:	e0bfff17 	ldw	r2,-4(fp)
  8147b8:	108008c3 	ldbu	r2,35(r2)
  8147bc:	10803fcc 	andi	r2,r2,255
  8147c0:	1080201c 	xori	r2,r2,128
  8147c4:	10bfe004 	addi	r2,r2,-128
  8147c8:	18800a26 	beq	r3,r2,8147f4 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8147cc:	e0fffe43 	ldbu	r3,-7(fp)
  8147d0:	00bfe004 	movi	r2,-128
  8147d4:	1884b03a 	or	r2,r3,r2
  8147d8:	10803fcc 	andi	r2,r2,255
  8147dc:	100b883a 	mov	r5,r2
  8147e0:	e13fff17 	ldw	r4,-4(fp)
  8147e4:	08144280 	call	814428 <lcd_write_command>
          sp->address = address;
  8147e8:	e0fffe43 	ldbu	r3,-7(fp)
  8147ec:	e0bfff17 	ldw	r2,-4(fp)
  8147f0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8147f4:	e0bffe03 	ldbu	r2,-8(fp)
  8147f8:	10803fcc 	andi	r2,r2,255
  8147fc:	100b883a 	mov	r5,r2
  814800:	e13fff17 	ldw	r4,-4(fp)
  814804:	08144e00 	call	8144e0 <lcd_write_data>
        sp->line[y].visible[x] = c;
  814808:	e0ffff17 	ldw	r3,-4(fp)
  81480c:	e0bff917 	ldw	r2,-28(fp)
  814810:	108018e4 	muli	r2,r2,99
  814814:	1887883a 	add	r3,r3,r2
  814818:	e0bffa17 	ldw	r2,-24(fp)
  81481c:	1885883a 	add	r2,r3,r2
  814820:	10800c04 	addi	r2,r2,48
  814824:	e0fffe03 	ldbu	r3,-8(fp)
  814828:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  81482c:	e0bffa17 	ldw	r2,-24(fp)
  814830:	10800044 	addi	r2,r2,1
  814834:	e0bffa15 	stw	r2,-24(fp)
  814838:	e0bffa17 	ldw	r2,-24(fp)
  81483c:	10800410 	cmplti	r2,r2,16
  814840:	103fb71e 	bne	r2,zero,814720 <__alt_mem_onchip_mem+0xff80c720>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814844:	e0bff917 	ldw	r2,-28(fp)
  814848:	10800044 	addi	r2,r2,1
  81484c:	e0bff915 	stw	r2,-28(fp)
  814850:	e0bff917 	ldw	r2,-28(fp)
  814854:	10800090 	cmplti	r2,r2,2
  814858:	103f961e 	bne	r2,zero,8146b4 <__alt_mem_onchip_mem+0xff80c6b4>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  81485c:	0001883a 	nop
  814860:	e037883a 	mov	sp,fp
  814864:	dfc00117 	ldw	ra,4(sp)
  814868:	df000017 	ldw	fp,0(sp)
  81486c:	dec00204 	addi	sp,sp,8
  814870:	f800283a 	ret

00814874 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  814874:	defffc04 	addi	sp,sp,-16
  814878:	dfc00315 	stw	ra,12(sp)
  81487c:	df000215 	stw	fp,8(sp)
  814880:	df000204 	addi	fp,sp,8
  814884:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814888:	e03ffe15 	stw	zero,-8(fp)
  81488c:	00001d06 	br	814904 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  814890:	e0bffe17 	ldw	r2,-8(fp)
  814894:	00800f16 	blt	zero,r2,8148d4 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  814898:	e0bffe17 	ldw	r2,-8(fp)
  81489c:	108018e4 	muli	r2,r2,99
  8148a0:	10801004 	addi	r2,r2,64
  8148a4:	e0ffff17 	ldw	r3,-4(fp)
  8148a8:	1889883a 	add	r4,r3,r2
  8148ac:	e0bffe17 	ldw	r2,-8(fp)
  8148b0:	10800044 	addi	r2,r2,1
  8148b4:	108018e4 	muli	r2,r2,99
  8148b8:	10801004 	addi	r2,r2,64
  8148bc:	e0ffff17 	ldw	r3,-4(fp)
  8148c0:	1885883a 	add	r2,r3,r2
  8148c4:	01801404 	movi	r6,80
  8148c8:	100b883a 	mov	r5,r2
  8148cc:	080d45c0 	call	80d45c <memcpy>
  8148d0:	00000906 	br	8148f8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8148d4:	e0bffe17 	ldw	r2,-8(fp)
  8148d8:	108018e4 	muli	r2,r2,99
  8148dc:	10801004 	addi	r2,r2,64
  8148e0:	e0ffff17 	ldw	r3,-4(fp)
  8148e4:	1885883a 	add	r2,r3,r2
  8148e8:	01801404 	movi	r6,80
  8148ec:	01400804 	movi	r5,32
  8148f0:	1009883a 	mov	r4,r2
  8148f4:	0807ca80 	call	807ca8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8148f8:	e0bffe17 	ldw	r2,-8(fp)
  8148fc:	10800044 	addi	r2,r2,1
  814900:	e0bffe15 	stw	r2,-8(fp)
  814904:	e0bffe17 	ldw	r2,-8(fp)
  814908:	10800090 	cmplti	r2,r2,2
  81490c:	103fe01e 	bne	r2,zero,814890 <__alt_mem_onchip_mem+0xff80c890>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  814910:	e0bfff17 	ldw	r2,-4(fp)
  814914:	10800883 	ldbu	r2,34(r2)
  814918:	10bfffc4 	addi	r2,r2,-1
  81491c:	1007883a 	mov	r3,r2
  814920:	e0bfff17 	ldw	r2,-4(fp)
  814924:	10c00885 	stb	r3,34(r2)
}
  814928:	0001883a 	nop
  81492c:	e037883a 	mov	sp,fp
  814930:	dfc00117 	ldw	ra,4(sp)
  814934:	df000017 	ldw	fp,0(sp)
  814938:	dec00204 	addi	sp,sp,8
  81493c:	f800283a 	ret

00814940 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  814940:	defff904 	addi	sp,sp,-28
  814944:	dfc00615 	stw	ra,24(sp)
  814948:	df000515 	stw	fp,20(sp)
  81494c:	df000504 	addi	fp,sp,20
  814950:	e13ffe15 	stw	r4,-8(fp)
  814954:	2805883a 	mov	r2,r5
  814958:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  81495c:	e03ffb15 	stw	zero,-20(fp)
  814960:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  814964:	e0bffe17 	ldw	r2,-8(fp)
  814968:	10800a03 	ldbu	r2,40(r2)
  81496c:	10803fcc 	andi	r2,r2,255
  814970:	1080201c 	xori	r2,r2,128
  814974:	10bfe004 	addi	r2,r2,-128
  814978:	108016d8 	cmpnei	r2,r2,91
  81497c:	1000411e 	bne	r2,zero,814a84 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  814980:	e0bffe17 	ldw	r2,-8(fp)
  814984:	10800a04 	addi	r2,r2,40
  814988:	10800044 	addi	r2,r2,1
  81498c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  814990:	00000c06 	br	8149c4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  814994:	e0bffb17 	ldw	r2,-20(fp)
  814998:	10c002a4 	muli	r3,r2,10
  81499c:	e0bffd17 	ldw	r2,-12(fp)
  8149a0:	11000044 	addi	r4,r2,1
  8149a4:	e13ffd15 	stw	r4,-12(fp)
  8149a8:	10800003 	ldbu	r2,0(r2)
  8149ac:	10803fcc 	andi	r2,r2,255
  8149b0:	1080201c 	xori	r2,r2,128
  8149b4:	10bfe004 	addi	r2,r2,-128
  8149b8:	10bff404 	addi	r2,r2,-48
  8149bc:	1885883a 	add	r2,r3,r2
  8149c0:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8149c4:	d0e01217 	ldw	r3,-32696(gp)
  8149c8:	e0bffd17 	ldw	r2,-12(fp)
  8149cc:	10800003 	ldbu	r2,0(r2)
  8149d0:	10803fcc 	andi	r2,r2,255
  8149d4:	1080201c 	xori	r2,r2,128
  8149d8:	10bfe004 	addi	r2,r2,-128
  8149dc:	10800044 	addi	r2,r2,1
  8149e0:	1885883a 	add	r2,r3,r2
  8149e4:	10800003 	ldbu	r2,0(r2)
  8149e8:	10803fcc 	andi	r2,r2,255
  8149ec:	1080010c 	andi	r2,r2,4
  8149f0:	103fe81e 	bne	r2,zero,814994 <__alt_mem_onchip_mem+0xff80c994>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8149f4:	e0bffd17 	ldw	r2,-12(fp)
  8149f8:	10800003 	ldbu	r2,0(r2)
  8149fc:	10803fcc 	andi	r2,r2,255
  814a00:	1080201c 	xori	r2,r2,128
  814a04:	10bfe004 	addi	r2,r2,-128
  814a08:	10800ed8 	cmpnei	r2,r2,59
  814a0c:	10001f1e 	bne	r2,zero,814a8c <lcd_handle_escape+0x14c>
    {
      ptr++;
  814a10:	e0bffd17 	ldw	r2,-12(fp)
  814a14:	10800044 	addi	r2,r2,1
  814a18:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  814a1c:	00000c06 	br	814a50 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  814a20:	e0bffc17 	ldw	r2,-16(fp)
  814a24:	10c002a4 	muli	r3,r2,10
  814a28:	e0bffd17 	ldw	r2,-12(fp)
  814a2c:	11000044 	addi	r4,r2,1
  814a30:	e13ffd15 	stw	r4,-12(fp)
  814a34:	10800003 	ldbu	r2,0(r2)
  814a38:	10803fcc 	andi	r2,r2,255
  814a3c:	1080201c 	xori	r2,r2,128
  814a40:	10bfe004 	addi	r2,r2,-128
  814a44:	10bff404 	addi	r2,r2,-48
  814a48:	1885883a 	add	r2,r3,r2
  814a4c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  814a50:	d0e01217 	ldw	r3,-32696(gp)
  814a54:	e0bffd17 	ldw	r2,-12(fp)
  814a58:	10800003 	ldbu	r2,0(r2)
  814a5c:	10803fcc 	andi	r2,r2,255
  814a60:	1080201c 	xori	r2,r2,128
  814a64:	10bfe004 	addi	r2,r2,-128
  814a68:	10800044 	addi	r2,r2,1
  814a6c:	1885883a 	add	r2,r3,r2
  814a70:	10800003 	ldbu	r2,0(r2)
  814a74:	10803fcc 	andi	r2,r2,255
  814a78:	1080010c 	andi	r2,r2,4
  814a7c:	103fe81e 	bne	r2,zero,814a20 <__alt_mem_onchip_mem+0xff80ca20>
  814a80:	00000206 	br	814a8c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  814a84:	00bfffc4 	movi	r2,-1
  814a88:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  814a8c:	e0bfff07 	ldb	r2,-4(fp)
  814a90:	10c012a0 	cmpeqi	r3,r2,74
  814a94:	1800291e 	bne	r3,zero,814b3c <lcd_handle_escape+0x1fc>
  814a98:	10c012c8 	cmpgei	r3,r2,75
  814a9c:	1800031e 	bne	r3,zero,814aac <lcd_handle_escape+0x16c>
  814aa0:	10801220 	cmpeqi	r2,r2,72
  814aa4:	1000061e 	bne	r2,zero,814ac0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  814aa8:	00004a06 	br	814bd4 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  814aac:	10c012e0 	cmpeqi	r3,r2,75
  814ab0:	1800281e 	bne	r3,zero,814b54 <lcd_handle_escape+0x214>
  814ab4:	108019a0 	cmpeqi	r2,r2,102
  814ab8:	1000011e 	bne	r2,zero,814ac0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  814abc:	00004506 	br	814bd4 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  814ac0:	e0bffc17 	ldw	r2,-16(fp)
  814ac4:	0080050e 	bge	zero,r2,814adc <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  814ac8:	e0bffc17 	ldw	r2,-16(fp)
  814acc:	10bfffc4 	addi	r2,r2,-1
  814ad0:	1007883a 	mov	r3,r2
  814ad4:	e0bffe17 	ldw	r2,-8(fp)
  814ad8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  814adc:	e0bffb17 	ldw	r2,-20(fp)
  814ae0:	0080370e 	bge	zero,r2,814bc0 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  814ae4:	e0bffb17 	ldw	r2,-20(fp)
  814ae8:	10bfffc4 	addi	r2,r2,-1
  814aec:	1007883a 	mov	r3,r2
  814af0:	e0bffe17 	ldw	r2,-8(fp)
  814af4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  814af8:	e0bffe17 	ldw	r2,-8(fp)
  814afc:	10800883 	ldbu	r2,34(r2)
  814b00:	10803fcc 	andi	r2,r2,255
  814b04:	10800170 	cmpltui	r2,r2,5
  814b08:	1000061e 	bne	r2,zero,814b24 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  814b0c:	e0bffe17 	ldw	r2,-8(fp)
  814b10:	00c00104 	movi	r3,4
  814b14:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  814b18:	00000206 	br	814b24 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  814b1c:	e13ffe17 	ldw	r4,-8(fp)
  814b20:	08148740 	call	814874 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  814b24:	e0bffe17 	ldw	r2,-8(fp)
  814b28:	10800883 	ldbu	r2,34(r2)
  814b2c:	10803fcc 	andi	r2,r2,255
  814b30:	108000e8 	cmpgeui	r2,r2,3
  814b34:	103ff91e 	bne	r2,zero,814b1c <__alt_mem_onchip_mem+0xff80cb1c>
        lcd_scroll_up(sp);
    }
    break;
  814b38:	00002106 	br	814bc0 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  814b3c:	e0bffb17 	ldw	r2,-20(fp)
  814b40:	10800098 	cmpnei	r2,r2,2
  814b44:	1000201e 	bne	r2,zero,814bc8 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  814b48:	e13ffe17 	ldw	r4,-8(fp)
  814b4c:	08145b80 	call	8145b8 <lcd_clear_screen>
    break;
  814b50:	00001d06 	br	814bc8 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  814b54:	e0bffb17 	ldw	r2,-20(fp)
  814b58:	00801d16 	blt	zero,r2,814bd0 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  814b5c:	e0bffe17 	ldw	r2,-8(fp)
  814b60:	10800843 	ldbu	r2,33(r2)
  814b64:	10803fcc 	andi	r2,r2,255
  814b68:	10801428 	cmpgeui	r2,r2,80
  814b6c:	1000181e 	bne	r2,zero,814bd0 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  814b70:	e0bffe17 	ldw	r2,-8(fp)
  814b74:	10800883 	ldbu	r2,34(r2)
  814b78:	10803fcc 	andi	r2,r2,255
  814b7c:	108018e4 	muli	r2,r2,99
  814b80:	10801004 	addi	r2,r2,64
  814b84:	e0fffe17 	ldw	r3,-8(fp)
  814b88:	1887883a 	add	r3,r3,r2
  814b8c:	e0bffe17 	ldw	r2,-8(fp)
  814b90:	10800843 	ldbu	r2,33(r2)
  814b94:	10803fcc 	andi	r2,r2,255
  814b98:	1889883a 	add	r4,r3,r2
  814b9c:	e0bffe17 	ldw	r2,-8(fp)
  814ba0:	10800843 	ldbu	r2,33(r2)
  814ba4:	10803fcc 	andi	r2,r2,255
  814ba8:	00c01404 	movi	r3,80
  814bac:	1885c83a 	sub	r2,r3,r2
  814bb0:	100d883a 	mov	r6,r2
  814bb4:	01400804 	movi	r5,32
  814bb8:	0807ca80 	call	807ca8 <memset>
    }
    break;
  814bbc:	00000406 	br	814bd0 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  814bc0:	0001883a 	nop
  814bc4:	00000306 	br	814bd4 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  814bc8:	0001883a 	nop
  814bcc:	00000106 	br	814bd4 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  814bd0:	0001883a 	nop
  }
}
  814bd4:	0001883a 	nop
  814bd8:	e037883a 	mov	sp,fp
  814bdc:	dfc00117 	ldw	ra,4(sp)
  814be0:	df000017 	ldw	fp,0(sp)
  814be4:	dec00204 	addi	sp,sp,8
  814be8:	f800283a 	ret

00814bec <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  814bec:	defff304 	addi	sp,sp,-52
  814bf0:	dfc00c15 	stw	ra,48(sp)
  814bf4:	df000b15 	stw	fp,44(sp)
  814bf8:	df000b04 	addi	fp,sp,44
  814bfc:	e13ffc15 	stw	r4,-16(fp)
  814c00:	e17ffd15 	stw	r5,-12(fp)
  814c04:	e1bffe15 	stw	r6,-8(fp)
  814c08:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  814c0c:	e0bffe17 	ldw	r2,-8(fp)
  814c10:	e0fffd17 	ldw	r3,-12(fp)
  814c14:	1885883a 	add	r2,r3,r2
  814c18:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  814c1c:	e0bffc17 	ldw	r2,-16(fp)
  814c20:	00c00044 	movi	r3,1
  814c24:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  814c28:	00009906 	br	814e90 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  814c2c:	e0bffd17 	ldw	r2,-12(fp)
  814c30:	10800003 	ldbu	r2,0(r2)
  814c34:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  814c38:	e0bffc17 	ldw	r2,-16(fp)
  814c3c:	10800903 	ldbu	r2,36(r2)
  814c40:	10803fcc 	andi	r2,r2,255
  814c44:	1080201c 	xori	r2,r2,128
  814c48:	10bfe004 	addi	r2,r2,-128
  814c4c:	10003716 	blt	r2,zero,814d2c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  814c50:	e0bffc17 	ldw	r2,-16(fp)
  814c54:	10800903 	ldbu	r2,36(r2)
  814c58:	10803fcc 	andi	r2,r2,255
  814c5c:	1080201c 	xori	r2,r2,128
  814c60:	10bfe004 	addi	r2,r2,-128
  814c64:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  814c68:	e0bffa17 	ldw	r2,-24(fp)
  814c6c:	1000031e 	bne	r2,zero,814c7c <altera_avalon_lcd_16207_write+0x90>
  814c70:	e0bff907 	ldb	r2,-28(fp)
  814c74:	108016d8 	cmpnei	r2,r2,91
  814c78:	10000d1e 	bne	r2,zero,814cb0 <altera_avalon_lcd_16207_write+0xc4>
  814c7c:	e0bffa17 	ldw	r2,-24(fp)
  814c80:	10001826 	beq	r2,zero,814ce4 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  814c84:	d0e01217 	ldw	r3,-32696(gp)
  814c88:	e0bff907 	ldb	r2,-28(fp)
  814c8c:	10800044 	addi	r2,r2,1
  814c90:	1885883a 	add	r2,r3,r2
  814c94:	10800003 	ldbu	r2,0(r2)
  814c98:	10803fcc 	andi	r2,r2,255
  814c9c:	1080010c 	andi	r2,r2,4
  814ca0:	1000101e 	bne	r2,zero,814ce4 <altera_avalon_lcd_16207_write+0xf8>
  814ca4:	e0bff907 	ldb	r2,-28(fp)
  814ca8:	10800ee0 	cmpeqi	r2,r2,59
  814cac:	10000d1e 	bne	r2,zero,814ce4 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  814cb0:	e0fffc17 	ldw	r3,-16(fp)
  814cb4:	e0bffa17 	ldw	r2,-24(fp)
  814cb8:	1885883a 	add	r2,r3,r2
  814cbc:	10800a04 	addi	r2,r2,40
  814cc0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  814cc4:	e0bff907 	ldb	r2,-28(fp)
  814cc8:	100b883a 	mov	r5,r2
  814ccc:	e13ffc17 	ldw	r4,-16(fp)
  814cd0:	08149400 	call	814940 <lcd_handle_escape>

        sp->esccount = -1;
  814cd4:	e0bffc17 	ldw	r2,-16(fp)
  814cd8:	00ffffc4 	movi	r3,-1
  814cdc:	10c00905 	stb	r3,36(r2)
  814ce0:	00006806 	br	814e84 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  814ce4:	e0bffc17 	ldw	r2,-16(fp)
  814ce8:	10800903 	ldbu	r2,36(r2)
  814cec:	10803fcc 	andi	r2,r2,255
  814cf0:	108001e8 	cmpgeui	r2,r2,7
  814cf4:	1000631e 	bne	r2,zero,814e84 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  814cf8:	e0fffc17 	ldw	r3,-16(fp)
  814cfc:	e0bffa17 	ldw	r2,-24(fp)
  814d00:	1885883a 	add	r2,r3,r2
  814d04:	10800a04 	addi	r2,r2,40
  814d08:	e0fff903 	ldbu	r3,-28(fp)
  814d0c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  814d10:	e0bffc17 	ldw	r2,-16(fp)
  814d14:	10800903 	ldbu	r2,36(r2)
  814d18:	10800044 	addi	r2,r2,1
  814d1c:	1007883a 	mov	r3,r2
  814d20:	e0bffc17 	ldw	r2,-16(fp)
  814d24:	10c00905 	stb	r3,36(r2)
  814d28:	00005606 	br	814e84 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  814d2c:	e0bff907 	ldb	r2,-28(fp)
  814d30:	108006d8 	cmpnei	r2,r2,27
  814d34:	1000031e 	bne	r2,zero,814d44 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  814d38:	e0bffc17 	ldw	r2,-16(fp)
  814d3c:	10000905 	stb	zero,36(r2)
  814d40:	00005006 	br	814e84 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  814d44:	e0bff907 	ldb	r2,-28(fp)
  814d48:	10800358 	cmpnei	r2,r2,13
  814d4c:	1000031e 	bne	r2,zero,814d5c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  814d50:	e0bffc17 	ldw	r2,-16(fp)
  814d54:	10000845 	stb	zero,33(r2)
  814d58:	00004a06 	br	814e84 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  814d5c:	e0bff907 	ldb	r2,-28(fp)
  814d60:	10800298 	cmpnei	r2,r2,10
  814d64:	1000101e 	bne	r2,zero,814da8 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  814d68:	e0bffc17 	ldw	r2,-16(fp)
  814d6c:	10000845 	stb	zero,33(r2)
      sp->y++;
  814d70:	e0bffc17 	ldw	r2,-16(fp)
  814d74:	10800883 	ldbu	r2,34(r2)
  814d78:	10800044 	addi	r2,r2,1
  814d7c:	1007883a 	mov	r3,r2
  814d80:	e0bffc17 	ldw	r2,-16(fp)
  814d84:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  814d88:	e0bffc17 	ldw	r2,-16(fp)
  814d8c:	10800883 	ldbu	r2,34(r2)
  814d90:	10803fcc 	andi	r2,r2,255
  814d94:	108000f0 	cmpltui	r2,r2,3
  814d98:	10003a1e 	bne	r2,zero,814e84 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  814d9c:	e13ffc17 	ldw	r4,-16(fp)
  814da0:	08148740 	call	814874 <lcd_scroll_up>
  814da4:	00003706 	br	814e84 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  814da8:	e0bff907 	ldb	r2,-28(fp)
  814dac:	10800218 	cmpnei	r2,r2,8
  814db0:	10000b1e 	bne	r2,zero,814de0 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  814db4:	e0bffc17 	ldw	r2,-16(fp)
  814db8:	10800843 	ldbu	r2,33(r2)
  814dbc:	10803fcc 	andi	r2,r2,255
  814dc0:	10003026 	beq	r2,zero,814e84 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  814dc4:	e0bffc17 	ldw	r2,-16(fp)
  814dc8:	10800843 	ldbu	r2,33(r2)
  814dcc:	10bfffc4 	addi	r2,r2,-1
  814dd0:	1007883a 	mov	r3,r2
  814dd4:	e0bffc17 	ldw	r2,-16(fp)
  814dd8:	10c00845 	stb	r3,33(r2)
  814ddc:	00002906 	br	814e84 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  814de0:	d0e01217 	ldw	r3,-32696(gp)
  814de4:	e0bff907 	ldb	r2,-28(fp)
  814de8:	10800044 	addi	r2,r2,1
  814dec:	1885883a 	add	r2,r3,r2
  814df0:	10800003 	ldbu	r2,0(r2)
  814df4:	10803fcc 	andi	r2,r2,255
  814df8:	1080201c 	xori	r2,r2,128
  814dfc:	10bfe004 	addi	r2,r2,-128
  814e00:	108025cc 	andi	r2,r2,151
  814e04:	10001f26 	beq	r2,zero,814e84 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  814e08:	e0bffc17 	ldw	r2,-16(fp)
  814e0c:	10800883 	ldbu	r2,34(r2)
  814e10:	10803fcc 	andi	r2,r2,255
  814e14:	108000b0 	cmpltui	r2,r2,2
  814e18:	1000021e 	bne	r2,zero,814e24 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  814e1c:	e13ffc17 	ldw	r4,-16(fp)
  814e20:	08148740 	call	814874 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  814e24:	e0bffc17 	ldw	r2,-16(fp)
  814e28:	10800843 	ldbu	r2,33(r2)
  814e2c:	10803fcc 	andi	r2,r2,255
  814e30:	10801428 	cmpgeui	r2,r2,80
  814e34:	10000d1e 	bne	r2,zero,814e6c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  814e38:	e0bffc17 	ldw	r2,-16(fp)
  814e3c:	10800883 	ldbu	r2,34(r2)
  814e40:	10c03fcc 	andi	r3,r2,255
  814e44:	e0bffc17 	ldw	r2,-16(fp)
  814e48:	10800843 	ldbu	r2,33(r2)
  814e4c:	10803fcc 	andi	r2,r2,255
  814e50:	e13ffc17 	ldw	r4,-16(fp)
  814e54:	18c018e4 	muli	r3,r3,99
  814e58:	20c7883a 	add	r3,r4,r3
  814e5c:	1885883a 	add	r2,r3,r2
  814e60:	10801004 	addi	r2,r2,64
  814e64:	e0fff903 	ldbu	r3,-28(fp)
  814e68:	10c00005 	stb	r3,0(r2)

      sp->x++;
  814e6c:	e0bffc17 	ldw	r2,-16(fp)
  814e70:	10800843 	ldbu	r2,33(r2)
  814e74:	10800044 	addi	r2,r2,1
  814e78:	1007883a 	mov	r3,r2
  814e7c:	e0bffc17 	ldw	r2,-16(fp)
  814e80:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  814e84:	e0bffd17 	ldw	r2,-12(fp)
  814e88:	10800044 	addi	r2,r2,1
  814e8c:	e0bffd15 	stw	r2,-12(fp)
  814e90:	e0fffd17 	ldw	r3,-12(fp)
  814e94:	e0bff817 	ldw	r2,-32(fp)
  814e98:	18bf6436 	bltu	r3,r2,814c2c <__alt_mem_onchip_mem+0xff80cc2c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  814e9c:	00800404 	movi	r2,16
  814ea0:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814ea4:	e03ff515 	stw	zero,-44(fp)
  814ea8:	00003706 	br	814f88 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  814eac:	00801404 	movi	r2,80
  814eb0:	e0bff715 	stw	r2,-36(fp)
  814eb4:	00001106 	br	814efc <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  814eb8:	e0bff717 	ldw	r2,-36(fp)
  814ebc:	10bfffc4 	addi	r2,r2,-1
  814ec0:	e13ffc17 	ldw	r4,-16(fp)
  814ec4:	e0fff517 	ldw	r3,-44(fp)
  814ec8:	18c018e4 	muli	r3,r3,99
  814ecc:	20c7883a 	add	r3,r4,r3
  814ed0:	1885883a 	add	r2,r3,r2
  814ed4:	10801004 	addi	r2,r2,64
  814ed8:	10800003 	ldbu	r2,0(r2)
  814edc:	10803fcc 	andi	r2,r2,255
  814ee0:	1080201c 	xori	r2,r2,128
  814ee4:	10bfe004 	addi	r2,r2,-128
  814ee8:	10800820 	cmpeqi	r2,r2,32
  814eec:	10000626 	beq	r2,zero,814f08 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  814ef0:	e0bff717 	ldw	r2,-36(fp)
  814ef4:	10bfffc4 	addi	r2,r2,-1
  814ef8:	e0bff715 	stw	r2,-36(fp)
  814efc:	e0bff717 	ldw	r2,-36(fp)
  814f00:	00bfed16 	blt	zero,r2,814eb8 <__alt_mem_onchip_mem+0xff80ceb8>
  814f04:	00000106 	br	814f0c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  814f08:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  814f0c:	e0bff717 	ldw	r2,-36(fp)
  814f10:	10800448 	cmpgei	r2,r2,17
  814f14:	1000031e 	bne	r2,zero,814f24 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  814f18:	00800404 	movi	r2,16
  814f1c:	e0bff715 	stw	r2,-36(fp)
  814f20:	00000306 	br	814f30 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  814f24:	e0bff717 	ldw	r2,-36(fp)
  814f28:	10800044 	addi	r2,r2,1
  814f2c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  814f30:	e0bff717 	ldw	r2,-36(fp)
  814f34:	1009883a 	mov	r4,r2
  814f38:	e0fffc17 	ldw	r3,-16(fp)
  814f3c:	e0bff517 	ldw	r2,-44(fp)
  814f40:	108018e4 	muli	r2,r2,99
  814f44:	1885883a 	add	r2,r3,r2
  814f48:	10802444 	addi	r2,r2,145
  814f4c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  814f50:	e0fff617 	ldw	r3,-40(fp)
  814f54:	e0bff717 	ldw	r2,-36(fp)
  814f58:	1880020e 	bge	r3,r2,814f64 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  814f5c:	e0bff717 	ldw	r2,-36(fp)
  814f60:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  814f64:	e0fffc17 	ldw	r3,-16(fp)
  814f68:	e0bff517 	ldw	r2,-44(fp)
  814f6c:	108018e4 	muli	r2,r2,99
  814f70:	1885883a 	add	r2,r3,r2
  814f74:	10802484 	addi	r2,r2,146
  814f78:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814f7c:	e0bff517 	ldw	r2,-44(fp)
  814f80:	10800044 	addi	r2,r2,1
  814f84:	e0bff515 	stw	r2,-44(fp)
  814f88:	e0bff517 	ldw	r2,-44(fp)
  814f8c:	10800090 	cmplti	r2,r2,2
  814f90:	103fc61e 	bne	r2,zero,814eac <__alt_mem_onchip_mem+0xff80ceac>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  814f94:	e0bff617 	ldw	r2,-40(fp)
  814f98:	10800448 	cmpgei	r2,r2,17
  814f9c:	1000031e 	bne	r2,zero,814fac <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  814fa0:	e0bffc17 	ldw	r2,-16(fp)
  814fa4:	10000985 	stb	zero,38(r2)
  814fa8:	00002e06 	br	815064 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  814fac:	e0bff617 	ldw	r2,-40(fp)
  814fb0:	1085883a 	add	r2,r2,r2
  814fb4:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  814fb8:	e0bff617 	ldw	r2,-40(fp)
  814fbc:	1007883a 	mov	r3,r2
  814fc0:	e0bffc17 	ldw	r2,-16(fp)
  814fc4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814fc8:	e03ff515 	stw	zero,-44(fp)
  814fcc:	00002206 	br	815058 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  814fd0:	e0fffc17 	ldw	r3,-16(fp)
  814fd4:	e0bff517 	ldw	r2,-44(fp)
  814fd8:	108018e4 	muli	r2,r2,99
  814fdc:	1885883a 	add	r2,r3,r2
  814fe0:	10802444 	addi	r2,r2,145
  814fe4:	10800003 	ldbu	r2,0(r2)
  814fe8:	10803fcc 	andi	r2,r2,255
  814fec:	1080201c 	xori	r2,r2,128
  814ff0:	10bfe004 	addi	r2,r2,-128
  814ff4:	10800450 	cmplti	r2,r2,17
  814ff8:	1000141e 	bne	r2,zero,81504c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  814ffc:	e0fffc17 	ldw	r3,-16(fp)
  815000:	e0bff517 	ldw	r2,-44(fp)
  815004:	108018e4 	muli	r2,r2,99
  815008:	1885883a 	add	r2,r3,r2
  81500c:	10802444 	addi	r2,r2,145
  815010:	10800003 	ldbu	r2,0(r2)
  815014:	10803fcc 	andi	r2,r2,255
  815018:	1080201c 	xori	r2,r2,128
  81501c:	10bfe004 	addi	r2,r2,-128
  815020:	1004923a 	slli	r2,r2,8
  815024:	e17ff617 	ldw	r5,-40(fp)
  815028:	1009883a 	mov	r4,r2
  81502c:	08116180 	call	811618 <__divsi3>
  815030:	1009883a 	mov	r4,r2
  815034:	e0fffc17 	ldw	r3,-16(fp)
  815038:	e0bff517 	ldw	r2,-44(fp)
  81503c:	108018e4 	muli	r2,r2,99
  815040:	1885883a 	add	r2,r3,r2
  815044:	10802484 	addi	r2,r2,146
  815048:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81504c:	e0bff517 	ldw	r2,-44(fp)
  815050:	10800044 	addi	r2,r2,1
  815054:	e0bff515 	stw	r2,-44(fp)
  815058:	e0bff517 	ldw	r2,-44(fp)
  81505c:	10800090 	cmplti	r2,r2,2
  815060:	103fdb1e 	bne	r2,zero,814fd0 <__alt_mem_onchip_mem+0xff80cfd0>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  815064:	e0bffc17 	ldw	r2,-16(fp)
  815068:	10800943 	ldbu	r2,37(r2)
  81506c:	10803fcc 	andi	r2,r2,255
  815070:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  815074:	e13ffc17 	ldw	r4,-16(fp)
  815078:	08146880 	call	814688 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  81507c:	e0bffc17 	ldw	r2,-16(fp)
  815080:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  815084:	e0bffc17 	ldw	r2,-16(fp)
  815088:	10800943 	ldbu	r2,37(r2)
  81508c:	10c03fcc 	andi	r3,r2,255
  815090:	e0bffb17 	ldw	r2,-20(fp)
  815094:	18800426 	beq	r3,r2,8150a8 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  815098:	e0bffc17 	ldw	r2,-16(fp)
  81509c:	00c00044 	movi	r3,1
  8150a0:	10c009c5 	stb	r3,39(r2)
  }
  8150a4:	003fef06 	br	815064 <__alt_mem_onchip_mem+0xff80d064>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8150a8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8150ac:	e0bffe17 	ldw	r2,-8(fp)
}
  8150b0:	e037883a 	mov	sp,fp
  8150b4:	dfc00117 	ldw	ra,4(sp)
  8150b8:	df000017 	ldw	fp,0(sp)
  8150bc:	dec00204 	addi	sp,sp,8
  8150c0:	f800283a 	ret

008150c4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8150c4:	defffc04 	addi	sp,sp,-16
  8150c8:	dfc00315 	stw	ra,12(sp)
  8150cc:	df000215 	stw	fp,8(sp)
  8150d0:	df000204 	addi	fp,sp,8
  8150d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8150d8:	e0bfff17 	ldw	r2,-4(fp)
  8150dc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8150e0:	e0bffe17 	ldw	r2,-8(fp)
  8150e4:	10800943 	ldbu	r2,37(r2)
  8150e8:	10803fcc 	andi	r2,r2,255
  8150ec:	10c00044 	addi	r3,r2,1
  8150f0:	e0bffe17 	ldw	r2,-8(fp)
  8150f4:	10800983 	ldbu	r2,38(r2)
  8150f8:	10803fcc 	andi	r2,r2,255
  8150fc:	18800316 	blt	r3,r2,81510c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  815100:	e0bffe17 	ldw	r2,-8(fp)
  815104:	10000945 	stb	zero,37(r2)
  815108:	00000606 	br	815124 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81510c:	e0bffe17 	ldw	r2,-8(fp)
  815110:	10800943 	ldbu	r2,37(r2)
  815114:	10800044 	addi	r2,r2,1
  815118:	1007883a 	mov	r3,r2
  81511c:	e0bffe17 	ldw	r2,-8(fp)
  815120:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  815124:	e0bffe17 	ldw	r2,-8(fp)
  815128:	10800983 	ldbu	r2,38(r2)
  81512c:	10803fcc 	andi	r2,r2,255
  815130:	10000826 	beq	r2,zero,815154 <alt_lcd_16207_timeout+0x90>
  815134:	e0bffe17 	ldw	r2,-8(fp)
  815138:	108009c3 	ldbu	r2,39(r2)
  81513c:	10803fcc 	andi	r2,r2,255
  815140:	1080201c 	xori	r2,r2,128
  815144:	10bfe004 	addi	r2,r2,-128
  815148:	1000021e 	bne	r2,zero,815154 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  81514c:	e13ffe17 	ldw	r4,-8(fp)
  815150:	08146880 	call	814688 <lcd_repaint_screen>

  return sp->period;
  815154:	e0bffe17 	ldw	r2,-8(fp)
  815158:	10800717 	ldw	r2,28(r2)
}
  81515c:	e037883a 	mov	sp,fp
  815160:	dfc00117 	ldw	ra,4(sp)
  815164:	df000017 	ldw	fp,0(sp)
  815168:	dec00204 	addi	sp,sp,8
  81516c:	f800283a 	ret

00815170 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  815170:	defffc04 	addi	sp,sp,-16
  815174:	dfc00315 	stw	ra,12(sp)
  815178:	df000215 	stw	fp,8(sp)
  81517c:	df000204 	addi	fp,sp,8
  815180:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  815184:	e0bfff17 	ldw	r2,-4(fp)
  815188:	10800017 	ldw	r2,0(r2)
  81518c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  815190:	e0bfff17 	ldw	r2,-4(fp)
  815194:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  815198:	010ea604 	movi	r4,15000
  81519c:	08165080 	call	816508 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8151a0:	e0bffe17 	ldw	r2,-8(fp)
  8151a4:	00c00c04 	movi	r3,48
  8151a8:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8151ac:	01040104 	movi	r4,4100
  8151b0:	08165080 	call	816508 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8151b4:	e0bffe17 	ldw	r2,-8(fp)
  8151b8:	00c00c04 	movi	r3,48
  8151bc:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8151c0:	0100fa04 	movi	r4,1000
  8151c4:	08165080 	call	816508 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8151c8:	e0bffe17 	ldw	r2,-8(fp)
  8151cc:	00c00c04 	movi	r3,48
  8151d0:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8151d4:	01400e04 	movi	r5,56
  8151d8:	e13fff17 	ldw	r4,-4(fp)
  8151dc:	08144280 	call	814428 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8151e0:	01400204 	movi	r5,8
  8151e4:	e13fff17 	ldw	r4,-4(fp)
  8151e8:	08144280 	call	814428 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8151ec:	e13fff17 	ldw	r4,-4(fp)
  8151f0:	08145b80 	call	8145b8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8151f4:	01400184 	movi	r5,6
  8151f8:	e13fff17 	ldw	r4,-4(fp)
  8151fc:	08144280 	call	814428 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  815200:	01400304 	movi	r5,12
  815204:	e13fff17 	ldw	r4,-4(fp)
  815208:	08144280 	call	814428 <lcd_write_command>

  sp->esccount = -1;
  81520c:	e0bfff17 	ldw	r2,-4(fp)
  815210:	00ffffc4 	movi	r3,-1
  815214:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  815218:	e0bfff17 	ldw	r2,-4(fp)
  81521c:	10800a04 	addi	r2,r2,40
  815220:	01800204 	movi	r6,8
  815224:	000b883a 	mov	r5,zero
  815228:	1009883a 	mov	r4,r2
  81522c:	0807ca80 	call	807ca8 <memset>

  sp->scrollpos = 0;
  815230:	e0bfff17 	ldw	r2,-4(fp)
  815234:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  815238:	e0bfff17 	ldw	r2,-4(fp)
  81523c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  815240:	e0bfff17 	ldw	r2,-4(fp)
  815244:	100009c5 	stb	zero,39(r2)
  815248:	d0a75d17 	ldw	r2,-25228(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  81524c:	01400284 	movi	r5,10
  815250:	1009883a 	mov	r4,r2
  815254:	08117100 	call	811710 <__udivsi3>
  815258:	1007883a 	mov	r3,r2
  81525c:	e0bfff17 	ldw	r2,-4(fp)
  815260:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  815264:	e0bfff17 	ldw	r2,-4(fp)
  815268:	10c00104 	addi	r3,r2,4
  81526c:	e0bfff17 	ldw	r2,-4(fp)
  815270:	10800717 	ldw	r2,28(r2)
  815274:	e1ffff17 	ldw	r7,-4(fp)
  815278:	01802074 	movhi	r6,129
  81527c:	31943104 	addi	r6,r6,20676
  815280:	100b883a 	mov	r5,r2
  815284:	1809883a 	mov	r4,r3
  815288:	08128d40 	call	8128d4 <alt_alarm_start>
}
  81528c:	0001883a 	nop
  815290:	e037883a 	mov	sp,fp
  815294:	dfc00117 	ldw	ra,4(sp)
  815298:	df000017 	ldw	fp,0(sp)
  81529c:	dec00204 	addi	sp,sp,8
  8152a0:	f800283a 	ret

008152a4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8152a4:	defffa04 	addi	sp,sp,-24
  8152a8:	dfc00515 	stw	ra,20(sp)
  8152ac:	df000415 	stw	fp,16(sp)
  8152b0:	df000404 	addi	fp,sp,16
  8152b4:	e13ffd15 	stw	r4,-12(fp)
  8152b8:	e17ffe15 	stw	r5,-8(fp)
  8152bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8152c0:	e0bffd17 	ldw	r2,-12(fp)
  8152c4:	10800017 	ldw	r2,0(r2)
  8152c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8152cc:	e0bffc17 	ldw	r2,-16(fp)
  8152d0:	10c00a04 	addi	r3,r2,40
  8152d4:	e0bffd17 	ldw	r2,-12(fp)
  8152d8:	10800217 	ldw	r2,8(r2)
  8152dc:	100f883a 	mov	r7,r2
  8152e0:	e1bfff17 	ldw	r6,-4(fp)
  8152e4:	e17ffe17 	ldw	r5,-8(fp)
  8152e8:	1809883a 	mov	r4,r3
  8152ec:	0814bec0 	call	814bec <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8152f0:	e037883a 	mov	sp,fp
  8152f4:	dfc00117 	ldw	ra,4(sp)
  8152f8:	df000017 	ldw	fp,0(sp)
  8152fc:	dec00204 	addi	sp,sp,8
  815300:	f800283a 	ret

00815304 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  815304:	defffa04 	addi	sp,sp,-24
  815308:	dfc00515 	stw	ra,20(sp)
  81530c:	df000415 	stw	fp,16(sp)
  815310:	df000404 	addi	fp,sp,16
  815314:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  815318:	0007883a 	mov	r3,zero
  81531c:	e0bfff17 	ldw	r2,-4(fp)
  815320:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  815324:	e0bfff17 	ldw	r2,-4(fp)
  815328:	10800104 	addi	r2,r2,4
  81532c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815330:	0005303a 	rdctl	r2,status
  815334:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815338:	e0fffd17 	ldw	r3,-12(fp)
  81533c:	00bfff84 	movi	r2,-2
  815340:	1884703a 	and	r2,r3,r2
  815344:	1001703a 	wrctl	status,r2
  
  return context;
  815348:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81534c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  815350:	08136800 	call	813680 <alt_tick>
  815354:	e0bffc17 	ldw	r2,-16(fp)
  815358:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81535c:	e0bffe17 	ldw	r2,-8(fp)
  815360:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  815364:	0001883a 	nop
  815368:	e037883a 	mov	sp,fp
  81536c:	dfc00117 	ldw	ra,4(sp)
  815370:	df000017 	ldw	fp,0(sp)
  815374:	dec00204 	addi	sp,sp,8
  815378:	f800283a 	ret

0081537c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81537c:	defff804 	addi	sp,sp,-32
  815380:	dfc00715 	stw	ra,28(sp)
  815384:	df000615 	stw	fp,24(sp)
  815388:	df000604 	addi	fp,sp,24
  81538c:	e13ffc15 	stw	r4,-16(fp)
  815390:	e17ffd15 	stw	r5,-12(fp)
  815394:	e1bffe15 	stw	r6,-8(fp)
  815398:	e1ffff15 	stw	r7,-4(fp)
  81539c:	e0bfff17 	ldw	r2,-4(fp)
  8153a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8153a4:	d0a75d17 	ldw	r2,-25228(gp)
  8153a8:	1000021e 	bne	r2,zero,8153b4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8153ac:	e0bffb17 	ldw	r2,-20(fp)
  8153b0:	d0a75d15 	stw	r2,-25228(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8153b4:	e0bffc17 	ldw	r2,-16(fp)
  8153b8:	10800104 	addi	r2,r2,4
  8153bc:	00c001c4 	movi	r3,7
  8153c0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8153c4:	d8000015 	stw	zero,0(sp)
  8153c8:	e1fffc17 	ldw	r7,-16(fp)
  8153cc:	01802074 	movhi	r6,129
  8153d0:	3194c104 	addi	r6,r6,21252
  8153d4:	e17ffe17 	ldw	r5,-8(fp)
  8153d8:	e13ffd17 	ldw	r4,-12(fp)
  8153dc:	08161280 	call	816128 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8153e0:	0001883a 	nop
  8153e4:	e037883a 	mov	sp,fp
  8153e8:	dfc00117 	ldw	ra,4(sp)
  8153ec:	df000017 	ldw	fp,0(sp)
  8153f0:	dec00204 	addi	sp,sp,8
  8153f4:	f800283a 	ret

008153f8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8153f8:	defffa04 	addi	sp,sp,-24
  8153fc:	dfc00515 	stw	ra,20(sp)
  815400:	df000415 	stw	fp,16(sp)
  815404:	df000404 	addi	fp,sp,16
  815408:	e13ffd15 	stw	r4,-12(fp)
  81540c:	e17ffe15 	stw	r5,-8(fp)
  815410:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815414:	e0bffd17 	ldw	r2,-12(fp)
  815418:	10800017 	ldw	r2,0(r2)
  81541c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  815420:	e0bffc17 	ldw	r2,-16(fp)
  815424:	10c00a04 	addi	r3,r2,40
  815428:	e0bffd17 	ldw	r2,-12(fp)
  81542c:	10800217 	ldw	r2,8(r2)
  815430:	100f883a 	mov	r7,r2
  815434:	e1bfff17 	ldw	r6,-4(fp)
  815438:	e17ffe17 	ldw	r5,-8(fp)
  81543c:	1809883a 	mov	r4,r3
  815440:	081590c0 	call	81590c <altera_avalon_uart_read>
      fd->fd_flags);
}
  815444:	e037883a 	mov	sp,fp
  815448:	dfc00117 	ldw	ra,4(sp)
  81544c:	df000017 	ldw	fp,0(sp)
  815450:	dec00204 	addi	sp,sp,8
  815454:	f800283a 	ret

00815458 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  815458:	defffa04 	addi	sp,sp,-24
  81545c:	dfc00515 	stw	ra,20(sp)
  815460:	df000415 	stw	fp,16(sp)
  815464:	df000404 	addi	fp,sp,16
  815468:	e13ffd15 	stw	r4,-12(fp)
  81546c:	e17ffe15 	stw	r5,-8(fp)
  815470:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815474:	e0bffd17 	ldw	r2,-12(fp)
  815478:	10800017 	ldw	r2,0(r2)
  81547c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  815480:	e0bffc17 	ldw	r2,-16(fp)
  815484:	10c00a04 	addi	r3,r2,40
  815488:	e0bffd17 	ldw	r2,-12(fp)
  81548c:	10800217 	ldw	r2,8(r2)
  815490:	100f883a 	mov	r7,r2
  815494:	e1bfff17 	ldw	r6,-4(fp)
  815498:	e17ffe17 	ldw	r5,-8(fp)
  81549c:	1809883a 	mov	r4,r3
  8154a0:	0815b240 	call	815b24 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8154a4:	e037883a 	mov	sp,fp
  8154a8:	dfc00117 	ldw	ra,4(sp)
  8154ac:	df000017 	ldw	fp,0(sp)
  8154b0:	dec00204 	addi	sp,sp,8
  8154b4:	f800283a 	ret

008154b8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8154b8:	defffc04 	addi	sp,sp,-16
  8154bc:	dfc00315 	stw	ra,12(sp)
  8154c0:	df000215 	stw	fp,8(sp)
  8154c4:	df000204 	addi	fp,sp,8
  8154c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8154cc:	e0bfff17 	ldw	r2,-4(fp)
  8154d0:	10800017 	ldw	r2,0(r2)
  8154d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8154d8:	e0bffe17 	ldw	r2,-8(fp)
  8154dc:	10c00a04 	addi	r3,r2,40
  8154e0:	e0bfff17 	ldw	r2,-4(fp)
  8154e4:	10800217 	ldw	r2,8(r2)
  8154e8:	100b883a 	mov	r5,r2
  8154ec:	1809883a 	mov	r4,r3
  8154f0:	081587c0 	call	81587c <altera_avalon_uart_close>
}
  8154f4:	e037883a 	mov	sp,fp
  8154f8:	dfc00117 	ldw	ra,4(sp)
  8154fc:	df000017 	ldw	fp,0(sp)
  815500:	dec00204 	addi	sp,sp,8
  815504:	f800283a 	ret

00815508 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  815508:	defff804 	addi	sp,sp,-32
  81550c:	dfc00715 	stw	ra,28(sp)
  815510:	df000615 	stw	fp,24(sp)
  815514:	df000604 	addi	fp,sp,24
  815518:	e13ffd15 	stw	r4,-12(fp)
  81551c:	e17ffe15 	stw	r5,-8(fp)
  815520:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  815524:	e0bffd17 	ldw	r2,-12(fp)
  815528:	10800017 	ldw	r2,0(r2)
  81552c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  815530:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  815534:	1000041e 	bne	r2,zero,815548 <altera_avalon_uart_init+0x40>
  815538:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81553c:	1000021e 	bne	r2,zero,815548 <altera_avalon_uart_init+0x40>
  815540:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  815544:	10000226 	beq	r2,zero,815550 <altera_avalon_uart_init+0x48>
  815548:	00800044 	movi	r2,1
  81554c:	00000106 	br	815554 <altera_avalon_uart_init+0x4c>
  815550:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  815554:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  815558:	e0bffc17 	ldw	r2,-16(fp)
  81555c:	10000f1e 	bne	r2,zero,81559c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  815560:	e0bffd17 	ldw	r2,-12(fp)
  815564:	00c32004 	movi	r3,3200
  815568:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81556c:	e0bffb17 	ldw	r2,-20(fp)
  815570:	10800304 	addi	r2,r2,12
  815574:	e0fffd17 	ldw	r3,-12(fp)
  815578:	18c00117 	ldw	r3,4(r3)
  81557c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  815580:	d8000015 	stw	zero,0(sp)
  815584:	e1fffd17 	ldw	r7,-12(fp)
  815588:	01802074 	movhi	r6,129
  81558c:	31956d04 	addi	r6,r6,21940
  815590:	e17fff17 	ldw	r5,-4(fp)
  815594:	e13ffe17 	ldw	r4,-8(fp)
  815598:	08161280 	call	816128 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  81559c:	0001883a 	nop
  8155a0:	e037883a 	mov	sp,fp
  8155a4:	dfc00117 	ldw	ra,4(sp)
  8155a8:	df000017 	ldw	fp,0(sp)
  8155ac:	dec00204 	addi	sp,sp,8
  8155b0:	f800283a 	ret

008155b4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8155b4:	defffa04 	addi	sp,sp,-24
  8155b8:	dfc00515 	stw	ra,20(sp)
  8155bc:	df000415 	stw	fp,16(sp)
  8155c0:	df000404 	addi	fp,sp,16
  8155c4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8155c8:	e0bfff17 	ldw	r2,-4(fp)
  8155cc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8155d0:	e0bffc17 	ldw	r2,-16(fp)
  8155d4:	10800017 	ldw	r2,0(r2)
  8155d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8155dc:	e0bffd17 	ldw	r2,-12(fp)
  8155e0:	10800204 	addi	r2,r2,8
  8155e4:	10800037 	ldwio	r2,0(r2)
  8155e8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8155ec:	e0bffd17 	ldw	r2,-12(fp)
  8155f0:	10800204 	addi	r2,r2,8
  8155f4:	0007883a 	mov	r3,zero
  8155f8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8155fc:	e0bffd17 	ldw	r2,-12(fp)
  815600:	10800204 	addi	r2,r2,8
  815604:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  815608:	e0bffe17 	ldw	r2,-8(fp)
  81560c:	1080200c 	andi	r2,r2,128
  815610:	10000326 	beq	r2,zero,815620 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  815614:	e17ffe17 	ldw	r5,-8(fp)
  815618:	e13ffc17 	ldw	r4,-16(fp)
  81561c:	08156500 	call	815650 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  815620:	e0bffe17 	ldw	r2,-8(fp)
  815624:	1081100c 	andi	r2,r2,1088
  815628:	10000326 	beq	r2,zero,815638 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  81562c:	e17ffe17 	ldw	r5,-8(fp)
  815630:	e13ffc17 	ldw	r4,-16(fp)
  815634:	08157340 	call	815734 <altera_avalon_uart_txirq>
  }
  

}
  815638:	0001883a 	nop
  81563c:	e037883a 	mov	sp,fp
  815640:	dfc00117 	ldw	ra,4(sp)
  815644:	df000017 	ldw	fp,0(sp)
  815648:	dec00204 	addi	sp,sp,8
  81564c:	f800283a 	ret

00815650 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  815650:	defffc04 	addi	sp,sp,-16
  815654:	df000315 	stw	fp,12(sp)
  815658:	df000304 	addi	fp,sp,12
  81565c:	e13ffe15 	stw	r4,-8(fp)
  815660:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  815664:	e0bfff17 	ldw	r2,-4(fp)
  815668:	108000cc 	andi	r2,r2,3
  81566c:	10002c1e 	bne	r2,zero,815720 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  815670:	e0bffe17 	ldw	r2,-8(fp)
  815674:	10800317 	ldw	r2,12(r2)
  815678:	e0bffe17 	ldw	r2,-8(fp)
  81567c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815680:	e0bffe17 	ldw	r2,-8(fp)
  815684:	10800317 	ldw	r2,12(r2)
  815688:	10800044 	addi	r2,r2,1
  81568c:	10800fcc 	andi	r2,r2,63
  815690:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  815694:	e0bffe17 	ldw	r2,-8(fp)
  815698:	10800317 	ldw	r2,12(r2)
  81569c:	e0fffe17 	ldw	r3,-8(fp)
  8156a0:	18c00017 	ldw	r3,0(r3)
  8156a4:	18c00037 	ldwio	r3,0(r3)
  8156a8:	1809883a 	mov	r4,r3
  8156ac:	e0fffe17 	ldw	r3,-8(fp)
  8156b0:	1885883a 	add	r2,r3,r2
  8156b4:	10800704 	addi	r2,r2,28
  8156b8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8156bc:	e0bffe17 	ldw	r2,-8(fp)
  8156c0:	e0fffd17 	ldw	r3,-12(fp)
  8156c4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8156c8:	e0bffe17 	ldw	r2,-8(fp)
  8156cc:	10800317 	ldw	r2,12(r2)
  8156d0:	10800044 	addi	r2,r2,1
  8156d4:	10800fcc 	andi	r2,r2,63
  8156d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8156dc:	e0bffe17 	ldw	r2,-8(fp)
  8156e0:	10c00217 	ldw	r3,8(r2)
  8156e4:	e0bffd17 	ldw	r2,-12(fp)
  8156e8:	18800e1e 	bne	r3,r2,815724 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8156ec:	e0bffe17 	ldw	r2,-8(fp)
  8156f0:	10c00117 	ldw	r3,4(r2)
  8156f4:	00bfdfc4 	movi	r2,-129
  8156f8:	1886703a 	and	r3,r3,r2
  8156fc:	e0bffe17 	ldw	r2,-8(fp)
  815700:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  815704:	e0bffe17 	ldw	r2,-8(fp)
  815708:	10800017 	ldw	r2,0(r2)
  81570c:	10800304 	addi	r2,r2,12
  815710:	e0fffe17 	ldw	r3,-8(fp)
  815714:	18c00117 	ldw	r3,4(r3)
  815718:	10c00035 	stwio	r3,0(r2)
  81571c:	00000106 	br	815724 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  815720:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  815724:	e037883a 	mov	sp,fp
  815728:	df000017 	ldw	fp,0(sp)
  81572c:	dec00104 	addi	sp,sp,4
  815730:	f800283a 	ret

00815734 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  815734:	defffb04 	addi	sp,sp,-20
  815738:	df000415 	stw	fp,16(sp)
  81573c:	df000404 	addi	fp,sp,16
  815740:	e13ffc15 	stw	r4,-16(fp)
  815744:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  815748:	e0bffc17 	ldw	r2,-16(fp)
  81574c:	10c00417 	ldw	r3,16(r2)
  815750:	e0bffc17 	ldw	r2,-16(fp)
  815754:	10800517 	ldw	r2,20(r2)
  815758:	18803226 	beq	r3,r2,815824 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81575c:	e0bffc17 	ldw	r2,-16(fp)
  815760:	10800617 	ldw	r2,24(r2)
  815764:	1080008c 	andi	r2,r2,2
  815768:	10000326 	beq	r2,zero,815778 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81576c:	e0bffd17 	ldw	r2,-12(fp)
  815770:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  815774:	10001d26 	beq	r2,zero,8157ec <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  815778:	e0bffc17 	ldw	r2,-16(fp)
  81577c:	10800417 	ldw	r2,16(r2)
  815780:	e0bffc17 	ldw	r2,-16(fp)
  815784:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  815788:	e0bffc17 	ldw	r2,-16(fp)
  81578c:	10800017 	ldw	r2,0(r2)
  815790:	10800104 	addi	r2,r2,4
  815794:	e0fffc17 	ldw	r3,-16(fp)
  815798:	18c00417 	ldw	r3,16(r3)
  81579c:	e13ffc17 	ldw	r4,-16(fp)
  8157a0:	20c7883a 	add	r3,r4,r3
  8157a4:	18c01704 	addi	r3,r3,92
  8157a8:	18c00003 	ldbu	r3,0(r3)
  8157ac:	18c03fcc 	andi	r3,r3,255
  8157b0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8157b4:	e0bffc17 	ldw	r2,-16(fp)
  8157b8:	10800417 	ldw	r2,16(r2)
  8157bc:	10800044 	addi	r2,r2,1
  8157c0:	e0fffc17 	ldw	r3,-16(fp)
  8157c4:	18800415 	stw	r2,16(r3)
  8157c8:	10c00fcc 	andi	r3,r2,63
  8157cc:	e0bffc17 	ldw	r2,-16(fp)
  8157d0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8157d4:	e0bffc17 	ldw	r2,-16(fp)
  8157d8:	10800117 	ldw	r2,4(r2)
  8157dc:	10c01014 	ori	r3,r2,64
  8157e0:	e0bffc17 	ldw	r2,-16(fp)
  8157e4:	10c00115 	stw	r3,4(r2)
  8157e8:	00000e06 	br	815824 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8157ec:	e0bffc17 	ldw	r2,-16(fp)
  8157f0:	10800017 	ldw	r2,0(r2)
  8157f4:	10800204 	addi	r2,r2,8
  8157f8:	10800037 	ldwio	r2,0(r2)
  8157fc:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  815800:	e0bffd17 	ldw	r2,-12(fp)
  815804:	1082000c 	andi	r2,r2,2048
  815808:	1000061e 	bne	r2,zero,815824 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81580c:	e0bffc17 	ldw	r2,-16(fp)
  815810:	10c00117 	ldw	r3,4(r2)
  815814:	00bfefc4 	movi	r2,-65
  815818:	1886703a 	and	r3,r3,r2
  81581c:	e0bffc17 	ldw	r2,-16(fp)
  815820:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  815824:	e0bffc17 	ldw	r2,-16(fp)
  815828:	10c00417 	ldw	r3,16(r2)
  81582c:	e0bffc17 	ldw	r2,-16(fp)
  815830:	10800517 	ldw	r2,20(r2)
  815834:	1880061e 	bne	r3,r2,815850 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815838:	e0bffc17 	ldw	r2,-16(fp)
  81583c:	10c00117 	ldw	r3,4(r2)
  815840:	00beefc4 	movi	r2,-1089
  815844:	1886703a 	and	r3,r3,r2
  815848:	e0bffc17 	ldw	r2,-16(fp)
  81584c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815850:	e0bffc17 	ldw	r2,-16(fp)
  815854:	10800017 	ldw	r2,0(r2)
  815858:	10800304 	addi	r2,r2,12
  81585c:	e0fffc17 	ldw	r3,-16(fp)
  815860:	18c00117 	ldw	r3,4(r3)
  815864:	10c00035 	stwio	r3,0(r2)
}
  815868:	0001883a 	nop
  81586c:	e037883a 	mov	sp,fp
  815870:	df000017 	ldw	fp,0(sp)
  815874:	dec00104 	addi	sp,sp,4
  815878:	f800283a 	ret

0081587c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  81587c:	defffd04 	addi	sp,sp,-12
  815880:	df000215 	stw	fp,8(sp)
  815884:	df000204 	addi	fp,sp,8
  815888:	e13ffe15 	stw	r4,-8(fp)
  81588c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  815890:	00000506 	br	8158a8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  815894:	e0bfff17 	ldw	r2,-4(fp)
  815898:	1090000c 	andi	r2,r2,16384
  81589c:	10000226 	beq	r2,zero,8158a8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8158a0:	00bffd44 	movi	r2,-11
  8158a4:	00000606 	br	8158c0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8158a8:	e0bffe17 	ldw	r2,-8(fp)
  8158ac:	10c00417 	ldw	r3,16(r2)
  8158b0:	e0bffe17 	ldw	r2,-8(fp)
  8158b4:	10800517 	ldw	r2,20(r2)
  8158b8:	18bff61e 	bne	r3,r2,815894 <__alt_mem_onchip_mem+0xff80d894>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8158bc:	0005883a 	mov	r2,zero
}
  8158c0:	e037883a 	mov	sp,fp
  8158c4:	df000017 	ldw	fp,0(sp)
  8158c8:	dec00104 	addi	sp,sp,4
  8158cc:	f800283a 	ret

008158d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8158d0:	defffe04 	addi	sp,sp,-8
  8158d4:	dfc00115 	stw	ra,4(sp)
  8158d8:	df000015 	stw	fp,0(sp)
  8158dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8158e0:	d0a00c17 	ldw	r2,-32720(gp)
  8158e4:	10000326 	beq	r2,zero,8158f4 <alt_get_errno+0x24>
  8158e8:	d0a00c17 	ldw	r2,-32720(gp)
  8158ec:	103ee83a 	callr	r2
  8158f0:	00000106 	br	8158f8 <alt_get_errno+0x28>
  8158f4:	d0a75204 	addi	r2,gp,-25272
}
  8158f8:	e037883a 	mov	sp,fp
  8158fc:	dfc00117 	ldw	ra,4(sp)
  815900:	df000017 	ldw	fp,0(sp)
  815904:	dec00204 	addi	sp,sp,8
  815908:	f800283a 	ret

0081590c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  81590c:	defff204 	addi	sp,sp,-56
  815910:	dfc00d15 	stw	ra,52(sp)
  815914:	df000c15 	stw	fp,48(sp)
  815918:	df000c04 	addi	fp,sp,48
  81591c:	e13ffc15 	stw	r4,-16(fp)
  815920:	e17ffd15 	stw	r5,-12(fp)
  815924:	e1bffe15 	stw	r6,-8(fp)
  815928:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  81592c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  815930:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  815934:	e0bfff17 	ldw	r2,-4(fp)
  815938:	1090000c 	andi	r2,r2,16384
  81593c:	1005003a 	cmpeq	r2,r2,zero
  815940:	10803fcc 	andi	r2,r2,255
  815944:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  815948:	00001306 	br	815998 <altera_avalon_uart_read+0x8c>
    {
      count++;
  81594c:	e0bff517 	ldw	r2,-44(fp)
  815950:	10800044 	addi	r2,r2,1
  815954:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  815958:	e0bffd17 	ldw	r2,-12(fp)
  81595c:	10c00044 	addi	r3,r2,1
  815960:	e0fffd15 	stw	r3,-12(fp)
  815964:	e0fffc17 	ldw	r3,-16(fp)
  815968:	18c00217 	ldw	r3,8(r3)
  81596c:	e13ffc17 	ldw	r4,-16(fp)
  815970:	20c7883a 	add	r3,r4,r3
  815974:	18c00704 	addi	r3,r3,28
  815978:	18c00003 	ldbu	r3,0(r3)
  81597c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  815980:	e0bffc17 	ldw	r2,-16(fp)
  815984:	10800217 	ldw	r2,8(r2)
  815988:	10800044 	addi	r2,r2,1
  81598c:	10c00fcc 	andi	r3,r2,63
  815990:	e0bffc17 	ldw	r2,-16(fp)
  815994:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  815998:	e0fff517 	ldw	r3,-44(fp)
  81599c:	e0bffe17 	ldw	r2,-8(fp)
  8159a0:	1880050e 	bge	r3,r2,8159b8 <altera_avalon_uart_read+0xac>
  8159a4:	e0bffc17 	ldw	r2,-16(fp)
  8159a8:	10c00217 	ldw	r3,8(r2)
  8159ac:	e0bffc17 	ldw	r2,-16(fp)
  8159b0:	10800317 	ldw	r2,12(r2)
  8159b4:	18bfe51e 	bne	r3,r2,81594c <__alt_mem_onchip_mem+0xff80d94c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8159b8:	e0bff517 	ldw	r2,-44(fp)
  8159bc:	1000251e 	bne	r2,zero,815a54 <altera_avalon_uart_read+0x148>
  8159c0:	e0bffc17 	ldw	r2,-16(fp)
  8159c4:	10c00217 	ldw	r3,8(r2)
  8159c8:	e0bffc17 	ldw	r2,-16(fp)
  8159cc:	10800317 	ldw	r2,12(r2)
  8159d0:	1880201e 	bne	r3,r2,815a54 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  8159d4:	e0bff617 	ldw	r2,-40(fp)
  8159d8:	1000071e 	bne	r2,zero,8159f8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8159dc:	08158d00 	call	8158d0 <alt_get_errno>
  8159e0:	1007883a 	mov	r3,r2
  8159e4:	008002c4 	movi	r2,11
  8159e8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  8159ec:	00800044 	movi	r2,1
  8159f0:	e0bff405 	stb	r2,-48(fp)
        break;
  8159f4:	00001b06 	br	815a64 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8159f8:	0005303a 	rdctl	r2,status
  8159fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a00:	e0fff917 	ldw	r3,-28(fp)
  815a04:	00bfff84 	movi	r2,-2
  815a08:	1884703a 	and	r2,r3,r2
  815a0c:	1001703a 	wrctl	status,r2
  
  return context;
  815a10:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  815a14:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  815a18:	e0bffc17 	ldw	r2,-16(fp)
  815a1c:	10800117 	ldw	r2,4(r2)
  815a20:	10c02014 	ori	r3,r2,128
  815a24:	e0bffc17 	ldw	r2,-16(fp)
  815a28:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815a2c:	e0bffc17 	ldw	r2,-16(fp)
  815a30:	10800017 	ldw	r2,0(r2)
  815a34:	10800304 	addi	r2,r2,12
  815a38:	e0fffc17 	ldw	r3,-16(fp)
  815a3c:	18c00117 	ldw	r3,4(r3)
  815a40:	10c00035 	stwio	r3,0(r2)
  815a44:	e0bff817 	ldw	r2,-32(fp)
  815a48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815a4c:	e0bffa17 	ldw	r2,-24(fp)
  815a50:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  815a54:	e0bff517 	ldw	r2,-44(fp)
  815a58:	1000021e 	bne	r2,zero,815a64 <altera_avalon_uart_read+0x158>
  815a5c:	e0bffe17 	ldw	r2,-8(fp)
  815a60:	103fcd1e 	bne	r2,zero,815998 <__alt_mem_onchip_mem+0xff80d998>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815a64:	0005303a 	rdctl	r2,status
  815a68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a6c:	e0fffb17 	ldw	r3,-20(fp)
  815a70:	00bfff84 	movi	r2,-2
  815a74:	1884703a 	and	r2,r3,r2
  815a78:	1001703a 	wrctl	status,r2
  
  return context;
  815a7c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  815a80:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  815a84:	e0bffc17 	ldw	r2,-16(fp)
  815a88:	10800117 	ldw	r2,4(r2)
  815a8c:	10c02014 	ori	r3,r2,128
  815a90:	e0bffc17 	ldw	r2,-16(fp)
  815a94:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815a98:	e0bffc17 	ldw	r2,-16(fp)
  815a9c:	10800017 	ldw	r2,0(r2)
  815aa0:	10800304 	addi	r2,r2,12
  815aa4:	e0fffc17 	ldw	r3,-16(fp)
  815aa8:	18c00117 	ldw	r3,4(r3)
  815aac:	10c00035 	stwio	r3,0(r2)
  815ab0:	e0bff817 	ldw	r2,-32(fp)
  815ab4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815ab8:	e0bff717 	ldw	r2,-36(fp)
  815abc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  815ac0:	e0bff403 	ldbu	r2,-48(fp)
  815ac4:	10000226 	beq	r2,zero,815ad0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  815ac8:	00bffd44 	movi	r2,-11
  815acc:	00000106 	br	815ad4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  815ad0:	e0bff517 	ldw	r2,-44(fp)
  }
}
  815ad4:	e037883a 	mov	sp,fp
  815ad8:	dfc00117 	ldw	ra,4(sp)
  815adc:	df000017 	ldw	fp,0(sp)
  815ae0:	dec00204 	addi	sp,sp,8
  815ae4:	f800283a 	ret

00815ae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815ae8:	defffe04 	addi	sp,sp,-8
  815aec:	dfc00115 	stw	ra,4(sp)
  815af0:	df000015 	stw	fp,0(sp)
  815af4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  815af8:	d0a00c17 	ldw	r2,-32720(gp)
  815afc:	10000326 	beq	r2,zero,815b0c <alt_get_errno+0x24>
  815b00:	d0a00c17 	ldw	r2,-32720(gp)
  815b04:	103ee83a 	callr	r2
  815b08:	00000106 	br	815b10 <alt_get_errno+0x28>
  815b0c:	d0a75204 	addi	r2,gp,-25272
}
  815b10:	e037883a 	mov	sp,fp
  815b14:	dfc00117 	ldw	ra,4(sp)
  815b18:	df000017 	ldw	fp,0(sp)
  815b1c:	dec00204 	addi	sp,sp,8
  815b20:	f800283a 	ret

00815b24 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  815b24:	defff204 	addi	sp,sp,-56
  815b28:	dfc00d15 	stw	ra,52(sp)
  815b2c:	df000c15 	stw	fp,48(sp)
  815b30:	df000c04 	addi	fp,sp,48
  815b34:	e13ffc15 	stw	r4,-16(fp)
  815b38:	e17ffd15 	stw	r5,-12(fp)
  815b3c:	e1bffe15 	stw	r6,-8(fp)
  815b40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  815b44:	e0bffe17 	ldw	r2,-8(fp)
  815b48:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  815b4c:	e0bfff17 	ldw	r2,-4(fp)
  815b50:	1090000c 	andi	r2,r2,16384
  815b54:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  815b58:	00003c06 	br	815c4c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815b5c:	e0bffc17 	ldw	r2,-16(fp)
  815b60:	10800517 	ldw	r2,20(r2)
  815b64:	10800044 	addi	r2,r2,1
  815b68:	10800fcc 	andi	r2,r2,63
  815b6c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  815b70:	e0bffc17 	ldw	r2,-16(fp)
  815b74:	10c00417 	ldw	r3,16(r2)
  815b78:	e0bff717 	ldw	r2,-36(fp)
  815b7c:	1880221e 	bne	r3,r2,815c08 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  815b80:	e0bff517 	ldw	r2,-44(fp)
  815b84:	10000526 	beq	r2,zero,815b9c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  815b88:	0815ae80 	call	815ae8 <alt_get_errno>
  815b8c:	1007883a 	mov	r3,r2
  815b90:	008002c4 	movi	r2,11
  815b94:	18800015 	stw	r2,0(r3)
        break;
  815b98:	00002e06 	br	815c54 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815b9c:	0005303a 	rdctl	r2,status
  815ba0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815ba4:	e0fff917 	ldw	r3,-28(fp)
  815ba8:	00bfff84 	movi	r2,-2
  815bac:	1884703a 	and	r2,r3,r2
  815bb0:	1001703a 	wrctl	status,r2
  
  return context;
  815bb4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  815bb8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815bbc:	e0bffc17 	ldw	r2,-16(fp)
  815bc0:	10800117 	ldw	r2,4(r2)
  815bc4:	10c11014 	ori	r3,r2,1088
  815bc8:	e0bffc17 	ldw	r2,-16(fp)
  815bcc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815bd0:	e0bffc17 	ldw	r2,-16(fp)
  815bd4:	10800017 	ldw	r2,0(r2)
  815bd8:	10800304 	addi	r2,r2,12
  815bdc:	e0fffc17 	ldw	r3,-16(fp)
  815be0:	18c00117 	ldw	r3,4(r3)
  815be4:	10c00035 	stwio	r3,0(r2)
  815be8:	e0bff817 	ldw	r2,-32(fp)
  815bec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815bf0:	e0bff617 	ldw	r2,-40(fp)
  815bf4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  815bf8:	e0bffc17 	ldw	r2,-16(fp)
  815bfc:	10c00417 	ldw	r3,16(r2)
  815c00:	e0bff717 	ldw	r2,-36(fp)
  815c04:	18bffc26 	beq	r3,r2,815bf8 <__alt_mem_onchip_mem+0xff80dbf8>
      }
    }

    count--;
  815c08:	e0bff417 	ldw	r2,-48(fp)
  815c0c:	10bfffc4 	addi	r2,r2,-1
  815c10:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  815c14:	e0bffc17 	ldw	r2,-16(fp)
  815c18:	10c00517 	ldw	r3,20(r2)
  815c1c:	e0bffd17 	ldw	r2,-12(fp)
  815c20:	11000044 	addi	r4,r2,1
  815c24:	e13ffd15 	stw	r4,-12(fp)
  815c28:	10800003 	ldbu	r2,0(r2)
  815c2c:	1009883a 	mov	r4,r2
  815c30:	e0bffc17 	ldw	r2,-16(fp)
  815c34:	10c5883a 	add	r2,r2,r3
  815c38:	10801704 	addi	r2,r2,92
  815c3c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  815c40:	e0bffc17 	ldw	r2,-16(fp)
  815c44:	e0fff717 	ldw	r3,-36(fp)
  815c48:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  815c4c:	e0bff417 	ldw	r2,-48(fp)
  815c50:	103fc21e 	bne	r2,zero,815b5c <__alt_mem_onchip_mem+0xff80db5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815c54:	0005303a 	rdctl	r2,status
  815c58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815c5c:	e0fffb17 	ldw	r3,-20(fp)
  815c60:	00bfff84 	movi	r2,-2
  815c64:	1884703a 	and	r2,r3,r2
  815c68:	1001703a 	wrctl	status,r2
  
  return context;
  815c6c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  815c70:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815c74:	e0bffc17 	ldw	r2,-16(fp)
  815c78:	10800117 	ldw	r2,4(r2)
  815c7c:	10c11014 	ori	r3,r2,1088
  815c80:	e0bffc17 	ldw	r2,-16(fp)
  815c84:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815c88:	e0bffc17 	ldw	r2,-16(fp)
  815c8c:	10800017 	ldw	r2,0(r2)
  815c90:	10800304 	addi	r2,r2,12
  815c94:	e0fffc17 	ldw	r3,-16(fp)
  815c98:	18c00117 	ldw	r3,4(r3)
  815c9c:	10c00035 	stwio	r3,0(r2)
  815ca0:	e0bff817 	ldw	r2,-32(fp)
  815ca4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815ca8:	e0bffa17 	ldw	r2,-24(fp)
  815cac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  815cb0:	e0fffe17 	ldw	r3,-8(fp)
  815cb4:	e0bff417 	ldw	r2,-48(fp)
  815cb8:	1885c83a 	sub	r2,r3,r2
}
  815cbc:	e037883a 	mov	sp,fp
  815cc0:	dfc00117 	ldw	ra,4(sp)
  815cc4:	df000017 	ldw	fp,0(sp)
  815cc8:	dec00204 	addi	sp,sp,8
  815ccc:	f800283a 	ret

00815cd0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  815cd0:	defffe04 	addi	sp,sp,-8
  815cd4:	df000115 	stw	fp,4(sp)
  815cd8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  815cdc:	e03fff15 	stw	zero,-4(fp)
  815ce0:	00000506 	br	815cf8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  815ce4:	e0bfff17 	ldw	r2,-4(fp)
  815ce8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  815cec:	e0bfff17 	ldw	r2,-4(fp)
  815cf0:	10800804 	addi	r2,r2,32
  815cf4:	e0bfff15 	stw	r2,-4(fp)
  815cf8:	e0bfff17 	ldw	r2,-4(fp)
  815cfc:	10820030 	cmpltui	r2,r2,2048
  815d00:	103ff81e 	bne	r2,zero,815ce4 <__alt_mem_onchip_mem+0xff80dce4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  815d04:	0001883a 	nop
  815d08:	e037883a 	mov	sp,fp
  815d0c:	df000017 	ldw	fp,0(sp)
  815d10:	dec00104 	addi	sp,sp,4
  815d14:	f800283a 	ret

00815d18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815d18:	defffe04 	addi	sp,sp,-8
  815d1c:	dfc00115 	stw	ra,4(sp)
  815d20:	df000015 	stw	fp,0(sp)
  815d24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  815d28:	d0a00c17 	ldw	r2,-32720(gp)
  815d2c:	10000326 	beq	r2,zero,815d3c <alt_get_errno+0x24>
  815d30:	d0a00c17 	ldw	r2,-32720(gp)
  815d34:	103ee83a 	callr	r2
  815d38:	00000106 	br	815d40 <alt_get_errno+0x28>
  815d3c:	d0a75204 	addi	r2,gp,-25272
}
  815d40:	e037883a 	mov	sp,fp
  815d44:	dfc00117 	ldw	ra,4(sp)
  815d48:	df000017 	ldw	fp,0(sp)
  815d4c:	dec00204 	addi	sp,sp,8
  815d50:	f800283a 	ret

00815d54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  815d54:	defffa04 	addi	sp,sp,-24
  815d58:	dfc00515 	stw	ra,20(sp)
  815d5c:	df000415 	stw	fp,16(sp)
  815d60:	df000404 	addi	fp,sp,16
  815d64:	e13ffe15 	stw	r4,-8(fp)
  815d68:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  815d6c:	e0bffe17 	ldw	r2,-8(fp)
  815d70:	10000326 	beq	r2,zero,815d80 <alt_dev_llist_insert+0x2c>
  815d74:	e0bffe17 	ldw	r2,-8(fp)
  815d78:	10800217 	ldw	r2,8(r2)
  815d7c:	1000061e 	bne	r2,zero,815d98 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  815d80:	0815d180 	call	815d18 <alt_get_errno>
  815d84:	1007883a 	mov	r3,r2
  815d88:	00800584 	movi	r2,22
  815d8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  815d90:	00bffa84 	movi	r2,-22
  815d94:	00001306 	br	815de4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  815d98:	e0bffe17 	ldw	r2,-8(fp)
  815d9c:	e0ffff17 	ldw	r3,-4(fp)
  815da0:	e0fffc15 	stw	r3,-16(fp)
  815da4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  815da8:	e0bffd17 	ldw	r2,-12(fp)
  815dac:	e0fffc17 	ldw	r3,-16(fp)
  815db0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  815db4:	e0bffc17 	ldw	r2,-16(fp)
  815db8:	10c00017 	ldw	r3,0(r2)
  815dbc:	e0bffd17 	ldw	r2,-12(fp)
  815dc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  815dc4:	e0bffc17 	ldw	r2,-16(fp)
  815dc8:	10800017 	ldw	r2,0(r2)
  815dcc:	e0fffd17 	ldw	r3,-12(fp)
  815dd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  815dd4:	e0bffc17 	ldw	r2,-16(fp)
  815dd8:	e0fffd17 	ldw	r3,-12(fp)
  815ddc:	10c00015 	stw	r3,0(r2)

  return 0;  
  815de0:	0005883a 	mov	r2,zero
}
  815de4:	e037883a 	mov	sp,fp
  815de8:	dfc00117 	ldw	ra,4(sp)
  815dec:	df000017 	ldw	fp,0(sp)
  815df0:	dec00204 	addi	sp,sp,8
  815df4:	f800283a 	ret

00815df8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  815df8:	defffd04 	addi	sp,sp,-12
  815dfc:	dfc00215 	stw	ra,8(sp)
  815e00:	df000115 	stw	fp,4(sp)
  815e04:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  815e08:	00802074 	movhi	r2,129
  815e0c:	109adc04 	addi	r2,r2,27504
  815e10:	e0bfff15 	stw	r2,-4(fp)
  815e14:	00000606 	br	815e30 <_do_ctors+0x38>
        (*ctor) (); 
  815e18:	e0bfff17 	ldw	r2,-4(fp)
  815e1c:	10800017 	ldw	r2,0(r2)
  815e20:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  815e24:	e0bfff17 	ldw	r2,-4(fp)
  815e28:	10bfff04 	addi	r2,r2,-4
  815e2c:	e0bfff15 	stw	r2,-4(fp)
  815e30:	e0ffff17 	ldw	r3,-4(fp)
  815e34:	00802074 	movhi	r2,129
  815e38:	109add04 	addi	r2,r2,27508
  815e3c:	18bff62e 	bgeu	r3,r2,815e18 <__alt_mem_onchip_mem+0xff80de18>
        (*ctor) (); 
}
  815e40:	0001883a 	nop
  815e44:	e037883a 	mov	sp,fp
  815e48:	dfc00117 	ldw	ra,4(sp)
  815e4c:	df000017 	ldw	fp,0(sp)
  815e50:	dec00204 	addi	sp,sp,8
  815e54:	f800283a 	ret

00815e58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  815e58:	defffd04 	addi	sp,sp,-12
  815e5c:	dfc00215 	stw	ra,8(sp)
  815e60:	df000115 	stw	fp,4(sp)
  815e64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  815e68:	00802074 	movhi	r2,129
  815e6c:	109adc04 	addi	r2,r2,27504
  815e70:	e0bfff15 	stw	r2,-4(fp)
  815e74:	00000606 	br	815e90 <_do_dtors+0x38>
        (*dtor) (); 
  815e78:	e0bfff17 	ldw	r2,-4(fp)
  815e7c:	10800017 	ldw	r2,0(r2)
  815e80:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  815e84:	e0bfff17 	ldw	r2,-4(fp)
  815e88:	10bfff04 	addi	r2,r2,-4
  815e8c:	e0bfff15 	stw	r2,-4(fp)
  815e90:	e0ffff17 	ldw	r3,-4(fp)
  815e94:	00802074 	movhi	r2,129
  815e98:	109add04 	addi	r2,r2,27508
  815e9c:	18bff62e 	bgeu	r3,r2,815e78 <__alt_mem_onchip_mem+0xff80de78>
        (*dtor) (); 
}
  815ea0:	0001883a 	nop
  815ea4:	e037883a 	mov	sp,fp
  815ea8:	dfc00117 	ldw	ra,4(sp)
  815eac:	df000017 	ldw	fp,0(sp)
  815eb0:	dec00204 	addi	sp,sp,8
  815eb4:	f800283a 	ret

00815eb8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  815eb8:	defffa04 	addi	sp,sp,-24
  815ebc:	dfc00515 	stw	ra,20(sp)
  815ec0:	df000415 	stw	fp,16(sp)
  815ec4:	df000404 	addi	fp,sp,16
  815ec8:	e13ffe15 	stw	r4,-8(fp)
  815ecc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  815ed0:	e0bfff17 	ldw	r2,-4(fp)
  815ed4:	10800017 	ldw	r2,0(r2)
  815ed8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  815edc:	e13ffe17 	ldw	r4,-8(fp)
  815ee0:	08082840 	call	808284 <strlen>
  815ee4:	10800044 	addi	r2,r2,1
  815ee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  815eec:	00000d06 	br	815f24 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  815ef0:	e0bffc17 	ldw	r2,-16(fp)
  815ef4:	10800217 	ldw	r2,8(r2)
  815ef8:	e0fffd17 	ldw	r3,-12(fp)
  815efc:	180d883a 	mov	r6,r3
  815f00:	e17ffe17 	ldw	r5,-8(fp)
  815f04:	1009883a 	mov	r4,r2
  815f08:	081682c0 	call	81682c <memcmp>
  815f0c:	1000021e 	bne	r2,zero,815f18 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  815f10:	e0bffc17 	ldw	r2,-16(fp)
  815f14:	00000706 	br	815f34 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  815f18:	e0bffc17 	ldw	r2,-16(fp)
  815f1c:	10800017 	ldw	r2,0(r2)
  815f20:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  815f24:	e0fffc17 	ldw	r3,-16(fp)
  815f28:	e0bfff17 	ldw	r2,-4(fp)
  815f2c:	18bff01e 	bne	r3,r2,815ef0 <__alt_mem_onchip_mem+0xff80def0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  815f30:	0005883a 	mov	r2,zero
}
  815f34:	e037883a 	mov	sp,fp
  815f38:	dfc00117 	ldw	ra,4(sp)
  815f3c:	df000017 	ldw	fp,0(sp)
  815f40:	dec00204 	addi	sp,sp,8
  815f44:	f800283a 	ret

00815f48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  815f48:	defffb04 	addi	sp,sp,-20
  815f4c:	dfc00415 	stw	ra,16(sp)
  815f50:	df000315 	stw	fp,12(sp)
  815f54:	df000304 	addi	fp,sp,12
  815f58:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  815f5c:	d0a00717 	ldw	r2,-32740(gp)
  815f60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  815f64:	00003106 	br	81602c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  815f68:	e0bffd17 	ldw	r2,-12(fp)
  815f6c:	10800217 	ldw	r2,8(r2)
  815f70:	1009883a 	mov	r4,r2
  815f74:	08082840 	call	808284 <strlen>
  815f78:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  815f7c:	e0bffd17 	ldw	r2,-12(fp)
  815f80:	10c00217 	ldw	r3,8(r2)
  815f84:	e0bffe17 	ldw	r2,-8(fp)
  815f88:	10bfffc4 	addi	r2,r2,-1
  815f8c:	1885883a 	add	r2,r3,r2
  815f90:	10800003 	ldbu	r2,0(r2)
  815f94:	10803fcc 	andi	r2,r2,255
  815f98:	1080201c 	xori	r2,r2,128
  815f9c:	10bfe004 	addi	r2,r2,-128
  815fa0:	10800bd8 	cmpnei	r2,r2,47
  815fa4:	1000031e 	bne	r2,zero,815fb4 <alt_find_file+0x6c>
    {
      len -= 1;
  815fa8:	e0bffe17 	ldw	r2,-8(fp)
  815fac:	10bfffc4 	addi	r2,r2,-1
  815fb0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  815fb4:	e0bffe17 	ldw	r2,-8(fp)
  815fb8:	e0ffff17 	ldw	r3,-4(fp)
  815fbc:	1885883a 	add	r2,r3,r2
  815fc0:	10800003 	ldbu	r2,0(r2)
  815fc4:	10803fcc 	andi	r2,r2,255
  815fc8:	1080201c 	xori	r2,r2,128
  815fcc:	10bfe004 	addi	r2,r2,-128
  815fd0:	10800be0 	cmpeqi	r2,r2,47
  815fd4:	1000081e 	bne	r2,zero,815ff8 <alt_find_file+0xb0>
  815fd8:	e0bffe17 	ldw	r2,-8(fp)
  815fdc:	e0ffff17 	ldw	r3,-4(fp)
  815fe0:	1885883a 	add	r2,r3,r2
  815fe4:	10800003 	ldbu	r2,0(r2)
  815fe8:	10803fcc 	andi	r2,r2,255
  815fec:	1080201c 	xori	r2,r2,128
  815ff0:	10bfe004 	addi	r2,r2,-128
  815ff4:	10000a1e 	bne	r2,zero,816020 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  815ff8:	e0bffd17 	ldw	r2,-12(fp)
  815ffc:	10800217 	ldw	r2,8(r2)
  816000:	e0fffe17 	ldw	r3,-8(fp)
  816004:	180d883a 	mov	r6,r3
  816008:	e17fff17 	ldw	r5,-4(fp)
  81600c:	1009883a 	mov	r4,r2
  816010:	081682c0 	call	81682c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  816014:	1000021e 	bne	r2,zero,816020 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  816018:	e0bffd17 	ldw	r2,-12(fp)
  81601c:	00000706 	br	81603c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  816020:	e0bffd17 	ldw	r2,-12(fp)
  816024:	10800017 	ldw	r2,0(r2)
  816028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81602c:	e0fffd17 	ldw	r3,-12(fp)
  816030:	d0a00704 	addi	r2,gp,-32740
  816034:	18bfcc1e 	bne	r3,r2,815f68 <__alt_mem_onchip_mem+0xff80df68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  816038:	0005883a 	mov	r2,zero
}
  81603c:	e037883a 	mov	sp,fp
  816040:	dfc00117 	ldw	ra,4(sp)
  816044:	df000017 	ldw	fp,0(sp)
  816048:	dec00204 	addi	sp,sp,8
  81604c:	f800283a 	ret

00816050 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  816050:	defffc04 	addi	sp,sp,-16
  816054:	df000315 	stw	fp,12(sp)
  816058:	df000304 	addi	fp,sp,12
  81605c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  816060:	00bffa04 	movi	r2,-24
  816064:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  816068:	e03ffd15 	stw	zero,-12(fp)
  81606c:	00001906 	br	8160d4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  816070:	00802074 	movhi	r2,129
  816074:	109ea104 	addi	r2,r2,31364
  816078:	e0fffd17 	ldw	r3,-12(fp)
  81607c:	18c00324 	muli	r3,r3,12
  816080:	10c5883a 	add	r2,r2,r3
  816084:	10800017 	ldw	r2,0(r2)
  816088:	10000f1e 	bne	r2,zero,8160c8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  81608c:	00802074 	movhi	r2,129
  816090:	109ea104 	addi	r2,r2,31364
  816094:	e0fffd17 	ldw	r3,-12(fp)
  816098:	18c00324 	muli	r3,r3,12
  81609c:	10c5883a 	add	r2,r2,r3
  8160a0:	e0ffff17 	ldw	r3,-4(fp)
  8160a4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8160a8:	d0e00b17 	ldw	r3,-32724(gp)
  8160ac:	e0bffd17 	ldw	r2,-12(fp)
  8160b0:	1880020e 	bge	r3,r2,8160bc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8160b4:	e0bffd17 	ldw	r2,-12(fp)
  8160b8:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
  8160bc:	e0bffd17 	ldw	r2,-12(fp)
  8160c0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8160c4:	00000606 	br	8160e0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8160c8:	e0bffd17 	ldw	r2,-12(fp)
  8160cc:	10800044 	addi	r2,r2,1
  8160d0:	e0bffd15 	stw	r2,-12(fp)
  8160d4:	e0bffd17 	ldw	r2,-12(fp)
  8160d8:	10800810 	cmplti	r2,r2,32
  8160dc:	103fe41e 	bne	r2,zero,816070 <__alt_mem_onchip_mem+0xff80e070>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8160e0:	e0bffe17 	ldw	r2,-8(fp)
}
  8160e4:	e037883a 	mov	sp,fp
  8160e8:	df000017 	ldw	fp,0(sp)
  8160ec:	dec00104 	addi	sp,sp,4
  8160f0:	f800283a 	ret

008160f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8160f4:	defffe04 	addi	sp,sp,-8
  8160f8:	dfc00115 	stw	ra,4(sp)
  8160fc:	df000015 	stw	fp,0(sp)
  816100:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  816104:	01440004 	movi	r5,4096
  816108:	0009883a 	mov	r4,zero
  81610c:	08166b40 	call	8166b4 <alt_icache_flush>
#endif
}
  816110:	0001883a 	nop
  816114:	e037883a 	mov	sp,fp
  816118:	dfc00117 	ldw	ra,4(sp)
  81611c:	df000017 	ldw	fp,0(sp)
  816120:	dec00204 	addi	sp,sp,8
  816124:	f800283a 	ret

00816128 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  816128:	defff904 	addi	sp,sp,-28
  81612c:	dfc00615 	stw	ra,24(sp)
  816130:	df000515 	stw	fp,20(sp)
  816134:	df000504 	addi	fp,sp,20
  816138:	e13ffc15 	stw	r4,-16(fp)
  81613c:	e17ffd15 	stw	r5,-12(fp)
  816140:	e1bffe15 	stw	r6,-8(fp)
  816144:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  816148:	e0800217 	ldw	r2,8(fp)
  81614c:	d8800015 	stw	r2,0(sp)
  816150:	e1ffff17 	ldw	r7,-4(fp)
  816154:	e1bffe17 	ldw	r6,-8(fp)
  816158:	e17ffd17 	ldw	r5,-12(fp)
  81615c:	e13ffc17 	ldw	r4,-16(fp)
  816160:	08162d80 	call	8162d8 <alt_iic_isr_register>
}  
  816164:	e037883a 	mov	sp,fp
  816168:	dfc00117 	ldw	ra,4(sp)
  81616c:	df000017 	ldw	fp,0(sp)
  816170:	dec00204 	addi	sp,sp,8
  816174:	f800283a 	ret

00816178 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  816178:	defff904 	addi	sp,sp,-28
  81617c:	df000615 	stw	fp,24(sp)
  816180:	df000604 	addi	fp,sp,24
  816184:	e13ffe15 	stw	r4,-8(fp)
  816188:	e17fff15 	stw	r5,-4(fp)
  81618c:	e0bfff17 	ldw	r2,-4(fp)
  816190:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816194:	0005303a 	rdctl	r2,status
  816198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81619c:	e0fffb17 	ldw	r3,-20(fp)
  8161a0:	00bfff84 	movi	r2,-2
  8161a4:	1884703a 	and	r2,r3,r2
  8161a8:	1001703a 	wrctl	status,r2
  
  return context;
  8161ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8161b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8161b4:	00c00044 	movi	r3,1
  8161b8:	e0bffa17 	ldw	r2,-24(fp)
  8161bc:	1884983a 	sll	r2,r3,r2
  8161c0:	1007883a 	mov	r3,r2
  8161c4:	d0a75917 	ldw	r2,-25244(gp)
  8161c8:	1884b03a 	or	r2,r3,r2
  8161cc:	d0a75915 	stw	r2,-25244(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8161d0:	d0a75917 	ldw	r2,-25244(gp)
  8161d4:	100170fa 	wrctl	ienable,r2
  8161d8:	e0bffc17 	ldw	r2,-16(fp)
  8161dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8161e0:	e0bffd17 	ldw	r2,-12(fp)
  8161e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8161e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8161ec:	0001883a 	nop
}
  8161f0:	e037883a 	mov	sp,fp
  8161f4:	df000017 	ldw	fp,0(sp)
  8161f8:	dec00104 	addi	sp,sp,4
  8161fc:	f800283a 	ret

00816200 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  816200:	defff904 	addi	sp,sp,-28
  816204:	df000615 	stw	fp,24(sp)
  816208:	df000604 	addi	fp,sp,24
  81620c:	e13ffe15 	stw	r4,-8(fp)
  816210:	e17fff15 	stw	r5,-4(fp)
  816214:	e0bfff17 	ldw	r2,-4(fp)
  816218:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81621c:	0005303a 	rdctl	r2,status
  816220:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816224:	e0fffb17 	ldw	r3,-20(fp)
  816228:	00bfff84 	movi	r2,-2
  81622c:	1884703a 	and	r2,r3,r2
  816230:	1001703a 	wrctl	status,r2
  
  return context;
  816234:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  816238:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  81623c:	00c00044 	movi	r3,1
  816240:	e0bffa17 	ldw	r2,-24(fp)
  816244:	1884983a 	sll	r2,r3,r2
  816248:	0084303a 	nor	r2,zero,r2
  81624c:	1007883a 	mov	r3,r2
  816250:	d0a75917 	ldw	r2,-25244(gp)
  816254:	1884703a 	and	r2,r3,r2
  816258:	d0a75915 	stw	r2,-25244(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81625c:	d0a75917 	ldw	r2,-25244(gp)
  816260:	100170fa 	wrctl	ienable,r2
  816264:	e0bffc17 	ldw	r2,-16(fp)
  816268:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81626c:	e0bffd17 	ldw	r2,-12(fp)
  816270:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  816274:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  816278:	0001883a 	nop
}
  81627c:	e037883a 	mov	sp,fp
  816280:	df000017 	ldw	fp,0(sp)
  816284:	dec00104 	addi	sp,sp,4
  816288:	f800283a 	ret

0081628c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81628c:	defffc04 	addi	sp,sp,-16
  816290:	df000315 	stw	fp,12(sp)
  816294:	df000304 	addi	fp,sp,12
  816298:	e13ffe15 	stw	r4,-8(fp)
  81629c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8162a0:	000530fa 	rdctl	r2,ienable
  8162a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8162a8:	00c00044 	movi	r3,1
  8162ac:	e0bfff17 	ldw	r2,-4(fp)
  8162b0:	1884983a 	sll	r2,r3,r2
  8162b4:	1007883a 	mov	r3,r2
  8162b8:	e0bffd17 	ldw	r2,-12(fp)
  8162bc:	1884703a 	and	r2,r3,r2
  8162c0:	1004c03a 	cmpne	r2,r2,zero
  8162c4:	10803fcc 	andi	r2,r2,255
}
  8162c8:	e037883a 	mov	sp,fp
  8162cc:	df000017 	ldw	fp,0(sp)
  8162d0:	dec00104 	addi	sp,sp,4
  8162d4:	f800283a 	ret

008162d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8162d8:	defff504 	addi	sp,sp,-44
  8162dc:	dfc00a15 	stw	ra,40(sp)
  8162e0:	df000915 	stw	fp,36(sp)
  8162e4:	df000904 	addi	fp,sp,36
  8162e8:	e13ffc15 	stw	r4,-16(fp)
  8162ec:	e17ffd15 	stw	r5,-12(fp)
  8162f0:	e1bffe15 	stw	r6,-8(fp)
  8162f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8162f8:	00bffa84 	movi	r2,-22
  8162fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  816300:	e0bffd17 	ldw	r2,-12(fp)
  816304:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  816308:	e0bff817 	ldw	r2,-32(fp)
  81630c:	10800808 	cmpgei	r2,r2,32
  816310:	1000271e 	bne	r2,zero,8163b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816314:	0005303a 	rdctl	r2,status
  816318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81631c:	e0fffb17 	ldw	r3,-20(fp)
  816320:	00bfff84 	movi	r2,-2
  816324:	1884703a 	and	r2,r3,r2
  816328:	1001703a 	wrctl	status,r2
  
  return context;
  81632c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  816330:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  816334:	008020b4 	movhi	r2,130
  816338:	10aafc04 	addi	r2,r2,-21520
  81633c:	e0fff817 	ldw	r3,-32(fp)
  816340:	180690fa 	slli	r3,r3,3
  816344:	10c5883a 	add	r2,r2,r3
  816348:	e0fffe17 	ldw	r3,-8(fp)
  81634c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  816350:	008020b4 	movhi	r2,130
  816354:	10aafc04 	addi	r2,r2,-21520
  816358:	e0fff817 	ldw	r3,-32(fp)
  81635c:	180690fa 	slli	r3,r3,3
  816360:	10c5883a 	add	r2,r2,r3
  816364:	10800104 	addi	r2,r2,4
  816368:	e0ffff17 	ldw	r3,-4(fp)
  81636c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  816370:	e0bffe17 	ldw	r2,-8(fp)
  816374:	10000526 	beq	r2,zero,81638c <alt_iic_isr_register+0xb4>
  816378:	e0bff817 	ldw	r2,-32(fp)
  81637c:	100b883a 	mov	r5,r2
  816380:	e13ffc17 	ldw	r4,-16(fp)
  816384:	08161780 	call	816178 <alt_ic_irq_enable>
  816388:	00000406 	br	81639c <alt_iic_isr_register+0xc4>
  81638c:	e0bff817 	ldw	r2,-32(fp)
  816390:	100b883a 	mov	r5,r2
  816394:	e13ffc17 	ldw	r4,-16(fp)
  816398:	08162000 	call	816200 <alt_ic_irq_disable>
  81639c:	e0bff715 	stw	r2,-36(fp)
  8163a0:	e0bffa17 	ldw	r2,-24(fp)
  8163a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8163a8:	e0bff917 	ldw	r2,-28(fp)
  8163ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8163b0:	e0bff717 	ldw	r2,-36(fp)
}
  8163b4:	e037883a 	mov	sp,fp
  8163b8:	dfc00117 	ldw	ra,4(sp)
  8163bc:	df000017 	ldw	fp,0(sp)
  8163c0:	dec00204 	addi	sp,sp,8
  8163c4:	f800283a 	ret

008163c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8163c8:	defff904 	addi	sp,sp,-28
  8163cc:	dfc00615 	stw	ra,24(sp)
  8163d0:	df000515 	stw	fp,20(sp)
  8163d4:	df000504 	addi	fp,sp,20
  8163d8:	e13ffc15 	stw	r4,-16(fp)
  8163dc:	e17ffd15 	stw	r5,-12(fp)
  8163e0:	e1bffe15 	stw	r6,-8(fp)
  8163e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8163e8:	e1bfff17 	ldw	r6,-4(fp)
  8163ec:	e17ffe17 	ldw	r5,-8(fp)
  8163f0:	e13ffd17 	ldw	r4,-12(fp)
  8163f4:	08132440 	call	813244 <open>
  8163f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8163fc:	e0bffb17 	ldw	r2,-20(fp)
  816400:	10001c16 	blt	r2,zero,816474 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  816404:	00802074 	movhi	r2,129
  816408:	109ea104 	addi	r2,r2,31364
  81640c:	e0fffb17 	ldw	r3,-20(fp)
  816410:	18c00324 	muli	r3,r3,12
  816414:	10c5883a 	add	r2,r2,r3
  816418:	10c00017 	ldw	r3,0(r2)
  81641c:	e0bffc17 	ldw	r2,-16(fp)
  816420:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  816424:	00802074 	movhi	r2,129
  816428:	109ea104 	addi	r2,r2,31364
  81642c:	e0fffb17 	ldw	r3,-20(fp)
  816430:	18c00324 	muli	r3,r3,12
  816434:	10c5883a 	add	r2,r2,r3
  816438:	10800104 	addi	r2,r2,4
  81643c:	10c00017 	ldw	r3,0(r2)
  816440:	e0bffc17 	ldw	r2,-16(fp)
  816444:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  816448:	00802074 	movhi	r2,129
  81644c:	109ea104 	addi	r2,r2,31364
  816450:	e0fffb17 	ldw	r3,-20(fp)
  816454:	18c00324 	muli	r3,r3,12
  816458:	10c5883a 	add	r2,r2,r3
  81645c:	10800204 	addi	r2,r2,8
  816460:	10c00017 	ldw	r3,0(r2)
  816464:	e0bffc17 	ldw	r2,-16(fp)
  816468:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81646c:	e13ffb17 	ldw	r4,-20(fp)
  816470:	08134d00 	call	8134d0 <alt_release_fd>
  }
} 
  816474:	0001883a 	nop
  816478:	e037883a 	mov	sp,fp
  81647c:	dfc00117 	ldw	ra,4(sp)
  816480:	df000017 	ldw	fp,0(sp)
  816484:	dec00204 	addi	sp,sp,8
  816488:	f800283a 	ret

0081648c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81648c:	defffb04 	addi	sp,sp,-20
  816490:	dfc00415 	stw	ra,16(sp)
  816494:	df000315 	stw	fp,12(sp)
  816498:	df000304 	addi	fp,sp,12
  81649c:	e13ffd15 	stw	r4,-12(fp)
  8164a0:	e17ffe15 	stw	r5,-8(fp)
  8164a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8164a8:	01c07fc4 	movi	r7,511
  8164ac:	01800044 	movi	r6,1
  8164b0:	e17ffd17 	ldw	r5,-12(fp)
  8164b4:	01002074 	movhi	r4,129
  8164b8:	211ea404 	addi	r4,r4,31376
  8164bc:	08163c80 	call	8163c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8164c0:	01c07fc4 	movi	r7,511
  8164c4:	000d883a 	mov	r6,zero
  8164c8:	e17ffe17 	ldw	r5,-8(fp)
  8164cc:	01002074 	movhi	r4,129
  8164d0:	211ea104 	addi	r4,r4,31364
  8164d4:	08163c80 	call	8163c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8164d8:	01c07fc4 	movi	r7,511
  8164dc:	01800044 	movi	r6,1
  8164e0:	e17fff17 	ldw	r5,-4(fp)
  8164e4:	01002074 	movhi	r4,129
  8164e8:	211ea704 	addi	r4,r4,31388
  8164ec:	08163c80 	call	8163c8 <alt_open_fd>
}  
  8164f0:	0001883a 	nop
  8164f4:	e037883a 	mov	sp,fp
  8164f8:	dfc00117 	ldw	ra,4(sp)
  8164fc:	df000017 	ldw	fp,0(sp)
  816500:	dec00204 	addi	sp,sp,8
  816504:	f800283a 	ret

00816508 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  816508:	defffd04 	addi	sp,sp,-12
  81650c:	dfc00215 	stw	ra,8(sp)
  816510:	df000115 	stw	fp,4(sp)
  816514:	df000104 	addi	fp,sp,4
  816518:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81651c:	e13fff17 	ldw	r4,-4(fp)
  816520:	081655c0 	call	81655c <alt_busy_sleep>
}
  816524:	e037883a 	mov	sp,fp
  816528:	dfc00117 	ldw	ra,4(sp)
  81652c:	df000017 	ldw	fp,0(sp)
  816530:	dec00204 	addi	sp,sp,8
  816534:	f800283a 	ret

00816538 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  816538:	deffff04 	addi	sp,sp,-4
  81653c:	df000015 	stw	fp,0(sp)
  816540:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  816544:	000170fa 	wrctl	ienable,zero
}
  816548:	0001883a 	nop
  81654c:	e037883a 	mov	sp,fp
  816550:	df000017 	ldw	fp,0(sp)
  816554:	dec00104 	addi	sp,sp,4
  816558:	f800283a 	ret

0081655c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81655c:	defffa04 	addi	sp,sp,-24
  816560:	dfc00515 	stw	ra,20(sp)
  816564:	df000415 	stw	fp,16(sp)
  816568:	df000404 	addi	fp,sp,16
  81656c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  816570:	008000c4 	movi	r2,3
  816574:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  816578:	e0fffd17 	ldw	r3,-12(fp)
  81657c:	008003f4 	movhi	r2,15
  816580:	10909004 	addi	r2,r2,16960
  816584:	1885383a 	mul	r2,r3,r2
  816588:	100b883a 	mov	r5,r2
  81658c:	0100bef4 	movhi	r4,763
  816590:	213c2004 	addi	r4,r4,-3968
  816594:	08117100 	call	811710 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  816598:	100b883a 	mov	r5,r2
  81659c:	01200034 	movhi	r4,32768
  8165a0:	213fffc4 	addi	r4,r4,-1
  8165a4:	08117100 	call	811710 <__udivsi3>
  8165a8:	100b883a 	mov	r5,r2
  8165ac:	e13fff17 	ldw	r4,-4(fp)
  8165b0:	08117100 	call	811710 <__udivsi3>
  8165b4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8165b8:	e0bffe17 	ldw	r2,-8(fp)
  8165bc:	10002a26 	beq	r2,zero,816668 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8165c0:	e03ffc15 	stw	zero,-16(fp)
  8165c4:	00001706 	br	816624 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8165c8:	00a00034 	movhi	r2,32768
  8165cc:	10bfffc4 	addi	r2,r2,-1
  8165d0:	10bfffc4 	addi	r2,r2,-1
  8165d4:	103ffe1e 	bne	r2,zero,8165d0 <__alt_mem_onchip_mem+0xff80e5d0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8165d8:	e0fffd17 	ldw	r3,-12(fp)
  8165dc:	008003f4 	movhi	r2,15
  8165e0:	10909004 	addi	r2,r2,16960
  8165e4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8165e8:	100b883a 	mov	r5,r2
  8165ec:	0100bef4 	movhi	r4,763
  8165f0:	213c2004 	addi	r4,r4,-3968
  8165f4:	08117100 	call	811710 <__udivsi3>
  8165f8:	100b883a 	mov	r5,r2
  8165fc:	01200034 	movhi	r4,32768
  816600:	213fffc4 	addi	r4,r4,-1
  816604:	08117100 	call	811710 <__udivsi3>
  816608:	1007883a 	mov	r3,r2
  81660c:	e0bfff17 	ldw	r2,-4(fp)
  816610:	10c5c83a 	sub	r2,r2,r3
  816614:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  816618:	e0bffc17 	ldw	r2,-16(fp)
  81661c:	10800044 	addi	r2,r2,1
  816620:	e0bffc15 	stw	r2,-16(fp)
  816624:	e0fffc17 	ldw	r3,-16(fp)
  816628:	e0bffe17 	ldw	r2,-8(fp)
  81662c:	18bfe616 	blt	r3,r2,8165c8 <__alt_mem_onchip_mem+0xff80e5c8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  816630:	e0fffd17 	ldw	r3,-12(fp)
  816634:	008003f4 	movhi	r2,15
  816638:	10909004 	addi	r2,r2,16960
  81663c:	1885383a 	mul	r2,r3,r2
  816640:	100b883a 	mov	r5,r2
  816644:	0100bef4 	movhi	r4,763
  816648:	213c2004 	addi	r4,r4,-3968
  81664c:	08117100 	call	811710 <__udivsi3>
  816650:	1007883a 	mov	r3,r2
  816654:	e0bfff17 	ldw	r2,-4(fp)
  816658:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81665c:	10bfffc4 	addi	r2,r2,-1
  816660:	103ffe1e 	bne	r2,zero,81665c <__alt_mem_onchip_mem+0xff80e65c>
  816664:	00000d06 	br	81669c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  816668:	e0fffd17 	ldw	r3,-12(fp)
  81666c:	008003f4 	movhi	r2,15
  816670:	10909004 	addi	r2,r2,16960
  816674:	1885383a 	mul	r2,r3,r2
  816678:	100b883a 	mov	r5,r2
  81667c:	0100bef4 	movhi	r4,763
  816680:	213c2004 	addi	r4,r4,-3968
  816684:	08117100 	call	811710 <__udivsi3>
  816688:	1007883a 	mov	r3,r2
  81668c:	e0bfff17 	ldw	r2,-4(fp)
  816690:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  816694:	10bfffc4 	addi	r2,r2,-1
  816698:	00bffe16 	blt	zero,r2,816694 <__alt_mem_onchip_mem+0xff80e694>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81669c:	0005883a 	mov	r2,zero
}
  8166a0:	e037883a 	mov	sp,fp
  8166a4:	dfc00117 	ldw	ra,4(sp)
  8166a8:	df000017 	ldw	fp,0(sp)
  8166ac:	dec00204 	addi	sp,sp,8
  8166b0:	f800283a 	ret

008166b4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8166b4:	defffb04 	addi	sp,sp,-20
  8166b8:	df000415 	stw	fp,16(sp)
  8166bc:	df000404 	addi	fp,sp,16
  8166c0:	e13ffe15 	stw	r4,-8(fp)
  8166c4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8166c8:	e0bfff17 	ldw	r2,-4(fp)
  8166cc:	10840070 	cmpltui	r2,r2,4097
  8166d0:	1000021e 	bne	r2,zero,8166dc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8166d4:	00840004 	movi	r2,4096
  8166d8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8166dc:	e0fffe17 	ldw	r3,-8(fp)
  8166e0:	e0bfff17 	ldw	r2,-4(fp)
  8166e4:	1885883a 	add	r2,r3,r2
  8166e8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8166ec:	e0bffe17 	ldw	r2,-8(fp)
  8166f0:	e0bffc15 	stw	r2,-16(fp)
  8166f4:	00000506 	br	81670c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8166f8:	e0bffc17 	ldw	r2,-16(fp)
  8166fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  816700:	e0bffc17 	ldw	r2,-16(fp)
  816704:	10800804 	addi	r2,r2,32
  816708:	e0bffc15 	stw	r2,-16(fp)
  81670c:	e0fffc17 	ldw	r3,-16(fp)
  816710:	e0bffd17 	ldw	r2,-12(fp)
  816714:	18bff836 	bltu	r3,r2,8166f8 <__alt_mem_onchip_mem+0xff80e6f8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  816718:	e0bffe17 	ldw	r2,-8(fp)
  81671c:	108007cc 	andi	r2,r2,31
  816720:	10000226 	beq	r2,zero,81672c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  816724:	e0bffc17 	ldw	r2,-16(fp)
  816728:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81672c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  816730:	0001883a 	nop
  816734:	e037883a 	mov	sp,fp
  816738:	df000017 	ldw	fp,0(sp)
  81673c:	dec00104 	addi	sp,sp,4
  816740:	f800283a 	ret

00816744 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  816744:	defffe04 	addi	sp,sp,-8
  816748:	df000115 	stw	fp,4(sp)
  81674c:	df000104 	addi	fp,sp,4
  816750:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  816754:	e0bfff17 	ldw	r2,-4(fp)
  816758:	10bffe84 	addi	r2,r2,-6
  81675c:	10c00428 	cmpgeui	r3,r2,16
  816760:	18001a1e 	bne	r3,zero,8167cc <alt_exception_cause_generated_bad_addr+0x88>
  816764:	100690ba 	slli	r3,r2,2
  816768:	00802074 	movhi	r2,129
  81676c:	1099df04 	addi	r2,r2,26492
  816770:	1885883a 	add	r2,r3,r2
  816774:	10800017 	ldw	r2,0(r2)
  816778:	1000683a 	jmp	r2
  81677c:	008167bc 	xorhi	r2,zero,1438
  816780:	008167bc 	xorhi	r2,zero,1438
  816784:	008167cc 	andi	r2,zero,1439
  816788:	008167cc 	andi	r2,zero,1439
  81678c:	008167cc 	andi	r2,zero,1439
  816790:	008167bc 	xorhi	r2,zero,1438
  816794:	008167c4 	movi	r2,1439
  816798:	008167cc 	andi	r2,zero,1439
  81679c:	008167bc 	xorhi	r2,zero,1438
  8167a0:	008167bc 	xorhi	r2,zero,1438
  8167a4:	008167cc 	andi	r2,zero,1439
  8167a8:	008167bc 	xorhi	r2,zero,1438
  8167ac:	008167c4 	movi	r2,1439
  8167b0:	008167cc 	andi	r2,zero,1439
  8167b4:	008167cc 	andi	r2,zero,1439
  8167b8:	008167bc 	xorhi	r2,zero,1438
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8167bc:	00800044 	movi	r2,1
  8167c0:	00000306 	br	8167d0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8167c4:	0005883a 	mov	r2,zero
  8167c8:	00000106 	br	8167d0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8167cc:	0005883a 	mov	r2,zero
  }
}
  8167d0:	e037883a 	mov	sp,fp
  8167d4:	df000017 	ldw	fp,0(sp)
  8167d8:	dec00104 	addi	sp,sp,4
  8167dc:	f800283a 	ret

008167e0 <atexit>:
  8167e0:	200b883a 	mov	r5,r4
  8167e4:	000f883a 	mov	r7,zero
  8167e8:	000d883a 	mov	r6,zero
  8167ec:	0009883a 	mov	r4,zero
  8167f0:	08168a81 	jmpi	8168a8 <__register_exitproc>

008167f4 <exit>:
  8167f4:	defffe04 	addi	sp,sp,-8
  8167f8:	000b883a 	mov	r5,zero
  8167fc:	dc000015 	stw	r16,0(sp)
  816800:	dfc00115 	stw	ra,4(sp)
  816804:	2021883a 	mov	r16,r4
  816808:	08169c00 	call	8169c0 <__call_exitprocs>
  81680c:	008020b4 	movhi	r2,130
  816810:	10a39304 	addi	r2,r2,-29108
  816814:	11000017 	ldw	r4,0(r2)
  816818:	20800f17 	ldw	r2,60(r4)
  81681c:	10000126 	beq	r2,zero,816824 <exit+0x30>
  816820:	103ee83a 	callr	r2
  816824:	8009883a 	mov	r4,r16
  816828:	0816b400 	call	816b40 <_exit>

0081682c <memcmp>:
  81682c:	01c000c4 	movi	r7,3
  816830:	3980192e 	bgeu	r7,r6,816898 <memcmp+0x6c>
  816834:	2144b03a 	or	r2,r4,r5
  816838:	11c4703a 	and	r2,r2,r7
  81683c:	10000f26 	beq	r2,zero,81687c <memcmp+0x50>
  816840:	20800003 	ldbu	r2,0(r4)
  816844:	28c00003 	ldbu	r3,0(r5)
  816848:	10c0151e 	bne	r2,r3,8168a0 <memcmp+0x74>
  81684c:	31bfff84 	addi	r6,r6,-2
  816850:	01ffffc4 	movi	r7,-1
  816854:	00000406 	br	816868 <memcmp+0x3c>
  816858:	20800003 	ldbu	r2,0(r4)
  81685c:	28c00003 	ldbu	r3,0(r5)
  816860:	31bfffc4 	addi	r6,r6,-1
  816864:	10c00e1e 	bne	r2,r3,8168a0 <memcmp+0x74>
  816868:	21000044 	addi	r4,r4,1
  81686c:	29400044 	addi	r5,r5,1
  816870:	31fff91e 	bne	r6,r7,816858 <__alt_mem_onchip_mem+0xff80e858>
  816874:	0005883a 	mov	r2,zero
  816878:	f800283a 	ret
  81687c:	20c00017 	ldw	r3,0(r4)
  816880:	28800017 	ldw	r2,0(r5)
  816884:	18bfee1e 	bne	r3,r2,816840 <__alt_mem_onchip_mem+0xff80e840>
  816888:	31bfff04 	addi	r6,r6,-4
  81688c:	21000104 	addi	r4,r4,4
  816890:	29400104 	addi	r5,r5,4
  816894:	39bff936 	bltu	r7,r6,81687c <__alt_mem_onchip_mem+0xff80e87c>
  816898:	303fe91e 	bne	r6,zero,816840 <__alt_mem_onchip_mem+0xff80e840>
  81689c:	003ff506 	br	816874 <__alt_mem_onchip_mem+0xff80e874>
  8168a0:	10c5c83a 	sub	r2,r2,r3
  8168a4:	f800283a 	ret

008168a8 <__register_exitproc>:
  8168a8:	defffa04 	addi	sp,sp,-24
  8168ac:	dc000315 	stw	r16,12(sp)
  8168b0:	040020b4 	movhi	r16,130
  8168b4:	84239304 	addi	r16,r16,-29108
  8168b8:	80c00017 	ldw	r3,0(r16)
  8168bc:	dc400415 	stw	r17,16(sp)
  8168c0:	dfc00515 	stw	ra,20(sp)
  8168c4:	18805217 	ldw	r2,328(r3)
  8168c8:	2023883a 	mov	r17,r4
  8168cc:	10003726 	beq	r2,zero,8169ac <__register_exitproc+0x104>
  8168d0:	10c00117 	ldw	r3,4(r2)
  8168d4:	010007c4 	movi	r4,31
  8168d8:	20c00e16 	blt	r4,r3,816914 <__register_exitproc+0x6c>
  8168dc:	1a000044 	addi	r8,r3,1
  8168e0:	8800221e 	bne	r17,zero,81696c <__register_exitproc+0xc4>
  8168e4:	18c00084 	addi	r3,r3,2
  8168e8:	18c7883a 	add	r3,r3,r3
  8168ec:	18c7883a 	add	r3,r3,r3
  8168f0:	12000115 	stw	r8,4(r2)
  8168f4:	10c7883a 	add	r3,r2,r3
  8168f8:	19400015 	stw	r5,0(r3)
  8168fc:	0005883a 	mov	r2,zero
  816900:	dfc00517 	ldw	ra,20(sp)
  816904:	dc400417 	ldw	r17,16(sp)
  816908:	dc000317 	ldw	r16,12(sp)
  81690c:	dec00604 	addi	sp,sp,24
  816910:	f800283a 	ret
  816914:	00800034 	movhi	r2,0
  816918:	10800004 	addi	r2,r2,0
  81691c:	10002626 	beq	r2,zero,8169b8 <__register_exitproc+0x110>
  816920:	01006404 	movi	r4,400
  816924:	d9400015 	stw	r5,0(sp)
  816928:	d9800115 	stw	r6,4(sp)
  81692c:	d9c00215 	stw	r7,8(sp)
  816930:	00000000 	call	0 <__reset-0x800000>
  816934:	d9400017 	ldw	r5,0(sp)
  816938:	d9800117 	ldw	r6,4(sp)
  81693c:	d9c00217 	ldw	r7,8(sp)
  816940:	10001d26 	beq	r2,zero,8169b8 <__register_exitproc+0x110>
  816944:	81000017 	ldw	r4,0(r16)
  816948:	10000115 	stw	zero,4(r2)
  81694c:	02000044 	movi	r8,1
  816950:	22405217 	ldw	r9,328(r4)
  816954:	0007883a 	mov	r3,zero
  816958:	12400015 	stw	r9,0(r2)
  81695c:	20805215 	stw	r2,328(r4)
  816960:	10006215 	stw	zero,392(r2)
  816964:	10006315 	stw	zero,396(r2)
  816968:	883fde26 	beq	r17,zero,8168e4 <__alt_mem_onchip_mem+0xff80e8e4>
  81696c:	18c9883a 	add	r4,r3,r3
  816970:	2109883a 	add	r4,r4,r4
  816974:	1109883a 	add	r4,r2,r4
  816978:	21802215 	stw	r6,136(r4)
  81697c:	01800044 	movi	r6,1
  816980:	12406217 	ldw	r9,392(r2)
  816984:	30cc983a 	sll	r6,r6,r3
  816988:	4992b03a 	or	r9,r9,r6
  81698c:	12406215 	stw	r9,392(r2)
  816990:	21c04215 	stw	r7,264(r4)
  816994:	01000084 	movi	r4,2
  816998:	893fd21e 	bne	r17,r4,8168e4 <__alt_mem_onchip_mem+0xff80e8e4>
  81699c:	11006317 	ldw	r4,396(r2)
  8169a0:	218cb03a 	or	r6,r4,r6
  8169a4:	11806315 	stw	r6,396(r2)
  8169a8:	003fce06 	br	8168e4 <__alt_mem_onchip_mem+0xff80e8e4>
  8169ac:	18805304 	addi	r2,r3,332
  8169b0:	18805215 	stw	r2,328(r3)
  8169b4:	003fc606 	br	8168d0 <__alt_mem_onchip_mem+0xff80e8d0>
  8169b8:	00bfffc4 	movi	r2,-1
  8169bc:	003fd006 	br	816900 <__alt_mem_onchip_mem+0xff80e900>

008169c0 <__call_exitprocs>:
  8169c0:	defff504 	addi	sp,sp,-44
  8169c4:	df000915 	stw	fp,36(sp)
  8169c8:	dd400615 	stw	r21,24(sp)
  8169cc:	dc800315 	stw	r18,12(sp)
  8169d0:	dfc00a15 	stw	ra,40(sp)
  8169d4:	ddc00815 	stw	r23,32(sp)
  8169d8:	dd800715 	stw	r22,28(sp)
  8169dc:	dd000515 	stw	r20,20(sp)
  8169e0:	dcc00415 	stw	r19,16(sp)
  8169e4:	dc400215 	stw	r17,8(sp)
  8169e8:	dc000115 	stw	r16,4(sp)
  8169ec:	d9000015 	stw	r4,0(sp)
  8169f0:	2839883a 	mov	fp,r5
  8169f4:	04800044 	movi	r18,1
  8169f8:	057fffc4 	movi	r21,-1
  8169fc:	008020b4 	movhi	r2,130
  816a00:	10a39304 	addi	r2,r2,-29108
  816a04:	12000017 	ldw	r8,0(r2)
  816a08:	45005217 	ldw	r20,328(r8)
  816a0c:	44c05204 	addi	r19,r8,328
  816a10:	a0001c26 	beq	r20,zero,816a84 <__call_exitprocs+0xc4>
  816a14:	a0800117 	ldw	r2,4(r20)
  816a18:	15ffffc4 	addi	r23,r2,-1
  816a1c:	b8000d16 	blt	r23,zero,816a54 <__call_exitprocs+0x94>
  816a20:	14000044 	addi	r16,r2,1
  816a24:	8421883a 	add	r16,r16,r16
  816a28:	8421883a 	add	r16,r16,r16
  816a2c:	84402004 	addi	r17,r16,128
  816a30:	a463883a 	add	r17,r20,r17
  816a34:	a421883a 	add	r16,r20,r16
  816a38:	e0001e26 	beq	fp,zero,816ab4 <__call_exitprocs+0xf4>
  816a3c:	80804017 	ldw	r2,256(r16)
  816a40:	e0801c26 	beq	fp,r2,816ab4 <__call_exitprocs+0xf4>
  816a44:	bdffffc4 	addi	r23,r23,-1
  816a48:	843fff04 	addi	r16,r16,-4
  816a4c:	8c7fff04 	addi	r17,r17,-4
  816a50:	bd7ff91e 	bne	r23,r21,816a38 <__alt_mem_onchip_mem+0xff80ea38>
  816a54:	00800034 	movhi	r2,0
  816a58:	10800004 	addi	r2,r2,0
  816a5c:	10000926 	beq	r2,zero,816a84 <__call_exitprocs+0xc4>
  816a60:	a0800117 	ldw	r2,4(r20)
  816a64:	1000301e 	bne	r2,zero,816b28 <__call_exitprocs+0x168>
  816a68:	a0800017 	ldw	r2,0(r20)
  816a6c:	10003226 	beq	r2,zero,816b38 <__call_exitprocs+0x178>
  816a70:	a009883a 	mov	r4,r20
  816a74:	98800015 	stw	r2,0(r19)
  816a78:	00000000 	call	0 <__reset-0x800000>
  816a7c:	9d000017 	ldw	r20,0(r19)
  816a80:	a03fe41e 	bne	r20,zero,816a14 <__alt_mem_onchip_mem+0xff80ea14>
  816a84:	dfc00a17 	ldw	ra,40(sp)
  816a88:	df000917 	ldw	fp,36(sp)
  816a8c:	ddc00817 	ldw	r23,32(sp)
  816a90:	dd800717 	ldw	r22,28(sp)
  816a94:	dd400617 	ldw	r21,24(sp)
  816a98:	dd000517 	ldw	r20,20(sp)
  816a9c:	dcc00417 	ldw	r19,16(sp)
  816aa0:	dc800317 	ldw	r18,12(sp)
  816aa4:	dc400217 	ldw	r17,8(sp)
  816aa8:	dc000117 	ldw	r16,4(sp)
  816aac:	dec00b04 	addi	sp,sp,44
  816ab0:	f800283a 	ret
  816ab4:	a0800117 	ldw	r2,4(r20)
  816ab8:	80c00017 	ldw	r3,0(r16)
  816abc:	10bfffc4 	addi	r2,r2,-1
  816ac0:	15c01426 	beq	r2,r23,816b14 <__call_exitprocs+0x154>
  816ac4:	80000015 	stw	zero,0(r16)
  816ac8:	183fde26 	beq	r3,zero,816a44 <__alt_mem_onchip_mem+0xff80ea44>
  816acc:	95c8983a 	sll	r4,r18,r23
  816ad0:	a0806217 	ldw	r2,392(r20)
  816ad4:	a5800117 	ldw	r22,4(r20)
  816ad8:	2084703a 	and	r2,r4,r2
  816adc:	10000b26 	beq	r2,zero,816b0c <__call_exitprocs+0x14c>
  816ae0:	a0806317 	ldw	r2,396(r20)
  816ae4:	2088703a 	and	r4,r4,r2
  816ae8:	20000c1e 	bne	r4,zero,816b1c <__call_exitprocs+0x15c>
  816aec:	89400017 	ldw	r5,0(r17)
  816af0:	d9000017 	ldw	r4,0(sp)
  816af4:	183ee83a 	callr	r3
  816af8:	a0800117 	ldw	r2,4(r20)
  816afc:	15bfbf1e 	bne	r2,r22,8169fc <__alt_mem_onchip_mem+0xff80e9fc>
  816b00:	98800017 	ldw	r2,0(r19)
  816b04:	153fcf26 	beq	r2,r20,816a44 <__alt_mem_onchip_mem+0xff80ea44>
  816b08:	003fbc06 	br	8169fc <__alt_mem_onchip_mem+0xff80e9fc>
  816b0c:	183ee83a 	callr	r3
  816b10:	003ff906 	br	816af8 <__alt_mem_onchip_mem+0xff80eaf8>
  816b14:	a5c00115 	stw	r23,4(r20)
  816b18:	003feb06 	br	816ac8 <__alt_mem_onchip_mem+0xff80eac8>
  816b1c:	89000017 	ldw	r4,0(r17)
  816b20:	183ee83a 	callr	r3
  816b24:	003ff406 	br	816af8 <__alt_mem_onchip_mem+0xff80eaf8>
  816b28:	a0800017 	ldw	r2,0(r20)
  816b2c:	a027883a 	mov	r19,r20
  816b30:	1029883a 	mov	r20,r2
  816b34:	003fb606 	br	816a10 <__alt_mem_onchip_mem+0xff80ea10>
  816b38:	0005883a 	mov	r2,zero
  816b3c:	003ffb06 	br	816b2c <__alt_mem_onchip_mem+0xff80eb2c>

00816b40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  816b40:	defffd04 	addi	sp,sp,-12
  816b44:	df000215 	stw	fp,8(sp)
  816b48:	df000204 	addi	fp,sp,8
  816b4c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  816b50:	0001883a 	nop
  816b54:	e0bfff17 	ldw	r2,-4(fp)
  816b58:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  816b5c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  816b60:	10000226 	beq	r2,zero,816b6c <_exit+0x2c>
    ALT_SIM_FAIL();
  816b64:	002af070 	cmpltui	zero,zero,43969
  816b68:	00000106 	br	816b70 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  816b6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  816b70:	003fff06 	br	816b70 <__alt_mem_onchip_mem+0xff80eb70>
