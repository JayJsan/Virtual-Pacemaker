/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */
// Remember to build the project if includes aren't working
#include <system.h> // Used for referencing symbolic names
#include <altera_avalon_pio_regs.h> // Used for PIO functions
#include <altera_avalon_uart_regs.h> // Used for UART functions
#include <stdio.h>
#include <sys/alt_irq.h> // Used to register interrupts
#include <alt_types.h> // for
#include <string.h>
#include <time.h>

#define PULSE_MODE_SWITCH 0
#define IMPLEMENTAITON_MODE_SWITCH 1
#define KEY0 0

void buttons_interrupts_function(void* context, alt_u32 id)
{
	int* temp = (int*) context; // Cast the context before using it
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);

	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);

	if (*temp & (1 << 0)) {
		printf("KEY0!");
	}

	printf("button pressed: %i\n", *temp);

}


int main(void)
{
	printf("Initialised.\n");

	unsigned int switch_value = 0;
	int button_value = 1;
	void* button_context = (void*) &button_value; // Cast before passing context to isr

	//========= 	  INTERRUPTS  	   =========

	// Clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);

	// Enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);

	// Register the isr
	alt_irq_register(KEYS_IRQ, button_context, buttons_interrupts_function);

	//========= 	  INTERRUPTS  	   =========



	printf("Entering Loop.\n");
	while(1) {
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);

		//printf("Switch Value: %d\n", switch_value);


		// ========= 	  PULSE MODES 	  =========
		if (switch_value & (1 << PULSE_MODE_SWITCH)) {
			// SW0 is Active
			printf("SW0 On.\n");
		} else if (!(switch_value & (1 << PULSE_MODE_SWITCH))) {
			// SW0 is Active
			//printf("SW0 Off.\n");
		}
		// ========= 	  PULSE MODES 	  =========

		// ========= IMPLEMENTATION MODES =========
		if (switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH)) {
			// SW1 is Active
			printf("SW1 On\n");
		} else if (!(switch_value & (1 << IMPLEMENTAITON_MODE_SWITCH))) {
			// SW0 is Active
			//printf("SW1 Off.\n");
		}
		// ========= IMPLEMENTATION MODES =========

		//usleep(1000000); // FOR DEBUGGING -- DELAYING BY 1 SECOND -- MAKE SURE TO REMOVE LATER
	}
	printf("Exiting Loop.\n");
	return 0;
}
